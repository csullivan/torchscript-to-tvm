File test_street_small.jpg exists, skip.
fn (%input0: Tensor[(1, 3, 300, 300), float32], %model.backbone.body.conv1.weight: Tensor[(64, 3, 7, 7), float32], %model.backbone.body.bn1.weight: Tensor[(64), float32], %model.backbone.body.bn1.running_var: Tensor[(64), float32], %model.backbone.body.bn1.bias: Tensor[(64), float32], %model.backbone.body.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.0.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.downsample.1.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.1.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.1.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.1.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.2.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.2.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.2.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32], %model.backbone.body.layer2.0.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.0.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.0.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %model.backbone.body.layer2.0.downsample.1.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.1.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.1.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.1.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.2.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.2.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.2.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.3.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.3.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.3.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.body.layer3.0.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.0.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.0.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32], %model.backbone.body.layer3.0.downsample.1.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.1.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.1.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.1.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.2.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.2.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.2.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.3.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.3.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.3.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.4.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.4.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.4.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.5.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.5.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.5.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32], %model.backbone.body.layer4.0.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.0.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.0.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32], %model.backbone.body.layer4.0.downsample.1.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.1.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.1.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.1.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.2.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.2.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.2.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_mean: Tensor[(2048), float32], %model.backbone.fpn.inner_blocks.0.weight: Tensor[(256, 256, 1, 1), float32], %model.backbone.fpn.inner_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.fpn.inner_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.2.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.fpn.inner_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.3.weight: Tensor[(256, 2048, 1, 1), float32], %model.backbone.fpn.inner_blocks.3.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.0.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.1.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.3.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.3.bias: Tensor[(256), float32], %model.rpn.head.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.rpn.head.conv.bias: Tensor[(256), float32], %model.rpn.head.cls_logits.weight: Tensor[(3, 256, 1, 1), float32], %model.rpn.head.cls_logits.bias: Tensor[(3), float32], %model.rpn.head.bbox_pred.weight: Tensor[(12, 256, 1, 1), float32], %model.rpn.head.bbox_pred.bias: Tensor[(12), float32], %model.roi_heads.box_head.fc6.weight: Tensor[(1024, 12544), float32], %model.roi_heads.box_head.fc6.bias: Tensor[(1024), float32], %model.roi_heads.box_head.fc7.weight: Tensor[(1024, 1024), float32], %model.roi_heads.box_head.fc7.bias: Tensor[(1024), float32], %model.roi_heads.box_predictor.cls_score.weight: Tensor[(91, 1024), float32], %model.roi_heads.box_predictor.cls_score.bias: Tensor[(91), float32], %model.roi_heads.box_predictor.bbox_pred.weight: Tensor[(364, 1024), float32], %model.roi_heads.box_predictor.bbox_pred.bias: Tensor[(364), float32], %model.roi_heads.mask_head.mask_fcn1.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn1.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn2.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn2.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn3.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn3.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn4.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn4.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.conv5_mask.weight: Tensor[(256, 256, 2, 2), float32], %model.roi_heads.mask_predictor.conv5_mask.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.weight: Tensor[(91, 256, 1, 1), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.bias: Tensor[(91), float32]) {
  %0 = split(%input0, indices_or_sections=1);
  %1 = %0.0;
  %2 = squeeze(%1, axis=[0]);
  %3 = (%2,);
  %4 = %3.0;
  %5 = strided_slice(meta[relay.Constant][0], begin=[0], end=[3], strides=[1]);
  %6 = expand_dims(%5, axis=1);
  %7 = expand_dims(%6, axis=2);
  %8 = subtract(%4, %7);
  %9 = strided_slice(meta[relay.Constant][1], begin=[0], end=[3], strides=[1]);
  %10 = expand_dims(%9, axis=1);
  %11 = expand_dims(%10, axis=2);
  %12 = divide(%8, %11);
  %13 = expand_dims(%12, axis=0);
  %14 = image.resize(%13, size=[800, 800]);
  %15 = take(%14, 0, axis=0);
  %16 = nn.pad(%15, pad_width=[[0, 0], [0, 0], [0, 0]]);
  %17 = (%16,);
  %18 = stack(%17);
  %19 = (%18, 800, 800);
  %20 = %19.0;
  %21 = nn.conv2d(%20, %model.backbone.body.conv1.weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]);
  %22 = reshape(%model.backbone.body.bn1.weight, newshape=[1, -1, 1, 1]);
  %23 = reshape(%model.backbone.body.bn1.running_var, newshape=[1, -1, 1, 1]);
  %24 = add(%23, 0f);
  %25 = rsqrt(%24);
  %26 = multiply(%22, %25);
  %27 = multiply(%21, %26);
  %28 = reshape(%model.backbone.body.bn1.bias, newshape=[1, -1, 1, 1]);
  %29 = reshape(%model.backbone.body.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %30 = multiply(%29, %26);
  %31 = subtract(%28, %30);
  %32 = add(%27, %31);
  %33 = nn.relu(%32);
  %34 = nn.max_pool2d(%33, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]);
  %35 = nn.conv2d(%34, %model.backbone.body.layer1.0.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %36 = reshape(%model.backbone.body.layer1.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %37 = reshape(%model.backbone.body.layer1.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %38 = add(%37, 0f);
  %39 = rsqrt(%38);
  %40 = multiply(%36, %39);
  %41 = multiply(%35, %40);
  %42 = reshape(%model.backbone.body.layer1.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %43 = reshape(%model.backbone.body.layer1.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %44 = multiply(%43, %40);
  %45 = subtract(%42, %44);
  %46 = add(%41, %45);
  %47 = nn.relu(%46);
  %48 = nn.conv2d(%47, %model.backbone.body.layer1.0.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %49 = reshape(%model.backbone.body.layer1.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %50 = reshape(%model.backbone.body.layer1.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %51 = add(%50, 0f);
  %52 = rsqrt(%51);
  %53 = multiply(%49, %52);
  %54 = multiply(%48, %53);
  %55 = reshape(%model.backbone.body.layer1.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %56 = reshape(%model.backbone.body.layer1.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %57 = multiply(%56, %53);
  %58 = subtract(%55, %57);
  %59 = add(%54, %58);
  %60 = nn.relu(%59);
  %61 = nn.conv2d(%60, %model.backbone.body.layer1.0.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %62 = reshape(%model.backbone.body.layer1.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %63 = reshape(%model.backbone.body.layer1.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %64 = add(%63, 0f);
  %65 = rsqrt(%64);
  %66 = multiply(%62, %65);
  %67 = multiply(%61, %66);
  %68 = reshape(%model.backbone.body.layer1.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %69 = reshape(%model.backbone.body.layer1.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %70 = multiply(%69, %66);
  %71 = subtract(%68, %70);
  %72 = add(%67, %71);
  %73 = nn.conv2d(%34, %model.backbone.body.layer1.0.downsample.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %74 = reshape(%model.backbone.body.layer1.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %75 = reshape(%model.backbone.body.layer1.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %76 = add(%75, 0f);
  %77 = rsqrt(%76);
  %78 = multiply(%74, %77);
  %79 = multiply(%73, %78);
  %80 = reshape(%model.backbone.body.layer1.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %81 = reshape(%model.backbone.body.layer1.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %82 = multiply(%81, %78);
  %83 = subtract(%80, %82);
  %84 = add(%79, %83);
  %85 = add(%72, %84);
  %86 = nn.relu(%85);
  %87 = nn.conv2d(%86, %model.backbone.body.layer1.1.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %88 = reshape(%model.backbone.body.layer1.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %89 = reshape(%model.backbone.body.layer1.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %90 = add(%89, 0f);
  %91 = rsqrt(%90);
  %92 = multiply(%88, %91);
  %93 = multiply(%87, %92);
  %94 = reshape(%model.backbone.body.layer1.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %95 = reshape(%model.backbone.body.layer1.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %96 = multiply(%95, %92);
  %97 = subtract(%94, %96);
  %98 = add(%93, %97);
  %99 = nn.relu(%98);
  %100 = nn.conv2d(%99, %model.backbone.body.layer1.1.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %101 = reshape(%model.backbone.body.layer1.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %102 = reshape(%model.backbone.body.layer1.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %103 = add(%102, 0f);
  %104 = rsqrt(%103);
  %105 = multiply(%101, %104);
  %106 = multiply(%100, %105);
  %107 = reshape(%model.backbone.body.layer1.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %108 = reshape(%model.backbone.body.layer1.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %109 = multiply(%108, %105);
  %110 = subtract(%107, %109);
  %111 = add(%106, %110);
  %112 = nn.relu(%111);
  %113 = nn.conv2d(%112, %model.backbone.body.layer1.1.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %114 = reshape(%model.backbone.body.layer1.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %115 = reshape(%model.backbone.body.layer1.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %116 = add(%115, 0f);
  %117 = rsqrt(%116);
  %118 = multiply(%114, %117);
  %119 = multiply(%113, %118);
  %120 = reshape(%model.backbone.body.layer1.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %121 = reshape(%model.backbone.body.layer1.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %122 = multiply(%121, %118);
  %123 = subtract(%120, %122);
  %124 = add(%119, %123);
  %125 = add(%124, %86);
  %126 = nn.relu(%125);
  %127 = nn.conv2d(%126, %model.backbone.body.layer1.2.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %128 = reshape(%model.backbone.body.layer1.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %129 = reshape(%model.backbone.body.layer1.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %130 = add(%129, 0f);
  %131 = rsqrt(%130);
  %132 = multiply(%128, %131);
  %133 = multiply(%127, %132);
  %134 = reshape(%model.backbone.body.layer1.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %135 = reshape(%model.backbone.body.layer1.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %136 = multiply(%135, %132);
  %137 = subtract(%134, %136);
  %138 = add(%133, %137);
  %139 = nn.relu(%138);
  %140 = nn.conv2d(%139, %model.backbone.body.layer1.2.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %141 = reshape(%model.backbone.body.layer1.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %142 = reshape(%model.backbone.body.layer1.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %143 = add(%142, 0f);
  %144 = rsqrt(%143);
  %145 = multiply(%141, %144);
  %146 = multiply(%140, %145);
  %147 = reshape(%model.backbone.body.layer1.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %148 = reshape(%model.backbone.body.layer1.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %149 = multiply(%148, %145);
  %150 = subtract(%147, %149);
  %151 = add(%146, %150);
  %152 = nn.relu(%151);
  %153 = nn.conv2d(%152, %model.backbone.body.layer1.2.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %154 = reshape(%model.backbone.body.layer1.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %155 = reshape(%model.backbone.body.layer1.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %156 = add(%155, 0f);
  %157 = rsqrt(%156);
  %158 = multiply(%154, %157);
  %159 = multiply(%153, %158);
  %160 = reshape(%model.backbone.body.layer1.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %161 = reshape(%model.backbone.body.layer1.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %162 = multiply(%161, %158);
  %163 = subtract(%160, %162);
  %164 = add(%159, %163);
  %165 = add(%164, %126);
  %166 = nn.relu(%165);
  %167 = nn.conv2d(%166, %model.backbone.body.layer2.0.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %168 = reshape(%model.backbone.body.layer2.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %169 = reshape(%model.backbone.body.layer2.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %170 = add(%169, 0f);
  %171 = rsqrt(%170);
  %172 = multiply(%168, %171);
  %173 = multiply(%167, %172);
  %174 = reshape(%model.backbone.body.layer2.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %175 = reshape(%model.backbone.body.layer2.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %176 = multiply(%175, %172);
  %177 = subtract(%174, %176);
  %178 = add(%173, %177);
  %179 = nn.relu(%178);
  %180 = nn.conv2d(%179, %model.backbone.body.layer2.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %181 = reshape(%model.backbone.body.layer2.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %182 = reshape(%model.backbone.body.layer2.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %183 = add(%182, 0f);
  %184 = rsqrt(%183);
  %185 = multiply(%181, %184);
  %186 = multiply(%180, %185);
  %187 = reshape(%model.backbone.body.layer2.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %188 = reshape(%model.backbone.body.layer2.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %189 = multiply(%188, %185);
  %190 = subtract(%187, %189);
  %191 = add(%186, %190);
  %192 = nn.relu(%191);
  %193 = nn.conv2d(%192, %model.backbone.body.layer2.0.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %194 = reshape(%model.backbone.body.layer2.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %195 = reshape(%model.backbone.body.layer2.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %196 = add(%195, 0f);
  %197 = rsqrt(%196);
  %198 = multiply(%194, %197);
  %199 = multiply(%193, %198);
  %200 = reshape(%model.backbone.body.layer2.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %201 = reshape(%model.backbone.body.layer2.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %202 = multiply(%201, %198);
  %203 = subtract(%200, %202);
  %204 = add(%199, %203);
  %205 = nn.conv2d(%166, %model.backbone.body.layer2.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %206 = reshape(%model.backbone.body.layer2.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %207 = reshape(%model.backbone.body.layer2.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %208 = add(%207, 0f);
  %209 = rsqrt(%208);
  %210 = multiply(%206, %209);
  %211 = multiply(%205, %210);
  %212 = reshape(%model.backbone.body.layer2.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %213 = reshape(%model.backbone.body.layer2.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %214 = multiply(%213, %210);
  %215 = subtract(%212, %214);
  %216 = add(%211, %215);
  %217 = add(%204, %216);
  %218 = nn.relu(%217);
  %219 = nn.conv2d(%218, %model.backbone.body.layer2.1.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %220 = reshape(%model.backbone.body.layer2.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %221 = reshape(%model.backbone.body.layer2.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %222 = add(%221, 0f);
  %223 = rsqrt(%222);
  %224 = multiply(%220, %223);
  %225 = multiply(%219, %224);
  %226 = reshape(%model.backbone.body.layer2.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %227 = reshape(%model.backbone.body.layer2.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %228 = multiply(%227, %224);
  %229 = subtract(%226, %228);
  %230 = add(%225, %229);
  %231 = nn.relu(%230);
  %232 = nn.conv2d(%231, %model.backbone.body.layer2.1.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %233 = reshape(%model.backbone.body.layer2.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %234 = reshape(%model.backbone.body.layer2.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %235 = add(%234, 0f);
  %236 = rsqrt(%235);
  %237 = multiply(%233, %236);
  %238 = multiply(%232, %237);
  %239 = reshape(%model.backbone.body.layer2.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %240 = reshape(%model.backbone.body.layer2.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %241 = multiply(%240, %237);
  %242 = subtract(%239, %241);
  %243 = add(%238, %242);
  %244 = nn.relu(%243);
  %245 = nn.conv2d(%244, %model.backbone.body.layer2.1.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %246 = reshape(%model.backbone.body.layer2.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %247 = reshape(%model.backbone.body.layer2.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %248 = add(%247, 0f);
  %249 = rsqrt(%248);
  %250 = multiply(%246, %249);
  %251 = multiply(%245, %250);
  %252 = reshape(%model.backbone.body.layer2.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %253 = reshape(%model.backbone.body.layer2.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %254 = multiply(%253, %250);
  %255 = subtract(%252, %254);
  %256 = add(%251, %255);
  %257 = add(%256, %218);
  %258 = nn.relu(%257);
  %259 = nn.conv2d(%258, %model.backbone.body.layer2.2.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %260 = reshape(%model.backbone.body.layer2.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %261 = reshape(%model.backbone.body.layer2.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %262 = add(%261, 0f);
  %263 = rsqrt(%262);
  %264 = multiply(%260, %263);
  %265 = multiply(%259, %264);
  %266 = reshape(%model.backbone.body.layer2.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %267 = reshape(%model.backbone.body.layer2.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %268 = multiply(%267, %264);
  %269 = subtract(%266, %268);
  %270 = add(%265, %269);
  %271 = nn.relu(%270);
  %272 = nn.conv2d(%271, %model.backbone.body.layer2.2.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %273 = reshape(%model.backbone.body.layer2.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %274 = reshape(%model.backbone.body.layer2.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %275 = add(%274, 0f);
  %276 = rsqrt(%275);
  %277 = multiply(%273, %276);
  %278 = multiply(%272, %277);
  %279 = reshape(%model.backbone.body.layer2.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %280 = reshape(%model.backbone.body.layer2.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %281 = multiply(%280, %277);
  %282 = subtract(%279, %281);
  %283 = add(%278, %282);
  %284 = nn.relu(%283);
  %285 = nn.conv2d(%284, %model.backbone.body.layer2.2.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %286 = reshape(%model.backbone.body.layer2.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %287 = reshape(%model.backbone.body.layer2.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %288 = add(%287, 0f);
  %289 = rsqrt(%288);
  %290 = multiply(%286, %289);
  %291 = multiply(%285, %290);
  %292 = reshape(%model.backbone.body.layer2.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %293 = reshape(%model.backbone.body.layer2.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %294 = multiply(%293, %290);
  %295 = subtract(%292, %294);
  %296 = add(%291, %295);
  %297 = add(%296, %258);
  %298 = nn.relu(%297);
  %299 = nn.conv2d(%298, %model.backbone.body.layer2.3.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %300 = reshape(%model.backbone.body.layer2.3.bn1.weight, newshape=[1, -1, 1, 1]);
  %301 = reshape(%model.backbone.body.layer2.3.bn1.running_var, newshape=[1, -1, 1, 1]);
  %302 = add(%301, 0f);
  %303 = rsqrt(%302);
  %304 = multiply(%300, %303);
  %305 = multiply(%299, %304);
  %306 = reshape(%model.backbone.body.layer2.3.bn1.bias, newshape=[1, -1, 1, 1]);
  %307 = reshape(%model.backbone.body.layer2.3.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %308 = multiply(%307, %304);
  %309 = subtract(%306, %308);
  %310 = add(%305, %309);
  %311 = nn.relu(%310);
  %312 = nn.conv2d(%311, %model.backbone.body.layer2.3.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %313 = reshape(%model.backbone.body.layer2.3.bn2.weight, newshape=[1, -1, 1, 1]);
  %314 = reshape(%model.backbone.body.layer2.3.bn2.running_var, newshape=[1, -1, 1, 1]);
  %315 = add(%314, 0f);
  %316 = rsqrt(%315);
  %317 = multiply(%313, %316);
  %318 = multiply(%312, %317);
  %319 = reshape(%model.backbone.body.layer2.3.bn2.bias, newshape=[1, -1, 1, 1]);
  %320 = reshape(%model.backbone.body.layer2.3.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %321 = multiply(%320, %317);
  %322 = subtract(%319, %321);
  %323 = add(%318, %322);
  %324 = nn.relu(%323);
  %325 = nn.conv2d(%324, %model.backbone.body.layer2.3.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %326 = reshape(%model.backbone.body.layer2.3.bn3.weight, newshape=[1, -1, 1, 1]);
  %327 = reshape(%model.backbone.body.layer2.3.bn3.running_var, newshape=[1, -1, 1, 1]);
  %328 = add(%327, 0f);
  %329 = rsqrt(%328);
  %330 = multiply(%326, %329);
  %331 = multiply(%325, %330);
  %332 = reshape(%model.backbone.body.layer2.3.bn3.bias, newshape=[1, -1, 1, 1]);
  %333 = reshape(%model.backbone.body.layer2.3.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %334 = multiply(%333, %330);
  %335 = subtract(%332, %334);
  %336 = add(%331, %335);
  %337 = add(%336, %298);
  %338 = nn.relu(%337);
  %339 = nn.conv2d(%338, %model.backbone.body.layer3.0.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %340 = reshape(%model.backbone.body.layer3.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %341 = reshape(%model.backbone.body.layer3.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %342 = add(%341, 0f);
  %343 = rsqrt(%342);
  %344 = multiply(%340, %343);
  %345 = multiply(%339, %344);
  %346 = reshape(%model.backbone.body.layer3.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %347 = reshape(%model.backbone.body.layer3.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %348 = multiply(%347, %344);
  %349 = subtract(%346, %348);
  %350 = add(%345, %349);
  %351 = nn.relu(%350);
  %352 = nn.conv2d(%351, %model.backbone.body.layer3.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %353 = reshape(%model.backbone.body.layer3.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %354 = reshape(%model.backbone.body.layer3.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %355 = add(%354, 0f);
  %356 = rsqrt(%355);
  %357 = multiply(%353, %356);
  %358 = multiply(%352, %357);
  %359 = reshape(%model.backbone.body.layer3.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %360 = reshape(%model.backbone.body.layer3.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %361 = multiply(%360, %357);
  %362 = subtract(%359, %361);
  %363 = add(%358, %362);
  %364 = nn.relu(%363);
  %365 = nn.conv2d(%364, %model.backbone.body.layer3.0.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %366 = reshape(%model.backbone.body.layer3.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %367 = reshape(%model.backbone.body.layer3.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %368 = add(%367, 0f);
  %369 = rsqrt(%368);
  %370 = multiply(%366, %369);
  %371 = multiply(%365, %370);
  %372 = reshape(%model.backbone.body.layer3.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %373 = reshape(%model.backbone.body.layer3.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %374 = multiply(%373, %370);
  %375 = subtract(%372, %374);
  %376 = add(%371, %375);
  %377 = nn.conv2d(%338, %model.backbone.body.layer3.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %378 = reshape(%model.backbone.body.layer3.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %379 = reshape(%model.backbone.body.layer3.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %380 = add(%379, 0f);
  %381 = rsqrt(%380);
  %382 = multiply(%378, %381);
  %383 = multiply(%377, %382);
  %384 = reshape(%model.backbone.body.layer3.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %385 = reshape(%model.backbone.body.layer3.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %386 = multiply(%385, %382);
  %387 = subtract(%384, %386);
  %388 = add(%383, %387);
  %389 = add(%376, %388);
  %390 = nn.relu(%389);
  %391 = nn.conv2d(%390, %model.backbone.body.layer3.1.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %392 = reshape(%model.backbone.body.layer3.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %393 = reshape(%model.backbone.body.layer3.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %394 = add(%393, 0f);
  %395 = rsqrt(%394);
  %396 = multiply(%392, %395);
  %397 = multiply(%391, %396);
  %398 = reshape(%model.backbone.body.layer3.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %399 = reshape(%model.backbone.body.layer3.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %400 = multiply(%399, %396);
  %401 = subtract(%398, %400);
  %402 = add(%397, %401);
  %403 = nn.relu(%402);
  %404 = nn.conv2d(%403, %model.backbone.body.layer3.1.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %405 = reshape(%model.backbone.body.layer3.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %406 = reshape(%model.backbone.body.layer3.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %407 = add(%406, 0f);
  %408 = rsqrt(%407);
  %409 = multiply(%405, %408);
  %410 = multiply(%404, %409);
  %411 = reshape(%model.backbone.body.layer3.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %412 = reshape(%model.backbone.body.layer3.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %413 = multiply(%412, %409);
  %414 = subtract(%411, %413);
  %415 = add(%410, %414);
  %416 = nn.relu(%415);
  %417 = nn.conv2d(%416, %model.backbone.body.layer3.1.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %418 = reshape(%model.backbone.body.layer3.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %419 = reshape(%model.backbone.body.layer3.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %420 = add(%419, 0f);
  %421 = rsqrt(%420);
  %422 = multiply(%418, %421);
  %423 = multiply(%417, %422);
  %424 = reshape(%model.backbone.body.layer3.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %425 = reshape(%model.backbone.body.layer3.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %426 = multiply(%425, %422);
  %427 = subtract(%424, %426);
  %428 = add(%423, %427);
  %429 = add(%428, %390);
  %430 = nn.relu(%429);
  %431 = nn.conv2d(%430, %model.backbone.body.layer3.2.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %432 = reshape(%model.backbone.body.layer3.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %433 = reshape(%model.backbone.body.layer3.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %434 = add(%433, 0f);
  %435 = rsqrt(%434);
  %436 = multiply(%432, %435);
  %437 = multiply(%431, %436);
  %438 = reshape(%model.backbone.body.layer3.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %439 = reshape(%model.backbone.body.layer3.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %440 = multiply(%439, %436);
  %441 = subtract(%438, %440);
  %442 = add(%437, %441);
  %443 = nn.relu(%442);
  %444 = nn.conv2d(%443, %model.backbone.body.layer3.2.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %445 = reshape(%model.backbone.body.layer3.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %446 = reshape(%model.backbone.body.layer3.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %447 = add(%446, 0f);
  %448 = rsqrt(%447);
  %449 = multiply(%445, %448);
  %450 = multiply(%444, %449);
  %451 = reshape(%model.backbone.body.layer3.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %452 = reshape(%model.backbone.body.layer3.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %453 = multiply(%452, %449);
  %454 = subtract(%451, %453);
  %455 = add(%450, %454);
  %456 = nn.relu(%455);
  %457 = nn.conv2d(%456, %model.backbone.body.layer3.2.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %458 = reshape(%model.backbone.body.layer3.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %459 = reshape(%model.backbone.body.layer3.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %460 = add(%459, 0f);
  %461 = rsqrt(%460);
  %462 = multiply(%458, %461);
  %463 = multiply(%457, %462);
  %464 = reshape(%model.backbone.body.layer3.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %465 = reshape(%model.backbone.body.layer3.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %466 = multiply(%465, %462);
  %467 = subtract(%464, %466);
  %468 = add(%463, %467);
  %469 = add(%468, %430);
  %470 = nn.relu(%469);
  %471 = nn.conv2d(%470, %model.backbone.body.layer3.3.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %472 = reshape(%model.backbone.body.layer3.3.bn1.weight, newshape=[1, -1, 1, 1]);
  %473 = reshape(%model.backbone.body.layer3.3.bn1.running_var, newshape=[1, -1, 1, 1]);
  %474 = add(%473, 0f);
  %475 = rsqrt(%474);
  %476 = multiply(%472, %475);
  %477 = multiply(%471, %476);
  %478 = reshape(%model.backbone.body.layer3.3.bn1.bias, newshape=[1, -1, 1, 1]);
  %479 = reshape(%model.backbone.body.layer3.3.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %480 = multiply(%479, %476);
  %481 = subtract(%478, %480);
  %482 = add(%477, %481);
  %483 = nn.relu(%482);
  %484 = nn.conv2d(%483, %model.backbone.body.layer3.3.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %485 = reshape(%model.backbone.body.layer3.3.bn2.weight, newshape=[1, -1, 1, 1]);
  %486 = reshape(%model.backbone.body.layer3.3.bn2.running_var, newshape=[1, -1, 1, 1]);
  %487 = add(%486, 0f);
  %488 = rsqrt(%487);
  %489 = multiply(%485, %488);
  %490 = multiply(%484, %489);
  %491 = reshape(%model.backbone.body.layer3.3.bn2.bias, newshape=[1, -1, 1, 1]);
  %492 = reshape(%model.backbone.body.layer3.3.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %493 = multiply(%492, %489);
  %494 = subtract(%491, %493);
  %495 = add(%490, %494);
  %496 = nn.relu(%495);
  %497 = nn.conv2d(%496, %model.backbone.body.layer3.3.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %498 = reshape(%model.backbone.body.layer3.3.bn3.weight, newshape=[1, -1, 1, 1]);
  %499 = reshape(%model.backbone.body.layer3.3.bn3.running_var, newshape=[1, -1, 1, 1]);
  %500 = add(%499, 0f);
  %501 = rsqrt(%500);
  %502 = multiply(%498, %501);
  %503 = multiply(%497, %502);
  %504 = reshape(%model.backbone.body.layer3.3.bn3.bias, newshape=[1, -1, 1, 1]);
  %505 = reshape(%model.backbone.body.layer3.3.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %506 = multiply(%505, %502);
  %507 = subtract(%504, %506);
  %508 = add(%503, %507);
  %509 = add(%508, %470);
  %510 = nn.relu(%509);
  %511 = nn.conv2d(%510, %model.backbone.body.layer3.4.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %512 = reshape(%model.backbone.body.layer3.4.bn1.weight, newshape=[1, -1, 1, 1]);
  %513 = reshape(%model.backbone.body.layer3.4.bn1.running_var, newshape=[1, -1, 1, 1]);
  %514 = add(%513, 0f);
  %515 = rsqrt(%514);
  %516 = multiply(%512, %515);
  %517 = multiply(%511, %516);
  %518 = reshape(%model.backbone.body.layer3.4.bn1.bias, newshape=[1, -1, 1, 1]);
  %519 = reshape(%model.backbone.body.layer3.4.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %520 = multiply(%519, %516);
  %521 = subtract(%518, %520);
  %522 = add(%517, %521);
  %523 = nn.relu(%522);
  %524 = nn.conv2d(%523, %model.backbone.body.layer3.4.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %525 = reshape(%model.backbone.body.layer3.4.bn2.weight, newshape=[1, -1, 1, 1]);
  %526 = reshape(%model.backbone.body.layer3.4.bn2.running_var, newshape=[1, -1, 1, 1]);
  %527 = add(%526, 0f);
  %528 = rsqrt(%527);
  %529 = multiply(%525, %528);
  %530 = multiply(%524, %529);
  %531 = reshape(%model.backbone.body.layer3.4.bn2.bias, newshape=[1, -1, 1, 1]);
  %532 = reshape(%model.backbone.body.layer3.4.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %533 = multiply(%532, %529);
  %534 = subtract(%531, %533);
  %535 = add(%530, %534);
  %536 = nn.relu(%535);
  %537 = nn.conv2d(%536, %model.backbone.body.layer3.4.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %538 = reshape(%model.backbone.body.layer3.4.bn3.weight, newshape=[1, -1, 1, 1]);
  %539 = reshape(%model.backbone.body.layer3.4.bn3.running_var, newshape=[1, -1, 1, 1]);
  %540 = add(%539, 0f);
  %541 = rsqrt(%540);
  %542 = multiply(%538, %541);
  %543 = multiply(%537, %542);
  %544 = reshape(%model.backbone.body.layer3.4.bn3.bias, newshape=[1, -1, 1, 1]);
  %545 = reshape(%model.backbone.body.layer3.4.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %546 = multiply(%545, %542);
  %547 = subtract(%544, %546);
  %548 = add(%543, %547);
  %549 = add(%548, %510);
  %550 = nn.relu(%549);
  %551 = nn.conv2d(%550, %model.backbone.body.layer3.5.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %552 = reshape(%model.backbone.body.layer3.5.bn1.weight, newshape=[1, -1, 1, 1]);
  %553 = reshape(%model.backbone.body.layer3.5.bn1.running_var, newshape=[1, -1, 1, 1]);
  %554 = add(%553, 0f);
  %555 = rsqrt(%554);
  %556 = multiply(%552, %555);
  %557 = multiply(%551, %556);
  %558 = reshape(%model.backbone.body.layer3.5.bn1.bias, newshape=[1, -1, 1, 1]);
  %559 = reshape(%model.backbone.body.layer3.5.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %560 = multiply(%559, %556);
  %561 = subtract(%558, %560);
  %562 = add(%557, %561);
  %563 = nn.relu(%562);
  %564 = nn.conv2d(%563, %model.backbone.body.layer3.5.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %565 = reshape(%model.backbone.body.layer3.5.bn2.weight, newshape=[1, -1, 1, 1]);
  %566 = reshape(%model.backbone.body.layer3.5.bn2.running_var, newshape=[1, -1, 1, 1]);
  %567 = add(%566, 0f);
  %568 = rsqrt(%567);
  %569 = multiply(%565, %568);
  %570 = multiply(%564, %569);
  %571 = reshape(%model.backbone.body.layer3.5.bn2.bias, newshape=[1, -1, 1, 1]);
  %572 = reshape(%model.backbone.body.layer3.5.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %573 = multiply(%572, %569);
  %574 = subtract(%571, %573);
  %575 = add(%570, %574);
  %576 = nn.relu(%575);
  %577 = nn.conv2d(%576, %model.backbone.body.layer3.5.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %578 = reshape(%model.backbone.body.layer3.5.bn3.weight, newshape=[1, -1, 1, 1]);
  %579 = reshape(%model.backbone.body.layer3.5.bn3.running_var, newshape=[1, -1, 1, 1]);
  %580 = add(%579, 0f);
  %581 = rsqrt(%580);
  %582 = multiply(%578, %581);
  %583 = multiply(%577, %582);
  %584 = reshape(%model.backbone.body.layer3.5.bn3.bias, newshape=[1, -1, 1, 1]);
  %585 = reshape(%model.backbone.body.layer3.5.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %586 = multiply(%585, %582);
  %587 = subtract(%584, %586);
  %588 = add(%583, %587);
  %589 = add(%588, %550);
  %590 = nn.relu(%589);
  %591 = nn.conv2d(%590, %model.backbone.body.layer4.0.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %592 = reshape(%model.backbone.body.layer4.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %593 = reshape(%model.backbone.body.layer4.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %594 = add(%593, 0f);
  %595 = rsqrt(%594);
  %596 = multiply(%592, %595);
  %597 = multiply(%591, %596);
  %598 = reshape(%model.backbone.body.layer4.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %599 = reshape(%model.backbone.body.layer4.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %600 = multiply(%599, %596);
  %601 = subtract(%598, %600);
  %602 = add(%597, %601);
  %603 = nn.relu(%602);
  %604 = nn.conv2d(%603, %model.backbone.body.layer4.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %605 = reshape(%model.backbone.body.layer4.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %606 = reshape(%model.backbone.body.layer4.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %607 = add(%606, 0f);
  %608 = rsqrt(%607);
  %609 = multiply(%605, %608);
  %610 = multiply(%604, %609);
  %611 = reshape(%model.backbone.body.layer4.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %612 = reshape(%model.backbone.body.layer4.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %613 = multiply(%612, %609);
  %614 = subtract(%611, %613);
  %615 = add(%610, %614);
  %616 = nn.relu(%615);
  %617 = nn.conv2d(%616, %model.backbone.body.layer4.0.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %618 = reshape(%model.backbone.body.layer4.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %619 = reshape(%model.backbone.body.layer4.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %620 = add(%619, 0f);
  %621 = rsqrt(%620);
  %622 = multiply(%618, %621);
  %623 = multiply(%617, %622);
  %624 = reshape(%model.backbone.body.layer4.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %625 = reshape(%model.backbone.body.layer4.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %626 = multiply(%625, %622);
  %627 = subtract(%624, %626);
  %628 = add(%623, %627);
  %629 = nn.conv2d(%590, %model.backbone.body.layer4.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %630 = reshape(%model.backbone.body.layer4.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %631 = reshape(%model.backbone.body.layer4.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %632 = add(%631, 0f);
  %633 = rsqrt(%632);
  %634 = multiply(%630, %633);
  %635 = multiply(%629, %634);
  %636 = reshape(%model.backbone.body.layer4.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %637 = reshape(%model.backbone.body.layer4.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %638 = multiply(%637, %634);
  %639 = subtract(%636, %638);
  %640 = add(%635, %639);
  %641 = add(%628, %640);
  %642 = nn.relu(%641);
  %643 = nn.conv2d(%642, %model.backbone.body.layer4.1.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %644 = reshape(%model.backbone.body.layer4.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %645 = reshape(%model.backbone.body.layer4.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %646 = add(%645, 0f);
  %647 = rsqrt(%646);
  %648 = multiply(%644, %647);
  %649 = multiply(%643, %648);
  %650 = reshape(%model.backbone.body.layer4.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %651 = reshape(%model.backbone.body.layer4.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %652 = multiply(%651, %648);
  %653 = subtract(%650, %652);
  %654 = add(%649, %653);
  %655 = nn.relu(%654);
  %656 = nn.conv2d(%655, %model.backbone.body.layer4.1.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %657 = reshape(%model.backbone.body.layer4.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %658 = reshape(%model.backbone.body.layer4.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %659 = add(%658, 0f);
  %660 = rsqrt(%659);
  %661 = multiply(%657, %660);
  %662 = multiply(%656, %661);
  %663 = reshape(%model.backbone.body.layer4.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %664 = reshape(%model.backbone.body.layer4.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %665 = multiply(%664, %661);
  %666 = subtract(%663, %665);
  %667 = add(%662, %666);
  %668 = nn.relu(%667);
  %669 = nn.conv2d(%668, %model.backbone.body.layer4.1.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %670 = reshape(%model.backbone.body.layer4.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %671 = reshape(%model.backbone.body.layer4.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %672 = add(%671, 0f);
  %673 = rsqrt(%672);
  %674 = multiply(%670, %673);
  %675 = multiply(%669, %674);
  %676 = reshape(%model.backbone.body.layer4.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %677 = reshape(%model.backbone.body.layer4.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %678 = multiply(%677, %674);
  %679 = subtract(%676, %678);
  %680 = add(%675, %679);
  %681 = add(%680, %642);
  %682 = nn.relu(%681);
  %683 = nn.conv2d(%682, %model.backbone.body.layer4.2.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %684 = reshape(%model.backbone.body.layer4.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %685 = reshape(%model.backbone.body.layer4.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %686 = add(%685, 0f);
  %687 = rsqrt(%686);
  %688 = multiply(%684, %687);
  %689 = multiply(%683, %688);
  %690 = reshape(%model.backbone.body.layer4.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %691 = reshape(%model.backbone.body.layer4.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %692 = multiply(%691, %688);
  %693 = subtract(%690, %692);
  %694 = add(%689, %693);
  %695 = nn.relu(%694);
  %696 = nn.conv2d(%695, %model.backbone.body.layer4.2.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %697 = reshape(%model.backbone.body.layer4.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %698 = reshape(%model.backbone.body.layer4.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %699 = add(%698, 0f);
  %700 = rsqrt(%699);
  %701 = multiply(%697, %700);
  %702 = multiply(%696, %701);
  %703 = reshape(%model.backbone.body.layer4.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %704 = reshape(%model.backbone.body.layer4.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %705 = multiply(%704, %701);
  %706 = subtract(%703, %705);
  %707 = add(%702, %706);
  %708 = nn.relu(%707);
  %709 = nn.conv2d(%708, %model.backbone.body.layer4.2.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %710 = reshape(%model.backbone.body.layer4.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %711 = reshape(%model.backbone.body.layer4.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %712 = add(%711, 0f);
  %713 = rsqrt(%712);
  %714 = multiply(%710, %713);
  %715 = multiply(%709, %714);
  %716 = reshape(%model.backbone.body.layer4.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %717 = reshape(%model.backbone.body.layer4.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %718 = multiply(%717, %714);
  %719 = subtract(%716, %718);
  %720 = add(%715, %719);
  %721 = add(%720, %682);
  %722 = nn.relu(%721);
  %723 = (%722, %590, %338, %166);
  %724 = %723.3;
  %725 = nn.conv2d(%724, %model.backbone.fpn.inner_blocks.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %726 = nn.bias_add(%725, %model.backbone.fpn.inner_blocks.0.bias);
  %727 = %723.2;
  %728 = nn.conv2d(%727, %model.backbone.fpn.inner_blocks.1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %729 = nn.bias_add(%728, %model.backbone.fpn.inner_blocks.1.bias);
  %730 = %723.1;
  %731 = nn.conv2d(%730, %model.backbone.fpn.inner_blocks.2.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %732 = nn.bias_add(%731, %model.backbone.fpn.inner_blocks.2.bias);
  %733 = %723.0;
  %734 = nn.conv2d(%733, %model.backbone.fpn.inner_blocks.3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %735 = nn.bias_add(%734, %model.backbone.fpn.inner_blocks.3.bias);
  %736 = image.resize(%735, size=[50, 50], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %737 = add(%732, %736);
  %738 = image.resize(%737, size=[100, 100], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %739 = add(%729, %738);
  %740 = image.resize(%739, size=[200, 200], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %741 = add(%726, %740);
  %742 = nn.conv2d(%741, %model.backbone.fpn.layer_blocks.0.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %743 = nn.bias_add(%742, %model.backbone.fpn.layer_blocks.0.bias);
  %744 = nn.conv2d(%739, %model.backbone.fpn.layer_blocks.1.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %745 = nn.bias_add(%744, %model.backbone.fpn.layer_blocks.1.bias);
  %746 = nn.conv2d(%737, %model.backbone.fpn.layer_blocks.2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %747 = nn.bias_add(%746, %model.backbone.fpn.layer_blocks.2.bias);
  %748 = nn.conv2d(%735, %model.backbone.fpn.layer_blocks.3.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %749 = nn.bias_add(%748, %model.backbone.fpn.layer_blocks.3.bias);
  %750 = nn.max_pool2d(%749, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0]);
  %751 = (%743, %745, %747, %749, %750, %749, %749, %749, %749, %749, %749);
  %752 = %751.0;
  %753 = %751.1;
  %754 = %751.2;
  %755 = %751.3;
  %756 = %751.4;
  %757 = %751.5;
  %758 = %751.6;
  %759 = %751.7;
  %760 = %751.8;
  %761 = %751.9;
  %762 = %751.10;
  %763 = (%752, %753, %754, %755, %756, %757, %758, %759, %760, %761, %762);
  %764 = %763.0;
  %765 = nn.conv2d(%764, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %766 = nn.bias_add(%765, %model.rpn.head.conv.bias);
  %767 = nn.relu(%766);
  %768 = nn.conv2d(%767, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %769 = nn.bias_add(%768, %model.rpn.head.cls_logits.bias);
  %770 = %763.1;
  %771 = nn.conv2d(%770, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %772 = nn.bias_add(%771, %model.rpn.head.conv.bias);
  %773 = nn.relu(%772);
  %774 = nn.conv2d(%773, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %775 = nn.bias_add(%774, %model.rpn.head.cls_logits.bias);
  %776 = %763.2;
  %777 = nn.conv2d(%776, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %778 = nn.bias_add(%777, %model.rpn.head.conv.bias);
  %779 = nn.relu(%778);
  %780 = nn.conv2d(%779, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %781 = nn.bias_add(%780, %model.rpn.head.cls_logits.bias);
  %782 = %763.3;
  %783 = nn.conv2d(%782, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %784 = nn.bias_add(%783, %model.rpn.head.conv.bias);
  %785 = nn.relu(%784);
  %786 = nn.conv2d(%785, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %787 = nn.bias_add(%786, %model.rpn.head.cls_logits.bias);
  %788 = %763.4;
  %789 = nn.conv2d(%788, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %790 = nn.bias_add(%789, %model.rpn.head.conv.bias);
  %791 = nn.relu(%790);
  %792 = nn.conv2d(%791, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %793 = nn.bias_add(%792, %model.rpn.head.cls_logits.bias);
  %794 = nn.conv2d(%767, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %795 = nn.bias_add(%794, %model.rpn.head.bbox_pred.bias);
  %796 = nn.conv2d(%773, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %797 = nn.bias_add(%796, %model.rpn.head.bbox_pred.bias);
  %798 = nn.conv2d(%779, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %799 = nn.bias_add(%798, %model.rpn.head.bbox_pred.bias);
  %800 = nn.conv2d(%785, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %801 = nn.bias_add(%800, %model.rpn.head.bbox_pred.bias);
  %802 = nn.conv2d(%791, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %803 = nn.bias_add(%802, %model.rpn.head.bbox_pred.bias);
  %804 = (%769, %775, %781, %787, %793, %795, %797, %799, %801, %803);
  %805 = %804.5;
  %806 = reshape(%805, newshape=[1, -1, 4, 200, 200]);
  %807 = transpose(%806, axes=[0, 3, 4, 1, 2]);
  %808 = reshape(%807, newshape=[1, -1, 4]);
  %809 = %804.6;
  %810 = reshape(%809, newshape=[1, -1, 4, 100, 100]);
  %811 = transpose(%810, axes=[0, 3, 4, 1, 2]);
  %812 = reshape(%811, newshape=[1, -1, 4]);
  %813 = %804.7;
  %814 = reshape(%813, newshape=[1, -1, 4, 50, 50]);
  %815 = transpose(%814, axes=[0, 3, 4, 1, 2]);
  %816 = reshape(%815, newshape=[1, -1, 4]);
  %817 = %804.8;
  %818 = reshape(%817, newshape=[1, -1, 4, 25, 25]);
  %819 = transpose(%818, axes=[0, 3, 4, 1, 2]);
  %820 = reshape(%819, newshape=[1, -1, 4]);
  %821 = %804.9;
  %822 = reshape(%821, newshape=[1, -1, 4, 13, 13]);
  %823 = transpose(%822, axes=[0, 3, 4, 1, 2]);
  %824 = reshape(%823, newshape=[1, -1, 4]);
  %825 = (%808, %812, %816, %820, %824);
  %826 = concatenate(%825, axis=1);
  %827 = reshape(%826, newshape=[-1, 4]);
  %828 = reshape(%827, newshape=[159882, -1]);
  %829 = strided_slice(%828, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %830 = strided_slice(%829, begin=[0, 0], end=[159882, 4], strides=[1, 4]);
  %831 = divide(%830, 1f);
  %832 = arange(0f, 200f, 1f, start=meta[relay.Constant][2], stop=meta[relay.Constant][3], step=meta[relay.Constant][4], dtype="float32");
  %833 = floor_divide(800, 200);
  %834 = cast(%833, dtype="int64");
  %835 = cast(%834, dtype="float32");
  %836 = multiply(%832, %835);
  %837 = arange(0f, 200f, 1f, start=meta[relay.Constant][5], stop=meta[relay.Constant][6], step=meta[relay.Constant][7], dtype="float32");
  %838 = floor_divide(800, 200);
  %839 = cast(%838, dtype="int64");
  %840 = cast(%839, dtype="float32");
  %841 = multiply(%837, %840);
  %842 = (%836, %841);
  %843 = meshgrid(%842);
  %844 = %843.1;
  %845 = reshape(%844, newshape=[-1]);
  %846 = %843.0;
  %847 = reshape(%846, newshape=[-1]);
  %848 = (%845, %847, %845, %847);
  %849 = stack(%848, axis=1);
  %850 = reshape(%849, newshape=[-1, 1, 4]);
  %851 = reshape(meta[relay.Constant][8], newshape=[1, -1, 4]);
  %852 = add(%850, %851);
  %853 = reshape(%852, newshape=[-1, 4]);
  %854 = arange(0f, 100f, 1f, start=meta[relay.Constant][9], stop=meta[relay.Constant][10], step=meta[relay.Constant][11], dtype="float32");
  %855 = floor_divide(800, 100);
  %856 = cast(%855, dtype="int64");
  %857 = cast(%856, dtype="float32");
  %858 = multiply(%854, %857);
  %859 = arange(0f, 100f, 1f, start=meta[relay.Constant][12], stop=meta[relay.Constant][13], step=meta[relay.Constant][14], dtype="float32");
  %860 = floor_divide(800, 100);
  %861 = cast(%860, dtype="int64");
  %862 = cast(%861, dtype="float32");
  %863 = multiply(%859, %862);
  %864 = (%858, %863);
  %865 = meshgrid(%864);
  %866 = %865.1;
  %867 = reshape(%866, newshape=[-1]);
  %868 = %865.0;
  %869 = reshape(%868, newshape=[-1]);
  %870 = (%867, %869, %867, %869);
  %871 = stack(%870, axis=1);
  %872 = reshape(%871, newshape=[-1, 1, 4]);
  %873 = reshape(meta[relay.Constant][15], newshape=[1, -1, 4]);
  %874 = add(%872, %873);
  %875 = reshape(%874, newshape=[-1, 4]);
  %876 = arange(0f, 50f, 1f, start=meta[relay.Constant][16], stop=meta[relay.Constant][17], step=meta[relay.Constant][18], dtype="float32");
  %877 = floor_divide(800, 50);
  %878 = cast(%877, dtype="int64");
  %879 = cast(%878, dtype="float32");
  %880 = multiply(%876, %879);
  %881 = arange(0f, 50f, 1f, start=meta[relay.Constant][19], stop=meta[relay.Constant][20], step=meta[relay.Constant][21], dtype="float32");
  %882 = floor_divide(800, 50);
  %883 = cast(%882, dtype="int64");
  %884 = cast(%883, dtype="float32");
  %885 = multiply(%881, %884);
  %886 = (%880, %885);
  %887 = meshgrid(%886);
  %888 = %887.1;
  %889 = reshape(%888, newshape=[-1]);
  %890 = %887.0;
  %891 = reshape(%890, newshape=[-1]);
  %892 = (%889, %891, %889, %891);
  %893 = stack(%892, axis=1);
  %894 = reshape(%893, newshape=[-1, 1, 4]);
  %895 = reshape(meta[relay.Constant][22], newshape=[1, -1, 4]);
  %896 = add(%894, %895);
  %897 = reshape(%896, newshape=[-1, 4]);
  %898 = arange(0f, 25f, 1f, start=meta[relay.Constant][23], stop=meta[relay.Constant][24], step=meta[relay.Constant][25], dtype="float32");
  %899 = floor_divide(800, 25);
  %900 = cast(%899, dtype="int64");
  %901 = cast(%900, dtype="float32");
  %902 = multiply(%898, %901);
  %903 = arange(0f, 25f, 1f, start=meta[relay.Constant][26], stop=meta[relay.Constant][27], step=meta[relay.Constant][28], dtype="float32");
  %904 = floor_divide(800, 25);
  %905 = cast(%904, dtype="int64");
  %906 = cast(%905, dtype="float32");
  %907 = multiply(%903, %906);
  %908 = (%902, %907);
  %909 = meshgrid(%908);
  %910 = %909.1;
  %911 = reshape(%910, newshape=[-1]);
  %912 = %909.0;
  %913 = reshape(%912, newshape=[-1]);
  %914 = (%911, %913, %911, %913);
  %915 = stack(%914, axis=1);
  %916 = reshape(%915, newshape=[-1, 1, 4]);
  %917 = reshape(meta[relay.Constant][29], newshape=[1, -1, 4]);
  %918 = add(%916, %917);
  %919 = reshape(%918, newshape=[-1, 4]);
  %920 = arange(0f, 13f, 1f, start=meta[relay.Constant][30], stop=meta[relay.Constant][31], step=meta[relay.Constant][32], dtype="float32");
  %921 = floor_divide(800, 13);
  %922 = cast(%921, dtype="int64");
  %923 = cast(%922, dtype="float32");
  %924 = multiply(%920, %923);
  %925 = arange(0f, 13f, 1f, start=meta[relay.Constant][33], stop=meta[relay.Constant][34], step=meta[relay.Constant][35], dtype="float32");
  %926 = floor_divide(800, 13);
  %927 = cast(%926, dtype="int64");
  %928 = cast(%927, dtype="float32");
  %929 = multiply(%925, %928);
  %930 = (%924, %929);
  %931 = meshgrid(%930);
  %932 = %931.1;
  %933 = reshape(%932, newshape=[-1]);
  %934 = %931.0;
  %935 = reshape(%934, newshape=[-1]);
  %936 = (%933, %935, %933, %935);
  %937 = stack(%936, axis=1);
  %938 = reshape(%937, newshape=[-1, 1, 4]);
  %939 = reshape(meta[relay.Constant][36], newshape=[1, -1, 4]);
  %940 = add(%938, %939);
  %941 = reshape(%940, newshape=[-1, 4]);
  %942 = (%853, %875, %897, %919, %941);
  %943 = concatenate(%942);
  %944 = (%943,);
  %945 = concatenate(%944);
  %946 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %947 = take(%946, 2, axis=1);
  %948 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %949 = take(%948, 0, axis=1);
  %950 = subtract(%947, %949);
  %951 = strided_slice(%950, begin=[0], end=[159882], strides=[1]);
  %952 = expand_dims(%951, axis=1);
  %953 = multiply(%831, %952);
  %954 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %955 = take(%954, 0, axis=1);
  %956 = multiply(%950, 0.5f);
  %957 = add(%955, %956);
  %958 = strided_slice(%957, begin=[0], end=[159882], strides=[1]);
  %959 = expand_dims(%958, axis=1);
  %960 = add(%953, %959);
  %961 = strided_slice(%828, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %962 = strided_slice(%961, begin=[0, 2], end=[159882, 4], strides=[1, 4]);
  %963 = divide(%962, 1f);
  %964 = clip(%963, a_min=-3.40282e+38f, a_max=4.13517f);
  %965 = exp(%964);
  %966 = strided_slice(%950, begin=[0], end=[159882], strides=[1]);
  %967 = expand_dims(%966, axis=1);
  %968 = multiply(%965, %967);
  %969 = multiply(0.5f, %968);
  %970 = subtract(%960, %969);
  %971 = strided_slice(%828, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %972 = strided_slice(%971, begin=[0, 1], end=[159882, 4], strides=[1, 4]);
  %973 = divide(%972, 1f);
  %974 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %975 = take(%974, 3, axis=1);
  %976 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %977 = take(%976, 1, axis=1);
  %978 = subtract(%975, %977);
  %979 = strided_slice(%978, begin=[0], end=[159882], strides=[1]);
  %980 = expand_dims(%979, axis=1);
  %981 = multiply(%973, %980);
  %982 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %983 = take(%982, 1, axis=1);
  %984 = multiply(%978, 0.5f);
  %985 = add(%983, %984);
  %986 = strided_slice(%985, begin=[0], end=[159882], strides=[1]);
  %987 = expand_dims(%986, axis=1);
  %988 = add(%981, %987);
  %989 = strided_slice(%828, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %990 = strided_slice(%989, begin=[0, 3], end=[159882, 4], strides=[1, 4]);
  %991 = divide(%990, 1f);
  %992 = clip(%991, a_min=-3.40282e+38f, a_max=4.13517f);
  %993 = exp(%992);
  %994 = strided_slice(%978, begin=[0], end=[159882], strides=[1]);
  %995 = expand_dims(%994, axis=1);
  %996 = multiply(%993, %995);
  %997 = multiply(0.5f, %996);
  %998 = subtract(%988, %997);
  %999 = multiply(0.5f, %968);
  %1000 = add(%960, %999);
  %1001 = multiply(0.5f, %996);
  %1002 = add(%988, %1001);
  %1003 = (%970, %998, %1000, %1002);
  %1004 = stack(%1003, axis=2);
  %1005 = reshape(%1004, newshape=[0, -1, 1]);
  %1006 = squeeze(%1005, axis=[2]);
  %1007 = reshape(%1006, newshape=[159882, -1, 4]);
  %1008 = reshape(%1007, newshape=[1, -1, 4]);
  %1009 = arange(0, 1, 1, start=meta[relay.Constant][37], stop=meta[relay.Constant][38], step=meta[relay.Constant][39], dtype="int64");
  %1010 = strided_slice(%1009, begin=[0], end=[1], strides=[1]);
  %1011 = expand_dims(%1010, axis=1);
  %1012 = %804.0;
  %1013 = reshape(%1012, newshape=[1, -1, 1, 200, 200]);
  %1014 = transpose(%1013, axes=[0, 3, 4, 1, 2]);
  %1015 = reshape(%1014, newshape=[1, -1, 1]);
  %1016 = %804.1;
  %1017 = reshape(%1016, newshape=[1, -1, 1, 100, 100]);
  %1018 = transpose(%1017, axes=[0, 3, 4, 1, 2]);
  %1019 = reshape(%1018, newshape=[1, -1, 1]);
  %1020 = %804.2;
  %1021 = reshape(%1020, newshape=[1, -1, 1, 50, 50]);
  %1022 = transpose(%1021, axes=[0, 3, 4, 1, 2]);
  %1023 = reshape(%1022, newshape=[1, -1, 1]);
  %1024 = %804.3;
  %1025 = reshape(%1024, newshape=[1, -1, 1, 25, 25]);
  %1026 = transpose(%1025, axes=[0, 3, 4, 1, 2]);
  %1027 = reshape(%1026, newshape=[1, -1, 1]);
  %1028 = %804.4;
  %1029 = reshape(%1028, newshape=[1, -1, 1, 13, 13]);
  %1030 = transpose(%1029, axes=[0, 3, 4, 1, 2]);
  %1031 = reshape(%1030, newshape=[1, -1, 1]);
  %1032 = (%1015, %1019, %1023, %1027, %1031);
  %1033 = concatenate(%1032, axis=1);
  %1034 = reshape(%1033, newshape=[-1, 1, 0]);
  %1035 = squeeze(%1034, axis=[1]);
  %1036 = reshape(%1035, newshape=[1, -1]);
  %1037 = split(%1036, indices_or_sections=[120000, 150000, 157500, 159375], axis=1);
  %1038 = %1037.0;
  %1039 = topk(%1038, k=1000, axis=1, dtype="int64");
  %1040 = %1039.1;
  %1041 = add(%1040, 0);
  %1042 = %1037.1;
  %1043 = topk(%1042, k=1000, axis=1, dtype="int64");
  %1044 = %1043.1;
  %1045 = take(meta[relay.Constant][40], 1, axis=0);
  %1046 = expand_dims(%1045, axis=0);
  %1047 = add(%1046, 0);
  %1048 = add(%1044, %1047);
  %1049 = %1037.2;
  %1050 = topk(%1049, k=1000, axis=1, dtype="int64");
  %1051 = %1050.1;
  %1052 = take(meta[relay.Constant][41], 1, axis=0);
  %1053 = expand_dims(%1052, axis=0);
  %1054 = add(%1047, %1053);
  %1055 = add(%1051, %1054);
  %1056 = %1037.3;
  %1057 = topk(%1056, k=1000, axis=1, dtype="int64");
  %1058 = %1057.1;
  %1059 = take(meta[relay.Constant][42], 1, axis=0);
  %1060 = expand_dims(%1059, axis=0);
  %1061 = add(%1054, %1060);
  %1062 = add(%1058, %1061);
  %1063 = %1037.4;
  %1064 = topk(%1063, k=507, axis=1, dtype="int64");
  %1065 = %1064.1;
  %1066 = take(meta[relay.Constant][43], 1, axis=0);
  %1067 = expand_dims(%1066, axis=0);
  %1068 = add(%1061, %1067);
  %1069 = add(%1065, %1068);
  %1070 = (%1041, %1048, %1055, %1062, %1069);
  %1071 = concatenate(%1070, axis=1);
  %1072 = (%1008, %1011, %1071);
  %1073 = adv_index(%1072);
  %1074 = split(%1073, indices_or_sections=1);
  %1075 = %1074.0;
  %1076 = squeeze(%1075, axis=[0]);
  %1077 = (%1076,);
  %1078 = %1077.0;
  %1079 = strided_slice(%1078, begin=[0, 0], end=[4507, 4], strides=[1, 2]);
  %1080 = maximum(%1079, 0f);
  %1081 = %19.1;
  %1082 = cast(%1081, dtype="float32");
  %1083 = minimum(%1080, %1082);
  %1084 = strided_slice(%1078, begin=[0, 1], end=[4507, 4], strides=[1, 2]);
  %1085 = maximum(%1084, 0f);
  %1086 = %19.2;
  %1087 = cast(%1086, dtype="float32");
  %1088 = minimum(%1085, %1087);
  %1089 = (%1083, %1088);
  %1090 = stack(%1089, axis=2);
  %1091 = reshape(%1090, newshape=[4507, 4]);
  %1092 = strided_slice(%1091, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1093 = take(%1092, 2, axis=1);
  %1094 = strided_slice(%1091, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1095 = take(%1094, 0, axis=1);
  %1096 = subtract(%1093, %1095);
  %1097 = greater_equal(%1096, 0.001f);
  %1098 = cast(%1097, dtype="bool");
  %1099 = strided_slice(%1091, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1100 = take(%1099, 3, axis=1);
  %1101 = strided_slice(%1091, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1102 = take(%1101, 1, axis=1);
  %1103 = subtract(%1100, %1102);
  %1104 = greater_equal(%1103, 0.001f);
  %1105 = cast(%1104, dtype="bool");
  %1106 = logical_and(%1098, %1105);
  %1107 = argwhere(%1106);
  %1108 = split(%1107, indices_or_sections=1, axis=1);
  %1109 = %1108.0;
  %1110 = squeeze(%1109, axis=[1]);
  %1111 = (%1110,);
  %1112 = %1111.0;
  %1113 = cast(%1112, dtype="int64");
  %1114 = (%1091, %1113);
  %1115 = adv_index(%1114);
  %1116 = ndarray_size(%1115, dtype="int32");
  %1117 = equal(%1116, 0);
  %1181 = if (%1117) {
    zeros(shape=[0], dtype="int64")
  } else {
    %1118 = (%1036, %1011, %1071);
    %1119 = adv_index(%1118);
    %1120 = split(%1119, indices_or_sections=1);
    %1121 = %1120.0;
    %1122 = squeeze(%1121, axis=[0]);
    %1123 = (%1122,);
    %1124 = %1123.0;
    %1125 = (%1124, %1113);
    %1126 = adv_index(%1125);
    %1127 = expand_dims(%1126, axis=-1);
    %1128 = full(0, shape=[120000], dtype="int64");
    %1129 = full(1, shape=[30000], dtype="int64");
    %1130 = full(2, shape=[7500], dtype="int64");
    %1131 = full(3, shape=[1875], dtype="int64");
    %1132 = full(4, shape=[507], dtype="int64");
    %1133 = (%1128, %1129, %1130, %1131, %1132);
    %1134 = concatenate(%1133);
    %1135 = reshape(%1134, newshape=[1, -1]);
    %1136 = cast(%1036, dtype="int64");
    %1137 = broadcast_to_like(%1135, %1136);
    %1138 = (%1137, %1011, %1071);
    %1139 = adv_index(%1138);
    %1140 = split(%1139, indices_or_sections=1);
    %1141 = %1140.0;
    %1142 = squeeze(%1141, axis=[0]);
    %1143 = (%1142,);
    %1144 = %1143.0;
    %1145 = (%1144, %1113);
    %1146 = adv_index(%1145);
    %1147 = cast(%1146, dtype="float32");
    %1148 = max(%1115);
    %1149 = add(%1148, 1f);
    %1150 = multiply(%1147, %1149);

    %1151 = cast_like(0, meta[relay.Constant][44]);
    %1152 = less(meta[relay.Constant][44], %1151);
    %1153 = shape_of(%1150, dtype="int32");
    %1154 = cast_like(%1153, meta[relay.Constant][44]);
    %1155 = add(meta[relay.Constant][44], %1154);
    %1156 = where(%1152, %1155, meta[relay.Constant][44]);
    %1157 = shape_of(%1150, dtype="int32");
    %1158 = cast(%1157, dtype="int64");
    %1159 = dyn.strided_slice(%1150, %1156, %1158, meta[relay.Constant][45], begin=None, end=None, strides=None);

    %1160 = expand_dims(%1159, axis=1);
    %1161 = add(%1115, %1160);
    %1162 = (%1127, %1161);
    %1163 = concatenate(%1162, axis=-1);
    %1164 = expand_dims(%1163, axis=0);
    %1165 = vision.get_valid_counts(%1164, -1f, meta[relay.attrs.GetValidCountsAttrs][0]);
    %1166 = %1165.1;
    %1167 = %1165.0;
    %1168 = %1165.2;
    %1169 = vision.non_max_suppression(%1166, %1167, %1168, -1, 0.7f, meta[relay.attrs.NonMaximumSuppressionAttrs][0]);
    %1170 = %1169.0;
    %1171 = squeeze(%1170, axis=[0]);
    %1172 = cast_like(0, meta[relay.Constant][46]);
    %1173 = less(meta[relay.Constant][46], %1172);
    %1174 = shape_of(%1171, dtype="int32");
    %1175 = cast_like(%1174, meta[relay.Constant][46]);
    %1176 = add(meta[relay.Constant][46], %1175);
    %1177 = where(%1173, %1176, meta[relay.Constant][46]);
    %1178 = %1169.1;
    %1179 = squeeze(%1178, axis=[1]);
    %1180 = dyn.strided_slice(%1171, %1177, %1179, meta[relay.Constant][47], begin=None, end=None, strides=None, slice_mode="size");
    cast(%1180, dtype="int64")
  };
  %1182 = strided_slice(%1181, begin=[0], end=[1000], strides=[1]);
  %1183 = (%1115, %1182);
  %1184 = adv_index(%1183);
  %1185 = cast_like(0, meta[relay.Constant][48]);
  %1186 = less(meta[relay.Constant][48], %1185);
  %1187 = shape_of(%1184, dtype="int32");
  %1188 = cast_like(%1187, meta[relay.Constant][48]);
  %1189 = add(meta[relay.Constant][48], %1188);
  %1190 = where(%1186, %1189, meta[relay.Constant][48]);
  %1191 = shape_of(%1184, dtype="int32");
  %1192 = cast(%1191, dtype="int64");
  %1193 = dyn.strided_slice(%1184, %1190, %1192, meta[relay.Constant][49], begin=None, end=None, strides=None);
  %1194 = take(%1193, 2, axis=1);
  %1195 = cast_like(0, meta[relay.Constant][50]);
  %1196 = less(meta[relay.Constant][50], %1195);
  %1197 = shape_of(%1184, dtype="int32");
  %1198 = cast_like(%1197, meta[relay.Constant][50]);
  %1199 = add(meta[relay.Constant][50], %1198);
  %1200 = where(%1196, %1199, meta[relay.Constant][50]);
  %1201 = shape_of(%1184, dtype="int32");
  %1202 = cast(%1201, dtype="int64");
  %1203 = dyn.strided_slice(%1184, %1200, %1202, meta[relay.Constant][51], begin=None, end=None, strides=None);
  %1204 = take(%1203, 0, axis=1);
  %1205 = subtract(%1194, %1204);
  %1206 = cast_like(0, meta[relay.Constant][52]);
  %1207 = less(meta[relay.Constant][52], %1206);
  %1208 = shape_of(%1184, dtype="int32");
  %1209 = cast_like(%1208, meta[relay.Constant][52]);
  %1210 = add(meta[relay.Constant][52], %1209);
  %1211 = where(%1207, %1210, meta[relay.Constant][52]);
  %1212 = shape_of(%1184, dtype="int32");
  %1213 = cast(%1212, dtype="int64");
  %1214 = dyn.strided_slice(%1184, %1211, %1213, meta[relay.Constant][53], begin=None, end=None, strides=None);
  %1215 = take(%1214, 3, axis=1);
  %1216 = cast_like(0, meta[relay.Constant][54]);
  %1217 = less(meta[relay.Constant][54], %1216);
  %1218 = shape_of(%1184, dtype="int32");
  %1219 = cast_like(%1218, meta[relay.Constant][54]);
  %1220 = add(meta[relay.Constant][54], %1219);
  %1221 = where(%1217, %1220, meta[relay.Constant][54]);
  %1222 = shape_of(%1184, dtype="int32");
  %1223 = cast(%1222, dtype="int64");
  %1224 = dyn.strided_slice(%1184, %1221, %1223, meta[relay.Constant][55], begin=None, end=None, strides=None);
  %1225 = take(%1224, 1, axis=1);
  %1226 = subtract(%1215, %1225);
  %1227 = multiply(%1205, %1226);
  %1228 = (%1227,);
  %1229 = concatenate(%1228);
  %1230 = sqrt(%1229);
  %1231 = divide(%1230, 224f);
  %1232 = log2(%1231);
  %1233 = add(%1232, 4f);
  %1234 = add(%1233, 1e-06f);
  %1235 = floor(%1234);
  %1236 = clip(%1235, a_min=2f, a_max=5f);
  %1237 = cast(%1236, dtype="int64");
  %1238 = subtract(%1237, 2);
  %1239 = shape_of(%1238, dtype="int32");
  %1240 = take(%1239, 0, axis=0);
  %1241 = expand_dims(%1240, axis=0);
  %1242 = cast(%1241, dtype="int64");
  %1243 = expand_dims(256, axis=0);
  %1244 = cast(%1243, dtype="int64");
  %1245 = expand_dims(7, axis=0);
  %1246 = cast(%1245, dtype="int64");
  %1247 = expand_dims(7, axis=0);
  %1248 = cast(%1247, dtype="int64");
  %1249 = (%1242, %1244, %1246, %1248);
  %1250 = concatenate(%1249);
  %1251 = dyn.full(0, %1250, shape=None, dtype="float32");
  %1252 = reshape(%1251, newshape=[0, 256, 7, 7]);
  %1253 = equal(%1238, 0);
  %1254 = argwhere(%1253);
  %1255 = split(%1254, indices_or_sections=1, axis=1);
  %1256 = %1255.0;
  %1257 = squeeze(%1256, axis=[1]);
  %1258 = (%1257,);
  %1259 = %1258.0;
  %1260 = reshape(%1259, newshape=[-1, 1, 1, 1]);
  %1261 = repeat(%1260, repeats=256, axis=1);
  %1262 = repeat(%1261, repeats=7, axis=2);
  %1263 = repeat(%1262, repeats=7, axis=3);
  %1264 = cast_like(0, meta[relay.Constant][56]);
  %1265 = less(meta[relay.Constant][56], %1264);
  %1266 = shape_of(%1184, dtype="int32");
  %1267 = cast_like(%1266, meta[relay.Constant][56]);
  %1268 = add(meta[relay.Constant][56], %1267);
  %1269 = where(%1265, %1268, meta[relay.Constant][56]);
  %1270 = shape_of(%1184, dtype="int32");
  %1271 = cast(%1270, dtype="int64");
  %1272 = dyn.strided_slice(%1184, %1269, %1271, meta[relay.Constant][57], begin=None, end=None, strides=None);
  %1273 = cast_like(0, meta[relay.Constant][58]);
  %1274 = less(meta[relay.Constant][58], %1273);
  %1275 = shape_of(%1272, dtype="int32");
  %1276 = cast_like(%1275, meta[relay.Constant][58]);
  %1277 = add(meta[relay.Constant][58], %1276);
  %1278 = where(%1274, %1277, meta[relay.Constant][58]);
  %1279 = shape_of(%1272, dtype="int32");
  %1280 = expand_dims(1, axis=0);
  %1281 = expand_dims(1, axis=0);
  %1282 = scatter(%1279, %1280, %1281, meta[relay.attrs.ScatterAttrs][0]);
  %1283 = cast(%1282, dtype="int64");
  %1284 = dyn.strided_slice(%1272, %1278, %1283, meta[relay.Constant][59], begin=None, end=None, strides=None);
  %1285 = full_like(%1284, 0);
  %1286 = (%1285,);
  %1287 = concatenate(%1286);
  %1288 = (%1184,);
  %1289 = concatenate(%1288);
  %1290 = (%1287, %1289);
  %1291 = concatenate(%1290, axis=1);
  %1292 = equal(%1238, 0);
  %1293 = argwhere(%1292);
  %1294 = split(%1293, indices_or_sections=1, axis=1);
  %1295 = %1294.0;
  %1296 = squeeze(%1295, axis=[1]);
  %1297 = (%1296,);
  %1298 = %1297.0;
  %1299 = cast(%1298, dtype="int64");
  %1300 = (%1291, %1299);
  %1301 = adv_index(%1300);
  %1302 = vision.roi_align(%764, %1301, meta[relay.attrs.ROIAlignAttrs][0]);
  %1303 = scatter(%1252, %1263, %1302, meta[relay.attrs.ScatterAttrs][1]);
  %1304 = equal(%1238, 1);
  %1305 = argwhere(%1304);
  %1306 = split(%1305, indices_or_sections=1, axis=1);
  %1307 = %1306.0;
  %1308 = squeeze(%1307, axis=[1]);
  %1309 = (%1308,);
  %1310 = %1309.0;
  %1311 = reshape(%1310, newshape=[-1, 1, 1, 1]);
  %1312 = repeat(%1311, repeats=256, axis=1);
  %1313 = repeat(%1312, repeats=7, axis=2);
  %1314 = repeat(%1313, repeats=7, axis=3);
  %1315 = equal(%1238, 1);
  %1316 = argwhere(%1315);
  %1317 = split(%1316, indices_or_sections=1, axis=1);
  %1318 = %1317.0;
  %1319 = squeeze(%1318, axis=[1]);
  %1320 = (%1319,);
  %1321 = %1320.0;
  %1322 = cast(%1321, dtype="int64");
  %1323 = (%1291, %1322);
  %1324 = adv_index(%1323);
  %1325 = vision.roi_align(%770, %1324, meta[relay.attrs.ROIAlignAttrs][1]);
  %1326 = scatter(%1303, %1314, %1325, meta[relay.attrs.ScatterAttrs][2]);
  %1327 = equal(%1238, 2);
  %1328 = argwhere(%1327);
  %1329 = split(%1328, indices_or_sections=1, axis=1);
  %1330 = %1329.0;
  %1331 = squeeze(%1330, axis=[1]);
  %1332 = (%1331,);
  %1333 = %1332.0;
  %1334 = reshape(%1333, newshape=[-1, 1, 1, 1]);
  %1335 = repeat(%1334, repeats=256, axis=1);
  %1336 = repeat(%1335, repeats=7, axis=2);
  %1337 = repeat(%1336, repeats=7, axis=3);
  %1338 = equal(%1238, 2);
  %1339 = argwhere(%1338);
  %1340 = split(%1339, indices_or_sections=1, axis=1);
  %1341 = %1340.0;
  %1342 = squeeze(%1341, axis=[1]);
  %1343 = (%1342,);
  %1344 = %1343.0;
  %1345 = cast(%1344, dtype="int64");
  %1346 = (%1291, %1345);
  %1347 = adv_index(%1346);
  %1348 = vision.roi_align(%776, %1347, meta[relay.attrs.ROIAlignAttrs][2]);
  %1349 = scatter(%1326, %1337, %1348, meta[relay.attrs.ScatterAttrs][3]);
  %1350 = equal(%1238, 3);
  %1351 = argwhere(%1350);
  %1352 = split(%1351, indices_or_sections=1, axis=1);
  %1353 = %1352.0;
  %1354 = squeeze(%1353, axis=[1]);
  %1355 = (%1354,);
  %1356 = %1355.0;
  %1357 = reshape(%1356, newshape=[-1, 1, 1, 1]);
  %1358 = repeat(%1357, repeats=256, axis=1);
  %1359 = repeat(%1358, repeats=7, axis=2);
  %1360 = repeat(%1359, repeats=7, axis=3);
  %1361 = %763.9;
  %1362 = equal(%1238, 3);
  %1363 = argwhere(%1362);
  %1364 = split(%1363, indices_or_sections=1, axis=1);
  %1365 = %1364.0;
  %1366 = squeeze(%1365, axis=[1]);
  %1367 = (%1366,);
  %1368 = %1367.0;
  %1369 = cast(%1368, dtype="int64");
  %1370 = (%1291, %1369);
  %1371 = adv_index(%1370);
  %1372 = vision.roi_align(%1361, %1371, meta[relay.attrs.ROIAlignAttrs][3]);
  %1373 = scatter(%1349, %1360, %1372, meta[relay.attrs.ScatterAttrs][4]);
  %1374 = reshape(%1373, newshape=[0, -1, 1, 1]);
  %1375 = squeeze(%1374, axis=[2, 3]);
  %1376 = transpose(%model.roi_heads.box_head.fc6.weight, axes=[1, 0]);
  %1377 = transpose(%1376, axes=[1, 0]);
  %1378 = nn.dense(%1375, %1377, units=1024);
  %1379 = add(%1378, %model.roi_heads.box_head.fc6.bias);
  %1380 = nn.relu(%1379);
  %1381 = transpose(%model.roi_heads.box_head.fc7.weight, axes=[1, 0]);
  %1382 = transpose(%1381, axes=[1, 0]);
  %1383 = nn.dense(%1380, %1382, units=1024);
  %1384 = add(%1383, %model.roi_heads.box_head.fc7.bias);
  %1385 = nn.relu(%1384);
  %1386 = reshape(%1385, newshape=[0, -1]);
  %1387 = transpose(%model.roi_heads.box_predictor.cls_score.weight, axes=[1, 0]);
  %1388 = transpose(%1387, axes=[1, 0]);
  %1389 = nn.dense(%1386, %1388, units=91);
  %1390 = add(%1389, %model.roi_heads.box_predictor.cls_score.bias);
  %1391 = transpose(%model.roi_heads.box_predictor.bbox_pred.weight, axes=[1, 0]);
  %1392 = transpose(%1391, axes=[1, 0]);
  %1393 = nn.dense(%1386, %1392, units=364);
  %1394 = add(%1393, %model.roi_heads.box_predictor.bbox_pred.bias);
  %1395 = (%1390, %1394);
  %1396 = %1395.1;
  %1397 = shape_of(%1184, dtype="int32");
  %1398 = take(%1397, 0, axis=0);
  %1399 = add(%1398, 0);
  %1400 = cast(%1399, dtype="int64");
  %1401 = expand_dims(%1400, axis=0);
  %1402 = expand_dims(-1, axis=0);
  %1403 = (%1401, %1402);
  %1404 = concatenate(%1403);
  %1405 = dyn.reshape(%1396, %1404, newshape=[]);
  %1406 = cast_like(0, meta[relay.Constant][60]);
  %1407 = less(meta[relay.Constant][60], %1406);
  %1408 = shape_of(%1405, dtype="int32");
  %1409 = cast_like(%1408, meta[relay.Constant][60]);
  %1410 = add(meta[relay.Constant][60], %1409);
  %1411 = where(%1407, %1410, meta[relay.Constant][60]);
  %1412 = shape_of(%1405, dtype="int32");
  %1413 = cast(%1412, dtype="int64");
  %1414 = dyn.strided_slice(%1405, %1411, %1413, meta[relay.Constant][61], begin=None, end=None, strides=None);
  %1415 = cast_like(0, meta[relay.Constant][62]);
  %1416 = less(meta[relay.Constant][62], %1415);
  %1417 = shape_of(%1414, dtype="int32");
  %1418 = cast_like(%1417, meta[relay.Constant][62]);
  %1419 = add(meta[relay.Constant][62], %1418);
  %1420 = where(%1416, %1419, meta[relay.Constant][62]);
  %1421 = shape_of(%1414, dtype="int32");
  %1422 = cast(%1421, dtype="int64");
  %1423 = dyn.strided_slice(%1414, %1420, %1422, meta[relay.Constant][63], begin=None, end=None, strides=None);
  %1424 = divide(%1423, 10f);
  %1425 = (%1184,);
  %1426 = concatenate(%1425);
  %1427 = cast_like(0, meta[relay.Constant][64]);
  %1428 = less(meta[relay.Constant][64], %1427);
  %1429 = shape_of(%1426, dtype="int32");
  %1430 = cast_like(%1429, meta[relay.Constant][64]);
  %1431 = add(meta[relay.Constant][64], %1430);
  %1432 = where(%1428, %1431, meta[relay.Constant][64]);
  %1433 = shape_of(%1426, dtype="int32");
  %1434 = cast(%1433, dtype="int64");
  %1435 = dyn.strided_slice(%1426, %1432, %1434, meta[relay.Constant][65], begin=None, end=None, strides=None);
  %1436 = take(%1435, 2, axis=1);
  %1437 = cast_like(0, meta[relay.Constant][66]);
  %1438 = less(meta[relay.Constant][66], %1437);
  %1439 = shape_of(%1426, dtype="int32");
  %1440 = cast_like(%1439, meta[relay.Constant][66]);
  %1441 = add(meta[relay.Constant][66], %1440);
  %1442 = where(%1438, %1441, meta[relay.Constant][66]);
  %1443 = shape_of(%1426, dtype="int32");
  %1444 = cast(%1443, dtype="int64");
  %1445 = dyn.strided_slice(%1426, %1442, %1444, meta[relay.Constant][67], begin=None, end=None, strides=None);
  %1446 = take(%1445, 0, axis=1);
  %1447 = subtract(%1436, %1446);
  %1448 = cast_like(0, meta[relay.Constant][68]);
  %1449 = less(meta[relay.Constant][68], %1448);
  %1450 = shape_of(%1447, dtype="int32");
  %1451 = cast_like(%1450, meta[relay.Constant][68]);
  %1452 = add(meta[relay.Constant][68], %1451);
  %1453 = where(%1449, %1452, meta[relay.Constant][68]);
  %1454 = shape_of(%1447, dtype="int32");
  %1455 = cast(%1454, dtype="int64");
  %1456 = dyn.strided_slice(%1447, %1453, %1455, meta[relay.Constant][69], begin=None, end=None, strides=None);
  %1457 = expand_dims(%1456, axis=1);
  %1458 = multiply(%1424, %1457);
  %1459 = cast_like(0, meta[relay.Constant][70]);
  %1460 = less(meta[relay.Constant][70], %1459);
  %1461 = shape_of(%1426, dtype="int32");
  %1462 = cast_like(%1461, meta[relay.Constant][70]);
  %1463 = add(meta[relay.Constant][70], %1462);
  %1464 = where(%1460, %1463, meta[relay.Constant][70]);
  %1465 = shape_of(%1426, dtype="int32");
  %1466 = cast(%1465, dtype="int64");
  %1467 = dyn.strided_slice(%1426, %1464, %1466, meta[relay.Constant][71], begin=None, end=None, strides=None);
  %1468 = take(%1467, 0, axis=1);
  %1469 = multiply(%1447, 0.5f);
  %1470 = add(%1468, %1469);
  %1471 = cast_like(0, meta[relay.Constant][72]);
  %1472 = less(meta[relay.Constant][72], %1471);
  %1473 = shape_of(%1470, dtype="int32");
  %1474 = cast_like(%1473, meta[relay.Constant][72]);
  %1475 = add(meta[relay.Constant][72], %1474);
  %1476 = where(%1472, %1475, meta[relay.Constant][72]);
  %1477 = shape_of(%1470, dtype="int32");
  %1478 = cast(%1477, dtype="int64");
  %1479 = dyn.strided_slice(%1470, %1476, %1478, meta[relay.Constant][73], begin=None, end=None, strides=None);
  %1480 = expand_dims(%1479, axis=1);
  %1481 = add(%1458, %1480);
  %1482 = cast_like(0, meta[relay.Constant][74]);
  %1483 = less(meta[relay.Constant][74], %1482);
  %1484 = shape_of(%1405, dtype="int32");
  %1485 = cast_like(%1484, meta[relay.Constant][74]);
  %1486 = add(meta[relay.Constant][74], %1485);
  %1487 = where(%1483, %1486, meta[relay.Constant][74]);
  %1488 = shape_of(%1405, dtype="int32");
  %1489 = cast(%1488, dtype="int64");
  %1490 = dyn.strided_slice(%1405, %1487, %1489, meta[relay.Constant][75], begin=None, end=None, strides=None);
  %1491 = cast_like(0, meta[relay.Constant][76]);
  %1492 = less(meta[relay.Constant][76], %1491);
  %1493 = shape_of(%1490, dtype="int32");
  %1494 = cast_like(%1493, meta[relay.Constant][76]);
  %1495 = add(meta[relay.Constant][76], %1494);
  %1496 = where(%1492, %1495, meta[relay.Constant][76]);
  %1497 = shape_of(%1490, dtype="int32");
  %1498 = cast(%1497, dtype="int64");
  %1499 = dyn.strided_slice(%1490, %1496, %1498, meta[relay.Constant][77], begin=None, end=None, strides=None);
  %1500 = divide(%1499, 5f);
  %1501 = clip(%1500, a_min=-3.40282e+38f, a_max=4.13517f);
  %1502 = exp(%1501);
  %1503 = cast_like(0, meta[relay.Constant][78]);
  %1504 = less(meta[relay.Constant][78], %1503);
  %1505 = shape_of(%1447, dtype="int32");
  %1506 = cast_like(%1505, meta[relay.Constant][78]);
  %1507 = add(meta[relay.Constant][78], %1506);
  %1508 = where(%1504, %1507, meta[relay.Constant][78]);
  %1509 = shape_of(%1447, dtype="int32");
  %1510 = cast(%1509, dtype="int64");
  %1511 = dyn.strided_slice(%1447, %1508, %1510, meta[relay.Constant][79], begin=None, end=None, strides=None);
  %1512 = expand_dims(%1511, axis=1);
  %1513 = multiply(%1502, %1512);
  %1514 = multiply(0.5f, %1513);
  %1515 = subtract(%1481, %1514);
  %1516 = cast_like(0, meta[relay.Constant][80]);
  %1517 = less(meta[relay.Constant][80], %1516);
  %1518 = shape_of(%1405, dtype="int32");
  %1519 = cast_like(%1518, meta[relay.Constant][80]);
  %1520 = add(meta[relay.Constant][80], %1519);
  %1521 = where(%1517, %1520, meta[relay.Constant][80]);
  %1522 = shape_of(%1405, dtype="int32");
  %1523 = cast(%1522, dtype="int64");
  %1524 = dyn.strided_slice(%1405, %1521, %1523, meta[relay.Constant][81], begin=None, end=None, strides=None);
  %1525 = cast_like(0, meta[relay.Constant][82]);
  %1526 = less(meta[relay.Constant][82], %1525);
  %1527 = shape_of(%1524, dtype="int32");
  %1528 = cast_like(%1527, meta[relay.Constant][82]);
  %1529 = add(meta[relay.Constant][82], %1528);
  %1530 = where(%1526, %1529, meta[relay.Constant][82]);
  %1531 = shape_of(%1524, dtype="int32");
  %1532 = cast(%1531, dtype="int64");
  %1533 = dyn.strided_slice(%1524, %1530, %1532, meta[relay.Constant][83], begin=None, end=None, strides=None);
  %1534 = divide(%1533, 10f);
  %1535 = cast_like(0, meta[relay.Constant][84]);
  %1536 = less(meta[relay.Constant][84], %1535);
  %1537 = shape_of(%1426, dtype="int32");
  %1538 = cast_like(%1537, meta[relay.Constant][84]);
  %1539 = add(meta[relay.Constant][84], %1538);
  %1540 = where(%1536, %1539, meta[relay.Constant][84]);
  %1541 = shape_of(%1426, dtype="int32");
  %1542 = cast(%1541, dtype="int64");
  %1543 = dyn.strided_slice(%1426, %1540, %1542, meta[relay.Constant][85], begin=None, end=None, strides=None);
  %1544 = take(%1543, 3, axis=1);
  %1545 = cast_like(0, meta[relay.Constant][86]);
  %1546 = less(meta[relay.Constant][86], %1545);
  %1547 = shape_of(%1426, dtype="int32");
  %1548 = cast_like(%1547, meta[relay.Constant][86]);
  %1549 = add(meta[relay.Constant][86], %1548);
  %1550 = where(%1546, %1549, meta[relay.Constant][86]);
  %1551 = shape_of(%1426, dtype="int32");
  %1552 = cast(%1551, dtype="int64");
  %1553 = dyn.strided_slice(%1426, %1550, %1552, meta[relay.Constant][87], begin=None, end=None, strides=None);
  %1554 = take(%1553, 1, axis=1);
  %1555 = subtract(%1544, %1554);
  %1556 = cast_like(0, meta[relay.Constant][88]);
  %1557 = less(meta[relay.Constant][88], %1556);
  %1558 = shape_of(%1555, dtype="int32");
  %1559 = cast_like(%1558, meta[relay.Constant][88]);
  %1560 = add(meta[relay.Constant][88], %1559);
  %1561 = where(%1557, %1560, meta[relay.Constant][88]);
  %1562 = shape_of(%1555, dtype="int32");
  %1563 = cast(%1562, dtype="int64");
  %1564 = dyn.strided_slice(%1555, %1561, %1563, meta[relay.Constant][89], begin=None, end=None, strides=None);
  %1565 = expand_dims(%1564, axis=1);
  %1566 = multiply(%1534, %1565);
  %1567 = cast_like(0, meta[relay.Constant][90]);
  %1568 = less(meta[relay.Constant][90], %1567);
  %1569 = shape_of(%1426, dtype="int32");
  %1570 = cast_like(%1569, meta[relay.Constant][90]);
  %1571 = add(meta[relay.Constant][90], %1570);
  %1572 = where(%1568, %1571, meta[relay.Constant][90]);
  %1573 = shape_of(%1426, dtype="int32");
  %1574 = cast(%1573, dtype="int64");
  %1575 = dyn.strided_slice(%1426, %1572, %1574, meta[relay.Constant][91], begin=None, end=None, strides=None);
  %1576 = take(%1575, 1, axis=1);
  %1577 = multiply(%1555, 0.5f);
  %1578 = add(%1576, %1577);
  %1579 = cast_like(0, meta[relay.Constant][92]);
  %1580 = less(meta[relay.Constant][92], %1579);
  %1581 = shape_of(%1578, dtype="int32");
  %1582 = cast_like(%1581, meta[relay.Constant][92]);
  %1583 = add(meta[relay.Constant][92], %1582);
  %1584 = where(%1580, %1583, meta[relay.Constant][92]);
  %1585 = shape_of(%1578, dtype="int32");
  %1586 = cast(%1585, dtype="int64");
  %1587 = dyn.strided_slice(%1578, %1584, %1586, meta[relay.Constant][93], begin=None, end=None, strides=None);
  %1588 = expand_dims(%1587, axis=1);
  %1589 = add(%1566, %1588);
  %1590 = cast_like(0, meta[relay.Constant][94]);
  %1591 = less(meta[relay.Constant][94], %1590);
  %1592 = shape_of(%1405, dtype="int32");
  %1593 = cast_like(%1592, meta[relay.Constant][94]);
  %1594 = add(meta[relay.Constant][94], %1593);
  %1595 = where(%1591, %1594, meta[relay.Constant][94]);
  %1596 = shape_of(%1405, dtype="int32");
  %1597 = cast(%1596, dtype="int64");
  %1598 = dyn.strided_slice(%1405, %1595, %1597, meta[relay.Constant][95], begin=None, end=None, strides=None);
  %1599 = cast_like(0, meta[relay.Constant][96]);
  %1600 = less(meta[relay.Constant][96], %1599);
  %1601 = shape_of(%1598, dtype="int32");
  %1602 = cast_like(%1601, meta[relay.Constant][96]);
  %1603 = add(meta[relay.Constant][96], %1602);
  %1604 = where(%1600, %1603, meta[relay.Constant][96]);
  %1605 = shape_of(%1598, dtype="int32");
  %1606 = cast(%1605, dtype="int64");
  %1607 = dyn.strided_slice(%1598, %1604, %1606, meta[relay.Constant][97], begin=None, end=None, strides=None);
  %1608 = divide(%1607, 5f);
  %1609 = clip(%1608, a_min=-3.40282e+38f, a_max=4.13517f);
  %1610 = exp(%1609);
  %1611 = cast_like(0, meta[relay.Constant][98]);
  %1612 = less(meta[relay.Constant][98], %1611);
  %1613 = shape_of(%1555, dtype="int32");
  %1614 = cast_like(%1613, meta[relay.Constant][98]);
  %1615 = add(meta[relay.Constant][98], %1614);
  %1616 = where(%1612, %1615, meta[relay.Constant][98]);
  %1617 = shape_of(%1555, dtype="int32");
  %1618 = cast(%1617, dtype="int64");
  %1619 = dyn.strided_slice(%1555, %1616, %1618, meta[relay.Constant][99], begin=None, end=None, strides=None);
  %1620 = expand_dims(%1619, axis=1);
  %1621 = multiply(%1610, %1620);
  %1622 = multiply(0.5f, %1621);
  %1623 = subtract(%1589, %1622);
  %1624 = multiply(0.5f, %1513);
  %1625 = add(%1481, %1624);
  %1626 = multiply(0.5f, %1621);
  %1627 = add(%1589, %1626);
  %1628 = (%1515, %1623, %1625, %1627);
  %1629 = stack(%1628, axis=2);
  %1630 = reshape(%1629, newshape=[0, -1, 1]);
  %1631 = squeeze(%1630, axis=[2]);
  %1632 = cast(%1399, dtype="int64");
  %1633 = expand_dims(%1632, axis=0);
  %1634 = expand_dims(-1, axis=0);
  %1635 = expand_dims(4, axis=0);
  %1636 = (%1633, %1634, %1635);
  %1637 = concatenate(%1636);
  %1638 = dyn.reshape(%1631, %1637, newshape=[]);
  %1639 = (%1638,);
  %1640 = %1639.0;
  %1641 = cast_like(0, meta[relay.Constant][100]);
  %1642 = less(meta[relay.Constant][100], %1641);
  %1643 = shape_of(%1640, dtype="int32");
  %1644 = cast_like(%1643, meta[relay.Constant][100]);
  %1645 = add(meta[relay.Constant][100], %1644);
  %1646 = where(%1642, %1645, meta[relay.Constant][100]);
  %1647 = shape_of(%1640, dtype="int32");
  %1648 = cast(%1647, dtype="int64");
  %1649 = dyn.strided_slice(%1640, %1646, %1648, meta[relay.Constant][101], begin=None, end=None, strides=None);
  %1650 = maximum(%1649, 0f);
  %1651 = cast(%1081, dtype="float32");
  %1652 = minimum(%1650, %1651);
  %1653 = cast_like(0, meta[relay.Constant][102]);
  %1654 = less(meta[relay.Constant][102], %1653);
  %1655 = shape_of(%1640, dtype="int32");
  %1656 = cast_like(%1655, meta[relay.Constant][102]);
  %1657 = add(meta[relay.Constant][102], %1656);
  %1658 = where(%1654, %1657, meta[relay.Constant][102]);
  %1659 = shape_of(%1640, dtype="int32");
  %1660 = cast(%1659, dtype="int64");
  %1661 = dyn.strided_slice(%1640, %1658, %1660, meta[relay.Constant][103], begin=None, end=None, strides=None);
  %1662 = maximum(%1661, 0f);
  %1663 = cast(%1086, dtype="float32");
  %1664 = minimum(%1662, %1663);
  %1665 = (%1652, %1664);
  %1666 = stack(%1665, axis=3);
  %1667 = shape_of(%1640, dtype="int32");
  %1668 = take(%1667, 0, axis=0);
  %1669 = cast(%1668, dtype="int64");
  %1670 = expand_dims(%1669, axis=0);
  %1671 = shape_of(%1640, dtype="int32");
  %1672 = take(%1671, 1, axis=0);
  %1673 = cast(%1672, dtype="int64");
  %1674 = expand_dims(%1673, axis=0);
  %1675 = shape_of(%1640, dtype="int32");
  %1676 = take(%1675, 2, axis=0);
  %1677 = cast(%1676, dtype="int64");
  %1678 = expand_dims(%1677, axis=0);
  %1679 = (%1670, %1674, %1678);
  %1680 = concatenate(%1679);
  %1681 = dyn.reshape(%1666, %1680, newshape=[]);
  %1682 = cast_like(0, meta[relay.Constant][104]);
  %1683 = less(meta[relay.Constant][104], %1682);
  %1684 = shape_of(%1681, dtype="int32");
  %1685 = cast_like(%1684, meta[relay.Constant][104]);
  %1686 = add(meta[relay.Constant][104], %1685);
  %1687 = where(%1683, %1686, meta[relay.Constant][104]);
  %1688 = shape_of(%1681, dtype="int32");
  %1689 = cast(%1688, dtype="int64");
  %1690 = dyn.strided_slice(%1681, %1687, %1689, meta[relay.Constant][105], begin=None, end=None, strides=None);
  %1691 = cast_like(0, meta[relay.Constant][106]);
  %1692 = less(meta[relay.Constant][106], %1691);
  %1693 = shape_of(%1690, dtype="int32");
  %1694 = cast_like(%1693, meta[relay.Constant][106]);
  %1695 = add(meta[relay.Constant][106], %1694);
  %1696 = where(%1692, %1695, meta[relay.Constant][106]);
  %1697 = shape_of(%1690, dtype="int32");
  %1698 = cast(%1697, dtype="int64");
  %1699 = dyn.strided_slice(%1690, %1696, %1698, meta[relay.Constant][107], begin=None, end=None, strides=None);
  %1700 = reshape(%1699, newshape=[-1, 4]);
  %1701 = %1395.0;
  %1702 = nn.softmax(%1701);
  %1703 = (%1702,);
  %1704 = %1703.0;
  %1705 = cast_like(0, meta[relay.Constant][108]);
  %1706 = less(meta[relay.Constant][108], %1705);
  %1707 = shape_of(%1704, dtype="int32");
  %1708 = cast_like(%1707, meta[relay.Constant][108]);
  %1709 = add(meta[relay.Constant][108], %1708);
  %1710 = where(%1706, %1709, meta[relay.Constant][108]);
  %1711 = shape_of(%1704, dtype="int32");
  %1712 = cast(%1711, dtype="int64");
  %1713 = dyn.strided_slice(%1704, %1710, %1712, meta[relay.Constant][109], begin=None, end=None, strides=None);
  %1714 = cast_like(0, meta[relay.Constant][110]);
  %1715 = less(meta[relay.Constant][110], %1714);
  %1716 = shape_of(%1713, dtype="int32");
  %1717 = cast_like(%1716, meta[relay.Constant][110]);
  %1718 = add(meta[relay.Constant][110], %1717);
  %1719 = where(%1715, %1718, meta[relay.Constant][110]);
  %1720 = shape_of(%1713, dtype="int32");
  %1721 = cast(%1720, dtype="int64");
  %1722 = dyn.strided_slice(%1713, %1719, %1721, meta[relay.Constant][111], begin=None, end=None, strides=None);
  %1723 = reshape(%1722, newshape=[-1]);
  %1724 = greater(%1723, 0.05f);
  %1725 = argwhere(%1724);
  %1726 = split(%1725, indices_or_sections=1, axis=1);
  %1727 = %1726.0;
  %1728 = squeeze(%1727, axis=[1]);
  %1729 = (%1728,);
  %1730 = %1729.0;
  %1731 = cast(%1730, dtype="int64");
  %1732 = (%1700, %1731);
  %1733 = adv_index(%1732);
  %1734 = cast_like(0, meta[relay.Constant][112]);
  %1735 = less(meta[relay.Constant][112], %1734);
  %1736 = shape_of(%1733, dtype="int32");
  %1737 = cast_like(%1736, meta[relay.Constant][112]);
  %1738 = add(meta[relay.Constant][112], %1737);
  %1739 = where(%1735, %1738, meta[relay.Constant][112]);
  %1740 = shape_of(%1733, dtype="int32");
  %1741 = cast(%1740, dtype="int64");
  %1742 = dyn.strided_slice(%1733, %1739, %1741, meta[relay.Constant][113], begin=None, end=None, strides=None);
  %1743 = take(%1742, 2, axis=1);
  %1744 = cast_like(0, meta[relay.Constant][114]);
  %1745 = less(meta[relay.Constant][114], %1744);
  %1746 = shape_of(%1733, dtype="int32");
  %1747 = cast_like(%1746, meta[relay.Constant][114]);
  %1748 = add(meta[relay.Constant][114], %1747);
  %1749 = where(%1745, %1748, meta[relay.Constant][114]);
  %1750 = shape_of(%1733, dtype="int32");
  %1751 = cast(%1750, dtype="int64");
  %1752 = dyn.strided_slice(%1733, %1749, %1751, meta[relay.Constant][115], begin=None, end=None, strides=None);
  %1753 = take(%1752, 0, axis=1);
  %1754 = subtract(%1743, %1753);
  %1755 = greater_equal(%1754, 0.01f);
  %1756 = cast(%1755, dtype="bool");
  %1757 = cast_like(0, meta[relay.Constant][116]);
  %1758 = less(meta[relay.Constant][116], %1757);
  %1759 = shape_of(%1733, dtype="int32");
  %1760 = cast_like(%1759, meta[relay.Constant][116]);
  %1761 = add(meta[relay.Constant][116], %1760);
  %1762 = where(%1758, %1761, meta[relay.Constant][116]);
  %1763 = shape_of(%1733, dtype="int32");
  %1764 = cast(%1763, dtype="int64");
  %1765 = dyn.strided_slice(%1733, %1762, %1764, meta[relay.Constant][117], begin=None, end=None, strides=None);
  %1766 = take(%1765, 3, axis=1);
  %1767 = cast_like(0, meta[relay.Constant][118]);
  %1768 = less(meta[relay.Constant][118], %1767);
  %1769 = shape_of(%1733, dtype="int32");
  %1770 = cast_like(%1769, meta[relay.Constant][118]);
  %1771 = add(meta[relay.Constant][118], %1770);
  %1772 = where(%1768, %1771, meta[relay.Constant][118]);
  %1773 = shape_of(%1733, dtype="int32");
  %1774 = cast(%1773, dtype="int64");
  %1775 = dyn.strided_slice(%1733, %1772, %1774, meta[relay.Constant][119], begin=None, end=None, strides=None);
  %1776 = take(%1775, 1, axis=1);
  %1777 = subtract(%1766, %1776);
  %1778 = greater_equal(%1777, 0.01f);
  %1779 = cast(%1778, dtype="bool");
  %1780 = logical_and(%1756, %1779);
  %1781 = argwhere(%1780);
  %1782 = split(%1781, indices_or_sections=1, axis=1);
  %1783 = %1782.0;
  %1784 = squeeze(%1783, axis=[1]);
  %1785 = (%1784,);
  %1786 = %1785.0;
  %1787 = cast(%1786, dtype="int64");
  %1788 = (%1733, %1787);
  %1789 = adv_index(%1788);
  %1790 = ndarray_size(%1789, dtype="int32");
  %1791 = equal(%1790, 0);
  %1858 = if (%1791) {
    zeros(shape=[0], dtype="int64")
  } else {
    %1792 = (%1723, %1731);
    %1793 = adv_index(%1792);
    %1794 = (%1793, %1787);
    %1795 = adv_index(%1794);
    %1796 = expand_dims(%1795, axis=-1);
    %1797 = arange(0, 91, 1, start=meta[relay.Constant][120], stop=meta[relay.Constant][121], step=meta[relay.Constant][122], dtype="int64");
    %1798 = reshape(%1797, newshape=[1, -1]);
    %1799 = cast(%1704, dtype="int64");
    %1800 = broadcast_to_like(%1798, %1799);
    %1801 = cast_like(0, meta[relay.Constant][123]);
    %1802 = less(meta[relay.Constant][123], %1801);
    %1803 = shape_of(%1800, dtype="int32");
    %1804 = cast_like(%1803, meta[relay.Constant][123]);
    %1805 = add(meta[relay.Constant][123], %1804);
    %1806 = where(%1802, %1805, meta[relay.Constant][123]);
    %1807 = shape_of(%1800, dtype="int32");
    %1808 = cast(%1807, dtype="int64");
    %1809 = dyn.strided_slice(%1800, %1806, %1808, meta[relay.Constant][124], begin=None, end=None, strides=None);
    %1810 = cast_like(0, meta[relay.Constant][125]);
    %1811 = less(meta[relay.Constant][125], %1810);
    %1812 = shape_of(%1809, dtype="int32");
    %1813 = cast_like(%1812, meta[relay.Constant][125]);
    %1814 = add(meta[relay.Constant][125], %1813);
    %1815 = where(%1811, %1814, meta[relay.Constant][125]);
    %1816 = shape_of(%1809, dtype="int32");
    %1817 = cast(%1816, dtype="int64");
    %1818 = dyn.strided_slice(%1809, %1815, %1817, meta[relay.Constant][126], begin=None, end=None, strides=None);
    %1819 = reshape(%1818, newshape=[-1]);
    %1820 = (%1819, %1731);
    %1821 = adv_index(%1820);
    %1822 = (%1821, %1787);
    %1823 = adv_index(%1822);
    %1824 = cast(%1823, dtype="float32");
    %1825 = max(%1789);
    %1826 = add(%1825, 1f);
    %1827 = multiply(%1824, %1826);
    %1828 = cast_like(0, meta[relay.Constant][127]);
    %1829 = less(meta[relay.Constant][127], %1828);
    %1830 = shape_of(%1827, dtype="int32");
    %1831 = cast_like(%1830, meta[relay.Constant][127]);
    %1832 = add(meta[relay.Constant][127], %1831);
    %1833 = where(%1829, %1832, meta[relay.Constant][127]);
    %1834 = shape_of(%1827, dtype="int32");
    %1835 = cast(%1834, dtype="int64");
    %1836 = dyn.strided_slice(%1827, %1833, %1835, meta[relay.Constant][128], begin=None, end=None, strides=None);
    %1837 = expand_dims(%1836, axis=1);
    %1838 = add(%1789, %1837);
    %1839 = (%1796, %1838);
    %1840 = concatenate(%1839, axis=-1);
    %1841 = expand_dims(%1840, axis=0);
    %1842 = vision.get_valid_counts(%1841, -1f, meta[relay.attrs.GetValidCountsAttrs][1]);
    %1843 = %1842.1;
    %1844 = %1842.0;
    %1845 = %1842.2;
    %1846 = vision.non_max_suppression(%1843, %1844, %1845, -1, 0.5f, met
    a[relay.attrs.NonMaximumSuppressionAttrs][1]);
    %1847 = %1846.0;
    %1848 = squeeze(%1847, axis=[0]);
    %1849 = cast_like(0, meta[relay.Constant][129]);
    %1850 = less(meta[relay.Constant][129], %1849);
    %1851 = shape_of(%1848, dtype="int32");
    %1852 = cast_like(%1851, meta[relay.Constant][129]);
    %1853 = add(meta[relay.Constant][129], %1852);
    %1854 = where(%1850, %1853, meta[relay.Constant][129]);
    %1855 = %1846.1;
    %1856 = squeeze(%1855, axis=[1]);
    %1857 = dyn.strided_slice(%1848, %1854, %1856, meta[relay.Constant][130], begin=None, end=None, strides=None, slice_mode="size");
    cast(%1857, dtype="int64")
  };
  %1859 = strided_slice(%1858, begin=[0], end=[100], strides=[1]);
  %1860 = (%1789, %1859);
  %1861 = adv_index(%1860);
  %1862 = cast_like(0, meta[relay.Constant][131]);
  %1863 = less(meta[relay.Constant][131], %1862);
  %1864 = shape_of(%1861, dtype="int32");
  %1865 = cast_like(%1864, meta[relay.Constant][131]);
  %1866 = add(meta[relay.Constant][131], %1865);
  %1867 = where(%1863, %1866, meta[relay.Constant][131]);
  %1868 = shape_of(%1861, dtype="int32");
  %1869 = cast(%1868, dtype="int64");
  %1870 = dyn.strided_slice(%1861, %1867, %1869, meta[relay.Constant][132], begin=None, end=None, strides=None);
  %1871 = take(%1870, 2, axis=1);
  %1872 = cast_like(0, meta[relay.Constant][133]);
  %1873 = less(meta[relay.Constant][133], %1872);
  %1874 = shape_of(%1861, dtype="int32");
  %1875 = cast_like(%1874, meta[relay.Constant][133]);
  %1876 = add(meta[relay.Constant][133], %1875);
  %1877 = where(%1873, %1876, meta[relay.Constant][133]);
  %1878 = shape_of(%1861, dtype="int32");
  %1879 = cast(%1878, dtype="int64");
  %1880 = dyn.strided_slice(%1861, %1877, %1879, meta[relay.Constant][134], begin=None, end=None, strides=None);
  %1881 = take(%1880, 0, axis=1);
  %1882 = subtract(%1871, %1881);
  %1883 = cast_like(0, meta[relay.Constant][135]);
  %1884 = less(meta[relay.Constant][135], %1883);
  %1885 = shape_of(%1861, dtype="int32");
  %1886 = cast_like(%1885, meta[relay.Constant][135]);
  %1887 = add(meta[relay.Constant][135], %1886);
  %1888 = where(%1884, %1887, meta[relay.Constant][135]);
  %1889 = shape_of(%1861, dtype="int32");
  %1890 = cast(%1889, dtype="int64");
  %1891 = dyn.strided_slice(%1861, %1888, %1890, meta[relay.Constant][136], begin=None, end=None, strides=None);
  %1892 = take(%1891, 3, axis=1);
  %1893 = cast_like(0, meta[relay.Constant][137]);
  %1894 = less(meta[relay.Constant][137], %1893);
  %1895 = shape_of(%1861, dtype="int32");
  %1896 = cast_like(%1895, meta[relay.Constant][137]);
  %1897 = add(meta[relay.Constant][137], %1896);
  %1898 = where(%1894, %1897, meta[relay.Constant][137]);
  %1899 = shape_of(%1861, dtype="int32");
  %1900 = cast(%1899, dtype="int64");
  %1901 = dyn.strided_slice(%1861, %1898, %1900, meta[relay.Constant][138], begin=None, end=None, strides=None);
  %1902 = take(%1901, 1, axis=1);
  %1903 = subtract(%1892, %1902);
  %1904 = multiply(%1882, %1903);
  %1905 = (%1904,);
  %1906 = concatenate(%1905);
  %1907 = sqrt(%1906);
  %1908 = divide(%1907, 224f);
  %1909 = log2(%1908);
  %1910 = add(%1909, 4f);
  %1911 = add(%1910, 1e-06f);
  %1912 = floor(%1911);
  %1913 = clip(%1912, a_min=2f, a_max=5f);
  %1914 = cast(%1913, dtype="int64");
  %1915 = subtract(%1914, 2);
  %1916 = shape_of(%1915, dtype="int32");
  %1917 = take(%1916, 0, axis=0);
  %1918 = expand_dims(%1917, axis=0);
  %1919 = cast(%1918, dtype="int64");
  %1920 = expand_dims(256, axis=0);
  %1921 = cast(%1920, dtype="int64");
  %1922 = expand_dims(14, axis=0);
  %1923 = cast(%1922, dtype="int64");
  %1924 = expand_dims(14, axis=0);
  %1925 = cast(%1924, dtype="int64");
  %1926 = (%1919, %1921, %1923, %1925);
  %1927 = concatenate(%1926);
  %1928 = dyn.full(0, %1927, shape=None, dtype="float32");
  %1929 = reshape(%1928, newshape=[0, 256, 14, 14]);
  %1930 = equal(%1915, 0);
  %1931 = argwhere(%1930);
  %1932 = split(%1931, indices_or_sections=1, axis=1);
  %1933 = %1932.0;
  %1934 = squeeze(%1933, axis=[1]);
  %1935 = (%1934,);
  %1936 = %1935.0;
  %1937 = reshape(%1936, newshape=[-1, 1, 1, 1]);
  %1938 = repeat(%1937, repeats=256, axis=1);
  %1939 = repeat(%1938, repeats=14, axis=2);
  %1940 = repeat(%1939, repeats=14, axis=3);
  %1941 = cast_like(0, meta[relay.Constant][139]);
  %1942 = less(meta[relay.Constant][139], %1941);
  %1943 = shape_of(%1861, dtype="int32");
  %1944 = cast_like(%1943, meta[relay.Constant][139]);
  %1945 = add(meta[relay.Constant][139], %1944);
  %1946 = where(%1942, %1945, meta[relay.Constant][139]);
  %1947 = shape_of(%1861, dtype="int32");
  %1948 = cast(%1947, dtype="int64");
  %1949 = dyn.strided_slice(%1861, %1946, %1948, meta[relay.Constant][140], begin=None, end=None, strides=None);
  %1950 = cast_like(0, meta[relay.Constant][141]);
  %1951 = less(meta[relay.Constant][141], %1950);
  %1952 = shape_of(%1949, dtype="int32");
  %1953 = cast_like(%1952, meta[relay.Constant][141]);
  %1954 = add(meta[relay.Constant][141], %1953);
  %1955 = where(%1951, %1954, meta[relay.Constant][141]);
  %1956 = shape_of(%1949, dtype="int32");
  %1957 = expand_dims(1, axis=0);
  %1958 = expand_dims(1, axis=0);
  %1959 = scatter(%1956, %1957, %1958, meta[relay.attrs.ScatterAttrs][5]);
  %1960 = cast(%1959, dtype="int64");
  %1961 = dyn.strided_slice(%1949, %1955, %1960, meta[relay.Constant][142], begin=None, end=None, strides=None);
  %1962 = full_like(%1961, 0);
  %1963 = (%1962,);
  %1964 = concatenate(%1963);
  %1965 = (%1861,);
  %1966 = concatenate(%1965);
  %1967 = (%1964, %1966);
  %1968 = concatenate(%1967, axis=1);
  %1969 = equal(%1915, 0);
  %1970 = argwhere(%1969);
  %1971 = split(%1970, indices_or_sections=1, axis=1);
  %1972 = %1971.0;
  %1973 = squeeze(%1972, axis=[1]);
  %1974 = (%1973,);
  %1975 = %1974.0;
  %1976 = cast(%1975, dtype="int64");
  %1977 = (%1968, %1976);
  %1978 = adv_index(%1977);
  %1979 = vision.roi_align(%764, %1978, meta[relay.attrs.ROIAlignAttrs][4]);
  %1980 = scatter(%1929, %1940, %1979, meta[relay.attrs.ScatterAttrs][6]);
  %1981 = equal(%1915, 1);
  %1982 = argwhere(%1981);
  %1983 = split(%1982, indices_or_sections=1, axis=1);
  %1984 = %1983.0;
  %1985 = squeeze(%1984, axis=[1]);
  %1986 = (%1985,);
  %1987 = %1986.0;
  %1988 = reshape(%1987, newshape=[-1, 1, 1, 1]);
  %1989 = repeat(%1988, repeats=256, axis=1);
  %1990 = repeat(%1989, repeats=14, axis=2);
  %1991 = repeat(%1990, repeats=14, axis=3);
  %1992 = equal(%1915, 1);
  %1993 = argwhere(%1992);
  %1994 = split(%1993, indices_or_sections=1, axis=1);
  %1995 = %1994.0;
  %1996 = squeeze(%1995, axis=[1]);
  %1997 = (%1996,);
  %1998 = %1997.0;
  %1999 = cast(%1998, dtype="int64");
  %2000 = (%1968, %1999);
  %2001 = adv_index(%2000);
  %2002 = vision.roi_align(%770, %2001, meta[relay.attrs.ROIAlignAttrs][5]);
  %2003 = scatter(%1980, %1991, %2002, meta[relay.attrs.ScatterAttrs][7]);
  %2004 = equal(%1915, 2);
  %2005 = argwhere(%2004);
  %2006 = split(%2005, indices_or_sections=1, axis=1);
  %2007 = %2006.0;
  %2008 = squeeze(%2007, axis=[1]);
  %2009 = (%2008,);
  %2010 = %2009.0;
  %2011 = reshape(%2010, newshape=[-1, 1, 1, 1]);
  %2012 = repeat(%2011, repeats=256, axis=1);
  %2013 = repeat(%2012, repeats=14, axis=2);
  %2014 = repeat(%2013, repeats=14, axis=3);
  %2015 = equal(%1915, 2);
  %2016 = argwhere(%2015);
  %2017 = split(%2016, indices_or_sections=1, axis=1);
  %2018 = %2017.0;
  %2019 = squeeze(%2018, axis=[1]);
  %2020 = (%2019,);
  %2021 = %2020.0;
  %2022 = cast(%2021, dtype="int64");
  %2023 = (%1968, %2022);
  %2024 = adv_index(%2023);
  %2025 = vision.roi_align(%776, %2024, meta[relay.attrs.ROIAlignAttrs][6]);
  %2026 = scatter(%2003, %2014, %2025, meta[relay.attrs.ScatterAttrs][8]);
  %2027 = equal(%1915, 3);
  %2028 = argwhere(%2027);
  %2029 = split(%2028, indices_or_sections=1, axis=1);
  %2030 = %2029.0;
  %2031 = squeeze(%2030, axis=[1]);
  %2032 = (%2031,);
  %2033 = %2032.0;
  %2034 = reshape(%2033, newshape=[-1, 1, 1, 1]);
  %2035 = repeat(%2034, repeats=256, axis=1);
  %2036 = repeat(%2035, repeats=14, axis=2);
  %2037 = repeat(%2036, repeats=14, axis=3);
  %2038 = %763.10;
  %2039 = equal(%1915, 3);
  %2040 = argwhere(%2039);
  %2041 = split(%2040, indices_or_sections=1, axis=1);
  %2042 = %2041.0;
  %2043 = squeeze(%2042, axis=[1]);
  %2044 = (%2043,);
  %2045 = %2044.0;
  %2046 = cast(%2045, dtype="int64");
  %2047 = (%1968, %2046);
  %2048 = adv_index(%2047);
  %2049 = vision.roi_align(%2038, %2048, meta[relay.attrs.ROIAlignAttrs][7]);
  %2050 = scatter(%2026, %2037, %2049, meta[relay.attrs.ScatterAttrs][9]);
  %2051 = nn.conv2d(%2050, %model.roi_heads.mask_head.mask_fcn1.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2052 = nn.bias_add(%2051, %model.roi_heads.mask_head.mask_fcn1.bias);
  %2053 = nn.relu(%2052);
  %2054 = nn.conv2d(%2053, %model.roi_heads.mask_head.mask_fcn2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2055 = nn.bias_add(%2054, %model.roi_heads.mask_head.mask_fcn2.bias);
  %2056 = nn.relu(%2055);
  %2057 = nn.conv2d(%2056, %model.roi_heads.mask_head.mask_fcn3.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2058 = nn.bias_add(%2057, %model.roi_heads.mask_head.mask_fcn3.bias);
  %2059 = nn.relu(%2058);
  %2060 = nn.conv2d(%2059, %model.roi_heads.mask_head.mask_fcn4.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2061 = nn.bias_add(%2060, %model.roi_heads.mask_head.mask_fcn4.bias);
  %2062 = nn.relu(%2061);
  %2063 = nn.conv2d_transpose(%2062, %model.roi_heads.mask_predictor.conv5_mask.weight, channels=256, kernel_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]);
  %2064 = nn.bias_add(%2063, %model.roi_heads.mask_predictor.conv5_mask.bias);
  %2065 = nn.relu(%2064);
  %2066 = nn.conv2d(%2065, %model.roi_heads.mask_predictor.mask_fcn_logits.weight, padding=[0, 0, 0, 0], channels=91, kernel_size=[1, 1]);
  %2067 = nn.bias_add(%2066, %model.roi_heads.mask_predictor.mask_fcn_logits.bias);
  %2068 = sigmoid(%2067);
  %2069 = shape_of(%2067, dtype="int32");
  %2070 = take(%2069, 0, axis=0);
  %2071 = cast(%2070, dtype="int64");
  %2072 = arange(0, %2071, 1, start=meta[relay.Constant][143], stop=meta[relay.Call][0], step=meta[relay.Constant][144], dtype="int64");
  %2073 = (%1823, %1859);
  %2074 = adv_index(%2073);
  %2075 = (%2074,);
  %2076 = concatenate(%2075);
  %2077 = (%2068, %2072, %2076);
  %2078 = adv_index(%2077);
  %2079 = cast_like(0, meta[relay.Constant][145]);
  %2080 = less(meta[relay.Constant][145], %2079);
  %2081 = shape_of(%2078, dtype="int32");
  %2082 = cast_like(%2081, meta[relay.Constant][145]);
  %2083 = add(meta[relay.Constant][145], %2082);
  %2084 = where(%2080, %2083, meta[relay.Constant][145]);
  %2085 = shape_of(%2078, dtype="int32");
  %2086 = cast(%2085, dtype="int64");
  %2087 = dyn.strided_slice(%2078, %2084, %2086, meta[relay.Constant][146], begin=None, end=None, strides=None);
  %2088 = expand_dims(%2087, axis=1);
  %2089 = (%2088,);
  %2090 = %2089.0;
  %2091 = (%1795, %1859);
  %2092 = adv_index(%2091);
  %2093 = (%1861, %2090, %2092, %2074);
  %2094 = %2093.0;
  %2095 = split(%2094, indices_or_sections=4, axis=1);
  %2096 = %2095.0;
  %2097 = squeeze(%2096, axis=[1]);
  %2098 = %2095.1;
  %2099 = squeeze(%2098, axis=[1]);
  %2100 = %2095.2;
  %2101 = squeeze(%2100, axis=[1]);
  %2102 = %2095.3;
  %2103 = squeeze(%2102, axis=[1]);
  %2104 = (%2097, %2099, %2101, %2103);
  %2105 = %2104.0;
  %2106 = cast(300, dtype="float32");
  %2107 = cast(%1081, dtype="float32");
  %2108 = divide(%2106, %2107);
  %2109 = multiply(%2105, %2108);
  %2110 = %2104.1;
  %2111 = cast(300, dtype="float32");
  %2112 = cast(%1086, dtype="float32");
  %2113 = divide(%2111, %2112);
  %2114 = multiply(%2110, %2113);
  %2115 = %2104.2;
  %2116 = multiply(%2115, %2108);
  %2117 = %2104.3;
  %2118 = multiply(%2117, %2113);
  %2119 = (%2109, %2114, %2116, %2118);
  %2120 = stack(%2119, axis=1);
  %2121 = %2093.2;
  %2122 = %2093.3;
  %2123 = full(0, shape=[0, 300, 300], dtype="float32");
  %2124 = %2093.1;
  %2125 = nn.pad(%2124, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);
  %2126 = cast_like(0, meta[relay.Constant][147]);
  %2127 = less(meta[relay.Constant][147], %2126);
  %2128 = shape_of(%2120, dtype="int32");
  %2129 = cast_like(%2128, meta[relay.Constant][147]);
  %2130 = add(meta[relay.Constant][147], %2129);
  %2131 = where(%2127, %2130, meta[relay.Constant][147]);
  %2132 = shape_of(%2120, dtype="int32");
  %2133 = cast(%2132, dtype="int64");
  %2134 = dyn.strided_slice(%2120, %2131, %2133, meta[relay.Constant][148], begin=None, end=None, strides=None);
  %2135 = take(%2134, 2, axis=1);
  %2136 = cast_like(0, meta[relay.Constant][149]);
  %2137 = less(meta[relay.Constant][149], %2136);
  %2138 = shape_of(%2120, dtype="int32");
  %2139 = cast_like(%2138, meta[relay.Constant][149]);
  %2140 = add(meta[relay.Constant][149], %2139);
  %2141 = where(%2137, %2140, meta[relay.Constant][149]);
  %2142 = shape_of(%2120, dtype="int32");
  %2143 = cast(%2142, dtype="int64");
  %2144 = dyn.strided_slice(%2120, %2141, %2143, meta[relay.Constant][150], begin=None, end=None, strides=None);
  %2145 = take(%2144, 0, axis=1);
  %2146 = add(%2135, %2145);
  %2147 = multiply(%2146, 0.5f);
  %2148 = cast_like(0, meta[relay.Constant][151]);
  %2149 = less(meta[relay.Constant][151], %2148);
  %2150 = shape_of(%2120, dtype="int32");
  %2151 = cast_like(%2150, meta[relay.Constant][151]);
  %2152 = add(meta[relay.Constant][151], %2151);
  %2153 = where(%2149, %2152, meta[relay.Constant][151]);
  %2154 = shape_of(%2120, dtype="int32");
  %2155 = cast(%2154, dtype="int64");
  %2156 = dyn.strided_slice(%2120, %2153, %2155, meta[relay.Constant][152], begin=None, end=None, strides=None);
  %2157 = take(%2156, 2, axis=1);
  %2158 = cast_like(0, meta[relay.Constant][153]);
  %2159 = less(meta[relay.Constant][153], %2158);
  %2160 = shape_of(%2120, dtype="int32");
  %2161 = cast_like(%2160, meta[relay.Constant][153]);
  %2162 = add(meta[relay.Constant][153], %2161);
  %2163 = where(%2159, %2162, meta[relay.Constant][153]);
  %2164 = shape_of(%2120, dtype="int32");
  %2165 = cast(%2164, dtype="int64");
  %2166 = dyn.strided_slice(%2120, %2163, %2165, meta[relay.Constant][154], begin=None, end=None, strides=None);
  %2167 = take(%2166, 0, axis=1);
  %2168 = subtract(%2157, %2167);
  %2169 = multiply(%2168, 0.5f);
  %2170 = shape_of(%2124, dtype="int32");
  %2171 = take(%2170, 3, axis=0);
  %2172 = add(%2171, 2);
  %2173 = cast(%2172, dtype="int64");
  %2174 = cast(%2173, dtype="float32");
  %2175 = cast(%2171, dtype="int64");
  %2176 = cast(%2175, dtype="float32");
  %2177 = divide(%2174, %2176);
  %2178 = multiply(%2169, %2177);
  %2179 = subtract(%2147, %2178);
  %2180 = cast_like(0, meta[relay.Constant][155]);
  %2181 = less(meta[relay.Constant][155], %2180);
  %2182 = shape_of(%2120, dtype="int32");
  %2183 = cast_like(%2182, meta[relay.Constant][155]);
  %2184 = add(meta[relay.Constant][155], %2183);
  %2185 = where(%2181, %2184, meta[relay.Constant][155]);
  %2186 = shape_of(%2120, dtype="int32");
  %2187 = cast(%2186, dtype="int64");
  %2188 = dyn.strided_slice(%2120, %2185, %2187, meta[relay.Constant][156], begin=None, end=None, strides=None);
  %2189 = take(%2188, 3, axis=1);
  %2190 = cast_like(0, meta[relay.Constant][157]);
  %2191 = less(meta[relay.Constant][157], %2190);
  %2192 = shape_of(%2120, dtype="int32");
  %2193 = cast_like(%2192, meta[relay.Constant][157]);
  %2194 = add(meta[relay.Constant][157], %2193);
  %2195 = where(%2191, %2194, meta[relay.Constant][157]);
  %2196 = shape_of(%2120, dtype="int32");
  %2197 = cast(%2196, dtype="int64");
  %2198 = dyn.strided_slice(%2120, %2195, %2197, meta[relay.Constant][158], begin=None, end=None, strides=None);
  %2199 = take(%2198, 1, axis=1);
  %2200 = add(%2189, %2199);
  %2201 = multiply(%2200, 0.5f);
  %2202 = cast_like(0, meta[relay.Constant][159]);
  %2203 = less(meta[relay.Constant][159], %2202);
  %2204 = shape_of(%2120, dtype="int32");
  %2205 = cast_like(%2204, meta[relay.Constant][159]);
  %2206 = add(meta[relay.Constant][159], %2205);
  %2207 = where(%2203, %2206, meta[relay.Constant][159]);
  %2208 = shape_of(%2120, dtype="int32");
  %2209 = cast(%2208, dtype="int64");
  %2210 = dyn.strided_slice(%2120, %2207, %2209, meta[relay.Constant][160], begin=None, end=None, strides=None);
  %2211 = take(%2210, 3, axis=1);
  %2212 = cast_like(0, meta[relay.Constant][161]);
  %2213 = less(meta[relay.Constant][161], %2212);
  %2214 = shape_of(%2120, dtype="int32");
  %2215 = cast_like(%2214, meta[relay.Constant][161]);
  %2216 = add(meta[relay.Constant][161], %2215);
  %2217 = where(%2213, %2216, meta[relay.Constant][161]);
  %2218 = shape_of(%2120, dtype="int32");
  %2219 = cast(%2218, dtype="int64");
  %2220 = dyn.strided_slice(%2120, %2217, %2219, meta[relay.Constant][162], begin=None, end=None, strides=None);
  %2221 = take(%2220, 1, axis=1);
  %2222 = subtract(%2211, %2221);
  %2223 = multiply(%2222, 0.5f);
  %2224 = multiply(%2223, %2177);
  %2225 = subtract(%2201, %2224);
  %2226 = add(%2147, %2178);
  %2227 = add(%2201, %2224);
  %2228 = (%2179, %2225, %2226, %2227);
  %2229 = stack(%2228, axis=1);
  %2230 = cast(%2229, dtype="int64");
  %2421 = (
    let %while_loop = fn (%i.1: int32, %res_append.6: Tensor[(?, 300, 300), float32], %v7286: Tensor[(?, 1, ?, ?), float32], %v7394: Tensor[(?, 4), int64]) {
      %2231 = shape_of(%2125, dtype="int32");
      %2232 = take(%2231, 0, axis=0);
      %2233 = less(%i.1, %2232);
      if (%2233) {
        %2234 = add(%i.1, 1);
        %2235 = take(%v7394, %i.1, axis=0);
        %2236 = take(%2235, 1, axis=0);
        %2237 = expand_dims(%2236, axis=0);
        %2238 = full(0, shape=[1], dtype="int64");
        %2239 = (%2237, %2238);
        %2240 = concatenate(%2239);
        %2241 = max(%2240);
        %2242 = expand_dims(%2241, axis=0);
        %2243 = cast(%2242, dtype="int64");
        %2244 = take(%v7286, %i.1, axis=0);
        %2245 = take(%2244, 0, axis=0);
        %2246 = expand_dims(%2245, axis=0, num_newaxis=2);
        %2247 = repeat(%2246, repeats=1, axis=0);
        %2248 = repeat(%2247, repeats=1, axis=1);
        %2249 = take(%2235, 3, axis=0);
        %2250 = take(%2235, 1, axis=0);
        %2251 = subtract(%2249, %2250);
        %2252 = full(1, shape=[1], dtype="int64");
        %2253 = add(%2251, %2252);
        %2254 = (%2253, %2252);
        %2255 = concatenate(%2254);
        %2256 = max(%2255);
        %2257 = expand_dims(%2256, axis=0);
        %2258 = take(%2235, 2, axis=0);
        %2259 = take(%2235, 0, axis=0);
        %2260 = subtract(%2258, %2259);
        %2261 = add(%2260, %2252);
        %2262 = (%2261, %2252);
        %2263 = concatenate(%2262);
        %2264 = max(%2263);
        %2265 = expand_dims(%2264, axis=0);
        %2266 = (%2257, %2265);
        %2267 = concatenate(%2266);
        %2268 = dyn.image.resize(%2248, %2267, size=[]);
        %2269 = take(%2268, 0, axis=0);
        %2270 = take(%2269, 0, axis=0);
        %2271 = take(%2235, 1, axis=0);
        %2272 = subtract(%2241, %2271);
        %2273 = expand_dims(%2272, axis=0);
        %2274 = cast(%2273, dtype="int64");
        %2275 = expand_dims(0, axis=0);
        %2276 = (%2274, %2275);
        %2277 = concatenate(%2276);
        %2278 = cast_like(0, %2277);
        %2279 = less(%2277, %2278);
        %2280 = shape_of(%2270, dtype="int32");
        %2281 = cast_like(%2280, %2277);
        %2282 = add(%2277, %2281);
        %2283 = where(%2279, %2282, %2277);
        %2284 = shape_of(%2270, dtype="int32");
        %2285 = cast(%2284, dtype="int64");
        %2286 = expand_dims(0, axis=0);
        %2287 = take(%2235, 3, axis=0);
        %2288 = expand_dims(%2287, axis=0);
        %2289 = add(%2288, %2252);
        %2290 = expand_dims(300, axis=0);
        %2291 = (%2289, %2290);
        %2292 = concatenate(%2291);
        %2293 = min(%2292);
        %2294 = take(%2235, 1, axis=0);
        %2295 = subtract(%2293, %2294);
        %2296 = expand_dims(%2295, axis=0);
        %2297 = scatter(%2285, %2286, %2296, meta[relay.attrs.ScatterAttrs][10]);
        %2298 = dyn.strided_slice(%2270, %2283, %2297, meta[relay.Constant][163], begin=None, end=None, strides=None);
        %2299 = expand_dims(0, axis=0);
        %2300 = take(%2235, 0, axis=0);
        %2301 = expand_dims(%2300, axis=0);
        %2302 = (%2301, %2238);
        %2303 = concatenate(%2302);
        %2304 = max(%2303);
        %2305 = take(%2235, 0, axis=0);
        %2306 = subtract(%2304, %2305);
        %2307 = expand_dims(%2306, axis=0);
        %2308 = cast(%2307, dtype="int64");
        %2309 = (%2299, %2308);
        %2310 = concatenate(%2309);
        %2311 = cast_like(0, %2310);
        %2312 = less(%2310, %2311);
        %2313 = shape_of(%2298, dtype="int32");
        %2314 = cast_like(%2313, %2310);
        %2315 = add(%2310, %2314);
        %2316 = where(%2312, %2315, %2310);
        %2317 = shape_of(%2298, dtype="int32");
        %2318 = cast(%2317, dtype="int64");
        %2319 = expand_dims(1, axis=0);
        %2320 = take(%2235, 2, axis=0);
        %2321 = expand_dims(%2320, axis=0);
        %2322 = add(%2321, %2252);
        %2323 = expand_dims(300, axis=0);
        %2324 = (%2322, %2323);
        %2325 = concatenate(%2324);
        %2326 = min(%2325);
        %2327 = take(%2235, 0, axis=0);
        %2328 = subtract(%2326, %2327);
        %2329 = expand_dims(%2328, axis=0);
        %2330 = scatter(%2318, %2319, %2329, meta[relay.attrs.ScatterAttrs][11]);
        %2331 = dyn.strided_slice(%2298, %2316, %2330, meta[relay.Constant][164], begin=None, end=None, strides=None);
        %2332 = shape_of(%2331, dtype="int32");
        %2333 = take(%2332, 1, axis=0);
        %2334 = expand_dims(%2333, axis=0);
        %2335 = cast(%2334, dtype="int64");
        %2336 = (%2243, %2335);
        %2337 = concatenate(%2336);
        %2338 = dyn.full(0, %2337, shape=None, dtype="float32");
        %2339 = reshape(%2338, newshape=[0, 0]);
        %2340 = subtract(300, %2293);
        %2341 = expand_dims(%2340, axis=0);
        %2342 = cast(%2341, dtype="int64");
        %2343 = shape_of(%2331, dtype="int32");
        %2344 = take(%2343, 1, axis=0);
        %2345 = expand_dims(%2344, axis=0);
        %2346 = cast(%2345, dtype="int64");
        %2347 = (%2342, %2346);
        %2348 = concatenate(%2347);
        %2349 = dyn.full(0, %2348, shape=None, dtype="float32");
        %2350 = reshape(%2349, newshape=[0, 0]);
        %2351 = (%2339, %2331, %2350);
        %2352 = concatenate(%2351);
        %2353 = cast_like(0, meta[relay.Constant][165]);
        %2354 = less(meta[relay.Constant][165], %2353);
        %2355 = shape_of(%2352, dtype="int32");
        %2356 = cast_like(%2355, meta[relay.Constant][165]);
        %2357 = add(meta[relay.Constant][165], %2356);
        %2358 = where(%2354, %2357, meta[relay.Constant][165]);
        %2359 = shape_of(%2352, dtype="int32");
        %2360 = expand_dims(0, axis=0);
        %2361 = expand_dims(300, axis=0);
        %2362 = scatter(%2359, %2360, %2361, meta[relay.attrs.ScatterAttrs][12]);
        %2363 = cast(%2362, dtype="int64");
        %2364 = dyn.strided_slice(%2352, %2358, %2363, meta[relay.Constant][166], begin=None, end=None, strides=None);
        %2365 = cast_like(0, meta[relay.Constant][167]);
        %2366 = less(meta[relay.Constant][167], %2365);
        %2367 = shape_of(%2364, dtype="int32");
        %2368 = cast_like(%2367, meta[relay.Constant][167]);
        %2369 = add(meta[relay.Constant][167], %2368);
        %2370 = where(%2366, %2369, meta[relay.Constant][167]);
        %2371 = shape_of(%2364, dtype="int32");
        %2372 = cast(%2371, dtype="int64");
        %2373 = dyn.strided_slice(%2364, %2370, %2372, meta[relay.Constant][168], begin=None, end=None, strides=None);
        %2374 = shape_of(%2373, dtype="int32");
        %2375 = take(%2374, 0, axis=0);
        %2376 = expand_dims(%2375, axis=0);
        %2377 = cast(%2376, dtype="int64");
        %2378 = expand_dims(%2304, axis=0);
        %2379 = cast(%2378, dtype="int64");
        %2380 = (%2377, %2379);
        %2381 = concatenate(%2380);
        %2382 = dyn.full(0, %2381, shape=None, dtype="float32");
        %2383 = reshape(%2382, newshape=[0, 0]);
        %2384 = shape_of(%2373, dtype="int32");
        %2385 = take(%2384, 0, axis=0);
        %2386 = expand_dims(%2385, axis=0);
        %2387 = cast(%2386, dtype="int64");
        %2388 = subtract(300, %2326);
        %2389 = expand_dims(%2388, axis=0);
        %2390 = cast(%2389, dtype="int64");
        %2391 = (%2387, %2390);
        %2392 = concatenate(%2391);
        %2393 = dyn.full(0, %2392, shape=None, dtype="float32");
        %2394 = reshape(%2393, newshape=[0, 0]);
        %2395 = (%2383, %2373, %2394);
        %2396 = concatenate(%2395, axis=1);
        %2397 = cast_like(0, meta[relay.Constant][169]);
        %2398 = less(meta[relay.Constant][169], %2397);
        %2399 = shape_of(%2396, dtype="int32");
        %2400 = cast_like(%2399, meta[relay.Constant][169]);
        %2401 = add(meta[relay.Constant][169], %2400);
        %2402 = where(%2398, %2401, meta[relay.Constant][169]);
        %2403 = shape_of(%2396, dtype="int32");
        %2404 = cast(%2403, dtype="int64");
        %2405 = dyn.strided_slice(%2396, %2402, %2404, meta[relay.Constant][170], begin=None, end=None, strides=None);
        %2406 = cast_like(0, meta[relay.Constant][171]);
        %2407 = less(meta[relay.Constant][171], %2406);
        %2408 = shape_of(%2405, dtype="int32");
        %2409 = cast_like(%2408, meta[relay.Constant][171]);
        %2410 = add(meta[relay.Constant][171], %2409);
        %2411 = where(%2407, %2410, meta[relay.Constant][171]);
        %2412 = shape_of(%2405, dtype="int32");
        %2413 = expand_dims(1, axis=0);
        %2414 = expand_dims(300, axis=0);
        %2415 = scatter(%2412, %2413, %2414, meta[relay.attrs.ScatterAttrs][13]);
        %2416 = cast(%2415, dtype="int64");
        %2417 = dyn.strided_slice(%2405, %2411, %2416, meta[relay.Constant][172], begin=None, end=None, strides=None);
        %2418 = expand_dims(%2417, axis=0);
        %2419 = (%res_append.6, %2418);
        %2420 = concatenate(%2419);
        %while_loop(%2234, %2420, %v7286, %v7394)
      } else {
        (%i.1, %res_append.6, %v7286, %v7394)
      }
    };
    %while_loop
  );
  %2422 = %2421(0, %2123, %2125, %2230);
  %2423 = %2422.1;
  %2424 = cast_like(0, meta[relay.Constant][173]);
  %2425 = less(meta[relay.Constant][173], %2424);
  %2426 = shape_of(%2423, dtype="int32");
  %2427 = cast_like(%2426, meta[relay.Constant][173]);
  %2428 = add(meta[relay.Constant][173], %2427);
  %2429 = where(%2425, %2428, meta[relay.Constant][173]);
  %2430 = shape_of(%2423, dtype="int32");
  %2431 = cast(%2430, dtype="int64");
  %2432 = dyn.strided_slice(%2423, %2429, %2431, meta[relay.Constant][174], begin=None, end=None, strides=None);
  %2433 = expand_dims(%2432, axis=1);
  %2434 = (%2120, %2121, %2122, %2433);
  %2435 = %2434.0;
  %2436 = %2434.1;
  %2437 = %2434.2;
  %2438 = %2434.3;
  (%2435, %2436, %2437, %2438)
}
