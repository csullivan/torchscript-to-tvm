fn (%model.query_embed.weight: Tensor[(100, 256), float32], %model.transformer.decoder.layers.0.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.0.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.decoder.layers.0.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.0.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.0.norm1.weight: Tensor[(256), float32], %model.transformer.decoder.layers.0.norm1.bias: Tensor[(256), float32], %input: Tensor[(1, 3, 750, 800), float32], %model.backbone.0.body.conv1.weight: Tensor[(64, 3, 7, 7), float32], %model.backbone.0.body.bn1.weight: Tensor[(64), float32], %model.backbone.0.body.bn1.running_var: Tensor[(64), float32], %model.backbone.0.body.bn1.bias: Tensor[(64), float32], %model.backbone.0.body.bn1.running_mean: Tensor[(64), float32], %model.backbone.0.body.layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32], %model.backbone.0.body.layer1.0.bn1.weight: Tensor[(64), float32], %model.backbone.0.body.layer1.0.bn1.running_var: Tensor[(64), float32], %model.backbone.0.body.layer1.0.bn1.bias: Tensor[(64), float32], %model.backbone.0.body.layer1.0.bn1.running_mean: Tensor[(64), float32], %model.backbone.0.body.layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.0.body.layer1.0.bn2.weight: Tensor[(64), float32], %model.backbone.0.body.layer1.0.bn2.running_var: Tensor[(64), float32], %model.backbone.0.body.layer1.0.bn2.bias: Tensor[(64), float32], %model.backbone.0.body.layer1.0.bn2.running_mean: Tensor[(64), float32], %model.backbone.0.body.layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.0.body.layer1.0.bn3.weight: Tensor[(256), float32], %model.backbone.0.body.layer1.0.bn3.running_var: Tensor[(256), float32], %model.backbone.0.body.layer1.0.bn3.bias: Tensor[(256), float32], %model.backbone.0.body.layer1.0.bn3.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.0.body.layer1.0.downsample.1.weight: Tensor[(256), float32], %model.backbone.0.body.layer1.0.downsample.1.running_var: Tensor[(256), float32], %model.backbone.0.body.layer1.0.downsample.1.bias: Tensor[(256), float32], %model.backbone.0.body.layer1.0.downsample.1.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.0.body.layer1.1.bn1.weight: Tensor[(64), float32], %model.backbone.0.body.layer1.1.bn1.running_var: Tensor[(64), float32], %model.backbone.0.body.layer1.1.bn1.bias: Tensor[(64), float32], %model.backbone.0.body.layer1.1.bn1.running_mean: Tensor[(64), float32], %model.backbone.0.body.layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.0.body.layer1.1.bn2.weight: Tensor[(64), float32], %model.backbone.0.body.layer1.1.bn2.running_var: Tensor[(64), float32], %model.backbone.0.body.layer1.1.bn2.bias: Tensor[(64), float32], %model.backbone.0.body.layer1.1.bn2.running_mean: Tensor[(64), float32], %model.backbone.0.body.layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.0.body.layer1.1.bn3.weight: Tensor[(256), float32], %model.backbone.0.body.layer1.1.bn3.running_var: Tensor[(256), float32], %model.backbone.0.body.layer1.1.bn3.bias: Tensor[(256), float32], %model.backbone.0.body.layer1.1.bn3.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.0.body.layer1.2.bn1.weight: Tensor[(64), float32], %model.backbone.0.body.layer1.2.bn1.running_var: Tensor[(64), float32], %model.backbone.0.body.layer1.2.bn1.bias: Tensor[(64), float32], %model.backbone.0.body.layer1.2.bn1.running_mean: Tensor[(64), float32], %model.backbone.0.body.layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.0.body.layer1.2.bn2.weight: Tensor[(64), float32], %model.backbone.0.body.layer1.2.bn2.running_var: Tensor[(64), float32], %model.backbone.0.body.layer1.2.bn2.bias: Tensor[(64), float32], %model.backbone.0.body.layer1.2.bn2.running_mean: Tensor[(64), float32], %model.backbone.0.body.layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.0.body.layer1.2.bn3.weight: Tensor[(256), float32], %model.backbone.0.body.layer1.2.bn3.running_var: Tensor[(256), float32], %model.backbone.0.body.layer1.2.bn3.bias: Tensor[(256), float32], %model.backbone.0.body.layer1.2.bn3.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32], %model.backbone.0.body.layer2.0.bn1.weight: Tensor[(128), float32], %model.backbone.0.body.layer2.0.bn1.running_var: Tensor[(128), float32], %model.backbone.0.body.layer2.0.bn1.bias: Tensor[(128), float32], %model.backbone.0.body.layer2.0.bn1.running_mean: Tensor[(128), float32], %model.backbone.0.body.layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.0.body.layer2.0.bn2.weight: Tensor[(128), float32], %model.backbone.0.body.layer2.0.bn2.running_var: Tensor[(128), float32], %model.backbone.0.body.layer2.0.bn2.bias: Tensor[(128), float32], %model.backbone.0.body.layer2.0.bn2.running_mean: Tensor[(128), float32], %model.backbone.0.body.layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.0.body.layer2.0.bn3.weight: Tensor[(512), float32], %model.backbone.0.body.layer2.0.bn3.running_var: Tensor[(512), float32], %model.backbone.0.body.layer2.0.bn3.bias: Tensor[(512), float32], %model.backbone.0.body.layer2.0.bn3.running_mean: Tensor[(512), float32], %model.backbone.0.body.layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %model.backbone.0.body.layer2.0.downsample.1.weight: Tensor[(512), float32], %model.backbone.0.body.layer2.0.downsample.1.running_var: Tensor[(512), float32], %model.backbone.0.body.layer2.0.downsample.1.bias: Tensor[(512), float32], %model.backbone.0.body.layer2.0.downsample.1.running_mean: Tensor[(512), float32], %model.backbone.0.body.layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.0.body.layer2.1.bn1.weight: Tensor[(128), float32], %model.backbone.0.body.layer2.1.bn1.running_var: Tensor[(128), float32], %model.backbone.0.body.layer2.1.bn1.bias: Tensor[(128), float32], %model.backbone.0.body.layer2.1.bn1.running_mean: Tensor[(128), float32], %model.backbone.0.body.layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.0.body.layer2.1.bn2.weight: Tensor[(128), float32], %model.backbone.0.body.layer2.1.bn2.running_var: Tensor[(128), float32], %model.backbone.0.body.layer2.1.bn2.bias: Tensor[(128), float32], %model.backbone.0.body.layer2.1.bn2.running_mean: Tensor[(128), float32], %model.backbone.0.body.layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.0.body.layer2.1.bn3.weight: Tensor[(512), float32], %model.backbone.0.body.layer2.1.bn3.running_var: Tensor[(512), float32], %model.backbone.0.body.layer2.1.bn3.bias: Tensor[(512), float32], %model.backbone.0.body.layer2.1.bn3.running_mean: Tensor[(512), float32], %model.backbone.0.body.layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.0.body.layer2.2.bn1.weight: Tensor[(128), float32], %model.backbone.0.body.layer2.2.bn1.running_var: Tensor[(128), float32], %model.backbone.0.body.layer2.2.bn1.bias: Tensor[(128), float32], %model.backbone.0.body.layer2.2.bn1.running_mean: Tensor[(128), float32], %model.backbone.0.body.layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.0.body.layer2.2.bn2.weight: Tensor[(128), float32], %model.backbone.0.body.layer2.2.bn2.running_var: Tensor[(128), float32], %model.backbone.0.body.layer2.2.bn2.bias: Tensor[(128), float32], %model.backbone.0.body.layer2.2.bn2.running_mean: Tensor[(128), float32], %model.backbone.0.body.layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.0.body.layer2.2.bn3.weight: Tensor[(512), float32], %model.backbone.0.body.layer2.2.bn3.running_var: Tensor[(512), float32], %model.backbone.0.body.layer2.2.bn3.bias: Tensor[(512), float32], %model.backbone.0.body.layer2.2.bn3.running_mean: Tensor[(512), float32], %model.backbone.0.body.layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.0.body.layer2.3.bn1.weight: Tensor[(128), float32], %model.backbone.0.body.layer2.3.bn1.running_var: Tensor[(128), float32], %model.backbone.0.body.layer2.3.bn1.bias: Tensor[(128), float32], %model.backbone.0.body.layer2.3.bn1.running_mean: Tensor[(128), float32], %model.backbone.0.body.layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.0.body.layer2.3.bn2.weight: Tensor[(128), float32], %model.backbone.0.body.layer2.3.bn2.running_var: Tensor[(128), float32], %model.backbone.0.body.layer2.3.bn2.bias: Tensor[(128), float32], %model.backbone.0.body.layer2.3.bn2.running_mean: Tensor[(128), float32], %model.backbone.0.body.layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.0.body.layer2.3.bn3.weight: Tensor[(512), float32], %model.backbone.0.body.layer2.3.bn3.running_var: Tensor[(512), float32], %model.backbone.0.body.layer2.3.bn3.bias: Tensor[(512), float32], %model.backbone.0.body.layer2.3.bn3.running_mean: Tensor[(512), float32], %model.backbone.0.body.layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.0.body.layer3.0.bn1.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.0.bn1.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.0.bn1.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.0.bn1.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.0.body.layer3.0.bn2.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.0.bn2.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.0.bn2.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.0.bn2.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.0.body.layer3.0.bn3.weight: Tensor[(1024), float32], %model.backbone.0.body.layer3.0.bn3.running_var: Tensor[(1024), float32], %model.backbone.0.body.layer3.0.bn3.bias: Tensor[(1024), float32], %model.backbone.0.body.layer3.0.bn3.running_mean: Tensor[(1024), float32], %model.backbone.0.body.layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32], %model.backbone.0.body.layer3.0.downsample.1.weight: Tensor[(1024), float32], %model.backbone.0.body.layer3.0.downsample.1.running_var: Tensor[(1024), float32], %model.backbone.0.body.layer3.0.downsample.1.bias: Tensor[(1024), float32], %model.backbone.0.body.layer3.0.downsample.1.running_mean: Tensor[(1024), float32], %model.backbone.0.body.layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.0.body.layer3.1.bn1.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.1.bn1.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.1.bn1.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.1.bn1.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.0.body.layer3.1.bn2.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.1.bn2.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.1.bn2.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.1.bn2.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.0.body.layer3.1.bn3.weight: Tensor[(1024), float32], %model.backbone.0.body.layer3.1.bn3.running_var: Tensor[(1024), float32], %model.backbone.0.body.layer3.1.bn3.bias: Tensor[(1024), float32], %model.backbone.0.body.layer3.1.bn3.running_mean: Tensor[(1024), float32], %model.backbone.0.body.layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.0.body.layer3.2.bn1.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.2.bn1.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.2.bn1.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.2.bn1.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.0.body.layer3.2.bn2.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.2.bn2.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.2.bn2.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.2.bn2.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.0.body.layer3.2.bn3.weight: Tensor[(1024), float32], %model.backbone.0.body.layer3.2.bn3.running_var: Tensor[(1024), float32], %model.backbone.0.body.layer3.2.bn3.bias: Tensor[(1024), float32], %model.backbone.0.body.layer3.2.bn3.running_mean: Tensor[(1024), float32], %model.backbone.0.body.layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.0.body.layer3.3.bn1.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.3.bn1.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.3.bn1.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.3.bn1.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.0.body.layer3.3.bn2.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.3.bn2.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.3.bn2.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.3.bn2.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.0.body.layer3.3.bn3.weight: Tensor[(1024), float32], %model.backbone.0.body.layer3.3.bn3.running_var: Tensor[(1024), float32], %model.backbone.0.body.layer3.3.bn3.bias: Tensor[(1024), float32], %model.backbone.0.body.layer3.3.bn3.running_mean: Tensor[(1024), float32], %model.backbone.0.body.layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.0.body.layer3.4.bn1.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.4.bn1.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.4.bn1.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.4.bn1.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.0.body.layer3.4.bn2.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.4.bn2.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.4.bn2.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.4.bn2.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.0.body.layer3.4.bn3.weight: Tensor[(1024), float32], %model.backbone.0.body.layer3.4.bn3.running_var: Tensor[(1024), float32], %model.backbone.0.body.layer3.4.bn3.bias: Tensor[(1024), float32], %model.backbone.0.body.layer3.4.bn3.running_mean: Tensor[(1024), float32], %model.backbone.0.body.layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.0.body.layer3.5.bn1.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.5.bn1.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.5.bn1.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.5.bn1.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.0.body.layer3.5.bn2.weight: Tensor[(256), float32], %model.backbone.0.body.layer3.5.bn2.running_var: Tensor[(256), float32], %model.backbone.0.body.layer3.5.bn2.bias: Tensor[(256), float32], %model.backbone.0.body.layer3.5.bn2.running_mean: Tensor[(256), float32], %model.backbone.0.body.layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.0.body.layer3.5.bn3.weight: Tensor[(1024), float32], %model.backbone.0.body.layer3.5.bn3.running_var: Tensor[(1024), float32], %model.backbone.0.body.layer3.5.bn3.bias: Tensor[(1024), float32], %model.backbone.0.body.layer3.5.bn3.running_mean: Tensor[(1024), float32], %model.backbone.0.body.layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32], %model.backbone.0.body.layer4.0.bn1.weight: Tensor[(512), float32], %model.backbone.0.body.layer4.0.bn1.running_var: Tensor[(512), float32], %model.backbone.0.body.layer4.0.bn1.bias: Tensor[(512), float32], %model.backbone.0.body.layer4.0.bn1.running_mean: Tensor[(512), float32], %model.backbone.0.body.layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.0.body.layer4.0.bn2.weight: Tensor[(512), float32], %model.backbone.0.body.layer4.0.bn2.running_var: Tensor[(512), float32], %model.backbone.0.body.layer4.0.bn2.bias: Tensor[(512), float32], %model.backbone.0.body.layer4.0.bn2.running_mean: Tensor[(512), float32], %model.backbone.0.body.layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.0.body.layer4.0.bn3.weight: Tensor[(2048), float32], %model.backbone.0.body.layer4.0.bn3.running_var: Tensor[(2048), float32], %model.backbone.0.body.layer4.0.bn3.bias: Tensor[(2048), float32], %model.backbone.0.body.layer4.0.bn3.running_mean: Tensor[(2048), float32], %model.backbone.0.body.layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32], %model.backbone.0.body.layer4.0.downsample.1.weight: Tensor[(2048), float32], %model.backbone.0.body.layer4.0.downsample.1.running_var: Tensor[(2048), float32], %model.backbone.0.body.layer4.0.downsample.1.bias: Tensor[(2048), float32], %model.backbone.0.body.layer4.0.downsample.1.running_mean: Tensor[(2048), float32], %model.backbone.0.body.layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.0.body.layer4.1.bn1.weight: Tensor[(512), float32], %model.backbone.0.body.layer4.1.bn1.running_var: Tensor[(512), float32], %model.backbone.0.body.layer4.1.bn1.bias: Tensor[(512), float32], %model.backbone.0.body.layer4.1.bn1.running_mean: Tensor[(512), float32], %model.backbone.0.body.layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.0.body.layer4.1.bn2.weight: Tensor[(512), float32], %model.backbone.0.body.layer4.1.bn2.running_var: Tensor[(512), float32], %model.backbone.0.body.layer4.1.bn2.bias: Tensor[(512), float32], %model.backbone.0.body.layer4.1.bn2.running_mean: Tensor[(512), float32], %model.backbone.0.body.layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.0.body.layer4.1.bn3.weight: Tensor[(2048), float32], %model.backbone.0.body.layer4.1.bn3.running_var: Tensor[(2048), float32], %model.backbone.0.body.layer4.1.bn3.bias: Tensor[(2048), float32], %model.backbone.0.body.layer4.1.bn3.running_mean: Tensor[(2048), float32], %model.backbone.0.body.layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.0.body.layer4.2.bn1.weight: Tensor[(512), float32], %model.backbone.0.body.layer4.2.bn1.running_var: Tensor[(512), float32], %model.backbone.0.body.layer4.2.bn1.bias: Tensor[(512), float32], %model.backbone.0.body.layer4.2.bn1.running_mean: Tensor[(512), float32], %model.backbone.0.body.layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.0.body.layer4.2.bn2.weight: Tensor[(512), float32], %model.backbone.0.body.layer4.2.bn2.running_var: Tensor[(512), float32], %model.backbone.0.body.layer4.2.bn2.bias: Tensor[(512), float32], %model.backbone.0.body.layer4.2.bn2.running_mean: Tensor[(512), float32], %model.backbone.0.body.layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.0.body.layer4.2.bn3.weight: Tensor[(2048), float32], %model.backbone.0.body.layer4.2.bn3.running_var: Tensor[(2048), float32], %model.backbone.0.body.layer4.2.bn3.bias: Tensor[(2048), float32], %model.backbone.0.body.layer4.2.bn3.running_mean: Tensor[(2048), float32], %model.transformer.decoder.layers.0.multihead_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.0.multihead_attn.in_proj_bias: Tensor[(768), float32], %model.input_proj.weight: Tensor[(256, 2048, 1, 1), float32], %model.input_proj.bias: Tensor[(256), float32], %model.transformer.encoder.layers.0.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.encoder.layers.0.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.encoder.layers.0.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.encoder.layers.0.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.encoder.layers.0.norm1.weight: Tensor[(256), float32], %model.transformer.encoder.layers.0.norm1.bias: Tensor[(256), float32], %model.transformer.encoder.layers.0.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.encoder.layers.0.linear1.bias: Tensor[(2048), float32], %model.transformer.encoder.layers.0.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.encoder.layers.0.linear2.bias: Tensor[(256), float32], %model.transformer.encoder.layers.0.norm2.weight: Tensor[(256), float32], %model.transformer.encoder.layers.0.norm2.bias: Tensor[(256), float32], %model.transformer.encoder.layers.1.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.encoder.layers.1.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.encoder.layers.1.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.encoder.layers.1.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.encoder.layers.1.norm1.weight: Tensor[(256), float32], %model.transformer.encoder.layers.1.norm1.bias: Tensor[(256), float32], %model.transformer.encoder.layers.1.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.encoder.layers.1.linear1.bias: Tensor[(2048), float32], %model.transformer.encoder.layers.1.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.encoder.layers.1.linear2.bias: Tensor[(256), float32], %model.transformer.encoder.layers.1.norm2.weight: Tensor[(256), float32], %model.transformer.encoder.layers.1.norm2.bias: Tensor[(256), float32], %model.transformer.encoder.layers.2.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.encoder.layers.2.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.encoder.layers.2.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.encoder.layers.2.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.encoder.layers.2.norm1.weight: Tensor[(256), float32], %model.transformer.encoder.layers.2.norm1.bias: Tensor[(256), float32], %model.transformer.encoder.layers.2.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.encoder.layers.2.linear1.bias: Tensor[(2048), float32], %model.transformer.encoder.layers.2.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.encoder.layers.2.linear2.bias: Tensor[(256), float32], %model.transformer.encoder.layers.2.norm2.weight: Tensor[(256), float32], %model.transformer.encoder.layers.2.norm2.bias: Tensor[(256), float32], %model.transformer.encoder.layers.3.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.encoder.layers.3.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.encoder.layers.3.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.encoder.layers.3.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.encoder.layers.3.norm1.weight: Tensor[(256), float32], %model.transformer.encoder.layers.3.norm1.bias: Tensor[(256), float32], %model.transformer.encoder.layers.3.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.encoder.layers.3.linear1.bias: Tensor[(2048), float32], %model.transformer.encoder.layers.3.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.encoder.layers.3.linear2.bias: Tensor[(256), float32], %model.transformer.encoder.layers.3.norm2.weight: Tensor[(256), float32], %model.transformer.encoder.layers.3.norm2.bias: Tensor[(256), float32], %model.transformer.encoder.layers.4.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.encoder.layers.4.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.encoder.layers.4.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.encoder.layers.4.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.encoder.layers.4.norm1.weight: Tensor[(256), float32], %model.transformer.encoder.layers.4.norm1.bias: Tensor[(256), float32], %model.transformer.encoder.layers.4.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.encoder.layers.4.linear1.bias: Tensor[(2048), float32], %model.transformer.encoder.layers.4.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.encoder.layers.4.linear2.bias: Tensor[(256), float32], %model.transformer.encoder.layers.4.norm2.weight: Tensor[(256), float32], %model.transformer.encoder.layers.4.norm2.bias: Tensor[(256), float32], %model.transformer.encoder.layers.5.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.encoder.layers.5.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.encoder.layers.5.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.encoder.layers.5.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.encoder.layers.5.norm1.weight: Tensor[(256), float32], %model.transformer.encoder.layers.5.norm1.bias: Tensor[(256), float32], %model.transformer.encoder.layers.5.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.encoder.layers.5.linear1.bias: Tensor[(2048), float32], %model.transformer.encoder.layers.5.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.encoder.layers.5.linear2.bias: Tensor[(256), float32], %model.transformer.encoder.layers.5.norm2.weight: Tensor[(256), float32], %model.transformer.encoder.layers.5.norm2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.0.multihead_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.0.multihead_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.0.norm2.weight: Tensor[(256), float32], %model.transformer.decoder.layers.0.norm2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.0.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.decoder.layers.0.linear1.bias: Tensor[(2048), float32], %model.transformer.decoder.layers.0.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.decoder.layers.0.linear2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.0.norm3.weight: Tensor[(256), float32], %model.transformer.decoder.layers.0.norm3.bias: Tensor[(256), float32], %model.transformer.decoder.norm.weight: Tensor[(256), float32], %model.transformer.decoder.norm.bias: Tensor[(256), float32], %model.transformer.decoder.layers.1.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.1.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.decoder.layers.1.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.1.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.1.norm1.weight: Tensor[(256), float32], %model.transformer.decoder.layers.1.norm1.bias: Tensor[(256), float32], %model.transformer.decoder.layers.1.multihead_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.1.multihead_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.decoder.layers.1.multihead_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.1.multihead_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.1.norm2.weight: Tensor[(256), float32], %model.transformer.decoder.layers.1.norm2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.1.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.decoder.layers.1.linear1.bias: Tensor[(2048), float32], %model.transformer.decoder.layers.1.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.decoder.layers.1.linear2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.1.norm3.weight: Tensor[(256), float32], %model.transformer.decoder.layers.1.norm3.bias: Tensor[(256), float32], %model.transformer.decoder.layers.2.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.2.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.decoder.layers.2.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.2.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.2.norm1.weight: Tensor[(256), float32], %model.transformer.decoder.layers.2.norm1.bias: Tensor[(256), float32], %model.transformer.decoder.layers.2.multihead_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.2.multihead_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.decoder.layers.2.multihead_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.2.multihead_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.2.norm2.weight: Tensor[(256), float32], %model.transformer.decoder.layers.2.norm2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.2.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.decoder.layers.2.linear1.bias: Tensor[(2048), float32], %model.transformer.decoder.layers.2.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.decoder.layers.2.linear2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.2.norm3.weight: Tensor[(256), float32], %model.transformer.decoder.layers.2.norm3.bias: Tensor[(256), float32], %model.transformer.decoder.layers.3.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.3.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.decoder.layers.3.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.3.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.3.norm1.weight: Tensor[(256), float32], %model.transformer.decoder.layers.3.norm1.bias: Tensor[(256), float32], %model.transformer.decoder.layers.3.multihead_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.3.multihead_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.decoder.layers.3.multihead_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.3.multihead_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.3.norm2.weight: Tensor[(256), float32], %model.transformer.decoder.layers.3.norm2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.3.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.decoder.layers.3.linear1.bias: Tensor[(2048), float32], %model.transformer.decoder.layers.3.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.decoder.layers.3.linear2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.3.norm3.weight: Tensor[(256), float32], %model.transformer.decoder.layers.3.norm3.bias: Tensor[(256), float32], %model.transformer.decoder.layers.4.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.4.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.decoder.layers.4.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.4.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.4.norm1.weight: Tensor[(256), float32], %model.transformer.decoder.layers.4.norm1.bias: Tensor[(256), float32], %model.transformer.decoder.layers.4.multihead_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.4.multihead_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.decoder.layers.4.multihead_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.4.multihead_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.4.norm2.weight: Tensor[(256), float32], %model.transformer.decoder.layers.4.norm2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.4.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.decoder.layers.4.linear1.bias: Tensor[(2048), float32], %model.transformer.decoder.layers.4.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.decoder.layers.4.linear2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.4.norm3.weight: Tensor[(256), float32], %model.transformer.decoder.layers.4.norm3.bias: Tensor[(256), float32], %model.transformer.decoder.layers.5.self_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.5.self_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.decoder.layers.5.self_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.5.self_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.5.norm1.weight: Tensor[(256), float32], %model.transformer.decoder.layers.5.norm1.bias: Tensor[(256), float32], %model.transformer.decoder.layers.5.multihead_attn.in_proj_weight: Tensor[(768, 256), float32], %model.transformer.decoder.layers.5.multihead_attn.in_proj_bias: Tensor[(768), float32], %model.transformer.decoder.layers.5.multihead_attn.out_proj.weight: Tensor[(256, 256), float32], %model.transformer.decoder.layers.5.multihead_attn.out_proj.bias: Tensor[(256), float32], %model.transformer.decoder.layers.5.norm2.weight: Tensor[(256), float32], %model.transformer.decoder.layers.5.norm2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.5.linear1.weight: Tensor[(2048, 256), float32], %model.transformer.decoder.layers.5.linear1.bias: Tensor[(2048), float32], %model.transformer.decoder.layers.5.linear2.weight: Tensor[(256, 2048), float32], %model.transformer.decoder.layers.5.linear2.bias: Tensor[(256), float32], %model.transformer.decoder.layers.5.norm3.weight: Tensor[(256), float32], %model.transformer.decoder.layers.5.norm3.bias: Tensor[(256), float32], %model.class_embed.weight: Tensor[(92, 256), float32], %model.class_embed.bias: Tensor[(92), float32], %model.bbox_embed.layers.0.weight: Tensor[(256, 256), float32], %model.bbox_embed.layers.0.bias: Tensor[(256), float32], %model.bbox_embed.layers.1.weight: Tensor[(256, 256), float32], %model.bbox_embed.layers.1.bias: Tensor[(256), float32], %model.bbox_embed.layers.2.weight: Tensor[(4, 256), float32], %model.bbox_embed.layers.2.bias: Tensor[(4), float32]) -> (Tensor[(1, 100, 92), float32], Tensor[(1, 100, 4), float32]) {
  %0 = expand_dims(%model.query_embed.weight, axis=1) /* ty=Tensor[(100, 1, 256), float32] */;
  %1 = tile(%0, reps=[1, 1, 1]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2 = zeros_like(%1) /* ty=Tensor[(100, 1, 256), float32] */;
  %3 = add(%2, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %4 = reshape(%3, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %5 = strided_slice(%model.transformer.decoder.layers.0.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %6 = strided_slice(%5, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %7 = transpose(%6, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %8 = reshape(%7, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %9 = broadcast_to(%8, meta[relay.attrs.InitOpAttrs][0]) /* ty=Tensor[(100, 256, 256), float32] */;
  %10 = transpose(%9, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %11 = nn.batch_matmul(%4, %10) /* ty=Tensor[(100, 1, 256), float32] */;
  %12 = reshape(%11, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %13 = strided_slice(%model.transformer.decoder.layers.0.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %14 = add(%12, %13) /* ty=Tensor[(100, 1, 256), float32] */;
  %15 = multiply(%14, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %16 = copy(%15) /* ty=Tensor[(100, 1, 256), float32] */;
  %17 = reshape(%16, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %18 = transpose(%17, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %19 = reshape(%18, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %20 = reshape(%3, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %21 = strided_slice(%model.transformer.decoder.layers.0.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %22 = strided_slice(%21, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %23 = transpose(%22, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %24 = reshape(%23, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %25 = broadcast_to(%24, meta[relay.attrs.InitOpAttrs][1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %26 = transpose(%25, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %27 = nn.batch_matmul(%20, %26) /* ty=Tensor[(100, 1, 256), float32] */;
  %28 = reshape(%27, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %29 = strided_slice(%model.transformer.decoder.layers.0.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %30 = add(%28, %29) /* ty=Tensor[(100, 1, 256), float32] */;
  %31 = copy(%30) /* ty=Tensor[(100, 1, 256), float32] */;
  %32 = reshape(%31, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %33 = transpose(%32, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %34 = transpose(%33, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %35 = reshape(%34, newshape=[-1, 32, 100]) /* ty=Tensor[(8, 32, 100), float32] */;
  %36 = transpose(%35, axes=[0, 2, 1]) /* ty=Tensor[(8, 100, 32), float32] */;
  %37 = nn.batch_matmul(%19, %36) /* ty=Tensor[(8, 100, 100), float32] */;
  %38 = reshape(%37, newshape=[8, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %39 = nn.softmax(%38) /* ty=Tensor[(8, 100, 100), float32] */;
  %40 = nn.dropout(%39, rate=0.1f) /* ty=(Tensor[(8, 100, 100), float32], Tensor[(8, 100, 100), float32]) */;
  %41 = %40.0;
  %42 = reshape(%41, newshape=[-1, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %43 = reshape(%2, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %44 = strided_slice(%model.transformer.decoder.layers.0.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %45 = strided_slice(%44, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %46 = transpose(%45, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %47 = reshape(%46, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %48 = broadcast_to(%47, meta[relay.attrs.InitOpAttrs][2]) /* ty=Tensor[(100, 256, 256), float32] */;
  %49 = transpose(%48, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %50 = nn.batch_matmul(%43, %49) /* ty=Tensor[(100, 1, 256), float32] */;
  %51 = reshape(%50, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %52 = strided_slice(%model.transformer.decoder.layers.0.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %53 = add(%51, %52) /* ty=Tensor[(100, 1, 256), float32] */;
  %54 = copy(%53) /* ty=Tensor[(100, 1, 256), float32] */;
  %55 = reshape(%54, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %56 = transpose(%55, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %57 = reshape(%56, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %58 = transpose(%57, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %59 = nn.batch_matmul(%42, %58) /* ty=Tensor[(8, 100, 32), float32] */;
  %60 = reshape(%59, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %61 = transpose(%60, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %62 = copy(%61) /* ty=Tensor[(100, 8, 32), float32] */;
  %63 = reshape(%62, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %64 = reshape(%63, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %65 = transpose(%model.transformer.decoder.layers.0.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %66 = reshape(%65, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %67 = broadcast_to(%66, meta[relay.attrs.InitOpAttrs][3]) /* ty=Tensor[(100, 256, 256), float32] */;
  %68 = transpose(%67, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %69 = nn.batch_matmul(%64, %68) /* ty=Tensor[(100, 1, 256), float32] */;
  %70 = reshape(%69, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %71 = add(%70, %model.transformer.decoder.layers.0.self_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %72 = nn.dropout(%71, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %73 = %72.0;
  %74 = add(%2, %73) /* ty=Tensor[(100, 1, 256), float32] */;
  %75 = nn.layer_norm(%74, %model.transformer.decoder.layers.0.norm1.weight, %model.transformer.decoder.layers.0.norm1.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %76 = split(%input, indices_or_sections=1) /* ty=(Tensor[(1, 3, 750, 800), float32],) */;
  %77 = %76.0;
  %78 = squeeze(%77, axis=[0]) /* ty=Tensor[(3, 750, 800), float32] */;
  %79 = (%78,);
  %80 = %79.0;
  %81 = take(%80, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(750, 800), float32] */;
  %82 = zeros_like(%81) /* ty=Tensor[(750, 800), float32] */;
  %83 = cast(%82, dtype="int32") /* ty=Tensor[(750, 800), int32] */;
  %84 = nn.pad(%83, pad_value=1f, pad_width=[[0, 0], [0, 0]]) /* ty=Tensor[(750, 800), int32] */;
  %85 = (%84,);
  %86 = stack(%85) /* ty=Tensor[(1, 750, 800), int32] */;
  %87 = expand_dims(%86, axis=0) /* ty=Tensor[(1, 1, 750, 800), int32] */;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(1, 1, 750, 800), float32] */;
  %89 = image.resize(%88, size=[24, 25], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 1, 24, 25), float32] */;
  %90 = take(%89, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 24, 25), float32] */;
  %91 = nn.pad(%80, pad_width=[[0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(3, 750, 800), float32] */;
  %92 = (%91,);
  %93 = stack(%92) /* ty=Tensor[(1, 3, 750, 800), float32] */;
  %94 = nn.conv2d(%93, %model.backbone.0.body.conv1.weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 375, 400), float32] */;
  %95 = reshape(%model.backbone.0.body.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %96 = reshape(%model.backbone.0.body.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %97 = add(%96, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %98 = rsqrt(%97) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %99 = multiply(%95, %98) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %100 = multiply(%94, %99) /* ty=Tensor[(1, 64, 375, 400), float32] */;
  %101 = reshape(%model.backbone.0.body.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %102 = reshape(%model.backbone.0.body.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %103 = multiply(%102, %99) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %104 = subtract(%101, %103) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %105 = add(%100, %104) /* ty=Tensor[(1, 64, 375, 400), float32] */;
  %106 = nn.relu(%105) /* ty=Tensor[(1, 64, 375, 400), float32] */;
  %107 = nn.max_pool2d(%106, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %108 = nn.conv2d(%107, %model.backbone.0.body.layer1.0.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %109 = reshape(%model.backbone.0.body.layer1.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %110 = reshape(%model.backbone.0.body.layer1.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %111 = add(%110, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %112 = rsqrt(%111) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %113 = multiply(%109, %112) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %114 = multiply(%108, %113) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %115 = reshape(%model.backbone.0.body.layer1.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %116 = reshape(%model.backbone.0.body.layer1.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %117 = multiply(%116, %113) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %118 = subtract(%115, %117) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %119 = add(%114, %118) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %120 = nn.relu(%119) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %121 = nn.conv2d(%120, %model.backbone.0.body.layer1.0.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %122 = reshape(%model.backbone.0.body.layer1.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %123 = reshape(%model.backbone.0.body.layer1.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %124 = add(%123, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %125 = rsqrt(%124) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %126 = multiply(%122, %125) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %127 = multiply(%121, %126) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %128 = reshape(%model.backbone.0.body.layer1.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %129 = reshape(%model.backbone.0.body.layer1.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %130 = multiply(%129, %126) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %131 = subtract(%128, %130) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %132 = add(%127, %131) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %133 = nn.relu(%132) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %134 = nn.conv2d(%133, %model.backbone.0.body.layer1.0.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %135 = reshape(%model.backbone.0.body.layer1.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %136 = reshape(%model.backbone.0.body.layer1.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %137 = add(%136, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %138 = rsqrt(%137) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %139 = multiply(%135, %138) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %140 = multiply(%134, %139) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %141 = reshape(%model.backbone.0.body.layer1.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %142 = reshape(%model.backbone.0.body.layer1.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %143 = multiply(%142, %139) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %144 = subtract(%141, %143) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %145 = add(%140, %144) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %146 = nn.conv2d(%107, %model.backbone.0.body.layer1.0.downsample.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %147 = reshape(%model.backbone.0.body.layer1.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %148 = reshape(%model.backbone.0.body.layer1.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %149 = add(%148, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %150 = rsqrt(%149) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %151 = multiply(%147, %150) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %152 = multiply(%146, %151) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %153 = reshape(%model.backbone.0.body.layer1.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %154 = reshape(%model.backbone.0.body.layer1.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %155 = multiply(%154, %151) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %156 = subtract(%153, %155) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %157 = add(%152, %156) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %158 = add(%145, %157) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %159 = nn.relu(%158) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %160 = nn.conv2d(%159, %model.backbone.0.body.layer1.1.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %161 = reshape(%model.backbone.0.body.layer1.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %162 = reshape(%model.backbone.0.body.layer1.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %163 = add(%162, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %164 = rsqrt(%163) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %165 = multiply(%161, %164) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %166 = multiply(%160, %165) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %167 = reshape(%model.backbone.0.body.layer1.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %168 = reshape(%model.backbone.0.body.layer1.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %169 = multiply(%168, %165) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %170 = subtract(%167, %169) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %171 = add(%166, %170) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %172 = nn.relu(%171) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %173 = nn.conv2d(%172, %model.backbone.0.body.layer1.1.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %174 = reshape(%model.backbone.0.body.layer1.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %175 = reshape(%model.backbone.0.body.layer1.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %176 = add(%175, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %177 = rsqrt(%176) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %178 = multiply(%174, %177) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %179 = multiply(%173, %178) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %180 = reshape(%model.backbone.0.body.layer1.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %181 = reshape(%model.backbone.0.body.layer1.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %182 = multiply(%181, %178) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %183 = subtract(%180, %182) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %184 = add(%179, %183) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %185 = nn.relu(%184) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %186 = nn.conv2d(%185, %model.backbone.0.body.layer1.1.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %187 = reshape(%model.backbone.0.body.layer1.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %188 = reshape(%model.backbone.0.body.layer1.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %189 = add(%188, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %190 = rsqrt(%189) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %191 = multiply(%187, %190) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %192 = multiply(%186, %191) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %193 = reshape(%model.backbone.0.body.layer1.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %194 = reshape(%model.backbone.0.body.layer1.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %195 = multiply(%194, %191) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %196 = subtract(%193, %195) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %197 = add(%192, %196) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %198 = add(%197, %159) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %199 = nn.relu(%198) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %200 = nn.conv2d(%199, %model.backbone.0.body.layer1.2.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %201 = reshape(%model.backbone.0.body.layer1.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %202 = reshape(%model.backbone.0.body.layer1.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %203 = add(%202, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %204 = rsqrt(%203) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %205 = multiply(%201, %204) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %206 = multiply(%200, %205) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %207 = reshape(%model.backbone.0.body.layer1.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %208 = reshape(%model.backbone.0.body.layer1.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %209 = multiply(%208, %205) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %210 = subtract(%207, %209) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %211 = add(%206, %210) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %212 = nn.relu(%211) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %213 = nn.conv2d(%212, %model.backbone.0.body.layer1.2.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %214 = reshape(%model.backbone.0.body.layer1.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %215 = reshape(%model.backbone.0.body.layer1.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %216 = add(%215, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %217 = rsqrt(%216) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %218 = multiply(%214, %217) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %219 = multiply(%213, %218) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %220 = reshape(%model.backbone.0.body.layer1.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %221 = reshape(%model.backbone.0.body.layer1.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %222 = multiply(%221, %218) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %223 = subtract(%220, %222) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %224 = add(%219, %223) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %225 = nn.relu(%224) /* ty=Tensor[(1, 64, 188, 200), float32] */;
  %226 = nn.conv2d(%225, %model.backbone.0.body.layer1.2.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %227 = reshape(%model.backbone.0.body.layer1.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %228 = reshape(%model.backbone.0.body.layer1.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %229 = add(%228, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %230 = rsqrt(%229) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %231 = multiply(%227, %230) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %232 = multiply(%226, %231) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %233 = reshape(%model.backbone.0.body.layer1.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %234 = reshape(%model.backbone.0.body.layer1.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %235 = multiply(%234, %231) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %236 = subtract(%233, %235) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %237 = add(%232, %236) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %238 = add(%237, %199) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %239 = nn.relu(%238) /* ty=Tensor[(1, 256, 188, 200), float32] */;
  %240 = nn.conv2d(%239, %model.backbone.0.body.layer2.0.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 188, 200), float32] */;
  %241 = reshape(%model.backbone.0.body.layer2.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %242 = reshape(%model.backbone.0.body.layer2.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %243 = add(%242, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %244 = rsqrt(%243) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %245 = multiply(%241, %244) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %246 = multiply(%240, %245) /* ty=Tensor[(1, 128, 188, 200), float32] */;
  %247 = reshape(%model.backbone.0.body.layer2.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %248 = reshape(%model.backbone.0.body.layer2.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %249 = multiply(%248, %245) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %250 = subtract(%247, %249) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %251 = add(%246, %250) /* ty=Tensor[(1, 128, 188, 200), float32] */;
  %252 = nn.relu(%251) /* ty=Tensor[(1, 128, 188, 200), float32] */;
  %253 = nn.conv2d(%252, %model.backbone.0.body.layer2.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %254 = reshape(%model.backbone.0.body.layer2.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %255 = reshape(%model.backbone.0.body.layer2.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %256 = add(%255, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %257 = rsqrt(%256) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %258 = multiply(%254, %257) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %259 = multiply(%253, %258) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %260 = reshape(%model.backbone.0.body.layer2.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %261 = reshape(%model.backbone.0.body.layer2.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %262 = multiply(%261, %258) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %263 = subtract(%260, %262) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %264 = add(%259, %263) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %265 = nn.relu(%264) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %266 = nn.conv2d(%265, %model.backbone.0.body.layer2.0.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %267 = reshape(%model.backbone.0.body.layer2.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %268 = reshape(%model.backbone.0.body.layer2.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %269 = add(%268, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %270 = rsqrt(%269) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %271 = multiply(%267, %270) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %272 = multiply(%266, %271) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %273 = reshape(%model.backbone.0.body.layer2.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %274 = reshape(%model.backbone.0.body.layer2.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %275 = multiply(%274, %271) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %276 = subtract(%273, %275) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %277 = add(%272, %276) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %278 = nn.conv2d(%239, %model.backbone.0.body.layer2.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %279 = reshape(%model.backbone.0.body.layer2.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %280 = reshape(%model.backbone.0.body.layer2.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %281 = add(%280, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %282 = rsqrt(%281) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %283 = multiply(%279, %282) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %284 = multiply(%278, %283) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %285 = reshape(%model.backbone.0.body.layer2.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %286 = reshape(%model.backbone.0.body.layer2.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %287 = multiply(%286, %283) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %288 = subtract(%285, %287) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %289 = add(%284, %288) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %290 = add(%277, %289) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %291 = nn.relu(%290) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %292 = nn.conv2d(%291, %model.backbone.0.body.layer2.1.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %293 = reshape(%model.backbone.0.body.layer2.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %294 = reshape(%model.backbone.0.body.layer2.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %295 = add(%294, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %296 = rsqrt(%295) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %297 = multiply(%293, %296) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %298 = multiply(%292, %297) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %299 = reshape(%model.backbone.0.body.layer2.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %300 = reshape(%model.backbone.0.body.layer2.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %301 = multiply(%300, %297) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %302 = subtract(%299, %301) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %303 = add(%298, %302) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %304 = nn.relu(%303) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %305 = nn.conv2d(%304, %model.backbone.0.body.layer2.1.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %306 = reshape(%model.backbone.0.body.layer2.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %307 = reshape(%model.backbone.0.body.layer2.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %308 = add(%307, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %309 = rsqrt(%308) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %310 = multiply(%306, %309) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %311 = multiply(%305, %310) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %312 = reshape(%model.backbone.0.body.layer2.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %313 = reshape(%model.backbone.0.body.layer2.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %314 = multiply(%313, %310) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %315 = subtract(%312, %314) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %316 = add(%311, %315) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %317 = nn.relu(%316) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %318 = nn.conv2d(%317, %model.backbone.0.body.layer2.1.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %319 = reshape(%model.backbone.0.body.layer2.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %320 = reshape(%model.backbone.0.body.layer2.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %321 = add(%320, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %322 = rsqrt(%321) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %323 = multiply(%319, %322) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %324 = multiply(%318, %323) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %325 = reshape(%model.backbone.0.body.layer2.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %326 = reshape(%model.backbone.0.body.layer2.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %327 = multiply(%326, %323) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %328 = subtract(%325, %327) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %329 = add(%324, %328) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %330 = add(%329, %291) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %331 = nn.relu(%330) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %332 = nn.conv2d(%331, %model.backbone.0.body.layer2.2.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %333 = reshape(%model.backbone.0.body.layer2.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %334 = reshape(%model.backbone.0.body.layer2.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %335 = add(%334, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %336 = rsqrt(%335) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %337 = multiply(%333, %336) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %338 = multiply(%332, %337) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %339 = reshape(%model.backbone.0.body.layer2.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %340 = reshape(%model.backbone.0.body.layer2.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %341 = multiply(%340, %337) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %342 = subtract(%339, %341) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %343 = add(%338, %342) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %344 = nn.relu(%343) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %345 = nn.conv2d(%344, %model.backbone.0.body.layer2.2.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %346 = reshape(%model.backbone.0.body.layer2.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %347 = reshape(%model.backbone.0.body.layer2.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %348 = add(%347, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %349 = rsqrt(%348) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %350 = multiply(%346, %349) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %351 = multiply(%345, %350) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %352 = reshape(%model.backbone.0.body.layer2.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %353 = reshape(%model.backbone.0.body.layer2.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %354 = multiply(%353, %350) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %355 = subtract(%352, %354) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %356 = add(%351, %355) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %357 = nn.relu(%356) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %358 = nn.conv2d(%357, %model.backbone.0.body.layer2.2.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %359 = reshape(%model.backbone.0.body.layer2.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %360 = reshape(%model.backbone.0.body.layer2.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %361 = add(%360, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %362 = rsqrt(%361) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %363 = multiply(%359, %362) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %364 = multiply(%358, %363) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %365 = reshape(%model.backbone.0.body.layer2.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %366 = reshape(%model.backbone.0.body.layer2.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %367 = multiply(%366, %363) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %368 = subtract(%365, %367) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %369 = add(%364, %368) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %370 = add(%369, %331) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %371 = nn.relu(%370) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %372 = nn.conv2d(%371, %model.backbone.0.body.layer2.3.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %373 = reshape(%model.backbone.0.body.layer2.3.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %374 = reshape(%model.backbone.0.body.layer2.3.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %375 = add(%374, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %376 = rsqrt(%375) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %377 = multiply(%373, %376) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %378 = multiply(%372, %377) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %379 = reshape(%model.backbone.0.body.layer2.3.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %380 = reshape(%model.backbone.0.body.layer2.3.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %381 = multiply(%380, %377) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %382 = subtract(%379, %381) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %383 = add(%378, %382) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %384 = nn.relu(%383) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %385 = nn.conv2d(%384, %model.backbone.0.body.layer2.3.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %386 = reshape(%model.backbone.0.body.layer2.3.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %387 = reshape(%model.backbone.0.body.layer2.3.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %388 = add(%387, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %389 = rsqrt(%388) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %390 = multiply(%386, %389) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %391 = multiply(%385, %390) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %392 = reshape(%model.backbone.0.body.layer2.3.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %393 = reshape(%model.backbone.0.body.layer2.3.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %394 = multiply(%393, %390) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %395 = subtract(%392, %394) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %396 = add(%391, %395) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %397 = nn.relu(%396) /* ty=Tensor[(1, 128, 94, 100), float32] */;
  %398 = nn.conv2d(%397, %model.backbone.0.body.layer2.3.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %399 = reshape(%model.backbone.0.body.layer2.3.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %400 = reshape(%model.backbone.0.body.layer2.3.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %401 = add(%400, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %402 = rsqrt(%401) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %403 = multiply(%399, %402) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %404 = multiply(%398, %403) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %405 = reshape(%model.backbone.0.body.layer2.3.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %406 = reshape(%model.backbone.0.body.layer2.3.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %407 = multiply(%406, %403) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %408 = subtract(%405, %407) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %409 = add(%404, %408) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %410 = add(%409, %371) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %411 = nn.relu(%410) /* ty=Tensor[(1, 512, 94, 100), float32] */;
  %412 = nn.conv2d(%411, %model.backbone.0.body.layer3.0.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 94, 100), float32] */;
  %413 = reshape(%model.backbone.0.body.layer3.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %414 = reshape(%model.backbone.0.body.layer3.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %415 = add(%414, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %416 = rsqrt(%415) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %417 = multiply(%413, %416) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %418 = multiply(%412, %417) /* ty=Tensor[(1, 256, 94, 100), float32] */;
  %419 = reshape(%model.backbone.0.body.layer3.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %420 = reshape(%model.backbone.0.body.layer3.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %421 = multiply(%420, %417) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %422 = subtract(%419, %421) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %423 = add(%418, %422) /* ty=Tensor[(1, 256, 94, 100), float32] */;
  %424 = nn.relu(%423) /* ty=Tensor[(1, 256, 94, 100), float32] */;
  %425 = nn.conv2d(%424, %model.backbone.0.body.layer3.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %426 = reshape(%model.backbone.0.body.layer3.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %427 = reshape(%model.backbone.0.body.layer3.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %428 = add(%427, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %429 = rsqrt(%428) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %430 = multiply(%426, %429) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %431 = multiply(%425, %430) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %432 = reshape(%model.backbone.0.body.layer3.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %433 = reshape(%model.backbone.0.body.layer3.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %434 = multiply(%433, %430) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %435 = subtract(%432, %434) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %436 = add(%431, %435) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %437 = nn.relu(%436) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %438 = nn.conv2d(%437, %model.backbone.0.body.layer3.0.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %439 = reshape(%model.backbone.0.body.layer3.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %440 = reshape(%model.backbone.0.body.layer3.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %441 = add(%440, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %442 = rsqrt(%441) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %443 = multiply(%439, %442) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %444 = multiply(%438, %443) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %445 = reshape(%model.backbone.0.body.layer3.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %446 = reshape(%model.backbone.0.body.layer3.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %447 = multiply(%446, %443) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %448 = subtract(%445, %447) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %449 = add(%444, %448) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %450 = nn.conv2d(%411, %model.backbone.0.body.layer3.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %451 = reshape(%model.backbone.0.body.layer3.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %452 = reshape(%model.backbone.0.body.layer3.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %453 = add(%452, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %454 = rsqrt(%453) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %455 = multiply(%451, %454) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %456 = multiply(%450, %455) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %457 = reshape(%model.backbone.0.body.layer3.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %458 = reshape(%model.backbone.0.body.layer3.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %459 = multiply(%458, %455) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %460 = subtract(%457, %459) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %461 = add(%456, %460) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %462 = add(%449, %461) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %463 = nn.relu(%462) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %464 = nn.conv2d(%463, %model.backbone.0.body.layer3.1.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %465 = reshape(%model.backbone.0.body.layer3.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %466 = reshape(%model.backbone.0.body.layer3.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %467 = add(%466, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %468 = rsqrt(%467) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %469 = multiply(%465, %468) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %470 = multiply(%464, %469) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %471 = reshape(%model.backbone.0.body.layer3.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %472 = reshape(%model.backbone.0.body.layer3.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %473 = multiply(%472, %469) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %474 = subtract(%471, %473) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %475 = add(%470, %474) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %476 = nn.relu(%475) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %477 = nn.conv2d(%476, %model.backbone.0.body.layer3.1.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %478 = reshape(%model.backbone.0.body.layer3.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %479 = reshape(%model.backbone.0.body.layer3.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %480 = add(%479, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %481 = rsqrt(%480) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %482 = multiply(%478, %481) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %483 = multiply(%477, %482) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %484 = reshape(%model.backbone.0.body.layer3.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %485 = reshape(%model.backbone.0.body.layer3.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %486 = multiply(%485, %482) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %487 = subtract(%484, %486) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %488 = add(%483, %487) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %489 = nn.relu(%488) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %490 = nn.conv2d(%489, %model.backbone.0.body.layer3.1.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %491 = reshape(%model.backbone.0.body.layer3.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %492 = reshape(%model.backbone.0.body.layer3.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %493 = add(%492, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %494 = rsqrt(%493) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %495 = multiply(%491, %494) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %496 = multiply(%490, %495) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %497 = reshape(%model.backbone.0.body.layer3.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %498 = reshape(%model.backbone.0.body.layer3.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %499 = multiply(%498, %495) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %500 = subtract(%497, %499) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %501 = add(%496, %500) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %502 = add(%501, %463) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %503 = nn.relu(%502) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %504 = nn.conv2d(%503, %model.backbone.0.body.layer3.2.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %505 = reshape(%model.backbone.0.body.layer3.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %506 = reshape(%model.backbone.0.body.layer3.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %507 = add(%506, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %508 = rsqrt(%507) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %509 = multiply(%505, %508) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %510 = multiply(%504, %509) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %511 = reshape(%model.backbone.0.body.layer3.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %512 = reshape(%model.backbone.0.body.layer3.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %513 = multiply(%512, %509) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %514 = subtract(%511, %513) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %515 = add(%510, %514) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %516 = nn.relu(%515) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %517 = nn.conv2d(%516, %model.backbone.0.body.layer3.2.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %518 = reshape(%model.backbone.0.body.layer3.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %519 = reshape(%model.backbone.0.body.layer3.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %520 = add(%519, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %521 = rsqrt(%520) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %522 = multiply(%518, %521) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %523 = multiply(%517, %522) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %524 = reshape(%model.backbone.0.body.layer3.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %525 = reshape(%model.backbone.0.body.layer3.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %526 = multiply(%525, %522) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %527 = subtract(%524, %526) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %528 = add(%523, %527) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %529 = nn.relu(%528) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %530 = nn.conv2d(%529, %model.backbone.0.body.layer3.2.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %531 = reshape(%model.backbone.0.body.layer3.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %532 = reshape(%model.backbone.0.body.layer3.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %533 = add(%532, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %534 = rsqrt(%533) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %535 = multiply(%531, %534) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %536 = multiply(%530, %535) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %537 = reshape(%model.backbone.0.body.layer3.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %538 = reshape(%model.backbone.0.body.layer3.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %539 = multiply(%538, %535) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %540 = subtract(%537, %539) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %541 = add(%536, %540) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %542 = add(%541, %503) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %543 = nn.relu(%542) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %544 = nn.conv2d(%543, %model.backbone.0.body.layer3.3.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %545 = reshape(%model.backbone.0.body.layer3.3.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %546 = reshape(%model.backbone.0.body.layer3.3.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %547 = add(%546, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %548 = rsqrt(%547) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %549 = multiply(%545, %548) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %550 = multiply(%544, %549) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %551 = reshape(%model.backbone.0.body.layer3.3.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %552 = reshape(%model.backbone.0.body.layer3.3.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %553 = multiply(%552, %549) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %554 = subtract(%551, %553) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %555 = add(%550, %554) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %556 = nn.relu(%555) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %557 = nn.conv2d(%556, %model.backbone.0.body.layer3.3.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %558 = reshape(%model.backbone.0.body.layer3.3.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %559 = reshape(%model.backbone.0.body.layer3.3.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %560 = add(%559, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %561 = rsqrt(%560) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %562 = multiply(%558, %561) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %563 = multiply(%557, %562) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %564 = reshape(%model.backbone.0.body.layer3.3.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %565 = reshape(%model.backbone.0.body.layer3.3.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %566 = multiply(%565, %562) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %567 = subtract(%564, %566) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %568 = add(%563, %567) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %569 = nn.relu(%568) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %570 = nn.conv2d(%569, %model.backbone.0.body.layer3.3.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %571 = reshape(%model.backbone.0.body.layer3.3.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %572 = reshape(%model.backbone.0.body.layer3.3.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %573 = add(%572, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %574 = rsqrt(%573) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %575 = multiply(%571, %574) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %576 = multiply(%570, %575) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %577 = reshape(%model.backbone.0.body.layer3.3.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %578 = reshape(%model.backbone.0.body.layer3.3.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %579 = multiply(%578, %575) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %580 = subtract(%577, %579) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %581 = add(%576, %580) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %582 = add(%581, %543) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %583 = nn.relu(%582) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %584 = nn.conv2d(%583, %model.backbone.0.body.layer3.4.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %585 = reshape(%model.backbone.0.body.layer3.4.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %586 = reshape(%model.backbone.0.body.layer3.4.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %587 = add(%586, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %588 = rsqrt(%587) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %589 = multiply(%585, %588) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %590 = multiply(%584, %589) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %591 = reshape(%model.backbone.0.body.layer3.4.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %592 = reshape(%model.backbone.0.body.layer3.4.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %593 = multiply(%592, %589) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %594 = subtract(%591, %593) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %595 = add(%590, %594) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %596 = nn.relu(%595) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %597 = nn.conv2d(%596, %model.backbone.0.body.layer3.4.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %598 = reshape(%model.backbone.0.body.layer3.4.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %599 = reshape(%model.backbone.0.body.layer3.4.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %600 = add(%599, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %601 = rsqrt(%600) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %602 = multiply(%598, %601) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %603 = multiply(%597, %602) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %604 = reshape(%model.backbone.0.body.layer3.4.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %605 = reshape(%model.backbone.0.body.layer3.4.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %606 = multiply(%605, %602) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %607 = subtract(%604, %606) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %608 = add(%603, %607) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %609 = nn.relu(%608) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %610 = nn.conv2d(%609, %model.backbone.0.body.layer3.4.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %611 = reshape(%model.backbone.0.body.layer3.4.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %612 = reshape(%model.backbone.0.body.layer3.4.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %613 = add(%612, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %614 = rsqrt(%613) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %615 = multiply(%611, %614) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %616 = multiply(%610, %615) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %617 = reshape(%model.backbone.0.body.layer3.4.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %618 = reshape(%model.backbone.0.body.layer3.4.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %619 = multiply(%618, %615) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %620 = subtract(%617, %619) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %621 = add(%616, %620) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %622 = add(%621, %583) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %623 = nn.relu(%622) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %624 = nn.conv2d(%623, %model.backbone.0.body.layer3.5.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %625 = reshape(%model.backbone.0.body.layer3.5.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %626 = reshape(%model.backbone.0.body.layer3.5.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %627 = add(%626, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %628 = rsqrt(%627) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %629 = multiply(%625, %628) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %630 = multiply(%624, %629) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %631 = reshape(%model.backbone.0.body.layer3.5.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %632 = reshape(%model.backbone.0.body.layer3.5.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %633 = multiply(%632, %629) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %634 = subtract(%631, %633) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %635 = add(%630, %634) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %636 = nn.relu(%635) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %637 = nn.conv2d(%636, %model.backbone.0.body.layer3.5.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %638 = reshape(%model.backbone.0.body.layer3.5.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %639 = reshape(%model.backbone.0.body.layer3.5.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %640 = add(%639, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %641 = rsqrt(%640) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %642 = multiply(%638, %641) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %643 = multiply(%637, %642) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %644 = reshape(%model.backbone.0.body.layer3.5.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %645 = reshape(%model.backbone.0.body.layer3.5.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %646 = multiply(%645, %642) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %647 = subtract(%644, %646) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %648 = add(%643, %647) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %649 = nn.relu(%648) /* ty=Tensor[(1, 256, 47, 50), float32] */;
  %650 = nn.conv2d(%649, %model.backbone.0.body.layer3.5.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %651 = reshape(%model.backbone.0.body.layer3.5.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %652 = reshape(%model.backbone.0.body.layer3.5.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %653 = add(%652, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %654 = rsqrt(%653) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %655 = multiply(%651, %654) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %656 = multiply(%650, %655) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %657 = reshape(%model.backbone.0.body.layer3.5.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %658 = reshape(%model.backbone.0.body.layer3.5.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %659 = multiply(%658, %655) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %660 = subtract(%657, %659) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %661 = add(%656, %660) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %662 = add(%661, %623) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %663 = nn.relu(%662) /* ty=Tensor[(1, 1024, 47, 50), float32] */;
  %664 = nn.conv2d(%663, %model.backbone.0.body.layer4.0.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 47, 50), float32] */;
  %665 = reshape(%model.backbone.0.body.layer4.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %666 = reshape(%model.backbone.0.body.layer4.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %667 = add(%666, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %668 = rsqrt(%667) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %669 = multiply(%665, %668) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %670 = multiply(%664, %669) /* ty=Tensor[(1, 512, 47, 50), float32] */;
  %671 = reshape(%model.backbone.0.body.layer4.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %672 = reshape(%model.backbone.0.body.layer4.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %673 = multiply(%672, %669) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %674 = subtract(%671, %673) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %675 = add(%670, %674) /* ty=Tensor[(1, 512, 47, 50), float32] */;
  %676 = nn.relu(%675) /* ty=Tensor[(1, 512, 47, 50), float32] */;
  %677 = nn.conv2d(%676, %model.backbone.0.body.layer4.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %678 = reshape(%model.backbone.0.body.layer4.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %679 = reshape(%model.backbone.0.body.layer4.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %680 = add(%679, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %681 = rsqrt(%680) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %682 = multiply(%678, %681) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %683 = multiply(%677, %682) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %684 = reshape(%model.backbone.0.body.layer4.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %685 = reshape(%model.backbone.0.body.layer4.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %686 = multiply(%685, %682) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %687 = subtract(%684, %686) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %688 = add(%683, %687) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %689 = nn.relu(%688) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %690 = nn.conv2d(%689, %model.backbone.0.body.layer4.0.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %691 = reshape(%model.backbone.0.body.layer4.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %692 = reshape(%model.backbone.0.body.layer4.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %693 = add(%692, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %694 = rsqrt(%693) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %695 = multiply(%691, %694) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %696 = multiply(%690, %695) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %697 = reshape(%model.backbone.0.body.layer4.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %698 = reshape(%model.backbone.0.body.layer4.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %699 = multiply(%698, %695) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %700 = subtract(%697, %699) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %701 = add(%696, %700) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %702 = nn.conv2d(%663, %model.backbone.0.body.layer4.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %703 = reshape(%model.backbone.0.body.layer4.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %704 = reshape(%model.backbone.0.body.layer4.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %705 = add(%704, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %706 = rsqrt(%705) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %707 = multiply(%703, %706) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %708 = multiply(%702, %707) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %709 = reshape(%model.backbone.0.body.layer4.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %710 = reshape(%model.backbone.0.body.layer4.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %711 = multiply(%710, %707) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %712 = subtract(%709, %711) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %713 = add(%708, %712) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %714 = add(%701, %713) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %715 = nn.relu(%714) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %716 = nn.conv2d(%715, %model.backbone.0.body.layer4.1.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %717 = reshape(%model.backbone.0.body.layer4.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %718 = reshape(%model.backbone.0.body.layer4.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %719 = add(%718, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %720 = rsqrt(%719) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %721 = multiply(%717, %720) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %722 = multiply(%716, %721) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %723 = reshape(%model.backbone.0.body.layer4.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %724 = reshape(%model.backbone.0.body.layer4.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %725 = multiply(%724, %721) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %726 = subtract(%723, %725) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %727 = add(%722, %726) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %728 = nn.relu(%727) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %729 = nn.conv2d(%728, %model.backbone.0.body.layer4.1.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %730 = reshape(%model.backbone.0.body.layer4.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %731 = reshape(%model.backbone.0.body.layer4.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %732 = add(%731, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %733 = rsqrt(%732) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %734 = multiply(%730, %733) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %735 = multiply(%729, %734) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %736 = reshape(%model.backbone.0.body.layer4.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %737 = reshape(%model.backbone.0.body.layer4.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %738 = multiply(%737, %734) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %739 = subtract(%736, %738) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %740 = add(%735, %739) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %741 = nn.relu(%740) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %742 = nn.conv2d(%741, %model.backbone.0.body.layer4.1.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %743 = reshape(%model.backbone.0.body.layer4.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %744 = reshape(%model.backbone.0.body.layer4.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %745 = add(%744, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %746 = rsqrt(%745) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %747 = multiply(%743, %746) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %748 = multiply(%742, %747) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %749 = reshape(%model.backbone.0.body.layer4.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %750 = reshape(%model.backbone.0.body.layer4.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %751 = multiply(%750, %747) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %752 = subtract(%749, %751) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %753 = add(%748, %752) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %754 = add(%753, %715) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %755 = nn.relu(%754) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %756 = nn.conv2d(%755, %model.backbone.0.body.layer4.2.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %757 = reshape(%model.backbone.0.body.layer4.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %758 = reshape(%model.backbone.0.body.layer4.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %759 = add(%758, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %760 = rsqrt(%759) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %761 = multiply(%757, %760) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %762 = multiply(%756, %761) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %763 = reshape(%model.backbone.0.body.layer4.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %764 = reshape(%model.backbone.0.body.layer4.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %765 = multiply(%764, %761) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %766 = subtract(%763, %765) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %767 = add(%762, %766) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %768 = nn.relu(%767) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %769 = nn.conv2d(%768, %model.backbone.0.body.layer4.2.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %770 = reshape(%model.backbone.0.body.layer4.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %771 = reshape(%model.backbone.0.body.layer4.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %772 = add(%771, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %773 = rsqrt(%772) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %774 = multiply(%770, %773) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %775 = multiply(%769, %774) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %776 = reshape(%model.backbone.0.body.layer4.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %777 = reshape(%model.backbone.0.body.layer4.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %778 = multiply(%777, %774) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %779 = subtract(%776, %778) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %780 = add(%775, %779) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %781 = nn.relu(%780) /* ty=Tensor[(1, 512, 24, 25), float32] */;
  %782 = nn.conv2d(%781, %model.backbone.0.body.layer4.2.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %783 = reshape(%model.backbone.0.body.layer4.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %784 = reshape(%model.backbone.0.body.layer4.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %785 = add(%784, 1e-05f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %786 = rsqrt(%785) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %787 = multiply(%783, %786) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %788 = multiply(%782, %787) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %789 = reshape(%model.backbone.0.body.layer4.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %790 = reshape(%model.backbone.0.body.layer4.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %791 = multiply(%790, %787) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %792 = subtract(%789, %791) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %793 = add(%788, %792) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %794 = add(%793, %755) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %795 = nn.relu(%794) /* ty=Tensor[(1, 2048, 24, 25), float32] */;
  %796 = (%90, %795);
  %797 = %796.1;
  %798 = %796.0;
  %799 = cast(%798, dtype="bool") /* ty=Tensor[(1, 24, 25), bool] */;
  %800 = logical_not(%799) /* ty=Tensor[(1, 24, 25), bool] */;
  %801 = cumsum(%800, meta[relay.attrs.CumsumAttrs][0]) /* ty=Tensor[(1, 24, 25), float32] */;
  %802 = strided_slice(%801, begin=[0, 0, 0], end=[1, 24, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 24, 25), float32] */;
  %803 = strided_slice(%802, begin=[0, -1, 0], end=[1, 24, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 1, 25), float32] */;
  %804 = strided_slice(%803, begin=[0, 0, 0], end=[1, 1, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 1, 25), float32] */;
  %805 = add(%804, 1e-06f /* ty=float32 */) /* ty=Tensor[(1, 1, 25), float32] */;
  %806 = divide(%801, %805) /* ty=Tensor[(1, 24, 25), float32] */;
  %807 = multiply(%806, 6.28319f /* ty=float32 */) /* ty=Tensor[(1, 24, 25), float32] */;
  %808 = strided_slice(%807, begin=[0, 0, 0], end=[1, 24, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 24, 25), float32] */;
  %809 = strided_slice(%808, begin=[0, 0, 0], end=[1, 24, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 24, 25), float32] */;
  %810 = strided_slice(%809, begin=[0, 0, 0], end=[1, 24, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 24, 25), float32] */;
  %811 = expand_dims(%810, axis=3) /* ty=Tensor[(1, 24, 25, 1), float32] */;
  %812 = arange(0f /* ty=float32 */, 128f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][0], stop=meta[relay.Constant][1], step=meta[relay.Constant][2], dtype="float32") /* ty=Tensor[(128), float32] */;
  %813 = floor_divide(%812, 2f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %814 = multiply(%813, 2f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %815 = divide(%814, 128f /* ty=float32 */) /* ty=Tensor[(128), float32] */;
  %816 = power(10000f /* ty=float32 */, %815) /* ty=Tensor[(128), float32] */;
  %817 = divide(%811, %816) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %818 = strided_slice(%817, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %819 = strided_slice(%818, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %820 = strided_slice(%819, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %821 = strided_slice(%820, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 2]) /* ty=Tensor[(1, 24, 25, 64), float32] */;
  %822 = sin(%821) /* ty=Tensor[(1, 24, 25, 64), float32] */;
  %823 = strided_slice(%817, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %824 = strided_slice(%823, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %825 = strided_slice(%824, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %826 = strided_slice(%825, begin=[0, 0, 0, 1], end=[1, 24, 25, 128], strides=[1, 1, 1, 2]) /* ty=Tensor[(1, 24, 25, 64), float32] */;
  %827 = cos(%826) /* ty=Tensor[(1, 24, 25, 64), float32] */;
  %828 = (%822, %827);
  %829 = stack(%828, axis=4) /* ty=Tensor[(1, 24, 25, 64, 2), float32] */;
  %830 = reshape(%829, newshape=[0, 0, 0, -1, 1]) /* ty=Tensor[(1, 24, 25, 128, 1), float32] */;
  %831 = squeeze(%830, axis=[4]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %832 = cumsum(%800, meta[relay.attrs.CumsumAttrs][1]) /* ty=Tensor[(1, 24, 25), float32] */;
  %833 = strided_slice(%832, begin=[0, 0, 0], end=[1, 24, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 24, 25), float32] */;
  %834 = strided_slice(%833, begin=[0, 0, 0], end=[1, 24, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 24, 25), float32] */;
  %835 = strided_slice(%834, begin=[0, 0, -1], end=[1, 24, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 24, 1), float32] */;
  %836 = add(%835, 1e-06f /* ty=float32 */) /* ty=Tensor[(1, 24, 1), float32] */;
  %837 = divide(%832, %836) /* ty=Tensor[(1, 24, 25), float32] */;
  %838 = multiply(%837, 6.28319f /* ty=float32 */) /* ty=Tensor[(1, 24, 25), float32] */;
  %839 = strided_slice(%838, begin=[0, 0, 0], end=[1, 24, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 24, 25), float32] */;
  %840 = strided_slice(%839, begin=[0, 0, 0], end=[1, 24, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 24, 25), float32] */;
  %841 = strided_slice(%840, begin=[0, 0, 0], end=[1, 24, 25], strides=[1, 1, 1]) /* ty=Tensor[(1, 24, 25), float32] */;
  %842 = expand_dims(%841, axis=3) /* ty=Tensor[(1, 24, 25, 1), float32] */;
  %843 = divide(%842, %816) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %844 = strided_slice(%843, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %845 = strided_slice(%844, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %846 = strided_slice(%845, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %847 = strided_slice(%846, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 2]) /* ty=Tensor[(1, 24, 25, 64), float32] */;
  %848 = sin(%847) /* ty=Tensor[(1, 24, 25, 64), float32] */;
  %849 = strided_slice(%843, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %850 = strided_slice(%849, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %851 = strided_slice(%850, begin=[0, 0, 0, 0], end=[1, 24, 25, 128], strides=[1, 1, 1, 1]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %852 = strided_slice(%851, begin=[0, 0, 0, 1], end=[1, 24, 25, 128], strides=[1, 1, 1, 2]) /* ty=Tensor[(1, 24, 25, 64), float32] */;
  %853 = cos(%852) /* ty=Tensor[(1, 24, 25, 64), float32] */;
  %854 = (%848, %853);
  %855 = stack(%854, axis=4) /* ty=Tensor[(1, 24, 25, 64, 2), float32] */;
  %856 = reshape(%855, newshape=[0, 0, 0, -1, 1]) /* ty=Tensor[(1, 24, 25, 128, 1), float32] */;
  %857 = squeeze(%856, axis=[4]) /* ty=Tensor[(1, 24, 25, 128), float32] */;
  %858 = (%831, %857);
  %859 = concatenate(%858, axis=3) /* ty=Tensor[(1, 24, 25, 256), float32] */;
  %860 = transpose(%859, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 256, 24, 25), float32] */;
  %861 = (%797, %860, %798);
  %862 = %861.2;
  %863 = reshape(%862, newshape=[0, -1, 1]) /* ty=Tensor[(1, 600, 1), float32] */;
  %864 = squeeze(%863, axis=[2]) /* ty=Tensor[(1, 600), float32] */;
  %865 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %866 = expand_dims(%865, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %867 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %868 = add(%75, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %869 = reshape(%868, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %870 = strided_slice(%model.transformer.decoder.layers.0.multihead_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %871 = strided_slice(%870, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %872 = transpose(%871, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %873 = reshape(%872, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %874 = broadcast_to(%873, meta[relay.attrs.InitOpAttrs][4]) /* ty=Tensor[(100, 256, 256), float32] */;
  %875 = transpose(%874, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %876 = nn.batch_matmul(%869, %875) /* ty=Tensor[(100, 1, 256), float32] */;
  %877 = reshape(%876, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %878 = strided_slice(%model.transformer.decoder.layers.0.multihead_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %879 = add(%877, %878) /* ty=Tensor[(100, 1, 256), float32] */;
  %880 = multiply(%879, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %881 = copy(%880) /* ty=Tensor[(100, 1, 256), float32] */;
  %882 = reshape(%881, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %883 = transpose(%882, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %884 = reshape(%883, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %885 = %861.0;
  %886 = nn.conv2d(%885, %model.input_proj.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 24, 25), float32] */;
  %887 = nn.bias_add(%886, %model.input_proj.bias) /* ty=Tensor[(1, 256, 24, 25), float32] */;
  %888 = reshape(%887, newshape=[0, 0, -1, 1]) /* ty=Tensor[(1, 256, 600, 1), float32] */;
  %889 = squeeze(%888, axis=[3]) /* ty=Tensor[(1, 256, 600), float32] */;
  %890 = transpose(%889, axes=[2, 0, 1]) /* ty=Tensor[(600, 1, 256), float32] */;
  %891 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %892 = expand_dims(%891, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %893 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %894 = %861.1;
  %895 = reshape(%894, newshape=[0, 0, -1, 1]) /* ty=Tensor[(1, 256, 600, 1), float32] */;
  %896 = squeeze(%895, axis=[3]) /* ty=Tensor[(1, 256, 600), float32] */;
  %897 = transpose(%896, axes=[2, 0, 1]) /* ty=Tensor[(600, 1, 256), float32] */;
  %898 = add(%890, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %899 = reshape(%898, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %900 = strided_slice(%model.transformer.encoder.layers.0.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %901 = strided_slice(%900, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %902 = transpose(%901, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %903 = reshape(%902, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %904 = broadcast_to(%903, meta[relay.attrs.InitOpAttrs][5]) /* ty=Tensor[(600, 256, 256), float32] */;
  %905 = transpose(%904, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %906 = nn.batch_matmul(%899, %905) /* ty=Tensor[(600, 1, 256), float32] */;
  %907 = reshape(%906, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %908 = strided_slice(%model.transformer.encoder.layers.0.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %909 = add(%907, %908) /* ty=Tensor[(600, 1, 256), float32] */;
  %910 = multiply(%909, 0.176777f /* ty=float32 */) /* ty=Tensor[(600, 1, 256), float32] */;
  %911 = copy(%910) /* ty=Tensor[(600, 1, 256), float32] */;
  %912 = reshape(%911, newshape=[600, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %913 = transpose(%912, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %914 = reshape(%913, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %915 = reshape(%898, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %916 = strided_slice(%model.transformer.encoder.layers.0.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %917 = strided_slice(%916, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %918 = transpose(%917, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %919 = reshape(%918, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %920 = broadcast_to(%919, meta[relay.attrs.InitOpAttrs][6]) /* ty=Tensor[(600, 256, 256), float32] */;
  %921 = transpose(%920, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %922 = nn.batch_matmul(%915, %921) /* ty=Tensor[(600, 1, 256), float32] */;
  %923 = reshape(%922, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %924 = strided_slice(%model.transformer.encoder.layers.0.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %925 = add(%923, %924) /* ty=Tensor[(600, 1, 256), float32] */;
  %926 = copy(%925) /* ty=Tensor[(600, 1, 256), float32] */;
  %927 = reshape(%926, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %928 = transpose(%927, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %929 = transpose(%928, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %930 = reshape(%929, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %931 = transpose(%930, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %932 = nn.batch_matmul(%914, %931) /* ty=Tensor[(8, 600, 600), float32] */;
  %933 = reshape(%932, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %934 = reshape(%933, newshape=[1, 8, 600, 600]) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %935 = where(%892, %893, %934) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %936 = reshape(%935, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %937 = nn.softmax(%936) /* ty=Tensor[(8, 600, 600), float32] */;
  %938 = nn.dropout(%937, rate=0.1f) /* ty=(Tensor[(8, 600, 600), float32], Tensor[(8, 600, 600), float32]) */;
  %939 = %938.0;
  %940 = reshape(%939, newshape=[-1, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %941 = reshape(%890, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %942 = strided_slice(%model.transformer.encoder.layers.0.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %943 = strided_slice(%942, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %944 = transpose(%943, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %945 = reshape(%944, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %946 = broadcast_to(%945, meta[relay.attrs.InitOpAttrs][7]) /* ty=Tensor[(600, 256, 256), float32] */;
  %947 = transpose(%946, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %948 = nn.batch_matmul(%941, %947) /* ty=Tensor[(600, 1, 256), float32] */;
  %949 = reshape(%948, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %950 = strided_slice(%model.transformer.encoder.layers.0.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %951 = add(%949, %950) /* ty=Tensor[(600, 1, 256), float32] */;
  %952 = copy(%951) /* ty=Tensor[(600, 1, 256), float32] */;
  %953 = reshape(%952, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %954 = transpose(%953, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %955 = reshape(%954, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %956 = transpose(%955, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %957 = nn.batch_matmul(%940, %956) /* ty=Tensor[(8, 600, 32), float32] */;
  %958 = reshape(%957, newshape=[8, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %959 = transpose(%958, axes=[1, 0, 2]) /* ty=Tensor[(600, 8, 32), float32] */;
  %960 = copy(%959) /* ty=Tensor[(600, 8, 32), float32] */;
  %961 = reshape(%960, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %962 = reshape(%961, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %963 = transpose(%model.transformer.encoder.layers.0.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %964 = reshape(%963, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %965 = broadcast_to(%964, meta[relay.attrs.InitOpAttrs][8]) /* ty=Tensor[(600, 256, 256), float32] */;
  %966 = transpose(%965, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %967 = nn.batch_matmul(%962, %966) /* ty=Tensor[(600, 1, 256), float32] */;
  %968 = reshape(%967, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %969 = add(%968, %model.transformer.encoder.layers.0.self_attn.out_proj.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %970 = nn.dropout(%969, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %971 = %970.0;
  %972 = add(%890, %971) /* ty=Tensor[(600, 1, 256), float32] */;
  %973 = nn.layer_norm(%972, %model.transformer.encoder.layers.0.norm1.weight, %model.transformer.encoder.layers.0.norm1.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %974 = reshape(%973, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %975 = transpose(%model.transformer.encoder.layers.0.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %976 = reshape(%975, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %977 = broadcast_to(%976, meta[relay.attrs.InitOpAttrs][9]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %978 = transpose(%977, axes=[0, 2, 1]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %979 = nn.batch_matmul(%974, %978) /* ty=Tensor[(600, 1, 2048), float32] */;
  %980 = reshape(%979, newshape=[600, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %981 = add(%980, %model.transformer.encoder.layers.0.linear1.bias) /* ty=Tensor[(600, 1, 2048), float32] */;
  %982 = nn.relu(%981) /* ty=Tensor[(600, 1, 2048), float32] */;
  %983 = nn.dropout(%982, rate=0.1f) /* ty=(Tensor[(600, 1, 2048), float32], Tensor[(600, 1, 2048), float32]) */;
  %984 = %983.0;
  %985 = reshape(%984, newshape=[-1, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %986 = transpose(%model.transformer.encoder.layers.0.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %987 = reshape(%986, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %988 = broadcast_to(%987, meta[relay.attrs.InitOpAttrs][10]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %989 = transpose(%988, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %990 = nn.batch_matmul(%985, %989) /* ty=Tensor[(600, 1, 256), float32] */;
  %991 = reshape(%990, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %992 = add(%991, %model.transformer.encoder.layers.0.linear2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %993 = nn.dropout(%992, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %994 = %993.0;
  %995 = add(%973, %994) /* ty=Tensor[(600, 1, 256), float32] */;
  %996 = nn.layer_norm(%995, %model.transformer.encoder.layers.0.norm2.weight, %model.transformer.encoder.layers.0.norm2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %997 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %998 = expand_dims(%997, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %999 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1000 = add(%996, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %1001 = reshape(%1000, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1002 = strided_slice(%model.transformer.encoder.layers.1.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1003 = strided_slice(%1002, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1004 = transpose(%1003, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1005 = reshape(%1004, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1006 = broadcast_to(%1005, meta[relay.attrs.InitOpAttrs][11]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1007 = transpose(%1006, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1008 = nn.batch_matmul(%1001, %1007) /* ty=Tensor[(600, 1, 256), float32] */;
  %1009 = reshape(%1008, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1010 = strided_slice(%model.transformer.encoder.layers.1.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1011 = add(%1009, %1010) /* ty=Tensor[(600, 1, 256), float32] */;
  %1012 = multiply(%1011, 0.176777f /* ty=float32 */) /* ty=Tensor[(600, 1, 256), float32] */;
  %1013 = copy(%1012) /* ty=Tensor[(600, 1, 256), float32] */;
  %1014 = reshape(%1013, newshape=[600, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1015 = transpose(%1014, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1016 = reshape(%1015, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1017 = reshape(%1000, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1018 = strided_slice(%model.transformer.encoder.layers.1.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1019 = strided_slice(%1018, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1020 = transpose(%1019, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1021 = reshape(%1020, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1022 = broadcast_to(%1021, meta[relay.attrs.InitOpAttrs][12]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1023 = transpose(%1022, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1024 = nn.batch_matmul(%1017, %1023) /* ty=Tensor[(600, 1, 256), float32] */;
  %1025 = reshape(%1024, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1026 = strided_slice(%model.transformer.encoder.layers.1.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1027 = add(%1025, %1026) /* ty=Tensor[(600, 1, 256), float32] */;
  %1028 = copy(%1027) /* ty=Tensor[(600, 1, 256), float32] */;
  %1029 = reshape(%1028, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1030 = transpose(%1029, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1031 = transpose(%1030, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1032 = reshape(%1031, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1033 = transpose(%1032, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1034 = nn.batch_matmul(%1016, %1033) /* ty=Tensor[(8, 600, 600), float32] */;
  %1035 = reshape(%1034, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1036 = reshape(%1035, newshape=[1, 8, 600, 600]) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %1037 = where(%998, %999, %1036) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %1038 = reshape(%1037, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1039 = nn.softmax(%1038) /* ty=Tensor[(8, 600, 600), float32] */;
  %1040 = nn.dropout(%1039, rate=0.1f) /* ty=(Tensor[(8, 600, 600), float32], Tensor[(8, 600, 600), float32]) */;
  %1041 = %1040.0;
  %1042 = reshape(%1041, newshape=[-1, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1043 = reshape(%996, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1044 = strided_slice(%model.transformer.encoder.layers.1.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1045 = strided_slice(%1044, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1046 = transpose(%1045, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1047 = reshape(%1046, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1048 = broadcast_to(%1047, meta[relay.attrs.InitOpAttrs][13]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1049 = transpose(%1048, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1050 = nn.batch_matmul(%1043, %1049) /* ty=Tensor[(600, 1, 256), float32] */;
  %1051 = reshape(%1050, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1052 = strided_slice(%model.transformer.encoder.layers.1.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1053 = add(%1051, %1052) /* ty=Tensor[(600, 1, 256), float32] */;
  %1054 = copy(%1053) /* ty=Tensor[(600, 1, 256), float32] */;
  %1055 = reshape(%1054, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1056 = transpose(%1055, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1057 = reshape(%1056, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1058 = transpose(%1057, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1059 = nn.batch_matmul(%1042, %1058) /* ty=Tensor[(8, 600, 32), float32] */;
  %1060 = reshape(%1059, newshape=[8, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1061 = transpose(%1060, axes=[1, 0, 2]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1062 = copy(%1061) /* ty=Tensor[(600, 8, 32), float32] */;
  %1063 = reshape(%1062, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1064 = reshape(%1063, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1065 = transpose(%model.transformer.encoder.layers.1.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1066 = reshape(%1065, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1067 = broadcast_to(%1066, meta[relay.attrs.InitOpAttrs][14]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1068 = transpose(%1067, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1069 = nn.batch_matmul(%1064, %1068) /* ty=Tensor[(600, 1, 256), float32] */;
  %1070 = reshape(%1069, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1071 = add(%1070, %model.transformer.encoder.layers.1.self_attn.out_proj.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1072 = nn.dropout(%1071, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %1073 = %1072.0;
  %1074 = add(%996, %1073) /* ty=Tensor[(600, 1, 256), float32] */;
  %1075 = nn.layer_norm(%1074, %model.transformer.encoder.layers.1.norm1.weight, %model.transformer.encoder.layers.1.norm1.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1076 = reshape(%1075, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1077 = transpose(%model.transformer.encoder.layers.1.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %1078 = reshape(%1077, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %1079 = broadcast_to(%1078, meta[relay.attrs.InitOpAttrs][15]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %1080 = transpose(%1079, axes=[0, 2, 1]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %1081 = nn.batch_matmul(%1076, %1080) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1082 = reshape(%1081, newshape=[600, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1083 = add(%1082, %model.transformer.encoder.layers.1.linear1.bias) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1084 = nn.relu(%1083) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1085 = nn.dropout(%1084, rate=0.1f) /* ty=(Tensor[(600, 1, 2048), float32], Tensor[(600, 1, 2048), float32]) */;
  %1086 = %1085.0;
  %1087 = reshape(%1086, newshape=[-1, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1088 = transpose(%model.transformer.encoder.layers.1.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %1089 = reshape(%1088, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %1090 = broadcast_to(%1089, meta[relay.attrs.InitOpAttrs][16]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %1091 = transpose(%1090, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %1092 = nn.batch_matmul(%1087, %1091) /* ty=Tensor[(600, 1, 256), float32] */;
  %1093 = reshape(%1092, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1094 = add(%1093, %model.transformer.encoder.layers.1.linear2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1095 = nn.dropout(%1094, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %1096 = %1095.0;
  %1097 = add(%1075, %1096) /* ty=Tensor[(600, 1, 256), float32] */;
  %1098 = nn.layer_norm(%1097, %model.transformer.encoder.layers.1.norm2.weight, %model.transformer.encoder.layers.1.norm2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1099 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %1100 = expand_dims(%1099, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %1101 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1102 = add(%1098, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %1103 = reshape(%1102, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1104 = strided_slice(%model.transformer.encoder.layers.2.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1105 = strided_slice(%1104, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1106 = transpose(%1105, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1107 = reshape(%1106, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1108 = broadcast_to(%1107, meta[relay.attrs.InitOpAttrs][17]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1109 = transpose(%1108, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1110 = nn.batch_matmul(%1103, %1109) /* ty=Tensor[(600, 1, 256), float32] */;
  %1111 = reshape(%1110, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1112 = strided_slice(%model.transformer.encoder.layers.2.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1113 = add(%1111, %1112) /* ty=Tensor[(600, 1, 256), float32] */;
  %1114 = multiply(%1113, 0.176777f /* ty=float32 */) /* ty=Tensor[(600, 1, 256), float32] */;
  %1115 = copy(%1114) /* ty=Tensor[(600, 1, 256), float32] */;
  %1116 = reshape(%1115, newshape=[600, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1117 = transpose(%1116, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1118 = reshape(%1117, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1119 = reshape(%1102, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1120 = strided_slice(%model.transformer.encoder.layers.2.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1121 = strided_slice(%1120, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1122 = transpose(%1121, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1123 = reshape(%1122, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1124 = broadcast_to(%1123, meta[relay.attrs.InitOpAttrs][18]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1125 = transpose(%1124, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1126 = nn.batch_matmul(%1119, %1125) /* ty=Tensor[(600, 1, 256), float32] */;
  %1127 = reshape(%1126, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1128 = strided_slice(%model.transformer.encoder.layers.2.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1129 = add(%1127, %1128) /* ty=Tensor[(600, 1, 256), float32] */;
  %1130 = copy(%1129) /* ty=Tensor[(600, 1, 256), float32] */;
  %1131 = reshape(%1130, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1132 = transpose(%1131, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1133 = transpose(%1132, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1134 = reshape(%1133, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1135 = transpose(%1134, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1136 = nn.batch_matmul(%1118, %1135) /* ty=Tensor[(8, 600, 600), float32] */;
  %1137 = reshape(%1136, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1138 = reshape(%1137, newshape=[1, 8, 600, 600]) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %1139 = where(%1100, %1101, %1138) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %1140 = reshape(%1139, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1141 = nn.softmax(%1140) /* ty=Tensor[(8, 600, 600), float32] */;
  %1142 = nn.dropout(%1141, rate=0.1f) /* ty=(Tensor[(8, 600, 600), float32], Tensor[(8, 600, 600), float32]) */;
  %1143 = %1142.0;
  %1144 = reshape(%1143, newshape=[-1, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1145 = reshape(%1098, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1146 = strided_slice(%model.transformer.encoder.layers.2.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1147 = strided_slice(%1146, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1148 = transpose(%1147, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1149 = reshape(%1148, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1150 = broadcast_to(%1149, meta[relay.attrs.InitOpAttrs][19]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1151 = transpose(%1150, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1152 = nn.batch_matmul(%1145, %1151) /* ty=Tensor[(600, 1, 256), float32] */;
  %1153 = reshape(%1152, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1154 = strided_slice(%model.transformer.encoder.layers.2.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1155 = add(%1153, %1154) /* ty=Tensor[(600, 1, 256), float32] */;
  %1156 = copy(%1155) /* ty=Tensor[(600, 1, 256), float32] */;
  %1157 = reshape(%1156, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1158 = transpose(%1157, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1159 = reshape(%1158, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1160 = transpose(%1159, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1161 = nn.batch_matmul(%1144, %1160) /* ty=Tensor[(8, 600, 32), float32] */;
  %1162 = reshape(%1161, newshape=[8, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1163 = transpose(%1162, axes=[1, 0, 2]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1164 = copy(%1163) /* ty=Tensor[(600, 8, 32), float32] */;
  %1165 = reshape(%1164, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1166 = reshape(%1165, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1167 = transpose(%model.transformer.encoder.layers.2.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1168 = reshape(%1167, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1169 = broadcast_to(%1168, meta[relay.attrs.InitOpAttrs][20]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1170 = transpose(%1169, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1171 = nn.batch_matmul(%1166, %1170) /* ty=Tensor[(600, 1, 256), float32] */;
  %1172 = reshape(%1171, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1173 = add(%1172, %model.transformer.encoder.layers.2.self_attn.out_proj.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1174 = nn.dropout(%1173, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %1175 = %1174.0;
  %1176 = add(%1098, %1175) /* ty=Tensor[(600, 1, 256), float32] */;
  %1177 = nn.layer_norm(%1176, %model.transformer.encoder.layers.2.norm1.weight, %model.transformer.encoder.layers.2.norm1.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1178 = reshape(%1177, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1179 = transpose(%model.transformer.encoder.layers.2.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %1180 = reshape(%1179, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %1181 = broadcast_to(%1180, meta[relay.attrs.InitOpAttrs][21]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %1182 = transpose(%1181, axes=[0, 2, 1]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %1183 = nn.batch_matmul(%1178, %1182) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1184 = reshape(%1183, newshape=[600, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1185 = add(%1184, %model.transformer.encoder.layers.2.linear1.bias) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1186 = nn.relu(%1185) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1187 = nn.dropout(%1186, rate=0.1f) /* ty=(Tensor[(600, 1, 2048), float32], Tensor[(600, 1, 2048), float32]) */;
  %1188 = %1187.0;
  %1189 = reshape(%1188, newshape=[-1, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1190 = transpose(%model.transformer.encoder.layers.2.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %1191 = reshape(%1190, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %1192 = broadcast_to(%1191, meta[relay.attrs.InitOpAttrs][22]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %1193 = transpose(%1192, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %1194 = nn.batch_matmul(%1189, %1193) /* ty=Tensor[(600, 1, 256), float32] */;
  %1195 = reshape(%1194, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1196 = add(%1195, %model.transformer.encoder.layers.2.linear2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1197 = nn.dropout(%1196, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %1198 = %1197.0;
  %1199 = add(%1177, %1198) /* ty=Tensor[(600, 1, 256), float32] */;
  %1200 = nn.layer_norm(%1199, %model.transformer.encoder.layers.2.norm2.weight, %model.transformer.encoder.layers.2.norm2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1201 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %1202 = expand_dims(%1201, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %1203 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1204 = add(%1200, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %1205 = reshape(%1204, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1206 = strided_slice(%model.transformer.encoder.layers.3.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1207 = strided_slice(%1206, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1208 = transpose(%1207, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1209 = reshape(%1208, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1210 = broadcast_to(%1209, meta[relay.attrs.InitOpAttrs][23]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1211 = transpose(%1210, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1212 = nn.batch_matmul(%1205, %1211) /* ty=Tensor[(600, 1, 256), float32] */;
  %1213 = reshape(%1212, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1214 = strided_slice(%model.transformer.encoder.layers.3.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1215 = add(%1213, %1214) /* ty=Tensor[(600, 1, 256), float32] */;
  %1216 = multiply(%1215, 0.176777f /* ty=float32 */) /* ty=Tensor[(600, 1, 256), float32] */;
  %1217 = copy(%1216) /* ty=Tensor[(600, 1, 256), float32] */;
  %1218 = reshape(%1217, newshape=[600, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1219 = transpose(%1218, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1220 = reshape(%1219, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1221 = reshape(%1204, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1222 = strided_slice(%model.transformer.encoder.layers.3.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1223 = strided_slice(%1222, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1224 = transpose(%1223, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1225 = reshape(%1224, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1226 = broadcast_to(%1225, meta[relay.attrs.InitOpAttrs][24]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1227 = transpose(%1226, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1228 = nn.batch_matmul(%1221, %1227) /* ty=Tensor[(600, 1, 256), float32] */;
  %1229 = reshape(%1228, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1230 = strided_slice(%model.transformer.encoder.layers.3.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1231 = add(%1229, %1230) /* ty=Tensor[(600, 1, 256), float32] */;
  %1232 = copy(%1231) /* ty=Tensor[(600, 1, 256), float32] */;
  %1233 = reshape(%1232, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1234 = transpose(%1233, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1235 = transpose(%1234, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1236 = reshape(%1235, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1237 = transpose(%1236, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1238 = nn.batch_matmul(%1220, %1237) /* ty=Tensor[(8, 600, 600), float32] */;
  %1239 = reshape(%1238, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1240 = reshape(%1239, newshape=[1, 8, 600, 600]) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %1241 = where(%1202, %1203, %1240) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %1242 = reshape(%1241, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1243 = nn.softmax(%1242) /* ty=Tensor[(8, 600, 600), float32] */;
  %1244 = nn.dropout(%1243, rate=0.1f) /* ty=(Tensor[(8, 600, 600), float32], Tensor[(8, 600, 600), float32]) */;
  %1245 = %1244.0;
  %1246 = reshape(%1245, newshape=[-1, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1247 = reshape(%1200, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1248 = strided_slice(%model.transformer.encoder.layers.3.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1249 = strided_slice(%1248, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1250 = transpose(%1249, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1251 = reshape(%1250, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1252 = broadcast_to(%1251, meta[relay.attrs.InitOpAttrs][25]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1253 = transpose(%1252, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1254 = nn.batch_matmul(%1247, %1253) /* ty=Tensor[(600, 1, 256), float32] */;
  %1255 = reshape(%1254, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1256 = strided_slice(%model.transformer.encoder.layers.3.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1257 = add(%1255, %1256) /* ty=Tensor[(600, 1, 256), float32] */;
  %1258 = copy(%1257) /* ty=Tensor[(600, 1, 256), float32] */;
  %1259 = reshape(%1258, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1260 = transpose(%1259, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1261 = reshape(%1260, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1262 = transpose(%1261, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1263 = nn.batch_matmul(%1246, %1262) /* ty=Tensor[(8, 600, 32), float32] */;
  %1264 = reshape(%1263, newshape=[8, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1265 = transpose(%1264, axes=[1, 0, 2]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1266 = copy(%1265) /* ty=Tensor[(600, 8, 32), float32] */;
  %1267 = reshape(%1266, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1268 = reshape(%1267, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1269 = transpose(%model.transformer.encoder.layers.3.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1270 = reshape(%1269, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1271 = broadcast_to(%1270, meta[relay.attrs.InitOpAttrs][26]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1272 = transpose(%1271, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1273 = nn.batch_matmul(%1268, %1272) /* ty=Tensor[(600, 1, 256), float32] */;
  %1274 = reshape(%1273, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1275 = add(%1274, %model.transformer.encoder.layers.3.self_attn.out_proj.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1276 = nn.dropout(%1275, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %1277 = %1276.0;
  %1278 = add(%1200, %1277) /* ty=Tensor[(600, 1, 256), float32] */;
  %1279 = nn.layer_norm(%1278, %model.transformer.encoder.layers.3.norm1.weight, %model.transformer.encoder.layers.3.norm1.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1280 = reshape(%1279, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1281 = transpose(%model.transformer.encoder.layers.3.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %1282 = reshape(%1281, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %1283 = broadcast_to(%1282, meta[relay.attrs.InitOpAttrs][27]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %1284 = transpose(%1283, axes=[0, 2, 1]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %1285 = nn.batch_matmul(%1280, %1284) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1286 = reshape(%1285, newshape=[600, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1287 = add(%1286, %model.transformer.encoder.layers.3.linear1.bias) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1288 = nn.relu(%1287) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1289 = nn.dropout(%1288, rate=0.1f) /* ty=(Tensor[(600, 1, 2048), float32], Tensor[(600, 1, 2048), float32]) */;
  %1290 = %1289.0;
  %1291 = reshape(%1290, newshape=[-1, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1292 = transpose(%model.transformer.encoder.layers.3.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %1293 = reshape(%1292, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %1294 = broadcast_to(%1293, meta[relay.attrs.InitOpAttrs][28]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %1295 = transpose(%1294, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %1296 = nn.batch_matmul(%1291, %1295) /* ty=Tensor[(600, 1, 256), float32] */;
  %1297 = reshape(%1296, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1298 = add(%1297, %model.transformer.encoder.layers.3.linear2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1299 = nn.dropout(%1298, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %1300 = %1299.0;
  %1301 = add(%1279, %1300) /* ty=Tensor[(600, 1, 256), float32] */;
  %1302 = nn.layer_norm(%1301, %model.transformer.encoder.layers.3.norm2.weight, %model.transformer.encoder.layers.3.norm2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1303 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %1304 = expand_dims(%1303, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %1305 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1306 = add(%1302, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %1307 = reshape(%1306, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1308 = strided_slice(%model.transformer.encoder.layers.4.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1309 = strided_slice(%1308, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1310 = transpose(%1309, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1311 = reshape(%1310, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1312 = broadcast_to(%1311, meta[relay.attrs.InitOpAttrs][29]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1313 = transpose(%1312, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1314 = nn.batch_matmul(%1307, %1313) /* ty=Tensor[(600, 1, 256), float32] */;
  %1315 = reshape(%1314, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1316 = strided_slice(%model.transformer.encoder.layers.4.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1317 = add(%1315, %1316) /* ty=Tensor[(600, 1, 256), float32] */;
  %1318 = multiply(%1317, 0.176777f /* ty=float32 */) /* ty=Tensor[(600, 1, 256), float32] */;
  %1319 = copy(%1318) /* ty=Tensor[(600, 1, 256), float32] */;
  %1320 = reshape(%1319, newshape=[600, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1321 = transpose(%1320, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1322 = reshape(%1321, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1323 = reshape(%1306, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1324 = strided_slice(%model.transformer.encoder.layers.4.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1325 = strided_slice(%1324, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1326 = transpose(%1325, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1327 = reshape(%1326, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1328 = broadcast_to(%1327, meta[relay.attrs.InitOpAttrs][30]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1329 = transpose(%1328, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1330 = nn.batch_matmul(%1323, %1329) /* ty=Tensor[(600, 1, 256), float32] */;
  %1331 = reshape(%1330, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1332 = strided_slice(%model.transformer.encoder.layers.4.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1333 = add(%1331, %1332) /* ty=Tensor[(600, 1, 256), float32] */;
  %1334 = copy(%1333) /* ty=Tensor[(600, 1, 256), float32] */;
  %1335 = reshape(%1334, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1336 = transpose(%1335, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1337 = transpose(%1336, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1338 = reshape(%1337, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1339 = transpose(%1338, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1340 = nn.batch_matmul(%1322, %1339) /* ty=Tensor[(8, 600, 600), float32] */;
  %1341 = reshape(%1340, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1342 = reshape(%1341, newshape=[1, 8, 600, 600]) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %1343 = where(%1304, %1305, %1342) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %1344 = reshape(%1343, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1345 = nn.softmax(%1344) /* ty=Tensor[(8, 600, 600), float32] */;
  %1346 = nn.dropout(%1345, rate=0.1f) /* ty=(Tensor[(8, 600, 600), float32], Tensor[(8, 600, 600), float32]) */;
  %1347 = %1346.0;
  %1348 = reshape(%1347, newshape=[-1, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1349 = reshape(%1302, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1350 = strided_slice(%model.transformer.encoder.layers.4.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1351 = strided_slice(%1350, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1352 = transpose(%1351, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1353 = reshape(%1352, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1354 = broadcast_to(%1353, meta[relay.attrs.InitOpAttrs][31]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1355 = transpose(%1354, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1356 = nn.batch_matmul(%1349, %1355) /* ty=Tensor[(600, 1, 256), float32] */;
  %1357 = reshape(%1356, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1358 = strided_slice(%model.transformer.encoder.layers.4.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1359 = add(%1357, %1358) /* ty=Tensor[(600, 1, 256), float32] */;
  %1360 = copy(%1359) /* ty=Tensor[(600, 1, 256), float32] */;
  %1361 = reshape(%1360, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1362 = transpose(%1361, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1363 = reshape(%1362, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1364 = transpose(%1363, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1365 = nn.batch_matmul(%1348, %1364) /* ty=Tensor[(8, 600, 32), float32] */;
  %1366 = reshape(%1365, newshape=[8, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1367 = transpose(%1366, axes=[1, 0, 2]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1368 = copy(%1367) /* ty=Tensor[(600, 8, 32), float32] */;
  %1369 = reshape(%1368, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1370 = reshape(%1369, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1371 = transpose(%model.transformer.encoder.layers.4.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1372 = reshape(%1371, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1373 = broadcast_to(%1372, meta[relay.attrs.InitOpAttrs][32]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1374 = transpose(%1373, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1375 = nn.batch_matmul(%1370, %1374) /* ty=Tensor[(600, 1, 256), float32] */;
  %1376 = reshape(%1375, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1377 = add(%1376, %model.transformer.encoder.layers.4.self_attn.out_proj.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1378 = nn.dropout(%1377, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %1379 = %1378.0;
  %1380 = add(%1302, %1379) /* ty=Tensor[(600, 1, 256), float32] */;
  %1381 = nn.layer_norm(%1380, %model.transformer.encoder.layers.4.norm1.weight, %model.transformer.encoder.layers.4.norm1.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1382 = reshape(%1381, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1383 = transpose(%model.transformer.encoder.layers.4.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %1384 = reshape(%1383, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %1385 = broadcast_to(%1384, meta[relay.attrs.InitOpAttrs][33]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %1386 = transpose(%1385, axes=[0, 2, 1]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %1387 = nn.batch_matmul(%1382, %1386) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1388 = reshape(%1387, newshape=[600, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1389 = add(%1388, %model.transformer.encoder.layers.4.linear1.bias) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1390 = nn.relu(%1389) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1391 = nn.dropout(%1390, rate=0.1f) /* ty=(Tensor[(600, 1, 2048), float32], Tensor[(600, 1, 2048), float32]) */;
  %1392 = %1391.0;
  %1393 = reshape(%1392, newshape=[-1, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1394 = transpose(%model.transformer.encoder.layers.4.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %1395 = reshape(%1394, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %1396 = broadcast_to(%1395, meta[relay.attrs.InitOpAttrs][34]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %1397 = transpose(%1396, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %1398 = nn.batch_matmul(%1393, %1397) /* ty=Tensor[(600, 1, 256), float32] */;
  %1399 = reshape(%1398, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1400 = add(%1399, %model.transformer.encoder.layers.4.linear2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1401 = nn.dropout(%1400, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %1402 = %1401.0;
  %1403 = add(%1381, %1402) /* ty=Tensor[(600, 1, 256), float32] */;
  %1404 = nn.layer_norm(%1403, %model.transformer.encoder.layers.4.norm2.weight, %model.transformer.encoder.layers.4.norm2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1405 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %1406 = expand_dims(%1405, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %1407 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1408 = add(%1404, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %1409 = reshape(%1408, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1410 = strided_slice(%model.transformer.encoder.layers.5.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1411 = strided_slice(%1410, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1412 = transpose(%1411, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1413 = reshape(%1412, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1414 = broadcast_to(%1413, meta[relay.attrs.InitOpAttrs][35]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1415 = transpose(%1414, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1416 = nn.batch_matmul(%1409, %1415) /* ty=Tensor[(600, 1, 256), float32] */;
  %1417 = reshape(%1416, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1418 = strided_slice(%model.transformer.encoder.layers.5.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1419 = add(%1417, %1418) /* ty=Tensor[(600, 1, 256), float32] */;
  %1420 = multiply(%1419, 0.176777f /* ty=float32 */) /* ty=Tensor[(600, 1, 256), float32] */;
  %1421 = copy(%1420) /* ty=Tensor[(600, 1, 256), float32] */;
  %1422 = reshape(%1421, newshape=[600, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1423 = transpose(%1422, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1424 = reshape(%1423, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1425 = reshape(%1408, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1426 = strided_slice(%model.transformer.encoder.layers.5.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1427 = strided_slice(%1426, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1428 = transpose(%1427, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1429 = reshape(%1428, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1430 = broadcast_to(%1429, meta[relay.attrs.InitOpAttrs][36]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1431 = transpose(%1430, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1432 = nn.batch_matmul(%1425, %1431) /* ty=Tensor[(600, 1, 256), float32] */;
  %1433 = reshape(%1432, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1434 = strided_slice(%model.transformer.encoder.layers.5.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1435 = add(%1433, %1434) /* ty=Tensor[(600, 1, 256), float32] */;
  %1436 = copy(%1435) /* ty=Tensor[(600, 1, 256), float32] */;
  %1437 = reshape(%1436, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1438 = transpose(%1437, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1439 = transpose(%1438, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1440 = reshape(%1439, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1441 = transpose(%1440, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1442 = nn.batch_matmul(%1424, %1441) /* ty=Tensor[(8, 600, 600), float32] */;
  %1443 = reshape(%1442, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1444 = reshape(%1443, newshape=[1, 8, 600, 600]) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %1445 = where(%1406, %1407, %1444) /* ty=Tensor[(1, 8, 600, 600), float32] */;
  %1446 = reshape(%1445, newshape=[8, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1447 = nn.softmax(%1446) /* ty=Tensor[(8, 600, 600), float32] */;
  %1448 = nn.dropout(%1447, rate=0.1f) /* ty=(Tensor[(8, 600, 600), float32], Tensor[(8, 600, 600), float32]) */;
  %1449 = %1448.0;
  %1450 = reshape(%1449, newshape=[-1, 600, 600]) /* ty=Tensor[(8, 600, 600), float32] */;
  %1451 = reshape(%1404, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1452 = strided_slice(%model.transformer.encoder.layers.5.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1453 = strided_slice(%1452, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1454 = transpose(%1453, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1455 = reshape(%1454, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1456 = broadcast_to(%1455, meta[relay.attrs.InitOpAttrs][37]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1457 = transpose(%1456, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1458 = nn.batch_matmul(%1451, %1457) /* ty=Tensor[(600, 1, 256), float32] */;
  %1459 = reshape(%1458, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1460 = strided_slice(%model.transformer.encoder.layers.5.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1461 = add(%1459, %1460) /* ty=Tensor[(600, 1, 256), float32] */;
  %1462 = copy(%1461) /* ty=Tensor[(600, 1, 256), float32] */;
  %1463 = reshape(%1462, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1464 = transpose(%1463, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1465 = reshape(%1464, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1466 = transpose(%1465, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1467 = nn.batch_matmul(%1450, %1466) /* ty=Tensor[(8, 600, 32), float32] */;
  %1468 = reshape(%1467, newshape=[8, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1469 = transpose(%1468, axes=[1, 0, 2]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1470 = copy(%1469) /* ty=Tensor[(600, 8, 32), float32] */;
  %1471 = reshape(%1470, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1472 = reshape(%1471, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1473 = transpose(%model.transformer.encoder.layers.5.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1474 = reshape(%1473, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1475 = broadcast_to(%1474, meta[relay.attrs.InitOpAttrs][38]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1476 = transpose(%1475, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1477 = nn.batch_matmul(%1472, %1476) /* ty=Tensor[(600, 1, 256), float32] */;
  %1478 = reshape(%1477, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1479 = add(%1478, %model.transformer.encoder.layers.5.self_attn.out_proj.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1480 = nn.dropout(%1479, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %1481 = %1480.0;
  %1482 = add(%1404, %1481) /* ty=Tensor[(600, 1, 256), float32] */;
  %1483 = nn.layer_norm(%1482, %model.transformer.encoder.layers.5.norm1.weight, %model.transformer.encoder.layers.5.norm1.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1484 = reshape(%1483, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1485 = transpose(%model.transformer.encoder.layers.5.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %1486 = reshape(%1485, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %1487 = broadcast_to(%1486, meta[relay.attrs.InitOpAttrs][39]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %1488 = transpose(%1487, axes=[0, 2, 1]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %1489 = nn.batch_matmul(%1484, %1488) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1490 = reshape(%1489, newshape=[600, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1491 = add(%1490, %model.transformer.encoder.layers.5.linear1.bias) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1492 = nn.relu(%1491) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1493 = nn.dropout(%1492, rate=0.1f) /* ty=(Tensor[(600, 1, 2048), float32], Tensor[(600, 1, 2048), float32]) */;
  %1494 = %1493.0;
  %1495 = reshape(%1494, newshape=[-1, 1, 2048]) /* ty=Tensor[(600, 1, 2048), float32] */;
  %1496 = transpose(%model.transformer.encoder.layers.5.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %1497 = reshape(%1496, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %1498 = broadcast_to(%1497, meta[relay.attrs.InitOpAttrs][40]) /* ty=Tensor[(600, 2048, 256), float32] */;
  %1499 = transpose(%1498, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 2048), float32] */;
  %1500 = nn.batch_matmul(%1495, %1499) /* ty=Tensor[(600, 1, 256), float32] */;
  %1501 = reshape(%1500, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1502 = add(%1501, %model.transformer.encoder.layers.5.linear2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1503 = nn.dropout(%1502, rate=0.1f) /* ty=(Tensor[(600, 1, 256), float32], Tensor[(600, 1, 256), float32]) */;
  %1504 = %1503.0;
  %1505 = add(%1483, %1504) /* ty=Tensor[(600, 1, 256), float32] */;
  %1506 = nn.layer_norm(%1505, %model.transformer.encoder.layers.5.norm2.weight, %model.transformer.encoder.layers.5.norm2.bias) /* ty=Tensor[(600, 1, 256), float32] */;
  %1507 = add(%1506, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %1508 = reshape(%1507, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1509 = strided_slice(%model.transformer.decoder.layers.0.multihead_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1510 = strided_slice(%1509, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1511 = transpose(%1510, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1512 = reshape(%1511, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1513 = broadcast_to(%1512, meta[relay.attrs.InitOpAttrs][41]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1514 = transpose(%1513, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1515 = nn.batch_matmul(%1508, %1514) /* ty=Tensor[(600, 1, 256), float32] */;
  %1516 = reshape(%1515, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1517 = strided_slice(%model.transformer.decoder.layers.0.multihead_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1518 = add(%1516, %1517) /* ty=Tensor[(600, 1, 256), float32] */;
  %1519 = copy(%1518) /* ty=Tensor[(600, 1, 256), float32] */;
  %1520 = reshape(%1519, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1521 = transpose(%1520, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1522 = transpose(%1521, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1523 = reshape(%1522, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1524 = transpose(%1523, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1525 = nn.batch_matmul(%884, %1524) /* ty=Tensor[(8, 100, 600), float32] */;
  %1526 = reshape(%1525, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %1527 = reshape(%1526, newshape=[1, 8, 100, 600]) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %1528 = where(%866, %867, %1527) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %1529 = reshape(%1528, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %1530 = nn.softmax(%1529) /* ty=Tensor[(8, 100, 600), float32] */;
  %1531 = nn.dropout(%1530, rate=0.1f) /* ty=(Tensor[(8, 100, 600), float32], Tensor[(8, 100, 600), float32]) */;
  %1532 = %1531.0;
  %1533 = reshape(%1532, newshape=[-1, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %1534 = reshape(%1506, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1535 = strided_slice(%model.transformer.decoder.layers.0.multihead_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1536 = strided_slice(%1535, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1537 = transpose(%1536, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1538 = reshape(%1537, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1539 = broadcast_to(%1538, meta[relay.attrs.InitOpAttrs][42]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1540 = transpose(%1539, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1541 = nn.batch_matmul(%1534, %1540) /* ty=Tensor[(600, 1, 256), float32] */;
  %1542 = reshape(%1541, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1543 = strided_slice(%model.transformer.decoder.layers.0.multihead_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1544 = add(%1542, %1543) /* ty=Tensor[(600, 1, 256), float32] */;
  %1545 = copy(%1544) /* ty=Tensor[(600, 1, 256), float32] */;
  %1546 = reshape(%1545, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1547 = transpose(%1546, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1548 = reshape(%1547, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1549 = transpose(%1548, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1550 = nn.batch_matmul(%1533, %1549) /* ty=Tensor[(8, 100, 32), float32] */;
  %1551 = reshape(%1550, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1552 = transpose(%1551, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1553 = copy(%1552) /* ty=Tensor[(100, 8, 32), float32] */;
  %1554 = reshape(%1553, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1555 = reshape(%1554, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1556 = transpose(%model.transformer.decoder.layers.0.multihead_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1557 = reshape(%1556, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1558 = broadcast_to(%1557, meta[relay.attrs.InitOpAttrs][43]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1559 = transpose(%1558, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1560 = nn.batch_matmul(%1555, %1559) /* ty=Tensor[(100, 1, 256), float32] */;
  %1561 = reshape(%1560, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1562 = add(%1561, %model.transformer.decoder.layers.0.multihead_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1563 = nn.dropout(%1562, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %1564 = %1563.0;
  %1565 = add(%75, %1564) /* ty=Tensor[(100, 1, 256), float32] */;
  %1566 = nn.layer_norm(%1565, %model.transformer.decoder.layers.0.norm2.weight, %model.transformer.decoder.layers.0.norm2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1567 = reshape(%1566, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1568 = transpose(%model.transformer.decoder.layers.0.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %1569 = reshape(%1568, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %1570 = broadcast_to(%1569, meta[relay.attrs.InitOpAttrs][44]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %1571 = transpose(%1570, axes=[0, 2, 1]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %1572 = nn.batch_matmul(%1567, %1571) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1573 = reshape(%1572, newshape=[100, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1574 = add(%1573, %model.transformer.decoder.layers.0.linear1.bias) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1575 = nn.relu(%1574) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1576 = nn.dropout(%1575, rate=0.1f) /* ty=(Tensor[(100, 1, 2048), float32], Tensor[(100, 1, 2048), float32]) */;
  %1577 = %1576.0;
  %1578 = reshape(%1577, newshape=[-1, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1579 = transpose(%model.transformer.decoder.layers.0.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %1580 = reshape(%1579, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %1581 = broadcast_to(%1580, meta[relay.attrs.InitOpAttrs][45]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %1582 = transpose(%1581, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %1583 = nn.batch_matmul(%1578, %1582) /* ty=Tensor[(100, 1, 256), float32] */;
  %1584 = reshape(%1583, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1585 = add(%1584, %model.transformer.decoder.layers.0.linear2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1586 = nn.dropout(%1585, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %1587 = %1586.0;
  %1588 = add(%1566, %1587) /* ty=Tensor[(100, 1, 256), float32] */;
  %1589 = nn.layer_norm(%1588, %model.transformer.decoder.layers.0.norm3.weight, %model.transformer.decoder.layers.0.norm3.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1590 = nn.layer_norm(%1589, %model.transformer.decoder.norm.weight, %model.transformer.decoder.norm.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1591 = add(%1589, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %1592 = reshape(%1591, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1593 = strided_slice(%model.transformer.decoder.layers.1.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1594 = strided_slice(%1593, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1595 = transpose(%1594, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1596 = reshape(%1595, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1597 = broadcast_to(%1596, meta[relay.attrs.InitOpAttrs][46]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1598 = transpose(%1597, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1599 = nn.batch_matmul(%1592, %1598) /* ty=Tensor[(100, 1, 256), float32] */;
  %1600 = reshape(%1599, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1601 = strided_slice(%model.transformer.decoder.layers.1.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1602 = add(%1600, %1601) /* ty=Tensor[(100, 1, 256), float32] */;
  %1603 = multiply(%1602, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %1604 = copy(%1603) /* ty=Tensor[(100, 1, 256), float32] */;
  %1605 = reshape(%1604, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1606 = transpose(%1605, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1607 = reshape(%1606, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1608 = reshape(%1591, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1609 = strided_slice(%model.transformer.decoder.layers.1.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1610 = strided_slice(%1609, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1611 = transpose(%1610, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1612 = reshape(%1611, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1613 = broadcast_to(%1612, meta[relay.attrs.InitOpAttrs][47]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1614 = transpose(%1613, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1615 = nn.batch_matmul(%1608, %1614) /* ty=Tensor[(100, 1, 256), float32] */;
  %1616 = reshape(%1615, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1617 = strided_slice(%model.transformer.decoder.layers.1.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1618 = add(%1616, %1617) /* ty=Tensor[(100, 1, 256), float32] */;
  %1619 = copy(%1618) /* ty=Tensor[(100, 1, 256), float32] */;
  %1620 = reshape(%1619, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1621 = transpose(%1620, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1622 = transpose(%1621, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %1623 = reshape(%1622, newshape=[-1, 32, 100]) /* ty=Tensor[(8, 32, 100), float32] */;
  %1624 = transpose(%1623, axes=[0, 2, 1]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1625 = nn.batch_matmul(%1607, %1624) /* ty=Tensor[(8, 100, 100), float32] */;
  %1626 = reshape(%1625, newshape=[8, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %1627 = nn.softmax(%1626) /* ty=Tensor[(8, 100, 100), float32] */;
  %1628 = nn.dropout(%1627, rate=0.1f) /* ty=(Tensor[(8, 100, 100), float32], Tensor[(8, 100, 100), float32]) */;
  %1629 = %1628.0;
  %1630 = reshape(%1629, newshape=[-1, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %1631 = reshape(%1589, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1632 = strided_slice(%model.transformer.decoder.layers.1.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1633 = strided_slice(%1632, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1634 = transpose(%1633, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1635 = reshape(%1634, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1636 = broadcast_to(%1635, meta[relay.attrs.InitOpAttrs][48]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1637 = transpose(%1636, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1638 = nn.batch_matmul(%1631, %1637) /* ty=Tensor[(100, 1, 256), float32] */;
  %1639 = reshape(%1638, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1640 = strided_slice(%model.transformer.decoder.layers.1.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1641 = add(%1639, %1640) /* ty=Tensor[(100, 1, 256), float32] */;
  %1642 = copy(%1641) /* ty=Tensor[(100, 1, 256), float32] */;
  %1643 = reshape(%1642, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1644 = transpose(%1643, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1645 = reshape(%1644, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1646 = transpose(%1645, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %1647 = nn.batch_matmul(%1630, %1646) /* ty=Tensor[(8, 100, 32), float32] */;
  %1648 = reshape(%1647, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1649 = transpose(%1648, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1650 = copy(%1649) /* ty=Tensor[(100, 8, 32), float32] */;
  %1651 = reshape(%1650, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1652 = reshape(%1651, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1653 = transpose(%model.transformer.decoder.layers.1.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1654 = reshape(%1653, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1655 = broadcast_to(%1654, meta[relay.attrs.InitOpAttrs][49]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1656 = transpose(%1655, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1657 = nn.batch_matmul(%1652, %1656) /* ty=Tensor[(100, 1, 256), float32] */;
  %1658 = reshape(%1657, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1659 = add(%1658, %model.transformer.decoder.layers.1.self_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1660 = nn.dropout(%1659, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %1661 = %1660.0;
  %1662 = add(%1589, %1661) /* ty=Tensor[(100, 1, 256), float32] */;
  %1663 = nn.layer_norm(%1662, %model.transformer.decoder.layers.1.norm1.weight, %model.transformer.decoder.layers.1.norm1.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1664 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %1665 = expand_dims(%1664, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %1666 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1667 = add(%1663, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %1668 = reshape(%1667, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1669 = strided_slice(%model.transformer.decoder.layers.1.multihead_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1670 = strided_slice(%1669, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1671 = transpose(%1670, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1672 = reshape(%1671, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1673 = broadcast_to(%1672, meta[relay.attrs.InitOpAttrs][50]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1674 = transpose(%1673, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1675 = nn.batch_matmul(%1668, %1674) /* ty=Tensor[(100, 1, 256), float32] */;
  %1676 = reshape(%1675, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1677 = strided_slice(%model.transformer.decoder.layers.1.multihead_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1678 = add(%1676, %1677) /* ty=Tensor[(100, 1, 256), float32] */;
  %1679 = multiply(%1678, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %1680 = copy(%1679) /* ty=Tensor[(100, 1, 256), float32] */;
  %1681 = reshape(%1680, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1682 = transpose(%1681, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1683 = reshape(%1682, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1684 = add(%1506, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %1685 = reshape(%1684, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1686 = strided_slice(%model.transformer.decoder.layers.1.multihead_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1687 = strided_slice(%1686, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1688 = transpose(%1687, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1689 = reshape(%1688, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1690 = broadcast_to(%1689, meta[relay.attrs.InitOpAttrs][51]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1691 = transpose(%1690, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1692 = nn.batch_matmul(%1685, %1691) /* ty=Tensor[(600, 1, 256), float32] */;
  %1693 = reshape(%1692, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1694 = strided_slice(%model.transformer.decoder.layers.1.multihead_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1695 = add(%1693, %1694) /* ty=Tensor[(600, 1, 256), float32] */;
  %1696 = copy(%1695) /* ty=Tensor[(600, 1, 256), float32] */;
  %1697 = reshape(%1696, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1698 = transpose(%1697, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1699 = transpose(%1698, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1700 = reshape(%1699, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1701 = transpose(%1700, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1702 = nn.batch_matmul(%1683, %1701) /* ty=Tensor[(8, 100, 600), float32] */;
  %1703 = reshape(%1702, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %1704 = reshape(%1703, newshape=[1, 8, 100, 600]) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %1705 = where(%1665, %1666, %1704) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %1706 = reshape(%1705, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %1707 = nn.softmax(%1706) /* ty=Tensor[(8, 100, 600), float32] */;
  %1708 = nn.dropout(%1707, rate=0.1f) /* ty=(Tensor[(8, 100, 600), float32], Tensor[(8, 100, 600), float32]) */;
  %1709 = %1708.0;
  %1710 = reshape(%1709, newshape=[-1, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %1711 = reshape(%1506, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1712 = strided_slice(%model.transformer.decoder.layers.1.multihead_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1713 = strided_slice(%1712, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1714 = transpose(%1713, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1715 = reshape(%1714, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1716 = broadcast_to(%1715, meta[relay.attrs.InitOpAttrs][52]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1717 = transpose(%1716, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1718 = nn.batch_matmul(%1711, %1717) /* ty=Tensor[(600, 1, 256), float32] */;
  %1719 = reshape(%1718, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1720 = strided_slice(%model.transformer.decoder.layers.1.multihead_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1721 = add(%1719, %1720) /* ty=Tensor[(600, 1, 256), float32] */;
  %1722 = copy(%1721) /* ty=Tensor[(600, 1, 256), float32] */;
  %1723 = reshape(%1722, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1724 = transpose(%1723, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1725 = reshape(%1724, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1726 = transpose(%1725, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1727 = nn.batch_matmul(%1710, %1726) /* ty=Tensor[(8, 100, 32), float32] */;
  %1728 = reshape(%1727, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1729 = transpose(%1728, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1730 = copy(%1729) /* ty=Tensor[(100, 8, 32), float32] */;
  %1731 = reshape(%1730, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1732 = reshape(%1731, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1733 = transpose(%model.transformer.decoder.layers.1.multihead_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1734 = reshape(%1733, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1735 = broadcast_to(%1734, meta[relay.attrs.InitOpAttrs][53]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1736 = transpose(%1735, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1737 = nn.batch_matmul(%1732, %1736) /* ty=Tensor[(100, 1, 256), float32] */;
  %1738 = reshape(%1737, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1739 = add(%1738, %model.transformer.decoder.layers.1.multihead_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1740 = nn.dropout(%1739, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %1741 = %1740.0;
  %1742 = add(%1663, %1741) /* ty=Tensor[(100, 1, 256), float32] */;
  %1743 = nn.layer_norm(%1742, %model.transformer.decoder.layers.1.norm2.weight, %model.transformer.decoder.layers.1.norm2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1744 = reshape(%1743, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1745 = transpose(%model.transformer.decoder.layers.1.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %1746 = reshape(%1745, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %1747 = broadcast_to(%1746, meta[relay.attrs.InitOpAttrs][54]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %1748 = transpose(%1747, axes=[0, 2, 1]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %1749 = nn.batch_matmul(%1744, %1748) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1750 = reshape(%1749, newshape=[100, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1751 = add(%1750, %model.transformer.decoder.layers.1.linear1.bias) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1752 = nn.relu(%1751) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1753 = nn.dropout(%1752, rate=0.1f) /* ty=(Tensor[(100, 1, 2048), float32], Tensor[(100, 1, 2048), float32]) */;
  %1754 = %1753.0;
  %1755 = reshape(%1754, newshape=[-1, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1756 = transpose(%model.transformer.decoder.layers.1.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %1757 = reshape(%1756, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %1758 = broadcast_to(%1757, meta[relay.attrs.InitOpAttrs][55]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %1759 = transpose(%1758, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %1760 = nn.batch_matmul(%1755, %1759) /* ty=Tensor[(100, 1, 256), float32] */;
  %1761 = reshape(%1760, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1762 = add(%1761, %model.transformer.decoder.layers.1.linear2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1763 = nn.dropout(%1762, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %1764 = %1763.0;
  %1765 = add(%1743, %1764) /* ty=Tensor[(100, 1, 256), float32] */;
  %1766 = nn.layer_norm(%1765, %model.transformer.decoder.layers.1.norm3.weight, %model.transformer.decoder.layers.1.norm3.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1767 = nn.layer_norm(%1766, %model.transformer.decoder.norm.weight, %model.transformer.decoder.norm.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1768 = add(%1766, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %1769 = reshape(%1768, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1770 = strided_slice(%model.transformer.decoder.layers.2.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1771 = strided_slice(%1770, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1772 = transpose(%1771, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1773 = reshape(%1772, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1774 = broadcast_to(%1773, meta[relay.attrs.InitOpAttrs][56]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1775 = transpose(%1774, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1776 = nn.batch_matmul(%1769, %1775) /* ty=Tensor[(100, 1, 256), float32] */;
  %1777 = reshape(%1776, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1778 = strided_slice(%model.transformer.decoder.layers.2.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1779 = add(%1777, %1778) /* ty=Tensor[(100, 1, 256), float32] */;
  %1780 = multiply(%1779, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %1781 = copy(%1780) /* ty=Tensor[(100, 1, 256), float32] */;
  %1782 = reshape(%1781, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1783 = transpose(%1782, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1784 = reshape(%1783, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1785 = reshape(%1768, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1786 = strided_slice(%model.transformer.decoder.layers.2.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1787 = strided_slice(%1786, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1788 = transpose(%1787, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1789 = reshape(%1788, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1790 = broadcast_to(%1789, meta[relay.attrs.InitOpAttrs][57]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1791 = transpose(%1790, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1792 = nn.batch_matmul(%1785, %1791) /* ty=Tensor[(100, 1, 256), float32] */;
  %1793 = reshape(%1792, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1794 = strided_slice(%model.transformer.decoder.layers.2.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1795 = add(%1793, %1794) /* ty=Tensor[(100, 1, 256), float32] */;
  %1796 = copy(%1795) /* ty=Tensor[(100, 1, 256), float32] */;
  %1797 = reshape(%1796, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1798 = transpose(%1797, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1799 = transpose(%1798, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %1800 = reshape(%1799, newshape=[-1, 32, 100]) /* ty=Tensor[(8, 32, 100), float32] */;
  %1801 = transpose(%1800, axes=[0, 2, 1]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1802 = nn.batch_matmul(%1784, %1801) /* ty=Tensor[(8, 100, 100), float32] */;
  %1803 = reshape(%1802, newshape=[8, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %1804 = nn.softmax(%1803) /* ty=Tensor[(8, 100, 100), float32] */;
  %1805 = nn.dropout(%1804, rate=0.1f) /* ty=(Tensor[(8, 100, 100), float32], Tensor[(8, 100, 100), float32]) */;
  %1806 = %1805.0;
  %1807 = reshape(%1806, newshape=[-1, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %1808 = reshape(%1766, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1809 = strided_slice(%model.transformer.decoder.layers.2.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1810 = strided_slice(%1809, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1811 = transpose(%1810, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1812 = reshape(%1811, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1813 = broadcast_to(%1812, meta[relay.attrs.InitOpAttrs][58]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1814 = transpose(%1813, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1815 = nn.batch_matmul(%1808, %1814) /* ty=Tensor[(100, 1, 256), float32] */;
  %1816 = reshape(%1815, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1817 = strided_slice(%model.transformer.decoder.layers.2.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1818 = add(%1816, %1817) /* ty=Tensor[(100, 1, 256), float32] */;
  %1819 = copy(%1818) /* ty=Tensor[(100, 1, 256), float32] */;
  %1820 = reshape(%1819, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1821 = transpose(%1820, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1822 = reshape(%1821, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1823 = transpose(%1822, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %1824 = nn.batch_matmul(%1807, %1823) /* ty=Tensor[(8, 100, 32), float32] */;
  %1825 = reshape(%1824, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1826 = transpose(%1825, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1827 = copy(%1826) /* ty=Tensor[(100, 8, 32), float32] */;
  %1828 = reshape(%1827, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1829 = reshape(%1828, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1830 = transpose(%model.transformer.decoder.layers.2.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1831 = reshape(%1830, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1832 = broadcast_to(%1831, meta[relay.attrs.InitOpAttrs][59]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1833 = transpose(%1832, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1834 = nn.batch_matmul(%1829, %1833) /* ty=Tensor[(100, 1, 256), float32] */;
  %1835 = reshape(%1834, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1836 = add(%1835, %model.transformer.decoder.layers.2.self_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1837 = nn.dropout(%1836, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %1838 = %1837.0;
  %1839 = add(%1766, %1838) /* ty=Tensor[(100, 1, 256), float32] */;
  %1840 = nn.layer_norm(%1839, %model.transformer.decoder.layers.2.norm1.weight, %model.transformer.decoder.layers.2.norm1.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1841 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %1842 = expand_dims(%1841, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %1843 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1844 = add(%1840, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %1845 = reshape(%1844, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1846 = strided_slice(%model.transformer.decoder.layers.2.multihead_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1847 = strided_slice(%1846, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1848 = transpose(%1847, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1849 = reshape(%1848, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1850 = broadcast_to(%1849, meta[relay.attrs.InitOpAttrs][60]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1851 = transpose(%1850, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1852 = nn.batch_matmul(%1845, %1851) /* ty=Tensor[(100, 1, 256), float32] */;
  %1853 = reshape(%1852, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1854 = strided_slice(%model.transformer.decoder.layers.2.multihead_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1855 = add(%1853, %1854) /* ty=Tensor[(100, 1, 256), float32] */;
  %1856 = multiply(%1855, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %1857 = copy(%1856) /* ty=Tensor[(100, 1, 256), float32] */;
  %1858 = reshape(%1857, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1859 = transpose(%1858, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1860 = reshape(%1859, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1861 = add(%1506, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %1862 = reshape(%1861, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1863 = strided_slice(%model.transformer.decoder.layers.2.multihead_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1864 = strided_slice(%1863, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1865 = transpose(%1864, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1866 = reshape(%1865, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1867 = broadcast_to(%1866, meta[relay.attrs.InitOpAttrs][61]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1868 = transpose(%1867, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1869 = nn.batch_matmul(%1862, %1868) /* ty=Tensor[(600, 1, 256), float32] */;
  %1870 = reshape(%1869, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1871 = strided_slice(%model.transformer.decoder.layers.2.multihead_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1872 = add(%1870, %1871) /* ty=Tensor[(600, 1, 256), float32] */;
  %1873 = copy(%1872) /* ty=Tensor[(600, 1, 256), float32] */;
  %1874 = reshape(%1873, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1875 = transpose(%1874, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1876 = transpose(%1875, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1877 = reshape(%1876, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1878 = transpose(%1877, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1879 = nn.batch_matmul(%1860, %1878) /* ty=Tensor[(8, 100, 600), float32] */;
  %1880 = reshape(%1879, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %1881 = reshape(%1880, newshape=[1, 8, 100, 600]) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %1882 = where(%1842, %1843, %1881) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %1883 = reshape(%1882, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %1884 = nn.softmax(%1883) /* ty=Tensor[(8, 100, 600), float32] */;
  %1885 = nn.dropout(%1884, rate=0.1f) /* ty=(Tensor[(8, 100, 600), float32], Tensor[(8, 100, 600), float32]) */;
  %1886 = %1885.0;
  %1887 = reshape(%1886, newshape=[-1, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %1888 = reshape(%1506, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1889 = strided_slice(%model.transformer.decoder.layers.2.multihead_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1890 = strided_slice(%1889, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1891 = transpose(%1890, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1892 = reshape(%1891, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1893 = broadcast_to(%1892, meta[relay.attrs.InitOpAttrs][62]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1894 = transpose(%1893, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %1895 = nn.batch_matmul(%1888, %1894) /* ty=Tensor[(600, 1, 256), float32] */;
  %1896 = reshape(%1895, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %1897 = strided_slice(%model.transformer.decoder.layers.2.multihead_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1898 = add(%1896, %1897) /* ty=Tensor[(600, 1, 256), float32] */;
  %1899 = copy(%1898) /* ty=Tensor[(600, 1, 256), float32] */;
  %1900 = reshape(%1899, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %1901 = transpose(%1900, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1902 = reshape(%1901, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %1903 = transpose(%1902, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %1904 = nn.batch_matmul(%1887, %1903) /* ty=Tensor[(8, 100, 32), float32] */;
  %1905 = reshape(%1904, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1906 = transpose(%1905, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1907 = copy(%1906) /* ty=Tensor[(100, 8, 32), float32] */;
  %1908 = reshape(%1907, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1909 = reshape(%1908, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1910 = transpose(%model.transformer.decoder.layers.2.multihead_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1911 = reshape(%1910, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1912 = broadcast_to(%1911, meta[relay.attrs.InitOpAttrs][63]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1913 = transpose(%1912, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1914 = nn.batch_matmul(%1909, %1913) /* ty=Tensor[(100, 1, 256), float32] */;
  %1915 = reshape(%1914, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1916 = add(%1915, %model.transformer.decoder.layers.2.multihead_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1917 = nn.dropout(%1916, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %1918 = %1917.0;
  %1919 = add(%1840, %1918) /* ty=Tensor[(100, 1, 256), float32] */;
  %1920 = nn.layer_norm(%1919, %model.transformer.decoder.layers.2.norm2.weight, %model.transformer.decoder.layers.2.norm2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1921 = reshape(%1920, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1922 = transpose(%model.transformer.decoder.layers.2.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %1923 = reshape(%1922, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %1924 = broadcast_to(%1923, meta[relay.attrs.InitOpAttrs][64]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %1925 = transpose(%1924, axes=[0, 2, 1]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %1926 = nn.batch_matmul(%1921, %1925) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1927 = reshape(%1926, newshape=[100, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1928 = add(%1927, %model.transformer.decoder.layers.2.linear1.bias) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1929 = nn.relu(%1928) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1930 = nn.dropout(%1929, rate=0.1f) /* ty=(Tensor[(100, 1, 2048), float32], Tensor[(100, 1, 2048), float32]) */;
  %1931 = %1930.0;
  %1932 = reshape(%1931, newshape=[-1, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %1933 = transpose(%model.transformer.decoder.layers.2.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %1934 = reshape(%1933, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %1935 = broadcast_to(%1934, meta[relay.attrs.InitOpAttrs][65]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %1936 = transpose(%1935, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %1937 = nn.batch_matmul(%1932, %1936) /* ty=Tensor[(100, 1, 256), float32] */;
  %1938 = reshape(%1937, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1939 = add(%1938, %model.transformer.decoder.layers.2.linear2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1940 = nn.dropout(%1939, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %1941 = %1940.0;
  %1942 = add(%1920, %1941) /* ty=Tensor[(100, 1, 256), float32] */;
  %1943 = nn.layer_norm(%1942, %model.transformer.decoder.layers.2.norm3.weight, %model.transformer.decoder.layers.2.norm3.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1944 = nn.layer_norm(%1943, %model.transformer.decoder.norm.weight, %model.transformer.decoder.norm.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %1945 = add(%1943, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %1946 = reshape(%1945, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1947 = strided_slice(%model.transformer.decoder.layers.3.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1948 = strided_slice(%1947, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1949 = transpose(%1948, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1950 = reshape(%1949, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1951 = broadcast_to(%1950, meta[relay.attrs.InitOpAttrs][66]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1952 = transpose(%1951, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1953 = nn.batch_matmul(%1946, %1952) /* ty=Tensor[(100, 1, 256), float32] */;
  %1954 = reshape(%1953, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1955 = strided_slice(%model.transformer.decoder.layers.3.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1956 = add(%1954, %1955) /* ty=Tensor[(100, 1, 256), float32] */;
  %1957 = multiply(%1956, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %1958 = copy(%1957) /* ty=Tensor[(100, 1, 256), float32] */;
  %1959 = reshape(%1958, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1960 = transpose(%1959, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1961 = reshape(%1960, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1962 = reshape(%1945, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1963 = strided_slice(%model.transformer.decoder.layers.3.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1964 = strided_slice(%1963, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1965 = transpose(%1964, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1966 = reshape(%1965, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1967 = broadcast_to(%1966, meta[relay.attrs.InitOpAttrs][67]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1968 = transpose(%1967, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1969 = nn.batch_matmul(%1962, %1968) /* ty=Tensor[(100, 1, 256), float32] */;
  %1970 = reshape(%1969, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1971 = strided_slice(%model.transformer.decoder.layers.3.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1972 = add(%1970, %1971) /* ty=Tensor[(100, 1, 256), float32] */;
  %1973 = copy(%1972) /* ty=Tensor[(100, 1, 256), float32] */;
  %1974 = reshape(%1973, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1975 = transpose(%1974, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1976 = transpose(%1975, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %1977 = reshape(%1976, newshape=[-1, 32, 100]) /* ty=Tensor[(8, 32, 100), float32] */;
  %1978 = transpose(%1977, axes=[0, 2, 1]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1979 = nn.batch_matmul(%1961, %1978) /* ty=Tensor[(8, 100, 100), float32] */;
  %1980 = reshape(%1979, newshape=[8, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %1981 = nn.softmax(%1980) /* ty=Tensor[(8, 100, 100), float32] */;
  %1982 = nn.dropout(%1981, rate=0.1f) /* ty=(Tensor[(8, 100, 100), float32], Tensor[(8, 100, 100), float32]) */;
  %1983 = %1982.0;
  %1984 = reshape(%1983, newshape=[-1, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %1985 = reshape(%1943, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1986 = strided_slice(%model.transformer.decoder.layers.3.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1987 = strided_slice(%1986, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %1988 = transpose(%1987, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %1989 = reshape(%1988, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %1990 = broadcast_to(%1989, meta[relay.attrs.InitOpAttrs][68]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1991 = transpose(%1990, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %1992 = nn.batch_matmul(%1985, %1991) /* ty=Tensor[(100, 1, 256), float32] */;
  %1993 = reshape(%1992, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %1994 = strided_slice(%model.transformer.decoder.layers.3.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %1995 = add(%1993, %1994) /* ty=Tensor[(100, 1, 256), float32] */;
  %1996 = copy(%1995) /* ty=Tensor[(100, 1, 256), float32] */;
  %1997 = reshape(%1996, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %1998 = transpose(%1997, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %1999 = reshape(%1998, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2000 = transpose(%1999, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %2001 = nn.batch_matmul(%1984, %2000) /* ty=Tensor[(8, 100, 32), float32] */;
  %2002 = reshape(%2001, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2003 = transpose(%2002, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2004 = copy(%2003) /* ty=Tensor[(100, 8, 32), float32] */;
  %2005 = reshape(%2004, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2006 = reshape(%2005, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2007 = transpose(%model.transformer.decoder.layers.3.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2008 = reshape(%2007, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2009 = broadcast_to(%2008, meta[relay.attrs.InitOpAttrs][69]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2010 = transpose(%2009, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2011 = nn.batch_matmul(%2006, %2010) /* ty=Tensor[(100, 1, 256), float32] */;
  %2012 = reshape(%2011, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2013 = add(%2012, %model.transformer.decoder.layers.3.self_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2014 = nn.dropout(%2013, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %2015 = %2014.0;
  %2016 = add(%1943, %2015) /* ty=Tensor[(100, 1, 256), float32] */;
  %2017 = nn.layer_norm(%2016, %model.transformer.decoder.layers.3.norm1.weight, %model.transformer.decoder.layers.3.norm1.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2018 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %2019 = expand_dims(%2018, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %2020 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %2021 = add(%2017, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %2022 = reshape(%2021, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2023 = strided_slice(%model.transformer.decoder.layers.3.multihead_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2024 = strided_slice(%2023, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2025 = transpose(%2024, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2026 = reshape(%2025, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2027 = broadcast_to(%2026, meta[relay.attrs.InitOpAttrs][70]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2028 = transpose(%2027, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2029 = nn.batch_matmul(%2022, %2028) /* ty=Tensor[(100, 1, 256), float32] */;
  %2030 = reshape(%2029, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2031 = strided_slice(%model.transformer.decoder.layers.3.multihead_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2032 = add(%2030, %2031) /* ty=Tensor[(100, 1, 256), float32] */;
  %2033 = multiply(%2032, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %2034 = copy(%2033) /* ty=Tensor[(100, 1, 256), float32] */;
  %2035 = reshape(%2034, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2036 = transpose(%2035, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2037 = reshape(%2036, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2038 = add(%1506, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %2039 = reshape(%2038, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2040 = strided_slice(%model.transformer.decoder.layers.3.multihead_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2041 = strided_slice(%2040, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2042 = transpose(%2041, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2043 = reshape(%2042, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2044 = broadcast_to(%2043, meta[relay.attrs.InitOpAttrs][71]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2045 = transpose(%2044, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2046 = nn.batch_matmul(%2039, %2045) /* ty=Tensor[(600, 1, 256), float32] */;
  %2047 = reshape(%2046, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2048 = strided_slice(%model.transformer.decoder.layers.3.multihead_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2049 = add(%2047, %2048) /* ty=Tensor[(600, 1, 256), float32] */;
  %2050 = copy(%2049) /* ty=Tensor[(600, 1, 256), float32] */;
  %2051 = reshape(%2050, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %2052 = transpose(%2051, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2053 = transpose(%2052, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %2054 = reshape(%2053, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %2055 = transpose(%2054, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2056 = nn.batch_matmul(%2037, %2055) /* ty=Tensor[(8, 100, 600), float32] */;
  %2057 = reshape(%2056, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %2058 = reshape(%2057, newshape=[1, 8, 100, 600]) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %2059 = where(%2019, %2020, %2058) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %2060 = reshape(%2059, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %2061 = nn.softmax(%2060) /* ty=Tensor[(8, 100, 600), float32] */;
  %2062 = nn.dropout(%2061, rate=0.1f) /* ty=(Tensor[(8, 100, 600), float32], Tensor[(8, 100, 600), float32]) */;
  %2063 = %2062.0;
  %2064 = reshape(%2063, newshape=[-1, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %2065 = reshape(%1506, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2066 = strided_slice(%model.transformer.decoder.layers.3.multihead_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2067 = strided_slice(%2066, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2068 = transpose(%2067, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2069 = reshape(%2068, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2070 = broadcast_to(%2069, meta[relay.attrs.InitOpAttrs][72]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2071 = transpose(%2070, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2072 = nn.batch_matmul(%2065, %2071) /* ty=Tensor[(600, 1, 256), float32] */;
  %2073 = reshape(%2072, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2074 = strided_slice(%model.transformer.decoder.layers.3.multihead_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2075 = add(%2073, %2074) /* ty=Tensor[(600, 1, 256), float32] */;
  %2076 = copy(%2075) /* ty=Tensor[(600, 1, 256), float32] */;
  %2077 = reshape(%2076, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %2078 = transpose(%2077, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2079 = reshape(%2078, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2080 = transpose(%2079, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %2081 = nn.batch_matmul(%2064, %2080) /* ty=Tensor[(8, 100, 32), float32] */;
  %2082 = reshape(%2081, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2083 = transpose(%2082, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2084 = copy(%2083) /* ty=Tensor[(100, 8, 32), float32] */;
  %2085 = reshape(%2084, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2086 = reshape(%2085, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2087 = transpose(%model.transformer.decoder.layers.3.multihead_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2088 = reshape(%2087, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2089 = broadcast_to(%2088, meta[relay.attrs.InitOpAttrs][73]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2090 = transpose(%2089, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2091 = nn.batch_matmul(%2086, %2090) /* ty=Tensor[(100, 1, 256), float32] */;
  %2092 = reshape(%2091, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2093 = add(%2092, %model.transformer.decoder.layers.3.multihead_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2094 = nn.dropout(%2093, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %2095 = %2094.0;
  %2096 = add(%2017, %2095) /* ty=Tensor[(100, 1, 256), float32] */;
  %2097 = nn.layer_norm(%2096, %model.transformer.decoder.layers.3.norm2.weight, %model.transformer.decoder.layers.3.norm2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2098 = reshape(%2097, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2099 = transpose(%model.transformer.decoder.layers.3.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %2100 = reshape(%2099, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %2101 = broadcast_to(%2100, meta[relay.attrs.InitOpAttrs][74]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %2102 = transpose(%2101, axes=[0, 2, 1]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %2103 = nn.batch_matmul(%2098, %2102) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2104 = reshape(%2103, newshape=[100, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2105 = add(%2104, %model.transformer.decoder.layers.3.linear1.bias) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2106 = nn.relu(%2105) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2107 = nn.dropout(%2106, rate=0.1f) /* ty=(Tensor[(100, 1, 2048), float32], Tensor[(100, 1, 2048), float32]) */;
  %2108 = %2107.0;
  %2109 = reshape(%2108, newshape=[-1, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2110 = transpose(%model.transformer.decoder.layers.3.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %2111 = reshape(%2110, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %2112 = broadcast_to(%2111, meta[relay.attrs.InitOpAttrs][75]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %2113 = transpose(%2112, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %2114 = nn.batch_matmul(%2109, %2113) /* ty=Tensor[(100, 1, 256), float32] */;
  %2115 = reshape(%2114, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2116 = add(%2115, %model.transformer.decoder.layers.3.linear2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2117 = nn.dropout(%2116, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %2118 = %2117.0;
  %2119 = add(%2097, %2118) /* ty=Tensor[(100, 1, 256), float32] */;
  %2120 = nn.layer_norm(%2119, %model.transformer.decoder.layers.3.norm3.weight, %model.transformer.decoder.layers.3.norm3.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2121 = nn.layer_norm(%2120, %model.transformer.decoder.norm.weight, %model.transformer.decoder.norm.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2122 = add(%2120, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %2123 = reshape(%2122, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2124 = strided_slice(%model.transformer.decoder.layers.4.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2125 = strided_slice(%2124, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2126 = transpose(%2125, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2127 = reshape(%2126, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2128 = broadcast_to(%2127, meta[relay.attrs.InitOpAttrs][76]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2129 = transpose(%2128, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2130 = nn.batch_matmul(%2123, %2129) /* ty=Tensor[(100, 1, 256), float32] */;
  %2131 = reshape(%2130, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2132 = strided_slice(%model.transformer.decoder.layers.4.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2133 = add(%2131, %2132) /* ty=Tensor[(100, 1, 256), float32] */;
  %2134 = multiply(%2133, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %2135 = copy(%2134) /* ty=Tensor[(100, 1, 256), float32] */;
  %2136 = reshape(%2135, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2137 = transpose(%2136, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2138 = reshape(%2137, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2139 = reshape(%2122, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2140 = strided_slice(%model.transformer.decoder.layers.4.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2141 = strided_slice(%2140, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2142 = transpose(%2141, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2143 = reshape(%2142, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2144 = broadcast_to(%2143, meta[relay.attrs.InitOpAttrs][77]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2145 = transpose(%2144, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2146 = nn.batch_matmul(%2139, %2145) /* ty=Tensor[(100, 1, 256), float32] */;
  %2147 = reshape(%2146, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2148 = strided_slice(%model.transformer.decoder.layers.4.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2149 = add(%2147, %2148) /* ty=Tensor[(100, 1, 256), float32] */;
  %2150 = copy(%2149) /* ty=Tensor[(100, 1, 256), float32] */;
  %2151 = reshape(%2150, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2152 = transpose(%2151, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2153 = transpose(%2152, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %2154 = reshape(%2153, newshape=[-1, 32, 100]) /* ty=Tensor[(8, 32, 100), float32] */;
  %2155 = transpose(%2154, axes=[0, 2, 1]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2156 = nn.batch_matmul(%2138, %2155) /* ty=Tensor[(8, 100, 100), float32] */;
  %2157 = reshape(%2156, newshape=[8, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %2158 = nn.softmax(%2157) /* ty=Tensor[(8, 100, 100), float32] */;
  %2159 = nn.dropout(%2158, rate=0.1f) /* ty=(Tensor[(8, 100, 100), float32], Tensor[(8, 100, 100), float32]) */;
  %2160 = %2159.0;
  %2161 = reshape(%2160, newshape=[-1, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %2162 = reshape(%2120, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2163 = strided_slice(%model.transformer.decoder.layers.4.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2164 = strided_slice(%2163, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2165 = transpose(%2164, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2166 = reshape(%2165, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2167 = broadcast_to(%2166, meta[relay.attrs.InitOpAttrs][78]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2168 = transpose(%2167, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2169 = nn.batch_matmul(%2162, %2168) /* ty=Tensor[(100, 1, 256), float32] */;
  %2170 = reshape(%2169, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2171 = strided_slice(%model.transformer.decoder.layers.4.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2172 = add(%2170, %2171) /* ty=Tensor[(100, 1, 256), float32] */;
  %2173 = copy(%2172) /* ty=Tensor[(100, 1, 256), float32] */;
  %2174 = reshape(%2173, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2175 = transpose(%2174, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2176 = reshape(%2175, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2177 = transpose(%2176, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %2178 = nn.batch_matmul(%2161, %2177) /* ty=Tensor[(8, 100, 32), float32] */;
  %2179 = reshape(%2178, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2180 = transpose(%2179, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2181 = copy(%2180) /* ty=Tensor[(100, 8, 32), float32] */;
  %2182 = reshape(%2181, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2183 = reshape(%2182, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2184 = transpose(%model.transformer.decoder.layers.4.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2185 = reshape(%2184, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2186 = broadcast_to(%2185, meta[relay.attrs.InitOpAttrs][79]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2187 = transpose(%2186, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2188 = nn.batch_matmul(%2183, %2187) /* ty=Tensor[(100, 1, 256), float32] */;
  %2189 = reshape(%2188, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2190 = add(%2189, %model.transformer.decoder.layers.4.self_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2191 = nn.dropout(%2190, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %2192 = %2191.0;
  %2193 = add(%2120, %2192) /* ty=Tensor[(100, 1, 256), float32] */;
  %2194 = nn.layer_norm(%2193, %model.transformer.decoder.layers.4.norm1.weight, %model.transformer.decoder.layers.4.norm1.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2195 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %2196 = expand_dims(%2195, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %2197 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %2198 = add(%2194, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %2199 = reshape(%2198, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2200 = strided_slice(%model.transformer.decoder.layers.4.multihead_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2201 = strided_slice(%2200, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2202 = transpose(%2201, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2203 = reshape(%2202, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2204 = broadcast_to(%2203, meta[relay.attrs.InitOpAttrs][80]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2205 = transpose(%2204, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2206 = nn.batch_matmul(%2199, %2205) /* ty=Tensor[(100, 1, 256), float32] */;
  %2207 = reshape(%2206, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2208 = strided_slice(%model.transformer.decoder.layers.4.multihead_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2209 = add(%2207, %2208) /* ty=Tensor[(100, 1, 256), float32] */;
  %2210 = multiply(%2209, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %2211 = copy(%2210) /* ty=Tensor[(100, 1, 256), float32] */;
  %2212 = reshape(%2211, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2213 = transpose(%2212, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2214 = reshape(%2213, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2215 = add(%1506, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %2216 = reshape(%2215, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2217 = strided_slice(%model.transformer.decoder.layers.4.multihead_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2218 = strided_slice(%2217, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2219 = transpose(%2218, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2220 = reshape(%2219, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2221 = broadcast_to(%2220, meta[relay.attrs.InitOpAttrs][81]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2222 = transpose(%2221, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2223 = nn.batch_matmul(%2216, %2222) /* ty=Tensor[(600, 1, 256), float32] */;
  %2224 = reshape(%2223, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2225 = strided_slice(%model.transformer.decoder.layers.4.multihead_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2226 = add(%2224, %2225) /* ty=Tensor[(600, 1, 256), float32] */;
  %2227 = copy(%2226) /* ty=Tensor[(600, 1, 256), float32] */;
  %2228 = reshape(%2227, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %2229 = transpose(%2228, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2230 = transpose(%2229, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %2231 = reshape(%2230, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %2232 = transpose(%2231, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2233 = nn.batch_matmul(%2214, %2232) /* ty=Tensor[(8, 100, 600), float32] */;
  %2234 = reshape(%2233, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %2235 = reshape(%2234, newshape=[1, 8, 100, 600]) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %2236 = where(%2196, %2197, %2235) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %2237 = reshape(%2236, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %2238 = nn.softmax(%2237) /* ty=Tensor[(8, 100, 600), float32] */;
  %2239 = nn.dropout(%2238, rate=0.1f) /* ty=(Tensor[(8, 100, 600), float32], Tensor[(8, 100, 600), float32]) */;
  %2240 = %2239.0;
  %2241 = reshape(%2240, newshape=[-1, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %2242 = reshape(%1506, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2243 = strided_slice(%model.transformer.decoder.layers.4.multihead_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2244 = strided_slice(%2243, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2245 = transpose(%2244, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2246 = reshape(%2245, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2247 = broadcast_to(%2246, meta[relay.attrs.InitOpAttrs][82]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2248 = transpose(%2247, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2249 = nn.batch_matmul(%2242, %2248) /* ty=Tensor[(600, 1, 256), float32] */;
  %2250 = reshape(%2249, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2251 = strided_slice(%model.transformer.decoder.layers.4.multihead_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2252 = add(%2250, %2251) /* ty=Tensor[(600, 1, 256), float32] */;
  %2253 = copy(%2252) /* ty=Tensor[(600, 1, 256), float32] */;
  %2254 = reshape(%2253, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %2255 = transpose(%2254, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2256 = reshape(%2255, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2257 = transpose(%2256, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %2258 = nn.batch_matmul(%2241, %2257) /* ty=Tensor[(8, 100, 32), float32] */;
  %2259 = reshape(%2258, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2260 = transpose(%2259, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2261 = copy(%2260) /* ty=Tensor[(100, 8, 32), float32] */;
  %2262 = reshape(%2261, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2263 = reshape(%2262, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2264 = transpose(%model.transformer.decoder.layers.4.multihead_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2265 = reshape(%2264, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2266 = broadcast_to(%2265, meta[relay.attrs.InitOpAttrs][83]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2267 = transpose(%2266, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2268 = nn.batch_matmul(%2263, %2267) /* ty=Tensor[(100, 1, 256), float32] */;
  %2269 = reshape(%2268, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2270 = add(%2269, %model.transformer.decoder.layers.4.multihead_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2271 = nn.dropout(%2270, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %2272 = %2271.0;
  %2273 = add(%2194, %2272) /* ty=Tensor[(100, 1, 256), float32] */;
  %2274 = nn.layer_norm(%2273, %model.transformer.decoder.layers.4.norm2.weight, %model.transformer.decoder.layers.4.norm2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2275 = reshape(%2274, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2276 = transpose(%model.transformer.decoder.layers.4.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %2277 = reshape(%2276, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %2278 = broadcast_to(%2277, meta[relay.attrs.InitOpAttrs][84]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %2279 = transpose(%2278, axes=[0, 2, 1]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %2280 = nn.batch_matmul(%2275, %2279) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2281 = reshape(%2280, newshape=[100, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2282 = add(%2281, %model.transformer.decoder.layers.4.linear1.bias) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2283 = nn.relu(%2282) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2284 = nn.dropout(%2283, rate=0.1f) /* ty=(Tensor[(100, 1, 2048), float32], Tensor[(100, 1, 2048), float32]) */;
  %2285 = %2284.0;
  %2286 = reshape(%2285, newshape=[-1, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2287 = transpose(%model.transformer.decoder.layers.4.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %2288 = reshape(%2287, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %2289 = broadcast_to(%2288, meta[relay.attrs.InitOpAttrs][85]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %2290 = transpose(%2289, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %2291 = nn.batch_matmul(%2286, %2290) /* ty=Tensor[(100, 1, 256), float32] */;
  %2292 = reshape(%2291, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2293 = add(%2292, %model.transformer.decoder.layers.4.linear2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2294 = nn.dropout(%2293, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %2295 = %2294.0;
  %2296 = add(%2274, %2295) /* ty=Tensor[(100, 1, 256), float32] */;
  %2297 = nn.layer_norm(%2296, %model.transformer.decoder.layers.4.norm3.weight, %model.transformer.decoder.layers.4.norm3.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2298 = nn.layer_norm(%2297, %model.transformer.decoder.norm.weight, %model.transformer.decoder.norm.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2299 = add(%2297, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %2300 = reshape(%2299, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2301 = strided_slice(%model.transformer.decoder.layers.5.self_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2302 = strided_slice(%2301, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2303 = transpose(%2302, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2304 = reshape(%2303, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2305 = broadcast_to(%2304, meta[relay.attrs.InitOpAttrs][86]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2306 = transpose(%2305, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2307 = nn.batch_matmul(%2300, %2306) /* ty=Tensor[(100, 1, 256), float32] */;
  %2308 = reshape(%2307, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2309 = strided_slice(%model.transformer.decoder.layers.5.self_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2310 = add(%2308, %2309) /* ty=Tensor[(100, 1, 256), float32] */;
  %2311 = multiply(%2310, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %2312 = copy(%2311) /* ty=Tensor[(100, 1, 256), float32] */;
  %2313 = reshape(%2312, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2314 = transpose(%2313, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2315 = reshape(%2314, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2316 = reshape(%2299, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2317 = strided_slice(%model.transformer.decoder.layers.5.self_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2318 = strided_slice(%2317, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2319 = transpose(%2318, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2320 = reshape(%2319, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2321 = broadcast_to(%2320, meta[relay.attrs.InitOpAttrs][87]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2322 = transpose(%2321, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2323 = nn.batch_matmul(%2316, %2322) /* ty=Tensor[(100, 1, 256), float32] */;
  %2324 = reshape(%2323, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2325 = strided_slice(%model.transformer.decoder.layers.5.self_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2326 = add(%2324, %2325) /* ty=Tensor[(100, 1, 256), float32] */;
  %2327 = copy(%2326) /* ty=Tensor[(100, 1, 256), float32] */;
  %2328 = reshape(%2327, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2329 = transpose(%2328, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2330 = transpose(%2329, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %2331 = reshape(%2330, newshape=[-1, 32, 100]) /* ty=Tensor[(8, 32, 100), float32] */;
  %2332 = transpose(%2331, axes=[0, 2, 1]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2333 = nn.batch_matmul(%2315, %2332) /* ty=Tensor[(8, 100, 100), float32] */;
  %2334 = reshape(%2333, newshape=[8, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %2335 = nn.softmax(%2334) /* ty=Tensor[(8, 100, 100), float32] */;
  %2336 = nn.dropout(%2335, rate=0.1f) /* ty=(Tensor[(8, 100, 100), float32], Tensor[(8, 100, 100), float32]) */;
  %2337 = %2336.0;
  %2338 = reshape(%2337, newshape=[-1, 100, 100]) /* ty=Tensor[(8, 100, 100), float32] */;
  %2339 = reshape(%2297, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2340 = strided_slice(%model.transformer.decoder.layers.5.self_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2341 = strided_slice(%2340, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2342 = transpose(%2341, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2343 = reshape(%2342, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2344 = broadcast_to(%2343, meta[relay.attrs.InitOpAttrs][88]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2345 = transpose(%2344, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2346 = nn.batch_matmul(%2339, %2345) /* ty=Tensor[(100, 1, 256), float32] */;
  %2347 = reshape(%2346, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2348 = strided_slice(%model.transformer.decoder.layers.5.self_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2349 = add(%2347, %2348) /* ty=Tensor[(100, 1, 256), float32] */;
  %2350 = copy(%2349) /* ty=Tensor[(100, 1, 256), float32] */;
  %2351 = reshape(%2350, newshape=[-1, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2352 = transpose(%2351, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2353 = reshape(%2352, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2354 = transpose(%2353, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 100), float32] */;
  %2355 = nn.batch_matmul(%2338, %2354) /* ty=Tensor[(8, 100, 32), float32] */;
  %2356 = reshape(%2355, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2357 = transpose(%2356, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2358 = copy(%2357) /* ty=Tensor[(100, 8, 32), float32] */;
  %2359 = reshape(%2358, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2360 = reshape(%2359, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2361 = transpose(%model.transformer.decoder.layers.5.self_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2362 = reshape(%2361, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2363 = broadcast_to(%2362, meta[relay.attrs.InitOpAttrs][89]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2364 = transpose(%2363, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2365 = nn.batch_matmul(%2360, %2364) /* ty=Tensor[(100, 1, 256), float32] */;
  %2366 = reshape(%2365, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2367 = add(%2366, %model.transformer.decoder.layers.5.self_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2368 = nn.dropout(%2367, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %2369 = %2368.0;
  %2370 = add(%2297, %2369) /* ty=Tensor[(100, 1, 256), float32] */;
  %2371 = nn.layer_norm(%2370, %model.transformer.decoder.layers.5.norm1.weight, %model.transformer.decoder.layers.5.norm1.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2372 = expand_dims(%864, axis=1) /* ty=Tensor[(1, 1, 600), float32] */;
  %2373 = expand_dims(%2372, axis=2) /* ty=Tensor[(1, 1, 1, 600), float32] */;
  %2374 = cast(-inff /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %2375 = add(%2371, %1) /* ty=Tensor[(100, 1, 256), float32] */;
  %2376 = reshape(%2375, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2377 = strided_slice(%model.transformer.decoder.layers.5.multihead_attn.in_proj_weight, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2378 = strided_slice(%2377, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2379 = transpose(%2378, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2380 = reshape(%2379, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2381 = broadcast_to(%2380, meta[relay.attrs.InitOpAttrs][90]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2382 = transpose(%2381, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2383 = nn.batch_matmul(%2376, %2382) /* ty=Tensor[(100, 1, 256), float32] */;
  %2384 = reshape(%2383, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2385 = strided_slice(%model.transformer.decoder.layers.5.multihead_attn.in_proj_bias, begin=[0], end=[256], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2386 = add(%2384, %2385) /* ty=Tensor[(100, 1, 256), float32] */;
  %2387 = multiply(%2386, 0.176777f /* ty=float32 */) /* ty=Tensor[(100, 1, 256), float32] */;
  %2388 = copy(%2387) /* ty=Tensor[(100, 1, 256), float32] */;
  %2389 = reshape(%2388, newshape=[100, 8, 32]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2390 = transpose(%2389, axes=[1, 0, 2]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2391 = reshape(%2390, newshape=[-1, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2392 = add(%1506, %897) /* ty=Tensor[(600, 1, 256), float32] */;
  %2393 = reshape(%2392, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2394 = strided_slice(%model.transformer.decoder.layers.5.multihead_attn.in_proj_weight, begin=[256, 0], end=[512, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2395 = strided_slice(%2394, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2396 = transpose(%2395, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2397 = reshape(%2396, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2398 = broadcast_to(%2397, meta[relay.attrs.InitOpAttrs][91]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2399 = transpose(%2398, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2400 = nn.batch_matmul(%2393, %2399) /* ty=Tensor[(600, 1, 256), float32] */;
  %2401 = reshape(%2400, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2402 = strided_slice(%model.transformer.decoder.layers.5.multihead_attn.in_proj_bias, begin=[256], end=[512], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2403 = add(%2401, %2402) /* ty=Tensor[(600, 1, 256), float32] */;
  %2404 = copy(%2403) /* ty=Tensor[(600, 1, 256), float32] */;
  %2405 = reshape(%2404, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %2406 = transpose(%2405, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2407 = transpose(%2406, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %2408 = reshape(%2407, newshape=[-1, 32, 600]) /* ty=Tensor[(8, 32, 600), float32] */;
  %2409 = transpose(%2408, axes=[0, 2, 1]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2410 = nn.batch_matmul(%2391, %2409) /* ty=Tensor[(8, 100, 600), float32] */;
  %2411 = reshape(%2410, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %2412 = reshape(%2411, newshape=[1, 8, 100, 600]) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %2413 = where(%2373, %2374, %2412) /* ty=Tensor[(1, 8, 100, 600), float32] */;
  %2414 = reshape(%2413, newshape=[8, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %2415 = nn.softmax(%2414) /* ty=Tensor[(8, 100, 600), float32] */;
  %2416 = nn.dropout(%2415, rate=0.1f) /* ty=(Tensor[(8, 100, 600), float32], Tensor[(8, 100, 600), float32]) */;
  %2417 = %2416.0;
  %2418 = reshape(%2417, newshape=[-1, 100, 600]) /* ty=Tensor[(8, 100, 600), float32] */;
  %2419 = reshape(%1506, newshape=[-1, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2420 = strided_slice(%model.transformer.decoder.layers.5.multihead_attn.in_proj_weight, begin=[512, 0], end=[768, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2421 = strided_slice(%2420, begin=[0, 0], end=[256, 256], strides=[1, 1]) /* ty=Tensor[(256, 256), float32] */;
  %2422 = transpose(%2421, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2423 = reshape(%2422, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2424 = broadcast_to(%2423, meta[relay.attrs.InitOpAttrs][92]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2425 = transpose(%2424, axes=[0, 2, 1]) /* ty=Tensor[(600, 256, 256), float32] */;
  %2426 = nn.batch_matmul(%2419, %2425) /* ty=Tensor[(600, 1, 256), float32] */;
  %2427 = reshape(%2426, newshape=[600, 1, 256]) /* ty=Tensor[(600, 1, 256), float32] */;
  %2428 = strided_slice(%model.transformer.decoder.layers.5.multihead_attn.in_proj_bias, begin=[512], end=[768], strides=[1]) /* ty=Tensor[(256), float32] */;
  %2429 = add(%2427, %2428) /* ty=Tensor[(600, 1, 256), float32] */;
  %2430 = copy(%2429) /* ty=Tensor[(600, 1, 256), float32] */;
  %2431 = reshape(%2430, newshape=[-1, 8, 32]) /* ty=Tensor[(600, 8, 32), float32] */;
  %2432 = transpose(%2431, axes=[1, 0, 2]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2433 = reshape(%2432, newshape=[-1, 600, 32]) /* ty=Tensor[(8, 600, 32), float32] */;
  %2434 = transpose(%2433, axes=[0, 2, 1]) /* ty=Tensor[(8, 32, 600), float32] */;
  %2435 = nn.batch_matmul(%2418, %2434) /* ty=Tensor[(8, 100, 32), float32] */;
  %2436 = reshape(%2435, newshape=[8, 100, 32]) /* ty=Tensor[(8, 100, 32), float32] */;
  %2437 = transpose(%2436, axes=[1, 0, 2]) /* ty=Tensor[(100, 8, 32), float32] */;
  %2438 = copy(%2437) /* ty=Tensor[(100, 8, 32), float32] */;
  %2439 = reshape(%2438, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2440 = reshape(%2439, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2441 = transpose(%model.transformer.decoder.layers.5.multihead_attn.out_proj.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2442 = reshape(%2441, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2443 = broadcast_to(%2442, meta[relay.attrs.InitOpAttrs][93]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2444 = transpose(%2443, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 256), float32] */;
  %2445 = nn.batch_matmul(%2440, %2444) /* ty=Tensor[(100, 1, 256), float32] */;
  %2446 = reshape(%2445, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2447 = add(%2446, %model.transformer.decoder.layers.5.multihead_attn.out_proj.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2448 = nn.dropout(%2447, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %2449 = %2448.0;
  %2450 = add(%2371, %2449) /* ty=Tensor[(100, 1, 256), float32] */;
  %2451 = nn.layer_norm(%2450, %model.transformer.decoder.layers.5.norm2.weight, %model.transformer.decoder.layers.5.norm2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2452 = reshape(%2451, newshape=[-1, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2453 = transpose(%model.transformer.decoder.layers.5.linear1.weight, axes=[1, 0]) /* ty=Tensor[(256, 2048), float32] */;
  %2454 = reshape(%2453, newshape=[-1, 256, 2048]) /* ty=Tensor[(1, 256, 2048), float32] */;
  %2455 = broadcast_to(%2454, meta[relay.attrs.InitOpAttrs][94]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %2456 = transpose(%2455, axes=[0, 2, 1]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %2457 = nn.batch_matmul(%2452, %2456) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2458 = reshape(%2457, newshape=[100, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2459 = add(%2458, %model.transformer.decoder.layers.5.linear1.bias) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2460 = nn.relu(%2459) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2461 = nn.dropout(%2460, rate=0.1f) /* ty=(Tensor[(100, 1, 2048), float32], Tensor[(100, 1, 2048), float32]) */;
  %2462 = %2461.0;
  %2463 = reshape(%2462, newshape=[-1, 1, 2048]) /* ty=Tensor[(100, 1, 2048), float32] */;
  %2464 = transpose(%model.transformer.decoder.layers.5.linear2.weight, axes=[1, 0]) /* ty=Tensor[(2048, 256), float32] */;
  %2465 = reshape(%2464, newshape=[-1, 2048, 256]) /* ty=Tensor[(1, 2048, 256), float32] */;
  %2466 = broadcast_to(%2465, meta[relay.attrs.InitOpAttrs][95]) /* ty=Tensor[(100, 2048, 256), float32] */;
  %2467 = transpose(%2466, axes=[0, 2, 1]) /* ty=Tensor[(100, 256, 2048), float32] */;
  %2468 = nn.batch_matmul(%2463, %2467) /* ty=Tensor[(100, 1, 256), float32] */;
  %2469 = reshape(%2468, newshape=[100, 1, 256]) /* ty=Tensor[(100, 1, 256), float32] */;
  %2470 = add(%2469, %model.transformer.decoder.layers.5.linear2.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2471 = nn.dropout(%2470, rate=0.1f) /* ty=(Tensor[(100, 1, 256), float32], Tensor[(100, 1, 256), float32]) */;
  %2472 = %2471.0;
  %2473 = add(%2451, %2472) /* ty=Tensor[(100, 1, 256), float32] */;
  %2474 = nn.layer_norm(%2473, %model.transformer.decoder.layers.5.norm3.weight, %model.transformer.decoder.layers.5.norm3.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2475 = nn.layer_norm(%2474, %model.transformer.decoder.norm.weight, %model.transformer.decoder.norm.bias) /* ty=Tensor[(100, 1, 256), float32] */;
  %2476 = (%1590, %1767, %1944, %2121, %2298, %2475);
  %2477 = stack(%2476) /* ty=Tensor[(6, 100, 1, 256), float32] */;
  %2478 = transpose(%2477, axes=[0, 2, 1, 3]) /* ty=Tensor[(6, 1, 100, 256), float32] */;
  %2479 = reshape(%2478, newshape=[-1, 100, 256]) /* ty=Tensor[(6, 100, 256), float32] */;
  %2480 = transpose(%model.class_embed.weight, axes=[1, 0]) /* ty=Tensor[(256, 92), float32] */;
  %2481 = reshape(%2480, newshape=[-1, 256, 92]) /* ty=Tensor[(1, 256, 92), float32] */;
  %2482 = broadcast_to(%2481, meta[relay.attrs.InitOpAttrs][96]) /* ty=Tensor[(6, 256, 92), float32] */;
  %2483 = transpose(%2482, axes=[0, 2, 1]) /* ty=Tensor[(6, 92, 256), float32] */;
  %2484 = nn.batch_matmul(%2479, %2483) /* ty=Tensor[(6, 100, 92), float32] */;
  %2485 = reshape(%2484, newshape=[6, 1, 100, 92]) /* ty=Tensor[(6, 1, 100, 92), float32] */;
  %2486 = add(%2485, %model.class_embed.bias) /* ty=Tensor[(6, 1, 100, 92), float32] */;
  %2487 = take(%2486, -1 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 100, 92), float32] */;
  %2488 = reshape(%2478, newshape=[-1, 100, 256]) /* ty=Tensor[(6, 100, 256), float32] */;
  %2489 = transpose(%model.bbox_embed.layers.0.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2490 = reshape(%2489, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2491 = broadcast_to(%2490, meta[relay.attrs.InitOpAttrs][97]) /* ty=Tensor[(6, 256, 256), float32] */;
  %2492 = transpose(%2491, axes=[0, 2, 1]) /* ty=Tensor[(6, 256, 256), float32] */;
  %2493 = nn.batch_matmul(%2488, %2492) /* ty=Tensor[(6, 100, 256), float32] */;
  %2494 = reshape(%2493, newshape=[6, 1, 100, 256]) /* ty=Tensor[(6, 1, 100, 256), float32] */;
  %2495 = add(%2494, %model.bbox_embed.layers.0.bias) /* ty=Tensor[(6, 1, 100, 256), float32] */;
  %2496 = nn.relu(%2495) /* ty=Tensor[(6, 1, 100, 256), float32] */;
  %2497 = reshape(%2496, newshape=[-1, 100, 256]) /* ty=Tensor[(6, 100, 256), float32] */;
  %2498 = transpose(%model.bbox_embed.layers.1.weight, axes=[1, 0]) /* ty=Tensor[(256, 256), float32] */;
  %2499 = reshape(%2498, newshape=[-1, 256, 256]) /* ty=Tensor[(1, 256, 256), float32] */;
  %2500 = broadcast_to(%2499, meta[relay.attrs.InitOpAttrs][98]) /* ty=Tensor[(6, 256, 256), float32] */;
  %2501 = transpose(%2500, axes=[0, 2, 1]) /* ty=Tensor[(6, 256, 256), float32] */;
  %2502 = nn.batch_matmul(%2497, %2501) /* ty=Tensor[(6, 100, 256), float32] */;
  %2503 = reshape(%2502, newshape=[6, 1, 100, 256]) /* ty=Tensor[(6, 1, 100, 256), float32] */;
  %2504 = add(%2503, %model.bbox_embed.layers.1.bias) /* ty=Tensor[(6, 1, 100, 256), float32] */;
  %2505 = nn.relu(%2504) /* ty=Tensor[(6, 1, 100, 256), float32] */;
  %2506 = reshape(%2505, newshape=[-1, 100, 256]) /* ty=Tensor[(6, 100, 256), float32] */;
  %2507 = transpose(%model.bbox_embed.layers.2.weight, axes=[1, 0]) /* ty=Tensor[(256, 4), float32] */;
  %2508 = reshape(%2507, newshape=[-1, 256, 4]) /* ty=Tensor[(1, 256, 4), float32] */;
  %2509 = broadcast_to(%2508, meta[relay.attrs.InitOpAttrs][99]) /* ty=Tensor[(6, 256, 4), float32] */;
  %2510 = transpose(%2509, axes=[0, 2, 1]) /* ty=Tensor[(6, 4, 256), float32] */;
  %2511 = nn.batch_matmul(%2506, %2510) /* ty=Tensor[(6, 100, 4), float32] */;
  %2512 = reshape(%2511, newshape=[6, 1, 100, 4]) /* ty=Tensor[(6, 1, 100, 4), float32] */;
  %2513 = add(%2512, %model.bbox_embed.layers.2.bias) /* ty=Tensor[(6, 1, 100, 4), float32] */;
  %2514 = sigmoid(%2513) /* ty=Tensor[(6, 1, 100, 4), float32] */;
  %2515 = take(%2514, -1 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 100, 4), float32] */;
  %2516 = (%2487, %2515);
  %2517 = %2516.0;
  %2518 = %2516.1;
  (%2517, %2518)
}

