<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>transform_module (tvm/relay/transform/memory_alloc.py:359) (855 samples, 3.08%)</title><rect x="33.4968%" y="164" width="3.0822%" height="15" fill="rgb(227,0,7)"/><text x="33.7468%" y="174.50">tra..</text></g><g><title>import_from_std (tvm/ir/module.py:251) (799 samples, 2.88%)</title><rect x="33.6986%" y="180" width="2.8803%" height="15" fill="rgb(217,0,24)"/><text x="33.9486%" y="190.50">im..</text></g><g><title>__call__ (tvm/ir/transform.py:127) (799 samples, 2.88%)</title><rect x="33.6986%" y="196" width="2.8803%" height="15" fill="rgb(221,193,54)"/><text x="33.9486%" y="206.50">__..</text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (799 samples, 2.88%)</title><rect x="33.6986%" y="212" width="2.8803%" height="15" fill="rgb(248,212,6)"/><text x="33.9486%" y="222.50">__..</text></g><g><title>transform_module (tvm/relay/transform/memory_alloc.py:360) (786 samples, 2.83%)</title><rect x="36.5789%" y="164" width="2.8335%" height="15" fill="rgb(208,68,35)"/><text x="36.8289%" y="174.50">tr..</text></g><g><title>__call__ (tvm/ir/transform.py:127) (786 samples, 2.83%)</title><rect x="36.5789%" y="180" width="2.8335%" height="15" fill="rgb(232,128,0)"/><text x="36.8289%" y="190.50">__..</text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (786 samples, 2.83%)</title><rect x="36.5789%" y="196" width="2.8335%" height="15" fill="rgb(207,160,47)"/><text x="36.8289%" y="206.50">__..</text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (3,665 samples, 13.21%)</title><rect x="40.3497%" y="308" width="13.2120%" height="15" fill="rgb(228,23,34)"/><text x="40.5997%" y="318.50">__call__ (tvm/_ffi/_..</text></g><g><title>__getattr__ (tvm/runtime/object.py:60) (3,783 samples, 13.64%)</title><rect x="40.2487%" y="292" width="13.6373%" height="15" fill="rgb(218,30,26)"/><text x="40.4987%" y="302.50">__getattr__ (tvm/runt..</text></g><g><title>is_primitive (tvm/relay/transform/memory_alloc.py:48) (3,813 samples, 13.75%)</title><rect x="40.2055%" y="276" width="13.7455%" height="15" fill="rgb(220,122,19)"/><text x="40.4555%" y="286.50">is_primitive (tvm/rel..</text></g><g><title>visit_call (tvm/relay/transform/memory_alloc.py:289) (3,856 samples, 13.90%)</title><rect x="40.0937%" y="260" width="13.9005%" height="15" fill="rgb(250,228,42)"/><text x="40.3437%" y="270.50">visit_call (tvm/relay..</text></g><g><title>cfun (tvm/_ffi/_ctypes/packed_func.py:81) (306 samples, 1.10%)</title><rect x="54.7044%" y="340" width="1.1031%" height="15" fill="rgb(240,193,28)"/><text x="54.9544%" y="350.50"></text></g><g><title>emit_shape_func (tvm/relay/transform/memory_alloc.py:201) (327 samples, 1.18%)</title><rect x="54.6323%" y="292" width="1.1788%" height="15" fill="rgb(216,20,37)"/><text x="54.8823%" y="302.50"></text></g><g><title>lower_shape_func (tvm/relay/backend/compile_engine.py:352) (327 samples, 1.18%)</title><rect x="54.6323%" y="308" width="1.1788%" height="15" fill="rgb(206,188,39)"/><text x="54.8823%" y="318.50"></text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (327 samples, 1.18%)</title><rect x="54.6323%" y="324" width="1.1788%" height="15" fill="rgb(217,207,13)"/><text x="54.8823%" y="334.50"></text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (348 samples, 1.25%)</title><rect x="55.9012%" y="372" width="1.2545%" height="15" fill="rgb(231,73,38)"/><text x="56.1512%" y="382.50"></text></g><g><title>__getattr__ (tvm/runtime/object.py:60) (356 samples, 1.28%)</title><rect x="55.8940%" y="356" width="1.2833%" height="15" fill="rgb(225,20,46)"/><text x="56.1440%" y="366.50"></text></g><g><title>visit_call (tvm/relay/transform/memory_alloc.py:289) (361 samples, 1.30%)</title><rect x="55.8796%" y="324" width="1.3014%" height="15" fill="rgb(210,31,41)"/><text x="56.1296%" y="334.50"></text></g><g><title>is_primitive (tvm/relay/transform/memory_alloc.py:48) (358 samples, 1.29%)</title><rect x="55.8904%" y="340" width="1.2906%" height="15" fill="rgb(221,200,47)"/><text x="56.1404%" y="350.50"></text></g><g><title>emit_shape_func (tvm/relay/transform/memory_alloc.py:212) (400 samples, 1.44%)</title><rect x="55.8544%" y="292" width="1.4420%" height="15" fill="rgb(226,26,5)"/><text x="56.1044%" y="302.50"></text></g><g><title>visit (tvm/relay/expr_functor.py:48) (393 samples, 1.42%)</title><rect x="55.8796%" y="308" width="1.4167%" height="15" fill="rgb(249,33,26)"/><text x="56.1296%" y="318.50"></text></g><g><title>dynamic_invoke (tvm/relay/transform/memory_alloc.py:247) (821 samples, 2.96%)</title><rect x="54.6215%" y="276" width="2.9596%" height="15" fill="rgb(235,183,28)"/><text x="54.8715%" y="286.50">dyn..</text></g><g><title>visit_call (tvm/relay/transform/memory_alloc.py:314) (890 samples, 3.21%)</title><rect x="54.6107%" y="260" width="3.2084%" height="15" fill="rgb(221,5,38)"/><text x="54.8607%" y="270.50">vis..</text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (775 samples, 2.79%)</title><rect x="59.3331%" y="404" width="2.7938%" height="15" fill="rgb(247,18,42)"/><text x="59.5831%" y="414.50">__..</text></g><g><title>__getattr__ (tvm/runtime/object.py:60) (799 samples, 2.88%)</title><rect x="59.3043%" y="388" width="2.8803%" height="15" fill="rgb(241,131,45)"/><text x="59.5543%" y="398.50">__..</text></g><g><title>visit_call (tvm/relay/transform/memory_alloc.py:289) (813 samples, 2.93%)</title><rect x="59.2610%" y="356" width="2.9308%" height="15" fill="rgb(249,31,29)"/><text x="59.5110%" y="366.50">vi..</text></g><g><title>is_primitive (tvm/relay/transform/memory_alloc.py:48) (805 samples, 2.90%)</title><rect x="59.2898%" y="372" width="2.9019%" height="15" fill="rgb(225,111,53)"/><text x="59.5398%" y="382.50">is..</text></g><g><title>visit_call (tvm/relay/expr_functor.py:215) (283 samples, 1.02%)</title><rect x="63.6157%" y="500" width="1.0202%" height="15" fill="rgb(238,160,17)"/><text x="63.8657%" y="510.50"></text></g><g><title>&lt;listcomp&gt; (tvm/relay/expr_functor.py:215) (283 samples, 1.02%)</title><rect x="63.6157%" y="516" width="1.0202%" height="15" fill="rgb(214,148,48)"/><text x="63.8657%" y="526.50"></text></g><g><title>visit (tvm/relay/expr_functor.py:48) (396 samples, 1.43%)</title><rect x="63.2372%" y="468" width="1.4275%" height="15" fill="rgb(232,36,49)"/><text x="63.4872%" y="478.50"></text></g><g><title>visit_call (tvm/relay/transform/memory_alloc.py:328) (295 samples, 1.06%)</title><rect x="63.6013%" y="484" width="1.0634%" height="15" fill="rgb(209,103,24)"/><text x="63.8513%" y="494.50"></text></g><g><title>&lt;listcomp&gt; (tvm/relay/expr_functor.py:215) (518 samples, 1.87%)</title><rect x="63.2048%" y="452" width="1.8673%" height="15" fill="rgb(229,88,8)"/><text x="63.4548%" y="462.50">&lt;..</text></g><g><title>visit_call (tvm/relay/expr_functor.py:215) (523 samples, 1.89%)</title><rect x="63.2012%" y="436" width="1.8854%" height="15" fill="rgb(213,181,19)"/><text x="63.4512%" y="446.50">v..</text></g><g><title>visit (tvm/relay/expr_functor.py:48) (775 samples, 2.79%)</title><rect x="62.3252%" y="404" width="2.7938%" height="15" fill="rgb(254,191,54)"/><text x="62.5752%" y="414.50">vi..</text></g><g><title>visit_call (tvm/relay/transform/memory_alloc.py:328) (534 samples, 1.93%)</title><rect x="63.1939%" y="420" width="1.9250%" height="15" fill="rgb(241,83,37)"/><text x="63.4439%" y="430.50">v..</text></g><g><title>&lt;listcomp&gt; (tvm/relay/expr_functor.py:215) (1,056 samples, 3.81%)</title><rect x="62.2495%" y="388" width="3.8068%" height="15" fill="rgb(233,36,39)"/><text x="62.4995%" y="398.50">&lt;lis..</text></g><g><title>visit_call (tvm/relay/expr_functor.py:215) (1,060 samples, 3.82%)</title><rect x="62.2459%" y="372" width="3.8212%" height="15" fill="rgb(226,3,54)"/><text x="62.4959%" y="382.50">visi..</text></g><g><title>visit (tvm/relay/expr_functor.py:48) (1,929 samples, 6.95%)</title><rect x="59.2574%" y="340" width="6.9539%" height="15" fill="rgb(245,192,40)"/><text x="59.5074%" y="350.50">visit (tv..</text></g><g><title>visit_call (tvm/relay/transform/memory_alloc.py:328) (1,115 samples, 4.02%)</title><rect x="62.1918%" y="356" width="4.0195%" height="15" fill="rgb(238,167,29)"/><text x="62.4418%" y="366.50">visi..</text></g><g><title>visit_function (tvm/relay/expr_functor.py:204) (1,941 samples, 7.00%)</title><rect x="59.2286%" y="324" width="6.9971%" height="15" fill="rgb(232,182,51)"/><text x="59.4786%" y="334.50">visit_fun..</text></g><g><title>visit (tvm/relay/expr_functor.py:46) (2,015 samples, 7.26%)</title><rect x="59.1132%" y="308" width="7.2639%" height="15" fill="rgb(231,60,39)"/><text x="59.3632%" y="318.50">visit (tvm..</text></g><g><title>&lt;listcomp&gt; (tvm/relay/expr_functor.py:215) (2,609 samples, 9.41%)</title><rect x="58.5472%" y="292" width="9.4052%" height="15" fill="rgb(208,69,12)"/><text x="58.7972%" y="302.50">&lt;listcomp&gt; (t..</text></g><g><title>visit_call (tvm/relay/expr_functor.py:215) (2,640 samples, 9.52%)</title><rect x="58.5400%" y="276" width="9.5169%" height="15" fill="rgb(235,93,37)"/><text x="58.7900%" y="286.50">visit_call (tv..</text></g><g><title>visit (tvm/relay/expr_functor.py:48) (7,936 samples, 28.61%)</title><rect x="40.0829%" y="244" width="28.6085%" height="15" fill="rgb(213,116,39)"/><text x="40.3329%" y="254.50">visit (tvm/relay/expr_functor.py:48)</text></g><g><title>visit_call (tvm/relay/transform/memory_alloc.py:328) (2,915 samples, 10.51%)</title><rect x="58.1831%" y="260" width="10.5083%" height="15" fill="rgb(222,207,29)"/><text x="58.4331%" y="270.50">visit_call (tvm..</text></g><g><title>visit_let (tvm/relay/transform/memory_alloc.py:187) (8,021 samples, 28.91%)</title><rect x="39.8558%" y="228" width="28.9149%" height="15" fill="rgb(206,96,30)"/><text x="40.1058%" y="238.50">visit_let (tvm/relay/transform/memory_alloc.py:..</text></g><g><title>transform_module (tvm/relay/transform/memory_alloc.py:384) (8,177 samples, 29.48%)</title><rect x="39.8234%" y="164" width="29.4773%" height="15" fill="rgb(218,138,4)"/><text x="40.0734%" y="174.50">transform_module (tvm/relay/transform/memory_al..</text></g><g><title>visit (tvm/relay/expr_functor.py:46) (8,177 samples, 29.48%)</title><rect x="39.8234%" y="180" width="29.4773%" height="15" fill="rgb(250,191,14)"/><text x="40.0734%" y="190.50">visit (tvm/relay/expr_functor.py:46)</text></g><g><title>visit_function (tvm/relay/expr_functor.py:204) (8,177 samples, 29.48%)</title><rect x="39.8234%" y="196" width="29.4773%" height="15" fill="rgb(239,60,40)"/><text x="40.0734%" y="206.50">visit_function (tvm/relay/expr_functor.py:204)</text></g><g><title>visit (tvm/relay/expr_functor.py:50) (8,177 samples, 29.48%)</title><rect x="39.8234%" y="212" width="29.4773%" height="15" fill="rgb(206,27,48)"/><text x="40.0734%" y="222.50">visit (tvm/relay/expr_functor.py:50)</text></g><g><title>_pass_func (tvm/ir/transform.py:195) (10,278 samples, 37.05%)</title><rect x="33.3453%" y="148" width="37.0512%" height="15" fill="rgb(225,35,8)"/><text x="33.5953%" y="158.50">_pass_func (tvm/ir/transform.py:195)</text></g><g><title>transform_module (tvm/relay/transform/memory_alloc.py:385) (304 samples, 1.10%)</title><rect x="69.3006%" y="164" width="1.0959%" height="15" fill="rgb(250,213,24)"/><text x="69.5506%" y="174.50"></text></g><g><title>update_func (tvm/ir/module.py:135) (304 samples, 1.10%)</title><rect x="69.3006%" y="180" width="1.0959%" height="15" fill="rgb(247,123,22)"/><text x="69.5506%" y="190.50"></text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (304 samples, 1.10%)</title><rect x="69.3006%" y="196" width="1.0959%" height="15" fill="rgb(231,138,38)"/><text x="69.5506%" y="206.50"></text></g><g><title>transform_function (tvm/relay/transform/memory_plan.py:356) (412 samples, 1.49%)</title><rect x="70.3965%" y="164" width="1.4852%" height="15" fill="rgb(231,145,46)"/><text x="70.6465%" y="174.50"></text></g><g><title>import_from_std (tvm/ir/module.py:251) (410 samples, 1.48%)</title><rect x="70.4037%" y="180" width="1.4780%" height="15" fill="rgb(251,118,11)"/><text x="70.6537%" y="190.50"></text></g><g><title>__call__ (tvm/ir/transform.py:127) (410 samples, 1.48%)</title><rect x="70.4037%" y="196" width="1.4780%" height="15" fill="rgb(217,147,25)"/><text x="70.6537%" y="206.50"></text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (410 samples, 1.48%)</title><rect x="70.4037%" y="212" width="1.4780%" height="15" fill="rgb(247,81,37)"/><text x="70.6537%" y="222.50"></text></g><g><title>iterative_let (tvm/relay/transform/memory_plan.py:153) (323 samples, 1.16%)</title><rect x="72.0656%" y="244" width="1.1644%" height="15" fill="rgb(209,12,38)"/><text x="72.3156%" y="254.50"></text></g><g><title>_mk_let (tvm/relay/transform/memory_plan.py:256) (1,184 samples, 4.27%)</title><rect x="73.3778%" y="260" width="4.2682%" height="15" fill="rgb(227,1,9)"/><text x="73.6278%" y="270.50">_mk_l..</text></g><g><title>__eq__ (tvm/runtime/object.py:68) (993 samples, 3.58%)</title><rect x="74.0663%" y="276" width="3.5797%" height="15" fill="rgb(248,47,43)"/><text x="74.3163%" y="286.50">__eq..</text></g><g><title>same_as (tvm/_ffi/_ctypes/object.py:153) (483 samples, 1.74%)</title><rect x="75.9048%" y="292" width="1.7412%" height="15" fill="rgb(221,10,30)"/><text x="76.1548%" y="302.50"></text></g><g><title>_pass_func (tvm/relay/transform/transform.py:871) (2,029 samples, 7.31%)</title><rect x="70.3965%" y="148" width="7.3143%" height="15" fill="rgb(210,229,1)"/><text x="70.6465%" y="158.50">_pass_func..</text></g><g><title>transform_function (tvm/relay/transform/memory_plan.py:358) (1,617 samples, 5.83%)</title><rect x="71.8818%" y="164" width="5.8291%" height="15" fill="rgb(222,148,37)"/><text x="72.1318%" y="174.50">transfo..</text></g><g><title>visit (tvm/relay/expr_functor.py:46) (1,617 samples, 5.83%)</title><rect x="71.8818%" y="180" width="5.8291%" height="15" fill="rgb(234,67,33)"/><text x="72.1318%" y="190.50">visit (..</text></g><g><title>visit_function (tvm/relay/transform/memory_plan.py:226) (1,617 samples, 5.83%)</title><rect x="71.8818%" y="196" width="5.8291%" height="15" fill="rgb(247,98,35)"/><text x="72.1318%" y="206.50">visit_f..</text></g><g><title>visit (tvm/relay/expr_functor.py:50) (1,617 samples, 5.83%)</title><rect x="71.8818%" y="212" width="5.8291%" height="15" fill="rgb(247,138,52)"/><text x="72.1318%" y="222.50">visit (..</text></g><g><title>visit_let (tvm/relay/transform/memory_plan.py:274) (1,617 samples, 5.83%)</title><rect x="71.8818%" y="228" width="5.8291%" height="15" fill="rgb(213,79,30)"/><text x="72.1318%" y="238.50">visit_l..</text></g><g><title>iterative_let (tvm/relay/transform/memory_plan.py:156) (1,224 samples, 4.41%)</title><rect x="73.2985%" y="244" width="4.4124%" height="15" fill="rgb(246,177,23)"/><text x="73.5485%" y="254.50">itera..</text></g><g><title>build (tvm/relay/backend/_backend.py:83) (316 samples, 1.14%)</title><rect x="78.1255%" y="148" width="1.1391%" height="15" fill="rgb(230,62,27)"/><text x="78.3755%" y="158.50"></text></g><g><title>form_irmodule (tvm/driver/build_module.py:105) (638 samples, 2.30%)</title><rect x="79.3043%" y="180" width="2.2999%" height="15" fill="rgb(216,154,8)"/><text x="79.5543%" y="190.50">f..</text></g><g><title>normalize (tvm/te/schedule.py:87) (638 samples, 2.30%)</title><rect x="79.3043%" y="196" width="2.2999%" height="15" fill="rgb(244,35,45)"/><text x="79.5543%" y="206.50">n..</text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (638 samples, 2.30%)</title><rect x="79.3043%" y="212" width="2.2999%" height="15" fill="rgb(251,115,12)"/><text x="79.5543%" y="222.50">_..</text></g><g><title>lower (tvm/driver/build_module.py:164) (716 samples, 2.58%)</title><rect x="79.2970%" y="164" width="2.5811%" height="15" fill="rgb(240,54,50)"/><text x="79.5470%" y="174.50">lo..</text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (900 samples, 3.24%)</title><rect x="81.9070%" y="196" width="3.2444%" height="15" fill="rgb(233,84,52)"/><text x="82.1570%" y="206.50">__c..</text></g><g><title>__call__ (tvm/ir/transform.py:127) (903 samples, 3.26%)</title><rect x="81.9034%" y="180" width="3.2552%" height="15" fill="rgb(207,117,47)"/><text x="82.1534%" y="190.50">__c..</text></g><g><title>lower (tvm/relay/backend/_backend.py:49) (1,635 samples, 5.89%)</title><rect x="79.2790%" y="148" width="5.8940%" height="15" fill="rgb(249,43,39)"/><text x="79.5290%" y="158.50">lower (..</text></g><g><title>lower (tvm/driver/build_module.py:207) (907 samples, 3.27%)</title><rect x="81.9034%" y="164" width="3.2696%" height="15" fill="rgb(209,38,44)"/><text x="82.1534%" y="174.50">low..</text></g><g><title>get_shape (tvm/relay/backend/compile_engine.py:84) (332 samples, 1.20%)</title><rect x="85.2307%" y="164" width="1.1968%" height="15" fill="rgb(236,212,23)"/><text x="85.4807%" y="174.50"></text></g><g><title>libinfo (tvm/support.py:29) (317 samples, 1.14%)</title><rect x="85.2848%" y="180" width="1.1428%" height="15" fill="rgb(242,79,21)"/><text x="85.5348%" y="190.50"></text></g><g><title>items (tvm/ir/container.py:60) (293 samples, 1.06%)</title><rect x="85.3713%" y="196" width="1.0562%" height="15" fill="rgb(211,96,35)"/><text x="85.6213%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (tvm/ir/container.py:60) (292 samples, 1.05%)</title><rect x="85.3749%" y="212" width="1.0526%" height="15" fill="rgb(253,215,40)"/><text x="85.6249%" y="222.50"></text></g><g><title>__getitem__ (tvm/ir/container.py:36) (291 samples, 1.05%)</title><rect x="85.3785%" y="228" width="1.0490%" height="15" fill="rgb(211,81,21)"/><text x="85.6285%" y="238.50"></text></g><g><title>lower_call (tvm/relay/backend/compile_engine.py:277) (343 samples, 1.24%)</title><rect x="85.1947%" y="148" width="1.2365%" height="15" fill="rgb(208,190,38)"/><text x="85.4447%" y="158.50"></text></g><g><title>cfun (tvm/_ffi/_ctypes/packed_func.py:81) (14,939 samples, 53.85%)</title><rect x="33.3201%" y="132" width="53.8536%" height="15" fill="rgb(235,213,38)"/><text x="33.5701%" y="142.50">cfun (tvm/_ffi/_ctypes/packed_func.py:81)</text></g><g><title>compile (tvm/relay/backend/vm.py:68) (24,036 samples, 86.65%)</title><rect x="0.5407%" y="84" width="86.6474%" height="15" fill="rgb(237,122,38)"/><text x="0.7907%" y="94.50">compile (tvm/relay/backend/vm.py:68)</text></g><g><title>lower (tvm/relay/backend/vm.py:135) (24,032 samples, 86.63%)</title><rect x="0.5552%" y="100" width="86.6330%" height="15" fill="rgb(244,218,35)"/><text x="0.8052%" y="110.50">lower (tvm/relay/backend/vm.py:135)</text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (24,032 samples, 86.63%)</title><rect x="0.5552%" y="116" width="86.6330%" height="15" fill="rgb(240,68,47)"/><text x="0.8052%" y="126.50">__call__ (tvm/_ffi/_ctypes/packed_func.py:233)</text></g><g><title>&lt;module&gt; (retinanet_test.py:108) (27,682 samples, 99.79%)</title><rect x="0.1226%" y="52" width="99.7909%" height="15" fill="rgb(210,16,53)"/><text x="0.3726%" y="62.50">&lt;module&gt; (retinanet_test.py:108)</text></g><g><title>retina_net_lab (retinanet_test.py:85) (27,572 samples, 99.39%)</title><rect x="0.5191%" y="68" width="99.3944%" height="15" fill="rgb(235,124,12)"/><text x="0.7691%" y="78.50">retina_net_lab (retinanet_test.py:85)</text></g><g><title>compile (tvm/relay/backend/vm.py:69) (3,530 samples, 12.73%)</title><rect x="87.1882%" y="84" width="12.7253%" height="15" fill="rgb(224,169,11)"/><text x="87.4382%" y="94.50">compile (tvm/relay/..</text></g><g><title>codegen (tvm/relay/backend/vm.py:139) (3,530 samples, 12.73%)</title><rect x="87.1882%" y="100" width="12.7253%" height="15" fill="rgb(250,166,2)"/><text x="87.4382%" y="110.50">codegen (tvm/relay/..</text></g><g><title>__call__ (tvm/_ffi/_ctypes/packed_func.py:233) (3,530 samples, 12.73%)</title><rect x="87.1882%" y="116" width="12.7253%" height="15" fill="rgb(242,216,29)"/><text x="87.4382%" y="126.50">__call__ (tvm/_ffi/..</text></g><g><title>all (27,740 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>