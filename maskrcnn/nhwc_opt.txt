File test_street_small.jpg exists, skip.
type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type Storage {
  
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type Option[A] {
  Some(A),
  None,
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

def @main(%input0: Tensor[(1, 3, 300, 300), float32]) -> (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) {
  let %x: (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) = let %storage_0: Storage[] = memory.alloc_storage(7680000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
  let %tensor_0: Tensor[(1, 800, 800, 3), float32] = memory.alloc_tensor(%storage_0, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(1, 800, 800, 3), float32] */;
  %11 = fn (%p0: Tensor[(1, 3, 300, 300), float32], %p1: Tensor[(3, 1, 1), float32], %p2: Tensor[(3, 1, 1), float32], Primitive=1) -> Tensor[(1, 800, 800, 3), float32] {
    %0 = split(%p0, indices_or_sections=1) /* ty=(Tensor[(1, 3, 300, 300), float32],) */;
    %1 = %0.0;
    %2 = squeeze(%1, axis=[0]) /* ty=Tensor[(3, 300, 300), float32] */;
    %3 = subtract(%2, %p1) /* ty=Tensor[(3, 300, 300), float32] */;
    %4 = divide(%3, %p2) /* ty=Tensor[(3, 300, 300), float32] */;
    %5 = expand_dims(%4, axis=0) /* ty=Tensor[(1, 3, 300, 300), float32] */;
    %6 = image.resize(%5, size=[800, 800]) /* ty=Tensor[(1, 3, 800, 800), float32] */;
    %7 = take(%6, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(3, 800, 800), float32] */;
    %8 = nn.pad(%7, pad_width=[[0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(3, 800, 800), float32] */;
    %9 = (%8,);
    %10 = stack(%9) /* ty=Tensor[(1, 3, 800, 800), float32] */;
    layout_transform(%10, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 800, 800, 3), float32] */
  };
  %12 = (%input0, meta[relay.Constant][1] /* ty=Tensor[(3, 1, 1), float32] */, meta[relay.Constant][2] /* ty=Tensor[(3, 1, 1), float32] */);
  %13 = (%tensor_0,);
  let %x1: () = vm.invoke_tvm_op(%11, %12, %13) /* ty=() */;
  let %x2: Tensor[(1, 800, 800, 3), float32] = %tensor_0;
  let %storage_01: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1]) /* ty=Storage[] */;
  let %tensor_01: Tensor[(1, 400, 400, 64), float32] = memory.alloc_tensor(%storage_01, 0 /* ty=int64 */, meta[relay.Constant][3] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][1]) /* ty=Tensor[(1, 400, 400, 64), float32] */;
  %16 = fn (%p01: Tensor[(1, 800, 800, 3), float32], %p11: Tensor[(7, 7, 3, 64), float32], %p21: Tensor[(1, 1, 1, 64), float32], Primitive=1) -> Tensor[(1, 400, 400, 64), float32] {
    %14 = nn.conv2d(%p01, %p11, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 400, 400, 64), float32] */;
    %15 = add(%14, %p21) /* ty=Tensor[(1, 400, 400, 64), float32] */;
    nn.relu(%15) /* ty=Tensor[(1, 400, 400, 64), float32] */
  };
  %17 = (%x2, meta[relay.Constant][4] /* ty=Tensor[(7, 7, 3, 64), float32] */, meta[relay.Constant][5] /* ty=Tensor[(1, 1, 1, 64), float32] */);
  %18 = (%tensor_01,);
  let %x3: () = vm.invoke_tvm_op(%16, %17, %18) /* ty=() */;
  let %x4: Tensor[(1, 400, 400, 64), float32] = %tensor_01;
  let %storage_02: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][2]) /* ty=Storage[] */;
  let %tensor_02: Tensor[(1, 200, 200, 64), float32] = memory.alloc_tensor(%storage_02, 0 /* ty=int64 */, meta[relay.Constant][6] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][2]) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %19 = fn (%p02: Tensor[(1, 400, 400, 64), float32], Primitive=1) -> Tensor[(1, 200, 200, 64), float32] {
    nn.max_pool2d(%p02, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1], layout="NHWC") /* ty=Tensor[(1, 200, 200, 64), float32] */
  };
  %20 = (%x4,);
  %21 = (%tensor_02,);
  let %x5: () = vm.invoke_tvm_op(%19, %20, %21) /* ty=() */;
  let %x6: Tensor[(1, 200, 200, 64), float32] = %tensor_02;
  let %storage_03: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][3]) /* ty=Storage[] */;
  let %tensor_03: Tensor[(1, 200, 200, 64), float32] = memory.alloc_tensor(%storage_03, 0 /* ty=int64 */, meta[relay.Constant][7] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][3]) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %24 = fn (%p03: Tensor[(1, 200, 200, 64), float32], %p12: Tensor[(1, 1, 64, 64), float32], %p22: Tensor[(1, 1, 1, 64), float32], Primitive=1) -> Tensor[(1, 200, 200, 64), float32] {
    %22 = nn.conv2d(%p03, %p12, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
    %23 = add(%22, %p22) /* ty=Tensor[(1, 200, 200, 64), float32] */;
    nn.relu(%23) /* ty=Tensor[(1, 200, 200, 64), float32] */
  };
  %25 = (%x6, meta[relay.Constant][8] /* ty=Tensor[(1, 1, 64, 64), float32] */, meta[relay.Constant][9] /* ty=Tensor[(1, 1, 1, 64), float32] */);
  %26 = (%tensor_03,);
  let %x7: () = vm.invoke_tvm_op(%24, %25, %26) /* ty=() */;
  let %x8: Tensor[(1, 200, 200, 64), float32] = %tensor_03;
  let %storage_04: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][4]) /* ty=Storage[] */;
  let %tensor_04: Tensor[(1, 200, 200, 64), float32] = memory.alloc_tensor(%storage_04, 0 /* ty=int64 */, meta[relay.Constant][10] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][4]) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %29 = fn (%p04: Tensor[(1, 200, 200, 64), float32], %p13: Tensor[(3, 3, 64, 64), float32], %p23: Tensor[(1, 1, 1, 64), float32], Primitive=1) -> Tensor[(1, 200, 200, 64), float32] {
    %27 = nn.conv2d(%p04, %p13, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
    %28 = add(%27, %p23) /* ty=Tensor[(1, 200, 200, 64), float32] */;
    nn.relu(%28) /* ty=Tensor[(1, 200, 200, 64), float32] */
  };
  %30 = (%x8, meta[relay.Constant][11] /* ty=Tensor[(3, 3, 64, 64), float32] */, meta[relay.Constant][12] /* ty=Tensor[(1, 1, 1, 64), float32] */);
  %31 = (%tensor_04,);
  let %x9: () = vm.invoke_tvm_op(%29, %30, %31) /* ty=() */;
  let %x10: Tensor[(1, 200, 200, 64), float32] = %tensor_04;
  let %storage_05: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][5]) /* ty=Storage[] */;
  let %tensor_05: Tensor[(1, 200, 200, 256), float32] = memory.alloc_tensor(%storage_05, 0 /* ty=int64 */, meta[relay.Constant][13] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][5]) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %33 = fn (%p05: Tensor[(1, 200, 200, 64), float32], %p14: Tensor[(1, 1, 64, 256), float32], %p24: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 200, 200, 256), float32] {
    %32 = nn.conv2d(%p05, %p14, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
    add(%32, %p24) /* ty=Tensor[(1, 200, 200, 256), float32] */
  };
  %34 = (%x6, meta[relay.Constant][14] /* ty=Tensor[(1, 1, 64, 256), float32] */, meta[relay.Constant][15] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %35 = (%tensor_05,);
  let %x11: () = vm.invoke_tvm_op(%33, %34, %35) /* ty=() */;
  let %x12: Tensor[(1, 200, 200, 256), float32] = %tensor_05;
  let %storage_06: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][6]) /* ty=Storage[] */;
  let %tensor_06: Tensor[(1, 200, 200, 256), float32] = memory.alloc_tensor(%storage_06, 0 /* ty=int64 */, meta[relay.Constant][16] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][6]) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %39 = fn (%p06: Tensor[(1, 200, 200, 64), float32], %p15: Tensor[(1, 1, 64, 256), float32], %p25: Tensor[(1, 1, 1, 256), float32], %p3: Tensor[(1, 200, 200, 256), float32], Primitive=1) -> Tensor[(1, 200, 200, 256), float32] {
    %36 = nn.conv2d(%p06, %p15, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
    %37 = add(%36, %p25) /* ty=Tensor[(1, 200, 200, 256), float32] */;
    %38 = add(%37, %p3) /* ty=Tensor[(1, 200, 200, 256), float32] */;
    nn.relu(%38) /* ty=Tensor[(1, 200, 200, 256), float32] */
  };
  %40 = (%x10, meta[relay.Constant][17] /* ty=Tensor[(1, 1, 64, 256), float32] */, meta[relay.Constant][18] /* ty=Tensor[(1, 1, 1, 256), float32] */, %x12);
  %41 = (%tensor_06,);
  let %x13: () = vm.invoke_tvm_op(%39, %40, %41) /* ty=() */;
  let %x14: Tensor[(1, 200, 200, 256), float32] = %tensor_06;
  let %storage_07: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][7]) /* ty=Storage[] */;
  let %tensor_07: Tensor[(1, 200, 200, 64), float32] = memory.alloc_tensor(%storage_07, 0 /* ty=int64 */, meta[relay.Constant][19] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][7]) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %44 = fn (%p07: Tensor[(1, 200, 200, 256), float32], %p16: Tensor[(1, 1, 256, 64), float32], %p26: Tensor[(1, 1, 1, 64), float32], Primitive=1) -> Tensor[(1, 200, 200, 64), float32] {
    %42 = nn.conv2d(%p07, %p16, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
    %43 = add(%42, %p26) /* ty=Tensor[(1, 200, 200, 64), float32] */;
    nn.relu(%43) /* ty=Tensor[(1, 200, 200, 64), float32] */
  };
  %45 = (%x14, meta[relay.Constant][20] /* ty=Tensor[(1, 1, 256, 64), float32] */, meta[relay.Constant][21] /* ty=Tensor[(1, 1, 1, 64), float32] */);
  %46 = (%tensor_07,);
  let %x15: () = vm.invoke_tvm_op(%44, %45, %46) /* ty=() */;
  let %x16: Tensor[(1, 200, 200, 64), float32] = %tensor_07;
  let %storage_08: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][8]) /* ty=Storage[] */;
  let %tensor_08: Tensor[(1, 200, 200, 64), float32] = memory.alloc_tensor(%storage_08, 0 /* ty=int64 */, meta[relay.Constant][22] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][8]) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %49 = fn (%p08: Tensor[(1, 200, 200, 64), float32], %p17: Tensor[(3, 3, 64, 64), float32], %p27: Tensor[(1, 1, 1, 64), float32], Primitive=1) -> Tensor[(1, 200, 200, 64), float32] {
    %47 = nn.conv2d(%p08, %p17, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
    %48 = add(%47, %p27) /* ty=Tensor[(1, 200, 200, 64), float32] */;
    nn.relu(%48) /* ty=Tensor[(1, 200, 200, 64), float32] */
  };
  %50 = (%x16, meta[relay.Constant][23] /* ty=Tensor[(3, 3, 64, 64), float32] */, meta[relay.Constant][24] /* ty=Tensor[(1, 1, 1, 64), float32] */);
  %51 = (%tensor_08,);
  let %x17: () = vm.invoke_tvm_op(%49, %50, %51) /* ty=() */;
  let %x18: Tensor[(1, 200, 200, 64), float32] = %tensor_08;
  let %storage_09: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][9]) /* ty=Storage[] */;
  let %tensor_09: Tensor[(1, 200, 200, 256), float32] = memory.alloc_tensor(%storage_09, 0 /* ty=int64 */, meta[relay.Constant][25] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][9]) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %55 = fn (%p09: Tensor[(1, 200, 200, 64), float32], %p18: Tensor[(1, 1, 64, 256), float32], %p28: Tensor[(1, 1, 1, 256), float32], %p31: Tensor[(1, 200, 200, 256), float32], Primitive=1) -> Tensor[(1, 200, 200, 256), float32] {
    %52 = nn.conv2d(%p09, %p18, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
    %53 = add(%52, %p28) /* ty=Tensor[(1, 200, 200, 256), float32] */;
    %54 = add(%53, %p31) /* ty=Tensor[(1, 200, 200, 256), float32] */;
    nn.relu(%54) /* ty=Tensor[(1, 200, 200, 256), float32] */
  };
  %56 = (%x18, meta[relay.Constant][26] /* ty=Tensor[(1, 1, 64, 256), float32] */, meta[relay.Constant][27] /* ty=Tensor[(1, 1, 1, 256), float32] */, %x14);
  %57 = (%tensor_09,);
  let %x19: () = vm.invoke_tvm_op(%55, %56, %57) /* ty=() */;
  let %x20: Tensor[(1, 200, 200, 256), float32] = %tensor_09;
  let %storage_010: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][10]) /* ty=Storage[] */;
  let %tensor_010: Tensor[(1, 200, 200, 64), float32] = memory.alloc_tensor(%storage_010, 0 /* ty=int64 */, meta[relay.Constant][28] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][10]) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %60 = fn (%p010: Tensor[(1, 200, 200, 256), float32], %p19: Tensor[(1, 1, 256, 64), float32], %p29: Tensor[(1, 1, 1, 64), float32], Primitive=1) -> Tensor[(1, 200, 200, 64), float32] {
    %58 = nn.conv2d(%p010, %p19, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
    %59 = add(%58, %p29) /* ty=Tensor[(1, 200, 200, 64), float32] */;
    nn.relu(%59) /* ty=Tensor[(1, 200, 200, 64), float32] */
  };
  %61 = (%x20, meta[relay.Constant][29] /* ty=Tensor[(1, 1, 256, 64), float32] */, meta[relay.Constant][30] /* ty=Tensor[(1, 1, 1, 64), float32] */);
  %62 = (%tensor_010,);
  let %x21: () = vm.invoke_tvm_op(%60, %61, %62) /* ty=() */;
  let %x22: Tensor[(1, 200, 200, 64), float32] = %tensor_010;
  let %storage_011: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][11]) /* ty=Storage[] */;
  let %tensor_011: Tensor[(1, 200, 200, 64), float32] = memory.alloc_tensor(%storage_011, 0 /* ty=int64 */, meta[relay.Constant][31] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][11]) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %65 = fn (%p011: Tensor[(1, 200, 200, 64), float32], %p110: Tensor[(3, 3, 64, 64), float32], %p210: Tensor[(1, 1, 1, 64), float32], Primitive=1) -> Tensor[(1, 200, 200, 64), float32] {
    %63 = nn.conv2d(%p011, %p110, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
    %64 = add(%63, %p210) /* ty=Tensor[(1, 200, 200, 64), float32] */;
    nn.relu(%64) /* ty=Tensor[(1, 200, 200, 64), float32] */
  };
  %66 = (%x22, meta[relay.Constant][32] /* ty=Tensor[(3, 3, 64, 64), float32] */, meta[relay.Constant][33] /* ty=Tensor[(1, 1, 1, 64), float32] */);
  %67 = (%tensor_011,);
  let %x23: () = vm.invoke_tvm_op(%65, %66, %67) /* ty=() */;
  let %x24: Tensor[(1, 200, 200, 64), float32] = %tensor_011;
  let %storage_012: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][12]) /* ty=Storage[] */;
  let %tensor_012: Tensor[(1, 200, 200, 256), float32] = memory.alloc_tensor(%storage_012, 0 /* ty=int64 */, meta[relay.Constant][34] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][12]) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %71 = fn (%p012: Tensor[(1, 200, 200, 64), float32], %p111: Tensor[(1, 1, 64, 256), float32], %p211: Tensor[(1, 1, 1, 256), float32], %p32: Tensor[(1, 200, 200, 256), float32], Primitive=1) -> Tensor[(1, 200, 200, 256), float32] {
    %68 = nn.conv2d(%p012, %p111, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
    %69 = add(%68, %p211) /* ty=Tensor[(1, 200, 200, 256), float32] */;
    %70 = add(%69, %p32) /* ty=Tensor[(1, 200, 200, 256), float32] */;
    nn.relu(%70) /* ty=Tensor[(1, 200, 200, 256), float32] */
  };
  %72 = (%x24, meta[relay.Constant][35] /* ty=Tensor[(1, 1, 64, 256), float32] */, meta[relay.Constant][36] /* ty=Tensor[(1, 1, 1, 256), float32] */, %x20);
  %73 = (%tensor_012,);
  let %x25: () = vm.invoke_tvm_op(%71, %72, %73) /* ty=() */;
  let %x26: Tensor[(1, 200, 200, 256), float32] = %tensor_012;
  let %storage_013: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][13]) /* ty=Storage[] */;
  let %tensor_013: Tensor[(1, 200, 200, 128), float32] = memory.alloc_tensor(%storage_013, 0 /* ty=int64 */, meta[relay.Constant][37] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][13]) /* ty=Tensor[(1, 200, 200, 128), float32] */;
  %76 = fn (%p013: Tensor[(1, 200, 200, 256), float32], %p112: Tensor[(1, 1, 256, 128), float32], %p212: Tensor[(1, 1, 1, 128), float32], Primitive=1) -> Tensor[(1, 200, 200, 128), float32] {
    %74 = nn.conv2d(%p013, %p112, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 128), float32] */;
    %75 = add(%74, %p212) /* ty=Tensor[(1, 200, 200, 128), float32] */;
    nn.relu(%75) /* ty=Tensor[(1, 200, 200, 128), float32] */
  };
  %77 = (%x26, meta[relay.Constant][38] /* ty=Tensor[(1, 1, 256, 128), float32] */, meta[relay.Constant][39] /* ty=Tensor[(1, 1, 1, 128), float32] */);
  %78 = (%tensor_013,);
  let %x27: () = vm.invoke_tvm_op(%76, %77, %78) /* ty=() */;
  let %x28: Tensor[(1, 200, 200, 128), float32] = %tensor_013;
  let %storage_014: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][14]) /* ty=Storage[] */;
  let %tensor_014: Tensor[(1, 100, 100, 128), float32] = memory.alloc_tensor(%storage_014, 0 /* ty=int64 */, meta[relay.Constant][40] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][14]) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %81 = fn (%p014: Tensor[(1, 200, 200, 128), float32], %p113: Tensor[(3, 3, 128, 128), float32], %p213: Tensor[(1, 1, 1, 128), float32], Primitive=1) -> Tensor[(1, 100, 100, 128), float32] {
    %79 = nn.conv2d(%p014, %p113, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
    %80 = add(%79, %p213) /* ty=Tensor[(1, 100, 100, 128), float32] */;
    nn.relu(%80) /* ty=Tensor[(1, 100, 100, 128), float32] */
  };
  %82 = (%x28, meta[relay.Constant][41] /* ty=Tensor[(3, 3, 128, 128), float32] */, meta[relay.Constant][42] /* ty=Tensor[(1, 1, 1, 128), float32] */);
  %83 = (%tensor_014,);
  let %x29: () = vm.invoke_tvm_op(%81, %82, %83) /* ty=() */;
  let %x30: Tensor[(1, 100, 100, 128), float32] = %tensor_014;
  let %storage_015: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][15]) /* ty=Storage[] */;
  let %tensor_015: Tensor[(1, 100, 100, 512), float32] = memory.alloc_tensor(%storage_015, 0 /* ty=int64 */, meta[relay.Constant][43] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][15]) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %85 = fn (%p015: Tensor[(1, 200, 200, 256), float32], %p114: Tensor[(1, 1, 256, 512), float32], %p214: Tensor[(1, 1, 1, 512), float32], Primitive=1) -> Tensor[(1, 100, 100, 512), float32] {
    %84 = nn.conv2d(%p015, %p114, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
    add(%84, %p214) /* ty=Tensor[(1, 100, 100, 512), float32] */
  };
  %86 = (%x26, meta[relay.Constant][44] /* ty=Tensor[(1, 1, 256, 512), float32] */, meta[relay.Constant][45] /* ty=Tensor[(1, 1, 1, 512), float32] */);
  %87 = (%tensor_015,);
  let %x31: () = vm.invoke_tvm_op(%85, %86, %87) /* ty=() */;
  let %x32: Tensor[(1, 100, 100, 512), float32] = %tensor_015;
  let %storage_016: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][16]) /* ty=Storage[] */;
  let %tensor_016: Tensor[(1, 100, 100, 512), float32] = memory.alloc_tensor(%storage_016, 0 /* ty=int64 */, meta[relay.Constant][46] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][16]) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %91 = fn (%p016: Tensor[(1, 100, 100, 128), float32], %p115: Tensor[(1, 1, 128, 512), float32], %p215: Tensor[(1, 1, 1, 512), float32], %p33: Tensor[(1, 100, 100, 512), float32], Primitive=1) -> Tensor[(1, 100, 100, 512), float32] {
    %88 = nn.conv2d(%p016, %p115, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
    %89 = add(%88, %p215) /* ty=Tensor[(1, 100, 100, 512), float32] */;
    %90 = add(%89, %p33) /* ty=Tensor[(1, 100, 100, 512), float32] */;
    nn.relu(%90) /* ty=Tensor[(1, 100, 100, 512), float32] */
  };
  %92 = (%x30, meta[relay.Constant][47] /* ty=Tensor[(1, 1, 128, 512), float32] */, meta[relay.Constant][48] /* ty=Tensor[(1, 1, 1, 512), float32] */, %x32);
  %93 = (%tensor_016,);
  let %x33: () = vm.invoke_tvm_op(%91, %92, %93) /* ty=() */;
  let %x34: Tensor[(1, 100, 100, 512), float32] = %tensor_016;
  let %storage_017: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][17]) /* ty=Storage[] */;
  let %tensor_017: Tensor[(1, 100, 100, 128), float32] = memory.alloc_tensor(%storage_017, 0 /* ty=int64 */, meta[relay.Constant][49] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][17]) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %96 = fn (%p017: Tensor[(1, 100, 100, 512), float32], %p116: Tensor[(1, 1, 512, 128), float32], %p216: Tensor[(1, 1, 1, 128), float32], Primitive=1) -> Tensor[(1, 100, 100, 128), float32] {
    %94 = nn.conv2d(%p017, %p116, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
    %95 = add(%94, %p216) /* ty=Tensor[(1, 100, 100, 128), float32] */;
    nn.relu(%95) /* ty=Tensor[(1, 100, 100, 128), float32] */
  };
  %97 = (%x34, meta[relay.Constant][50] /* ty=Tensor[(1, 1, 512, 128), float32] */, meta[relay.Constant][51] /* ty=Tensor[(1, 1, 1, 128), float32] */);
  %98 = (%tensor_017,);
  let %x35: () = vm.invoke_tvm_op(%96, %97, %98) /* ty=() */;
  let %x36: Tensor[(1, 100, 100, 128), float32] = %tensor_017;
  let %storage_018: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][18]) /* ty=Storage[] */;
  let %tensor_018: Tensor[(1, 100, 100, 128), float32] = memory.alloc_tensor(%storage_018, 0 /* ty=int64 */, meta[relay.Constant][52] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][18]) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %101 = fn (%p018: Tensor[(1, 100, 100, 128), float32], %p117: Tensor[(3, 3, 128, 128), float32], %p217: Tensor[(1, 1, 1, 128), float32], Primitive=1) -> Tensor[(1, 100, 100, 128), float32] {
    %99 = nn.conv2d(%p018, %p117, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
    %100 = add(%99, %p217) /* ty=Tensor[(1, 100, 100, 128), float32] */;
    nn.relu(%100) /* ty=Tensor[(1, 100, 100, 128), float32] */
  };
  %102 = (%x36, meta[relay.Constant][53] /* ty=Tensor[(3, 3, 128, 128), float32] */, meta[relay.Constant][54] /* ty=Tensor[(1, 1, 1, 128), float32] */);
  %103 = (%tensor_018,);
  let %x37: () = vm.invoke_tvm_op(%101, %102, %103) /* ty=() */;
  let %x38: Tensor[(1, 100, 100, 128), float32] = %tensor_018;
  let %storage_019: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][19]) /* ty=Storage[] */;
  let %tensor_019: Tensor[(1, 100, 100, 512), float32] = memory.alloc_tensor(%storage_019, 0 /* ty=int64 */, meta[relay.Constant][55] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][19]) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %107 = fn (%p019: Tensor[(1, 100, 100, 128), float32], %p118: Tensor[(1, 1, 128, 512), float32], %p218: Tensor[(1, 1, 1, 512), float32], %p34: Tensor[(1, 100, 100, 512), float32], Primitive=1) -> Tensor[(1, 100, 100, 512), float32] {
    %104 = nn.conv2d(%p019, %p118, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
    %105 = add(%104, %p218) /* ty=Tensor[(1, 100, 100, 512), float32] */;
    %106 = add(%105, %p34) /* ty=Tensor[(1, 100, 100, 512), float32] */;
    nn.relu(%106) /* ty=Tensor[(1, 100, 100, 512), float32] */
  };
  %108 = (%x38, meta[relay.Constant][56] /* ty=Tensor[(1, 1, 128, 512), float32] */, meta[relay.Constant][57] /* ty=Tensor[(1, 1, 1, 512), float32] */, %x34);
  %109 = (%tensor_019,);
  let %x39: () = vm.invoke_tvm_op(%107, %108, %109) /* ty=() */;
  let %x40: Tensor[(1, 100, 100, 512), float32] = %tensor_019;
  let %storage_020: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][20]) /* ty=Storage[] */;
  let %tensor_020: Tensor[(1, 100, 100, 128), float32] = memory.alloc_tensor(%storage_020, 0 /* ty=int64 */, meta[relay.Constant][58] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][20]) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %112 = fn (%p020: Tensor[(1, 100, 100, 512), float32], %p119: Tensor[(1, 1, 512, 128), float32], %p219: Tensor[(1, 1, 1, 128), float32], Primitive=1) -> Tensor[(1, 100, 100, 128), float32] {
    %110 = nn.conv2d(%p020, %p119, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
    %111 = add(%110, %p219) /* ty=Tensor[(1, 100, 100, 128), float32] */;
    nn.relu(%111) /* ty=Tensor[(1, 100, 100, 128), float32] */
  };
  %113 = (%x40, meta[relay.Constant][59] /* ty=Tensor[(1, 1, 512, 128), float32] */, meta[relay.Constant][60] /* ty=Tensor[(1, 1, 1, 128), float32] */);
  %114 = (%tensor_020,);
  let %x41: () = vm.invoke_tvm_op(%112, %113, %114) /* ty=() */;
  let %x42: Tensor[(1, 100, 100, 128), float32] = %tensor_020;
  let %storage_021: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][21]) /* ty=Storage[] */;
  let %tensor_021: Tensor[(1, 100, 100, 128), float32] = memory.alloc_tensor(%storage_021, 0 /* ty=int64 */, meta[relay.Constant][61] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][21]) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %117 = fn (%p021: Tensor[(1, 100, 100, 128), float32], %p120: Tensor[(3, 3, 128, 128), float32], %p220: Tensor[(1, 1, 1, 128), float32], Primitive=1) -> Tensor[(1, 100, 100, 128), float32] {
    %115 = nn.conv2d(%p021, %p120, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
    %116 = add(%115, %p220) /* ty=Tensor[(1, 100, 100, 128), float32] */;
    nn.relu(%116) /* ty=Tensor[(1, 100, 100, 128), float32] */
  };
  %118 = (%x42, meta[relay.Constant][62] /* ty=Tensor[(3, 3, 128, 128), float32] */, meta[relay.Constant][63] /* ty=Tensor[(1, 1, 1, 128), float32] */);
  %119 = (%tensor_021,);
  let %x43: () = vm.invoke_tvm_op(%117, %118, %119) /* ty=() */;
  let %x44: Tensor[(1, 100, 100, 128), float32] = %tensor_021;
  let %storage_022: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][22]) /* ty=Storage[] */;
  let %tensor_022: Tensor[(1, 100, 100, 512), float32] = memory.alloc_tensor(%storage_022, 0 /* ty=int64 */, meta[relay.Constant][64] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][22]) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %123 = fn (%p022: Tensor[(1, 100, 100, 128), float32], %p121: Tensor[(1, 1, 128, 512), float32], %p221: Tensor[(1, 1, 1, 512), float32], %p35: Tensor[(1, 100, 100, 512), float32], Primitive=1) -> Tensor[(1, 100, 100, 512), float32] {
    %120 = nn.conv2d(%p022, %p121, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
    %121 = add(%120, %p221) /* ty=Tensor[(1, 100, 100, 512), float32] */;
    %122 = add(%121, %p35) /* ty=Tensor[(1, 100, 100, 512), float32] */;
    nn.relu(%122) /* ty=Tensor[(1, 100, 100, 512), float32] */
  };
  %124 = (%x44, meta[relay.Constant][65] /* ty=Tensor[(1, 1, 128, 512), float32] */, meta[relay.Constant][66] /* ty=Tensor[(1, 1, 1, 512), float32] */, %x40);
  %125 = (%tensor_022,);
  let %x45: () = vm.invoke_tvm_op(%123, %124, %125) /* ty=() */;
  let %x46: Tensor[(1, 100, 100, 512), float32] = %tensor_022;
  let %storage_023: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][23]) /* ty=Storage[] */;
  let %tensor_023: Tensor[(1, 100, 100, 128), float32] = memory.alloc_tensor(%storage_023, 0 /* ty=int64 */, meta[relay.Constant][67] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][23]) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %128 = fn (%p023: Tensor[(1, 100, 100, 512), float32], %p122: Tensor[(1, 1, 512, 128), float32], %p222: Tensor[(1, 1, 1, 128), float32], Primitive=1) -> Tensor[(1, 100, 100, 128), float32] {
    %126 = nn.conv2d(%p023, %p122, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
    %127 = add(%126, %p222) /* ty=Tensor[(1, 100, 100, 128), float32] */;
    nn.relu(%127) /* ty=Tensor[(1, 100, 100, 128), float32] */
  };
  %129 = (%x46, meta[relay.Constant][68] /* ty=Tensor[(1, 1, 512, 128), float32] */, meta[relay.Constant][69] /* ty=Tensor[(1, 1, 1, 128), float32] */);
  %130 = (%tensor_023,);
  let %x47: () = vm.invoke_tvm_op(%128, %129, %130) /* ty=() */;
  let %x48: Tensor[(1, 100, 100, 128), float32] = %tensor_023;
  let %storage_024: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][24]) /* ty=Storage[] */;
  let %tensor_024: Tensor[(1, 100, 100, 128), float32] = memory.alloc_tensor(%storage_024, 0 /* ty=int64 */, meta[relay.Constant][70] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][24]) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %133 = fn (%p024: Tensor[(1, 100, 100, 128), float32], %p123: Tensor[(3, 3, 128, 128), float32], %p223: Tensor[(1, 1, 1, 128), float32], Primitive=1) -> Tensor[(1, 100, 100, 128), float32] {
    %131 = nn.conv2d(%p024, %p123, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
    %132 = add(%131, %p223) /* ty=Tensor[(1, 100, 100, 128), float32] */;
    nn.relu(%132) /* ty=Tensor[(1, 100, 100, 128), float32] */
  };
  %134 = (%x48, meta[relay.Constant][71] /* ty=Tensor[(3, 3, 128, 128), float32] */, meta[relay.Constant][72] /* ty=Tensor[(1, 1, 1, 128), float32] */);
  %135 = (%tensor_024,);
  let %x49: () = vm.invoke_tvm_op(%133, %134, %135) /* ty=() */;
  let %x50: Tensor[(1, 100, 100, 128), float32] = %tensor_024;
  let %storage_025: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][25]) /* ty=Storage[] */;
  let %tensor_025: Tensor[(1, 100, 100, 512), float32] = memory.alloc_tensor(%storage_025, 0 /* ty=int64 */, meta[relay.Constant][73] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][25]) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %139 = fn (%p025: Tensor[(1, 100, 100, 128), float32], %p124: Tensor[(1, 1, 128, 512), float32], %p224: Tensor[(1, 1, 1, 512), float32], %p36: Tensor[(1, 100, 100, 512), float32], Primitive=1) -> Tensor[(1, 100, 100, 512), float32] {
    %136 = nn.conv2d(%p025, %p124, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
    %137 = add(%136, %p224) /* ty=Tensor[(1, 100, 100, 512), float32] */;
    %138 = add(%137, %p36) /* ty=Tensor[(1, 100, 100, 512), float32] */;
    nn.relu(%138) /* ty=Tensor[(1, 100, 100, 512), float32] */
  };
  %140 = (%x50, meta[relay.Constant][74] /* ty=Tensor[(1, 1, 128, 512), float32] */, meta[relay.Constant][75] /* ty=Tensor[(1, 1, 1, 512), float32] */, %x46);
  %141 = (%tensor_025,);
  let %x51: () = vm.invoke_tvm_op(%139, %140, %141) /* ty=() */;
  let %x52: Tensor[(1, 100, 100, 512), float32] = %tensor_025;
  let %storage_026: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][26]) /* ty=Storage[] */;
  let %tensor_026: Tensor[(1, 100, 100, 256), float32] = memory.alloc_tensor(%storage_026, 0 /* ty=int64 */, meta[relay.Constant][76] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][26]) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %144 = fn (%p026: Tensor[(1, 100, 100, 512), float32], %p125: Tensor[(1, 1, 512, 256), float32], %p225: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 100, 100, 256), float32] {
    %142 = nn.conv2d(%p026, %p125, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
    %143 = add(%142, %p225) /* ty=Tensor[(1, 100, 100, 256), float32] */;
    nn.relu(%143) /* ty=Tensor[(1, 100, 100, 256), float32] */
  };
  %145 = (%x52, meta[relay.Constant][77] /* ty=Tensor[(1, 1, 512, 256), float32] */, meta[relay.Constant][78] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %146 = (%tensor_026,);
  let %x53: () = vm.invoke_tvm_op(%144, %145, %146) /* ty=() */;
  let %x54: Tensor[(1, 100, 100, 256), float32] = %tensor_026;
  let %storage_027: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][27]) /* ty=Storage[] */;
  let %tensor_027: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_027, 0 /* ty=int64 */, meta[relay.Constant][79] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][27]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %149 = fn (%p027: Tensor[(1, 100, 100, 256), float32], %p126: Tensor[(3, 3, 256, 256), float32], %p226: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %147 = nn.conv2d(%p027, %p126, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %148 = add(%147, %p226) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%148) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %150 = (%x54, meta[relay.Constant][80] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][81] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %151 = (%tensor_027,);
  let %x55: () = vm.invoke_tvm_op(%149, %150, %151) /* ty=() */;
  let %x56: Tensor[(1, 50, 50, 256), float32] = %tensor_027;
  let %storage_028: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][28]) /* ty=Storage[] */;
  let %tensor_028: Tensor[(1, 50, 50, 1024), float32] = memory.alloc_tensor(%storage_028, 0 /* ty=int64 */, meta[relay.Constant][82] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][28]) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %153 = fn (%p028: Tensor[(1, 100, 100, 512), float32], %p127: Tensor[(1, 1, 512, 1024), float32], %p227: Tensor[(1, 1, 1, 1024), float32], Primitive=1) -> Tensor[(1, 50, 50, 1024), float32] {
    %152 = nn.conv2d(%p028, %p127, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    add(%152, %p227) /* ty=Tensor[(1, 50, 50, 1024), float32] */
  };
  %154 = (%x52, meta[relay.Constant][83] /* ty=Tensor[(1, 1, 512, 1024), float32] */, meta[relay.Constant][84] /* ty=Tensor[(1, 1, 1, 1024), float32] */);
  %155 = (%tensor_028,);
  let %x57: () = vm.invoke_tvm_op(%153, %154, %155) /* ty=() */;
  let %x58: Tensor[(1, 50, 50, 1024), float32] = %tensor_028;
  let %storage_029: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][29]) /* ty=Storage[] */;
  let %tensor_029: Tensor[(1, 50, 50, 1024), float32] = memory.alloc_tensor(%storage_029, 0 /* ty=int64 */, meta[relay.Constant][85] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][29]) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %159 = fn (%p029: Tensor[(1, 50, 50, 256), float32], %p128: Tensor[(1, 1, 256, 1024), float32], %p228: Tensor[(1, 1, 1, 1024), float32], %p37: Tensor[(1, 50, 50, 1024), float32], Primitive=1) -> Tensor[(1, 50, 50, 1024), float32] {
    %156 = nn.conv2d(%p029, %p128, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %157 = add(%156, %p228) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %158 = add(%157, %p37) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    nn.relu(%158) /* ty=Tensor[(1, 50, 50, 1024), float32] */
  };
  %160 = (%x56, meta[relay.Constant][86] /* ty=Tensor[(1, 1, 256, 1024), float32] */, meta[relay.Constant][87] /* ty=Tensor[(1, 1, 1, 1024), float32] */, %x58);
  %161 = (%tensor_029,);
  let %x59: () = vm.invoke_tvm_op(%159, %160, %161) /* ty=() */;
  let %x60: Tensor[(1, 50, 50, 1024), float32] = %tensor_029;
  let %storage_030: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][30]) /* ty=Storage[] */;
  let %tensor_030: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_030, 0 /* ty=int64 */, meta[relay.Constant][88] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][30]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %164 = fn (%p030: Tensor[(1, 50, 50, 1024), float32], %p129: Tensor[(1, 1, 1024, 256), float32], %p229: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %162 = nn.conv2d(%p030, %p129, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %163 = add(%162, %p229) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%163) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %165 = (%x60, meta[relay.Constant][89] /* ty=Tensor[(1, 1, 1024, 256), float32] */, meta[relay.Constant][90] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %166 = (%tensor_030,);
  let %x61: () = vm.invoke_tvm_op(%164, %165, %166) /* ty=() */;
  let %x62: Tensor[(1, 50, 50, 256), float32] = %tensor_030;
  let %storage_031: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][31]) /* ty=Storage[] */;
  let %tensor_031: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_031, 0 /* ty=int64 */, meta[relay.Constant][91] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][31]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %169 = fn (%p031: Tensor[(1, 50, 50, 256), float32], %p130: Tensor[(3, 3, 256, 256), float32], %p230: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %167 = nn.conv2d(%p031, %p130, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %168 = add(%167, %p230) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%168) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %170 = (%x62, meta[relay.Constant][92] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][93] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %171 = (%tensor_031,);
  let %x63: () = vm.invoke_tvm_op(%169, %170, %171) /* ty=() */;
  let %x64: Tensor[(1, 50, 50, 256), float32] = %tensor_031;
  let %storage_032: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][32]) /* ty=Storage[] */;
  let %tensor_032: Tensor[(1, 50, 50, 1024), float32] = memory.alloc_tensor(%storage_032, 0 /* ty=int64 */, meta[relay.Constant][94] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][32]) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %175 = fn (%p032: Tensor[(1, 50, 50, 256), float32], %p131: Tensor[(1, 1, 256, 1024), float32], %p231: Tensor[(1, 1, 1, 1024), float32], %p38: Tensor[(1, 50, 50, 1024), float32], Primitive=1) -> Tensor[(1, 50, 50, 1024), float32] {
    %172 = nn.conv2d(%p032, %p131, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %173 = add(%172, %p231) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %174 = add(%173, %p38) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    nn.relu(%174) /* ty=Tensor[(1, 50, 50, 1024), float32] */
  };
  %176 = (%x64, meta[relay.Constant][95] /* ty=Tensor[(1, 1, 256, 1024), float32] */, meta[relay.Constant][96] /* ty=Tensor[(1, 1, 1, 1024), float32] */, %x60);
  %177 = (%tensor_032,);
  let %x65: () = vm.invoke_tvm_op(%175, %176, %177) /* ty=() */;
  let %x66: Tensor[(1, 50, 50, 1024), float32] = %tensor_032;
  let %storage_033: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][33]) /* ty=Storage[] */;
  let %tensor_033: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_033, 0 /* ty=int64 */, meta[relay.Constant][97] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][33]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %180 = fn (%p033: Tensor[(1, 50, 50, 1024), float32], %p132: Tensor[(1, 1, 1024, 256), float32], %p232: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %178 = nn.conv2d(%p033, %p132, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %179 = add(%178, %p232) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%179) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %181 = (%x66, meta[relay.Constant][98] /* ty=Tensor[(1, 1, 1024, 256), float32] */, meta[relay.Constant][99] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %182 = (%tensor_033,);
  let %x67: () = vm.invoke_tvm_op(%180, %181, %182) /* ty=() */;
  let %x68: Tensor[(1, 50, 50, 256), float32] = %tensor_033;
  let %storage_034: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][34]) /* ty=Storage[] */;
  let %tensor_034: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_034, 0 /* ty=int64 */, meta[relay.Constant][100] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][34]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %185 = fn (%p034: Tensor[(1, 50, 50, 256), float32], %p133: Tensor[(3, 3, 256, 256), float32], %p233: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %183 = nn.conv2d(%p034, %p133, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %184 = add(%183, %p233) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%184) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %186 = (%x68, meta[relay.Constant][101] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][102] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %187 = (%tensor_034,);
  let %x69: () = vm.invoke_tvm_op(%185, %186, %187) /* ty=() */;
  let %x70: Tensor[(1, 50, 50, 256), float32] = %tensor_034;
  let %storage_035: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][35]) /* ty=Storage[] */;
  let %tensor_035: Tensor[(1, 50, 50, 1024), float32] = memory.alloc_tensor(%storage_035, 0 /* ty=int64 */, meta[relay.Constant][103] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][35]) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %191 = fn (%p035: Tensor[(1, 50, 50, 256), float32], %p134: Tensor[(1, 1, 256, 1024), float32], %p234: Tensor[(1, 1, 1, 1024), float32], %p39: Tensor[(1, 50, 50, 1024), float32], Primitive=1) -> Tensor[(1, 50, 50, 1024), float32] {
    %188 = nn.conv2d(%p035, %p134, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %189 = add(%188, %p234) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %190 = add(%189, %p39) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    nn.relu(%190) /* ty=Tensor[(1, 50, 50, 1024), float32] */
  };
  %192 = (%x70, meta[relay.Constant][104] /* ty=Tensor[(1, 1, 256, 1024), float32] */, meta[relay.Constant][105] /* ty=Tensor[(1, 1, 1, 1024), float32] */, %x66);
  %193 = (%tensor_035,);
  let %x71: () = vm.invoke_tvm_op(%191, %192, %193) /* ty=() */;
  let %x72: Tensor[(1, 50, 50, 1024), float32] = %tensor_035;
  let %storage_036: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][36]) /* ty=Storage[] */;
  let %tensor_036: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_036, 0 /* ty=int64 */, meta[relay.Constant][106] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][36]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %196 = fn (%p036: Tensor[(1, 50, 50, 1024), float32], %p135: Tensor[(1, 1, 1024, 256), float32], %p235: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %194 = nn.conv2d(%p036, %p135, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %195 = add(%194, %p235) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%195) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %197 = (%x72, meta[relay.Constant][107] /* ty=Tensor[(1, 1, 1024, 256), float32] */, meta[relay.Constant][108] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %198 = (%tensor_036,);
  let %x73: () = vm.invoke_tvm_op(%196, %197, %198) /* ty=() */;
  let %x74: Tensor[(1, 50, 50, 256), float32] = %tensor_036;
  let %storage_037: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][37]) /* ty=Storage[] */;
  let %tensor_037: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_037, 0 /* ty=int64 */, meta[relay.Constant][109] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][37]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %201 = fn (%p037: Tensor[(1, 50, 50, 256), float32], %p136: Tensor[(3, 3, 256, 256), float32], %p236: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %199 = nn.conv2d(%p037, %p136, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %200 = add(%199, %p236) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%200) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %202 = (%x74, meta[relay.Constant][110] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][111] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %203 = (%tensor_037,);
  let %x75: () = vm.invoke_tvm_op(%201, %202, %203) /* ty=() */;
  let %x76: Tensor[(1, 50, 50, 256), float32] = %tensor_037;
  let %storage_038: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][38]) /* ty=Storage[] */;
  let %tensor_038: Tensor[(1, 50, 50, 1024), float32] = memory.alloc_tensor(%storage_038, 0 /* ty=int64 */, meta[relay.Constant][112] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][38]) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %207 = fn (%p038: Tensor[(1, 50, 50, 256), float32], %p137: Tensor[(1, 1, 256, 1024), float32], %p237: Tensor[(1, 1, 1, 1024), float32], %p310: Tensor[(1, 50, 50, 1024), float32], Primitive=1) -> Tensor[(1, 50, 50, 1024), float32] {
    %204 = nn.conv2d(%p038, %p137, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %205 = add(%204, %p237) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %206 = add(%205, %p310) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    nn.relu(%206) /* ty=Tensor[(1, 50, 50, 1024), float32] */
  };
  %208 = (%x76, meta[relay.Constant][113] /* ty=Tensor[(1, 1, 256, 1024), float32] */, meta[relay.Constant][114] /* ty=Tensor[(1, 1, 1, 1024), float32] */, %x72);
  %209 = (%tensor_038,);
  let %x77: () = vm.invoke_tvm_op(%207, %208, %209) /* ty=() */;
  let %x78: Tensor[(1, 50, 50, 1024), float32] = %tensor_038;
  let %storage_039: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][39]) /* ty=Storage[] */;
  let %tensor_039: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_039, 0 /* ty=int64 */, meta[relay.Constant][115] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][39]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %212 = fn (%p039: Tensor[(1, 50, 50, 1024), float32], %p138: Tensor[(1, 1, 1024, 256), float32], %p238: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %210 = nn.conv2d(%p039, %p138, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %211 = add(%210, %p238) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%211) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %213 = (%x78, meta[relay.Constant][116] /* ty=Tensor[(1, 1, 1024, 256), float32] */, meta[relay.Constant][117] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %214 = (%tensor_039,);
  let %x79: () = vm.invoke_tvm_op(%212, %213, %214) /* ty=() */;
  let %x80: Tensor[(1, 50, 50, 256), float32] = %tensor_039;
  let %storage_040: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][40]) /* ty=Storage[] */;
  let %tensor_040: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_040, 0 /* ty=int64 */, meta[relay.Constant][118] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][40]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %217 = fn (%p040: Tensor[(1, 50, 50, 256), float32], %p139: Tensor[(3, 3, 256, 256), float32], %p239: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %215 = nn.conv2d(%p040, %p139, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %216 = add(%215, %p239) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%216) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %218 = (%x80, meta[relay.Constant][119] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][120] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %219 = (%tensor_040,);
  let %x81: () = vm.invoke_tvm_op(%217, %218, %219) /* ty=() */;
  let %x82: Tensor[(1, 50, 50, 256), float32] = %tensor_040;
  let %storage_041: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][41]) /* ty=Storage[] */;
  let %tensor_041: Tensor[(1, 50, 50, 1024), float32] = memory.alloc_tensor(%storage_041, 0 /* ty=int64 */, meta[relay.Constant][121] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][41]) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %223 = fn (%p041: Tensor[(1, 50, 50, 256), float32], %p140: Tensor[(1, 1, 256, 1024), float32], %p240: Tensor[(1, 1, 1, 1024), float32], %p311: Tensor[(1, 50, 50, 1024), float32], Primitive=1) -> Tensor[(1, 50, 50, 1024), float32] {
    %220 = nn.conv2d(%p041, %p140, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %221 = add(%220, %p240) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %222 = add(%221, %p311) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    nn.relu(%222) /* ty=Tensor[(1, 50, 50, 1024), float32] */
  };
  %224 = (%x82, meta[relay.Constant][122] /* ty=Tensor[(1, 1, 256, 1024), float32] */, meta[relay.Constant][123] /* ty=Tensor[(1, 1, 1, 1024), float32] */, %x78);
  %225 = (%tensor_041,);
  let %x83: () = vm.invoke_tvm_op(%223, %224, %225) /* ty=() */;
  let %x84: Tensor[(1, 50, 50, 1024), float32] = %tensor_041;
  let %storage_042: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][42]) /* ty=Storage[] */;
  let %tensor_042: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_042, 0 /* ty=int64 */, meta[relay.Constant][124] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][42]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %228 = fn (%p042: Tensor[(1, 50, 50, 1024), float32], %p141: Tensor[(1, 1, 1024, 256), float32], %p241: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %226 = nn.conv2d(%p042, %p141, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %227 = add(%226, %p241) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%227) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %229 = (%x84, meta[relay.Constant][125] /* ty=Tensor[(1, 1, 1024, 256), float32] */, meta[relay.Constant][126] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %230 = (%tensor_042,);
  let %x85: () = vm.invoke_tvm_op(%228, %229, %230) /* ty=() */;
  let %x86: Tensor[(1, 50, 50, 256), float32] = %tensor_042;
  let %storage_043: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][43]) /* ty=Storage[] */;
  let %tensor_043: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_043, 0 /* ty=int64 */, meta[relay.Constant][127] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][43]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %233 = fn (%p043: Tensor[(1, 50, 50, 256), float32], %p142: Tensor[(3, 3, 256, 256), float32], %p242: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %231 = nn.conv2d(%p043, %p142, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %232 = add(%231, %p242) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%232) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %234 = (%x86, meta[relay.Constant][128] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][129] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %235 = (%tensor_043,);
  let %x87: () = vm.invoke_tvm_op(%233, %234, %235) /* ty=() */;
  let %x88: Tensor[(1, 50, 50, 256), float32] = %tensor_043;
  let %storage_044: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][44]) /* ty=Storage[] */;
  let %tensor_044: Tensor[(1, 50, 50, 1024), float32] = memory.alloc_tensor(%storage_044, 0 /* ty=int64 */, meta[relay.Constant][130] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][44]) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %239 = fn (%p044: Tensor[(1, 50, 50, 256), float32], %p143: Tensor[(1, 1, 256, 1024), float32], %p243: Tensor[(1, 1, 1, 1024), float32], %p312: Tensor[(1, 50, 50, 1024), float32], Primitive=1) -> Tensor[(1, 50, 50, 1024), float32] {
    %236 = nn.conv2d(%p044, %p143, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %237 = add(%236, %p243) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    %238 = add(%237, %p312) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
    nn.relu(%238) /* ty=Tensor[(1, 50, 50, 1024), float32] */
  };
  %240 = (%x88, meta[relay.Constant][131] /* ty=Tensor[(1, 1, 256, 1024), float32] */, meta[relay.Constant][132] /* ty=Tensor[(1, 1, 1, 1024), float32] */, %x84);
  %241 = (%tensor_044,);
  let %x89: () = vm.invoke_tvm_op(%239, %240, %241) /* ty=() */;
  let %x90: Tensor[(1, 50, 50, 1024), float32] = %tensor_044;
  let %storage_045: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][45]) /* ty=Storage[] */;
  let %tensor_045: Tensor[(1, 50, 50, 512), float32] = memory.alloc_tensor(%storage_045, 0 /* ty=int64 */, meta[relay.Constant][133] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][45]) /* ty=Tensor[(1, 50, 50, 512), float32] */;
  %244 = fn (%p045: Tensor[(1, 50, 50, 1024), float32], %p144: Tensor[(1, 1, 1024, 512), float32], %p244: Tensor[(1, 1, 1, 512), float32], Primitive=1) -> Tensor[(1, 50, 50, 512), float32] {
    %242 = nn.conv2d(%p045, %p144, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 512), float32] */;
    %243 = add(%242, %p244) /* ty=Tensor[(1, 50, 50, 512), float32] */;
    nn.relu(%243) /* ty=Tensor[(1, 50, 50, 512), float32] */
  };
  %245 = (%x90, meta[relay.Constant][134] /* ty=Tensor[(1, 1, 1024, 512), float32] */, meta[relay.Constant][135] /* ty=Tensor[(1, 1, 1, 512), float32] */);
  %246 = (%tensor_045,);
  let %x91: () = vm.invoke_tvm_op(%244, %245, %246) /* ty=() */;
  let %x92: Tensor[(1, 50, 50, 512), float32] = %tensor_045;
  let %storage_046: Storage[] = memory.alloc_storage(1280000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][46]) /* ty=Storage[] */;
  let %tensor_046: Tensor[(1, 25, 25, 512), float32] = memory.alloc_tensor(%storage_046, 0 /* ty=int64 */, meta[relay.Constant][136] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][46]) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %249 = fn (%p046: Tensor[(1, 50, 50, 512), float32], %p145: Tensor[(3, 3, 512, 512), float32], %p245: Tensor[(1, 1, 1, 512), float32], Primitive=1) -> Tensor[(1, 25, 25, 512), float32] {
    %247 = nn.conv2d(%p046, %p145, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
    %248 = add(%247, %p245) /* ty=Tensor[(1, 25, 25, 512), float32] */;
    nn.relu(%248) /* ty=Tensor[(1, 25, 25, 512), float32] */
  };
  %250 = (%x92, meta[relay.Constant][137] /* ty=Tensor[(3, 3, 512, 512), float32] */, meta[relay.Constant][138] /* ty=Tensor[(1, 1, 1, 512), float32] */);
  %251 = (%tensor_046,);
  let %x93: () = vm.invoke_tvm_op(%249, %250, %251) /* ty=() */;
  let %x94: Tensor[(1, 25, 25, 512), float32] = %tensor_046;
  let %storage_047: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][47]) /* ty=Storage[] */;
  let %tensor_047: Tensor[(1, 25, 25, 2048), float32] = memory.alloc_tensor(%storage_047, 0 /* ty=int64 */, meta[relay.Constant][139] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][47]) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %253 = fn (%p047: Tensor[(1, 50, 50, 1024), float32], %p146: Tensor[(1, 1, 1024, 2048), float32], %p246: Tensor[(1, 1, 1, 2048), float32], Primitive=1) -> Tensor[(1, 25, 25, 2048), float32] {
    %252 = nn.conv2d(%p047, %p146, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
    add(%252, %p246) /* ty=Tensor[(1, 25, 25, 2048), float32] */
  };
  %254 = (%x90, meta[relay.Constant][140] /* ty=Tensor[(1, 1, 1024, 2048), float32] */, meta[relay.Constant][141] /* ty=Tensor[(1, 1, 1, 2048), float32] */);
  %255 = (%tensor_047,);
  let %x95: () = vm.invoke_tvm_op(%253, %254, %255) /* ty=() */;
  let %x96: Tensor[(1, 25, 25, 2048), float32] = %tensor_047;
  let %storage_048: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][48]) /* ty=Storage[] */;
  let %tensor_048: Tensor[(1, 25, 25, 2048), float32] = memory.alloc_tensor(%storage_048, 0 /* ty=int64 */, meta[relay.Constant][142] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][48]) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %259 = fn (%p048: Tensor[(1, 25, 25, 512), float32], %p147: Tensor[(1, 1, 512, 2048), float32], %p247: Tensor[(1, 1, 1, 2048), float32], %p313: Tensor[(1, 25, 25, 2048), float32], Primitive=1) -> Tensor[(1, 25, 25, 2048), float32] {
    %256 = nn.conv2d(%p048, %p147, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
    %257 = add(%256, %p247) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
    %258 = add(%257, %p313) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
    nn.relu(%258) /* ty=Tensor[(1, 25, 25, 2048), float32] */
  };
  %260 = (%x94, meta[relay.Constant][143] /* ty=Tensor[(1, 1, 512, 2048), float32] */, meta[relay.Constant][144] /* ty=Tensor[(1, 1, 1, 2048), float32] */, %x96);
  %261 = (%tensor_048,);
  let %x97: () = vm.invoke_tvm_op(%259, %260, %261) /* ty=() */;
  let %x98: Tensor[(1, 25, 25, 2048), float32] = %tensor_048;
  let %storage_049: Storage[] = memory.alloc_storage(1280000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][49]) /* ty=Storage[] */;
  let %tensor_049: Tensor[(1, 25, 25, 512), float32] = memory.alloc_tensor(%storage_049, 0 /* ty=int64 */, meta[relay.Constant][145] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][49]) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %264 = fn (%p049: Tensor[(1, 25, 25, 2048), float32], %p148: Tensor[(1, 1, 2048, 512), float32], %p248: Tensor[(1, 1, 1, 512), float32], Primitive=1) -> Tensor[(1, 25, 25, 512), float32] {
    %262 = nn.conv2d(%p049, %p148, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
    %263 = add(%262, %p248) /* ty=Tensor[(1, 25, 25, 512), float32] */;
    nn.relu(%263) /* ty=Tensor[(1, 25, 25, 512), float32] */
  };
  %265 = (%x98, meta[relay.Constant][146] /* ty=Tensor[(1, 1, 2048, 512), float32] */, meta[relay.Constant][147] /* ty=Tensor[(1, 1, 1, 512), float32] */);
  %266 = (%tensor_049,);
  let %x99: () = vm.invoke_tvm_op(%264, %265, %266) /* ty=() */;
  let %x100: Tensor[(1, 25, 25, 512), float32] = %tensor_049;
  let %storage_050: Storage[] = memory.alloc_storage(1280000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][50]) /* ty=Storage[] */;
  let %tensor_050: Tensor[(1, 25, 25, 512), float32] = memory.alloc_tensor(%storage_050, 0 /* ty=int64 */, meta[relay.Constant][148] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][50]) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %269 = fn (%p050: Tensor[(1, 25, 25, 512), float32], %p149: Tensor[(3, 3, 512, 512), float32], %p249: Tensor[(1, 1, 1, 512), float32], Primitive=1) -> Tensor[(1, 25, 25, 512), float32] {
    %267 = nn.conv2d(%p050, %p149, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
    %268 = add(%267, %p249) /* ty=Tensor[(1, 25, 25, 512), float32] */;
    nn.relu(%268) /* ty=Tensor[(1, 25, 25, 512), float32] */
  };
  %270 = (%x100, meta[relay.Constant][149] /* ty=Tensor[(3, 3, 512, 512), float32] */, meta[relay.Constant][150] /* ty=Tensor[(1, 1, 1, 512), float32] */);
  %271 = (%tensor_050,);
  let %x101: () = vm.invoke_tvm_op(%269, %270, %271) /* ty=() */;
  let %x102: Tensor[(1, 25, 25, 512), float32] = %tensor_050;
  let %storage_051: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][51]) /* ty=Storage[] */;
  let %tensor_051: Tensor[(1, 25, 25, 2048), float32] = memory.alloc_tensor(%storage_051, 0 /* ty=int64 */, meta[relay.Constant][151] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][51]) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %275 = fn (%p051: Tensor[(1, 25, 25, 512), float32], %p150: Tensor[(1, 1, 512, 2048), float32], %p250: Tensor[(1, 1, 1, 2048), float32], %p314: Tensor[(1, 25, 25, 2048), float32], Primitive=1) -> Tensor[(1, 25, 25, 2048), float32] {
    %272 = nn.conv2d(%p051, %p150, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
    %273 = add(%272, %p250) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
    %274 = add(%273, %p314) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
    nn.relu(%274) /* ty=Tensor[(1, 25, 25, 2048), float32] */
  };
  %276 = (%x102, meta[relay.Constant][152] /* ty=Tensor[(1, 1, 512, 2048), float32] */, meta[relay.Constant][153] /* ty=Tensor[(1, 1, 1, 2048), float32] */, %x98);
  %277 = (%tensor_051,);
  let %x103: () = vm.invoke_tvm_op(%275, %276, %277) /* ty=() */;
  let %x104: Tensor[(1, 25, 25, 2048), float32] = %tensor_051;
  let %storage_052: Storage[] = memory.alloc_storage(1280000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][52]) /* ty=Storage[] */;
  let %tensor_052: Tensor[(1, 25, 25, 512), float32] = memory.alloc_tensor(%storage_052, 0 /* ty=int64 */, meta[relay.Constant][154] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][52]) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %280 = fn (%p052: Tensor[(1, 25, 25, 2048), float32], %p151: Tensor[(1, 1, 2048, 512), float32], %p251: Tensor[(1, 1, 1, 512), float32], Primitive=1) -> Tensor[(1, 25, 25, 512), float32] {
    %278 = nn.conv2d(%p052, %p151, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
    %279 = add(%278, %p251) /* ty=Tensor[(1, 25, 25, 512), float32] */;
    nn.relu(%279) /* ty=Tensor[(1, 25, 25, 512), float32] */
  };
  %281 = (%x104, meta[relay.Constant][155] /* ty=Tensor[(1, 1, 2048, 512), float32] */, meta[relay.Constant][156] /* ty=Tensor[(1, 1, 1, 512), float32] */);
  %282 = (%tensor_052,);
  let %x105: () = vm.invoke_tvm_op(%280, %281, %282) /* ty=() */;
  let %x106: Tensor[(1, 25, 25, 512), float32] = %tensor_052;
  let %storage_053: Storage[] = memory.alloc_storage(1280000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][53]) /* ty=Storage[] */;
  let %tensor_053: Tensor[(1, 25, 25, 512), float32] = memory.alloc_tensor(%storage_053, 0 /* ty=int64 */, meta[relay.Constant][157] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][53]) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %285 = fn (%p053: Tensor[(1, 25, 25, 512), float32], %p152: Tensor[(3, 3, 512, 512), float32], %p252: Tensor[(1, 1, 1, 512), float32], Primitive=1) -> Tensor[(1, 25, 25, 512), float32] {
    %283 = nn.conv2d(%p053, %p152, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
    %284 = add(%283, %p252) /* ty=Tensor[(1, 25, 25, 512), float32] */;
    nn.relu(%284) /* ty=Tensor[(1, 25, 25, 512), float32] */
  };
  %286 = (%x106, meta[relay.Constant][158] /* ty=Tensor[(3, 3, 512, 512), float32] */, meta[relay.Constant][159] /* ty=Tensor[(1, 1, 1, 512), float32] */);
  %287 = (%tensor_053,);
  let %x107: () = vm.invoke_tvm_op(%285, %286, %287) /* ty=() */;
  let %x108: Tensor[(1, 25, 25, 512), float32] = %tensor_053;
  let %storage_054: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][54]) /* ty=Storage[] */;
  let %tensor_054: Tensor[(1, 25, 25, 2048), float32] = memory.alloc_tensor(%storage_054, 0 /* ty=int64 */, meta[relay.Constant][160] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][54]) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %291 = fn (%p054: Tensor[(1, 25, 25, 512), float32], %p153: Tensor[(1, 1, 512, 2048), float32], %p253: Tensor[(1, 1, 1, 2048), float32], %p315: Tensor[(1, 25, 25, 2048), float32], Primitive=1) -> Tensor[(1, 25, 25, 2048), float32] {
    %288 = nn.conv2d(%p054, %p153, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
    %289 = add(%288, %p253) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
    %290 = add(%289, %p315) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
    nn.relu(%290) /* ty=Tensor[(1, 25, 25, 2048), float32] */
  };
  %292 = (%x108, meta[relay.Constant][161] /* ty=Tensor[(1, 1, 512, 2048), float32] */, meta[relay.Constant][162] /* ty=Tensor[(1, 1, 1, 2048), float32] */, %x104);
  %293 = (%tensor_054,);
  let %x109: () = vm.invoke_tvm_op(%291, %292, %293) /* ty=() */;
  let %x110: Tensor[(1, 25, 25, 2048), float32] = %tensor_054;
  let %storage_055: Storage[] = memory.alloc_storage(640000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][55]) /* ty=Storage[] */;
  let %tensor_055: Tensor[(1, 25, 25, 256), float32] = memory.alloc_tensor(%storage_055, 0 /* ty=int64 */, meta[relay.Constant][163] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][55]) /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %295 = fn (%p055: Tensor[(1, 25, 25, 2048), float32], %p154: Tensor[(1, 1, 2048, 256), float32], %p254: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 25, 25, 256), float32] {
    %294 = nn.conv2d(%p055, %p154, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 256), float32] */;
    add(%294, %p254) /* ty=Tensor[(1, 25, 25, 256), float32] */
  };
  %296 = (%x110, meta[relay.Constant][164] /* ty=Tensor[(1, 1, 2048, 256), float32] */, meta[relay.Constant][165] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %297 = (%tensor_055,);
  let %x111: () = vm.invoke_tvm_op(%295, %296, %297) /* ty=() */;
  let %x112: Tensor[(1, 25, 25, 256), float32] = %tensor_055;
  let %storage_056: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][56]) /* ty=Storage[] */;
  let %tensor_056: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_056, 0 /* ty=int64 */, meta[relay.Constant][166] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][56]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %300 = fn (%p056: Tensor[(1, 25, 25, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %298 = layout_transform(%p056, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 25, 25), float32] */;
    %299 = image.resize(%298, size=[50, 50], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 50, 50), float32] */;
    layout_transform(%299, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %301 = (%x112,);
  %302 = (%tensor_056,);
  let %x113: () = vm.invoke_tvm_op(%300, %301, %302) /* ty=() */;
  let %x114: Tensor[(1, 50, 50, 256), float32] = %tensor_056;
  let %storage_057: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][57]) /* ty=Storage[] */;
  let %tensor_057: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_057, 0 /* ty=int64 */, meta[relay.Constant][167] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][57]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %305 = fn (%p057: Tensor[(1, 50, 50, 1024), float32], %p155: Tensor[(1, 1, 1024, 256), float32], %p255: Tensor[(1, 1, 1, 256), float32], %p316: Tensor[(1, 50, 50, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %303 = nn.conv2d(%p057, %p155, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %304 = add(%303, %p255) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    add(%304, %p316) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %306 = (%x90, meta[relay.Constant][168] /* ty=Tensor[(1, 1, 1024, 256), float32] */, meta[relay.Constant][169] /* ty=Tensor[(1, 1, 1, 256), float32] */, %x114);
  %307 = (%tensor_057,);
  let %x115: () = vm.invoke_tvm_op(%305, %306, %307) /* ty=() */;
  let %x116: Tensor[(1, 50, 50, 256), float32] = %tensor_057;
  let %storage_058: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][58]) /* ty=Storage[] */;
  let %tensor_058: Tensor[(1, 100, 100, 256), float32] = memory.alloc_tensor(%storage_058, 0 /* ty=int64 */, meta[relay.Constant][170] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][58]) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %310 = fn (%p058: Tensor[(1, 50, 50, 256), float32], Primitive=1) -> Tensor[(1, 100, 100, 256), float32] {
    %308 = layout_transform(%p058, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %309 = image.resize(%308, size=[100, 100], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 100, 100), float32] */;
    layout_transform(%309, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 100, 100, 256), float32] */
  };
  %311 = (%x116,);
  %312 = (%tensor_058,);
  let %x117: () = vm.invoke_tvm_op(%310, %311, %312) /* ty=() */;
  let %x118: Tensor[(1, 100, 100, 256), float32] = %tensor_058;
  let %storage_059: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][59]) /* ty=Storage[] */;
  let %tensor_059: Tensor[(1, 100, 100, 256), float32] = memory.alloc_tensor(%storage_059, 0 /* ty=int64 */, meta[relay.Constant][171] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][59]) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %315 = fn (%p059: Tensor[(1, 100, 100, 512), float32], %p156: Tensor[(1, 1, 512, 256), float32], %p256: Tensor[(1, 1, 1, 256), float32], %p317: Tensor[(1, 100, 100, 256), float32], Primitive=1) -> Tensor[(1, 100, 100, 256), float32] {
    %313 = nn.conv2d(%p059, %p156, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
    %314 = add(%313, %p256) /* ty=Tensor[(1, 100, 100, 256), float32] */;
    add(%314, %p317) /* ty=Tensor[(1, 100, 100, 256), float32] */
  };
  %316 = (%x52, meta[relay.Constant][172] /* ty=Tensor[(1, 1, 512, 256), float32] */, meta[relay.Constant][173] /* ty=Tensor[(1, 1, 1, 256), float32] */, %x118);
  %317 = (%tensor_059,);
  let %x119: () = vm.invoke_tvm_op(%315, %316, %317) /* ty=() */;
  let %x120: Tensor[(1, 100, 100, 256), float32] = %tensor_059;
  let %storage_060: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][60]) /* ty=Storage[] */;
  let %tensor_060: Tensor[(1, 200, 200, 256), float32] = memory.alloc_tensor(%storage_060, 0 /* ty=int64 */, meta[relay.Constant][174] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][60]) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %320 = fn (%p060: Tensor[(1, 100, 100, 256), float32], Primitive=1) -> Tensor[(1, 200, 200, 256), float32] {
    %318 = layout_transform(%p060, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 100, 100), float32] */;
    %319 = image.resize(%318, size=[200, 200], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 200, 200), float32] */;
    layout_transform(%319, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 200, 200, 256), float32] */
  };
  %321 = (%x120,);
  %322 = (%tensor_060,);
  let %x121: () = vm.invoke_tvm_op(%320, %321, %322) /* ty=() */;
  let %x122: Tensor[(1, 200, 200, 256), float32] = %tensor_060;
  let %storage_061: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][61]) /* ty=Storage[] */;
  let %tensor_061: Tensor[(1, 200, 200, 256), float32] = memory.alloc_tensor(%storage_061, 0 /* ty=int64 */, meta[relay.Constant][175] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][61]) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %325 = fn (%p061: Tensor[(1, 200, 200, 256), float32], %p157: Tensor[(1, 1, 256, 256), float32], %p257: Tensor[(1, 1, 1, 256), float32], %p318: Tensor[(1, 200, 200, 256), float32], Primitive=1) -> Tensor[(1, 200, 200, 256), float32] {
    %323 = nn.conv2d(%p061, %p157, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
    %324 = add(%323, %p257) /* ty=Tensor[(1, 200, 200, 256), float32] */;
    add(%324, %p318) /* ty=Tensor[(1, 200, 200, 256), float32] */
  };
  %326 = (%x26, meta[relay.Constant][176] /* ty=Tensor[(1, 1, 256, 256), float32] */, meta[relay.Constant][177] /* ty=Tensor[(1, 1, 1, 256), float32] */, %x122);
  %327 = (%tensor_061,);
  let %x123: () = vm.invoke_tvm_op(%325, %326, %327) /* ty=() */;
  let %x124: Tensor[(1, 200, 200, 256), float32] = %tensor_061;
  let %storage_062: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][62]) /* ty=Storage[] */;
  let %tensor_062: Tensor[(1, 200, 200, 256), float32] = memory.alloc_tensor(%storage_062, 0 /* ty=int64 */, meta[relay.Constant][178] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][62]) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %329 = fn (%p062: Tensor[(1, 200, 200, 256), float32], %p158: Tensor[(3, 3, 256, 256), float32], %p258: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 200, 200, 256), float32] {
    %328 = nn.conv2d(%p062, %p158, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
    add(%328, %p258) /* ty=Tensor[(1, 200, 200, 256), float32] */
  };
  %330 = (%x124, meta[relay.Constant][179] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][180] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %331 = (%tensor_062,);
  let %x125: () = vm.invoke_tvm_op(%329, %330, %331) /* ty=() */;
  let %x126: Tensor[(1, 200, 200, 256), float32] = %tensor_062;
  let %storage_063: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][63]) /* ty=Storage[] */;
  let %tensor_063: Tensor[(1, 200, 200, 256), float32] = memory.alloc_tensor(%storage_063, 0 /* ty=int64 */, meta[relay.Constant][181] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][63]) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %334 = fn (%p063: Tensor[(1, 200, 200, 256), float32], %p159: Tensor[(3, 3, 256, 256), float32], %p259: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 200, 200, 256), float32] {
    %332 = nn.conv2d(%p063, %p159, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
    %333 = add(%332, %p259) /* ty=Tensor[(1, 200, 200, 256), float32] */;
    nn.relu(%333) /* ty=Tensor[(1, 200, 200, 256), float32] */
  };
  %335 = (%x126, meta[relay.Constant][182] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][183] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %336 = (%tensor_063,);
  let %x127: () = vm.invoke_tvm_op(%334, %335, %336) /* ty=() */;
  let %x128: Tensor[(1, 200, 200, 256), float32] = %tensor_063;
  let %storage_064: Storage[] = memory.alloc_storage(1920000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][64]) /* ty=Storage[] */;
  let %tensor_064: Tensor[(1, 200, 200, 12), float32] = memory.alloc_tensor(%storage_064, 0 /* ty=int64 */, meta[relay.Constant][184] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][64]) /* ty=Tensor[(1, 200, 200, 12), float32] */;
  %338 = fn (%p064: Tensor[(1, 200, 200, 256), float32], %p160: Tensor[(1, 1, 256, 12), float32], %p260: Tensor[(1, 1, 1, 12), float32], Primitive=1) -> Tensor[(1, 200, 200, 12), float32] {
    %337 = nn.conv2d(%p064, %p160, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 12), float32] */;
    add(%337, %p260) /* ty=Tensor[(1, 200, 200, 12), float32] */
  };
  %339 = (%x128, meta[relay.Constant][185] /* ty=Tensor[(1, 1, 256, 12), float32] */, meta[relay.Constant][186] /* ty=Tensor[(1, 1, 1, 12), float32] */);
  %340 = (%tensor_064,);
  let %x129: () = vm.invoke_tvm_op(%338, %339, %340) /* ty=() */;
  let %x130: Tensor[(1, 200, 200, 12), float32] = %tensor_064;
  let %storage_065: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][65]) /* ty=Storage[] */;
  let %tensor_065: Tensor[(1, 100, 100, 256), float32] = memory.alloc_tensor(%storage_065, 0 /* ty=int64 */, meta[relay.Constant][187] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][65]) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %342 = fn (%p065: Tensor[(1, 100, 100, 256), float32], %p161: Tensor[(3, 3, 256, 256), float32], %p261: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 100, 100, 256), float32] {
    %341 = nn.conv2d(%p065, %p161, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
    add(%341, %p261) /* ty=Tensor[(1, 100, 100, 256), float32] */
  };
  %343 = (%x120, meta[relay.Constant][188] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][189] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %344 = (%tensor_065,);
  let %x131: () = vm.invoke_tvm_op(%342, %343, %344) /* ty=() */;
  let %x132: Tensor[(1, 100, 100, 256), float32] = %tensor_065;
  let %storage_066: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][66]) /* ty=Storage[] */;
  let %tensor_066: Tensor[(1, 100, 100, 256), float32] = memory.alloc_tensor(%storage_066, 0 /* ty=int64 */, meta[relay.Constant][190] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][66]) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %347 = fn (%p066: Tensor[(1, 100, 100, 256), float32], %p162: Tensor[(3, 3, 256, 256), float32], %p262: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 100, 100, 256), float32] {
    %345 = nn.conv2d(%p066, %p162, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
    %346 = add(%345, %p262) /* ty=Tensor[(1, 100, 100, 256), float32] */;
    nn.relu(%346) /* ty=Tensor[(1, 100, 100, 256), float32] */
  };
  %348 = (%x132, meta[relay.Constant][182] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][183] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %349 = (%tensor_066,);
  let %x133: () = vm.invoke_tvm_op(%347, %348, %349) /* ty=() */;
  let %x134: Tensor[(1, 100, 100, 256), float32] = %tensor_066;
  let %storage_067: Storage[] = memory.alloc_storage(480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][67]) /* ty=Storage[] */;
  let %tensor_067: Tensor[(1, 100, 100, 12), float32] = memory.alloc_tensor(%storage_067, 0 /* ty=int64 */, meta[relay.Constant][191] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][67]) /* ty=Tensor[(1, 100, 100, 12), float32] */;
  %351 = fn (%p067: Tensor[(1, 100, 100, 256), float32], %p163: Tensor[(1, 1, 256, 12), float32], %p263: Tensor[(1, 1, 1, 12), float32], Primitive=1) -> Tensor[(1, 100, 100, 12), float32] {
    %350 = nn.conv2d(%p067, %p163, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 12), float32] */;
    add(%350, %p263) /* ty=Tensor[(1, 100, 100, 12), float32] */
  };
  %352 = (%x134, meta[relay.Constant][185] /* ty=Tensor[(1, 1, 256, 12), float32] */, meta[relay.Constant][186] /* ty=Tensor[(1, 1, 1, 12), float32] */);
  %353 = (%tensor_067,);
  let %x135: () = vm.invoke_tvm_op(%351, %352, %353) /* ty=() */;
  let %x136: Tensor[(1, 100, 100, 12), float32] = %tensor_067;
  let %storage_068: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][68]) /* ty=Storage[] */;
  let %tensor_068: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_068, 0 /* ty=int64 */, meta[relay.Constant][192] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][68]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %355 = fn (%p068: Tensor[(1, 50, 50, 256), float32], %p164: Tensor[(3, 3, 256, 256), float32], %p264: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %354 = nn.conv2d(%p068, %p164, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    add(%354, %p264) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %356 = (%x116, meta[relay.Constant][193] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][194] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %357 = (%tensor_068,);
  let %x137: () = vm.invoke_tvm_op(%355, %356, %357) /* ty=() */;
  let %x138: Tensor[(1, 50, 50, 256), float32] = %tensor_068;
  let %storage_069: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][69]) /* ty=Storage[] */;
  let %tensor_069: Tensor[(1, 50, 50, 256), float32] = memory.alloc_tensor(%storage_069, 0 /* ty=int64 */, meta[relay.Constant][195] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][69]) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %360 = fn (%p069: Tensor[(1, 50, 50, 256), float32], %p165: Tensor[(3, 3, 256, 256), float32], %p265: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 50, 50, 256), float32] {
    %358 = nn.conv2d(%p069, %p165, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
    %359 = add(%358, %p265) /* ty=Tensor[(1, 50, 50, 256), float32] */;
    nn.relu(%359) /* ty=Tensor[(1, 50, 50, 256), float32] */
  };
  %361 = (%x138, meta[relay.Constant][182] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][183] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %362 = (%tensor_069,);
  let %x139: () = vm.invoke_tvm_op(%360, %361, %362) /* ty=() */;
  let %x140: Tensor[(1, 50, 50, 256), float32] = %tensor_069;
  let %storage_070: Storage[] = memory.alloc_storage(120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][70]) /* ty=Storage[] */;
  let %tensor_070: Tensor[(1, 50, 50, 12), float32] = memory.alloc_tensor(%storage_070, 0 /* ty=int64 */, meta[relay.Constant][196] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][70]) /* ty=Tensor[(1, 50, 50, 12), float32] */;
  %364 = fn (%p070: Tensor[(1, 50, 50, 256), float32], %p166: Tensor[(1, 1, 256, 12), float32], %p266: Tensor[(1, 1, 1, 12), float32], Primitive=1) -> Tensor[(1, 50, 50, 12), float32] {
    %363 = nn.conv2d(%p070, %p166, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 12), float32] */;
    add(%363, %p266) /* ty=Tensor[(1, 50, 50, 12), float32] */
  };
  %365 = (%x140, meta[relay.Constant][185] /* ty=Tensor[(1, 1, 256, 12), float32] */, meta[relay.Constant][186] /* ty=Tensor[(1, 1, 1, 12), float32] */);
  %366 = (%tensor_070,);
  let %x141: () = vm.invoke_tvm_op(%364, %365, %366) /* ty=() */;
  let %x142: Tensor[(1, 50, 50, 12), float32] = %tensor_070;
  let %storage_071: Storage[] = memory.alloc_storage(640000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][71]) /* ty=Storage[] */;
  let %tensor_071: Tensor[(1, 25, 25, 256), float32] = memory.alloc_tensor(%storage_071, 0 /* ty=int64 */, meta[relay.Constant][197] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][71]) /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %368 = fn (%p071: Tensor[(1, 25, 25, 256), float32], %p167: Tensor[(3, 3, 256, 256), float32], %p267: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 25, 25, 256), float32] {
    %367 = nn.conv2d(%p071, %p167, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 256), float32] */;
    add(%367, %p267) /* ty=Tensor[(1, 25, 25, 256), float32] */
  };
  %369 = (%x112, meta[relay.Constant][198] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][199] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %370 = (%tensor_071,);
  let %x143: () = vm.invoke_tvm_op(%368, %369, %370) /* ty=() */;
  let %x144: Tensor[(1, 25, 25, 256), float32] = %tensor_071;
  let %storage_072: Storage[] = memory.alloc_storage(640000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][72]) /* ty=Storage[] */;
  let %tensor_072: Tensor[(1, 25, 25, 256), float32] = memory.alloc_tensor(%storage_072, 0 /* ty=int64 */, meta[relay.Constant][200] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][72]) /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %373 = fn (%p072: Tensor[(1, 25, 25, 256), float32], %p168: Tensor[(3, 3, 256, 256), float32], %p268: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 25, 25, 256), float32] {
    %371 = nn.conv2d(%p072, %p168, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 256), float32] */;
    %372 = add(%371, %p268) /* ty=Tensor[(1, 25, 25, 256), float32] */;
    nn.relu(%372) /* ty=Tensor[(1, 25, 25, 256), float32] */
  };
  %374 = (%x144, meta[relay.Constant][182] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][183] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %375 = (%tensor_072,);
  let %x145: () = vm.invoke_tvm_op(%373, %374, %375) /* ty=() */;
  let %x146: Tensor[(1, 25, 25, 256), float32] = %tensor_072;
  let %storage_073: Storage[] = memory.alloc_storage(30000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][73]) /* ty=Storage[] */;
  let %tensor_073: Tensor[(1, 25, 25, 12), float32] = memory.alloc_tensor(%storage_073, 0 /* ty=int64 */, meta[relay.Constant][201] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][73]) /* ty=Tensor[(1, 25, 25, 12), float32] */;
  %377 = fn (%p073: Tensor[(1, 25, 25, 256), float32], %p169: Tensor[(1, 1, 256, 12), float32], %p269: Tensor[(1, 1, 1, 12), float32], Primitive=1) -> Tensor[(1, 25, 25, 12), float32] {
    %376 = nn.conv2d(%p073, %p169, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 12), float32] */;
    add(%376, %p269) /* ty=Tensor[(1, 25, 25, 12), float32] */
  };
  %378 = (%x146, meta[relay.Constant][185] /* ty=Tensor[(1, 1, 256, 12), float32] */, meta[relay.Constant][186] /* ty=Tensor[(1, 1, 1, 12), float32] */);
  %379 = (%tensor_073,);
  let %x147: () = vm.invoke_tvm_op(%377, %378, %379) /* ty=() */;
  let %x148: Tensor[(1, 25, 25, 12), float32] = %tensor_073;
  let %storage_074: Storage[] = memory.alloc_storage(173056 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][74]) /* ty=Storage[] */;
  let %tensor_074: Tensor[(1, 13, 13, 256), float32] = memory.alloc_tensor(%storage_074, 0 /* ty=int64 */, meta[relay.Constant][202] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][74]) /* ty=Tensor[(1, 13, 13, 256), float32] */;
  %380 = fn (%p074: Tensor[(1, 25, 25, 256), float32], Primitive=1) -> Tensor[(1, 13, 13, 256), float32] {
    nn.max_pool2d(%p074, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 13, 13, 256), float32] */
  };
  %381 = (%x144,);
  %382 = (%tensor_074,);
  let %x149: () = vm.invoke_tvm_op(%380, %381, %382) /* ty=() */;
  let %x150: Tensor[(1, 13, 13, 256), float32] = %tensor_074;
  let %storage_075: Storage[] = memory.alloc_storage(173056 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][75]) /* ty=Storage[] */;
  let %tensor_075: Tensor[(1, 13, 13, 256), float32] = memory.alloc_tensor(%storage_075, 0 /* ty=int64 */, meta[relay.Constant][203] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][75]) /* ty=Tensor[(1, 13, 13, 256), float32] */;
  %385 = fn (%p075: Tensor[(1, 13, 13, 256), float32], %p170: Tensor[(3, 3, 256, 256), float32], %p270: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(1, 13, 13, 256), float32] {
    %383 = nn.conv2d(%p075, %p170, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 13, 13, 256), float32] */;
    %384 = add(%383, %p270) /* ty=Tensor[(1, 13, 13, 256), float32] */;
    nn.relu(%384) /* ty=Tensor[(1, 13, 13, 256), float32] */
  };
  %386 = (%x150, meta[relay.Constant][182] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][183] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %387 = (%tensor_075,);
  let %x151: () = vm.invoke_tvm_op(%385, %386, %387) /* ty=() */;
  let %x152: Tensor[(1, 13, 13, 256), float32] = %tensor_075;
  let %storage_076: Storage[] = memory.alloc_storage(8112 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][76]) /* ty=Storage[] */;
  let %tensor_076: Tensor[(1, 13, 13, 12), float32] = memory.alloc_tensor(%storage_076, 0 /* ty=int64 */, meta[relay.Constant][204] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][76]) /* ty=Tensor[(1, 13, 13, 12), float32] */;
  %389 = fn (%p076: Tensor[(1, 13, 13, 256), float32], %p171: Tensor[(1, 1, 256, 12), float32], %p271: Tensor[(1, 1, 1, 12), float32], Primitive=1) -> Tensor[(1, 13, 13, 12), float32] {
    %388 = nn.conv2d(%p076, %p171, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 13, 13, 12), float32] */;
    add(%388, %p271) /* ty=Tensor[(1, 13, 13, 12), float32] */
  };
  %390 = (%x152, meta[relay.Constant][185] /* ty=Tensor[(1, 1, 256, 12), float32] */, meta[relay.Constant][186] /* ty=Tensor[(1, 1, 1, 12), float32] */);
  %391 = (%tensor_076,);
  let %x153: () = vm.invoke_tvm_op(%389, %390, %391) /* ty=() */;
  let %x154: Tensor[(1, 13, 13, 12), float32] = %tensor_076;
  let %storage_077: Storage[] = memory.alloc_storage(480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][77]) /* ty=Storage[] */;
  let %tensor_077: Tensor[(1, 200, 200, 3), float32] = memory.alloc_tensor(%storage_077, 0 /* ty=int64 */, meta[relay.Constant][205] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][77]) /* ty=Tensor[(1, 200, 200, 3), float32] */;
  %393 = fn (%p077: Tensor[(1, 200, 200, 256), float32], %p172: Tensor[(1, 1, 256, 3), float32], %p272: Tensor[(1, 1, 1, 3), float32], Primitive=1) -> Tensor[(1, 200, 200, 3), float32] {
    %392 = nn.conv2d(%p077, %p172, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 3), float32] */;
    add(%392, %p272) /* ty=Tensor[(1, 200, 200, 3), float32] */
  };
  %394 = (%x128, meta[relay.Constant][206] /* ty=Tensor[(1, 1, 256, 3), float32] */, meta[relay.Constant][207] /* ty=Tensor[(1, 1, 1, 3), float32] */);
  %395 = (%tensor_077,);
  let %x155: () = vm.invoke_tvm_op(%393, %394, %395) /* ty=() */;
  let %x156: Tensor[(1, 200, 200, 3), float32] = %tensor_077;
  let %storage_078: Storage[] = memory.alloc_storage(120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][78]) /* ty=Storage[] */;
  let %tensor_078: Tensor[(1, 100, 100, 3), float32] = memory.alloc_tensor(%storage_078, 0 /* ty=int64 */, meta[relay.Constant][208] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][78]) /* ty=Tensor[(1, 100, 100, 3), float32] */;
  %397 = fn (%p078: Tensor[(1, 100, 100, 256), float32], %p173: Tensor[(1, 1, 256, 3), float32], %p273: Tensor[(1, 1, 1, 3), float32], Primitive=1) -> Tensor[(1, 100, 100, 3), float32] {
    %396 = nn.conv2d(%p078, %p173, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 3), float32] */;
    add(%396, %p273) /* ty=Tensor[(1, 100, 100, 3), float32] */
  };
  %398 = (%x134, meta[relay.Constant][206] /* ty=Tensor[(1, 1, 256, 3), float32] */, meta[relay.Constant][207] /* ty=Tensor[(1, 1, 1, 3), float32] */);
  %399 = (%tensor_078,);
  let %x157: () = vm.invoke_tvm_op(%397, %398, %399) /* ty=() */;
  let %x158: Tensor[(1, 100, 100, 3), float32] = %tensor_078;
  let %storage_079: Storage[] = memory.alloc_storage(30000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][79]) /* ty=Storage[] */;
  let %tensor_079: Tensor[(1, 50, 50, 3), float32] = memory.alloc_tensor(%storage_079, 0 /* ty=int64 */, meta[relay.Constant][209] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][79]) /* ty=Tensor[(1, 50, 50, 3), float32] */;
  %401 = fn (%p079: Tensor[(1, 50, 50, 256), float32], %p174: Tensor[(1, 1, 256, 3), float32], %p274: Tensor[(1, 1, 1, 3), float32], Primitive=1) -> Tensor[(1, 50, 50, 3), float32] {
    %400 = nn.conv2d(%p079, %p174, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 3), float32] */;
    add(%400, %p274) /* ty=Tensor[(1, 50, 50, 3), float32] */
  };
  %402 = (%x140, meta[relay.Constant][206] /* ty=Tensor[(1, 1, 256, 3), float32] */, meta[relay.Constant][207] /* ty=Tensor[(1, 1, 1, 3), float32] */);
  %403 = (%tensor_079,);
  let %x159: () = vm.invoke_tvm_op(%401, %402, %403) /* ty=() */;
  let %x160: Tensor[(1, 50, 50, 3), float32] = %tensor_079;
  let %storage_080: Storage[] = memory.alloc_storage(7500 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][80]) /* ty=Storage[] */;
  let %tensor_080: Tensor[(1, 25, 25, 3), float32] = memory.alloc_tensor(%storage_080, 0 /* ty=int64 */, meta[relay.Constant][210] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][80]) /* ty=Tensor[(1, 25, 25, 3), float32] */;
  %405 = fn (%p080: Tensor[(1, 25, 25, 256), float32], %p175: Tensor[(1, 1, 256, 3), float32], %p275: Tensor[(1, 1, 1, 3), float32], Primitive=1) -> Tensor[(1, 25, 25, 3), float32] {
    %404 = nn.conv2d(%p080, %p175, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 3), float32] */;
    add(%404, %p275) /* ty=Tensor[(1, 25, 25, 3), float32] */
  };
  %406 = (%x146, meta[relay.Constant][206] /* ty=Tensor[(1, 1, 256, 3), float32] */, meta[relay.Constant][207] /* ty=Tensor[(1, 1, 1, 3), float32] */);
  %407 = (%tensor_080,);
  let %x161: () = vm.invoke_tvm_op(%405, %406, %407) /* ty=() */;
  let %x162: Tensor[(1, 25, 25, 3), float32] = %tensor_080;
  let %storage_081: Storage[] = memory.alloc_storage(2028 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][81]) /* ty=Storage[] */;
  let %tensor_081: Tensor[(1, 13, 13, 3), float32] = memory.alloc_tensor(%storage_081, 0 /* ty=int64 */, meta[relay.Constant][211] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][81]) /* ty=Tensor[(1, 13, 13, 3), float32] */;
  %409 = fn (%p081: Tensor[(1, 13, 13, 256), float32], %p176: Tensor[(1, 1, 256, 3), float32], %p276: Tensor[(1, 1, 1, 3), float32], Primitive=1) -> Tensor[(1, 13, 13, 3), float32] {
    %408 = nn.conv2d(%p081, %p176, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 13, 13, 3), float32] */;
    add(%408, %p276) /* ty=Tensor[(1, 13, 13, 3), float32] */
  };
  %410 = (%x152, meta[relay.Constant][206] /* ty=Tensor[(1, 1, 256, 3), float32] */, meta[relay.Constant][207] /* ty=Tensor[(1, 1, 1, 3), float32] */);
  %411 = (%tensor_081,);
  let %x163: () = vm.invoke_tvm_op(%409, %410, %411) /* ty=() */;
  let %x164: Tensor[(1, 13, 13, 3), float32] = %tensor_081;
  let %storage_082: Storage[] = memory.alloc_storage(639528 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][82]) /* ty=Storage[] */;
  let %tensor_082: Tensor[(1, 159882), float32] = memory.alloc_tensor(%storage_082, 0 /* ty=int64 */, meta[relay.Constant][212] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][82]) /* ty=Tensor[(1, 159882), float32] */;
  %436 = fn (%p082: Tensor[(1, 200, 200, 3), float32], %p177: Tensor[(1, 100, 100, 3), float32], %p277: Tensor[(1, 50, 50, 3), float32], %p319: Tensor[(1, 25, 25, 3), float32], %p4: Tensor[(1, 13, 13, 3), float32], Primitive=1) -> Tensor[(1, 159882), float32] {
    %412 = layout_transform(%p082, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 200, 200), float32] */;
    %413 = reshape(%412, newshape=[1, -1, 1, 200, 200]) /* ty=Tensor[(1, 3, 1, 200, 200), float32] */;
    %414 = transpose(%413, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 1), float32] */;
    %415 = reshape(%414, newshape=[1, -1, 1]) /* ty=Tensor[(1, 120000, 1), float32] */;
    %416 = layout_transform(%p177, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 100, 100), float32] */;
    %417 = reshape(%416, newshape=[1, -1, 1, 100, 100]) /* ty=Tensor[(1, 3, 1, 100, 100), float32] */;
    %418 = transpose(%417, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 1), float32] */;
    %419 = reshape(%418, newshape=[1, -1, 1]) /* ty=Tensor[(1, 30000, 1), float32] */;
    %420 = layout_transform(%p277, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 50, 50), float32] */;
    %421 = reshape(%420, newshape=[1, -1, 1, 50, 50]) /* ty=Tensor[(1, 3, 1, 50, 50), float32] */;
    %422 = transpose(%421, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 1), float32] */;
    %423 = reshape(%422, newshape=[1, -1, 1]) /* ty=Tensor[(1, 7500, 1), float32] */;
    %424 = layout_transform(%p319, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 25, 25), float32] */;
    %425 = reshape(%424, newshape=[1, -1, 1, 25, 25]) /* ty=Tensor[(1, 3, 1, 25, 25), float32] */;
    %426 = transpose(%425, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 1), float32] */;
    %427 = reshape(%426, newshape=[1, -1, 1]) /* ty=Tensor[(1, 1875, 1), float32] */;
    %428 = layout_transform(%p4, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 13, 13), float32] */;
    %429 = reshape(%428, newshape=[1, -1, 1, 13, 13]) /* ty=Tensor[(1, 3, 1, 13, 13), float32] */;
    %430 = transpose(%429, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 1), float32] */;
    %431 = reshape(%430, newshape=[1, -1, 1]) /* ty=Tensor[(1, 507, 1), float32] */;
    %432 = (%415, %419, %423, %427, %431);
    %433 = concatenate(%432, axis=1) /* ty=Tensor[(1, 159882, 1), float32] */;
    %434 = reshape(%433, newshape=[-1, 1, 0]) /* ty=Tensor[(159882, 1, 1), float32] */;
    %435 = squeeze(%434, axis=[1]) /* ty=Tensor[(159882, 1), float32] */;
    reshape(%435, newshape=[1, -1]) /* ty=Tensor[(1, 159882), float32] */
  };
  %437 = (%x156, %x158, %x160, %x162, %x164);
  %438 = (%tensor_082,);
  let %x165: () = vm.invoke_tvm_op(%436, %437, %438) /* ty=() */;
  let %x166: Tensor[(1, 159882), float32] = %tensor_082;
  let %storage_083: Storage[] = memory.alloc_storage(480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][83]) /* ty=Storage[] */;
  let %tensor_083: Tensor[(1, 120000), float32] = memory.alloc_tensor(%storage_083, 0 /* ty=int64 */, meta[relay.Constant][213] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][83]) /* ty=Tensor[(1, 120000), float32] */;
  let %storage_1: Storage[] = memory.alloc_storage(120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][84]) /* ty=Storage[] */;
  let %tensor_1: Tensor[(1, 30000), float32] = memory.alloc_tensor(%storage_1, 0 /* ty=int64 */, meta[relay.Constant][214] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][84]) /* ty=Tensor[(1, 30000), float32] */;
  let %storage_2: Storage[] = memory.alloc_storage(30000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][85]) /* ty=Storage[] */;
  let %tensor_2: Tensor[(1, 7500), float32] = memory.alloc_tensor(%storage_2, 0 /* ty=int64 */, meta[relay.Constant][215] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][85]) /* ty=Tensor[(1, 7500), float32] */;
  let %storage_3: Storage[] = memory.alloc_storage(7500 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][86]) /* ty=Storage[] */;
  let %tensor_3: Tensor[(1, 1875), float32] = memory.alloc_tensor(%storage_3, 0 /* ty=int64 */, meta[relay.Constant][216] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][86]) /* ty=Tensor[(1, 1875), float32] */;
  let %storage_4: Storage[] = memory.alloc_storage(2028 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][87]) /* ty=Storage[] */;
  let %tensor_4: Tensor[(1, 507), float32] = memory.alloc_tensor(%storage_4, 0 /* ty=int64 */, meta[relay.Constant][217] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][87]) /* ty=Tensor[(1, 507), float32] */;
  %439 = fn (%p083: Tensor[(1, 159882), float32], Primitive=1) -> (Tensor[(1, 120000), float32], Tensor[(1, 30000), float32], Tensor[(1, 7500), float32], Tensor[(1, 1875), float32], Tensor[(1, 507), float32]) {
    split(%p083, indices_or_sections=[120000, 150000, 157500, 159375], axis=1) /* ty=(Tensor[(1, 120000), float32], Tensor[(1, 30000), float32], Tensor[(1, 7500), float32], Tensor[(1, 1875), float32], Tensor[(1, 507), float32]) */
  };
  %440 = (%x166,);
  %441 = (%tensor_083, %tensor_1, %tensor_2, %tensor_3, %tensor_4);
  let %x167: () = vm.invoke_tvm_op(%439, %440, %441) /* ty=() */;
  let %x168: (Tensor[(1, 120000), float32], Tensor[(1, 30000), float32], Tensor[(1, 7500), float32], Tensor[(1, 1875), float32], Tensor[(1, 507), float32]) = (%tensor_083, %tensor_1, %tensor_2, %tensor_3, %tensor_4);
  let %x169: Tensor[(1, 120000), float32] = %x168.0;
  let %storage_084: Storage[] = memory.alloc_storage(4000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][88]) /* ty=Storage[] */;
  let %tensor_084: Tensor[(1, 1000), float32] = memory.alloc_tensor(%storage_084, 0 /* ty=int64 */, meta[relay.Constant][218] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][88]) /* ty=Tensor[(1, 1000), float32] */;
  let %storage_11: Storage[] = memory.alloc_storage(8000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][89]) /* ty=Storage[] */;
  let %tensor_11: Tensor[(1, 1000), int64] = memory.alloc_tensor(%storage_11, 0 /* ty=int64 */, meta[relay.Constant][219] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][89]) /* ty=Tensor[(1, 1000), int64] */;
  %442 = fn (%p084: Tensor[(1, 120000), float32], Primitive=1) -> (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) {
    topk(%p084, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */
  };
  %443 = (%x169,);
  %444 = (%tensor_084, %tensor_11);
  let %x170: () = vm.invoke_tvm_op(%442, %443, %444) /* ty=() */;
  let %x171: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) = (%tensor_084, %tensor_11);
  let %x172: Tensor[(1, 30000), float32] = %x168.1;
  let %storage_085: Storage[] = memory.alloc_storage(4000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][90]) /* ty=Storage[] */;
  let %tensor_085: Tensor[(1, 1000), float32] = memory.alloc_tensor(%storage_085, 0 /* ty=int64 */, meta[relay.Constant][220] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][90]) /* ty=Tensor[(1, 1000), float32] */;
  let %storage_12: Storage[] = memory.alloc_storage(8000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][91]) /* ty=Storage[] */;
  let %tensor_12: Tensor[(1, 1000), int64] = memory.alloc_tensor(%storage_12, 0 /* ty=int64 */, meta[relay.Constant][221] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][91]) /* ty=Tensor[(1, 1000), int64] */;
  %445 = fn (%p085: Tensor[(1, 30000), float32], Primitive=1) -> (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) {
    topk(%p085, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */
  };
  %446 = (%x172,);
  %447 = (%tensor_085, %tensor_12);
  let %x173: () = vm.invoke_tvm_op(%445, %446, %447) /* ty=() */;
  let %x174: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) = (%tensor_085, %tensor_12);
  let %x175: Tensor[(1, 7500), float32] = %x168.2;
  let %storage_086: Storage[] = memory.alloc_storage(4000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][92]) /* ty=Storage[] */;
  let %tensor_086: Tensor[(1, 1000), float32] = memory.alloc_tensor(%storage_086, 0 /* ty=int64 */, meta[relay.Constant][222] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][92]) /* ty=Tensor[(1, 1000), float32] */;
  let %storage_13: Storage[] = memory.alloc_storage(8000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][93]) /* ty=Storage[] */;
  let %tensor_13: Tensor[(1, 1000), int64] = memory.alloc_tensor(%storage_13, 0 /* ty=int64 */, meta[relay.Constant][223] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][93]) /* ty=Tensor[(1, 1000), int64] */;
  %448 = fn (%p086: Tensor[(1, 7500), float32], Primitive=1) -> (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) {
    topk(%p086, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */
  };
  %449 = (%x175,);
  %450 = (%tensor_086, %tensor_13);
  let %x176: () = vm.invoke_tvm_op(%448, %449, %450) /* ty=() */;
  let %x177: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) = (%tensor_086, %tensor_13);
  let %x178: Tensor[(1, 1875), float32] = %x168.3;
  let %storage_087: Storage[] = memory.alloc_storage(4000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][94]) /* ty=Storage[] */;
  let %tensor_087: Tensor[(1, 1000), float32] = memory.alloc_tensor(%storage_087, 0 /* ty=int64 */, meta[relay.Constant][224] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][94]) /* ty=Tensor[(1, 1000), float32] */;
  let %storage_14: Storage[] = memory.alloc_storage(8000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][95]) /* ty=Storage[] */;
  let %tensor_14: Tensor[(1, 1000), int64] = memory.alloc_tensor(%storage_14, 0 /* ty=int64 */, meta[relay.Constant][225] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][95]) /* ty=Tensor[(1, 1000), int64] */;
  %451 = fn (%p087: Tensor[(1, 1875), float32], Primitive=1) -> (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) {
    topk(%p087, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */
  };
  %452 = (%x178,);
  %453 = (%tensor_087, %tensor_14);
  let %x179: () = vm.invoke_tvm_op(%451, %452, %453) /* ty=() */;
  let %x180: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) = (%tensor_087, %tensor_14);
  let %x181: Tensor[(1, 507), float32] = %x168.4;
  let %storage_088: Storage[] = memory.alloc_storage(2028 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][96]) /* ty=Storage[] */;
  let %tensor_088: Tensor[(1, 507), float32] = memory.alloc_tensor(%storage_088, 0 /* ty=int64 */, meta[relay.Constant][226] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][96]) /* ty=Tensor[(1, 507), float32] */;
  let %storage_15: Storage[] = memory.alloc_storage(4056 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][97]) /* ty=Storage[] */;
  let %tensor_15: Tensor[(1, 507), int64] = memory.alloc_tensor(%storage_15, 0 /* ty=int64 */, meta[relay.Constant][227] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][97]) /* ty=Tensor[(1, 507), int64] */;
  %454 = fn (%p088: Tensor[(1, 507), float32], Primitive=1) -> (Tensor[(1, 507), float32], Tensor[(1, 507), int64]) {
    topk(%p088, k=507, axis=1, dtype="int64") /* ty=(Tensor[(1, 507), float32], Tensor[(1, 507), int64]) */
  };
  %455 = (%x181,);
  %456 = (%tensor_088, %tensor_15);
  let %x182: () = vm.invoke_tvm_op(%454, %455, %456) /* ty=() */;
  let %x183: (Tensor[(1, 507), float32], Tensor[(1, 507), int64]) = (%tensor_088, %tensor_15);
  let %storage_089: Storage[] = memory.alloc_storage(36056 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][98]) /* ty=Storage[] */;
  let %tensor_089: Tensor[(1, 4507), int64] = memory.alloc_tensor(%storage_089, 0 /* ty=int64 */, meta[relay.Constant][228] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][98]) /* ty=Tensor[(1, 4507), int64] */;
  %468 = fn (%p089: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]), %p178: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]), %p278: Tensor[(1), int64], %p320: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]), %p41: Tensor[(1), int64], %p5: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]), %p6: Tensor[(1), int64], %p7: (Tensor[(1, 507), float32], Tensor[(1, 507), int64]), %p8: Tensor[(1), int64], Primitive=1) -> Tensor[(1, 4507), int64] {
    %457 = %p089.1;
    %458 = add(%457, 0 /* ty=int64 */) /* ty=Tensor[(1, 1000), int64] */;
    %459 = %p178.1;
    %460 = add(%459, %p278) /* ty=Tensor[(1, 1000), int64] */;
    %461 = %p320.1;
    %462 = add(%461, %p41) /* ty=Tensor[(1, 1000), int64] */;
    %463 = %p5.1;
    %464 = add(%463, %p6) /* ty=Tensor[(1, 1000), int64] */;
    %465 = %p7.1;
    %466 = add(%465, %p8) /* ty=Tensor[(1, 507), int64] */;
    %467 = (%458, %460, %462, %464, %466);
    concatenate(%467, axis=1) /* ty=Tensor[(1, 4507), int64] */
  };
  %469 = (%x171, %x174, meta[relay.Constant][229] /* ty=Tensor[(1), int64] */, %x177, meta[relay.Constant][230] /* ty=Tensor[(1), int64] */, %x180, meta[relay.Constant][231] /* ty=Tensor[(1), int64] */, %x183, meta[relay.Constant][232] /* ty=Tensor[(1), int64] */);
  %470 = (%tensor_089,);
  let %x184: () = vm.invoke_tvm_op(%468, %469, %470) /* ty=() */;
  let %x185: Tensor[(1, 4507), int64] = %tensor_089;
  let %storage_090: Storage[] = memory.alloc_storage(72112 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][99]) /* ty=Storage[] */;
  let %tensor_090: Tensor[(4507, 4), float32] = memory.alloc_tensor(%storage_090, 0 /* ty=int64 */, meta[relay.Constant][233] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][99]) /* ty=Tensor[(4507, 4), float32] */;
  %537 = fn (%p090: Tensor[(1, 200, 200, 12), float32], %p179: Tensor[(1, 100, 100, 12), float32], %p279: Tensor[(1, 50, 50, 12), float32], %p321: Tensor[(1, 25, 25, 12), float32], %p42: Tensor[(1, 13, 13, 12), float32], %p51: Tensor[(159882, 1), float32], %p61: Tensor[(159882, 1), float32], %p71: Tensor[(159882, 1), float32], %p81: Tensor[(159882, 1), float32], %p9: Tensor[(1, 1), int64], %p10: Tensor[(1, 4507), int64], %p1110: float32, Primitive=1) -> Tensor[(4507, 4), float32] {
    %471 = layout_transform(%p090, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 200, 200), float32] */;
    %472 = reshape(%471, newshape=[1, -1, 4, 200, 200]) /* ty=Tensor[(1, 3, 4, 200, 200), float32] */;
    %473 = transpose(%472, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 4), float32] */;
    %474 = reshape(%473, newshape=[1, -1, 4]) /* ty=Tensor[(1, 120000, 4), float32] */;
    %475 = layout_transform(%p179, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 100, 100), float32] */;
    %476 = reshape(%475, newshape=[1, -1, 4, 100, 100]) /* ty=Tensor[(1, 3, 4, 100, 100), float32] */;
    %477 = transpose(%476, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 4), float32] */;
    %478 = reshape(%477, newshape=[1, -1, 4]) /* ty=Tensor[(1, 30000, 4), float32] */;
    %479 = layout_transform(%p279, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 50, 50), float32] */;
    %480 = reshape(%479, newshape=[1, -1, 4, 50, 50]) /* ty=Tensor[(1, 3, 4, 50, 50), float32] */;
    %481 = transpose(%480, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 4), float32] */;
    %482 = reshape(%481, newshape=[1, -1, 4]) /* ty=Tensor[(1, 7500, 4), float32] */;
    %483 = layout_transform(%p321, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 25, 25), float32] */;
    %484 = reshape(%483, newshape=[1, -1, 4, 25, 25]) /* ty=Tensor[(1, 3, 4, 25, 25), float32] */;
    %485 = transpose(%484, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 4), float32] */;
    %486 = reshape(%485, newshape=[1, -1, 4]) /* ty=Tensor[(1, 1875, 4), float32] */;
    %487 = layout_transform(%p42, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 13, 13), float32] */;
    %488 = reshape(%487, newshape=[1, -1, 4, 13, 13]) /* ty=Tensor[(1, 3, 4, 13, 13), float32] */;
    %489 = transpose(%488, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 4), float32] */;
    %490 = reshape(%489, newshape=[1, -1, 4]) /* ty=Tensor[(1, 507, 4), float32] */;
    %491 = (%474, %478, %482, %486, %490);
    %492 = concatenate(%491, axis=1) /* ty=Tensor[(1, 159882, 4), float32] */;
    %493 = reshape(%492, newshape=[159882, 4]) /* ty=Tensor[(159882, 4), float32] */;
    %494 = strided_slice(%493, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
    %495 = strided_slice(%494, begin=[0, 0], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
    %496 = divide(%495, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
    %497 = multiply(%496, %p51) /* ty=Tensor[(159882, 1), float32] */;
    %498 = add(%497, %p61) /* ty=Tensor[(159882, 1), float32] */;
    %499 = strided_slice(%494, begin=[0, 2], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
    %500 = divide(%499, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
    %501 = clip(%500, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float32] */;
    %502 = exp(%501) /* ty=Tensor[(159882, 1), float32] */;
    %503 = multiply(%502, %p51) /* ty=Tensor[(159882, 1), float32] */;
    %504 = multiply(0.5f /* ty=float32 */, %503) /* ty=Tensor[(159882, 1), float32] */;
    %505 = subtract(%498, %504) /* ty=Tensor[(159882, 1), float32] */;
    %506 = strided_slice(%494, begin=[0, 1], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
    %507 = divide(%506, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
    %508 = multiply(%507, %p71) /* ty=Tensor[(159882, 1), float32] */;
    %509 = add(%508, %p81) /* ty=Tensor[(159882, 1), float32] */;
    %510 = strided_slice(%494, begin=[0, 3], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
    %511 = divide(%510, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
    %512 = clip(%511, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float32] */;
    %513 = exp(%512) /* ty=Tensor[(159882, 1), float32] */;
    %514 = multiply(%513, %p71) /* ty=Tensor[(159882, 1), float32] */;
    %515 = multiply(0.5f /* ty=float32 */, %514) /* ty=Tensor[(159882, 1), float32] */;
    %516 = subtract(%509, %515) /* ty=Tensor[(159882, 1), float32] */;
    %517 = add(%498, %504) /* ty=Tensor[(159882, 1), float32] */;
    %518 = add(%509, %515) /* ty=Tensor[(159882, 1), float32] */;
    %519 = (%505, %516, %517, %518);
    %520 = stack(%519, axis=2) /* ty=Tensor[(159882, 1, 4), float32] */;
    %521 = reshape(%520, newshape=[0, -1, 1]) /* ty=Tensor[(159882, 4, 1), float32] */;
    %522 = squeeze(%521, axis=[2]) /* ty=Tensor[(159882, 4), float32] */;
    %523 = reshape(%522, newshape=[1, 159882, 4]) /* ty=Tensor[(1, 159882, 4), float32] */;
    %524 = (%523, %p9, %p10);
    %525 = adv_index(%524) /* ty=Tensor[(1, 4507, 4), float32] */;
    %526 = split(%525, indices_or_sections=1) /* ty=(Tensor[(1, 4507, 4), float32],) */;
    %527 = %526.0;
    %528 = squeeze(%527, axis=[0]) /* ty=Tensor[(4507, 4), float32] */;
    %529 = strided_slice(%528, begin=[0, 0], end=[4507, 4], strides=[1, 2]) /* ty=Tensor[(4507, 2), float32] */;
    %530 = maximum(%529, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
    %531 = minimum(%530, %p1110) /* ty=Tensor[(4507, 2), float32] */;
    %532 = strided_slice(%528, begin=[0, 1], end=[4507, 4], strides=[1, 2]) /* ty=Tensor[(4507, 2), float32] */;
    %533 = maximum(%532, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
    %534 = minimum(%533, %p1110) /* ty=Tensor[(4507, 2), float32] */;
    %535 = (%531, %534);
    %536 = stack(%535, axis=2) /* ty=Tensor[(4507, 2, 2), float32] */;
    reshape(%536, newshape=[4507, 4]) /* ty=Tensor[(4507, 4), float32] */
  };
  %538 = (%x130, %x136, %x142, %x148, %x154, meta[relay.Constant][234] /* ty=Tensor[(159882, 1), float32] */, meta[relay.Constant][235] /* ty=Tensor[(159882, 1), float32] */, meta[relay.Constant][236] /* ty=Tensor[(159882, 1), float32] */, meta[relay.Constant][237] /* ty=Tensor[(159882, 1), float32] */, meta[relay.Constant][238] /* ty=Tensor[(1, 1), int64] */, %x185, 800f /* ty=float32 */);
  %539 = (%tensor_090,);
  let %x186: () = vm.invoke_tvm_op(%537, %538, %539) /* ty=() */;
  let %x187: Tensor[(4507, 4), float32] = %tensor_090;
  let %storage_091: Storage[] = memory.alloc_storage(4507 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][100]) /* ty=Storage[] */;
  let %tensor_091: Tensor[(4507), bool] = memory.alloc_tensor(%storage_091, 0 /* ty=int64 */, meta[relay.Constant][239] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][100]) /* ty=Tensor[(4507), bool] */;
  %551 = fn (%p091: Tensor[(4507, 4), float32], Primitive=1) -> Tensor[(4507), bool] {
    %540 = strided_slice(%p091, begin=[0, 0], end=[4507, 4], strides=[1, 1]) /* ty=Tensor[(4507, 4), float32] */;
    %541 = take(%540, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
    %542 = take(%540, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
    %543 = subtract(%541, %542) /* ty=Tensor[(4507), float32] */;
    %544 = greater_equal(%543, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
    %545 = cast(%544, dtype="bool") /* ty=Tensor[(4507), bool] */;
    %546 = take(%540, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
    %547 = take(%540, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
    %548 = subtract(%546, %547) /* ty=Tensor[(4507), float32] */;
    %549 = greater_equal(%548, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
    %550 = cast(%549, dtype="bool") /* ty=Tensor[(4507), bool] */;
    logical_and(%545, %550) /* ty=Tensor[(4507), bool] */
  };
  %552 = (%x187,);
  %553 = (%tensor_091,);
  let %x188: () = vm.invoke_tvm_op(%551, %552, %553) /* ty=() */;
  let %x189: Tensor[(4507), bool] = %tensor_091;
  let %in_shape_0: Tensor[(4507), bool] = %x189;
  let %storage_092: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][101]) /* ty=Storage[] */;
  let %tensor_092: Tensor[(2), int64] = memory.alloc_tensor(%storage_092, 0 /* ty=int64 */, meta[relay.Constant][240] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][101]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0: Tensor[(2), int64] = %tensor_092;
  %554 = fn (%p092: Tensor[(4507), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p092) /* ty=Tensor[(?, 1), int32] */
  };
  %555 = (%in_shape_0,);
  %556 = (%shape_func_out_0,);
  let %shape_func: () = vm.shape_func(%554, %555, %556, meta[relay.attrs.ShapeFuncAttrs][0]) /* ty=() */;
  let %storage_093: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][102]) /* ty=Storage[] */;
  let %tensor_093: int64 = memory.alloc_tensor(%storage_093, 0 /* ty=int64 */, meta[relay.Constant][241] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][102]) /* ty=int64 */;
  %557 = fn (%p093: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p093) /* ty=int64 */
  };
  %558 = (%shape_func_out_0,);
  %559 = (%tensor_093,);
  let %x190: () = vm.invoke_tvm_op(%557, %558, %559) /* ty=() */;
  let %storage_094: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][103]) /* ty=Storage[] */;
  let %tensor_094: int64 = memory.alloc_tensor(%storage_094, 0 /* ty=int64 */, meta[relay.Constant][242] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][103]) /* ty=int64 */;
  %560 = fn (%p094: int64, Primitive=1) -> int64 {
    multiply(%p094, 4 /* ty=int64 */) /* ty=int64 */
  };
  %561 = (%tensor_093,);
  %562 = (%tensor_094,);
  let %x191: () = vm.invoke_tvm_op(%560, %561, %562) /* ty=() */;
  let %storage_095: Storage[] = memory.alloc_storage(%tensor_094, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][104]) /* ty=Storage[] */;
  let %out_0: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_095, 0 /* ty=int64 */, %shape_func_out_0, meta[relay.attrs.AllocTensorAttrs][104]) /* ty=Tensor[(?, 1), int32] */;
  %563 = (%x189,);
  %564 = (%out_0,);
  let %x192: () = vm.invoke_tvm_op(%554, %563, %564) /* ty=() */;
  let %x193: Tensor[(?, 1), int32] = %out_0;
  let %in_shape_01: Tensor[(2), int64] = vm.shape_of(%x193, meta[relay.attrs.ShapeOfAttrs][0]) /* ty=Tensor[(2), int64] */;
  let %storage_096: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][105]) /* ty=Storage[] */;
  let %tensor_095: Tensor[(1), int64] = memory.alloc_tensor(%storage_096, 0 /* ty=int64 */, meta[relay.Constant][243] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][105]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_01: Tensor[(1), int64] = %tensor_095;
  %568 = fn (%p095: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int64] {
    %565 = split(%p095, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %566 = %565.0;
    %567 = squeeze(%566, axis=[1]) /* ty=Tensor[(?), int32] */;
    cast(%567, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %569 = (%in_shape_01,);
  %570 = (%shape_func_out_01,);
  let %shape_func1: () = vm.shape_func(%568, %569, %570, meta[relay.attrs.ShapeFuncAttrs][1]) /* ty=() */;
  let %storage_097: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][106]) /* ty=Storage[] */;
  let %tensor_096: int64 = memory.alloc_tensor(%storage_097, 0 /* ty=int64 */, meta[relay.Constant][244] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][106]) /* ty=int64 */;
  %571 = fn (%p096: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p096) /* ty=int64 */
  };
  %572 = (%shape_func_out_01,);
  %573 = (%tensor_096,);
  let %x194: () = vm.invoke_tvm_op(%571, %572, %573) /* ty=() */;
  let %storage_098: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][107]) /* ty=Storage[] */;
  let %tensor_097: int64 = memory.alloc_tensor(%storage_098, 0 /* ty=int64 */, meta[relay.Constant][245] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][107]) /* ty=int64 */;
  %574 = fn (%p097: int64, Primitive=1) -> int64 {
    multiply(%p097, 8 /* ty=int64 */) /* ty=int64 */
  };
  %575 = (%tensor_096,);
  %576 = (%tensor_097,);
  let %x195: () = vm.invoke_tvm_op(%574, %575, %576) /* ty=() */;
  let %storage_099: Storage[] = memory.alloc_storage(%tensor_097, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][108]) /* ty=Storage[] */;
  let %out_01: Tensor[(?), int64] = memory.alloc_tensor(%storage_099, 0 /* ty=int64 */, %shape_func_out_01, meta[relay.attrs.AllocTensorAttrs][108]) /* ty=Tensor[(?), int64] */;
  %577 = (%x193,);
  %578 = (%out_01,);
  let %x196: () = vm.invoke_tvm_op(%568, %577, %578) /* ty=() */;
  let %x197: Tensor[(?), int64] = %out_01;
  let %in_shape_1: Tensor[(1), int64] = vm.shape_of(%x197, meta[relay.attrs.ShapeOfAttrs][1]) /* ty=Tensor[(1), int64] */;
  let %storage_0100: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][109]) /* ty=Storage[] */;
  let %tensor_098: Tensor[(2), int64] = memory.alloc_tensor(%storage_0100, 0 /* ty=int64 */, meta[relay.Constant][246] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][109]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_02: Tensor[(2), int64] = %tensor_098;
  %580 = fn (%p098: Tensor[(4507, 4), float32], %p180: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 4), float32] {
    %579 = (%p098, %p180);
    adv_index(%579) /* ty=Tensor[(?, 4), float32] */
  };
  %581 = (meta[relay.Constant][247] /* ty=Tensor[(2), int64] */, %in_shape_1);
  %582 = (%shape_func_out_02,);
  let %shape_func2: () = vm.shape_func(%580, %581, %582, meta[relay.attrs.ShapeFuncAttrs][2]) /* ty=() */;
  let %storage_0101: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][110]) /* ty=Storage[] */;
  let %tensor_099: int64 = memory.alloc_tensor(%storage_0101, 0 /* ty=int64 */, meta[relay.Constant][248] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][110]) /* ty=int64 */;
  %583 = fn (%p099: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p099) /* ty=int64 */
  };
  %584 = (%shape_func_out_02,);
  %585 = (%tensor_099,);
  let %x198: () = vm.invoke_tvm_op(%583, %584, %585) /* ty=() */;
  let %storage_0102: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][111]) /* ty=Storage[] */;
  let %tensor_0100: int64 = memory.alloc_tensor(%storage_0102, 0 /* ty=int64 */, meta[relay.Constant][249] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][111]) /* ty=int64 */;
  %586 = fn (%p0100: int64, Primitive=1) -> int64 {
    multiply(%p0100, 4 /* ty=int64 */) /* ty=int64 */
  };
  %587 = (%tensor_099,);
  %588 = (%tensor_0100,);
  let %x199: () = vm.invoke_tvm_op(%586, %587, %588) /* ty=() */;
  let %storage_0103: Storage[] = memory.alloc_storage(%tensor_0100, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][112]) /* ty=Storage[] */;
  let %out_02: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0103, 0 /* ty=int64 */, %shape_func_out_02, meta[relay.attrs.AllocTensorAttrs][112]) /* ty=Tensor[(?, 4), float32] */;
  %589 = (%x187, %x197);
  %590 = (%out_02,);
  let %x200: () = vm.invoke_tvm_op(%580, %589, %590) /* ty=() */;
  let %x201: Tensor[(?, 4), float32] = %out_02;
  let %storage_0104: Storage[] = memory.alloc_storage(1 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][113]) /* ty=Storage[] */;
  let %tensor_0101: bool = memory.alloc_tensor(%storage_0104, 0 /* ty=int64 */, meta[relay.Constant][250] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][113]) /* ty=bool */;
  %592 = fn (%p0101: Tensor[(?, 4), float32], Primitive=1) -> bool {
    %591 = ndarray_size(%p0101, dtype="int32") /* ty=int32 */;
    equal(%591, 0 /* ty=int32 */) /* ty=bool */
  };
  %593 = (%x201,);
  %594 = (%tensor_0101,);
  let %x202: () = vm.invoke_tvm_op(%592, %593, %594) /* ty=() */;
  let %x203: bool = %tensor_0101;
  let %x204: Tensor[(?), int64] = if (%x203) {
    let %storage_0105: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][114]) /* ty=Storage[] */;
    let %tensor_0102: Tensor[(1), int64] = memory.alloc_tensor(%storage_0105, 0 /* ty=int64 */, meta[relay.Constant][251] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][114]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_03: Tensor[(1), int64] = %tensor_0102;
    %595 = fn (Primitive=1) -> Tensor[(?), int64] {
      zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
    };
    %596 = ();
    %597 = (%shape_func_out_03,);
    let %shape_func3: () = vm.shape_func(%595, %596, %597, meta[relay.attrs.ShapeFuncAttrs][3]) /* ty=() */;
    let %storage_0106: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][115]) /* ty=Storage[] */;
    let %tensor_0103: int64 = memory.alloc_tensor(%storage_0106, 0 /* ty=int64 */, meta[relay.Constant][252] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][115]) /* ty=int64 */;
    %598 = fn (%p0102: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0102) /* ty=int64 */
    };
    %599 = (%shape_func_out_03,);
    %600 = (%tensor_0103,);
    let %x205: () = vm.invoke_tvm_op(%598, %599, %600) /* ty=() */;
    let %storage_0107: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][116]) /* ty=Storage[] */;
    let %tensor_0104: int64 = memory.alloc_tensor(%storage_0107, 0 /* ty=int64 */, meta[relay.Constant][253] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][116]) /* ty=int64 */;
    %601 = fn (%p0103: int64, Primitive=1) -> int64 {
      multiply(%p0103, 8 /* ty=int64 */) /* ty=int64 */
    };
    %602 = (%tensor_0103,);
    %603 = (%tensor_0104,);
    let %x206: () = vm.invoke_tvm_op(%601, %602, %603) /* ty=() */;
    let %storage_0108: Storage[] = memory.alloc_storage(%tensor_0104, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][117]) /* ty=Storage[] */;
    let %out_03: Tensor[(?), int64] = memory.alloc_tensor(%storage_0108, 0 /* ty=int64 */, %shape_func_out_03, meta[relay.attrs.AllocTensorAttrs][117]) /* ty=Tensor[(?), int64] */;
    %604 = ();
    %605 = (%out_03,);
    let %x207: () = vm.invoke_tvm_op(%595, %604, %605) /* ty=() */;
    let %x208: Tensor[(?), int64] = %out_03;
    %x208
  } else {
    let %in_shape_3: Tensor[(1), int64] = vm.shape_of(%x197, meta[relay.attrs.ShapeOfAttrs][2]) /* ty=Tensor[(1), int64] */;
    let %storage_0109: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][118]) /* ty=Storage[] */;
    let %tensor_0105: Tensor[(1), int64] = memory.alloc_tensor(%storage_0109, 0 /* ty=int64 */, meta[relay.Constant][254] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][118]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_04: Tensor[(1), int64] = %tensor_0105;
    %612 = fn (%p0104: Tensor[(1, 159882), float32], %p181: Tensor[(1, 1), int64], %p280: Tensor[(1, 4507), int64], %p322: Tensor[(?), int64], Primitive=1) -> Tensor[(?), float32] {
      %606 = (%p0104, %p181, %p280);
      %607 = adv_index(%606) /* ty=Tensor[(1, 4507), float32] */;
      %608 = split(%607, indices_or_sections=1) /* ty=(Tensor[(1, 4507), float32],) */;
      %609 = %608.0;
      %610 = squeeze(%609, axis=[0]) /* ty=Tensor[(4507), float32] */;
      %611 = (%610, %p322);
      adv_index(%611) /* ty=Tensor[(?), float32] */
    };
    %613 = (meta[relay.Constant][255] /* ty=Tensor[(2), int64] */, meta[relay.Constant][256] /* ty=Tensor[(2), int64] */, meta[relay.Constant][257] /* ty=Tensor[(2), int64] */, %in_shape_3);
    %614 = (%shape_func_out_04,);
    let %shape_func4: () = vm.shape_func(%612, %613, %614, meta[relay.attrs.ShapeFuncAttrs][4]) /* ty=() */;
    let %storage_0110: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][119]) /* ty=Storage[] */;
    let %tensor_0106: int64 = memory.alloc_tensor(%storage_0110, 0 /* ty=int64 */, meta[relay.Constant][258] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][119]) /* ty=int64 */;
    %615 = fn (%p0105: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0105) /* ty=int64 */
    };
    %616 = (%shape_func_out_04,);
    %617 = (%tensor_0106,);
    let %x209: () = vm.invoke_tvm_op(%615, %616, %617) /* ty=() */;
    let %storage_0111: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][120]) /* ty=Storage[] */;
    let %tensor_0107: int64 = memory.alloc_tensor(%storage_0111, 0 /* ty=int64 */, meta[relay.Constant][259] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][120]) /* ty=int64 */;
    %618 = fn (%p0106: int64, Primitive=1) -> int64 {
      multiply(%p0106, 4 /* ty=int64 */) /* ty=int64 */
    };
    %619 = (%tensor_0106,);
    %620 = (%tensor_0107,);
    let %x210: () = vm.invoke_tvm_op(%618, %619, %620) /* ty=() */;
    let %storage_0112: Storage[] = memory.alloc_storage(%tensor_0107, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][121]) /* ty=Storage[] */;
    let %out_04: Tensor[(?), float32] = memory.alloc_tensor(%storage_0112, 0 /* ty=int64 */, %shape_func_out_04, meta[relay.attrs.AllocTensorAttrs][121]) /* ty=Tensor[(?), float32] */;
    %621 = (%x166, meta[relay.Constant][238] /* ty=Tensor[(1, 1), int64] */, %x185, %x197);
    %622 = (%out_04,);
    let %x211: () = vm.invoke_tvm_op(%612, %621, %622) /* ty=() */;
    let %x212: Tensor[(?), float32] = %out_04;
    let %storage_0113: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][122]) /* ty=Storage[] */;
    let %tensor_0108: float32 = memory.alloc_tensor(%storage_0113, 0 /* ty=int64 */, meta[relay.Constant][260] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][122]) /* ty=float32 */;
    %623 = fn (%p0107: Tensor[(?), float32], Primitive=1) -> float32 {
      min(%p0107) /* ty=float32 */
    };
    %624 = (%x212,);
    %625 = (%tensor_0108,);
    let %x213: () = vm.invoke_tvm_op(%623, %624, %625) /* ty=() */;
    let %x214: float32 = %tensor_0108;
    let %in_shape_02: Tensor[(1), int64] = vm.shape_of(%x212, meta[relay.attrs.ShapeOfAttrs][3]) /* ty=Tensor[(1), int64] */;
    let %storage_0114: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][123]) /* ty=Storage[] */;
    let %tensor_0109: Tensor[(1), int64] = memory.alloc_tensor(%storage_0114, 0 /* ty=int64 */, meta[relay.Constant][261] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][123]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_05: Tensor[(1), int64] = %tensor_0109;
    %627 = fn (%p0108: Tensor[(?), float32], %p182: float32, Primitive=1) -> Tensor[(?), float32] {
      %626 = subtract(%p0108, %p182) /* ty=Tensor[(?), float32] */;
      add(%626, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */
    };
    %628 = (%in_shape_02, 1334353056 /* ty=int64 */);
    %629 = (%shape_func_out_05,);
    let %shape_func5: () = vm.shape_func(%627, %628, %629, meta[relay.attrs.ShapeFuncAttrs][5]) /* ty=() */;
    let %storage_0115: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][124]) /* ty=Storage[] */;
    let %tensor_0110: int64 = memory.alloc_tensor(%storage_0115, 0 /* ty=int64 */, meta[relay.Constant][262] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][124]) /* ty=int64 */;
    %630 = fn (%p0109: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0109) /* ty=int64 */
    };
    %631 = (%shape_func_out_05,);
    %632 = (%tensor_0110,);
    let %x215: () = vm.invoke_tvm_op(%630, %631, %632) /* ty=() */;
    let %storage_0116: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][125]) /* ty=Storage[] */;
    let %tensor_0111: int64 = memory.alloc_tensor(%storage_0116, 0 /* ty=int64 */, meta[relay.Constant][263] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][125]) /* ty=int64 */;
    %633 = fn (%p0110: int64, Primitive=1) -> int64 {
      multiply(%p0110, 4 /* ty=int64 */) /* ty=int64 */
    };
    %634 = (%tensor_0110,);
    %635 = (%tensor_0111,);
    let %x216: () = vm.invoke_tvm_op(%633, %634, %635) /* ty=() */;
    let %storage_0117: Storage[] = memory.alloc_storage(%tensor_0111, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][126]) /* ty=Storage[] */;
    let %out_05: Tensor[(?), float32] = memory.alloc_tensor(%storage_0117, 0 /* ty=int64 */, %shape_func_out_05, meta[relay.attrs.AllocTensorAttrs][126]) /* ty=Tensor[(?), float32] */;
    %636 = (%x212, %x214);
    %637 = (%out_05,);
    let %x217: () = vm.invoke_tvm_op(%627, %636, %637) /* ty=() */;
    let %x218: Tensor[(?), float32] = %out_05;
    let %in_shape_4: Tensor[(1), int64] = vm.shape_of(%x197, meta[relay.attrs.ShapeOfAttrs][4]) /* ty=Tensor[(1), int64] */;
    let %in_shape_5: Tensor[(1), int64] = vm.shape_of(%x218, meta[relay.attrs.ShapeOfAttrs][5]) /* ty=Tensor[(1), int64] */;
    let %in_shape_6: Tensor[(2), int64] = vm.shape_of(%x201, meta[relay.attrs.ShapeOfAttrs][6]) /* ty=Tensor[(2), int64] */;
    let %storage_0118: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][127]) /* ty=Storage[] */;
    let %tensor_0112: Tensor[(3), int64] = memory.alloc_tensor(%storage_0118, 0 /* ty=int64 */, meta[relay.Constant][264] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][127]) /* ty=Tensor[(3), int64] */;
    let %shape_func_out_06: Tensor[(3), int64] = %tensor_0112;
    %652 = fn (%p0111: Tensor[(1, 159882), float32], %p183: Tensor[(1, 159882), int64], %p281: Tensor[(1, 1), int64], %p323: Tensor[(1, 4507), int64], %p43: Tensor[(?), int64], %p52: Tensor[(?), float32], %p62: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(1, ?, 6), float32] {
      %638 = cast(%p0111, dtype="int64") /* ty=Tensor[(1, 159882), int64] */;
      %639 = broadcast_to_like(%p183, %638) /* ty=Tensor[(1, 159882), int64] */;
      %640 = (%639, %p281, %p323);
      %641 = adv_index(%640) /* ty=Tensor[(1, 4507), int64] */;
      %642 = split(%641, indices_or_sections=1) /* ty=(Tensor[(1, 4507), int64],) */;
      %643 = %642.0;
      %644 = squeeze(%643, axis=[0]) /* ty=Tensor[(4507), int64] */;
      %645 = (%644, %p43);
      %646 = adv_index(%645) /* ty=Tensor[(?), int64] */;
      %647 = expand_dims(%646, axis=-1) /* ty=Tensor[(?, 1), int64] */;
      %648 = cast(%647, dtype="float32") /* ty=Tensor[(?, 1), float32] */;
      %649 = expand_dims(%p52, axis=-1) /* ty=Tensor[(?, 1), float32] */;
      %650 = (%648, %649, %p62);
      %651 = concatenate(%650, axis=-1) /* ty=Tensor[(?, 6), float32] */;
      expand_dims(%651, axis=0) /* ty=Tensor[(1, ?, 6), float32] */
    };
    %653 = (meta[relay.Constant][265] /* ty=Tensor[(2), int64] */, meta[relay.Constant][266] /* ty=Tensor[(2), int64] */, meta[relay.Constant][267] /* ty=Tensor[(2), int64] */, meta[relay.Constant][268] /* ty=Tensor[(2), int64] */, %in_shape_4, %in_shape_5, %in_shape_6);
    %654 = (%shape_func_out_06,);
    let %shape_func6: () = vm.shape_func(%652, %653, %654, meta[relay.attrs.ShapeFuncAttrs][6]) /* ty=() */;
    let %storage_0119: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][128]) /* ty=Storage[] */;
    let %tensor_0113: int64 = memory.alloc_tensor(%storage_0119, 0 /* ty=int64 */, meta[relay.Constant][269] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][128]) /* ty=int64 */;
    %655 = fn (%p0112: Tensor[(3), int64], Primitive=1) -> int64 {
      prod(%p0112) /* ty=int64 */
    };
    %656 = (%shape_func_out_06,);
    %657 = (%tensor_0113,);
    let %x219: () = vm.invoke_tvm_op(%655, %656, %657) /* ty=() */;
    let %storage_0120: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][129]) /* ty=Storage[] */;
    let %tensor_0114: int64 = memory.alloc_tensor(%storage_0120, 0 /* ty=int64 */, meta[relay.Constant][270] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][129]) /* ty=int64 */;
    %658 = fn (%p0113: int64, Primitive=1) -> int64 {
      multiply(%p0113, 4 /* ty=int64 */) /* ty=int64 */
    };
    %659 = (%tensor_0113,);
    %660 = (%tensor_0114,);
    let %x220: () = vm.invoke_tvm_op(%658, %659, %660) /* ty=() */;
    let %storage_0121: Storage[] = memory.alloc_storage(%tensor_0114, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][130]) /* ty=Storage[] */;
    let %out_06: Tensor[(1, ?, 6), float32] = memory.alloc_tensor(%storage_0121, 0 /* ty=int64 */, %shape_func_out_06, meta[relay.attrs.AllocTensorAttrs][130]) /* ty=Tensor[(1, ?, 6), float32] */;
    %661 = (%x166, meta[relay.Constant][271] /* ty=Tensor[(1, 159882), int64] */, meta[relay.Constant][238] /* ty=Tensor[(1, 1), int64] */, %x185, %x197, %x218, %x201);
    %662 = (%out_06,);
    let %x221: () = vm.invoke_tvm_op(%652, %661, %662) /* ty=() */;
    let %x222: Tensor[(1, ?, 6), float32] = %out_06;
    let %storage_0122: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][131]) /* ty=Storage[] */;
    let %tensor_0115: Tensor[(1), int32] = memory.alloc_tensor(%storage_0122, 0 /* ty=int64 */, meta[relay.Constant][272] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][131]) /* ty=Tensor[(1), int32] */;
    %663 = fn (%p0114: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
      shape_of(%p0114, dtype="int32") /* ty=Tensor[(1), int32] */
    };
    %664 = (%x218,);
    %665 = (%tensor_0115,);
    let %x223: () = vm.invoke_tvm_op(%663, %664, %665) /* ty=() */;
    let %x224: Tensor[(1), int32] = %tensor_0115;
    let %storage_0123: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][132]) /* ty=Storage[] */;
    let %tensor_0116: int32 = memory.alloc_tensor(%storage_0123, 0 /* ty=int64 */, meta[relay.Constant][273] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][132]) /* ty=int32 */;
    %666 = fn (%p0115: Tensor[(1), int32], Primitive=1) -> int32 {
      squeeze(%p0115) /* ty=int32 */
    };
    %667 = (%x224,);
    %668 = (%tensor_0116,);
    let %x225: () = vm.invoke_tvm_op(%666, %667, %668) /* ty=() */;
    let %x226: int32 = %tensor_0116;
    let %in_shape_11: int32 = %x226;
    let %storage_0124: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][133]) /* ty=Storage[] */;
    let %tensor_0117: Tensor[(1), int64] = memory.alloc_tensor(%storage_0124, 0 /* ty=int64 */, meta[relay.Constant][274] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][133]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_07: Tensor[(1), int64] = %tensor_0117;
    %669 = fn (%p0116: int32, %p184: int32, %p282: int32, Primitive=1) -> Tensor[(?), int32] {
      arange(%p0116, %p184, %p282, start=meta[relay.Constant][275], stop=meta[relay.Call][0], step=meta[relay.Constant][276], dtype="int32") /* ty=Tensor[(?), int32] */
    };
    %670 = (0 /* ty=int32 */, %in_shape_11, 1 /* ty=int32 */);
    %671 = (%shape_func_out_07,);
    let %shape_func7: () = vm.shape_func(%669, %670, %671, meta[relay.attrs.ShapeFuncAttrs][7]) /* ty=() */;
    let %storage_0125: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][134]) /* ty=Storage[] */;
    let %tensor_0118: int64 = memory.alloc_tensor(%storage_0125, 0 /* ty=int64 */, meta[relay.Constant][277] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][134]) /* ty=int64 */;
    %672 = fn (%p0117: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0117) /* ty=int64 */
    };
    %673 = (%shape_func_out_07,);
    %674 = (%tensor_0118,);
    let %x227: () = vm.invoke_tvm_op(%672, %673, %674) /* ty=() */;
    let %storage_0126: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][135]) /* ty=Storage[] */;
    let %tensor_0119: int64 = memory.alloc_tensor(%storage_0126, 0 /* ty=int64 */, meta[relay.Constant][278] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][135]) /* ty=int64 */;
    %675 = fn (%p0118: int64, Primitive=1) -> int64 {
      multiply(%p0118, 4 /* ty=int64 */) /* ty=int64 */
    };
    %676 = (%tensor_0118,);
    %677 = (%tensor_0119,);
    let %x228: () = vm.invoke_tvm_op(%675, %676, %677) /* ty=() */;
    let %storage_0127: Storage[] = memory.alloc_storage(%tensor_0119, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][136]) /* ty=Storage[] */;
    let %out_07: Tensor[(?), int32] = memory.alloc_tensor(%storage_0127, 0 /* ty=int64 */, %shape_func_out_07, meta[relay.attrs.AllocTensorAttrs][136]) /* ty=Tensor[(?), int32] */;
    %678 = (0 /* ty=int32 */, %x226, 1 /* ty=int32 */);
    %679 = (%out_07,);
    let %x229: () = vm.invoke_tvm_op(%669, %678, %679) /* ty=() */;
    let %x230: Tensor[(?), int32] = %out_07;
    let %in_shape_03: Tensor[(1), int64] = vm.shape_of(%x230, meta[relay.attrs.ShapeOfAttrs][7]) /* ty=Tensor[(1), int64] */;
    let %storage_0128: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][137]) /* ty=Storage[] */;
    let %tensor_0120: Tensor[(2), int64] = memory.alloc_tensor(%storage_0128, 0 /* ty=int64 */, meta[relay.Constant][279] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][137]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_08: Tensor[(2), int64] = %tensor_0120;
    %680 = fn (%p0119: Tensor[(?), int32], Primitive=1) -> Tensor[(1, ?), int32] {
      expand_dims(%p0119, axis=0) /* ty=Tensor[(1, ?), int32] */
    };
    %681 = (%in_shape_03,);
    %682 = (%shape_func_out_08,);
    let %shape_func8: () = vm.shape_func(%680, %681, %682, meta[relay.attrs.ShapeFuncAttrs][8]) /* ty=() */;
    let %storage_0129: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][138]) /* ty=Storage[] */;
    let %tensor_0121: int64 = memory.alloc_tensor(%storage_0129, 0 /* ty=int64 */, meta[relay.Constant][280] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][138]) /* ty=int64 */;
    %683 = fn (%p0120: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0120) /* ty=int64 */
    };
    %684 = (%shape_func_out_08,);
    %685 = (%tensor_0121,);
    let %x231: () = vm.invoke_tvm_op(%683, %684, %685) /* ty=() */;
    let %storage_0130: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][139]) /* ty=Storage[] */;
    let %tensor_0122: int64 = memory.alloc_tensor(%storage_0130, 0 /* ty=int64 */, meta[relay.Constant][281] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][139]) /* ty=int64 */;
    %686 = fn (%p0121: int64, Primitive=1) -> int64 {
      multiply(%p0121, 4 /* ty=int64 */) /* ty=int64 */
    };
    %687 = (%tensor_0121,);
    %688 = (%tensor_0122,);
    let %x232: () = vm.invoke_tvm_op(%686, %687, %688) /* ty=() */;
    let %storage_0131: Storage[] = memory.alloc_storage(%tensor_0122, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][140]) /* ty=Storage[] */;
    let %out_08: Tensor[(1, ?), int32] = memory.alloc_tensor(%storage_0131, 0 /* ty=int64 */, %shape_func_out_08, meta[relay.attrs.AllocTensorAttrs][140]) /* ty=Tensor[(1, ?), int32] */;
    %689 = (%x230,);
    %690 = (%out_08,);
    let %x233: () = vm.invoke_tvm_op(%680, %689, %690) /* ty=() */;
    let %x234: Tensor[(1, ?), int32] = %out_08;
    let %in_shape_04: Tensor[(3), int64] = vm.shape_of(%x222, meta[relay.attrs.ShapeOfAttrs][8]) /* ty=Tensor[(3), int64] */;
    let %in_shape_2: Tensor[(2), int64] = vm.shape_of(%x234, meta[relay.attrs.ShapeOfAttrs][9]) /* ty=Tensor[(2), int64] */;
    let %storage_0132: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][141]) /* ty=Storage[] */;
    let %tensor_0123: Tensor[(2), int64] = memory.alloc_tensor(%storage_0132, 0 /* ty=int64 */, meta[relay.Constant][282] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][141]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_09: Tensor[(2), int64] = %tensor_0123;
    let %storage_16: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][142]) /* ty=Storage[] */;
    let %tensor_16: Tensor[(2), int64] = memory.alloc_tensor(%storage_16, 0 /* ty=int64 */, meta[relay.Constant][283] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][142]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_1: Tensor[(2), int64] = %tensor_16;
    %691 = fn (%p0122: Tensor[(1, ?, 6), float32], %p185: Tensor[(1), int32], %p283: Tensor[(1, ?), int32], %p324: int32, %p44: float32, Primitive=1) -> (Tensor[(1, ?), int32], Tensor[(1, 1), int32]) {
      vision.non_max_suppression(%p0122, %p185, %p283, %p324, %p44, meta[relay.attrs.NonMaximumSuppressionAttrs][0]) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */
    };
    %692 = (%in_shape_04, meta[relay.Constant][284] /* ty=Tensor[(1), int64] */, %in_shape_2, 1234166224 /* ty=int64 */, 1363562432 /* ty=int64 */);
    %693 = (%shape_func_out_09, %shape_func_out_1);
    let %shape_func9: () = vm.shape_func(%691, %692, %693, meta[relay.attrs.ShapeFuncAttrs][9]) /* ty=() */;
    let %storage_0133: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][143]) /* ty=Storage[] */;
    let %tensor_0124: int64 = memory.alloc_tensor(%storage_0133, 0 /* ty=int64 */, meta[relay.Constant][285] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][143]) /* ty=int64 */;
    %694 = fn (%p0123: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0123) /* ty=int64 */
    };
    %695 = (%shape_func_out_09,);
    %696 = (%tensor_0124,);
    let %x235: () = vm.invoke_tvm_op(%694, %695, %696) /* ty=() */;
    let %storage_0134: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][144]) /* ty=Storage[] */;
    let %tensor_0125: int64 = memory.alloc_tensor(%storage_0134, 0 /* ty=int64 */, meta[relay.Constant][286] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][144]) /* ty=int64 */;
    %697 = fn (%p0124: int64, Primitive=1) -> int64 {
      multiply(%p0124, 4 /* ty=int64 */) /* ty=int64 */
    };
    %698 = (%tensor_0124,);
    %699 = (%tensor_0125,);
    let %x236: () = vm.invoke_tvm_op(%697, %698, %699) /* ty=() */;
    let %storage_0135: Storage[] = memory.alloc_storage(%tensor_0125, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][145]) /* ty=Storage[] */;
    let %storage_0136: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][146]) /* ty=Storage[] */;
    let %tensor_0126: int64 = memory.alloc_tensor(%storage_0136, 0 /* ty=int64 */, meta[relay.Constant][287] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][145]) /* ty=int64 */;
    %700 = fn (%p0125: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0125) /* ty=int64 */
    };
    %701 = (%shape_func_out_1,);
    %702 = (%tensor_0126,);
    let %x237: () = vm.invoke_tvm_op(%700, %701, %702) /* ty=() */;
    let %storage_0137: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][147]) /* ty=Storage[] */;
    let %tensor_0127: int64 = memory.alloc_tensor(%storage_0137, 0 /* ty=int64 */, meta[relay.Constant][288] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][146]) /* ty=int64 */;
    %703 = fn (%p0126: int64, Primitive=1) -> int64 {
      multiply(%p0126, 4 /* ty=int64 */) /* ty=int64 */
    };
    %704 = (%tensor_0126,);
    %705 = (%tensor_0127,);
    let %x238: () = vm.invoke_tvm_op(%703, %704, %705) /* ty=() */;
    let %storage_17: Storage[] = memory.alloc_storage(%tensor_0127, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][148]) /* ty=Storage[] */;
    let %out_09: Tensor[(1, ?), int32] = memory.alloc_tensor(%storage_0135, 0 /* ty=int64 */, %shape_func_out_09, meta[relay.attrs.AllocTensorAttrs][147]) /* ty=Tensor[(1, ?), int32] */;
    let %out_1: Tensor[(1, 1), int32] = memory.alloc_tensor(%storage_17, 0 /* ty=int64 */, %shape_func_out_1, meta[relay.attrs.AllocTensorAttrs][148]) /* ty=Tensor[(1, 1), int32] */;
    %706 = (%x222, %x224, %x234, 1000 /* ty=int32 */, 0.7f /* ty=float32 */);
    %707 = (%out_09, %out_1);
    let %x239: () = vm.invoke_tvm_op(%691, %706, %707) /* ty=() */;
    let %x240: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]) = (%out_09, %out_1);
    %708 = %x240.0;
    let %in_shape_05: Tensor[(2), int64] = vm.shape_of(%708, meta[relay.attrs.ShapeOfAttrs][10]) /* ty=Tensor[(2), int64] */;
    let %storage_0138: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][149]) /* ty=Storage[] */;
    let %tensor_0128: Tensor[(1), int64] = memory.alloc_tensor(%storage_0138, 0 /* ty=int64 */, meta[relay.Constant][289] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][149]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_010: Tensor[(1), int64] = %tensor_0128;
    %710 = fn (%p0127: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]), Primitive=1) -> Tensor[(?), int32] {
      %709 = %p0127.0;
      squeeze(%709, axis=[0]) /* ty=Tensor[(?), int32] */
    };
    %711 = (%in_shape_05, meta[relay.Constant][290] /* ty=Tensor[(2), int64] */);
    %712 = (%shape_func_out_010,);
    let %shape_func10: () = vm.shape_func(%710, %711, %712, meta[relay.attrs.ShapeFuncAttrs][10]) /* ty=() */;
    let %storage_0139: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][150]) /* ty=Storage[] */;
    let %tensor_0129: int64 = memory.alloc_tensor(%storage_0139, 0 /* ty=int64 */, meta[relay.Constant][291] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][150]) /* ty=int64 */;
    %713 = fn (%p0128: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0128) /* ty=int64 */
    };
    %714 = (%shape_func_out_010,);
    %715 = (%tensor_0129,);
    let %x241: () = vm.invoke_tvm_op(%713, %714, %715) /* ty=() */;
    let %storage_0140: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][151]) /* ty=Storage[] */;
    let %tensor_0130: int64 = memory.alloc_tensor(%storage_0140, 0 /* ty=int64 */, meta[relay.Constant][292] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][151]) /* ty=int64 */;
    %716 = fn (%p0129: int64, Primitive=1) -> int64 {
      multiply(%p0129, 4 /* ty=int64 */) /* ty=int64 */
    };
    %717 = (%tensor_0129,);
    %718 = (%tensor_0130,);
    let %x242: () = vm.invoke_tvm_op(%716, %717, %718) /* ty=() */;
    let %storage_0141: Storage[] = memory.alloc_storage(%tensor_0130, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][152]) /* ty=Storage[] */;
    let %out_010: Tensor[(?), int32] = memory.alloc_tensor(%storage_0141, 0 /* ty=int64 */, %shape_func_out_010, meta[relay.attrs.AllocTensorAttrs][152]) /* ty=Tensor[(?), int32] */;
    %719 = (%x240,);
    %720 = (%out_010,);
    let %x243: () = vm.invoke_tvm_op(%710, %719, %720) /* ty=() */;
    let %x244: Tensor[(?), int32] = %out_010;
    let %storage_0142: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][153]) /* ty=Storage[] */;
    let %tensor_0131: Tensor[(1), int32] = memory.alloc_tensor(%storage_0142, 0 /* ty=int64 */, meta[relay.Constant][293] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][153]) /* ty=Tensor[(1), int32] */;
    %721 = fn (%p0130: Tensor[(?), int32], Primitive=1) -> Tensor[(1), int32] {
      shape_of(%p0130, dtype="int32") /* ty=Tensor[(1), int32] */
    };
    %722 = (%x244,);
    %723 = (%tensor_0131,);
    let %x245: () = vm.invoke_tvm_op(%721, %722, %723) /* ty=() */;
    let %x246: Tensor[(1), int32] = %tensor_0131;
    let %storage_0143: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][154]) /* ty=Storage[] */;
    let %tensor_0132: Tensor[(1), int32] = memory.alloc_tensor(%storage_0143, 0 /* ty=int64 */, meta[relay.Constant][294] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][154]) /* ty=Tensor[(1), int32] */;
    %726 = fn (%p0131: Tensor[(1), int32], %p186: Tensor[(1), int32], %p284: Tensor[(1), bool], Primitive=1) -> Tensor[(1), int32] {
      %724 = cast_like(%p0131, %p186) /* ty=Tensor[(1), int32] */;
      %725 = add(%p186, %724) /* ty=Tensor[(1), int32] */;
      where(%p284, %725, %p186) /* ty=Tensor[(1), int32] */
    };
    %727 = (%x246, meta[relay.Constant][295] /* ty=Tensor[(1), int32] */, meta[relay.Constant][296] /* ty=Tensor[(1), bool] */);
    %728 = (%tensor_0132,);
    let %x247: () = vm.invoke_tvm_op(%726, %727, %728) /* ty=() */;
    let %x248: Tensor[(1), int32] = %tensor_0132;
    let %storage_0144: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][155]) /* ty=Storage[] */;
    let %tensor_0133: Tensor[(1), int32] = memory.alloc_tensor(%storage_0144, 0 /* ty=int64 */, meta[relay.Constant][297] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][155]) /* ty=Tensor[(1), int32] */;
    %730 = fn (%p0132: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]), Primitive=1) -> Tensor[(1), int32] {
      %729 = %p0132.1;
      squeeze(%729, axis=[1]) /* ty=Tensor[(1), int32] */
    };
    %731 = (%x240,);
    %732 = (%tensor_0133,);
    let %x249: () = vm.invoke_tvm_op(%730, %731, %732) /* ty=() */;
    let %x250: Tensor[(1), int32] = %tensor_0133;
    let %in_shape_06: Tensor[(1), int64] = vm.shape_of(%x244, meta[relay.attrs.ShapeOfAttrs][11]) /* ty=Tensor[(1), int64] */;
    let %in_shape_12: Tensor[(1), int32] = %x248;
    let %in_shape_21: Tensor[(1), int32] = %x250;
    let %storage_0145: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][156]) /* ty=Storage[] */;
    let %tensor_0134: Tensor[(1), int64] = memory.alloc_tensor(%storage_0145, 0 /* ty=int64 */, meta[relay.Constant][298] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][156]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_011: Tensor[(1), int64] = %tensor_0134;
    %733 = fn (%p0133: Tensor[(?), int32], %p187: Tensor[(1), int32], %p285: Tensor[(1), int32], %p325: Tensor[(1), int32], Primitive=1) -> Tensor[(?), int32] {
      dyn.strided_slice(%p0133, %p187, %p285, %p325, begin=None, end=None, strides=None, slice_mode="size") /* ty=Tensor[(?), int32] */
    };
    %734 = (%in_shape_06, %in_shape_12, %in_shape_21, meta[relay.Constant][299] /* ty=Tensor[(1), int32] */);
    %735 = (%shape_func_out_011,);
    let %shape_func11: () = vm.shape_func(%733, %734, %735, meta[relay.attrs.ShapeFuncAttrs][11]) /* ty=() */;
    let %storage_0146: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][157]) /* ty=Storage[] */;
    let %tensor_0135: int64 = memory.alloc_tensor(%storage_0146, 0 /* ty=int64 */, meta[relay.Constant][300] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][157]) /* ty=int64 */;
    %736 = fn (%p0134: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0134) /* ty=int64 */
    };
    %737 = (%shape_func_out_011,);
    %738 = (%tensor_0135,);
    let %x251: () = vm.invoke_tvm_op(%736, %737, %738) /* ty=() */;
    let %storage_0147: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][158]) /* ty=Storage[] */;
    let %tensor_0136: int64 = memory.alloc_tensor(%storage_0147, 0 /* ty=int64 */, meta[relay.Constant][301] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][158]) /* ty=int64 */;
    %739 = fn (%p0135: int64, Primitive=1) -> int64 {
      multiply(%p0135, 4 /* ty=int64 */) /* ty=int64 */
    };
    %740 = (%tensor_0135,);
    %741 = (%tensor_0136,);
    let %x252: () = vm.invoke_tvm_op(%739, %740, %741) /* ty=() */;
    let %storage_0148: Storage[] = memory.alloc_storage(%tensor_0136, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][159]) /* ty=Storage[] */;
    let %out_011: Tensor[(?), int32] = memory.alloc_tensor(%storage_0148, 0 /* ty=int64 */, %shape_func_out_011, meta[relay.attrs.AllocTensorAttrs][159]) /* ty=Tensor[(?), int32] */;
    %742 = (%x244, %x248, %x250, meta[relay.Constant][299] /* ty=Tensor[(1), int32] */);
    %743 = (%out_011,);
    let %x253: () = vm.invoke_tvm_op(%733, %742, %743) /* ty=() */;
    let %x254: Tensor[(?), int32] = %out_011;
    let %in_shape_07: Tensor[(1), int64] = vm.shape_of(%x254, meta[relay.attrs.ShapeOfAttrs][12]) /* ty=Tensor[(1), int64] */;
    let %storage_0149: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][160]) /* ty=Storage[] */;
    let %tensor_0137: Tensor[(1), int64] = memory.alloc_tensor(%storage_0149, 0 /* ty=int64 */, meta[relay.Constant][302] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][160]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_012: Tensor[(1), int64] = %tensor_0137;
    %744 = fn (%p0136: Tensor[(?), int32], Primitive=1) -> Tensor[(?), int64] {
      cast(%p0136, dtype="int64") /* ty=Tensor[(?), int64] */
    };
    %745 = (%in_shape_07,);
    %746 = (%shape_func_out_012,);
    let %shape_func12: () = vm.shape_func(%744, %745, %746, meta[relay.attrs.ShapeFuncAttrs][12]) /* ty=() */;
    let %storage_0150: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][161]) /* ty=Storage[] */;
    let %tensor_0138: int64 = memory.alloc_tensor(%storage_0150, 0 /* ty=int64 */, meta[relay.Constant][303] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][161]) /* ty=int64 */;
    %747 = fn (%p0137: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0137) /* ty=int64 */
    };
    %748 = (%shape_func_out_012,);
    %749 = (%tensor_0138,);
    let %x255: () = vm.invoke_tvm_op(%747, %748, %749) /* ty=() */;
    let %storage_0151: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][162]) /* ty=Storage[] */;
    let %tensor_0139: int64 = memory.alloc_tensor(%storage_0151, 0 /* ty=int64 */, meta[relay.Constant][304] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][162]) /* ty=int64 */;
    %750 = fn (%p0138: int64, Primitive=1) -> int64 {
      multiply(%p0138, 8 /* ty=int64 */) /* ty=int64 */
    };
    %751 = (%tensor_0138,);
    %752 = (%tensor_0139,);
    let %x256: () = vm.invoke_tvm_op(%750, %751, %752) /* ty=() */;
    let %storage_0152: Storage[] = memory.alloc_storage(%tensor_0139, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][163]) /* ty=Storage[] */;
    let %out_012: Tensor[(?), int64] = memory.alloc_tensor(%storage_0152, 0 /* ty=int64 */, %shape_func_out_012, meta[relay.attrs.AllocTensorAttrs][163]) /* ty=Tensor[(?), int64] */;
    %753 = (%x254,);
    %754 = (%out_012,);
    let %x257: () = vm.invoke_tvm_op(%744, %753, %754) /* ty=() */;
    let %x258: Tensor[(?), int64] = %out_012;
    %x258
  };
  let %in_shape_08: Tensor[(2), int64] = vm.shape_of(%x201, meta[relay.attrs.ShapeOfAttrs][13]) /* ty=Tensor[(2), int64] */;
  let %in_shape_13: Tensor[(1), int64] = vm.shape_of(%x204, meta[relay.attrs.ShapeOfAttrs][14]) /* ty=Tensor[(1), int64] */;
  let %storage_0153: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][164]) /* ty=Storage[] */;
  let %tensor_0140: Tensor[(2), int64] = memory.alloc_tensor(%storage_0153, 0 /* ty=int64 */, meta[relay.Constant][305] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][164]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_013: Tensor[(2), int64] = %tensor_0140;
  %756 = fn (%p0139: Tensor[(?, 4), float32], %p188: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 4), float32] {
    %755 = (%p0139, %p188);
    adv_index(%755) /* ty=Tensor[(?, 4), float32] */
  };
  %757 = (%in_shape_08, %in_shape_13);
  %758 = (%shape_func_out_013,);
  let %shape_func13: () = vm.shape_func(%756, %757, %758, meta[relay.attrs.ShapeFuncAttrs][13]) /* ty=() */;
  let %storage_0154: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][165]) /* ty=Storage[] */;
  let %tensor_0141: int64 = memory.alloc_tensor(%storage_0154, 0 /* ty=int64 */, meta[relay.Constant][306] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][165]) /* ty=int64 */;
  %759 = fn (%p0140: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0140) /* ty=int64 */
  };
  %760 = (%shape_func_out_013,);
  %761 = (%tensor_0141,);
  let %x259: () = vm.invoke_tvm_op(%759, %760, %761) /* ty=() */;
  let %storage_0155: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][166]) /* ty=Storage[] */;
  let %tensor_0142: int64 = memory.alloc_tensor(%storage_0155, 0 /* ty=int64 */, meta[relay.Constant][307] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][166]) /* ty=int64 */;
  %762 = fn (%p0141: int64, Primitive=1) -> int64 {
    multiply(%p0141, 4 /* ty=int64 */) /* ty=int64 */
  };
  %763 = (%tensor_0141,);
  %764 = (%tensor_0142,);
  let %x260: () = vm.invoke_tvm_op(%762, %763, %764) /* ty=() */;
  let %storage_0156: Storage[] = memory.alloc_storage(%tensor_0142, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][167]) /* ty=Storage[] */;
  let %out_013: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0156, 0 /* ty=int64 */, %shape_func_out_013, meta[relay.attrs.AllocTensorAttrs][167]) /* ty=Tensor[(?, 4), float32] */;
  %765 = (%x201, %x204);
  %766 = (%out_013,);
  let %x261: () = vm.invoke_tvm_op(%756, %765, %766) /* ty=() */;
  let %x262: Tensor[(?, 4), float32] = %out_013;
  let %storage_0157: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][168]) /* ty=Storage[] */;
  let %tensor_0143: Tensor[(2), int32] = memory.alloc_tensor(%storage_0157, 0 /* ty=int64 */, meta[relay.Constant][308] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][168]) /* ty=Tensor[(2), int32] */;
  %767 = fn (%p0142: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0142, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %768 = (%x262,);
  %769 = (%tensor_0143,);
  let %x263: () = vm.invoke_tvm_op(%767, %768, %769) /* ty=() */;
  let %x264: Tensor[(2), int32] = %tensor_0143;
  let %storage_0158: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][169]) /* ty=Storage[] */;
  let %tensor_0144: Tensor[(2), int32] = memory.alloc_tensor(%storage_0158, 0 /* ty=int64 */, meta[relay.Constant][309] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][169]) /* ty=Tensor[(2), int32] */;
  %772 = fn (%p0143: Tensor[(2), int32], %p189: Tensor[(2), int32], %p286: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %770 = cast_like(%p0143, %p189) /* ty=Tensor[(2), int32] */;
    %771 = add(%p189, %770) /* ty=Tensor[(2), int32] */;
    where(%p286, %771, %p189) /* ty=Tensor[(2), int32] */
  };
  %773 = (%x264, meta[relay.Constant][310] /* ty=Tensor[(2), int32] */, meta[relay.Constant][311] /* ty=Tensor[(2), bool] */);
  %774 = (%tensor_0144,);
  let %x265: () = vm.invoke_tvm_op(%772, %773, %774) /* ty=() */;
  let %x266: Tensor[(2), int32] = %tensor_0144;
  let %storage_0159: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][170]) /* ty=Storage[] */;
  let %tensor_0145: Tensor[(2), int64] = memory.alloc_tensor(%storage_0159, 0 /* ty=int64 */, meta[relay.Constant][312] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][170]) /* ty=Tensor[(2), int64] */;
  %775 = fn (%p0144: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0144, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %776 = (%x264,);
  %777 = (%tensor_0145,);
  let %x267: () = vm.invoke_tvm_op(%775, %776, %777) /* ty=() */;
  let %x268: Tensor[(2), int64] = %tensor_0145;
  let %in_shape_09: Tensor[(2), int64] = vm.shape_of(%x262, meta[relay.attrs.ShapeOfAttrs][15]) /* ty=Tensor[(2), int64] */;
  let %in_shape_14: Tensor[(2), int32] = %x266;
  let %in_shape_22: Tensor[(2), int64] = %x268;
  let %storage_0160: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][171]) /* ty=Storage[] */;
  let %tensor_0146: Tensor[(2), int64] = memory.alloc_tensor(%storage_0160, 0 /* ty=int64 */, meta[relay.Constant][313] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][171]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_014: Tensor[(2), int64] = %tensor_0146;
  %778 = fn (%p0145: Tensor[(?, 4), float32], %p190: Tensor[(2), int32], %p287: Tensor[(2), int64], %p326: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0145, %p190, %p287, %p326, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %779 = (%in_shape_09, %in_shape_14, %in_shape_22, meta[relay.Constant][314] /* ty=Tensor[(2), int32] */);
  %780 = (%shape_func_out_014,);
  let %shape_func14: () = vm.shape_func(%778, %779, %780, meta[relay.attrs.ShapeFuncAttrs][14]) /* ty=() */;
  let %storage_0161: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][172]) /* ty=Storage[] */;
  let %tensor_0147: int64 = memory.alloc_tensor(%storage_0161, 0 /* ty=int64 */, meta[relay.Constant][315] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][172]) /* ty=int64 */;
  %781 = fn (%p0146: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0146) /* ty=int64 */
  };
  %782 = (%shape_func_out_014,);
  %783 = (%tensor_0147,);
  let %x269: () = vm.invoke_tvm_op(%781, %782, %783) /* ty=() */;
  let %storage_0162: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][173]) /* ty=Storage[] */;
  let %tensor_0148: int64 = memory.alloc_tensor(%storage_0162, 0 /* ty=int64 */, meta[relay.Constant][316] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][173]) /* ty=int64 */;
  %784 = fn (%p0147: int64, Primitive=1) -> int64 {
    multiply(%p0147, 4 /* ty=int64 */) /* ty=int64 */
  };
  %785 = (%tensor_0147,);
  %786 = (%tensor_0148,);
  let %x270: () = vm.invoke_tvm_op(%784, %785, %786) /* ty=() */;
  let %storage_0163: Storage[] = memory.alloc_storage(%tensor_0148, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][174]) /* ty=Storage[] */;
  let %out_014: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0163, 0 /* ty=int64 */, %shape_func_out_014, meta[relay.attrs.AllocTensorAttrs][174]) /* ty=Tensor[(?, ?), float32] */;
  %787 = (%x262, %x266, %x268, meta[relay.Constant][314] /* ty=Tensor[(2), int32] */);
  %788 = (%out_014,);
  let %x271: () = vm.invoke_tvm_op(%778, %787, %788) /* ty=() */;
  let %x272: Tensor[(?, ?), float32] = %out_014;
  let %storage_0164: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][175]) /* ty=Storage[] */;
  let %tensor_0149: Tensor[(2), int32] = memory.alloc_tensor(%storage_0164, 0 /* ty=int64 */, meta[relay.Constant][317] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][175]) /* ty=Tensor[(2), int32] */;
  %791 = fn (%p0148: Tensor[(2), int32], %p191: Tensor[(2), int32], %p288: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %789 = cast_like(%p0148, %p191) /* ty=Tensor[(2), int32] */;
    %790 = add(%p191, %789) /* ty=Tensor[(2), int32] */;
    where(%p288, %790, %p191) /* ty=Tensor[(2), int32] */
  };
  %792 = (%x264, meta[relay.Constant][318] /* ty=Tensor[(2), int32] */, meta[relay.Constant][319] /* ty=Tensor[(2), bool] */);
  %793 = (%tensor_0149,);
  let %x273: () = vm.invoke_tvm_op(%791, %792, %793) /* ty=() */;
  let %x274: Tensor[(2), int32] = %tensor_0149;
  let %in_shape_010: Tensor[(2), int64] = vm.shape_of(%x262, meta[relay.attrs.ShapeOfAttrs][16]) /* ty=Tensor[(2), int64] */;
  let %in_shape_15: Tensor[(2), int32] = %x274;
  let %in_shape_23: Tensor[(2), int64] = %x268;
  let %storage_0165: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][176]) /* ty=Storage[] */;
  let %tensor_0150: Tensor[(2), int64] = memory.alloc_tensor(%storage_0165, 0 /* ty=int64 */, meta[relay.Constant][320] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][176]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_015: Tensor[(2), int64] = %tensor_0150;
  %794 = fn (%p0149: Tensor[(?, 4), float32], %p192: Tensor[(2), int32], %p289: Tensor[(2), int64], %p327: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0149, %p192, %p289, %p327, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %795 = (%in_shape_010, %in_shape_15, %in_shape_23, meta[relay.Constant][321] /* ty=Tensor[(2), int32] */);
  %796 = (%shape_func_out_015,);
  let %shape_func15: () = vm.shape_func(%794, %795, %796, meta[relay.attrs.ShapeFuncAttrs][15]) /* ty=() */;
  let %storage_0166: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][177]) /* ty=Storage[] */;
  let %tensor_0151: int64 = memory.alloc_tensor(%storage_0166, 0 /* ty=int64 */, meta[relay.Constant][322] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][177]) /* ty=int64 */;
  %797 = fn (%p0150: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0150) /* ty=int64 */
  };
  %798 = (%shape_func_out_015,);
  %799 = (%tensor_0151,);
  let %x275: () = vm.invoke_tvm_op(%797, %798, %799) /* ty=() */;
  let %storage_0167: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][178]) /* ty=Storage[] */;
  let %tensor_0152: int64 = memory.alloc_tensor(%storage_0167, 0 /* ty=int64 */, meta[relay.Constant][323] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][178]) /* ty=int64 */;
  %800 = fn (%p0151: int64, Primitive=1) -> int64 {
    multiply(%p0151, 4 /* ty=int64 */) /* ty=int64 */
  };
  %801 = (%tensor_0151,);
  %802 = (%tensor_0152,);
  let %x276: () = vm.invoke_tvm_op(%800, %801, %802) /* ty=() */;
  let %storage_0168: Storage[] = memory.alloc_storage(%tensor_0152, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][179]) /* ty=Storage[] */;
  let %out_015: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0168, 0 /* ty=int64 */, %shape_func_out_015, meta[relay.attrs.AllocTensorAttrs][179]) /* ty=Tensor[(?, ?), float32] */;
  %803 = (%x262, %x274, %x268, meta[relay.Constant][321] /* ty=Tensor[(2), int32] */);
  %804 = (%out_015,);
  let %x277: () = vm.invoke_tvm_op(%794, %803, %804) /* ty=() */;
  let %x278: Tensor[(?, ?), float32] = %out_015;
  let %storage_0169: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][180]) /* ty=Storage[] */;
  let %tensor_0153: Tensor[(2), int32] = memory.alloc_tensor(%storage_0169, 0 /* ty=int64 */, meta[relay.Constant][324] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][180]) /* ty=Tensor[(2), int32] */;
  %807 = fn (%p0152: Tensor[(2), int32], %p193: Tensor[(2), int32], %p290: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %805 = cast_like(%p0152, %p193) /* ty=Tensor[(2), int32] */;
    %806 = add(%p193, %805) /* ty=Tensor[(2), int32] */;
    where(%p290, %806, %p193) /* ty=Tensor[(2), int32] */
  };
  %808 = (%x264, meta[relay.Constant][325] /* ty=Tensor[(2), int32] */, meta[relay.Constant][326] /* ty=Tensor[(2), bool] */);
  %809 = (%tensor_0153,);
  let %x279: () = vm.invoke_tvm_op(%807, %808, %809) /* ty=() */;
  let %x280: Tensor[(2), int32] = %tensor_0153;
  let %in_shape_011: Tensor[(2), int64] = vm.shape_of(%x262, meta[relay.attrs.ShapeOfAttrs][17]) /* ty=Tensor[(2), int64] */;
  let %in_shape_16: Tensor[(2), int32] = %x280;
  let %in_shape_24: Tensor[(2), int64] = %x268;
  let %storage_0170: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][181]) /* ty=Storage[] */;
  let %tensor_0154: Tensor[(2), int64] = memory.alloc_tensor(%storage_0170, 0 /* ty=int64 */, meta[relay.Constant][327] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][181]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_016: Tensor[(2), int64] = %tensor_0154;
  %810 = fn (%p0153: Tensor[(?, 4), float32], %p194: Tensor[(2), int32], %p291: Tensor[(2), int64], %p328: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0153, %p194, %p291, %p328, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %811 = (%in_shape_011, %in_shape_16, %in_shape_24, meta[relay.Constant][328] /* ty=Tensor[(2), int32] */);
  %812 = (%shape_func_out_016,);
  let %shape_func16: () = vm.shape_func(%810, %811, %812, meta[relay.attrs.ShapeFuncAttrs][16]) /* ty=() */;
  let %storage_0171: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][182]) /* ty=Storage[] */;
  let %tensor_0155: int64 = memory.alloc_tensor(%storage_0171, 0 /* ty=int64 */, meta[relay.Constant][329] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][182]) /* ty=int64 */;
  %813 = fn (%p0154: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0154) /* ty=int64 */
  };
  %814 = (%shape_func_out_016,);
  %815 = (%tensor_0155,);
  let %x281: () = vm.invoke_tvm_op(%813, %814, %815) /* ty=() */;
  let %storage_0172: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][183]) /* ty=Storage[] */;
  let %tensor_0156: int64 = memory.alloc_tensor(%storage_0172, 0 /* ty=int64 */, meta[relay.Constant][330] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][183]) /* ty=int64 */;
  %816 = fn (%p0155: int64, Primitive=1) -> int64 {
    multiply(%p0155, 4 /* ty=int64 */) /* ty=int64 */
  };
  %817 = (%tensor_0155,);
  %818 = (%tensor_0156,);
  let %x282: () = vm.invoke_tvm_op(%816, %817, %818) /* ty=() */;
  let %storage_0173: Storage[] = memory.alloc_storage(%tensor_0156, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][184]) /* ty=Storage[] */;
  let %out_016: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0173, 0 /* ty=int64 */, %shape_func_out_016, meta[relay.attrs.AllocTensorAttrs][184]) /* ty=Tensor[(?, ?), float32] */;
  %819 = (%x262, %x280, %x268, meta[relay.Constant][328] /* ty=Tensor[(2), int32] */);
  %820 = (%out_016,);
  let %x283: () = vm.invoke_tvm_op(%810, %819, %820) /* ty=() */;
  let %x284: Tensor[(?, ?), float32] = %out_016;
  let %storage_0174: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][185]) /* ty=Storage[] */;
  let %tensor_0157: Tensor[(2), int32] = memory.alloc_tensor(%storage_0174, 0 /* ty=int64 */, meta[relay.Constant][331] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][185]) /* ty=Tensor[(2), int32] */;
  %823 = fn (%p0156: Tensor[(2), int32], %p195: Tensor[(2), int32], %p292: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %821 = cast_like(%p0156, %p195) /* ty=Tensor[(2), int32] */;
    %822 = add(%p195, %821) /* ty=Tensor[(2), int32] */;
    where(%p292, %822, %p195) /* ty=Tensor[(2), int32] */
  };
  %824 = (%x264, meta[relay.Constant][332] /* ty=Tensor[(2), int32] */, meta[relay.Constant][333] /* ty=Tensor[(2), bool] */);
  %825 = (%tensor_0157,);
  let %x285: () = vm.invoke_tvm_op(%823, %824, %825) /* ty=() */;
  let %x286: Tensor[(2), int32] = %tensor_0157;
  let %in_shape_012: Tensor[(2), int64] = vm.shape_of(%x262, meta[relay.attrs.ShapeOfAttrs][18]) /* ty=Tensor[(2), int64] */;
  let %in_shape_17: Tensor[(2), int32] = %x286;
  let %in_shape_25: Tensor[(2), int64] = %x268;
  let %storage_0175: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][186]) /* ty=Storage[] */;
  let %tensor_0158: Tensor[(2), int64] = memory.alloc_tensor(%storage_0175, 0 /* ty=int64 */, meta[relay.Constant][334] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][186]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_017: Tensor[(2), int64] = %tensor_0158;
  %826 = fn (%p0157: Tensor[(?, 4), float32], %p196: Tensor[(2), int32], %p293: Tensor[(2), int64], %p329: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0157, %p196, %p293, %p329, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %827 = (%in_shape_012, %in_shape_17, %in_shape_25, meta[relay.Constant][335] /* ty=Tensor[(2), int32] */);
  %828 = (%shape_func_out_017,);
  let %shape_func17: () = vm.shape_func(%826, %827, %828, meta[relay.attrs.ShapeFuncAttrs][17]) /* ty=() */;
  let %storage_0176: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][187]) /* ty=Storage[] */;
  let %tensor_0159: int64 = memory.alloc_tensor(%storage_0176, 0 /* ty=int64 */, meta[relay.Constant][336] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][187]) /* ty=int64 */;
  %829 = fn (%p0158: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0158) /* ty=int64 */
  };
  %830 = (%shape_func_out_017,);
  %831 = (%tensor_0159,);
  let %x287: () = vm.invoke_tvm_op(%829, %830, %831) /* ty=() */;
  let %storage_0177: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][188]) /* ty=Storage[] */;
  let %tensor_0160: int64 = memory.alloc_tensor(%storage_0177, 0 /* ty=int64 */, meta[relay.Constant][337] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][188]) /* ty=int64 */;
  %832 = fn (%p0159: int64, Primitive=1) -> int64 {
    multiply(%p0159, 4 /* ty=int64 */) /* ty=int64 */
  };
  %833 = (%tensor_0159,);
  %834 = (%tensor_0160,);
  let %x288: () = vm.invoke_tvm_op(%832, %833, %834) /* ty=() */;
  let %storage_0178: Storage[] = memory.alloc_storage(%tensor_0160, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][189]) /* ty=Storage[] */;
  let %out_017: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0178, 0 /* ty=int64 */, %shape_func_out_017, meta[relay.attrs.AllocTensorAttrs][189]) /* ty=Tensor[(?, ?), float32] */;
  %835 = (%x262, %x286, %x268, meta[relay.Constant][335] /* ty=Tensor[(2), int32] */);
  %836 = (%out_017,);
  let %x289: () = vm.invoke_tvm_op(%826, %835, %836) /* ty=() */;
  let %x290: Tensor[(?, ?), float32] = %out_017;
  let %in_shape_013: Tensor[(2), int64] = vm.shape_of(%x272, meta[relay.attrs.ShapeOfAttrs][19]) /* ty=Tensor[(2), int64] */;
  let %in_shape_18: Tensor[(2), int64] = vm.shape_of(%x278, meta[relay.attrs.ShapeOfAttrs][20]) /* ty=Tensor[(2), int64] */;
  let %in_shape_26: Tensor[(2), int64] = vm.shape_of(%x284, meta[relay.attrs.ShapeOfAttrs][21]) /* ty=Tensor[(2), int64] */;
  let %in_shape_31: Tensor[(2), int64] = vm.shape_of(%x290, meta[relay.attrs.ShapeOfAttrs][22]) /* ty=Tensor[(2), int64] */;
  let %storage_0179: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][190]) /* ty=Storage[] */;
  let %tensor_0161: Tensor[(1), int64] = memory.alloc_tensor(%storage_0179, 0 /* ty=int64 */, meta[relay.Constant][338] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][190]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_018: Tensor[(1), int64] = %tensor_0161;
  %854 = fn (%p0160: Tensor[(?, ?), float32], %p197: Tensor[(?, ?), float32], %p294: Tensor[(?, ?), float32], %p330: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), int64] {
    %837 = take(%p0160, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %838 = take(%p197, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %839 = subtract(%837, %838) /* ty=Tensor[(?), float32] */;
    %840 = take(%p294, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %841 = take(%p330, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %842 = subtract(%840, %841) /* ty=Tensor[(?), float32] */;
    %843 = multiply(%839, %842) /* ty=Tensor[(?), float32] */;
    %844 = (%843,);
    %845 = concatenate(%844) /* ty=Tensor[(?), float32] */;
    %846 = sqrt(%845) /* ty=Tensor[(?), float32] */;
    %847 = divide(%846, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %848 = log2(%847) /* ty=Tensor[(?), float32] */;
    %849 = add(%848, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %850 = add(%849, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %851 = floor(%850) /* ty=Tensor[(?), float32] */;
    %852 = clip(%851, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
    %853 = cast(%852, dtype="int64") /* ty=Tensor[(?), int64] */;
    subtract(%853, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */
  };
  %855 = (%in_shape_013, %in_shape_18, %in_shape_26, %in_shape_31);
  %856 = (%shape_func_out_018,);
  let %shape_func18: () = vm.shape_func(%854, %855, %856, meta[relay.attrs.ShapeFuncAttrs][18]) /* ty=() */;
  let %storage_0180: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][191]) /* ty=Storage[] */;
  let %tensor_0162: int64 = memory.alloc_tensor(%storage_0180, 0 /* ty=int64 */, meta[relay.Constant][339] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][191]) /* ty=int64 */;
  %857 = fn (%p0161: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0161) /* ty=int64 */
  };
  %858 = (%shape_func_out_018,);
  %859 = (%tensor_0162,);
  let %x291: () = vm.invoke_tvm_op(%857, %858, %859) /* ty=() */;
  let %storage_0181: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][192]) /* ty=Storage[] */;
  let %tensor_0163: int64 = memory.alloc_tensor(%storage_0181, 0 /* ty=int64 */, meta[relay.Constant][340] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][192]) /* ty=int64 */;
  %860 = fn (%p0162: int64, Primitive=1) -> int64 {
    multiply(%p0162, 8 /* ty=int64 */) /* ty=int64 */
  };
  %861 = (%tensor_0162,);
  %862 = (%tensor_0163,);
  let %x292: () = vm.invoke_tvm_op(%860, %861, %862) /* ty=() */;
  let %storage_0182: Storage[] = memory.alloc_storage(%tensor_0163, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][193]) /* ty=Storage[] */;
  let %out_018: Tensor[(?), int64] = memory.alloc_tensor(%storage_0182, 0 /* ty=int64 */, %shape_func_out_018, meta[relay.attrs.AllocTensorAttrs][193]) /* ty=Tensor[(?), int64] */;
  %863 = (%x272, %x278, %x284, %x290);
  %864 = (%out_018,);
  let %x293: () = vm.invoke_tvm_op(%854, %863, %864) /* ty=() */;
  let %x294: Tensor[(?), int64] = %out_018;
  let %in_shape_014: Tensor[(1), int64] = vm.shape_of(%x294, meta[relay.attrs.ShapeOfAttrs][23]) /* ty=Tensor[(1), int64] */;
  let %storage_0183: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][194]) /* ty=Storage[] */;
  let %tensor_0164: Tensor[(1), int64] = memory.alloc_tensor(%storage_0183, 0 /* ty=int64 */, meta[relay.Constant][341] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][194]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_019: Tensor[(1), int64] = %tensor_0164;
  %865 = fn (%p0163: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0163, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %866 = (%in_shape_014,);
  %867 = (%shape_func_out_019,);
  let %shape_func19: () = vm.shape_func(%865, %866, %867, meta[relay.attrs.ShapeFuncAttrs][19]) /* ty=() */;
  let %storage_0184: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][195]) /* ty=Storage[] */;
  let %tensor_0165: int64 = memory.alloc_tensor(%storage_0184, 0 /* ty=int64 */, meta[relay.Constant][342] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][195]) /* ty=int64 */;
  %868 = fn (%p0164: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0164) /* ty=int64 */
  };
  %869 = (%shape_func_out_019,);
  %870 = (%tensor_0165,);
  let %x295: () = vm.invoke_tvm_op(%868, %869, %870) /* ty=() */;
  let %storage_0185: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][196]) /* ty=Storage[] */;
  let %tensor_0166: int64 = memory.alloc_tensor(%storage_0185, 0 /* ty=int64 */, meta[relay.Constant][343] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][196]) /* ty=int64 */;
  %871 = fn (%p0165: int64, Primitive=1) -> int64 {
    multiply(%p0165, 1 /* ty=int64 */) /* ty=int64 */
  };
  %872 = (%tensor_0165,);
  %873 = (%tensor_0166,);
  let %x296: () = vm.invoke_tvm_op(%871, %872, %873) /* ty=() */;
  let %storage_0186: Storage[] = memory.alloc_storage(%tensor_0166, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][197]) /* ty=Storage[] */;
  let %out_019: Tensor[(?), bool] = memory.alloc_tensor(%storage_0186, 0 /* ty=int64 */, %shape_func_out_019, meta[relay.attrs.AllocTensorAttrs][197]) /* ty=Tensor[(?), bool] */;
  %874 = (%x294,);
  %875 = (%out_019,);
  let %x297: () = vm.invoke_tvm_op(%865, %874, %875) /* ty=() */;
  let %x298: Tensor[(?), bool] = %out_019;
  let %in_shape_015: Tensor[(?), bool] = %x298;
  let %storage_0187: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][198]) /* ty=Storage[] */;
  let %tensor_0167: Tensor[(2), int64] = memory.alloc_tensor(%storage_0187, 0 /* ty=int64 */, meta[relay.Constant][344] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][198]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_020: Tensor[(2), int64] = %tensor_0167;
  %876 = fn (%p0166: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0166) /* ty=Tensor[(?, 1), int32] */
  };
  %877 = (%in_shape_015,);
  %878 = (%shape_func_out_020,);
  let %shape_func20: () = vm.shape_func(%876, %877, %878, meta[relay.attrs.ShapeFuncAttrs][20]) /* ty=() */;
  let %storage_0188: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][199]) /* ty=Storage[] */;
  let %tensor_0168: int64 = memory.alloc_tensor(%storage_0188, 0 /* ty=int64 */, meta[relay.Constant][345] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][199]) /* ty=int64 */;
  %879 = fn (%p0167: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0167) /* ty=int64 */
  };
  %880 = (%shape_func_out_020,);
  %881 = (%tensor_0168,);
  let %x299: () = vm.invoke_tvm_op(%879, %880, %881) /* ty=() */;
  let %storage_0189: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][200]) /* ty=Storage[] */;
  let %tensor_0169: int64 = memory.alloc_tensor(%storage_0189, 0 /* ty=int64 */, meta[relay.Constant][346] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][200]) /* ty=int64 */;
  %882 = fn (%p0168: int64, Primitive=1) -> int64 {
    multiply(%p0168, 4 /* ty=int64 */) /* ty=int64 */
  };
  %883 = (%tensor_0168,);
  %884 = (%tensor_0169,);
  let %x300: () = vm.invoke_tvm_op(%882, %883, %884) /* ty=() */;
  let %storage_0190: Storage[] = memory.alloc_storage(%tensor_0169, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][201]) /* ty=Storage[] */;
  let %out_020: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0190, 0 /* ty=int64 */, %shape_func_out_020, meta[relay.attrs.AllocTensorAttrs][201]) /* ty=Tensor[(?, 1), int32] */;
  %885 = (%x298,);
  %886 = (%out_020,);
  let %x301: () = vm.invoke_tvm_op(%876, %885, %886) /* ty=() */;
  let %x302: Tensor[(?, 1), int32] = %out_020;
  let %in_shape_016: Tensor[(2), int64] = vm.shape_of(%x302, meta[relay.attrs.ShapeOfAttrs][24]) /* ty=Tensor[(2), int64] */;
  let %storage_0191: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][202]) /* ty=Storage[] */;
  let %tensor_0170: Tensor[(1), int64] = memory.alloc_tensor(%storage_0191, 0 /* ty=int64 */, meta[relay.Constant][347] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][202]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_021: Tensor[(1), int64] = %tensor_0170;
  %890 = fn (%p0169: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int64] {
    %887 = split(%p0169, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %888 = %887.0;
    %889 = squeeze(%888, axis=[1]) /* ty=Tensor[(?), int32] */;
    cast(%889, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %891 = (%in_shape_016,);
  %892 = (%shape_func_out_021,);
  let %shape_func21: () = vm.shape_func(%890, %891, %892, meta[relay.attrs.ShapeFuncAttrs][21]) /* ty=() */;
  let %storage_0192: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][203]) /* ty=Storage[] */;
  let %tensor_0171: int64 = memory.alloc_tensor(%storage_0192, 0 /* ty=int64 */, meta[relay.Constant][348] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][203]) /* ty=int64 */;
  %893 = fn (%p0170: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0170) /* ty=int64 */
  };
  %894 = (%shape_func_out_021,);
  %895 = (%tensor_0171,);
  let %x303: () = vm.invoke_tvm_op(%893, %894, %895) /* ty=() */;
  let %storage_0193: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][204]) /* ty=Storage[] */;
  let %tensor_0172: int64 = memory.alloc_tensor(%storage_0193, 0 /* ty=int64 */, meta[relay.Constant][349] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][204]) /* ty=int64 */;
  %896 = fn (%p0171: int64, Primitive=1) -> int64 {
    multiply(%p0171, 8 /* ty=int64 */) /* ty=int64 */
  };
  %897 = (%tensor_0171,);
  %898 = (%tensor_0172,);
  let %x304: () = vm.invoke_tvm_op(%896, %897, %898) /* ty=() */;
  let %storage_0194: Storage[] = memory.alloc_storage(%tensor_0172, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][205]) /* ty=Storage[] */;
  let %out_021: Tensor[(?), int64] = memory.alloc_tensor(%storage_0194, 0 /* ty=int64 */, %shape_func_out_021, meta[relay.attrs.AllocTensorAttrs][205]) /* ty=Tensor[(?), int64] */;
  %899 = (%x302,);
  %900 = (%out_021,);
  let %x305: () = vm.invoke_tvm_op(%890, %899, %900) /* ty=() */;
  let %x306: Tensor[(?), int64] = %out_021;
  let %in_shape_017: Tensor[(1), int64] = vm.shape_of(%x294, meta[relay.attrs.ShapeOfAttrs][25]) /* ty=Tensor[(1), int64] */;
  let %storage_0195: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][206]) /* ty=Storage[] */;
  let %tensor_0173: Tensor[(1), int64] = memory.alloc_tensor(%storage_0195, 0 /* ty=int64 */, meta[relay.Constant][350] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][206]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_022: Tensor[(1), int64] = %tensor_0173;
  %901 = fn (%p0172: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0172, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %902 = (%in_shape_017,);
  %903 = (%shape_func_out_022,);
  let %shape_func22: () = vm.shape_func(%901, %902, %903, meta[relay.attrs.ShapeFuncAttrs][22]) /* ty=() */;
  let %storage_0196: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][207]) /* ty=Storage[] */;
  let %tensor_0174: int64 = memory.alloc_tensor(%storage_0196, 0 /* ty=int64 */, meta[relay.Constant][351] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][207]) /* ty=int64 */;
  %904 = fn (%p0173: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0173) /* ty=int64 */
  };
  %905 = (%shape_func_out_022,);
  %906 = (%tensor_0174,);
  let %x307: () = vm.invoke_tvm_op(%904, %905, %906) /* ty=() */;
  let %storage_0197: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][208]) /* ty=Storage[] */;
  let %tensor_0175: int64 = memory.alloc_tensor(%storage_0197, 0 /* ty=int64 */, meta[relay.Constant][352] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][208]) /* ty=int64 */;
  %907 = fn (%p0174: int64, Primitive=1) -> int64 {
    multiply(%p0174, 1 /* ty=int64 */) /* ty=int64 */
  };
  %908 = (%tensor_0174,);
  %909 = (%tensor_0175,);
  let %x308: () = vm.invoke_tvm_op(%907, %908, %909) /* ty=() */;
  let %storage_0198: Storage[] = memory.alloc_storage(%tensor_0175, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][209]) /* ty=Storage[] */;
  let %out_022: Tensor[(?), bool] = memory.alloc_tensor(%storage_0198, 0 /* ty=int64 */, %shape_func_out_022, meta[relay.attrs.AllocTensorAttrs][209]) /* ty=Tensor[(?), bool] */;
  %910 = (%x294,);
  %911 = (%out_022,);
  let %x309: () = vm.invoke_tvm_op(%901, %910, %911) /* ty=() */;
  let %x310: Tensor[(?), bool] = %out_022;
  let %in_shape_018: Tensor[(?), bool] = %x310;
  let %storage_0199: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][210]) /* ty=Storage[] */;
  let %tensor_0176: Tensor[(2), int64] = memory.alloc_tensor(%storage_0199, 0 /* ty=int64 */, meta[relay.Constant][353] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][210]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_023: Tensor[(2), int64] = %tensor_0176;
  %912 = fn (%p0175: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0175) /* ty=Tensor[(?, 1), int32] */
  };
  %913 = (%in_shape_018,);
  %914 = (%shape_func_out_023,);
  let %shape_func23: () = vm.shape_func(%912, %913, %914, meta[relay.attrs.ShapeFuncAttrs][23]) /* ty=() */;
  let %storage_0200: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][211]) /* ty=Storage[] */;
  let %tensor_0177: int64 = memory.alloc_tensor(%storage_0200, 0 /* ty=int64 */, meta[relay.Constant][354] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][211]) /* ty=int64 */;
  %915 = fn (%p0176: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0176) /* ty=int64 */
  };
  %916 = (%shape_func_out_023,);
  %917 = (%tensor_0177,);
  let %x311: () = vm.invoke_tvm_op(%915, %916, %917) /* ty=() */;
  let %storage_0201: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][212]) /* ty=Storage[] */;
  let %tensor_0178: int64 = memory.alloc_tensor(%storage_0201, 0 /* ty=int64 */, meta[relay.Constant][355] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][212]) /* ty=int64 */;
  %918 = fn (%p0177: int64, Primitive=1) -> int64 {
    multiply(%p0177, 4 /* ty=int64 */) /* ty=int64 */
  };
  %919 = (%tensor_0177,);
  %920 = (%tensor_0178,);
  let %x312: () = vm.invoke_tvm_op(%918, %919, %920) /* ty=() */;
  let %storage_0202: Storage[] = memory.alloc_storage(%tensor_0178, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][213]) /* ty=Storage[] */;
  let %out_023: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0202, 0 /* ty=int64 */, %shape_func_out_023, meta[relay.attrs.AllocTensorAttrs][213]) /* ty=Tensor[(?, 1), int32] */;
  %921 = (%x310,);
  %922 = (%out_023,);
  let %x313: () = vm.invoke_tvm_op(%912, %921, %922) /* ty=() */;
  let %x314: Tensor[(?, 1), int32] = %out_023;
  let %in_shape_019: Tensor[(2), int64] = vm.shape_of(%x314, meta[relay.attrs.ShapeOfAttrs][26]) /* ty=Tensor[(2), int64] */;
  let %storage_0203: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][214]) /* ty=Storage[] */;
  let %tensor_0179: Tensor[(1), int64] = memory.alloc_tensor(%storage_0203, 0 /* ty=int64 */, meta[relay.Constant][356] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][214]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_024: Tensor[(1), int64] = %tensor_0179;
  %926 = fn (%p0178: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int64] {
    %923 = split(%p0178, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %924 = %923.0;
    %925 = squeeze(%924, axis=[1]) /* ty=Tensor[(?), int32] */;
    cast(%925, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %927 = (%in_shape_019,);
  %928 = (%shape_func_out_024,);
  let %shape_func24: () = vm.shape_func(%926, %927, %928, meta[relay.attrs.ShapeFuncAttrs][24]) /* ty=() */;
  let %storage_0204: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][215]) /* ty=Storage[] */;
  let %tensor_0180: int64 = memory.alloc_tensor(%storage_0204, 0 /* ty=int64 */, meta[relay.Constant][357] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][215]) /* ty=int64 */;
  %929 = fn (%p0179: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0179) /* ty=int64 */
  };
  %930 = (%shape_func_out_024,);
  %931 = (%tensor_0180,);
  let %x315: () = vm.invoke_tvm_op(%929, %930, %931) /* ty=() */;
  let %storage_0205: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][216]) /* ty=Storage[] */;
  let %tensor_0181: int64 = memory.alloc_tensor(%storage_0205, 0 /* ty=int64 */, meta[relay.Constant][358] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][216]) /* ty=int64 */;
  %932 = fn (%p0180: int64, Primitive=1) -> int64 {
    multiply(%p0180, 8 /* ty=int64 */) /* ty=int64 */
  };
  %933 = (%tensor_0180,);
  %934 = (%tensor_0181,);
  let %x316: () = vm.invoke_tvm_op(%932, %933, %934) /* ty=() */;
  let %storage_0206: Storage[] = memory.alloc_storage(%tensor_0181, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][217]) /* ty=Storage[] */;
  let %out_024: Tensor[(?), int64] = memory.alloc_tensor(%storage_0206, 0 /* ty=int64 */, %shape_func_out_024, meta[relay.attrs.AllocTensorAttrs][217]) /* ty=Tensor[(?), int64] */;
  %935 = (%x314,);
  %936 = (%out_024,);
  let %x317: () = vm.invoke_tvm_op(%926, %935, %936) /* ty=() */;
  let %x318: Tensor[(?), int64] = %out_024;
  let %in_shape_020: Tensor[(1), int64] = vm.shape_of(%x294, meta[relay.attrs.ShapeOfAttrs][27]) /* ty=Tensor[(1), int64] */;
  let %storage_0207: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][218]) /* ty=Storage[] */;
  let %tensor_0182: Tensor[(1), int64] = memory.alloc_tensor(%storage_0207, 0 /* ty=int64 */, meta[relay.Constant][359] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][218]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_025: Tensor[(1), int64] = %tensor_0182;
  %937 = fn (%p0181: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0181, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %938 = (%in_shape_020,);
  %939 = (%shape_func_out_025,);
  let %shape_func25: () = vm.shape_func(%937, %938, %939, meta[relay.attrs.ShapeFuncAttrs][25]) /* ty=() */;
  let %storage_0208: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][219]) /* ty=Storage[] */;
  let %tensor_0183: int64 = memory.alloc_tensor(%storage_0208, 0 /* ty=int64 */, meta[relay.Constant][360] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][219]) /* ty=int64 */;
  %940 = fn (%p0182: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0182) /* ty=int64 */
  };
  %941 = (%shape_func_out_025,);
  %942 = (%tensor_0183,);
  let %x319: () = vm.invoke_tvm_op(%940, %941, %942) /* ty=() */;
  let %storage_0209: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][220]) /* ty=Storage[] */;
  let %tensor_0184: int64 = memory.alloc_tensor(%storage_0209, 0 /* ty=int64 */, meta[relay.Constant][361] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][220]) /* ty=int64 */;
  %943 = fn (%p0183: int64, Primitive=1) -> int64 {
    multiply(%p0183, 1 /* ty=int64 */) /* ty=int64 */
  };
  %944 = (%tensor_0183,);
  %945 = (%tensor_0184,);
  let %x320: () = vm.invoke_tvm_op(%943, %944, %945) /* ty=() */;
  let %storage_0210: Storage[] = memory.alloc_storage(%tensor_0184, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][221]) /* ty=Storage[] */;
  let %out_025: Tensor[(?), bool] = memory.alloc_tensor(%storage_0210, 0 /* ty=int64 */, %shape_func_out_025, meta[relay.attrs.AllocTensorAttrs][221]) /* ty=Tensor[(?), bool] */;
  %946 = (%x294,);
  %947 = (%out_025,);
  let %x321: () = vm.invoke_tvm_op(%937, %946, %947) /* ty=() */;
  let %x322: Tensor[(?), bool] = %out_025;
  let %in_shape_021: Tensor[(?), bool] = %x322;
  let %storage_0211: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][222]) /* ty=Storage[] */;
  let %tensor_0185: Tensor[(2), int64] = memory.alloc_tensor(%storage_0211, 0 /* ty=int64 */, meta[relay.Constant][362] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][222]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_026: Tensor[(2), int64] = %tensor_0185;
  %948 = fn (%p0184: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0184) /* ty=Tensor[(?, 1), int32] */
  };
  %949 = (%in_shape_021,);
  %950 = (%shape_func_out_026,);
  let %shape_func26: () = vm.shape_func(%948, %949, %950, meta[relay.attrs.ShapeFuncAttrs][26]) /* ty=() */;
  let %storage_0212: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][223]) /* ty=Storage[] */;
  let %tensor_0186: int64 = memory.alloc_tensor(%storage_0212, 0 /* ty=int64 */, meta[relay.Constant][363] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][223]) /* ty=int64 */;
  %951 = fn (%p0185: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0185) /* ty=int64 */
  };
  %952 = (%shape_func_out_026,);
  %953 = (%tensor_0186,);
  let %x323: () = vm.invoke_tvm_op(%951, %952, %953) /* ty=() */;
  let %storage_0213: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][224]) /* ty=Storage[] */;
  let %tensor_0187: int64 = memory.alloc_tensor(%storage_0213, 0 /* ty=int64 */, meta[relay.Constant][364] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][224]) /* ty=int64 */;
  %954 = fn (%p0186: int64, Primitive=1) -> int64 {
    multiply(%p0186, 4 /* ty=int64 */) /* ty=int64 */
  };
  %955 = (%tensor_0186,);
  %956 = (%tensor_0187,);
  let %x324: () = vm.invoke_tvm_op(%954, %955, %956) /* ty=() */;
  let %storage_0214: Storage[] = memory.alloc_storage(%tensor_0187, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][225]) /* ty=Storage[] */;
  let %out_026: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0214, 0 /* ty=int64 */, %shape_func_out_026, meta[relay.attrs.AllocTensorAttrs][225]) /* ty=Tensor[(?, 1), int32] */;
  %957 = (%x322,);
  %958 = (%out_026,);
  let %x325: () = vm.invoke_tvm_op(%948, %957, %958) /* ty=() */;
  let %x326: Tensor[(?, 1), int32] = %out_026;
  let %in_shape_022: Tensor[(2), int64] = vm.shape_of(%x326, meta[relay.attrs.ShapeOfAttrs][28]) /* ty=Tensor[(2), int64] */;
  let %storage_0215: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][226]) /* ty=Storage[] */;
  let %tensor_0188: Tensor[(1), int64] = memory.alloc_tensor(%storage_0215, 0 /* ty=int64 */, meta[relay.Constant][365] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][226]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_027: Tensor[(1), int64] = %tensor_0188;
  %962 = fn (%p0187: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int64] {
    %959 = split(%p0187, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %960 = %959.0;
    %961 = squeeze(%960, axis=[1]) /* ty=Tensor[(?), int32] */;
    cast(%961, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %963 = (%in_shape_022,);
  %964 = (%shape_func_out_027,);
  let %shape_func27: () = vm.shape_func(%962, %963, %964, meta[relay.attrs.ShapeFuncAttrs][27]) /* ty=() */;
  let %storage_0216: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][227]) /* ty=Storage[] */;
  let %tensor_0189: int64 = memory.alloc_tensor(%storage_0216, 0 /* ty=int64 */, meta[relay.Constant][366] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][227]) /* ty=int64 */;
  %965 = fn (%p0188: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0188) /* ty=int64 */
  };
  %966 = (%shape_func_out_027,);
  %967 = (%tensor_0189,);
  let %x327: () = vm.invoke_tvm_op(%965, %966, %967) /* ty=() */;
  let %storage_0217: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][228]) /* ty=Storage[] */;
  let %tensor_0190: int64 = memory.alloc_tensor(%storage_0217, 0 /* ty=int64 */, meta[relay.Constant][367] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][228]) /* ty=int64 */;
  %968 = fn (%p0189: int64, Primitive=1) -> int64 {
    multiply(%p0189, 8 /* ty=int64 */) /* ty=int64 */
  };
  %969 = (%tensor_0189,);
  %970 = (%tensor_0190,);
  let %x328: () = vm.invoke_tvm_op(%968, %969, %970) /* ty=() */;
  let %storage_0218: Storage[] = memory.alloc_storage(%tensor_0190, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][229]) /* ty=Storage[] */;
  let %out_027: Tensor[(?), int64] = memory.alloc_tensor(%storage_0218, 0 /* ty=int64 */, %shape_func_out_027, meta[relay.attrs.AllocTensorAttrs][229]) /* ty=Tensor[(?), int64] */;
  %971 = (%x326,);
  %972 = (%out_027,);
  let %x329: () = vm.invoke_tvm_op(%962, %971, %972) /* ty=() */;
  let %x330: Tensor[(?), int64] = %out_027;
  let %in_shape_023: Tensor[(1), int64] = vm.shape_of(%x294, meta[relay.attrs.ShapeOfAttrs][29]) /* ty=Tensor[(1), int64] */;
  let %storage_0219: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][230]) /* ty=Storage[] */;
  let %tensor_0191: Tensor[(1), int64] = memory.alloc_tensor(%storage_0219, 0 /* ty=int64 */, meta[relay.Constant][368] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][230]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_028: Tensor[(1), int64] = %tensor_0191;
  %973 = fn (%p0190: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0190, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %974 = (%in_shape_023,);
  %975 = (%shape_func_out_028,);
  let %shape_func28: () = vm.shape_func(%973, %974, %975, meta[relay.attrs.ShapeFuncAttrs][28]) /* ty=() */;
  let %storage_0220: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][231]) /* ty=Storage[] */;
  let %tensor_0192: int64 = memory.alloc_tensor(%storage_0220, 0 /* ty=int64 */, meta[relay.Constant][369] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][231]) /* ty=int64 */;
  %976 = fn (%p0191: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0191) /* ty=int64 */
  };
  %977 = (%shape_func_out_028,);
  %978 = (%tensor_0192,);
  let %x331: () = vm.invoke_tvm_op(%976, %977, %978) /* ty=() */;
  let %storage_0221: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][232]) /* ty=Storage[] */;
  let %tensor_0193: int64 = memory.alloc_tensor(%storage_0221, 0 /* ty=int64 */, meta[relay.Constant][370] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][232]) /* ty=int64 */;
  %979 = fn (%p0192: int64, Primitive=1) -> int64 {
    multiply(%p0192, 1 /* ty=int64 */) /* ty=int64 */
  };
  %980 = (%tensor_0192,);
  %981 = (%tensor_0193,);
  let %x332: () = vm.invoke_tvm_op(%979, %980, %981) /* ty=() */;
  let %storage_0222: Storage[] = memory.alloc_storage(%tensor_0193, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][233]) /* ty=Storage[] */;
  let %out_028: Tensor[(?), bool] = memory.alloc_tensor(%storage_0222, 0 /* ty=int64 */, %shape_func_out_028, meta[relay.attrs.AllocTensorAttrs][233]) /* ty=Tensor[(?), bool] */;
  %982 = (%x294,);
  %983 = (%out_028,);
  let %x333: () = vm.invoke_tvm_op(%973, %982, %983) /* ty=() */;
  let %x334: Tensor[(?), bool] = %out_028;
  let %in_shape_024: Tensor[(?), bool] = %x334;
  let %storage_0223: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][234]) /* ty=Storage[] */;
  let %tensor_0194: Tensor[(2), int64] = memory.alloc_tensor(%storage_0223, 0 /* ty=int64 */, meta[relay.Constant][371] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][234]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_029: Tensor[(2), int64] = %tensor_0194;
  %984 = fn (%p0193: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0193) /* ty=Tensor[(?, 1), int32] */
  };
  %985 = (%in_shape_024,);
  %986 = (%shape_func_out_029,);
  let %shape_func29: () = vm.shape_func(%984, %985, %986, meta[relay.attrs.ShapeFuncAttrs][29]) /* ty=() */;
  let %storage_0224: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][235]) /* ty=Storage[] */;
  let %tensor_0195: int64 = memory.alloc_tensor(%storage_0224, 0 /* ty=int64 */, meta[relay.Constant][372] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][235]) /* ty=int64 */;
  %987 = fn (%p0194: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0194) /* ty=int64 */
  };
  %988 = (%shape_func_out_029,);
  %989 = (%tensor_0195,);
  let %x335: () = vm.invoke_tvm_op(%987, %988, %989) /* ty=() */;
  let %storage_0225: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][236]) /* ty=Storage[] */;
  let %tensor_0196: int64 = memory.alloc_tensor(%storage_0225, 0 /* ty=int64 */, meta[relay.Constant][373] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][236]) /* ty=int64 */;
  %990 = fn (%p0195: int64, Primitive=1) -> int64 {
    multiply(%p0195, 4 /* ty=int64 */) /* ty=int64 */
  };
  %991 = (%tensor_0195,);
  %992 = (%tensor_0196,);
  let %x336: () = vm.invoke_tvm_op(%990, %991, %992) /* ty=() */;
  let %storage_0226: Storage[] = memory.alloc_storage(%tensor_0196, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][237]) /* ty=Storage[] */;
  let %out_029: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0226, 0 /* ty=int64 */, %shape_func_out_029, meta[relay.attrs.AllocTensorAttrs][237]) /* ty=Tensor[(?, 1), int32] */;
  %993 = (%x334,);
  %994 = (%out_029,);
  let %x337: () = vm.invoke_tvm_op(%984, %993, %994) /* ty=() */;
  let %x338: Tensor[(?, 1), int32] = %out_029;
  let %in_shape_025: Tensor[(2), int64] = vm.shape_of(%x338, meta[relay.attrs.ShapeOfAttrs][30]) /* ty=Tensor[(2), int64] */;
  let %storage_0227: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][238]) /* ty=Storage[] */;
  let %tensor_0197: Tensor[(1), int64] = memory.alloc_tensor(%storage_0227, 0 /* ty=int64 */, meta[relay.Constant][374] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][238]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_030: Tensor[(1), int64] = %tensor_0197;
  %998 = fn (%p0196: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int64] {
    %995 = split(%p0196, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %996 = %995.0;
    %997 = squeeze(%996, axis=[1]) /* ty=Tensor[(?), int32] */;
    cast(%997, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %999 = (%in_shape_025,);
  %1000 = (%shape_func_out_030,);
  let %shape_func30: () = vm.shape_func(%998, %999, %1000, meta[relay.attrs.ShapeFuncAttrs][30]) /* ty=() */;
  let %storage_0228: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][239]) /* ty=Storage[] */;
  let %tensor_0198: int64 = memory.alloc_tensor(%storage_0228, 0 /* ty=int64 */, meta[relay.Constant][375] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][239]) /* ty=int64 */;
  %1001 = fn (%p0197: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0197) /* ty=int64 */
  };
  %1002 = (%shape_func_out_030,);
  %1003 = (%tensor_0198,);
  let %x339: () = vm.invoke_tvm_op(%1001, %1002, %1003) /* ty=() */;
  let %storage_0229: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][240]) /* ty=Storage[] */;
  let %tensor_0199: int64 = memory.alloc_tensor(%storage_0229, 0 /* ty=int64 */, meta[relay.Constant][376] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][240]) /* ty=int64 */;
  %1004 = fn (%p0198: int64, Primitive=1) -> int64 {
    multiply(%p0198, 8 /* ty=int64 */) /* ty=int64 */
  };
  %1005 = (%tensor_0198,);
  %1006 = (%tensor_0199,);
  let %x340: () = vm.invoke_tvm_op(%1004, %1005, %1006) /* ty=() */;
  let %storage_0230: Storage[] = memory.alloc_storage(%tensor_0199, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][241]) /* ty=Storage[] */;
  let %out_030: Tensor[(?), int64] = memory.alloc_tensor(%storage_0230, 0 /* ty=int64 */, %shape_func_out_030, meta[relay.attrs.AllocTensorAttrs][241]) /* ty=Tensor[(?), int64] */;
  %1007 = (%x338,);
  %1008 = (%out_030,);
  let %x341: () = vm.invoke_tvm_op(%998, %1007, %1008) /* ty=() */;
  let %x342: Tensor[(?), int64] = %out_030;
  let %in_shape_026: Tensor[(1), int64] = vm.shape_of(%x306, meta[relay.attrs.ShapeOfAttrs][31]) /* ty=Tensor[(1), int64] */;
  let %in_shape_19: Tensor[(1), int64] = vm.shape_of(%x318, meta[relay.attrs.ShapeOfAttrs][32]) /* ty=Tensor[(1), int64] */;
  let %in_shape_27: Tensor[(1), int64] = vm.shape_of(%x330, meta[relay.attrs.ShapeOfAttrs][33]) /* ty=Tensor[(1), int64] */;
  let %in_shape_32: Tensor[(1), int64] = vm.shape_of(%x342, meta[relay.attrs.ShapeOfAttrs][34]) /* ty=Tensor[(1), int64] */;
  let %storage_0231: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][242]) /* ty=Storage[] */;
  let %tensor_0200: Tensor[(1), int64] = memory.alloc_tensor(%storage_0231, 0 /* ty=int64 */, meta[relay.Constant][377] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][242]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_031: Tensor[(1), int64] = %tensor_0200;
  %1010 = fn (%p0199: Tensor[(?), int64], %p198: Tensor[(?), int64], %p295: Tensor[(?), int64], %p331: Tensor[(?), int64], Primitive=1) -> Tensor[(?), int64] {
    %1009 = (%p0199, %p198, %p295, %p331);
    concatenate(%1009) /* ty=Tensor[(?), int64] */
  };
  %1011 = (%in_shape_026, %in_shape_19, %in_shape_27, %in_shape_32);
  %1012 = (%shape_func_out_031,);
  let %shape_func31: () = vm.shape_func(%1010, %1011, %1012, meta[relay.attrs.ShapeFuncAttrs][31]) /* ty=() */;
  let %storage_0232: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][243]) /* ty=Storage[] */;
  let %tensor_0201: int64 = memory.alloc_tensor(%storage_0232, 0 /* ty=int64 */, meta[relay.Constant][378] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][243]) /* ty=int64 */;
  %1013 = fn (%p0200: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0200) /* ty=int64 */
  };
  %1014 = (%shape_func_out_031,);
  %1015 = (%tensor_0201,);
  let %x343: () = vm.invoke_tvm_op(%1013, %1014, %1015) /* ty=() */;
  let %storage_0233: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][244]) /* ty=Storage[] */;
  let %tensor_0202: int64 = memory.alloc_tensor(%storage_0233, 0 /* ty=int64 */, meta[relay.Constant][379] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][244]) /* ty=int64 */;
  %1016 = fn (%p0201: int64, Primitive=1) -> int64 {
    multiply(%p0201, 8 /* ty=int64 */) /* ty=int64 */
  };
  %1017 = (%tensor_0201,);
  %1018 = (%tensor_0202,);
  let %x344: () = vm.invoke_tvm_op(%1016, %1017, %1018) /* ty=() */;
  let %storage_0234: Storage[] = memory.alloc_storage(%tensor_0202, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][245]) /* ty=Storage[] */;
  let %out_031: Tensor[(?), int64] = memory.alloc_tensor(%storage_0234, 0 /* ty=int64 */, %shape_func_out_031, meta[relay.attrs.AllocTensorAttrs][245]) /* ty=Tensor[(?), int64] */;
  %1019 = (%x306, %x318, %x330, %x342);
  %1020 = (%out_031,);
  let %x345: () = vm.invoke_tvm_op(%1010, %1019, %1020) /* ty=() */;
  let %x346: Tensor[(?), int64] = %out_031;
  let %in_shape_027: Tensor[(1), int64] = vm.shape_of(%x346, meta[relay.attrs.ShapeOfAttrs][35]) /* ty=Tensor[(1), int64] */;
  let %storage_0235: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][246]) /* ty=Storage[] */;
  let %tensor_0203: Tensor[(1), int64] = memory.alloc_tensor(%storage_0235, 0 /* ty=int64 */, meta[relay.Constant][380] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][246]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_032: Tensor[(1), int64] = %tensor_0203;
  %1021 = fn (%p0202: Tensor[(?), int64], Primitive=1) -> Tensor[(?), int32] {
    argsort(%p0202, dtype="int32") /* ty=Tensor[(?), int32] */
  };
  %1022 = (%in_shape_027,);
  %1023 = (%shape_func_out_032,);
  let %shape_func32: () = vm.shape_func(%1021, %1022, %1023, meta[relay.attrs.ShapeFuncAttrs][32]) /* ty=() */;
  let %storage_0236: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][247]) /* ty=Storage[] */;
  let %tensor_0204: int64 = memory.alloc_tensor(%storage_0236, 0 /* ty=int64 */, meta[relay.Constant][381] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][247]) /* ty=int64 */;
  %1024 = fn (%p0203: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0203) /* ty=int64 */
  };
  %1025 = (%shape_func_out_032,);
  %1026 = (%tensor_0204,);
  let %x347: () = vm.invoke_tvm_op(%1024, %1025, %1026) /* ty=() */;
  let %storage_0237: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][248]) /* ty=Storage[] */;
  let %tensor_0205: int64 = memory.alloc_tensor(%storage_0237, 0 /* ty=int64 */, meta[relay.Constant][382] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][248]) /* ty=int64 */;
  %1027 = fn (%p0204: int64, Primitive=1) -> int64 {
    multiply(%p0204, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1028 = (%tensor_0204,);
  %1029 = (%tensor_0205,);
  let %x348: () = vm.invoke_tvm_op(%1027, %1028, %1029) /* ty=() */;
  let %storage_0238: Storage[] = memory.alloc_storage(%tensor_0205, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][249]) /* ty=Storage[] */;
  let %out_032: Tensor[(?), int32] = memory.alloc_tensor(%storage_0238, 0 /* ty=int64 */, %shape_func_out_032, meta[relay.attrs.AllocTensorAttrs][249]) /* ty=Tensor[(?), int32] */;
  %1030 = (%x346,);
  %1031 = (%out_032,);
  let %x349: () = vm.invoke_tvm_op(%1021, %1030, %1031) /* ty=() */;
  let %x350: Tensor[(?), int32] = %out_032;
  let %storage_0239: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][250]) /* ty=Storage[] */;
  let %tensor_0206: Tensor[(1, 256, 200, 200), float32] = memory.alloc_tensor(%storage_0239, 0 /* ty=int64 */, meta[relay.Constant][383] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][250]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %1032 = fn (%p0205: Tensor[(1, 200, 200, 256), float32], Primitive=1) -> Tensor[(1, 256, 200, 200), float32] {
    layout_transform(%p0205, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 200, 200), float32] */
  };
  %1033 = (%x126,);
  %1034 = (%tensor_0206,);
  let %x351: () = vm.invoke_tvm_op(%1032, %1033, %1034) /* ty=() */;
  let %x352: Tensor[(1, 256, 200, 200), float32] = %tensor_0206;
  let %storage_0240: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][251]) /* ty=Storage[] */;
  let %tensor_0207: Tensor[(2), int32] = memory.alloc_tensor(%storage_0240, 0 /* ty=int64 */, meta[relay.Constant][384] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][251]) /* ty=Tensor[(2), int32] */;
  %1037 = fn (%p0206: Tensor[(2), int32], %p199: Tensor[(2), int32], %p296: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1035 = cast_like(%p0206, %p199) /* ty=Tensor[(2), int32] */;
    %1036 = add(%p199, %1035) /* ty=Tensor[(2), int32] */;
    where(%p296, %1036, %p199) /* ty=Tensor[(2), int32] */
  };
  %1038 = (%x264, meta[relay.Constant][385] /* ty=Tensor[(2), int32] */, meta[relay.Constant][386] /* ty=Tensor[(2), bool] */);
  %1039 = (%tensor_0207,);
  let %x353: () = vm.invoke_tvm_op(%1037, %1038, %1039) /* ty=() */;
  let %x354: Tensor[(2), int32] = %tensor_0207;
  let %in_shape_028: Tensor[(2), int64] = vm.shape_of(%x262, meta[relay.attrs.ShapeOfAttrs][36]) /* ty=Tensor[(2), int64] */;
  let %in_shape_110: Tensor[(2), int32] = %x354;
  let %in_shape_28: Tensor[(2), int64] = %x268;
  let %storage_0241: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][252]) /* ty=Storage[] */;
  let %tensor_0208: Tensor[(2), int64] = memory.alloc_tensor(%storage_0241, 0 /* ty=int64 */, meta[relay.Constant][387] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][252]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_033: Tensor[(2), int64] = %tensor_0208;
  %1040 = fn (%p0207: Tensor[(?, 4), float32], %p1100: Tensor[(2), int32], %p297: Tensor[(2), int64], %p332: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0207, %p1100, %p297, %p332, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1041 = (%in_shape_028, %in_shape_110, %in_shape_28, meta[relay.Constant][388] /* ty=Tensor[(2), int32] */);
  %1042 = (%shape_func_out_033,);
  let %shape_func33: () = vm.shape_func(%1040, %1041, %1042, meta[relay.attrs.ShapeFuncAttrs][33]) /* ty=() */;
  let %storage_0242: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][253]) /* ty=Storage[] */;
  let %tensor_0209: int64 = memory.alloc_tensor(%storage_0242, 0 /* ty=int64 */, meta[relay.Constant][389] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][253]) /* ty=int64 */;
  %1043 = fn (%p0208: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0208) /* ty=int64 */
  };
  %1044 = (%shape_func_out_033,);
  %1045 = (%tensor_0209,);
  let %x355: () = vm.invoke_tvm_op(%1043, %1044, %1045) /* ty=() */;
  let %storage_0243: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][254]) /* ty=Storage[] */;
  let %tensor_0210: int64 = memory.alloc_tensor(%storage_0243, 0 /* ty=int64 */, meta[relay.Constant][390] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][254]) /* ty=int64 */;
  %1046 = fn (%p0209: int64, Primitive=1) -> int64 {
    multiply(%p0209, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1047 = (%tensor_0209,);
  %1048 = (%tensor_0210,);
  let %x356: () = vm.invoke_tvm_op(%1046, %1047, %1048) /* ty=() */;
  let %storage_0244: Storage[] = memory.alloc_storage(%tensor_0210, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][255]) /* ty=Storage[] */;
  let %out_033: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0244, 0 /* ty=int64 */, %shape_func_out_033, meta[relay.attrs.AllocTensorAttrs][255]) /* ty=Tensor[(?, ?), float32] */;
  %1049 = (%x262, %x354, %x268, meta[relay.Constant][388] /* ty=Tensor[(2), int32] */);
  %1050 = (%out_033,);
  let %x357: () = vm.invoke_tvm_op(%1040, %1049, %1050) /* ty=() */;
  let %x358: Tensor[(?, ?), float32] = %out_033;
  let %storage_0245: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][256]) /* ty=Storage[] */;
  let %tensor_0211: Tensor[(2), int32] = memory.alloc_tensor(%storage_0245, 0 /* ty=int64 */, meta[relay.Constant][391] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][256]) /* ty=Tensor[(2), int32] */;
  %1051 = fn (%p0210: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0210, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1052 = (%x358,);
  %1053 = (%tensor_0211,);
  let %x359: () = vm.invoke_tvm_op(%1051, %1052, %1053) /* ty=() */;
  let %x360: Tensor[(2), int32] = %tensor_0211;
  let %storage_0246: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][257]) /* ty=Storage[] */;
  let %tensor_0212: Tensor[(2), int32] = memory.alloc_tensor(%storage_0246, 0 /* ty=int64 */, meta[relay.Constant][392] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][257]) /* ty=Tensor[(2), int32] */;
  %1056 = fn (%p0211: Tensor[(2), int32], %p1101: Tensor[(2), int32], %p298: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1054 = cast_like(%p0211, %p1101) /* ty=Tensor[(2), int32] */;
    %1055 = add(%p1101, %1054) /* ty=Tensor[(2), int32] */;
    where(%p298, %1055, %p1101) /* ty=Tensor[(2), int32] */
  };
  %1057 = (%x360, meta[relay.Constant][393] /* ty=Tensor[(2), int32] */, meta[relay.Constant][394] /* ty=Tensor[(2), bool] */);
  %1058 = (%tensor_0212,);
  let %x361: () = vm.invoke_tvm_op(%1056, %1057, %1058) /* ty=() */;
  let %x362: Tensor[(2), int32] = %tensor_0212;
  let %storage_0247: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][258]) /* ty=Storage[] */;
  let %tensor_0213: Tensor[(2), int32] = memory.alloc_tensor(%storage_0247, 0 /* ty=int64 */, meta[relay.Constant][395] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][258]) /* ty=Tensor[(2), int32] */;
  %1059 = fn (%p0212: Tensor[(2), int32], %p1102: Tensor[(1), int32], Primitive=1) -> Tensor[(2), int32] {
    scatter(%p0212, %p1102, %p1102, meta[relay.attrs.ScatterAttrs][0]) /* ty=Tensor[(2), int32] */
  };
  %1060 = (%x360, meta[relay.Constant][396] /* ty=Tensor[(1), int32] */);
  %1061 = (%tensor_0213,);
  let %x363: () = vm.invoke_tvm_op(%1059, %1060, %1061) /* ty=() */;
  let %x364: Tensor[(2), int32] = %tensor_0213;
  let %storage_0248: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][259]) /* ty=Storage[] */;
  let %tensor_0214: Tensor[(2), int64] = memory.alloc_tensor(%storage_0248, 0 /* ty=int64 */, meta[relay.Constant][397] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][259]) /* ty=Tensor[(2), int64] */;
  %1062 = fn (%p0213: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0213, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1063 = (%x364,);
  %1064 = (%tensor_0214,);
  let %x365: () = vm.invoke_tvm_op(%1062, %1063, %1064) /* ty=() */;
  let %x366: Tensor[(2), int64] = %tensor_0214;
  let %in_shape_029: Tensor[(2), int64] = vm.shape_of(%x358, meta[relay.attrs.ShapeOfAttrs][37]) /* ty=Tensor[(2), int64] */;
  let %in_shape_111: Tensor[(2), int32] = %x362;
  let %in_shape_29: Tensor[(2), int64] = %x366;
  let %storage_0249: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][260]) /* ty=Storage[] */;
  let %tensor_0215: Tensor[(2), int64] = memory.alloc_tensor(%storage_0249, 0 /* ty=int64 */, meta[relay.Constant][398] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][260]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_034: Tensor[(2), int64] = %tensor_0215;
  %1065 = fn (%p0214: Tensor[(?, ?), float32], %p1103: Tensor[(2), int32], %p299: Tensor[(2), int64], %p333: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0214, %p1103, %p299, %p333, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1066 = (%in_shape_029, %in_shape_111, %in_shape_29, meta[relay.Constant][399] /* ty=Tensor[(2), int32] */);
  %1067 = (%shape_func_out_034,);
  let %shape_func34: () = vm.shape_func(%1065, %1066, %1067, meta[relay.attrs.ShapeFuncAttrs][34]) /* ty=() */;
  let %storage_0250: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][261]) /* ty=Storage[] */;
  let %tensor_0216: int64 = memory.alloc_tensor(%storage_0250, 0 /* ty=int64 */, meta[relay.Constant][400] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][261]) /* ty=int64 */;
  %1068 = fn (%p0215: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0215) /* ty=int64 */
  };
  %1069 = (%shape_func_out_034,);
  %1070 = (%tensor_0216,);
  let %x367: () = vm.invoke_tvm_op(%1068, %1069, %1070) /* ty=() */;
  let %storage_0251: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][262]) /* ty=Storage[] */;
  let %tensor_0217: int64 = memory.alloc_tensor(%storage_0251, 0 /* ty=int64 */, meta[relay.Constant][401] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][262]) /* ty=int64 */;
  %1071 = fn (%p0216: int64, Primitive=1) -> int64 {
    multiply(%p0216, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1072 = (%tensor_0216,);
  %1073 = (%tensor_0217,);
  let %x368: () = vm.invoke_tvm_op(%1071, %1072, %1073) /* ty=() */;
  let %storage_0252: Storage[] = memory.alloc_storage(%tensor_0217, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][263]) /* ty=Storage[] */;
  let %out_034: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0252, 0 /* ty=int64 */, %shape_func_out_034, meta[relay.attrs.AllocTensorAttrs][263]) /* ty=Tensor[(?, ?), float32] */;
  %1074 = (%x358, %x362, %x366, meta[relay.Constant][399] /* ty=Tensor[(2), int32] */);
  %1075 = (%out_034,);
  let %x369: () = vm.invoke_tvm_op(%1065, %1074, %1075) /* ty=() */;
  let %x370: Tensor[(?, ?), float32] = %out_034;
  let %in_shape_030: Tensor[(2), int64] = vm.shape_of(%x370, meta[relay.attrs.ShapeOfAttrs][38]) /* ty=Tensor[(2), int64] */;
  let %in_shape_112: Tensor[(2), int64] = vm.shape_of(%x262, meta[relay.attrs.ShapeOfAttrs][39]) /* ty=Tensor[(2), int64] */;
  let %storage_0253: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][264]) /* ty=Storage[] */;
  let %tensor_0218: Tensor[(2), int64] = memory.alloc_tensor(%storage_0253, 0 /* ty=int64 */, meta[relay.Constant][402] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][264]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_035: Tensor[(2), int64] = %tensor_0218;
  %1082 = fn (%p0217: Tensor[(?, ?), float32], %p1104: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(?, ?), float32] {
    %1076 = full_like(%p0217, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
    %1077 = (%1076,);
    %1078 = concatenate(%1077) /* ty=Tensor[(?, ?), float32] */;
    %1079 = (%p1104,);
    %1080 = concatenate(%1079) /* ty=Tensor[(?, 4), float32] */;
    %1081 = (%1078, %1080);
    concatenate(%1081, axis=1) /* ty=Tensor[(?, ?), float32] */
  };
  %1083 = (%in_shape_030, %in_shape_112);
  %1084 = (%shape_func_out_035,);
  let %shape_func35: () = vm.shape_func(%1082, %1083, %1084, meta[relay.attrs.ShapeFuncAttrs][35]) /* ty=() */;
  let %storage_0254: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][265]) /* ty=Storage[] */;
  let %tensor_0219: int64 = memory.alloc_tensor(%storage_0254, 0 /* ty=int64 */, meta[relay.Constant][403] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][265]) /* ty=int64 */;
  %1085 = fn (%p0218: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0218) /* ty=int64 */
  };
  %1086 = (%shape_func_out_035,);
  %1087 = (%tensor_0219,);
  let %x371: () = vm.invoke_tvm_op(%1085, %1086, %1087) /* ty=() */;
  let %storage_0255: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][266]) /* ty=Storage[] */;
  let %tensor_0220: int64 = memory.alloc_tensor(%storage_0255, 0 /* ty=int64 */, meta[relay.Constant][404] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][266]) /* ty=int64 */;
  %1088 = fn (%p0219: int64, Primitive=1) -> int64 {
    multiply(%p0219, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1089 = (%tensor_0219,);
  %1090 = (%tensor_0220,);
  let %x372: () = vm.invoke_tvm_op(%1088, %1089, %1090) /* ty=() */;
  let %storage_0256: Storage[] = memory.alloc_storage(%tensor_0220, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][267]) /* ty=Storage[] */;
  let %out_035: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0256, 0 /* ty=int64 */, %shape_func_out_035, meta[relay.attrs.AllocTensorAttrs][267]) /* ty=Tensor[(?, ?), float32] */;
  %1091 = (%x370, %x262);
  %1092 = (%out_035,);
  let %x373: () = vm.invoke_tvm_op(%1082, %1091, %1092) /* ty=() */;
  let %x374: Tensor[(?, ?), float32] = %out_035;
  let %in_shape_031: Tensor[(2), int64] = vm.shape_of(%x374, meta[relay.attrs.ShapeOfAttrs][40]) /* ty=Tensor[(2), int64] */;
  let %in_shape_113: Tensor[(1), int64] = vm.shape_of(%x306, meta[relay.attrs.ShapeOfAttrs][41]) /* ty=Tensor[(1), int64] */;
  let %storage_0257: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][268]) /* ty=Storage[] */;
  let %tensor_0221: Tensor[(2), int64] = memory.alloc_tensor(%storage_0257, 0 /* ty=int64 */, meta[relay.Constant][405] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][268]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_036: Tensor[(2), int64] = %tensor_0221;
  %1094 = fn (%p0220: Tensor[(?, ?), float32], %p1105: Tensor[(?), int64], Primitive=1) -> Tensor[(?, ?), float32] {
    %1093 = (%p0220, %p1105);
    adv_index(%1093) /* ty=Tensor[(?, ?), float32] */
  };
  %1095 = (%in_shape_031, %in_shape_113);
  %1096 = (%shape_func_out_036,);
  let %shape_func36: () = vm.shape_func(%1094, %1095, %1096, meta[relay.attrs.ShapeFuncAttrs][36]) /* ty=() */;
  let %storage_0258: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][269]) /* ty=Storage[] */;
  let %tensor_0222: int64 = memory.alloc_tensor(%storage_0258, 0 /* ty=int64 */, meta[relay.Constant][406] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][269]) /* ty=int64 */;
  %1097 = fn (%p0221: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0221) /* ty=int64 */
  };
  %1098 = (%shape_func_out_036,);
  %1099 = (%tensor_0222,);
  let %x375: () = vm.invoke_tvm_op(%1097, %1098, %1099) /* ty=() */;
  let %storage_0259: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][270]) /* ty=Storage[] */;
  let %tensor_0223: int64 = memory.alloc_tensor(%storage_0259, 0 /* ty=int64 */, meta[relay.Constant][407] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][270]) /* ty=int64 */;
  %1100 = fn (%p0222: int64, Primitive=1) -> int64 {
    multiply(%p0222, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1101 = (%tensor_0222,);
  %1102 = (%tensor_0223,);
  let %x376: () = vm.invoke_tvm_op(%1100, %1101, %1102) /* ty=() */;
  let %storage_0260: Storage[] = memory.alloc_storage(%tensor_0223, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][271]) /* ty=Storage[] */;
  let %out_036: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0260, 0 /* ty=int64 */, %shape_func_out_036, meta[relay.attrs.AllocTensorAttrs][271]) /* ty=Tensor[(?, ?), float32] */;
  %1103 = (%x374, %x306);
  %1104 = (%out_036,);
  let %x377: () = vm.invoke_tvm_op(%1094, %1103, %1104) /* ty=() */;
  let %x378: Tensor[(?, ?), float32] = %out_036;
  let %in_shape_114: Tensor[(2), int64] = vm.shape_of(%x378, meta[relay.attrs.ShapeOfAttrs][42]) /* ty=Tensor[(2), int64] */;
  let %storage_0261: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][272]) /* ty=Storage[] */;
  let %tensor_0224: Tensor[(4), int64] = memory.alloc_tensor(%storage_0261, 0 /* ty=int64 */, meta[relay.Constant][408] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][272]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_037: Tensor[(4), int64] = %tensor_0224;
  %1105 = fn (%p0223: Tensor[(1, 256, 200, 200), float32], %p1106: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    vision.roi_align(%p0223, %p1106, meta[relay.attrs.ROIAlignAttrs][0]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %1106 = (meta[relay.Constant][409] /* ty=Tensor[(4), int64] */, %in_shape_114);
  %1107 = (%shape_func_out_037,);
  let %shape_func37: () = vm.shape_func(%1105, %1106, %1107, meta[relay.attrs.ShapeFuncAttrs][37]) /* ty=() */;
  let %storage_0262: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][273]) /* ty=Storage[] */;
  let %tensor_0225: int64 = memory.alloc_tensor(%storage_0262, 0 /* ty=int64 */, meta[relay.Constant][410] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][273]) /* ty=int64 */;
  %1108 = fn (%p0224: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0224) /* ty=int64 */
  };
  %1109 = (%shape_func_out_037,);
  %1110 = (%tensor_0225,);
  let %x379: () = vm.invoke_tvm_op(%1108, %1109, %1110) /* ty=() */;
  let %storage_0263: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][274]) /* ty=Storage[] */;
  let %tensor_0226: int64 = memory.alloc_tensor(%storage_0263, 0 /* ty=int64 */, meta[relay.Constant][411] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][274]) /* ty=int64 */;
  %1111 = fn (%p0225: int64, Primitive=1) -> int64 {
    multiply(%p0225, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1112 = (%tensor_0225,);
  %1113 = (%tensor_0226,);
  let %x380: () = vm.invoke_tvm_op(%1111, %1112, %1113) /* ty=() */;
  let %storage_0264: Storage[] = memory.alloc_storage(%tensor_0226, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][275]) /* ty=Storage[] */;
  let %out_037: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0264, 0 /* ty=int64 */, %shape_func_out_037, meta[relay.attrs.AllocTensorAttrs][275]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1114 = (%x352, %x378);
  %1115 = (%out_037,);
  let %x381: () = vm.invoke_tvm_op(%1105, %1114, %1115) /* ty=() */;
  let %x382: Tensor[(?, 256, 7, 7), float32] = %out_037;
  let %storage_0265: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][276]) /* ty=Storage[] */;
  let %tensor_0227: Tensor[(1, 256, 100, 100), float32] = memory.alloc_tensor(%storage_0265, 0 /* ty=int64 */, meta[relay.Constant][412] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][276]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %1116 = fn (%p0226: Tensor[(1, 100, 100, 256), float32], Primitive=1) -> Tensor[(1, 256, 100, 100), float32] {
    layout_transform(%p0226, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 100, 100), float32] */
  };
  %1117 = (%x132,);
  %1118 = (%tensor_0227,);
  let %x383: () = vm.invoke_tvm_op(%1116, %1117, %1118) /* ty=() */;
  let %x384: Tensor[(1, 256, 100, 100), float32] = %tensor_0227;
  let %in_shape_032: Tensor[(2), int64] = vm.shape_of(%x374, meta[relay.attrs.ShapeOfAttrs][43]) /* ty=Tensor[(2), int64] */;
  let %in_shape_115: Tensor[(1), int64] = vm.shape_of(%x318, meta[relay.attrs.ShapeOfAttrs][44]) /* ty=Tensor[(1), int64] */;
  let %storage_0266: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][277]) /* ty=Storage[] */;
  let %tensor_0228: Tensor[(2), int64] = memory.alloc_tensor(%storage_0266, 0 /* ty=int64 */, meta[relay.Constant][413] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][277]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_038: Tensor[(2), int64] = %tensor_0228;
  %1120 = fn (%p0227: Tensor[(?, ?), float32], %p1107: Tensor[(?), int64], Primitive=1) -> Tensor[(?, ?), float32] {
    %1119 = (%p0227, %p1107);
    adv_index(%1119) /* ty=Tensor[(?, ?), float32] */
  };
  %1121 = (%in_shape_032, %in_shape_115);
  %1122 = (%shape_func_out_038,);
  let %shape_func38: () = vm.shape_func(%1120, %1121, %1122, meta[relay.attrs.ShapeFuncAttrs][38]) /* ty=() */;
  let %storage_0267: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][278]) /* ty=Storage[] */;
  let %tensor_0229: int64 = memory.alloc_tensor(%storage_0267, 0 /* ty=int64 */, meta[relay.Constant][414] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][278]) /* ty=int64 */;
  %1123 = fn (%p0228: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0228) /* ty=int64 */
  };
  %1124 = (%shape_func_out_038,);
  %1125 = (%tensor_0229,);
  let %x385: () = vm.invoke_tvm_op(%1123, %1124, %1125) /* ty=() */;
  let %storage_0268: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][279]) /* ty=Storage[] */;
  let %tensor_0230: int64 = memory.alloc_tensor(%storage_0268, 0 /* ty=int64 */, meta[relay.Constant][415] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][279]) /* ty=int64 */;
  %1126 = fn (%p0229: int64, Primitive=1) -> int64 {
    multiply(%p0229, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1127 = (%tensor_0229,);
  %1128 = (%tensor_0230,);
  let %x386: () = vm.invoke_tvm_op(%1126, %1127, %1128) /* ty=() */;
  let %storage_0269: Storage[] = memory.alloc_storage(%tensor_0230, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][280]) /* ty=Storage[] */;
  let %out_038: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0269, 0 /* ty=int64 */, %shape_func_out_038, meta[relay.attrs.AllocTensorAttrs][280]) /* ty=Tensor[(?, ?), float32] */;
  %1129 = (%x374, %x318);
  %1130 = (%out_038,);
  let %x387: () = vm.invoke_tvm_op(%1120, %1129, %1130) /* ty=() */;
  let %x388: Tensor[(?, ?), float32] = %out_038;
  let %in_shape_116: Tensor[(2), int64] = vm.shape_of(%x388, meta[relay.attrs.ShapeOfAttrs][45]) /* ty=Tensor[(2), int64] */;
  let %storage_0270: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][281]) /* ty=Storage[] */;
  let %tensor_0231: Tensor[(4), int64] = memory.alloc_tensor(%storage_0270, 0 /* ty=int64 */, meta[relay.Constant][416] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][281]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_039: Tensor[(4), int64] = %tensor_0231;
  %1131 = fn (%p0230: Tensor[(1, 256, 100, 100), float32], %p1108: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    vision.roi_align(%p0230, %p1108, meta[relay.attrs.ROIAlignAttrs][1]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %1132 = (meta[relay.Constant][417] /* ty=Tensor[(4), int64] */, %in_shape_116);
  %1133 = (%shape_func_out_039,);
  let %shape_func39: () = vm.shape_func(%1131, %1132, %1133, meta[relay.attrs.ShapeFuncAttrs][39]) /* ty=() */;
  let %storage_0271: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][282]) /* ty=Storage[] */;
  let %tensor_0232: int64 = memory.alloc_tensor(%storage_0271, 0 /* ty=int64 */, meta[relay.Constant][418] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][282]) /* ty=int64 */;
  %1134 = fn (%p0231: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0231) /* ty=int64 */
  };
  %1135 = (%shape_func_out_039,);
  %1136 = (%tensor_0232,);
  let %x389: () = vm.invoke_tvm_op(%1134, %1135, %1136) /* ty=() */;
  let %storage_0272: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][283]) /* ty=Storage[] */;
  let %tensor_0233: int64 = memory.alloc_tensor(%storage_0272, 0 /* ty=int64 */, meta[relay.Constant][419] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][283]) /* ty=int64 */;
  %1137 = fn (%p0232: int64, Primitive=1) -> int64 {
    multiply(%p0232, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1138 = (%tensor_0232,);
  %1139 = (%tensor_0233,);
  let %x390: () = vm.invoke_tvm_op(%1137, %1138, %1139) /* ty=() */;
  let %storage_0273: Storage[] = memory.alloc_storage(%tensor_0233, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][284]) /* ty=Storage[] */;
  let %out_039: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0273, 0 /* ty=int64 */, %shape_func_out_039, meta[relay.attrs.AllocTensorAttrs][284]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1140 = (%x384, %x388);
  %1141 = (%out_039,);
  let %x391: () = vm.invoke_tvm_op(%1131, %1140, %1141) /* ty=() */;
  let %x392: Tensor[(?, 256, 7, 7), float32] = %out_039;
  let %storage_0274: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][285]) /* ty=Storage[] */;
  let %tensor_0234: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0274, 0 /* ty=int64 */, meta[relay.Constant][420] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][285]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1142 = fn (%p0233: Tensor[(1, 50, 50, 256), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    layout_transform(%p0233, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1143 = (%x138,);
  %1144 = (%tensor_0234,);
  let %x393: () = vm.invoke_tvm_op(%1142, %1143, %1144) /* ty=() */;
  let %x394: Tensor[(1, 256, 50, 50), float32] = %tensor_0234;
  let %in_shape_033: Tensor[(2), int64] = vm.shape_of(%x374, meta[relay.attrs.ShapeOfAttrs][46]) /* ty=Tensor[(2), int64] */;
  let %in_shape_117: Tensor[(1), int64] = vm.shape_of(%x330, meta[relay.attrs.ShapeOfAttrs][47]) /* ty=Tensor[(1), int64] */;
  let %storage_0275: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][286]) /* ty=Storage[] */;
  let %tensor_0235: Tensor[(2), int64] = memory.alloc_tensor(%storage_0275, 0 /* ty=int64 */, meta[relay.Constant][421] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][286]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_040: Tensor[(2), int64] = %tensor_0235;
  %1146 = fn (%p0234: Tensor[(?, ?), float32], %p1109: Tensor[(?), int64], Primitive=1) -> Tensor[(?, ?), float32] {
    %1145 = (%p0234, %p1109);
    adv_index(%1145) /* ty=Tensor[(?, ?), float32] */
  };
  %1147 = (%in_shape_033, %in_shape_117);
  %1148 = (%shape_func_out_040,);
  let %shape_func40: () = vm.shape_func(%1146, %1147, %1148, meta[relay.attrs.ShapeFuncAttrs][40]) /* ty=() */;
  let %storage_0276: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][287]) /* ty=Storage[] */;
  let %tensor_0236: int64 = memory.alloc_tensor(%storage_0276, 0 /* ty=int64 */, meta[relay.Constant][422] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][287]) /* ty=int64 */;
  %1149 = fn (%p0235: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0235) /* ty=int64 */
  };
  %1150 = (%shape_func_out_040,);
  %1151 = (%tensor_0236,);
  let %x395: () = vm.invoke_tvm_op(%1149, %1150, %1151) /* ty=() */;
  let %storage_0277: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][288]) /* ty=Storage[] */;
  let %tensor_0237: int64 = memory.alloc_tensor(%storage_0277, 0 /* ty=int64 */, meta[relay.Constant][423] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][288]) /* ty=int64 */;
  %1152 = fn (%p0236: int64, Primitive=1) -> int64 {
    multiply(%p0236, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1153 = (%tensor_0236,);
  %1154 = (%tensor_0237,);
  let %x396: () = vm.invoke_tvm_op(%1152, %1153, %1154) /* ty=() */;
  let %storage_0278: Storage[] = memory.alloc_storage(%tensor_0237, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][289]) /* ty=Storage[] */;
  let %out_040: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0278, 0 /* ty=int64 */, %shape_func_out_040, meta[relay.attrs.AllocTensorAttrs][289]) /* ty=Tensor[(?, ?), float32] */;
  %1155 = (%x374, %x330);
  %1156 = (%out_040,);
  let %x397: () = vm.invoke_tvm_op(%1146, %1155, %1156) /* ty=() */;
  let %x398: Tensor[(?, ?), float32] = %out_040;
  let %in_shape_118: Tensor[(2), int64] = vm.shape_of(%x398, meta[relay.attrs.ShapeOfAttrs][48]) /* ty=Tensor[(2), int64] */;
  let %storage_0279: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][290]) /* ty=Storage[] */;
  let %tensor_0238: Tensor[(4), int64] = memory.alloc_tensor(%storage_0279, 0 /* ty=int64 */, meta[relay.Constant][424] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][290]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_041: Tensor[(4), int64] = %tensor_0238;
  %1157 = fn (%p0237: Tensor[(1, 256, 50, 50), float32], %p1111: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    vision.roi_align(%p0237, %p1111, meta[relay.attrs.ROIAlignAttrs][2]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %1158 = (meta[relay.Constant][425] /* ty=Tensor[(4), int64] */, %in_shape_118);
  %1159 = (%shape_func_out_041,);
  let %shape_func41: () = vm.shape_func(%1157, %1158, %1159, meta[relay.attrs.ShapeFuncAttrs][41]) /* ty=() */;
  let %storage_0280: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][291]) /* ty=Storage[] */;
  let %tensor_0239: int64 = memory.alloc_tensor(%storage_0280, 0 /* ty=int64 */, meta[relay.Constant][426] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][291]) /* ty=int64 */;
  %1160 = fn (%p0238: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0238) /* ty=int64 */
  };
  %1161 = (%shape_func_out_041,);
  %1162 = (%tensor_0239,);
  let %x399: () = vm.invoke_tvm_op(%1160, %1161, %1162) /* ty=() */;
  let %storage_0281: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][292]) /* ty=Storage[] */;
  let %tensor_0240: int64 = memory.alloc_tensor(%storage_0281, 0 /* ty=int64 */, meta[relay.Constant][427] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][292]) /* ty=int64 */;
  %1163 = fn (%p0239: int64, Primitive=1) -> int64 {
    multiply(%p0239, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1164 = (%tensor_0239,);
  %1165 = (%tensor_0240,);
  let %x400: () = vm.invoke_tvm_op(%1163, %1164, %1165) /* ty=() */;
  let %storage_0282: Storage[] = memory.alloc_storage(%tensor_0240, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][293]) /* ty=Storage[] */;
  let %out_041: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0282, 0 /* ty=int64 */, %shape_func_out_041, meta[relay.attrs.AllocTensorAttrs][293]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1166 = (%x394, %x398);
  %1167 = (%out_041,);
  let %x401: () = vm.invoke_tvm_op(%1157, %1166, %1167) /* ty=() */;
  let %x402: Tensor[(?, 256, 7, 7), float32] = %out_041;
  let %storage_0283: Storage[] = memory.alloc_storage(640000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][294]) /* ty=Storage[] */;
  let %tensor_0241: Tensor[(1, 256, 25, 25), float32] = memory.alloc_tensor(%storage_0283, 0 /* ty=int64 */, meta[relay.Constant][428] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][294]) /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %1168 = fn (%p0240: Tensor[(1, 25, 25, 256), float32], Primitive=1) -> Tensor[(1, 256, 25, 25), float32] {
    layout_transform(%p0240, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 25, 25), float32] */
  };
  %1169 = (%x144,);
  %1170 = (%tensor_0241,);
  let %x403: () = vm.invoke_tvm_op(%1168, %1169, %1170) /* ty=() */;
  let %x404: Tensor[(1, 256, 25, 25), float32] = %tensor_0241;
  let %in_shape_034: Tensor[(2), int64] = vm.shape_of(%x374, meta[relay.attrs.ShapeOfAttrs][49]) /* ty=Tensor[(2), int64] */;
  let %in_shape_119: Tensor[(1), int64] = vm.shape_of(%x342, meta[relay.attrs.ShapeOfAttrs][50]) /* ty=Tensor[(1), int64] */;
  let %storage_0284: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][295]) /* ty=Storage[] */;
  let %tensor_0242: Tensor[(2), int64] = memory.alloc_tensor(%storage_0284, 0 /* ty=int64 */, meta[relay.Constant][429] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][295]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_042: Tensor[(2), int64] = %tensor_0242;
  %1172 = fn (%p0241: Tensor[(?, ?), float32], %p1112: Tensor[(?), int64], Primitive=1) -> Tensor[(?, ?), float32] {
    %1171 = (%p0241, %p1112);
    adv_index(%1171) /* ty=Tensor[(?, ?), float32] */
  };
  %1173 = (%in_shape_034, %in_shape_119);
  %1174 = (%shape_func_out_042,);
  let %shape_func42: () = vm.shape_func(%1172, %1173, %1174, meta[relay.attrs.ShapeFuncAttrs][42]) /* ty=() */;
  let %storage_0285: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][296]) /* ty=Storage[] */;
  let %tensor_0243: int64 = memory.alloc_tensor(%storage_0285, 0 /* ty=int64 */, meta[relay.Constant][430] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][296]) /* ty=int64 */;
  %1175 = fn (%p0242: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0242) /* ty=int64 */
  };
  %1176 = (%shape_func_out_042,);
  %1177 = (%tensor_0243,);
  let %x405: () = vm.invoke_tvm_op(%1175, %1176, %1177) /* ty=() */;
  let %storage_0286: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][297]) /* ty=Storage[] */;
  let %tensor_0244: int64 = memory.alloc_tensor(%storage_0286, 0 /* ty=int64 */, meta[relay.Constant][431] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][297]) /* ty=int64 */;
  %1178 = fn (%p0243: int64, Primitive=1) -> int64 {
    multiply(%p0243, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1179 = (%tensor_0243,);
  %1180 = (%tensor_0244,);
  let %x406: () = vm.invoke_tvm_op(%1178, %1179, %1180) /* ty=() */;
  let %storage_0287: Storage[] = memory.alloc_storage(%tensor_0244, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][298]) /* ty=Storage[] */;
  let %out_042: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0287, 0 /* ty=int64 */, %shape_func_out_042, meta[relay.attrs.AllocTensorAttrs][298]) /* ty=Tensor[(?, ?), float32] */;
  %1181 = (%x374, %x342);
  %1182 = (%out_042,);
  let %x407: () = vm.invoke_tvm_op(%1172, %1181, %1182) /* ty=() */;
  let %x408: Tensor[(?, ?), float32] = %out_042;
  let %in_shape_120: Tensor[(2), int64] = vm.shape_of(%x408, meta[relay.attrs.ShapeOfAttrs][51]) /* ty=Tensor[(2), int64] */;
  let %storage_0288: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][299]) /* ty=Storage[] */;
  let %tensor_0245: Tensor[(4), int64] = memory.alloc_tensor(%storage_0288, 0 /* ty=int64 */, meta[relay.Constant][432] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][299]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_043: Tensor[(4), int64] = %tensor_0245;
  %1183 = fn (%p0244: Tensor[(1, 256, 25, 25), float32], %p1113: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    vision.roi_align(%p0244, %p1113, meta[relay.attrs.ROIAlignAttrs][3]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %1184 = (meta[relay.Constant][433] /* ty=Tensor[(4), int64] */, %in_shape_120);
  %1185 = (%shape_func_out_043,);
  let %shape_func43: () = vm.shape_func(%1183, %1184, %1185, meta[relay.attrs.ShapeFuncAttrs][43]) /* ty=() */;
  let %storage_0289: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][300]) /* ty=Storage[] */;
  let %tensor_0246: int64 = memory.alloc_tensor(%storage_0289, 0 /* ty=int64 */, meta[relay.Constant][434] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][300]) /* ty=int64 */;
  %1186 = fn (%p0245: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0245) /* ty=int64 */
  };
  %1187 = (%shape_func_out_043,);
  %1188 = (%tensor_0246,);
  let %x409: () = vm.invoke_tvm_op(%1186, %1187, %1188) /* ty=() */;
  let %storage_0290: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][301]) /* ty=Storage[] */;
  let %tensor_0247: int64 = memory.alloc_tensor(%storage_0290, 0 /* ty=int64 */, meta[relay.Constant][435] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][301]) /* ty=int64 */;
  %1189 = fn (%p0246: int64, Primitive=1) -> int64 {
    multiply(%p0246, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1190 = (%tensor_0246,);
  %1191 = (%tensor_0247,);
  let %x410: () = vm.invoke_tvm_op(%1189, %1190, %1191) /* ty=() */;
  let %storage_0291: Storage[] = memory.alloc_storage(%tensor_0247, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][302]) /* ty=Storage[] */;
  let %out_043: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0291, 0 /* ty=int64 */, %shape_func_out_043, meta[relay.attrs.AllocTensorAttrs][302]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1192 = (%x404, %x408);
  %1193 = (%out_043,);
  let %x411: () = vm.invoke_tvm_op(%1183, %1192, %1193) /* ty=() */;
  let %x412: Tensor[(?, 256, 7, 7), float32] = %out_043;
  let %in_shape_035: Tensor[(4), int64] = vm.shape_of(%x382, meta[relay.attrs.ShapeOfAttrs][52]) /* ty=Tensor[(4), int64] */;
  let %in_shape_121: Tensor[(4), int64] = vm.shape_of(%x392, meta[relay.attrs.ShapeOfAttrs][53]) /* ty=Tensor[(4), int64] */;
  let %in_shape_210: Tensor[(4), int64] = vm.shape_of(%x402, meta[relay.attrs.ShapeOfAttrs][54]) /* ty=Tensor[(4), int64] */;
  let %in_shape_33: Tensor[(4), int64] = vm.shape_of(%x412, meta[relay.attrs.ShapeOfAttrs][55]) /* ty=Tensor[(4), int64] */;
  let %storage_0292: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][303]) /* ty=Storage[] */;
  let %tensor_0248: Tensor[(4), int64] = memory.alloc_tensor(%storage_0292, 0 /* ty=int64 */, meta[relay.Constant][436] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][303]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_044: Tensor[(4), int64] = %tensor_0248;
  %1195 = fn (%p0247: Tensor[(?, 256, 7, 7), float32], %p1114: Tensor[(?, 256, 7, 7), float32], %p2100: Tensor[(?, 256, 7, 7), float32], %p334: Tensor[(?, 256, 7, 7), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    %1194 = (%p0247, %p1114, %p2100, %p334);
    concatenate(%1194) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %1196 = (%in_shape_035, %in_shape_121, %in_shape_210, %in_shape_33);
  %1197 = (%shape_func_out_044,);
  let %shape_func44: () = vm.shape_func(%1195, %1196, %1197, meta[relay.attrs.ShapeFuncAttrs][44]) /* ty=() */;
  let %storage_0293: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][304]) /* ty=Storage[] */;
  let %tensor_0249: int64 = memory.alloc_tensor(%storage_0293, 0 /* ty=int64 */, meta[relay.Constant][437] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][304]) /* ty=int64 */;
  %1198 = fn (%p0248: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0248) /* ty=int64 */
  };
  %1199 = (%shape_func_out_044,);
  %1200 = (%tensor_0249,);
  let %x413: () = vm.invoke_tvm_op(%1198, %1199, %1200) /* ty=() */;
  let %storage_0294: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][305]) /* ty=Storage[] */;
  let %tensor_0250: int64 = memory.alloc_tensor(%storage_0294, 0 /* ty=int64 */, meta[relay.Constant][438] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][305]) /* ty=int64 */;
  %1201 = fn (%p0249: int64, Primitive=1) -> int64 {
    multiply(%p0249, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1202 = (%tensor_0249,);
  %1203 = (%tensor_0250,);
  let %x414: () = vm.invoke_tvm_op(%1201, %1202, %1203) /* ty=() */;
  let %storage_0295: Storage[] = memory.alloc_storage(%tensor_0250, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][306]) /* ty=Storage[] */;
  let %out_044: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0295, 0 /* ty=int64 */, %shape_func_out_044, meta[relay.attrs.AllocTensorAttrs][306]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1204 = (%x382, %x392, %x402, %x412);
  %1205 = (%out_044,);
  let %x415: () = vm.invoke_tvm_op(%1195, %1204, %1205) /* ty=() */;
  let %x416: Tensor[(?, 256, 7, 7), float32] = %out_044;
  let %in_shape_036: Tensor[(1), int64] = vm.shape_of(%x350, meta[relay.attrs.ShapeOfAttrs][56]) /* ty=Tensor[(1), int64] */;
  let %in_shape_122: Tensor[(4), int64] = vm.shape_of(%x416, meta[relay.attrs.ShapeOfAttrs][57]) /* ty=Tensor[(4), int64] */;
  let %storage_0296: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][307]) /* ty=Storage[] */;
  let %tensor_0251: Tensor[(2), int64] = memory.alloc_tensor(%storage_0296, 0 /* ty=int64 */, meta[relay.Constant][439] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][307]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_045: Tensor[(2), int64] = %tensor_0251;
  %1209 = fn (%p0250: Tensor[(?), int32], %p1115: Tensor[(?, 256, 7, 7), float32], Primitive=1) -> Tensor[(?, 12544), float32] {
    %1206 = cast(%p0250, dtype="int64") /* ty=Tensor[(?), int64] */;
    %1207 = take(%p1115, %1206, axis=0) /* ty=Tensor[(?, 256, 7, 7), float32] */;
    %1208 = reshape(%1207, newshape=[0, -1, 1, 1]) /* ty=Tensor[(?, 12544, 1, 1), float32] */;
    squeeze(%1208, axis=[2, 3]) /* ty=Tensor[(?, 12544), float32] */
  };
  %1210 = (%in_shape_036, %in_shape_122);
  %1211 = (%shape_func_out_045,);
  let %shape_func45: () = vm.shape_func(%1209, %1210, %1211, meta[relay.attrs.ShapeFuncAttrs][45]) /* ty=() */;
  let %storage_0297: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][308]) /* ty=Storage[] */;
  let %tensor_0252: int64 = memory.alloc_tensor(%storage_0297, 0 /* ty=int64 */, meta[relay.Constant][440] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][308]) /* ty=int64 */;
  %1212 = fn (%p0251: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0251) /* ty=int64 */
  };
  %1213 = (%shape_func_out_045,);
  %1214 = (%tensor_0252,);
  let %x417: () = vm.invoke_tvm_op(%1212, %1213, %1214) /* ty=() */;
  let %storage_0298: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][309]) /* ty=Storage[] */;
  let %tensor_0253: int64 = memory.alloc_tensor(%storage_0298, 0 /* ty=int64 */, meta[relay.Constant][441] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][309]) /* ty=int64 */;
  %1215 = fn (%p0252: int64, Primitive=1) -> int64 {
    multiply(%p0252, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1216 = (%tensor_0252,);
  %1217 = (%tensor_0253,);
  let %x418: () = vm.invoke_tvm_op(%1215, %1216, %1217) /* ty=() */;
  let %storage_0299: Storage[] = memory.alloc_storage(%tensor_0253, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][310]) /* ty=Storage[] */;
  let %out_045: Tensor[(?, 12544), float32] = memory.alloc_tensor(%storage_0299, 0 /* ty=int64 */, %shape_func_out_045, meta[relay.attrs.AllocTensorAttrs][310]) /* ty=Tensor[(?, 12544), float32] */;
  %1218 = (%x350, %x416);
  %1219 = (%out_045,);
  let %x419: () = vm.invoke_tvm_op(%1209, %1218, %1219) /* ty=() */;
  let %x420: Tensor[(?, 12544), float32] = %out_045;
  let %in_shape_037: Tensor[(2), int64] = vm.shape_of(%x420, meta[relay.attrs.ShapeOfAttrs][58]) /* ty=Tensor[(2), int64] */;
  let %storage_0300: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][311]) /* ty=Storage[] */;
  let %tensor_0254: Tensor[(2), int64] = memory.alloc_tensor(%storage_0300, 0 /* ty=int64 */, meta[relay.Constant][442] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][311]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_046: Tensor[(2), int64] = %tensor_0254;
  %1222 = fn (%p0253: Tensor[(?, 12544), float32], %p1116: Tensor[(64, 12544, 16), float32], %p2101: Tensor[(1024), float32], Primitive=1) -> Tensor[(?, 1024), float32] {
    %1220 = nn.contrib_dense_pack(%p0253, %p1116, units=None, out_dtype="float32") /* ty=Tensor[(?, 1024), float32] */;
    %1221 = add(%1220, %p2101) /* ty=Tensor[(?, 1024), float32] */;
    nn.relu(%1221) /* ty=Tensor[(?, 1024), float32] */
  };
  %1223 = (%in_shape_037, meta[relay.Constant][443] /* ty=Tensor[(3), int64] */, meta[relay.Constant][444] /* ty=Tensor[(1), int64] */);
  %1224 = (%shape_func_out_046,);
  let %shape_func46: () = vm.shape_func(%1222, %1223, %1224, meta[relay.attrs.ShapeFuncAttrs][46]) /* ty=() */;
  let %storage_0301: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][312]) /* ty=Storage[] */;
  let %tensor_0255: int64 = memory.alloc_tensor(%storage_0301, 0 /* ty=int64 */, meta[relay.Constant][445] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][312]) /* ty=int64 */;
  %1225 = fn (%p0254: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0254) /* ty=int64 */
  };
  %1226 = (%shape_func_out_046,);
  %1227 = (%tensor_0255,);
  let %x421: () = vm.invoke_tvm_op(%1225, %1226, %1227) /* ty=() */;
  let %storage_0302: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][313]) /* ty=Storage[] */;
  let %tensor_0256: int64 = memory.alloc_tensor(%storage_0302, 0 /* ty=int64 */, meta[relay.Constant][446] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][313]) /* ty=int64 */;
  %1228 = fn (%p0255: int64, Primitive=1) -> int64 {
    multiply(%p0255, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1229 = (%tensor_0255,);
  %1230 = (%tensor_0256,);
  let %x422: () = vm.invoke_tvm_op(%1228, %1229, %1230) /* ty=() */;
  let %storage_0303: Storage[] = memory.alloc_storage(%tensor_0256, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][314]) /* ty=Storage[] */;
  let %out_046: Tensor[(?, 1024), float32] = memory.alloc_tensor(%storage_0303, 0 /* ty=int64 */, %shape_func_out_046, meta[relay.attrs.AllocTensorAttrs][314]) /* ty=Tensor[(?, 1024), float32] */;
  %1231 = (%x420, meta[relay.Constant][447] /* ty=Tensor[(64, 12544, 16), float32] */, meta[relay.Constant][448] /* ty=Tensor[(1024), float32] */);
  %1232 = (%out_046,);
  let %x423: () = vm.invoke_tvm_op(%1222, %1231, %1232) /* ty=() */;
  let %x424: Tensor[(?, 1024), float32] = %out_046;
  let %in_shape_038: Tensor[(2), int64] = vm.shape_of(%x424, meta[relay.attrs.ShapeOfAttrs][59]) /* ty=Tensor[(2), int64] */;
  let %storage_0304: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][315]) /* ty=Storage[] */;
  let %tensor_0257: Tensor[(2), int64] = memory.alloc_tensor(%storage_0304, 0 /* ty=int64 */, meta[relay.Constant][449] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][315]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_047: Tensor[(2), int64] = %tensor_0257;
  %1235 = fn (%p0256: Tensor[(?, 1024), float32], %p1117: Tensor[(64, 1024, 16), float32], %p2102: Tensor[(1024), float32], Primitive=1) -> Tensor[(?, 1024), float32] {
    %1233 = nn.contrib_dense_pack(%p0256, %p1117, units=None, out_dtype="float32") /* ty=Tensor[(?, 1024), float32] */;
    %1234 = add(%1233, %p2102) /* ty=Tensor[(?, 1024), float32] */;
    nn.relu(%1234) /* ty=Tensor[(?, 1024), float32] */
  };
  %1236 = (%in_shape_038, meta[relay.Constant][450] /* ty=Tensor[(3), int64] */, meta[relay.Constant][451] /* ty=Tensor[(1), int64] */);
  %1237 = (%shape_func_out_047,);
  let %shape_func47: () = vm.shape_func(%1235, %1236, %1237, meta[relay.attrs.ShapeFuncAttrs][47]) /* ty=() */;
  let %storage_0305: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][316]) /* ty=Storage[] */;
  let %tensor_0258: int64 = memory.alloc_tensor(%storage_0305, 0 /* ty=int64 */, meta[relay.Constant][452] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][316]) /* ty=int64 */;
  %1238 = fn (%p0257: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0257) /* ty=int64 */
  };
  %1239 = (%shape_func_out_047,);
  %1240 = (%tensor_0258,);
  let %x425: () = vm.invoke_tvm_op(%1238, %1239, %1240) /* ty=() */;
  let %storage_0306: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][317]) /* ty=Storage[] */;
  let %tensor_0259: int64 = memory.alloc_tensor(%storage_0306, 0 /* ty=int64 */, meta[relay.Constant][453] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][317]) /* ty=int64 */;
  %1241 = fn (%p0258: int64, Primitive=1) -> int64 {
    multiply(%p0258, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1242 = (%tensor_0258,);
  %1243 = (%tensor_0259,);
  let %x426: () = vm.invoke_tvm_op(%1241, %1242, %1243) /* ty=() */;
  let %storage_0307: Storage[] = memory.alloc_storage(%tensor_0259, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][318]) /* ty=Storage[] */;
  let %out_047: Tensor[(?, 1024), float32] = memory.alloc_tensor(%storage_0307, 0 /* ty=int64 */, %shape_func_out_047, meta[relay.attrs.AllocTensorAttrs][318]) /* ty=Tensor[(?, 1024), float32] */;
  %1244 = (%x424, meta[relay.Constant][454] /* ty=Tensor[(64, 1024, 16), float32] */, meta[relay.Constant][455] /* ty=Tensor[(1024), float32] */);
  %1245 = (%out_047,);
  let %x427: () = vm.invoke_tvm_op(%1235, %1244, %1245) /* ty=() */;
  let %x428: Tensor[(?, 1024), float32] = %out_047;
  let %in_shape_039: Tensor[(2), int64] = vm.shape_of(%x428, meta[relay.attrs.ShapeOfAttrs][60]) /* ty=Tensor[(2), int64] */;
  let %storage_0308: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][319]) /* ty=Storage[] */;
  let %tensor_0260: Tensor[(2), int64] = memory.alloc_tensor(%storage_0308, 0 /* ty=int64 */, meta[relay.Constant][456] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][319]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_048: Tensor[(2), int64] = %tensor_0260;
  %1246 = fn (%p0259: Tensor[(?, 1024), float32], Primitive=1) -> Tensor[(?, 1024), float32] {
    reshape(%p0259, newshape=[0, -1]) /* ty=Tensor[(?, 1024), float32] */
  };
  %1247 = (%in_shape_039,);
  %1248 = (%shape_func_out_048,);
  let %shape_func48: () = vm.shape_func(%1246, %1247, %1248, meta[relay.attrs.ShapeFuncAttrs][48]) /* ty=() */;
  let %x429: Tensor[(?, 1024), float32] = vm.reshape_tensor(%x428, %shape_func_out_048, meta[relay.attrs.ReshapeTensorAttrs][0]) /* ty=Tensor[(?, 1024), float32] */;
  let %in_shape_040: Tensor[(2), int64] = vm.shape_of(%x429, meta[relay.attrs.ShapeOfAttrs][61]) /* ty=Tensor[(2), int64] */;
  let %storage_0309: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][320]) /* ty=Storage[] */;
  let %tensor_0261: Tensor[(2), int64] = memory.alloc_tensor(%storage_0309, 0 /* ty=int64 */, meta[relay.Constant][457] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][320]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_049: Tensor[(2), int64] = %tensor_0261;
  %1250 = fn (%p0260: Tensor[(?, 1024), float32], %p1118: Tensor[(7, 1024, 13), float32], %p2103: Tensor[(91), float32], Primitive=1) -> Tensor[(?, 91), float32] {
    %1249 = nn.contrib_dense_pack(%p0260, %p1118, units=None, out_dtype="float32") /* ty=Tensor[(?, 91), float32] */;
    add(%1249, %p2103) /* ty=Tensor[(?, 91), float32] */
  };
  %1251 = (%in_shape_040, meta[relay.Constant][458] /* ty=Tensor[(3), int64] */, meta[relay.Constant][459] /* ty=Tensor[(1), int64] */);
  %1252 = (%shape_func_out_049,);
  let %shape_func49: () = vm.shape_func(%1250, %1251, %1252, meta[relay.attrs.ShapeFuncAttrs][49]) /* ty=() */;
  let %storage_0310: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][321]) /* ty=Storage[] */;
  let %tensor_0262: int64 = memory.alloc_tensor(%storage_0310, 0 /* ty=int64 */, meta[relay.Constant][460] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][321]) /* ty=int64 */;
  %1253 = fn (%p0261: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0261) /* ty=int64 */
  };
  %1254 = (%shape_func_out_049,);
  %1255 = (%tensor_0262,);
  let %x430: () = vm.invoke_tvm_op(%1253, %1254, %1255) /* ty=() */;
  let %storage_0311: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][322]) /* ty=Storage[] */;
  let %tensor_0263: int64 = memory.alloc_tensor(%storage_0311, 0 /* ty=int64 */, meta[relay.Constant][461] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][322]) /* ty=int64 */;
  %1256 = fn (%p0262: int64, Primitive=1) -> int64 {
    multiply(%p0262, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1257 = (%tensor_0262,);
  %1258 = (%tensor_0263,);
  let %x431: () = vm.invoke_tvm_op(%1256, %1257, %1258) /* ty=() */;
  let %storage_0312: Storage[] = memory.alloc_storage(%tensor_0263, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][323]) /* ty=Storage[] */;
  let %out_048: Tensor[(?, 91), float32] = memory.alloc_tensor(%storage_0312, 0 /* ty=int64 */, %shape_func_out_049, meta[relay.attrs.AllocTensorAttrs][323]) /* ty=Tensor[(?, 91), float32] */;
  %1259 = (%x429, meta[relay.Constant][462] /* ty=Tensor[(7, 1024, 13), float32] */, meta[relay.Constant][463] /* ty=Tensor[(91), float32] */);
  %1260 = (%out_048,);
  let %x432: () = vm.invoke_tvm_op(%1250, %1259, %1260) /* ty=() */;
  let %x433: Tensor[(?, 91), float32] = %out_048;
  let %in_shape_041: Tensor[(2), int64] = vm.shape_of(%x433, meta[relay.attrs.ShapeOfAttrs][62]) /* ty=Tensor[(2), int64] */;
  let %storage_0313: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][324]) /* ty=Storage[] */;
  let %tensor_0264: Tensor[(2), int64] = memory.alloc_tensor(%storage_0313, 0 /* ty=int64 */, meta[relay.Constant][464] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][324]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_050: Tensor[(2), int64] = %tensor_0264;
  %1261 = fn (%p0263: Tensor[(?, 91), float32], Primitive=1) -> Tensor[(?, 91), float32] {
    nn.softmax(%p0263) /* ty=Tensor[(?, 91), float32] */
  };
  %1262 = (%in_shape_041,);
  %1263 = (%shape_func_out_050,);
  let %shape_func50: () = vm.shape_func(%1261, %1262, %1263, meta[relay.attrs.ShapeFuncAttrs][50]) /* ty=() */;
  let %storage_0314: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][325]) /* ty=Storage[] */;
  let %tensor_0265: int64 = memory.alloc_tensor(%storage_0314, 0 /* ty=int64 */, meta[relay.Constant][465] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][325]) /* ty=int64 */;
  %1264 = fn (%p0264: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0264) /* ty=int64 */
  };
  %1265 = (%shape_func_out_050,);
  %1266 = (%tensor_0265,);
  let %x434: () = vm.invoke_tvm_op(%1264, %1265, %1266) /* ty=() */;
  let %storage_0315: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][326]) /* ty=Storage[] */;
  let %tensor_0266: int64 = memory.alloc_tensor(%storage_0315, 0 /* ty=int64 */, meta[relay.Constant][466] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][326]) /* ty=int64 */;
  %1267 = fn (%p0265: int64, Primitive=1) -> int64 {
    multiply(%p0265, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1268 = (%tensor_0265,);
  %1269 = (%tensor_0266,);
  let %x435: () = vm.invoke_tvm_op(%1267, %1268, %1269) /* ty=() */;
  let %storage_0316: Storage[] = memory.alloc_storage(%tensor_0266, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][327]) /* ty=Storage[] */;
  let %out_049: Tensor[(?, 91), float32] = memory.alloc_tensor(%storage_0316, 0 /* ty=int64 */, %shape_func_out_050, meta[relay.attrs.AllocTensorAttrs][327]) /* ty=Tensor[(?, 91), float32] */;
  %1270 = (%x433,);
  %1271 = (%out_049,);
  let %x436: () = vm.invoke_tvm_op(%1261, %1270, %1271) /* ty=() */;
  let %x437: Tensor[(?, 91), float32] = %out_049;
  let %in_shape_042: Tensor[(2), int64] = vm.shape_of(%x437, meta[relay.attrs.ShapeOfAttrs][63]) /* ty=Tensor[(2), int64] */;
  let %storage_0317: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][328]) /* ty=Storage[] */;
  let %tensor_0267: Tensor[(2), int64] = memory.alloc_tensor(%storage_0317, 0 /* ty=int64 */, meta[relay.Constant][467] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][328]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_051: Tensor[(2), int64] = %tensor_0267;
  %1273 = fn (%p0266: Tensor[(?, 91), float32], %p1119: Tensor[(1, 91), int64], Primitive=1) -> Tensor[(?, 91), int64] {
    %1272 = cast(%p0266, dtype="int64") /* ty=Tensor[(?, 91), int64] */;
    broadcast_to_like(%p1119, %1272) /* ty=Tensor[(?, 91), int64] */
  };
  %1274 = (%in_shape_042, meta[relay.Constant][468] /* ty=Tensor[(2), int64] */);
  %1275 = (%shape_func_out_051,);
  let %shape_func51: () = vm.shape_func(%1273, %1274, %1275, meta[relay.attrs.ShapeFuncAttrs][51]) /* ty=() */;
  let %storage_0318: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][329]) /* ty=Storage[] */;
  let %tensor_0268: int64 = memory.alloc_tensor(%storage_0318, 0 /* ty=int64 */, meta[relay.Constant][469] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][329]) /* ty=int64 */;
  %1276 = fn (%p0267: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0267) /* ty=int64 */
  };
  %1277 = (%shape_func_out_051,);
  %1278 = (%tensor_0268,);
  let %x438: () = vm.invoke_tvm_op(%1276, %1277, %1278) /* ty=() */;
  let %storage_0319: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][330]) /* ty=Storage[] */;
  let %tensor_0269: int64 = memory.alloc_tensor(%storage_0319, 0 /* ty=int64 */, meta[relay.Constant][470] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][330]) /* ty=int64 */;
  %1279 = fn (%p0268: int64, Primitive=1) -> int64 {
    multiply(%p0268, 8 /* ty=int64 */) /* ty=int64 */
  };
  %1280 = (%tensor_0268,);
  %1281 = (%tensor_0269,);
  let %x439: () = vm.invoke_tvm_op(%1279, %1280, %1281) /* ty=() */;
  let %storage_0320: Storage[] = memory.alloc_storage(%tensor_0269, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][331]) /* ty=Storage[] */;
  let %out_050: Tensor[(?, 91), int64] = memory.alloc_tensor(%storage_0320, 0 /* ty=int64 */, %shape_func_out_051, meta[relay.attrs.AllocTensorAttrs][331]) /* ty=Tensor[(?, 91), int64] */;
  %1282 = (%x437, meta[relay.Constant][471] /* ty=Tensor[(1, 91), int64] */);
  %1283 = (%out_050,);
  let %x440: () = vm.invoke_tvm_op(%1273, %1282, %1283) /* ty=() */;
  let %x441: Tensor[(?, 91), int64] = %out_050;
  let %storage_0321: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][332]) /* ty=Storage[] */;
  let %tensor_0270: Tensor[(2), int32] = memory.alloc_tensor(%storage_0321, 0 /* ty=int64 */, meta[relay.Constant][472] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][332]) /* ty=Tensor[(2), int32] */;
  %1284 = fn (%p0269: Tensor[(?, 91), int64], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0269, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1285 = (%x441,);
  %1286 = (%tensor_0270,);
  let %x442: () = vm.invoke_tvm_op(%1284, %1285, %1286) /* ty=() */;
  let %x443: Tensor[(2), int32] = %tensor_0270;
  let %storage_0322: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][333]) /* ty=Storage[] */;
  let %tensor_0271: Tensor[(2), int32] = memory.alloc_tensor(%storage_0322, 0 /* ty=int64 */, meta[relay.Constant][473] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][333]) /* ty=Tensor[(2), int32] */;
  %1289 = fn (%p0270: Tensor[(2), int32], %p1120: Tensor[(2), int32], %p2104: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1287 = cast_like(%p0270, %p1120) /* ty=Tensor[(2), int32] */;
    %1288 = add(%p1120, %1287) /* ty=Tensor[(2), int32] */;
    where(%p2104, %1288, %p1120) /* ty=Tensor[(2), int32] */
  };
  %1290 = (%x443, meta[relay.Constant][474] /* ty=Tensor[(2), int32] */, meta[relay.Constant][475] /* ty=Tensor[(2), bool] */);
  %1291 = (%tensor_0271,);
  let %x444: () = vm.invoke_tvm_op(%1289, %1290, %1291) /* ty=() */;
  let %x445: Tensor[(2), int32] = %tensor_0271;
  let %storage_0323: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][334]) /* ty=Storage[] */;
  let %tensor_0272: Tensor[(2), int64] = memory.alloc_tensor(%storage_0323, 0 /* ty=int64 */, meta[relay.Constant][476] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][334]) /* ty=Tensor[(2), int64] */;
  %1292 = fn (%p0271: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0271, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1293 = (%x443,);
  %1294 = (%tensor_0272,);
  let %x446: () = vm.invoke_tvm_op(%1292, %1293, %1294) /* ty=() */;
  let %x447: Tensor[(2), int64] = %tensor_0272;
  let %in_shape_043: Tensor[(2), int64] = vm.shape_of(%x441, meta[relay.attrs.ShapeOfAttrs][64]) /* ty=Tensor[(2), int64] */;
  let %in_shape_123: Tensor[(2), int32] = %x445;
  let %in_shape_211: Tensor[(2), int64] = %x447;
  let %storage_0324: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][335]) /* ty=Storage[] */;
  let %tensor_0273: Tensor[(2), int64] = memory.alloc_tensor(%storage_0324, 0 /* ty=int64 */, meta[relay.Constant][477] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][335]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_052: Tensor[(2), int64] = %tensor_0273;
  %1295 = fn (%p0272: Tensor[(?, 91), int64], %p1121: Tensor[(2), int32], %p2105: Tensor[(2), int64], %p335: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), int64] {
    dyn.strided_slice(%p0272, %p1121, %p2105, %p335, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), int64] */
  };
  %1296 = (%in_shape_043, %in_shape_123, %in_shape_211, meta[relay.Constant][478] /* ty=Tensor[(2), int32] */);
  %1297 = (%shape_func_out_052,);
  let %shape_func52: () = vm.shape_func(%1295, %1296, %1297, meta[relay.attrs.ShapeFuncAttrs][52]) /* ty=() */;
  let %storage_0325: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][336]) /* ty=Storage[] */;
  let %tensor_0274: int64 = memory.alloc_tensor(%storage_0325, 0 /* ty=int64 */, meta[relay.Constant][479] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][336]) /* ty=int64 */;
  %1298 = fn (%p0273: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0273) /* ty=int64 */
  };
  %1299 = (%shape_func_out_052,);
  %1300 = (%tensor_0274,);
  let %x448: () = vm.invoke_tvm_op(%1298, %1299, %1300) /* ty=() */;
  let %storage_0326: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][337]) /* ty=Storage[] */;
  let %tensor_0275: int64 = memory.alloc_tensor(%storage_0326, 0 /* ty=int64 */, meta[relay.Constant][480] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][337]) /* ty=int64 */;
  %1301 = fn (%p0274: int64, Primitive=1) -> int64 {
    multiply(%p0274, 8 /* ty=int64 */) /* ty=int64 */
  };
  %1302 = (%tensor_0274,);
  %1303 = (%tensor_0275,);
  let %x449: () = vm.invoke_tvm_op(%1301, %1302, %1303) /* ty=() */;
  let %storage_0327: Storage[] = memory.alloc_storage(%tensor_0275, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][338]) /* ty=Storage[] */;
  let %out_051: Tensor[(?, ?), int64] = memory.alloc_tensor(%storage_0327, 0 /* ty=int64 */, %shape_func_out_052, meta[relay.attrs.AllocTensorAttrs][338]) /* ty=Tensor[(?, ?), int64] */;
  %1304 = (%x441, %x445, %x447, meta[relay.Constant][478] /* ty=Tensor[(2), int32] */);
  %1305 = (%out_051,);
  let %x450: () = vm.invoke_tvm_op(%1295, %1304, %1305) /* ty=() */;
  let %x451: Tensor[(?, ?), int64] = %out_051;
  let %storage_0328: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][339]) /* ty=Storage[] */;
  let %tensor_0276: Tensor[(2), int32] = memory.alloc_tensor(%storage_0328, 0 /* ty=int64 */, meta[relay.Constant][481] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][339]) /* ty=Tensor[(2), int32] */;
  %1306 = fn (%p0275: Tensor[(?, ?), int64], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0275, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1307 = (%x451,);
  %1308 = (%tensor_0276,);
  let %x452: () = vm.invoke_tvm_op(%1306, %1307, %1308) /* ty=() */;
  let %x453: Tensor[(2), int32] = %tensor_0276;
  let %storage_0329: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][340]) /* ty=Storage[] */;
  let %tensor_0277: Tensor[(2), int32] = memory.alloc_tensor(%storage_0329, 0 /* ty=int64 */, meta[relay.Constant][482] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][340]) /* ty=Tensor[(2), int32] */;
  %1311 = fn (%p0276: Tensor[(2), int32], %p1122: Tensor[(2), int32], %p2106: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1309 = cast_like(%p0276, %p1122) /* ty=Tensor[(2), int32] */;
    %1310 = add(%p1122, %1309) /* ty=Tensor[(2), int32] */;
    where(%p2106, %1310, %p1122) /* ty=Tensor[(2), int32] */
  };
  %1312 = (%x453, meta[relay.Constant][483] /* ty=Tensor[(2), int32] */, meta[relay.Constant][484] /* ty=Tensor[(2), bool] */);
  %1313 = (%tensor_0277,);
  let %x454: () = vm.invoke_tvm_op(%1311, %1312, %1313) /* ty=() */;
  let %x455: Tensor[(2), int32] = %tensor_0277;
  let %storage_0330: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][341]) /* ty=Storage[] */;
  let %tensor_0278: Tensor[(2), int64] = memory.alloc_tensor(%storage_0330, 0 /* ty=int64 */, meta[relay.Constant][485] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][341]) /* ty=Tensor[(2), int64] */;
  %1314 = fn (%p0277: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0277, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1315 = (%x453,);
  %1316 = (%tensor_0278,);
  let %x456: () = vm.invoke_tvm_op(%1314, %1315, %1316) /* ty=() */;
  let %x457: Tensor[(2), int64] = %tensor_0278;
  let %in_shape_044: Tensor[(2), int64] = vm.shape_of(%x451, meta[relay.attrs.ShapeOfAttrs][65]) /* ty=Tensor[(2), int64] */;
  let %in_shape_124: Tensor[(2), int32] = %x455;
  let %in_shape_212: Tensor[(2), int64] = %x457;
  let %storage_0331: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][342]) /* ty=Storage[] */;
  let %tensor_0279: Tensor[(2), int64] = memory.alloc_tensor(%storage_0331, 0 /* ty=int64 */, meta[relay.Constant][486] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][342]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_053: Tensor[(2), int64] = %tensor_0279;
  %1317 = fn (%p0278: Tensor[(?, ?), int64], %p1123: Tensor[(2), int32], %p2107: Tensor[(2), int64], %p336: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), int64] {
    dyn.strided_slice(%p0278, %p1123, %p2107, %p336, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), int64] */
  };
  %1318 = (%in_shape_044, %in_shape_124, %in_shape_212, meta[relay.Constant][487] /* ty=Tensor[(2), int32] */);
  %1319 = (%shape_func_out_053,);
  let %shape_func53: () = vm.shape_func(%1317, %1318, %1319, meta[relay.attrs.ShapeFuncAttrs][53]) /* ty=() */;
  let %storage_0332: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][343]) /* ty=Storage[] */;
  let %tensor_0280: int64 = memory.alloc_tensor(%storage_0332, 0 /* ty=int64 */, meta[relay.Constant][488] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][343]) /* ty=int64 */;
  %1320 = fn (%p0279: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0279) /* ty=int64 */
  };
  %1321 = (%shape_func_out_053,);
  %1322 = (%tensor_0280,);
  let %x458: () = vm.invoke_tvm_op(%1320, %1321, %1322) /* ty=() */;
  let %storage_0333: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][344]) /* ty=Storage[] */;
  let %tensor_0281: int64 = memory.alloc_tensor(%storage_0333, 0 /* ty=int64 */, meta[relay.Constant][489] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][344]) /* ty=int64 */;
  %1323 = fn (%p0280: int64, Primitive=1) -> int64 {
    multiply(%p0280, 8 /* ty=int64 */) /* ty=int64 */
  };
  %1324 = (%tensor_0280,);
  %1325 = (%tensor_0281,);
  let %x459: () = vm.invoke_tvm_op(%1323, %1324, %1325) /* ty=() */;
  let %storage_0334: Storage[] = memory.alloc_storage(%tensor_0281, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][345]) /* ty=Storage[] */;
  let %out_052: Tensor[(?, ?), int64] = memory.alloc_tensor(%storage_0334, 0 /* ty=int64 */, %shape_func_out_053, meta[relay.attrs.AllocTensorAttrs][345]) /* ty=Tensor[(?, ?), int64] */;
  %1326 = (%x451, %x455, %x457, meta[relay.Constant][487] /* ty=Tensor[(2), int32] */);
  %1327 = (%out_052,);
  let %x460: () = vm.invoke_tvm_op(%1317, %1326, %1327) /* ty=() */;
  let %x461: Tensor[(?, ?), int64] = %out_052;
  let %storage_0335: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][346]) /* ty=Storage[] */;
  let %tensor_0282: Tensor[(2), int32] = memory.alloc_tensor(%storage_0335, 0 /* ty=int64 */, meta[relay.Constant][490] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][346]) /* ty=Tensor[(2), int32] */;
  %1328 = fn (%p0281: Tensor[(?, 91), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0281, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1329 = (%x437,);
  %1330 = (%tensor_0282,);
  let %x462: () = vm.invoke_tvm_op(%1328, %1329, %1330) /* ty=() */;
  let %x463: Tensor[(2), int32] = %tensor_0282;
  let %storage_0336: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][347]) /* ty=Storage[] */;
  let %tensor_0283: Tensor[(2), int32] = memory.alloc_tensor(%storage_0336, 0 /* ty=int64 */, meta[relay.Constant][491] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][347]) /* ty=Tensor[(2), int32] */;
  %1333 = fn (%p0282: Tensor[(2), int32], %p1124: Tensor[(2), int32], %p2108: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1331 = cast_like(%p0282, %p1124) /* ty=Tensor[(2), int32] */;
    %1332 = add(%p1124, %1331) /* ty=Tensor[(2), int32] */;
    where(%p2108, %1332, %p1124) /* ty=Tensor[(2), int32] */
  };
  %1334 = (%x463, meta[relay.Constant][492] /* ty=Tensor[(2), int32] */, meta[relay.Constant][493] /* ty=Tensor[(2), bool] */);
  %1335 = (%tensor_0283,);
  let %x464: () = vm.invoke_tvm_op(%1333, %1334, %1335) /* ty=() */;
  let %x465: Tensor[(2), int32] = %tensor_0283;
  let %storage_0337: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][348]) /* ty=Storage[] */;
  let %tensor_0284: Tensor[(2), int64] = memory.alloc_tensor(%storage_0337, 0 /* ty=int64 */, meta[relay.Constant][494] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][348]) /* ty=Tensor[(2), int64] */;
  %1336 = fn (%p0283: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0283, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1337 = (%x463,);
  %1338 = (%tensor_0284,);
  let %x466: () = vm.invoke_tvm_op(%1336, %1337, %1338) /* ty=() */;
  let %x467: Tensor[(2), int64] = %tensor_0284;
  let %in_shape_045: Tensor[(2), int64] = vm.shape_of(%x437, meta[relay.attrs.ShapeOfAttrs][66]) /* ty=Tensor[(2), int64] */;
  let %in_shape_125: Tensor[(2), int32] = %x465;
  let %in_shape_213: Tensor[(2), int64] = %x467;
  let %storage_0338: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][349]) /* ty=Storage[] */;
  let %tensor_0285: Tensor[(2), int64] = memory.alloc_tensor(%storage_0338, 0 /* ty=int64 */, meta[relay.Constant][495] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][349]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_054: Tensor[(2), int64] = %tensor_0285;
  %1339 = fn (%p0284: Tensor[(?, 91), float32], %p1125: Tensor[(2), int32], %p2109: Tensor[(2), int64], %p337: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0284, %p1125, %p2109, %p337, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1340 = (%in_shape_045, %in_shape_125, %in_shape_213, meta[relay.Constant][496] /* ty=Tensor[(2), int32] */);
  %1341 = (%shape_func_out_054,);
  let %shape_func54: () = vm.shape_func(%1339, %1340, %1341, meta[relay.attrs.ShapeFuncAttrs][54]) /* ty=() */;
  let %storage_0339: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][350]) /* ty=Storage[] */;
  let %tensor_0286: int64 = memory.alloc_tensor(%storage_0339, 0 /* ty=int64 */, meta[relay.Constant][497] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][350]) /* ty=int64 */;
  %1342 = fn (%p0285: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0285) /* ty=int64 */
  };
  %1343 = (%shape_func_out_054,);
  %1344 = (%tensor_0286,);
  let %x468: () = vm.invoke_tvm_op(%1342, %1343, %1344) /* ty=() */;
  let %storage_0340: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][351]) /* ty=Storage[] */;
  let %tensor_0287: int64 = memory.alloc_tensor(%storage_0340, 0 /* ty=int64 */, meta[relay.Constant][498] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][351]) /* ty=int64 */;
  %1345 = fn (%p0286: int64, Primitive=1) -> int64 {
    multiply(%p0286, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1346 = (%tensor_0286,);
  %1347 = (%tensor_0287,);
  let %x469: () = vm.invoke_tvm_op(%1345, %1346, %1347) /* ty=() */;
  let %storage_0341: Storage[] = memory.alloc_storage(%tensor_0287, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][352]) /* ty=Storage[] */;
  let %out_053: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0341, 0 /* ty=int64 */, %shape_func_out_054, meta[relay.attrs.AllocTensorAttrs][352]) /* ty=Tensor[(?, ?), float32] */;
  %1348 = (%x437, %x465, %x467, meta[relay.Constant][496] /* ty=Tensor[(2), int32] */);
  %1349 = (%out_053,);
  let %x470: () = vm.invoke_tvm_op(%1339, %1348, %1349) /* ty=() */;
  let %x471: Tensor[(?, ?), float32] = %out_053;
  let %storage_0342: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][353]) /* ty=Storage[] */;
  let %tensor_0288: Tensor[(2), int32] = memory.alloc_tensor(%storage_0342, 0 /* ty=int64 */, meta[relay.Constant][499] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][353]) /* ty=Tensor[(2), int32] */;
  %1350 = fn (%p0287: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0287, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1351 = (%x471,);
  %1352 = (%tensor_0288,);
  let %x472: () = vm.invoke_tvm_op(%1350, %1351, %1352) /* ty=() */;
  let %x473: Tensor[(2), int32] = %tensor_0288;
  let %storage_0343: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][354]) /* ty=Storage[] */;
  let %tensor_0289: Tensor[(2), int32] = memory.alloc_tensor(%storage_0343, 0 /* ty=int64 */, meta[relay.Constant][500] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][354]) /* ty=Tensor[(2), int32] */;
  %1355 = fn (%p0288: Tensor[(2), int32], %p1126: Tensor[(2), int32], %p2110: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1353 = cast_like(%p0288, %p1126) /* ty=Tensor[(2), int32] */;
    %1354 = add(%p1126, %1353) /* ty=Tensor[(2), int32] */;
    where(%p2110, %1354, %p1126) /* ty=Tensor[(2), int32] */
  };
  %1356 = (%x473, meta[relay.Constant][501] /* ty=Tensor[(2), int32] */, meta[relay.Constant][502] /* ty=Tensor[(2), bool] */);
  %1357 = (%tensor_0289,);
  let %x474: () = vm.invoke_tvm_op(%1355, %1356, %1357) /* ty=() */;
  let %x475: Tensor[(2), int32] = %tensor_0289;
  let %storage_0344: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][355]) /* ty=Storage[] */;
  let %tensor_0290: Tensor[(2), int64] = memory.alloc_tensor(%storage_0344, 0 /* ty=int64 */, meta[relay.Constant][503] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][355]) /* ty=Tensor[(2), int64] */;
  %1358 = fn (%p0289: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0289, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1359 = (%x473,);
  %1360 = (%tensor_0290,);
  let %x476: () = vm.invoke_tvm_op(%1358, %1359, %1360) /* ty=() */;
  let %x477: Tensor[(2), int64] = %tensor_0290;
  let %in_shape_046: Tensor[(2), int64] = vm.shape_of(%x471, meta[relay.attrs.ShapeOfAttrs][67]) /* ty=Tensor[(2), int64] */;
  let %in_shape_126: Tensor[(2), int32] = %x475;
  let %in_shape_214: Tensor[(2), int64] = %x477;
  let %storage_0345: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][356]) /* ty=Storage[] */;
  let %tensor_0291: Tensor[(2), int64] = memory.alloc_tensor(%storage_0345, 0 /* ty=int64 */, meta[relay.Constant][504] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][356]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_055: Tensor[(2), int64] = %tensor_0291;
  %1361 = fn (%p0290: Tensor[(?, ?), float32], %p1127: Tensor[(2), int32], %p2111: Tensor[(2), int64], %p338: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0290, %p1127, %p2111, %p338, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1362 = (%in_shape_046, %in_shape_126, %in_shape_214, meta[relay.Constant][505] /* ty=Tensor[(2), int32] */);
  %1363 = (%shape_func_out_055,);
  let %shape_func55: () = vm.shape_func(%1361, %1362, %1363, meta[relay.attrs.ShapeFuncAttrs][55]) /* ty=() */;
  let %storage_0346: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][357]) /* ty=Storage[] */;
  let %tensor_0292: int64 = memory.alloc_tensor(%storage_0346, 0 /* ty=int64 */, meta[relay.Constant][506] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][357]) /* ty=int64 */;
  %1364 = fn (%p0291: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0291) /* ty=int64 */
  };
  %1365 = (%shape_func_out_055,);
  %1366 = (%tensor_0292,);
  let %x478: () = vm.invoke_tvm_op(%1364, %1365, %1366) /* ty=() */;
  let %storage_0347: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][358]) /* ty=Storage[] */;
  let %tensor_0293: int64 = memory.alloc_tensor(%storage_0347, 0 /* ty=int64 */, meta[relay.Constant][507] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][358]) /* ty=int64 */;
  %1367 = fn (%p0292: int64, Primitive=1) -> int64 {
    multiply(%p0292, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1368 = (%tensor_0292,);
  %1369 = (%tensor_0293,);
  let %x479: () = vm.invoke_tvm_op(%1367, %1368, %1369) /* ty=() */;
  let %storage_0348: Storage[] = memory.alloc_storage(%tensor_0293, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][359]) /* ty=Storage[] */;
  let %out_054: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0348, 0 /* ty=int64 */, %shape_func_out_055, meta[relay.attrs.AllocTensorAttrs][359]) /* ty=Tensor[(?, ?), float32] */;
  %1370 = (%x471, %x475, %x477, meta[relay.Constant][505] /* ty=Tensor[(2), int32] */);
  %1371 = (%out_054,);
  let %x480: () = vm.invoke_tvm_op(%1361, %1370, %1371) /* ty=() */;
  let %x481: Tensor[(?, ?), float32] = %out_054;
  let %in_shape_047: Tensor[(2), int64] = vm.shape_of(%x481, meta[relay.attrs.ShapeOfAttrs][68]) /* ty=Tensor[(2), int64] */;
  let %storage_0349: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][360]) /* ty=Storage[] */;
  let %tensor_0294: Tensor[(1), int64] = memory.alloc_tensor(%storage_0349, 0 /* ty=int64 */, meta[relay.Constant][508] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][360]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_056: Tensor[(1), int64] = %tensor_0294;
  %1372 = fn (%p0293: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), float32] {
    reshape(%p0293, newshape=[-1]) /* ty=Tensor[(?), float32] */
  };
  %1373 = (%in_shape_047,);
  %1374 = (%shape_func_out_056,);
  let %shape_func56: () = vm.shape_func(%1372, %1373, %1374, meta[relay.attrs.ShapeFuncAttrs][56]) /* ty=() */;
  let %x482: Tensor[(?), float32] = vm.reshape_tensor(%x481, %shape_func_out_056, meta[relay.attrs.ReshapeTensorAttrs][1]) /* ty=Tensor[(?), float32] */;
  let %in_shape_048: Tensor[(1), int64] = vm.shape_of(%x482, meta[relay.attrs.ShapeOfAttrs][69]) /* ty=Tensor[(1), int64] */;
  let %storage_0350: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][361]) /* ty=Storage[] */;
  let %tensor_0295: Tensor[(1), int64] = memory.alloc_tensor(%storage_0350, 0 /* ty=int64 */, meta[relay.Constant][509] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][361]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_057: Tensor[(1), int64] = %tensor_0295;
  %1375 = fn (%p0294: Tensor[(?), float32], Primitive=1) -> Tensor[(?), bool] {
    greater(%p0294, 0.05f /* ty=float32 */) /* ty=Tensor[(?), bool] */
  };
  %1376 = (%in_shape_048,);
  %1377 = (%shape_func_out_057,);
  let %shape_func57: () = vm.shape_func(%1375, %1376, %1377, meta[relay.attrs.ShapeFuncAttrs][57]) /* ty=() */;
  let %storage_0351: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][362]) /* ty=Storage[] */;
  let %tensor_0296: int64 = memory.alloc_tensor(%storage_0351, 0 /* ty=int64 */, meta[relay.Constant][510] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][362]) /* ty=int64 */;
  %1378 = fn (%p0295: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0295) /* ty=int64 */
  };
  %1379 = (%shape_func_out_057,);
  %1380 = (%tensor_0296,);
  let %x483: () = vm.invoke_tvm_op(%1378, %1379, %1380) /* ty=() */;
  let %storage_0352: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][363]) /* ty=Storage[] */;
  let %tensor_0297: int64 = memory.alloc_tensor(%storage_0352, 0 /* ty=int64 */, meta[relay.Constant][511] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][363]) /* ty=int64 */;
  %1381 = fn (%p0296: int64, Primitive=1) -> int64 {
    multiply(%p0296, 1 /* ty=int64 */) /* ty=int64 */
  };
  %1382 = (%tensor_0296,);
  %1383 = (%tensor_0297,);
  let %x484: () = vm.invoke_tvm_op(%1381, %1382, %1383) /* ty=() */;
  let %storage_0353: Storage[] = memory.alloc_storage(%tensor_0297, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][364]) /* ty=Storage[] */;
  let %out_055: Tensor[(?), bool] = memory.alloc_tensor(%storage_0353, 0 /* ty=int64 */, %shape_func_out_057, meta[relay.attrs.AllocTensorAttrs][364]) /* ty=Tensor[(?), bool] */;
  %1384 = (%x482,);
  %1385 = (%out_055,);
  let %x485: () = vm.invoke_tvm_op(%1375, %1384, %1385) /* ty=() */;
  let %x486: Tensor[(?), bool] = %out_055;
  let %in_shape_049: Tensor[(?), bool] = %x486;
  let %storage_0354: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][365]) /* ty=Storage[] */;
  let %tensor_0298: Tensor[(2), int64] = memory.alloc_tensor(%storage_0354, 0 /* ty=int64 */, meta[relay.Constant][512] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][365]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_058: Tensor[(2), int64] = %tensor_0298;
  %1386 = fn (%p0297: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0297) /* ty=Tensor[(?, 1), int32] */
  };
  %1387 = (%in_shape_049,);
  %1388 = (%shape_func_out_058,);
  let %shape_func58: () = vm.shape_func(%1386, %1387, %1388, meta[relay.attrs.ShapeFuncAttrs][58]) /* ty=() */;
  let %storage_0355: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][366]) /* ty=Storage[] */;
  let %tensor_0299: int64 = memory.alloc_tensor(%storage_0355, 0 /* ty=int64 */, meta[relay.Constant][513] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][366]) /* ty=int64 */;
  %1389 = fn (%p0298: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0298) /* ty=int64 */
  };
  %1390 = (%shape_func_out_058,);
  %1391 = (%tensor_0299,);
  let %x487: () = vm.invoke_tvm_op(%1389, %1390, %1391) /* ty=() */;
  let %storage_0356: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][367]) /* ty=Storage[] */;
  let %tensor_0300: int64 = memory.alloc_tensor(%storage_0356, 0 /* ty=int64 */, meta[relay.Constant][514] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][367]) /* ty=int64 */;
  %1392 = fn (%p0299: int64, Primitive=1) -> int64 {
    multiply(%p0299, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1393 = (%tensor_0299,);
  %1394 = (%tensor_0300,);
  let %x488: () = vm.invoke_tvm_op(%1392, %1393, %1394) /* ty=() */;
  let %storage_0357: Storage[] = memory.alloc_storage(%tensor_0300, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][368]) /* ty=Storage[] */;
  let %out_056: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0357, 0 /* ty=int64 */, %shape_func_out_058, meta[relay.attrs.AllocTensorAttrs][368]) /* ty=Tensor[(?, 1), int32] */;
  %1395 = (%x486,);
  %1396 = (%out_056,);
  let %x489: () = vm.invoke_tvm_op(%1386, %1395, %1396) /* ty=() */;
  let %x490: Tensor[(?, 1), int32] = %out_056;
  let %in_shape_050: Tensor[(2), int64] = vm.shape_of(%x490, meta[relay.attrs.ShapeOfAttrs][70]) /* ty=Tensor[(2), int64] */;
  let %storage_0358: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][369]) /* ty=Storage[] */;
  let %tensor_0301: Tensor[(1), int64] = memory.alloc_tensor(%storage_0358, 0 /* ty=int64 */, meta[relay.Constant][515] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][369]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_059: Tensor[(1), int64] = %tensor_0301;
  %1400 = fn (%p0300: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int64] {
    %1397 = split(%p0300, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %1398 = %1397.0;
    %1399 = squeeze(%1398, axis=[1]) /* ty=Tensor[(?), int32] */;
    cast(%1399, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %1401 = (%in_shape_050,);
  %1402 = (%shape_func_out_059,);
  let %shape_func59: () = vm.shape_func(%1400, %1401, %1402, meta[relay.attrs.ShapeFuncAttrs][59]) /* ty=() */;
  let %storage_0359: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][370]) /* ty=Storage[] */;
  let %tensor_0302: int64 = memory.alloc_tensor(%storage_0359, 0 /* ty=int64 */, meta[relay.Constant][516] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][370]) /* ty=int64 */;
  %1403 = fn (%p0301: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0301) /* ty=int64 */
  };
  %1404 = (%shape_func_out_059,);
  %1405 = (%tensor_0302,);
  let %x491: () = vm.invoke_tvm_op(%1403, %1404, %1405) /* ty=() */;
  let %storage_0360: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][371]) /* ty=Storage[] */;
  let %tensor_0303: int64 = memory.alloc_tensor(%storage_0360, 0 /* ty=int64 */, meta[relay.Constant][517] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][371]) /* ty=int64 */;
  %1406 = fn (%p0302: int64, Primitive=1) -> int64 {
    multiply(%p0302, 8 /* ty=int64 */) /* ty=int64 */
  };
  %1407 = (%tensor_0302,);
  %1408 = (%tensor_0303,);
  let %x492: () = vm.invoke_tvm_op(%1406, %1407, %1408) /* ty=() */;
  let %storage_0361: Storage[] = memory.alloc_storage(%tensor_0303, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][372]) /* ty=Storage[] */;
  let %out_057: Tensor[(?), int64] = memory.alloc_tensor(%storage_0361, 0 /* ty=int64 */, %shape_func_out_059, meta[relay.attrs.AllocTensorAttrs][372]) /* ty=Tensor[(?), int64] */;
  %1409 = (%x490,);
  %1410 = (%out_057,);
  let %x493: () = vm.invoke_tvm_op(%1400, %1409, %1410) /* ty=() */;
  let %x494: Tensor[(?), int64] = %out_057;
  let %in_shape_051: Tensor[(2), int64] = vm.shape_of(%x429, meta[relay.attrs.ShapeOfAttrs][71]) /* ty=Tensor[(2), int64] */;
  let %storage_0362: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][373]) /* ty=Storage[] */;
  let %tensor_0304: Tensor[(2), int64] = memory.alloc_tensor(%storage_0362, 0 /* ty=int64 */, meta[relay.Constant][518] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][373]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_060: Tensor[(2), int64] = %tensor_0304;
  %1412 = fn (%p0303: Tensor[(?, 1024), float32], %p1128: Tensor[(26, 1024, 14), float32], %p2112: Tensor[(364), float32], Primitive=1) -> Tensor[(?, 364), float32] {
    %1411 = nn.contrib_dense_pack(%p0303, %p1128, units=None, out_dtype="float32") /* ty=Tensor[(?, 364), float32] */;
    add(%1411, %p2112) /* ty=Tensor[(?, 364), float32] */
  };
  %1413 = (%in_shape_051, meta[relay.Constant][519] /* ty=Tensor[(3), int64] */, meta[relay.Constant][520] /* ty=Tensor[(1), int64] */);
  %1414 = (%shape_func_out_060,);
  let %shape_func60: () = vm.shape_func(%1412, %1413, %1414, meta[relay.attrs.ShapeFuncAttrs][60]) /* ty=() */;
  let %storage_0363: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][374]) /* ty=Storage[] */;
  let %tensor_0305: int64 = memory.alloc_tensor(%storage_0363, 0 /* ty=int64 */, meta[relay.Constant][521] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][374]) /* ty=int64 */;
  %1415 = fn (%p0304: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0304) /* ty=int64 */
  };
  %1416 = (%shape_func_out_060,);
  %1417 = (%tensor_0305,);
  let %x495: () = vm.invoke_tvm_op(%1415, %1416, %1417) /* ty=() */;
  let %storage_0364: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][375]) /* ty=Storage[] */;
  let %tensor_0306: int64 = memory.alloc_tensor(%storage_0364, 0 /* ty=int64 */, meta[relay.Constant][522] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][375]) /* ty=int64 */;
  %1418 = fn (%p0305: int64, Primitive=1) -> int64 {
    multiply(%p0305, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1419 = (%tensor_0305,);
  %1420 = (%tensor_0306,);
  let %x496: () = vm.invoke_tvm_op(%1418, %1419, %1420) /* ty=() */;
  let %storage_0365: Storage[] = memory.alloc_storage(%tensor_0306, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][376]) /* ty=Storage[] */;
  let %out_058: Tensor[(?, 364), float32] = memory.alloc_tensor(%storage_0365, 0 /* ty=int64 */, %shape_func_out_060, meta[relay.attrs.AllocTensorAttrs][376]) /* ty=Tensor[(?, 364), float32] */;
  %1421 = (%x429, meta[relay.Constant][523] /* ty=Tensor[(26, 1024, 14), float32] */, meta[relay.Constant][524] /* ty=Tensor[(364), float32] */);
  %1422 = (%out_058,);
  let %x497: () = vm.invoke_tvm_op(%1412, %1421, %1422) /* ty=() */;
  let %x498: Tensor[(?, 364), float32] = %out_058;
  let %storage_0366: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][377]) /* ty=Storage[] */;
  let %tensor_0307: Tensor[(1), int64] = memory.alloc_tensor(%storage_0366, 0 /* ty=int64 */, meta[relay.Constant][525] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][377]) /* ty=Tensor[(1), int64] */;
  %1426 = fn (%p0306: Tensor[(2), int32], Primitive=1) -> Tensor[(1), int64] {
    %1423 = take(%p0306, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
    %1424 = add(%1423, 0 /* ty=int32 */) /* ty=int32 */;
    %1425 = cast(%1424, dtype="int64") /* ty=int64 */;
    expand_dims(%1425, axis=0) /* ty=Tensor[(1), int64] */
  };
  %1427 = (%x264,);
  %1428 = (%tensor_0307,);
  let %x499: () = vm.invoke_tvm_op(%1426, %1427, %1428) /* ty=() */;
  let %x500: Tensor[(1), int64] = %tensor_0307;
  let %storage_0367: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][378]) /* ty=Storage[] */;
  let %tensor_0308: Tensor[(2), int64] = memory.alloc_tensor(%storage_0367, 0 /* ty=int64 */, meta[relay.Constant][526] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][378]) /* ty=Tensor[(2), int64] */;
  %1430 = fn (%p0307: Tensor[(1), int64], %p1129: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
    %1429 = (%p0307, %p1129);
    concatenate(%1429) /* ty=Tensor[(2), int64] */
  };
  %1431 = (%x500, meta[relay.Constant][527] /* ty=Tensor[(1), int64] */);
  %1432 = (%tensor_0308,);
  let %x501: () = vm.invoke_tvm_op(%1430, %1431, %1432) /* ty=() */;
  let %x502: Tensor[(2), int64] = %tensor_0308;
  let %in_shape_052: Tensor[(2), int64] = vm.shape_of(%x498, meta[relay.attrs.ShapeOfAttrs][72]) /* ty=Tensor[(2), int64] */;
  let %in_shape_127: Tensor[(2), int64] = %x502;
  let %storage_0368: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][379]) /* ty=Storage[] */;
  let %tensor_0309: Tensor[(2), int64] = memory.alloc_tensor(%storage_0368, 0 /* ty=int64 */, meta[relay.Constant][528] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][379]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_061: Tensor[(2), int64] = %tensor_0309;
  %1433 = fn (%p0308: Tensor[(?, 364), float32], %p1130: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.reshape(%p0308, %p1130, newshape=[]) /* ty=Tensor[(?, ?), float32] */
  };
  %1434 = (%in_shape_052, %in_shape_127);
  %1435 = (%shape_func_out_061,);
  let %shape_func61: () = vm.shape_func(%1433, %1434, %1435, meta[relay.attrs.ShapeFuncAttrs][61]) /* ty=() */;
  let %x503: Tensor[(?, ?), float32] = vm.reshape_tensor(%x498, %shape_func_out_061, meta[relay.attrs.ReshapeTensorAttrs][2]) /* ty=Tensor[(?, ?), float32] */;
  let %storage_0369: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][380]) /* ty=Storage[] */;
  let %tensor_0310: Tensor[(2), int32] = memory.alloc_tensor(%storage_0369, 0 /* ty=int64 */, meta[relay.Constant][529] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][380]) /* ty=Tensor[(2), int32] */;
  %1436 = fn (%p0309: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0309, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1437 = (%x503,);
  %1438 = (%tensor_0310,);
  let %x504: () = vm.invoke_tvm_op(%1436, %1437, %1438) /* ty=() */;
  let %x505: Tensor[(2), int32] = %tensor_0310;
  let %storage_0370: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][381]) /* ty=Storage[] */;
  let %tensor_0311: Tensor[(2), int32] = memory.alloc_tensor(%storage_0370, 0 /* ty=int64 */, meta[relay.Constant][530] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][381]) /* ty=Tensor[(2), int32] */;
  %1441 = fn (%p0310: Tensor[(2), int32], %p1131: Tensor[(2), int32], %p2113: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1439 = cast_like(%p0310, %p1131) /* ty=Tensor[(2), int32] */;
    %1440 = add(%p1131, %1439) /* ty=Tensor[(2), int32] */;
    where(%p2113, %1440, %p1131) /* ty=Tensor[(2), int32] */
  };
  %1442 = (%x505, meta[relay.Constant][531] /* ty=Tensor[(2), int32] */, meta[relay.Constant][532] /* ty=Tensor[(2), bool] */);
  %1443 = (%tensor_0311,);
  let %x506: () = vm.invoke_tvm_op(%1441, %1442, %1443) /* ty=() */;
  let %x507: Tensor[(2), int32] = %tensor_0311;
  let %storage_0371: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][382]) /* ty=Storage[] */;
  let %tensor_0312: Tensor[(2), int64] = memory.alloc_tensor(%storage_0371, 0 /* ty=int64 */, meta[relay.Constant][533] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][382]) /* ty=Tensor[(2), int64] */;
  %1444 = fn (%p0311: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0311, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1445 = (%x505,);
  %1446 = (%tensor_0312,);
  let %x508: () = vm.invoke_tvm_op(%1444, %1445, %1446) /* ty=() */;
  let %x509: Tensor[(2), int64] = %tensor_0312;
  let %in_shape_053: Tensor[(2), int64] = vm.shape_of(%x503, meta[relay.attrs.ShapeOfAttrs][73]) /* ty=Tensor[(2), int64] */;
  let %in_shape_128: Tensor[(2), int32] = %x507;
  let %in_shape_215: Tensor[(2), int64] = %x509;
  let %storage_0372: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][383]) /* ty=Storage[] */;
  let %tensor_0313: Tensor[(2), int64] = memory.alloc_tensor(%storage_0372, 0 /* ty=int64 */, meta[relay.Constant][534] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][383]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_062: Tensor[(2), int64] = %tensor_0313;
  %1447 = fn (%p0312: Tensor[(?, ?), float32], %p1132: Tensor[(2), int32], %p2114: Tensor[(2), int64], %p339: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0312, %p1132, %p2114, %p339, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1448 = (%in_shape_053, %in_shape_128, %in_shape_215, meta[relay.Constant][535] /* ty=Tensor[(2), int32] */);
  %1449 = (%shape_func_out_062,);
  let %shape_func62: () = vm.shape_func(%1447, %1448, %1449, meta[relay.attrs.ShapeFuncAttrs][62]) /* ty=() */;
  let %storage_0373: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][384]) /* ty=Storage[] */;
  let %tensor_0314: int64 = memory.alloc_tensor(%storage_0373, 0 /* ty=int64 */, meta[relay.Constant][536] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][384]) /* ty=int64 */;
  %1450 = fn (%p0313: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0313) /* ty=int64 */
  };
  %1451 = (%shape_func_out_062,);
  %1452 = (%tensor_0314,);
  let %x510: () = vm.invoke_tvm_op(%1450, %1451, %1452) /* ty=() */;
  let %storage_0374: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][385]) /* ty=Storage[] */;
  let %tensor_0315: int64 = memory.alloc_tensor(%storage_0374, 0 /* ty=int64 */, meta[relay.Constant][537] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][385]) /* ty=int64 */;
  %1453 = fn (%p0314: int64, Primitive=1) -> int64 {
    multiply(%p0314, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1454 = (%tensor_0314,);
  %1455 = (%tensor_0315,);
  let %x511: () = vm.invoke_tvm_op(%1453, %1454, %1455) /* ty=() */;
  let %storage_0375: Storage[] = memory.alloc_storage(%tensor_0315, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][386]) /* ty=Storage[] */;
  let %out_059: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0375, 0 /* ty=int64 */, %shape_func_out_062, meta[relay.attrs.AllocTensorAttrs][386]) /* ty=Tensor[(?, ?), float32] */;
  %1456 = (%x503, %x507, %x509, meta[relay.Constant][535] /* ty=Tensor[(2), int32] */);
  %1457 = (%out_059,);
  let %x512: () = vm.invoke_tvm_op(%1447, %1456, %1457) /* ty=() */;
  let %x513: Tensor[(?, ?), float32] = %out_059;
  let %storage_0376: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][387]) /* ty=Storage[] */;
  let %tensor_0316: Tensor[(2), int32] = memory.alloc_tensor(%storage_0376, 0 /* ty=int64 */, meta[relay.Constant][538] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][387]) /* ty=Tensor[(2), int32] */;
  %1458 = fn (%p0315: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0315, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1459 = (%x513,);
  %1460 = (%tensor_0316,);
  let %x514: () = vm.invoke_tvm_op(%1458, %1459, %1460) /* ty=() */;
  let %x515: Tensor[(2), int32] = %tensor_0316;
  let %storage_0377: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][388]) /* ty=Storage[] */;
  let %tensor_0317: Tensor[(2), int32] = memory.alloc_tensor(%storage_0377, 0 /* ty=int64 */, meta[relay.Constant][539] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][388]) /* ty=Tensor[(2), int32] */;
  %1463 = fn (%p0316: Tensor[(2), int32], %p1133: Tensor[(2), int32], %p2115: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1461 = cast_like(%p0316, %p1133) /* ty=Tensor[(2), int32] */;
    %1462 = add(%p1133, %1461) /* ty=Tensor[(2), int32] */;
    where(%p2115, %1462, %p1133) /* ty=Tensor[(2), int32] */
  };
  %1464 = (%x515, meta[relay.Constant][540] /* ty=Tensor[(2), int32] */, meta[relay.Constant][541] /* ty=Tensor[(2), bool] */);
  %1465 = (%tensor_0317,);
  let %x516: () = vm.invoke_tvm_op(%1463, %1464, %1465) /* ty=() */;
  let %x517: Tensor[(2), int32] = %tensor_0317;
  let %storage_0378: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][389]) /* ty=Storage[] */;
  let %tensor_0318: Tensor[(2), int64] = memory.alloc_tensor(%storage_0378, 0 /* ty=int64 */, meta[relay.Constant][542] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][389]) /* ty=Tensor[(2), int64] */;
  %1466 = fn (%p0317: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0317, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1467 = (%x515,);
  %1468 = (%tensor_0318,);
  let %x518: () = vm.invoke_tvm_op(%1466, %1467, %1468) /* ty=() */;
  let %x519: Tensor[(2), int64] = %tensor_0318;
  let %in_shape_054: Tensor[(2), int64] = vm.shape_of(%x513, meta[relay.attrs.ShapeOfAttrs][74]) /* ty=Tensor[(2), int64] */;
  let %in_shape_129: Tensor[(2), int32] = %x517;
  let %in_shape_216: Tensor[(2), int64] = %x519;
  let %storage_0379: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][390]) /* ty=Storage[] */;
  let %tensor_0319: Tensor[(2), int64] = memory.alloc_tensor(%storage_0379, 0 /* ty=int64 */, meta[relay.Constant][543] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][390]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_063: Tensor[(2), int64] = %tensor_0319;
  %1469 = fn (%p0318: Tensor[(?, ?), float32], %p1134: Tensor[(2), int32], %p2116: Tensor[(2), int64], %p340: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0318, %p1134, %p2116, %p340, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1470 = (%in_shape_054, %in_shape_129, %in_shape_216, meta[relay.Constant][544] /* ty=Tensor[(2), int32] */);
  %1471 = (%shape_func_out_063,);
  let %shape_func63: () = vm.shape_func(%1469, %1470, %1471, meta[relay.attrs.ShapeFuncAttrs][63]) /* ty=() */;
  let %storage_0380: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][391]) /* ty=Storage[] */;
  let %tensor_0320: int64 = memory.alloc_tensor(%storage_0380, 0 /* ty=int64 */, meta[relay.Constant][545] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][391]) /* ty=int64 */;
  %1472 = fn (%p0319: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0319) /* ty=int64 */
  };
  %1473 = (%shape_func_out_063,);
  %1474 = (%tensor_0320,);
  let %x520: () = vm.invoke_tvm_op(%1472, %1473, %1474) /* ty=() */;
  let %storage_0381: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][392]) /* ty=Storage[] */;
  let %tensor_0321: int64 = memory.alloc_tensor(%storage_0381, 0 /* ty=int64 */, meta[relay.Constant][546] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][392]) /* ty=int64 */;
  %1475 = fn (%p0320: int64, Primitive=1) -> int64 {
    multiply(%p0320, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1476 = (%tensor_0320,);
  %1477 = (%tensor_0321,);
  let %x521: () = vm.invoke_tvm_op(%1475, %1476, %1477) /* ty=() */;
  let %storage_0382: Storage[] = memory.alloc_storage(%tensor_0321, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][393]) /* ty=Storage[] */;
  let %out_060: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0382, 0 /* ty=int64 */, %shape_func_out_063, meta[relay.attrs.AllocTensorAttrs][393]) /* ty=Tensor[(?, ?), float32] */;
  %1478 = (%x513, %x517, %x519, meta[relay.Constant][544] /* ty=Tensor[(2), int32] */);
  %1479 = (%out_060,);
  let %x522: () = vm.invoke_tvm_op(%1469, %1478, %1479) /* ty=() */;
  let %x523: Tensor[(?, ?), float32] = %out_060;
  let %in_shape_055: Tensor[(2), int64] = vm.shape_of(%x262, meta[relay.attrs.ShapeOfAttrs][75]) /* ty=Tensor[(2), int64] */;
  let %storage_0383: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][394]) /* ty=Storage[] */;
  let %tensor_0322: Tensor[(2), int64] = memory.alloc_tensor(%storage_0383, 0 /* ty=int64 */, meta[relay.Constant][547] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][394]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_064: Tensor[(2), int64] = %tensor_0322;
  %1481 = fn (%p0321: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(?, 4), float32] {
    %1480 = (%p0321,);
    concatenate(%1480) /* ty=Tensor[(?, 4), float32] */
  };
  %1482 = (%in_shape_055,);
  %1483 = (%shape_func_out_064,);
  let %shape_func64: () = vm.shape_func(%1481, %1482, %1483, meta[relay.attrs.ShapeFuncAttrs][64]) /* ty=() */;
  let %storage_0384: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][395]) /* ty=Storage[] */;
  let %tensor_0323: int64 = memory.alloc_tensor(%storage_0384, 0 /* ty=int64 */, meta[relay.Constant][548] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][395]) /* ty=int64 */;
  %1484 = fn (%p0322: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0322) /* ty=int64 */
  };
  %1485 = (%shape_func_out_064,);
  %1486 = (%tensor_0323,);
  let %x524: () = vm.invoke_tvm_op(%1484, %1485, %1486) /* ty=() */;
  let %storage_0385: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][396]) /* ty=Storage[] */;
  let %tensor_0324: int64 = memory.alloc_tensor(%storage_0385, 0 /* ty=int64 */, meta[relay.Constant][549] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][396]) /* ty=int64 */;
  %1487 = fn (%p0323: int64, Primitive=1) -> int64 {
    multiply(%p0323, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1488 = (%tensor_0323,);
  %1489 = (%tensor_0324,);
  let %x525: () = vm.invoke_tvm_op(%1487, %1488, %1489) /* ty=() */;
  let %storage_0386: Storage[] = memory.alloc_storage(%tensor_0324, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][397]) /* ty=Storage[] */;
  let %out_061: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0386, 0 /* ty=int64 */, %shape_func_out_064, meta[relay.attrs.AllocTensorAttrs][397]) /* ty=Tensor[(?, 4), float32] */;
  %1490 = (%x262,);
  %1491 = (%out_061,);
  let %x526: () = vm.invoke_tvm_op(%1481, %1490, %1491) /* ty=() */;
  let %x527: Tensor[(?, 4), float32] = %out_061;
  let %storage_0387: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][398]) /* ty=Storage[] */;
  let %tensor_0325: Tensor[(2), int32] = memory.alloc_tensor(%storage_0387, 0 /* ty=int64 */, meta[relay.Constant][550] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][398]) /* ty=Tensor[(2), int32] */;
  %1492 = fn (%p0324: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0324, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1493 = (%x527,);
  %1494 = (%tensor_0325,);
  let %x528: () = vm.invoke_tvm_op(%1492, %1493, %1494) /* ty=() */;
  let %x529: Tensor[(2), int32] = %tensor_0325;
  let %storage_0388: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][399]) /* ty=Storage[] */;
  let %tensor_0326: Tensor[(2), int32] = memory.alloc_tensor(%storage_0388, 0 /* ty=int64 */, meta[relay.Constant][551] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][399]) /* ty=Tensor[(2), int32] */;
  %1497 = fn (%p0325: Tensor[(2), int32], %p1135: Tensor[(2), int32], %p2117: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1495 = cast_like(%p0325, %p1135) /* ty=Tensor[(2), int32] */;
    %1496 = add(%p1135, %1495) /* ty=Tensor[(2), int32] */;
    where(%p2117, %1496, %p1135) /* ty=Tensor[(2), int32] */
  };
  %1498 = (%x529, meta[relay.Constant][552] /* ty=Tensor[(2), int32] */, meta[relay.Constant][553] /* ty=Tensor[(2), bool] */);
  %1499 = (%tensor_0326,);
  let %x530: () = vm.invoke_tvm_op(%1497, %1498, %1499) /* ty=() */;
  let %x531: Tensor[(2), int32] = %tensor_0326;
  let %storage_0389: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][400]) /* ty=Storage[] */;
  let %tensor_0327: Tensor[(2), int64] = memory.alloc_tensor(%storage_0389, 0 /* ty=int64 */, meta[relay.Constant][554] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][400]) /* ty=Tensor[(2), int64] */;
  %1500 = fn (%p0326: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0326, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1501 = (%x529,);
  %1502 = (%tensor_0327,);
  let %x532: () = vm.invoke_tvm_op(%1500, %1501, %1502) /* ty=() */;
  let %x533: Tensor[(2), int64] = %tensor_0327;
  let %in_shape_056: Tensor[(2), int64] = vm.shape_of(%x527, meta[relay.attrs.ShapeOfAttrs][76]) /* ty=Tensor[(2), int64] */;
  let %in_shape_130: Tensor[(2), int32] = %x531;
  let %in_shape_217: Tensor[(2), int64] = %x533;
  let %storage_0390: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][401]) /* ty=Storage[] */;
  let %tensor_0328: Tensor[(2), int64] = memory.alloc_tensor(%storage_0390, 0 /* ty=int64 */, meta[relay.Constant][555] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][401]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_065: Tensor[(2), int64] = %tensor_0328;
  %1503 = fn (%p0327: Tensor[(?, 4), float32], %p1136: Tensor[(2), int32], %p2118: Tensor[(2), int64], %p341: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0327, %p1136, %p2118, %p341, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1504 = (%in_shape_056, %in_shape_130, %in_shape_217, meta[relay.Constant][556] /* ty=Tensor[(2), int32] */);
  %1505 = (%shape_func_out_065,);
  let %shape_func65: () = vm.shape_func(%1503, %1504, %1505, meta[relay.attrs.ShapeFuncAttrs][65]) /* ty=() */;
  let %storage_0391: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][402]) /* ty=Storage[] */;
  let %tensor_0329: int64 = memory.alloc_tensor(%storage_0391, 0 /* ty=int64 */, meta[relay.Constant][557] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][402]) /* ty=int64 */;
  %1506 = fn (%p0328: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0328) /* ty=int64 */
  };
  %1507 = (%shape_func_out_065,);
  %1508 = (%tensor_0329,);
  let %x534: () = vm.invoke_tvm_op(%1506, %1507, %1508) /* ty=() */;
  let %storage_0392: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][403]) /* ty=Storage[] */;
  let %tensor_0330: int64 = memory.alloc_tensor(%storage_0392, 0 /* ty=int64 */, meta[relay.Constant][558] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][403]) /* ty=int64 */;
  %1509 = fn (%p0329: int64, Primitive=1) -> int64 {
    multiply(%p0329, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1510 = (%tensor_0329,);
  %1511 = (%tensor_0330,);
  let %x535: () = vm.invoke_tvm_op(%1509, %1510, %1511) /* ty=() */;
  let %storage_0393: Storage[] = memory.alloc_storage(%tensor_0330, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][404]) /* ty=Storage[] */;
  let %out_062: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0393, 0 /* ty=int64 */, %shape_func_out_065, meta[relay.attrs.AllocTensorAttrs][404]) /* ty=Tensor[(?, ?), float32] */;
  %1512 = (%x527, %x531, %x533, meta[relay.Constant][556] /* ty=Tensor[(2), int32] */);
  %1513 = (%out_062,);
  let %x536: () = vm.invoke_tvm_op(%1503, %1512, %1513) /* ty=() */;
  let %x537: Tensor[(?, ?), float32] = %out_062;
  let %storage_0394: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][405]) /* ty=Storage[] */;
  let %tensor_0331: Tensor[(2), int32] = memory.alloc_tensor(%storage_0394, 0 /* ty=int64 */, meta[relay.Constant][559] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][405]) /* ty=Tensor[(2), int32] */;
  %1516 = fn (%p0330: Tensor[(2), int32], %p1137: Tensor[(2), int32], %p2119: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1514 = cast_like(%p0330, %p1137) /* ty=Tensor[(2), int32] */;
    %1515 = add(%p1137, %1514) /* ty=Tensor[(2), int32] */;
    where(%p2119, %1515, %p1137) /* ty=Tensor[(2), int32] */
  };
  %1517 = (%x529, meta[relay.Constant][560] /* ty=Tensor[(2), int32] */, meta[relay.Constant][561] /* ty=Tensor[(2), bool] */);
  %1518 = (%tensor_0331,);
  let %x538: () = vm.invoke_tvm_op(%1516, %1517, %1518) /* ty=() */;
  let %x539: Tensor[(2), int32] = %tensor_0331;
  let %in_shape_057: Tensor[(2), int64] = vm.shape_of(%x527, meta[relay.attrs.ShapeOfAttrs][77]) /* ty=Tensor[(2), int64] */;
  let %in_shape_131: Tensor[(2), int32] = %x539;
  let %in_shape_218: Tensor[(2), int64] = %x533;
  let %storage_0395: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][406]) /* ty=Storage[] */;
  let %tensor_0332: Tensor[(2), int64] = memory.alloc_tensor(%storage_0395, 0 /* ty=int64 */, meta[relay.Constant][562] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][406]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_066: Tensor[(2), int64] = %tensor_0332;
  %1519 = fn (%p0331: Tensor[(?, 4), float32], %p1138: Tensor[(2), int32], %p2120: Tensor[(2), int64], %p342: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0331, %p1138, %p2120, %p342, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1520 = (%in_shape_057, %in_shape_131, %in_shape_218, meta[relay.Constant][563] /* ty=Tensor[(2), int32] */);
  %1521 = (%shape_func_out_066,);
  let %shape_func66: () = vm.shape_func(%1519, %1520, %1521, meta[relay.attrs.ShapeFuncAttrs][66]) /* ty=() */;
  let %storage_0396: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][407]) /* ty=Storage[] */;
  let %tensor_0333: int64 = memory.alloc_tensor(%storage_0396, 0 /* ty=int64 */, meta[relay.Constant][564] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][407]) /* ty=int64 */;
  %1522 = fn (%p0332: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0332) /* ty=int64 */
  };
  %1523 = (%shape_func_out_066,);
  %1524 = (%tensor_0333,);
  let %x540: () = vm.invoke_tvm_op(%1522, %1523, %1524) /* ty=() */;
  let %storage_0397: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][408]) /* ty=Storage[] */;
  let %tensor_0334: int64 = memory.alloc_tensor(%storage_0397, 0 /* ty=int64 */, meta[relay.Constant][565] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][408]) /* ty=int64 */;
  %1525 = fn (%p0333: int64, Primitive=1) -> int64 {
    multiply(%p0333, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1526 = (%tensor_0333,);
  %1527 = (%tensor_0334,);
  let %x541: () = vm.invoke_tvm_op(%1525, %1526, %1527) /* ty=() */;
  let %storage_0398: Storage[] = memory.alloc_storage(%tensor_0334, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][409]) /* ty=Storage[] */;
  let %out_063: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0398, 0 /* ty=int64 */, %shape_func_out_066, meta[relay.attrs.AllocTensorAttrs][409]) /* ty=Tensor[(?, ?), float32] */;
  %1528 = (%x527, %x539, %x533, meta[relay.Constant][563] /* ty=Tensor[(2), int32] */);
  %1529 = (%out_063,);
  let %x542: () = vm.invoke_tvm_op(%1519, %1528, %1529) /* ty=() */;
  let %x543: Tensor[(?, ?), float32] = %out_063;
  let %in_shape_058: Tensor[(2), int64] = vm.shape_of(%x537, meta[relay.attrs.ShapeOfAttrs][78]) /* ty=Tensor[(2), int64] */;
  let %in_shape_132: Tensor[(2), int64] = vm.shape_of(%x543, meta[relay.attrs.ShapeOfAttrs][79]) /* ty=Tensor[(2), int64] */;
  let %storage_0399: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][410]) /* ty=Storage[] */;
  let %tensor_0335: Tensor[(1), int64] = memory.alloc_tensor(%storage_0399, 0 /* ty=int64 */, meta[relay.Constant][566] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][410]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_067: Tensor[(1), int64] = %tensor_0335;
  %1532 = fn (%p0334: Tensor[(?, ?), float32], %p1139: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), float32] {
    %1530 = take(%p0334, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %1531 = take(%p1139, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    subtract(%1530, %1531) /* ty=Tensor[(?), float32] */
  };
  %1533 = (%in_shape_058, %in_shape_132);
  %1534 = (%shape_func_out_067,);
  let %shape_func67: () = vm.shape_func(%1532, %1533, %1534, meta[relay.attrs.ShapeFuncAttrs][67]) /* ty=() */;
  let %storage_0400: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][411]) /* ty=Storage[] */;
  let %tensor_0336: int64 = memory.alloc_tensor(%storage_0400, 0 /* ty=int64 */, meta[relay.Constant][567] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][411]) /* ty=int64 */;
  %1535 = fn (%p0335: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0335) /* ty=int64 */
  };
  %1536 = (%shape_func_out_067,);
  %1537 = (%tensor_0336,);
  let %x544: () = vm.invoke_tvm_op(%1535, %1536, %1537) /* ty=() */;
  let %storage_0401: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][412]) /* ty=Storage[] */;
  let %tensor_0337: int64 = memory.alloc_tensor(%storage_0401, 0 /* ty=int64 */, meta[relay.Constant][568] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][412]) /* ty=int64 */;
  %1538 = fn (%p0336: int64, Primitive=1) -> int64 {
    multiply(%p0336, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1539 = (%tensor_0336,);
  %1540 = (%tensor_0337,);
  let %x545: () = vm.invoke_tvm_op(%1538, %1539, %1540) /* ty=() */;
  let %storage_0402: Storage[] = memory.alloc_storage(%tensor_0337, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][413]) /* ty=Storage[] */;
  let %out_064: Tensor[(?), float32] = memory.alloc_tensor(%storage_0402, 0 /* ty=int64 */, %shape_func_out_067, meta[relay.attrs.AllocTensorAttrs][413]) /* ty=Tensor[(?), float32] */;
  %1541 = (%x537, %x543);
  %1542 = (%out_064,);
  let %x546: () = vm.invoke_tvm_op(%1532, %1541, %1542) /* ty=() */;
  let %x547: Tensor[(?), float32] = %out_064;
  let %storage_0403: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][414]) /* ty=Storage[] */;
  let %tensor_0338: Tensor[(1), int32] = memory.alloc_tensor(%storage_0403, 0 /* ty=int64 */, meta[relay.Constant][569] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][414]) /* ty=Tensor[(1), int32] */;
  %1543 = fn (%p0337: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
    shape_of(%p0337, dtype="int32") /* ty=Tensor[(1), int32] */
  };
  %1544 = (%x547,);
  %1545 = (%tensor_0338,);
  let %x548: () = vm.invoke_tvm_op(%1543, %1544, %1545) /* ty=() */;
  let %x549: Tensor[(1), int32] = %tensor_0338;
  let %storage_0404: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][415]) /* ty=Storage[] */;
  let %tensor_0339: Tensor[(1), int32] = memory.alloc_tensor(%storage_0404, 0 /* ty=int64 */, meta[relay.Constant][570] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][415]) /* ty=Tensor[(1), int32] */;
  %1548 = fn (%p0338: Tensor[(1), int32], %p1140: Tensor[(1), int32], %p2121: Tensor[(1), bool], Primitive=1) -> Tensor[(1), int32] {
    %1546 = cast_like(%p0338, %p1140) /* ty=Tensor[(1), int32] */;
    %1547 = add(%p1140, %1546) /* ty=Tensor[(1), int32] */;
    where(%p2121, %1547, %p1140) /* ty=Tensor[(1), int32] */
  };
  %1549 = (%x549, meta[relay.Constant][571] /* ty=Tensor[(1), int32] */, meta[relay.Constant][572] /* ty=Tensor[(1), bool] */);
  %1550 = (%tensor_0339,);
  let %x550: () = vm.invoke_tvm_op(%1548, %1549, %1550) /* ty=() */;
  let %x551: Tensor[(1), int32] = %tensor_0339;
  let %storage_0405: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][416]) /* ty=Storage[] */;
  let %tensor_0340: Tensor[(1), int64] = memory.alloc_tensor(%storage_0405, 0 /* ty=int64 */, meta[relay.Constant][573] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][416]) /* ty=Tensor[(1), int64] */;
  %1551 = fn (%p0339: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int64] {
    cast(%p0339, dtype="int64") /* ty=Tensor[(1), int64] */
  };
  %1552 = (%x549,);
  %1553 = (%tensor_0340,);
  let %x552: () = vm.invoke_tvm_op(%1551, %1552, %1553) /* ty=() */;
  let %x553: Tensor[(1), int64] = %tensor_0340;
  let %in_shape_059: Tensor[(1), int64] = vm.shape_of(%x547, meta[relay.attrs.ShapeOfAttrs][80]) /* ty=Tensor[(1), int64] */;
  let %in_shape_133: Tensor[(1), int32] = %x551;
  let %in_shape_219: Tensor[(1), int64] = %x553;
  let %storage_0406: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][417]) /* ty=Storage[] */;
  let %tensor_0341: Tensor[(1), int64] = memory.alloc_tensor(%storage_0406, 0 /* ty=int64 */, meta[relay.Constant][574] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][417]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_068: Tensor[(1), int64] = %tensor_0341;
  %1554 = fn (%p0340: Tensor[(?), float32], %p1141: Tensor[(1), int32], %p2122: Tensor[(1), int64], %p343: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0340, %p1141, %p2122, %p343, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %1555 = (%in_shape_059, %in_shape_133, %in_shape_219, meta[relay.Constant][575] /* ty=Tensor[(1), int32] */);
  %1556 = (%shape_func_out_068,);
  let %shape_func68: () = vm.shape_func(%1554, %1555, %1556, meta[relay.attrs.ShapeFuncAttrs][68]) /* ty=() */;
  let %storage_0407: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][418]) /* ty=Storage[] */;
  let %tensor_0342: int64 = memory.alloc_tensor(%storage_0407, 0 /* ty=int64 */, meta[relay.Constant][576] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][418]) /* ty=int64 */;
  %1557 = fn (%p0341: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0341) /* ty=int64 */
  };
  %1558 = (%shape_func_out_068,);
  %1559 = (%tensor_0342,);
  let %x554: () = vm.invoke_tvm_op(%1557, %1558, %1559) /* ty=() */;
  let %storage_0408: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][419]) /* ty=Storage[] */;
  let %tensor_0343: int64 = memory.alloc_tensor(%storage_0408, 0 /* ty=int64 */, meta[relay.Constant][577] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][419]) /* ty=int64 */;
  %1560 = fn (%p0342: int64, Primitive=1) -> int64 {
    multiply(%p0342, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1561 = (%tensor_0342,);
  %1562 = (%tensor_0343,);
  let %x555: () = vm.invoke_tvm_op(%1560, %1561, %1562) /* ty=() */;
  let %storage_0409: Storage[] = memory.alloc_storage(%tensor_0343, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][420]) /* ty=Storage[] */;
  let %out_065: Tensor[(?), float32] = memory.alloc_tensor(%storage_0409, 0 /* ty=int64 */, %shape_func_out_068, meta[relay.attrs.AllocTensorAttrs][420]) /* ty=Tensor[(?), float32] */;
  %1563 = (%x547, %x551, %x553, meta[relay.Constant][575] /* ty=Tensor[(1), int32] */);
  %1564 = (%out_065,);
  let %x556: () = vm.invoke_tvm_op(%1554, %1563, %1564) /* ty=() */;
  let %x557: Tensor[(?), float32] = %out_065;
  let %storage_0410: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][421]) /* ty=Storage[] */;
  let %tensor_0344: Tensor[(2), int32] = memory.alloc_tensor(%storage_0410, 0 /* ty=int64 */, meta[relay.Constant][578] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][421]) /* ty=Tensor[(2), int32] */;
  %1567 = fn (%p0343: Tensor[(2), int32], %p1142: Tensor[(2), int32], %p2123: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1565 = cast_like(%p0343, %p1142) /* ty=Tensor[(2), int32] */;
    %1566 = add(%p1142, %1565) /* ty=Tensor[(2), int32] */;
    where(%p2123, %1566, %p1142) /* ty=Tensor[(2), int32] */
  };
  %1568 = (%x529, meta[relay.Constant][579] /* ty=Tensor[(2), int32] */, meta[relay.Constant][580] /* ty=Tensor[(2), bool] */);
  %1569 = (%tensor_0344,);
  let %x558: () = vm.invoke_tvm_op(%1567, %1568, %1569) /* ty=() */;
  let %x559: Tensor[(2), int32] = %tensor_0344;
  let %in_shape_060: Tensor[(2), int64] = vm.shape_of(%x527, meta[relay.attrs.ShapeOfAttrs][81]) /* ty=Tensor[(2), int64] */;
  let %in_shape_134: Tensor[(2), int32] = %x559;
  let %in_shape_220: Tensor[(2), int64] = %x533;
  let %storage_0411: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][422]) /* ty=Storage[] */;
  let %tensor_0345: Tensor[(2), int64] = memory.alloc_tensor(%storage_0411, 0 /* ty=int64 */, meta[relay.Constant][581] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][422]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_069: Tensor[(2), int64] = %tensor_0345;
  %1570 = fn (%p0344: Tensor[(?, 4), float32], %p1143: Tensor[(2), int32], %p2124: Tensor[(2), int64], %p344: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0344, %p1143, %p2124, %p344, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1571 = (%in_shape_060, %in_shape_134, %in_shape_220, meta[relay.Constant][582] /* ty=Tensor[(2), int32] */);
  %1572 = (%shape_func_out_069,);
  let %shape_func69: () = vm.shape_func(%1570, %1571, %1572, meta[relay.attrs.ShapeFuncAttrs][69]) /* ty=() */;
  let %storage_0412: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][423]) /* ty=Storage[] */;
  let %tensor_0346: int64 = memory.alloc_tensor(%storage_0412, 0 /* ty=int64 */, meta[relay.Constant][583] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][423]) /* ty=int64 */;
  %1573 = fn (%p0345: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0345) /* ty=int64 */
  };
  %1574 = (%shape_func_out_069,);
  %1575 = (%tensor_0346,);
  let %x560: () = vm.invoke_tvm_op(%1573, %1574, %1575) /* ty=() */;
  let %storage_0413: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][424]) /* ty=Storage[] */;
  let %tensor_0347: int64 = memory.alloc_tensor(%storage_0413, 0 /* ty=int64 */, meta[relay.Constant][584] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][424]) /* ty=int64 */;
  %1576 = fn (%p0346: int64, Primitive=1) -> int64 {
    multiply(%p0346, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1577 = (%tensor_0346,);
  %1578 = (%tensor_0347,);
  let %x561: () = vm.invoke_tvm_op(%1576, %1577, %1578) /* ty=() */;
  let %storage_0414: Storage[] = memory.alloc_storage(%tensor_0347, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][425]) /* ty=Storage[] */;
  let %out_066: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0414, 0 /* ty=int64 */, %shape_func_out_069, meta[relay.attrs.AllocTensorAttrs][425]) /* ty=Tensor[(?, ?), float32] */;
  %1579 = (%x527, %x559, %x533, meta[relay.Constant][582] /* ty=Tensor[(2), int32] */);
  %1580 = (%out_066,);
  let %x562: () = vm.invoke_tvm_op(%1570, %1579, %1580) /* ty=() */;
  let %x563: Tensor[(?, ?), float32] = %out_066;
  let %in_shape_061: Tensor[(2), int64] = vm.shape_of(%x563, meta[relay.attrs.ShapeOfAttrs][82]) /* ty=Tensor[(2), int64] */;
  let %in_shape_135: Tensor[(1), int64] = vm.shape_of(%x547, meta[relay.attrs.ShapeOfAttrs][83]) /* ty=Tensor[(1), int64] */;
  let %storage_0415: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][426]) /* ty=Storage[] */;
  let %tensor_0348: Tensor[(1), int64] = memory.alloc_tensor(%storage_0415, 0 /* ty=int64 */, meta[relay.Constant][585] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][426]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_070: Tensor[(1), int64] = %tensor_0348;
  %1583 = fn (%p0347: Tensor[(?, ?), float32], %p1144: Tensor[(?), float32], Primitive=1) -> Tensor[(?), float32] {
    %1581 = take(%p0347, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %1582 = multiply(%p1144, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    add(%1581, %1582) /* ty=Tensor[(?), float32] */
  };
  %1584 = (%in_shape_061, %in_shape_135);
  %1585 = (%shape_func_out_070,);
  let %shape_func70: () = vm.shape_func(%1583, %1584, %1585, meta[relay.attrs.ShapeFuncAttrs][70]) /* ty=() */;
  let %storage_0416: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][427]) /* ty=Storage[] */;
  let %tensor_0349: int64 = memory.alloc_tensor(%storage_0416, 0 /* ty=int64 */, meta[relay.Constant][586] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][427]) /* ty=int64 */;
  %1586 = fn (%p0348: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0348) /* ty=int64 */
  };
  %1587 = (%shape_func_out_070,);
  %1588 = (%tensor_0349,);
  let %x564: () = vm.invoke_tvm_op(%1586, %1587, %1588) /* ty=() */;
  let %storage_0417: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][428]) /* ty=Storage[] */;
  let %tensor_0350: int64 = memory.alloc_tensor(%storage_0417, 0 /* ty=int64 */, meta[relay.Constant][587] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][428]) /* ty=int64 */;
  %1589 = fn (%p0349: int64, Primitive=1) -> int64 {
    multiply(%p0349, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1590 = (%tensor_0349,);
  %1591 = (%tensor_0350,);
  let %x565: () = vm.invoke_tvm_op(%1589, %1590, %1591) /* ty=() */;
  let %storage_0418: Storage[] = memory.alloc_storage(%tensor_0350, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][429]) /* ty=Storage[] */;
  let %out_067: Tensor[(?), float32] = memory.alloc_tensor(%storage_0418, 0 /* ty=int64 */, %shape_func_out_070, meta[relay.attrs.AllocTensorAttrs][429]) /* ty=Tensor[(?), float32] */;
  %1592 = (%x563, %x547);
  %1593 = (%out_067,);
  let %x566: () = vm.invoke_tvm_op(%1583, %1592, %1593) /* ty=() */;
  let %x567: Tensor[(?), float32] = %out_067;
  let %storage_0419: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][430]) /* ty=Storage[] */;
  let %tensor_0351: Tensor[(1), int32] = memory.alloc_tensor(%storage_0419, 0 /* ty=int64 */, meta[relay.Constant][588] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][430]) /* ty=Tensor[(1), int32] */;
  %1594 = fn (%p0350: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
    shape_of(%p0350, dtype="int32") /* ty=Tensor[(1), int32] */
  };
  %1595 = (%x567,);
  %1596 = (%tensor_0351,);
  let %x568: () = vm.invoke_tvm_op(%1594, %1595, %1596) /* ty=() */;
  let %x569: Tensor[(1), int32] = %tensor_0351;
  let %storage_0420: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][431]) /* ty=Storage[] */;
  let %tensor_0352: Tensor[(1), int32] = memory.alloc_tensor(%storage_0420, 0 /* ty=int64 */, meta[relay.Constant][589] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][431]) /* ty=Tensor[(1), int32] */;
  %1599 = fn (%p0351: Tensor[(1), int32], %p1145: Tensor[(1), int32], %p2125: Tensor[(1), bool], Primitive=1) -> Tensor[(1), int32] {
    %1597 = cast_like(%p0351, %p1145) /* ty=Tensor[(1), int32] */;
    %1598 = add(%p1145, %1597) /* ty=Tensor[(1), int32] */;
    where(%p2125, %1598, %p1145) /* ty=Tensor[(1), int32] */
  };
  %1600 = (%x569, meta[relay.Constant][590] /* ty=Tensor[(1), int32] */, meta[relay.Constant][591] /* ty=Tensor[(1), bool] */);
  %1601 = (%tensor_0352,);
  let %x570: () = vm.invoke_tvm_op(%1599, %1600, %1601) /* ty=() */;
  let %x571: Tensor[(1), int32] = %tensor_0352;
  let %storage_0421: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][432]) /* ty=Storage[] */;
  let %tensor_0353: Tensor[(1), int64] = memory.alloc_tensor(%storage_0421, 0 /* ty=int64 */, meta[relay.Constant][592] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][432]) /* ty=Tensor[(1), int64] */;
  %1602 = fn (%p0352: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int64] {
    cast(%p0352, dtype="int64") /* ty=Tensor[(1), int64] */
  };
  %1603 = (%x569,);
  %1604 = (%tensor_0353,);
  let %x572: () = vm.invoke_tvm_op(%1602, %1603, %1604) /* ty=() */;
  let %x573: Tensor[(1), int64] = %tensor_0353;
  let %in_shape_062: Tensor[(1), int64] = vm.shape_of(%x567, meta[relay.attrs.ShapeOfAttrs][84]) /* ty=Tensor[(1), int64] */;
  let %in_shape_136: Tensor[(1), int32] = %x571;
  let %in_shape_221: Tensor[(1), int64] = %x573;
  let %storage_0422: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][433]) /* ty=Storage[] */;
  let %tensor_0354: Tensor[(1), int64] = memory.alloc_tensor(%storage_0422, 0 /* ty=int64 */, meta[relay.Constant][593] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][433]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_071: Tensor[(1), int64] = %tensor_0354;
  %1605 = fn (%p0353: Tensor[(?), float32], %p1146: Tensor[(1), int32], %p2126: Tensor[(1), int64], %p345: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0353, %p1146, %p2126, %p345, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %1606 = (%in_shape_062, %in_shape_136, %in_shape_221, meta[relay.Constant][594] /* ty=Tensor[(1), int32] */);
  %1607 = (%shape_func_out_071,);
  let %shape_func71: () = vm.shape_func(%1605, %1606, %1607, meta[relay.attrs.ShapeFuncAttrs][71]) /* ty=() */;
  let %storage_0423: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][434]) /* ty=Storage[] */;
  let %tensor_0355: int64 = memory.alloc_tensor(%storage_0423, 0 /* ty=int64 */, meta[relay.Constant][595] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][434]) /* ty=int64 */;
  %1608 = fn (%p0354: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0354) /* ty=int64 */
  };
  %1609 = (%shape_func_out_071,);
  %1610 = (%tensor_0355,);
  let %x574: () = vm.invoke_tvm_op(%1608, %1609, %1610) /* ty=() */;
  let %storage_0424: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][435]) /* ty=Storage[] */;
  let %tensor_0356: int64 = memory.alloc_tensor(%storage_0424, 0 /* ty=int64 */, meta[relay.Constant][596] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][435]) /* ty=int64 */;
  %1611 = fn (%p0355: int64, Primitive=1) -> int64 {
    multiply(%p0355, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1612 = (%tensor_0355,);
  %1613 = (%tensor_0356,);
  let %x575: () = vm.invoke_tvm_op(%1611, %1612, %1613) /* ty=() */;
  let %storage_0425: Storage[] = memory.alloc_storage(%tensor_0356, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][436]) /* ty=Storage[] */;
  let %out_068: Tensor[(?), float32] = memory.alloc_tensor(%storage_0425, 0 /* ty=int64 */, %shape_func_out_071, meta[relay.attrs.AllocTensorAttrs][436]) /* ty=Tensor[(?), float32] */;
  %1614 = (%x567, %x571, %x573, meta[relay.Constant][594] /* ty=Tensor[(1), int32] */);
  %1615 = (%out_068,);
  let %x576: () = vm.invoke_tvm_op(%1605, %1614, %1615) /* ty=() */;
  let %x577: Tensor[(?), float32] = %out_068;
  let %storage_0426: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][437]) /* ty=Storage[] */;
  let %tensor_0357: Tensor[(2), int32] = memory.alloc_tensor(%storage_0426, 0 /* ty=int64 */, meta[relay.Constant][597] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][437]) /* ty=Tensor[(2), int32] */;
  %1618 = fn (%p0356: Tensor[(2), int32], %p1147: Tensor[(2), int32], %p2127: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1616 = cast_like(%p0356, %p1147) /* ty=Tensor[(2), int32] */;
    %1617 = add(%p1147, %1616) /* ty=Tensor[(2), int32] */;
    where(%p2127, %1617, %p1147) /* ty=Tensor[(2), int32] */
  };
  %1619 = (%x505, meta[relay.Constant][598] /* ty=Tensor[(2), int32] */, meta[relay.Constant][599] /* ty=Tensor[(2), bool] */);
  %1620 = (%tensor_0357,);
  let %x578: () = vm.invoke_tvm_op(%1618, %1619, %1620) /* ty=() */;
  let %x579: Tensor[(2), int32] = %tensor_0357;
  let %in_shape_063: Tensor[(2), int64] = vm.shape_of(%x503, meta[relay.attrs.ShapeOfAttrs][85]) /* ty=Tensor[(2), int64] */;
  let %in_shape_137: Tensor[(2), int32] = %x579;
  let %in_shape_222: Tensor[(2), int64] = %x509;
  let %storage_0427: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][438]) /* ty=Storage[] */;
  let %tensor_0358: Tensor[(2), int64] = memory.alloc_tensor(%storage_0427, 0 /* ty=int64 */, meta[relay.Constant][600] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][438]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_072: Tensor[(2), int64] = %tensor_0358;
  %1621 = fn (%p0357: Tensor[(?, ?), float32], %p1148: Tensor[(2), int32], %p2128: Tensor[(2), int64], %p346: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0357, %p1148, %p2128, %p346, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1622 = (%in_shape_063, %in_shape_137, %in_shape_222, meta[relay.Constant][601] /* ty=Tensor[(2), int32] */);
  %1623 = (%shape_func_out_072,);
  let %shape_func72: () = vm.shape_func(%1621, %1622, %1623, meta[relay.attrs.ShapeFuncAttrs][72]) /* ty=() */;
  let %storage_0428: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][439]) /* ty=Storage[] */;
  let %tensor_0359: int64 = memory.alloc_tensor(%storage_0428, 0 /* ty=int64 */, meta[relay.Constant][602] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][439]) /* ty=int64 */;
  %1624 = fn (%p0358: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0358) /* ty=int64 */
  };
  %1625 = (%shape_func_out_072,);
  %1626 = (%tensor_0359,);
  let %x580: () = vm.invoke_tvm_op(%1624, %1625, %1626) /* ty=() */;
  let %storage_0429: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][440]) /* ty=Storage[] */;
  let %tensor_0360: int64 = memory.alloc_tensor(%storage_0429, 0 /* ty=int64 */, meta[relay.Constant][603] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][440]) /* ty=int64 */;
  %1627 = fn (%p0359: int64, Primitive=1) -> int64 {
    multiply(%p0359, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1628 = (%tensor_0359,);
  %1629 = (%tensor_0360,);
  let %x581: () = vm.invoke_tvm_op(%1627, %1628, %1629) /* ty=() */;
  let %storage_0430: Storage[] = memory.alloc_storage(%tensor_0360, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][441]) /* ty=Storage[] */;
  let %out_069: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0430, 0 /* ty=int64 */, %shape_func_out_072, meta[relay.attrs.AllocTensorAttrs][441]) /* ty=Tensor[(?, ?), float32] */;
  %1630 = (%x503, %x579, %x509, meta[relay.Constant][601] /* ty=Tensor[(2), int32] */);
  %1631 = (%out_069,);
  let %x582: () = vm.invoke_tvm_op(%1621, %1630, %1631) /* ty=() */;
  let %x583: Tensor[(?, ?), float32] = %out_069;
  let %storage_0431: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][442]) /* ty=Storage[] */;
  let %tensor_0361: Tensor[(2), int32] = memory.alloc_tensor(%storage_0431, 0 /* ty=int64 */, meta[relay.Constant][604] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][442]) /* ty=Tensor[(2), int32] */;
  %1632 = fn (%p0360: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0360, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1633 = (%x583,);
  %1634 = (%tensor_0361,);
  let %x584: () = vm.invoke_tvm_op(%1632, %1633, %1634) /* ty=() */;
  let %x585: Tensor[(2), int32] = %tensor_0361;
  let %storage_0432: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][443]) /* ty=Storage[] */;
  let %tensor_0362: Tensor[(2), int32] = memory.alloc_tensor(%storage_0432, 0 /* ty=int64 */, meta[relay.Constant][605] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][443]) /* ty=Tensor[(2), int32] */;
  %1637 = fn (%p0361: Tensor[(2), int32], %p1149: Tensor[(2), int32], %p2129: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1635 = cast_like(%p0361, %p1149) /* ty=Tensor[(2), int32] */;
    %1636 = add(%p1149, %1635) /* ty=Tensor[(2), int32] */;
    where(%p2129, %1636, %p1149) /* ty=Tensor[(2), int32] */
  };
  %1638 = (%x585, meta[relay.Constant][606] /* ty=Tensor[(2), int32] */, meta[relay.Constant][607] /* ty=Tensor[(2), bool] */);
  %1639 = (%tensor_0362,);
  let %x586: () = vm.invoke_tvm_op(%1637, %1638, %1639) /* ty=() */;
  let %x587: Tensor[(2), int32] = %tensor_0362;
  let %storage_0433: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][444]) /* ty=Storage[] */;
  let %tensor_0363: Tensor[(2), int64] = memory.alloc_tensor(%storage_0433, 0 /* ty=int64 */, meta[relay.Constant][608] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][444]) /* ty=Tensor[(2), int64] */;
  %1640 = fn (%p0362: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0362, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1641 = (%x585,);
  %1642 = (%tensor_0363,);
  let %x588: () = vm.invoke_tvm_op(%1640, %1641, %1642) /* ty=() */;
  let %x589: Tensor[(2), int64] = %tensor_0363;
  let %in_shape_064: Tensor[(2), int64] = vm.shape_of(%x583, meta[relay.attrs.ShapeOfAttrs][86]) /* ty=Tensor[(2), int64] */;
  let %in_shape_138: Tensor[(2), int32] = %x587;
  let %in_shape_223: Tensor[(2), int64] = %x589;
  let %storage_0434: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][445]) /* ty=Storage[] */;
  let %tensor_0364: Tensor[(2), int64] = memory.alloc_tensor(%storage_0434, 0 /* ty=int64 */, meta[relay.Constant][609] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][445]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_073: Tensor[(2), int64] = %tensor_0364;
  %1643 = fn (%p0363: Tensor[(?, ?), float32], %p1150: Tensor[(2), int32], %p2130: Tensor[(2), int64], %p347: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0363, %p1150, %p2130, %p347, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1644 = (%in_shape_064, %in_shape_138, %in_shape_223, meta[relay.Constant][610] /* ty=Tensor[(2), int32] */);
  %1645 = (%shape_func_out_073,);
  let %shape_func73: () = vm.shape_func(%1643, %1644, %1645, meta[relay.attrs.ShapeFuncAttrs][73]) /* ty=() */;
  let %storage_0435: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][446]) /* ty=Storage[] */;
  let %tensor_0365: int64 = memory.alloc_tensor(%storage_0435, 0 /* ty=int64 */, meta[relay.Constant][611] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][446]) /* ty=int64 */;
  %1646 = fn (%p0364: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0364) /* ty=int64 */
  };
  %1647 = (%shape_func_out_073,);
  %1648 = (%tensor_0365,);
  let %x590: () = vm.invoke_tvm_op(%1646, %1647, %1648) /* ty=() */;
  let %storage_0436: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][447]) /* ty=Storage[] */;
  let %tensor_0366: int64 = memory.alloc_tensor(%storage_0436, 0 /* ty=int64 */, meta[relay.Constant][612] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][447]) /* ty=int64 */;
  %1649 = fn (%p0365: int64, Primitive=1) -> int64 {
    multiply(%p0365, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1650 = (%tensor_0365,);
  %1651 = (%tensor_0366,);
  let %x591: () = vm.invoke_tvm_op(%1649, %1650, %1651) /* ty=() */;
  let %storage_0437: Storage[] = memory.alloc_storage(%tensor_0366, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][448]) /* ty=Storage[] */;
  let %out_070: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0437, 0 /* ty=int64 */, %shape_func_out_073, meta[relay.attrs.AllocTensorAttrs][448]) /* ty=Tensor[(?, ?), float32] */;
  %1652 = (%x583, %x587, %x589, meta[relay.Constant][610] /* ty=Tensor[(2), int32] */);
  %1653 = (%out_070,);
  let %x592: () = vm.invoke_tvm_op(%1643, %1652, %1653) /* ty=() */;
  let %x593: Tensor[(?, ?), float32] = %out_070;
  let %storage_0438: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][449]) /* ty=Storage[] */;
  let %tensor_0367: Tensor[(1), int32] = memory.alloc_tensor(%storage_0438, 0 /* ty=int64 */, meta[relay.Constant][613] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][449]) /* ty=Tensor[(1), int32] */;
  %1656 = fn (%p0366: Tensor[(1), int32], %p1151: Tensor[(1), int32], %p2131: Tensor[(1), bool], Primitive=1) -> Tensor[(1), int32] {
    %1654 = cast_like(%p0366, %p1151) /* ty=Tensor[(1), int32] */;
    %1655 = add(%p1151, %1654) /* ty=Tensor[(1), int32] */;
    where(%p2131, %1655, %p1151) /* ty=Tensor[(1), int32] */
  };
  %1657 = (%x549, meta[relay.Constant][614] /* ty=Tensor[(1), int32] */, meta[relay.Constant][615] /* ty=Tensor[(1), bool] */);
  %1658 = (%tensor_0367,);
  let %x594: () = vm.invoke_tvm_op(%1656, %1657, %1658) /* ty=() */;
  let %x595: Tensor[(1), int32] = %tensor_0367;
  let %in_shape_065: Tensor[(1), int64] = vm.shape_of(%x547, meta[relay.attrs.ShapeOfAttrs][87]) /* ty=Tensor[(1), int64] */;
  let %in_shape_139: Tensor[(1), int32] = %x595;
  let %in_shape_224: Tensor[(1), int64] = %x553;
  let %storage_0439: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][450]) /* ty=Storage[] */;
  let %tensor_0368: Tensor[(1), int64] = memory.alloc_tensor(%storage_0439, 0 /* ty=int64 */, meta[relay.Constant][616] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][450]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_074: Tensor[(1), int64] = %tensor_0368;
  %1659 = fn (%p0367: Tensor[(?), float32], %p1152: Tensor[(1), int32], %p2132: Tensor[(1), int64], %p348: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0367, %p1152, %p2132, %p348, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %1660 = (%in_shape_065, %in_shape_139, %in_shape_224, meta[relay.Constant][617] /* ty=Tensor[(1), int32] */);
  %1661 = (%shape_func_out_074,);
  let %shape_func74: () = vm.shape_func(%1659, %1660, %1661, meta[relay.attrs.ShapeFuncAttrs][74]) /* ty=() */;
  let %storage_0440: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][451]) /* ty=Storage[] */;
  let %tensor_0369: int64 = memory.alloc_tensor(%storage_0440, 0 /* ty=int64 */, meta[relay.Constant][618] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][451]) /* ty=int64 */;
  %1662 = fn (%p0368: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0368) /* ty=int64 */
  };
  %1663 = (%shape_func_out_074,);
  %1664 = (%tensor_0369,);
  let %x596: () = vm.invoke_tvm_op(%1662, %1663, %1664) /* ty=() */;
  let %storage_0441: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][452]) /* ty=Storage[] */;
  let %tensor_0370: int64 = memory.alloc_tensor(%storage_0441, 0 /* ty=int64 */, meta[relay.Constant][619] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][452]) /* ty=int64 */;
  %1665 = fn (%p0369: int64, Primitive=1) -> int64 {
    multiply(%p0369, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1666 = (%tensor_0369,);
  %1667 = (%tensor_0370,);
  let %x597: () = vm.invoke_tvm_op(%1665, %1666, %1667) /* ty=() */;
  let %storage_0442: Storage[] = memory.alloc_storage(%tensor_0370, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][453]) /* ty=Storage[] */;
  let %out_071: Tensor[(?), float32] = memory.alloc_tensor(%storage_0442, 0 /* ty=int64 */, %shape_func_out_074, meta[relay.attrs.AllocTensorAttrs][453]) /* ty=Tensor[(?), float32] */;
  %1668 = (%x547, %x595, %x553, meta[relay.Constant][617] /* ty=Tensor[(1), int32] */);
  %1669 = (%out_071,);
  let %x598: () = vm.invoke_tvm_op(%1659, %1668, %1669) /* ty=() */;
  let %x599: Tensor[(?), float32] = %out_071;
  let %storage_0443: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][454]) /* ty=Storage[] */;
  let %tensor_0371: Tensor[(2), int32] = memory.alloc_tensor(%storage_0443, 0 /* ty=int64 */, meta[relay.Constant][620] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][454]) /* ty=Tensor[(2), int32] */;
  %1672 = fn (%p0370: Tensor[(2), int32], %p1153: Tensor[(2), int32], %p2133: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1670 = cast_like(%p0370, %p1153) /* ty=Tensor[(2), int32] */;
    %1671 = add(%p1153, %1670) /* ty=Tensor[(2), int32] */;
    where(%p2133, %1671, %p1153) /* ty=Tensor[(2), int32] */
  };
  %1673 = (%x505, meta[relay.Constant][621] /* ty=Tensor[(2), int32] */, meta[relay.Constant][622] /* ty=Tensor[(2), bool] */);
  %1674 = (%tensor_0371,);
  let %x600: () = vm.invoke_tvm_op(%1672, %1673, %1674) /* ty=() */;
  let %x601: Tensor[(2), int32] = %tensor_0371;
  let %in_shape_066: Tensor[(2), int64] = vm.shape_of(%x503, meta[relay.attrs.ShapeOfAttrs][88]) /* ty=Tensor[(2), int64] */;
  let %in_shape_140: Tensor[(2), int32] = %x601;
  let %in_shape_225: Tensor[(2), int64] = %x509;
  let %storage_0444: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][455]) /* ty=Storage[] */;
  let %tensor_0372: Tensor[(2), int64] = memory.alloc_tensor(%storage_0444, 0 /* ty=int64 */, meta[relay.Constant][623] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][455]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_075: Tensor[(2), int64] = %tensor_0372;
  %1675 = fn (%p0371: Tensor[(?, ?), float32], %p1154: Tensor[(2), int32], %p2134: Tensor[(2), int64], %p349: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0371, %p1154, %p2134, %p349, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1676 = (%in_shape_066, %in_shape_140, %in_shape_225, meta[relay.Constant][624] /* ty=Tensor[(2), int32] */);
  %1677 = (%shape_func_out_075,);
  let %shape_func75: () = vm.shape_func(%1675, %1676, %1677, meta[relay.attrs.ShapeFuncAttrs][75]) /* ty=() */;
  let %storage_0445: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][456]) /* ty=Storage[] */;
  let %tensor_0373: int64 = memory.alloc_tensor(%storage_0445, 0 /* ty=int64 */, meta[relay.Constant][625] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][456]) /* ty=int64 */;
  %1678 = fn (%p0372: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0372) /* ty=int64 */
  };
  %1679 = (%shape_func_out_075,);
  %1680 = (%tensor_0373,);
  let %x602: () = vm.invoke_tvm_op(%1678, %1679, %1680) /* ty=() */;
  let %storage_0446: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][457]) /* ty=Storage[] */;
  let %tensor_0374: int64 = memory.alloc_tensor(%storage_0446, 0 /* ty=int64 */, meta[relay.Constant][626] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][457]) /* ty=int64 */;
  %1681 = fn (%p0373: int64, Primitive=1) -> int64 {
    multiply(%p0373, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1682 = (%tensor_0373,);
  %1683 = (%tensor_0374,);
  let %x603: () = vm.invoke_tvm_op(%1681, %1682, %1683) /* ty=() */;
  let %storage_0447: Storage[] = memory.alloc_storage(%tensor_0374, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][458]) /* ty=Storage[] */;
  let %out_072: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0447, 0 /* ty=int64 */, %shape_func_out_075, meta[relay.attrs.AllocTensorAttrs][458]) /* ty=Tensor[(?, ?), float32] */;
  %1684 = (%x503, %x601, %x509, meta[relay.Constant][624] /* ty=Tensor[(2), int32] */);
  %1685 = (%out_072,);
  let %x604: () = vm.invoke_tvm_op(%1675, %1684, %1685) /* ty=() */;
  let %x605: Tensor[(?, ?), float32] = %out_072;
  let %storage_0448: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][459]) /* ty=Storage[] */;
  let %tensor_0375: Tensor[(2), int32] = memory.alloc_tensor(%storage_0448, 0 /* ty=int64 */, meta[relay.Constant][627] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][459]) /* ty=Tensor[(2), int32] */;
  %1686 = fn (%p0374: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0374, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1687 = (%x605,);
  %1688 = (%tensor_0375,);
  let %x606: () = vm.invoke_tvm_op(%1686, %1687, %1688) /* ty=() */;
  let %x607: Tensor[(2), int32] = %tensor_0375;
  let %storage_0449: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][460]) /* ty=Storage[] */;
  let %tensor_0376: Tensor[(2), int32] = memory.alloc_tensor(%storage_0449, 0 /* ty=int64 */, meta[relay.Constant][628] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][460]) /* ty=Tensor[(2), int32] */;
  %1691 = fn (%p0375: Tensor[(2), int32], %p1155: Tensor[(2), int32], %p2135: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1689 = cast_like(%p0375, %p1155) /* ty=Tensor[(2), int32] */;
    %1690 = add(%p1155, %1689) /* ty=Tensor[(2), int32] */;
    where(%p2135, %1690, %p1155) /* ty=Tensor[(2), int32] */
  };
  %1692 = (%x607, meta[relay.Constant][629] /* ty=Tensor[(2), int32] */, meta[relay.Constant][630] /* ty=Tensor[(2), bool] */);
  %1693 = (%tensor_0376,);
  let %x608: () = vm.invoke_tvm_op(%1691, %1692, %1693) /* ty=() */;
  let %x609: Tensor[(2), int32] = %tensor_0376;
  let %storage_0450: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][461]) /* ty=Storage[] */;
  let %tensor_0377: Tensor[(2), int64] = memory.alloc_tensor(%storage_0450, 0 /* ty=int64 */, meta[relay.Constant][631] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][461]) /* ty=Tensor[(2), int64] */;
  %1694 = fn (%p0376: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0376, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1695 = (%x607,);
  %1696 = (%tensor_0377,);
  let %x610: () = vm.invoke_tvm_op(%1694, %1695, %1696) /* ty=() */;
  let %x611: Tensor[(2), int64] = %tensor_0377;
  let %in_shape_067: Tensor[(2), int64] = vm.shape_of(%x605, meta[relay.attrs.ShapeOfAttrs][89]) /* ty=Tensor[(2), int64] */;
  let %in_shape_141: Tensor[(2), int32] = %x609;
  let %in_shape_226: Tensor[(2), int64] = %x611;
  let %storage_0451: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][462]) /* ty=Storage[] */;
  let %tensor_0378: Tensor[(2), int64] = memory.alloc_tensor(%storage_0451, 0 /* ty=int64 */, meta[relay.Constant][632] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][462]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_076: Tensor[(2), int64] = %tensor_0378;
  %1697 = fn (%p0377: Tensor[(?, ?), float32], %p1156: Tensor[(2), int32], %p2136: Tensor[(2), int64], %p350: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0377, %p1156, %p2136, %p350, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1698 = (%in_shape_067, %in_shape_141, %in_shape_226, meta[relay.Constant][633] /* ty=Tensor[(2), int32] */);
  %1699 = (%shape_func_out_076,);
  let %shape_func76: () = vm.shape_func(%1697, %1698, %1699, meta[relay.attrs.ShapeFuncAttrs][76]) /* ty=() */;
  let %storage_0452: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][463]) /* ty=Storage[] */;
  let %tensor_0379: int64 = memory.alloc_tensor(%storage_0452, 0 /* ty=int64 */, meta[relay.Constant][634] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][463]) /* ty=int64 */;
  %1700 = fn (%p0378: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0378) /* ty=int64 */
  };
  %1701 = (%shape_func_out_076,);
  %1702 = (%tensor_0379,);
  let %x612: () = vm.invoke_tvm_op(%1700, %1701, %1702) /* ty=() */;
  let %storage_0453: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][464]) /* ty=Storage[] */;
  let %tensor_0380: int64 = memory.alloc_tensor(%storage_0453, 0 /* ty=int64 */, meta[relay.Constant][635] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][464]) /* ty=int64 */;
  %1703 = fn (%p0379: int64, Primitive=1) -> int64 {
    multiply(%p0379, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1704 = (%tensor_0379,);
  %1705 = (%tensor_0380,);
  let %x613: () = vm.invoke_tvm_op(%1703, %1704, %1705) /* ty=() */;
  let %storage_0454: Storage[] = memory.alloc_storage(%tensor_0380, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][465]) /* ty=Storage[] */;
  let %out_073: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0454, 0 /* ty=int64 */, %shape_func_out_076, meta[relay.attrs.AllocTensorAttrs][465]) /* ty=Tensor[(?, ?), float32] */;
  %1706 = (%x605, %x609, %x611, meta[relay.Constant][633] /* ty=Tensor[(2), int32] */);
  %1707 = (%out_073,);
  let %x614: () = vm.invoke_tvm_op(%1697, %1706, %1707) /* ty=() */;
  let %x615: Tensor[(?, ?), float32] = %out_073;
  let %storage_0455: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][466]) /* ty=Storage[] */;
  let %tensor_0381: Tensor[(2), int32] = memory.alloc_tensor(%storage_0455, 0 /* ty=int64 */, meta[relay.Constant][636] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][466]) /* ty=Tensor[(2), int32] */;
  %1710 = fn (%p0380: Tensor[(2), int32], %p1157: Tensor[(2), int32], %p2137: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1708 = cast_like(%p0380, %p1157) /* ty=Tensor[(2), int32] */;
    %1709 = add(%p1157, %1708) /* ty=Tensor[(2), int32] */;
    where(%p2137, %1709, %p1157) /* ty=Tensor[(2), int32] */
  };
  %1711 = (%x529, meta[relay.Constant][637] /* ty=Tensor[(2), int32] */, meta[relay.Constant][638] /* ty=Tensor[(2), bool] */);
  %1712 = (%tensor_0381,);
  let %x616: () = vm.invoke_tvm_op(%1710, %1711, %1712) /* ty=() */;
  let %x617: Tensor[(2), int32] = %tensor_0381;
  let %in_shape_068: Tensor[(2), int64] = vm.shape_of(%x527, meta[relay.attrs.ShapeOfAttrs][90]) /* ty=Tensor[(2), int64] */;
  let %in_shape_142: Tensor[(2), int32] = %x617;
  let %in_shape_227: Tensor[(2), int64] = %x533;
  let %storage_0456: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][467]) /* ty=Storage[] */;
  let %tensor_0382: Tensor[(2), int64] = memory.alloc_tensor(%storage_0456, 0 /* ty=int64 */, meta[relay.Constant][639] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][467]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_077: Tensor[(2), int64] = %tensor_0382;
  %1713 = fn (%p0381: Tensor[(?, 4), float32], %p1158: Tensor[(2), int32], %p2138: Tensor[(2), int64], %p351: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0381, %p1158, %p2138, %p351, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1714 = (%in_shape_068, %in_shape_142, %in_shape_227, meta[relay.Constant][640] /* ty=Tensor[(2), int32] */);
  %1715 = (%shape_func_out_077,);
  let %shape_func77: () = vm.shape_func(%1713, %1714, %1715, meta[relay.attrs.ShapeFuncAttrs][77]) /* ty=() */;
  let %storage_0457: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][468]) /* ty=Storage[] */;
  let %tensor_0383: int64 = memory.alloc_tensor(%storage_0457, 0 /* ty=int64 */, meta[relay.Constant][641] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][468]) /* ty=int64 */;
  %1716 = fn (%p0382: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0382) /* ty=int64 */
  };
  %1717 = (%shape_func_out_077,);
  %1718 = (%tensor_0383,);
  let %x618: () = vm.invoke_tvm_op(%1716, %1717, %1718) /* ty=() */;
  let %storage_0458: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][469]) /* ty=Storage[] */;
  let %tensor_0384: int64 = memory.alloc_tensor(%storage_0458, 0 /* ty=int64 */, meta[relay.Constant][642] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][469]) /* ty=int64 */;
  %1719 = fn (%p0383: int64, Primitive=1) -> int64 {
    multiply(%p0383, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1720 = (%tensor_0383,);
  %1721 = (%tensor_0384,);
  let %x619: () = vm.invoke_tvm_op(%1719, %1720, %1721) /* ty=() */;
  let %storage_0459: Storage[] = memory.alloc_storage(%tensor_0384, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][470]) /* ty=Storage[] */;
  let %out_074: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0459, 0 /* ty=int64 */, %shape_func_out_077, meta[relay.attrs.AllocTensorAttrs][470]) /* ty=Tensor[(?, ?), float32] */;
  %1722 = (%x527, %x617, %x533, meta[relay.Constant][640] /* ty=Tensor[(2), int32] */);
  %1723 = (%out_074,);
  let %x620: () = vm.invoke_tvm_op(%1713, %1722, %1723) /* ty=() */;
  let %x621: Tensor[(?, ?), float32] = %out_074;
  let %storage_0460: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][471]) /* ty=Storage[] */;
  let %tensor_0385: Tensor[(2), int32] = memory.alloc_tensor(%storage_0460, 0 /* ty=int64 */, meta[relay.Constant][643] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][471]) /* ty=Tensor[(2), int32] */;
  %1726 = fn (%p0384: Tensor[(2), int32], %p1159: Tensor[(2), int32], %p2139: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1724 = cast_like(%p0384, %p1159) /* ty=Tensor[(2), int32] */;
    %1725 = add(%p1159, %1724) /* ty=Tensor[(2), int32] */;
    where(%p2139, %1725, %p1159) /* ty=Tensor[(2), int32] */
  };
  %1727 = (%x529, meta[relay.Constant][644] /* ty=Tensor[(2), int32] */, meta[relay.Constant][645] /* ty=Tensor[(2), bool] */);
  %1728 = (%tensor_0385,);
  let %x622: () = vm.invoke_tvm_op(%1726, %1727, %1728) /* ty=() */;
  let %x623: Tensor[(2), int32] = %tensor_0385;
  let %in_shape_069: Tensor[(2), int64] = vm.shape_of(%x527, meta[relay.attrs.ShapeOfAttrs][91]) /* ty=Tensor[(2), int64] */;
  let %in_shape_143: Tensor[(2), int32] = %x623;
  let %in_shape_228: Tensor[(2), int64] = %x533;
  let %storage_0461: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][472]) /* ty=Storage[] */;
  let %tensor_0386: Tensor[(2), int64] = memory.alloc_tensor(%storage_0461, 0 /* ty=int64 */, meta[relay.Constant][646] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][472]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_078: Tensor[(2), int64] = %tensor_0386;
  %1729 = fn (%p0385: Tensor[(?, 4), float32], %p1160: Tensor[(2), int32], %p2140: Tensor[(2), int64], %p352: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0385, %p1160, %p2140, %p352, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1730 = (%in_shape_069, %in_shape_143, %in_shape_228, meta[relay.Constant][647] /* ty=Tensor[(2), int32] */);
  %1731 = (%shape_func_out_078,);
  let %shape_func78: () = vm.shape_func(%1729, %1730, %1731, meta[relay.attrs.ShapeFuncAttrs][78]) /* ty=() */;
  let %storage_0462: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][473]) /* ty=Storage[] */;
  let %tensor_0387: int64 = memory.alloc_tensor(%storage_0462, 0 /* ty=int64 */, meta[relay.Constant][648] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][473]) /* ty=int64 */;
  %1732 = fn (%p0386: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0386) /* ty=int64 */
  };
  %1733 = (%shape_func_out_078,);
  %1734 = (%tensor_0387,);
  let %x624: () = vm.invoke_tvm_op(%1732, %1733, %1734) /* ty=() */;
  let %storage_0463: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][474]) /* ty=Storage[] */;
  let %tensor_0388: int64 = memory.alloc_tensor(%storage_0463, 0 /* ty=int64 */, meta[relay.Constant][649] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][474]) /* ty=int64 */;
  %1735 = fn (%p0387: int64, Primitive=1) -> int64 {
    multiply(%p0387, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1736 = (%tensor_0387,);
  %1737 = (%tensor_0388,);
  let %x625: () = vm.invoke_tvm_op(%1735, %1736, %1737) /* ty=() */;
  let %storage_0464: Storage[] = memory.alloc_storage(%tensor_0388, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][475]) /* ty=Storage[] */;
  let %out_075: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0464, 0 /* ty=int64 */, %shape_func_out_078, meta[relay.attrs.AllocTensorAttrs][475]) /* ty=Tensor[(?, ?), float32] */;
  %1738 = (%x527, %x623, %x533, meta[relay.Constant][647] /* ty=Tensor[(2), int32] */);
  %1739 = (%out_075,);
  let %x626: () = vm.invoke_tvm_op(%1729, %1738, %1739) /* ty=() */;
  let %x627: Tensor[(?, ?), float32] = %out_075;
  let %in_shape_070: Tensor[(2), int64] = vm.shape_of(%x621, meta[relay.attrs.ShapeOfAttrs][92]) /* ty=Tensor[(2), int64] */;
  let %in_shape_144: Tensor[(2), int64] = vm.shape_of(%x627, meta[relay.attrs.ShapeOfAttrs][93]) /* ty=Tensor[(2), int64] */;
  let %storage_0465: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][476]) /* ty=Storage[] */;
  let %tensor_0389: Tensor[(1), int64] = memory.alloc_tensor(%storage_0465, 0 /* ty=int64 */, meta[relay.Constant][650] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][476]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_079: Tensor[(1), int64] = %tensor_0389;
  %1742 = fn (%p0388: Tensor[(?, ?), float32], %p1161: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), float32] {
    %1740 = take(%p0388, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %1741 = take(%p1161, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    subtract(%1740, %1741) /* ty=Tensor[(?), float32] */
  };
  %1743 = (%in_shape_070, %in_shape_144);
  %1744 = (%shape_func_out_079,);
  let %shape_func79: () = vm.shape_func(%1742, %1743, %1744, meta[relay.attrs.ShapeFuncAttrs][79]) /* ty=() */;
  let %storage_0466: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][477]) /* ty=Storage[] */;
  let %tensor_0390: int64 = memory.alloc_tensor(%storage_0466, 0 /* ty=int64 */, meta[relay.Constant][651] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][477]) /* ty=int64 */;
  %1745 = fn (%p0389: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0389) /* ty=int64 */
  };
  %1746 = (%shape_func_out_079,);
  %1747 = (%tensor_0390,);
  let %x628: () = vm.invoke_tvm_op(%1745, %1746, %1747) /* ty=() */;
  let %storage_0467: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][478]) /* ty=Storage[] */;
  let %tensor_0391: int64 = memory.alloc_tensor(%storage_0467, 0 /* ty=int64 */, meta[relay.Constant][652] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][478]) /* ty=int64 */;
  %1748 = fn (%p0390: int64, Primitive=1) -> int64 {
    multiply(%p0390, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1749 = (%tensor_0390,);
  %1750 = (%tensor_0391,);
  let %x629: () = vm.invoke_tvm_op(%1748, %1749, %1750) /* ty=() */;
  let %storage_0468: Storage[] = memory.alloc_storage(%tensor_0391, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][479]) /* ty=Storage[] */;
  let %out_076: Tensor[(?), float32] = memory.alloc_tensor(%storage_0468, 0 /* ty=int64 */, %shape_func_out_079, meta[relay.attrs.AllocTensorAttrs][479]) /* ty=Tensor[(?), float32] */;
  %1751 = (%x621, %x627);
  %1752 = (%out_076,);
  let %x630: () = vm.invoke_tvm_op(%1742, %1751, %1752) /* ty=() */;
  let %x631: Tensor[(?), float32] = %out_076;
  let %storage_0469: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][480]) /* ty=Storage[] */;
  let %tensor_0392: Tensor[(1), int32] = memory.alloc_tensor(%storage_0469, 0 /* ty=int64 */, meta[relay.Constant][653] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][480]) /* ty=Tensor[(1), int32] */;
  %1753 = fn (%p0391: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
    shape_of(%p0391, dtype="int32") /* ty=Tensor[(1), int32] */
  };
  %1754 = (%x631,);
  %1755 = (%tensor_0392,);
  let %x632: () = vm.invoke_tvm_op(%1753, %1754, %1755) /* ty=() */;
  let %x633: Tensor[(1), int32] = %tensor_0392;
  let %storage_0470: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][481]) /* ty=Storage[] */;
  let %tensor_0393: Tensor[(1), int32] = memory.alloc_tensor(%storage_0470, 0 /* ty=int64 */, meta[relay.Constant][654] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][481]) /* ty=Tensor[(1), int32] */;
  %1758 = fn (%p0392: Tensor[(1), int32], %p1162: Tensor[(1), int32], %p2141: Tensor[(1), bool], Primitive=1) -> Tensor[(1), int32] {
    %1756 = cast_like(%p0392, %p1162) /* ty=Tensor[(1), int32] */;
    %1757 = add(%p1162, %1756) /* ty=Tensor[(1), int32] */;
    where(%p2141, %1757, %p1162) /* ty=Tensor[(1), int32] */
  };
  %1759 = (%x633, meta[relay.Constant][655] /* ty=Tensor[(1), int32] */, meta[relay.Constant][656] /* ty=Tensor[(1), bool] */);
  %1760 = (%tensor_0393,);
  let %x634: () = vm.invoke_tvm_op(%1758, %1759, %1760) /* ty=() */;
  let %x635: Tensor[(1), int32] = %tensor_0393;
  let %storage_0471: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][482]) /* ty=Storage[] */;
  let %tensor_0394: Tensor[(1), int64] = memory.alloc_tensor(%storage_0471, 0 /* ty=int64 */, meta[relay.Constant][657] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][482]) /* ty=Tensor[(1), int64] */;
  %1761 = fn (%p0393: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int64] {
    cast(%p0393, dtype="int64") /* ty=Tensor[(1), int64] */
  };
  %1762 = (%x633,);
  %1763 = (%tensor_0394,);
  let %x636: () = vm.invoke_tvm_op(%1761, %1762, %1763) /* ty=() */;
  let %x637: Tensor[(1), int64] = %tensor_0394;
  let %in_shape_071: Tensor[(1), int64] = vm.shape_of(%x631, meta[relay.attrs.ShapeOfAttrs][94]) /* ty=Tensor[(1), int64] */;
  let %in_shape_145: Tensor[(1), int32] = %x635;
  let %in_shape_229: Tensor[(1), int64] = %x637;
  let %storage_0472: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][483]) /* ty=Storage[] */;
  let %tensor_0395: Tensor[(1), int64] = memory.alloc_tensor(%storage_0472, 0 /* ty=int64 */, meta[relay.Constant][658] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][483]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_080: Tensor[(1), int64] = %tensor_0395;
  %1764 = fn (%p0394: Tensor[(?), float32], %p1163: Tensor[(1), int32], %p2142: Tensor[(1), int64], %p353: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0394, %p1163, %p2142, %p353, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %1765 = (%in_shape_071, %in_shape_145, %in_shape_229, meta[relay.Constant][659] /* ty=Tensor[(1), int32] */);
  %1766 = (%shape_func_out_080,);
  let %shape_func80: () = vm.shape_func(%1764, %1765, %1766, meta[relay.attrs.ShapeFuncAttrs][80]) /* ty=() */;
  let %storage_0473: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][484]) /* ty=Storage[] */;
  let %tensor_0396: int64 = memory.alloc_tensor(%storage_0473, 0 /* ty=int64 */, meta[relay.Constant][660] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][484]) /* ty=int64 */;
  %1767 = fn (%p0395: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0395) /* ty=int64 */
  };
  %1768 = (%shape_func_out_080,);
  %1769 = (%tensor_0396,);
  let %x638: () = vm.invoke_tvm_op(%1767, %1768, %1769) /* ty=() */;
  let %storage_0474: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][485]) /* ty=Storage[] */;
  let %tensor_0397: int64 = memory.alloc_tensor(%storage_0474, 0 /* ty=int64 */, meta[relay.Constant][661] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][485]) /* ty=int64 */;
  %1770 = fn (%p0396: int64, Primitive=1) -> int64 {
    multiply(%p0396, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1771 = (%tensor_0396,);
  %1772 = (%tensor_0397,);
  let %x639: () = vm.invoke_tvm_op(%1770, %1771, %1772) /* ty=() */;
  let %storage_0475: Storage[] = memory.alloc_storage(%tensor_0397, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][486]) /* ty=Storage[] */;
  let %out_077: Tensor[(?), float32] = memory.alloc_tensor(%storage_0475, 0 /* ty=int64 */, %shape_func_out_080, meta[relay.attrs.AllocTensorAttrs][486]) /* ty=Tensor[(?), float32] */;
  %1773 = (%x631, %x635, %x637, meta[relay.Constant][659] /* ty=Tensor[(1), int32] */);
  %1774 = (%out_077,);
  let %x640: () = vm.invoke_tvm_op(%1764, %1773, %1774) /* ty=() */;
  let %x641: Tensor[(?), float32] = %out_077;
  let %storage_0476: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][487]) /* ty=Storage[] */;
  let %tensor_0398: Tensor[(2), int32] = memory.alloc_tensor(%storage_0476, 0 /* ty=int64 */, meta[relay.Constant][662] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][487]) /* ty=Tensor[(2), int32] */;
  %1777 = fn (%p0397: Tensor[(2), int32], %p1164: Tensor[(2), int32], %p2143: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1775 = cast_like(%p0397, %p1164) /* ty=Tensor[(2), int32] */;
    %1776 = add(%p1164, %1775) /* ty=Tensor[(2), int32] */;
    where(%p2143, %1776, %p1164) /* ty=Tensor[(2), int32] */
  };
  %1778 = (%x529, meta[relay.Constant][663] /* ty=Tensor[(2), int32] */, meta[relay.Constant][664] /* ty=Tensor[(2), bool] */);
  %1779 = (%tensor_0398,);
  let %x642: () = vm.invoke_tvm_op(%1777, %1778, %1779) /* ty=() */;
  let %x643: Tensor[(2), int32] = %tensor_0398;
  let %in_shape_072: Tensor[(2), int64] = vm.shape_of(%x527, meta[relay.attrs.ShapeOfAttrs][95]) /* ty=Tensor[(2), int64] */;
  let %in_shape_146: Tensor[(2), int32] = %x643;
  let %in_shape_230: Tensor[(2), int64] = %x533;
  let %storage_0477: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][488]) /* ty=Storage[] */;
  let %tensor_0399: Tensor[(2), int64] = memory.alloc_tensor(%storage_0477, 0 /* ty=int64 */, meta[relay.Constant][665] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][488]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_081: Tensor[(2), int64] = %tensor_0399;
  %1780 = fn (%p0398: Tensor[(?, 4), float32], %p1165: Tensor[(2), int32], %p2144: Tensor[(2), int64], %p354: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0398, %p1165, %p2144, %p354, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1781 = (%in_shape_072, %in_shape_146, %in_shape_230, meta[relay.Constant][666] /* ty=Tensor[(2), int32] */);
  %1782 = (%shape_func_out_081,);
  let %shape_func81: () = vm.shape_func(%1780, %1781, %1782, meta[relay.attrs.ShapeFuncAttrs][81]) /* ty=() */;
  let %storage_0478: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][489]) /* ty=Storage[] */;
  let %tensor_0400: int64 = memory.alloc_tensor(%storage_0478, 0 /* ty=int64 */, meta[relay.Constant][667] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][489]) /* ty=int64 */;
  %1783 = fn (%p0399: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0399) /* ty=int64 */
  };
  %1784 = (%shape_func_out_081,);
  %1785 = (%tensor_0400,);
  let %x644: () = vm.invoke_tvm_op(%1783, %1784, %1785) /* ty=() */;
  let %storage_0479: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][490]) /* ty=Storage[] */;
  let %tensor_0401: int64 = memory.alloc_tensor(%storage_0479, 0 /* ty=int64 */, meta[relay.Constant][668] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][490]) /* ty=int64 */;
  %1786 = fn (%p0400: int64, Primitive=1) -> int64 {
    multiply(%p0400, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1787 = (%tensor_0400,);
  %1788 = (%tensor_0401,);
  let %x645: () = vm.invoke_tvm_op(%1786, %1787, %1788) /* ty=() */;
  let %storage_0480: Storage[] = memory.alloc_storage(%tensor_0401, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][491]) /* ty=Storage[] */;
  let %out_078: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0480, 0 /* ty=int64 */, %shape_func_out_081, meta[relay.attrs.AllocTensorAttrs][491]) /* ty=Tensor[(?, ?), float32] */;
  %1789 = (%x527, %x643, %x533, meta[relay.Constant][666] /* ty=Tensor[(2), int32] */);
  %1790 = (%out_078,);
  let %x646: () = vm.invoke_tvm_op(%1780, %1789, %1790) /* ty=() */;
  let %x647: Tensor[(?, ?), float32] = %out_078;
  let %in_shape_073: Tensor[(2), int64] = vm.shape_of(%x647, meta[relay.attrs.ShapeOfAttrs][96]) /* ty=Tensor[(2), int64] */;
  let %in_shape_147: Tensor[(1), int64] = vm.shape_of(%x631, meta[relay.attrs.ShapeOfAttrs][97]) /* ty=Tensor[(1), int64] */;
  let %storage_0481: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][492]) /* ty=Storage[] */;
  let %tensor_0402: Tensor[(1), int64] = memory.alloc_tensor(%storage_0481, 0 /* ty=int64 */, meta[relay.Constant][669] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][492]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_082: Tensor[(1), int64] = %tensor_0402;
  %1793 = fn (%p0401: Tensor[(?, ?), float32], %p1166: Tensor[(?), float32], Primitive=1) -> Tensor[(?), float32] {
    %1791 = take(%p0401, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %1792 = multiply(%p1166, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    add(%1791, %1792) /* ty=Tensor[(?), float32] */
  };
  %1794 = (%in_shape_073, %in_shape_147);
  %1795 = (%shape_func_out_082,);
  let %shape_func82: () = vm.shape_func(%1793, %1794, %1795, meta[relay.attrs.ShapeFuncAttrs][82]) /* ty=() */;
  let %storage_0482: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][493]) /* ty=Storage[] */;
  let %tensor_0403: int64 = memory.alloc_tensor(%storage_0482, 0 /* ty=int64 */, meta[relay.Constant][670] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][493]) /* ty=int64 */;
  %1796 = fn (%p0402: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0402) /* ty=int64 */
  };
  %1797 = (%shape_func_out_082,);
  %1798 = (%tensor_0403,);
  let %x648: () = vm.invoke_tvm_op(%1796, %1797, %1798) /* ty=() */;
  let %storage_0483: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][494]) /* ty=Storage[] */;
  let %tensor_0404: int64 = memory.alloc_tensor(%storage_0483, 0 /* ty=int64 */, meta[relay.Constant][671] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][494]) /* ty=int64 */;
  %1799 = fn (%p0403: int64, Primitive=1) -> int64 {
    multiply(%p0403, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1800 = (%tensor_0403,);
  %1801 = (%tensor_0404,);
  let %x649: () = vm.invoke_tvm_op(%1799, %1800, %1801) /* ty=() */;
  let %storage_0484: Storage[] = memory.alloc_storage(%tensor_0404, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][495]) /* ty=Storage[] */;
  let %out_079: Tensor[(?), float32] = memory.alloc_tensor(%storage_0484, 0 /* ty=int64 */, %shape_func_out_082, meta[relay.attrs.AllocTensorAttrs][495]) /* ty=Tensor[(?), float32] */;
  %1802 = (%x647, %x631);
  %1803 = (%out_079,);
  let %x650: () = vm.invoke_tvm_op(%1793, %1802, %1803) /* ty=() */;
  let %x651: Tensor[(?), float32] = %out_079;
  let %storage_0485: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][496]) /* ty=Storage[] */;
  let %tensor_0405: Tensor[(1), int32] = memory.alloc_tensor(%storage_0485, 0 /* ty=int64 */, meta[relay.Constant][672] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][496]) /* ty=Tensor[(1), int32] */;
  %1804 = fn (%p0404: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
    shape_of(%p0404, dtype="int32") /* ty=Tensor[(1), int32] */
  };
  %1805 = (%x651,);
  %1806 = (%tensor_0405,);
  let %x652: () = vm.invoke_tvm_op(%1804, %1805, %1806) /* ty=() */;
  let %x653: Tensor[(1), int32] = %tensor_0405;
  let %storage_0486: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][497]) /* ty=Storage[] */;
  let %tensor_0406: Tensor[(1), int32] = memory.alloc_tensor(%storage_0486, 0 /* ty=int64 */, meta[relay.Constant][673] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][497]) /* ty=Tensor[(1), int32] */;
  %1809 = fn (%p0405: Tensor[(1), int32], %p1167: Tensor[(1), int32], %p2145: Tensor[(1), bool], Primitive=1) -> Tensor[(1), int32] {
    %1807 = cast_like(%p0405, %p1167) /* ty=Tensor[(1), int32] */;
    %1808 = add(%p1167, %1807) /* ty=Tensor[(1), int32] */;
    where(%p2145, %1808, %p1167) /* ty=Tensor[(1), int32] */
  };
  %1810 = (%x653, meta[relay.Constant][674] /* ty=Tensor[(1), int32] */, meta[relay.Constant][675] /* ty=Tensor[(1), bool] */);
  %1811 = (%tensor_0406,);
  let %x654: () = vm.invoke_tvm_op(%1809, %1810, %1811) /* ty=() */;
  let %x655: Tensor[(1), int32] = %tensor_0406;
  let %storage_0487: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][498]) /* ty=Storage[] */;
  let %tensor_0407: Tensor[(1), int64] = memory.alloc_tensor(%storage_0487, 0 /* ty=int64 */, meta[relay.Constant][676] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][498]) /* ty=Tensor[(1), int64] */;
  %1812 = fn (%p0406: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int64] {
    cast(%p0406, dtype="int64") /* ty=Tensor[(1), int64] */
  };
  %1813 = (%x653,);
  %1814 = (%tensor_0407,);
  let %x656: () = vm.invoke_tvm_op(%1812, %1813, %1814) /* ty=() */;
  let %x657: Tensor[(1), int64] = %tensor_0407;
  let %in_shape_074: Tensor[(1), int64] = vm.shape_of(%x651, meta[relay.attrs.ShapeOfAttrs][98]) /* ty=Tensor[(1), int64] */;
  let %in_shape_148: Tensor[(1), int32] = %x655;
  let %in_shape_231: Tensor[(1), int64] = %x657;
  let %storage_0488: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][499]) /* ty=Storage[] */;
  let %tensor_0408: Tensor[(1), int64] = memory.alloc_tensor(%storage_0488, 0 /* ty=int64 */, meta[relay.Constant][677] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][499]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_083: Tensor[(1), int64] = %tensor_0408;
  %1815 = fn (%p0407: Tensor[(?), float32], %p1168: Tensor[(1), int32], %p2146: Tensor[(1), int64], %p355: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0407, %p1168, %p2146, %p355, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %1816 = (%in_shape_074, %in_shape_148, %in_shape_231, meta[relay.Constant][678] /* ty=Tensor[(1), int32] */);
  %1817 = (%shape_func_out_083,);
  let %shape_func83: () = vm.shape_func(%1815, %1816, %1817, meta[relay.attrs.ShapeFuncAttrs][83]) /* ty=() */;
  let %storage_0489: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][500]) /* ty=Storage[] */;
  let %tensor_0409: int64 = memory.alloc_tensor(%storage_0489, 0 /* ty=int64 */, meta[relay.Constant][679] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][500]) /* ty=int64 */;
  %1818 = fn (%p0408: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0408) /* ty=int64 */
  };
  %1819 = (%shape_func_out_083,);
  %1820 = (%tensor_0409,);
  let %x658: () = vm.invoke_tvm_op(%1818, %1819, %1820) /* ty=() */;
  let %storage_0490: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][501]) /* ty=Storage[] */;
  let %tensor_0410: int64 = memory.alloc_tensor(%storage_0490, 0 /* ty=int64 */, meta[relay.Constant][680] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][501]) /* ty=int64 */;
  %1821 = fn (%p0409: int64, Primitive=1) -> int64 {
    multiply(%p0409, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1822 = (%tensor_0409,);
  %1823 = (%tensor_0410,);
  let %x659: () = vm.invoke_tvm_op(%1821, %1822, %1823) /* ty=() */;
  let %storage_0491: Storage[] = memory.alloc_storage(%tensor_0410, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][502]) /* ty=Storage[] */;
  let %out_080: Tensor[(?), float32] = memory.alloc_tensor(%storage_0491, 0 /* ty=int64 */, %shape_func_out_083, meta[relay.attrs.AllocTensorAttrs][502]) /* ty=Tensor[(?), float32] */;
  %1824 = (%x651, %x655, %x657, meta[relay.Constant][678] /* ty=Tensor[(1), int32] */);
  %1825 = (%out_080,);
  let %x660: () = vm.invoke_tvm_op(%1815, %1824, %1825) /* ty=() */;
  let %x661: Tensor[(?), float32] = %out_080;
  let %storage_0492: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][503]) /* ty=Storage[] */;
  let %tensor_0411: Tensor[(2), int32] = memory.alloc_tensor(%storage_0492, 0 /* ty=int64 */, meta[relay.Constant][681] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][503]) /* ty=Tensor[(2), int32] */;
  %1828 = fn (%p0410: Tensor[(2), int32], %p1169: Tensor[(2), int32], %p2147: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1826 = cast_like(%p0410, %p1169) /* ty=Tensor[(2), int32] */;
    %1827 = add(%p1169, %1826) /* ty=Tensor[(2), int32] */;
    where(%p2147, %1827, %p1169) /* ty=Tensor[(2), int32] */
  };
  %1829 = (%x505, meta[relay.Constant][682] /* ty=Tensor[(2), int32] */, meta[relay.Constant][683] /* ty=Tensor[(2), bool] */);
  %1830 = (%tensor_0411,);
  let %x662: () = vm.invoke_tvm_op(%1828, %1829, %1830) /* ty=() */;
  let %x663: Tensor[(2), int32] = %tensor_0411;
  let %in_shape_075: Tensor[(2), int64] = vm.shape_of(%x503, meta[relay.attrs.ShapeOfAttrs][99]) /* ty=Tensor[(2), int64] */;
  let %in_shape_149: Tensor[(2), int32] = %x663;
  let %in_shape_232: Tensor[(2), int64] = %x509;
  let %storage_0493: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][504]) /* ty=Storage[] */;
  let %tensor_0412: Tensor[(2), int64] = memory.alloc_tensor(%storage_0493, 0 /* ty=int64 */, meta[relay.Constant][684] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][504]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_084: Tensor[(2), int64] = %tensor_0412;
  %1831 = fn (%p0411: Tensor[(?, ?), float32], %p1170: Tensor[(2), int32], %p2148: Tensor[(2), int64], %p356: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0411, %p1170, %p2148, %p356, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1832 = (%in_shape_075, %in_shape_149, %in_shape_232, meta[relay.Constant][685] /* ty=Tensor[(2), int32] */);
  %1833 = (%shape_func_out_084,);
  let %shape_func84: () = vm.shape_func(%1831, %1832, %1833, meta[relay.attrs.ShapeFuncAttrs][84]) /* ty=() */;
  let %storage_0494: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][505]) /* ty=Storage[] */;
  let %tensor_0413: int64 = memory.alloc_tensor(%storage_0494, 0 /* ty=int64 */, meta[relay.Constant][686] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][505]) /* ty=int64 */;
  %1834 = fn (%p0412: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0412) /* ty=int64 */
  };
  %1835 = (%shape_func_out_084,);
  %1836 = (%tensor_0413,);
  let %x664: () = vm.invoke_tvm_op(%1834, %1835, %1836) /* ty=() */;
  let %storage_0495: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][506]) /* ty=Storage[] */;
  let %tensor_0414: int64 = memory.alloc_tensor(%storage_0495, 0 /* ty=int64 */, meta[relay.Constant][687] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][506]) /* ty=int64 */;
  %1837 = fn (%p0413: int64, Primitive=1) -> int64 {
    multiply(%p0413, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1838 = (%tensor_0413,);
  %1839 = (%tensor_0414,);
  let %x665: () = vm.invoke_tvm_op(%1837, %1838, %1839) /* ty=() */;
  let %storage_0496: Storage[] = memory.alloc_storage(%tensor_0414, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][507]) /* ty=Storage[] */;
  let %out_081: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0496, 0 /* ty=int64 */, %shape_func_out_084, meta[relay.attrs.AllocTensorAttrs][507]) /* ty=Tensor[(?, ?), float32] */;
  %1840 = (%x503, %x663, %x509, meta[relay.Constant][685] /* ty=Tensor[(2), int32] */);
  %1841 = (%out_081,);
  let %x666: () = vm.invoke_tvm_op(%1831, %1840, %1841) /* ty=() */;
  let %x667: Tensor[(?, ?), float32] = %out_081;
  let %storage_0497: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][508]) /* ty=Storage[] */;
  let %tensor_0415: Tensor[(2), int32] = memory.alloc_tensor(%storage_0497, 0 /* ty=int64 */, meta[relay.Constant][688] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][508]) /* ty=Tensor[(2), int32] */;
  %1842 = fn (%p0414: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0414, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1843 = (%x667,);
  %1844 = (%tensor_0415,);
  let %x668: () = vm.invoke_tvm_op(%1842, %1843, %1844) /* ty=() */;
  let %x669: Tensor[(2), int32] = %tensor_0415;
  let %storage_0498: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][509]) /* ty=Storage[] */;
  let %tensor_0416: Tensor[(2), int32] = memory.alloc_tensor(%storage_0498, 0 /* ty=int64 */, meta[relay.Constant][689] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][509]) /* ty=Tensor[(2), int32] */;
  %1847 = fn (%p0415: Tensor[(2), int32], %p1171: Tensor[(2), int32], %p2149: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %1845 = cast_like(%p0415, %p1171) /* ty=Tensor[(2), int32] */;
    %1846 = add(%p1171, %1845) /* ty=Tensor[(2), int32] */;
    where(%p2149, %1846, %p1171) /* ty=Tensor[(2), int32] */
  };
  %1848 = (%x669, meta[relay.Constant][690] /* ty=Tensor[(2), int32] */, meta[relay.Constant][691] /* ty=Tensor[(2), bool] */);
  %1849 = (%tensor_0416,);
  let %x670: () = vm.invoke_tvm_op(%1847, %1848, %1849) /* ty=() */;
  let %x671: Tensor[(2), int32] = %tensor_0416;
  let %storage_0499: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][510]) /* ty=Storage[] */;
  let %tensor_0417: Tensor[(2), int64] = memory.alloc_tensor(%storage_0499, 0 /* ty=int64 */, meta[relay.Constant][692] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][510]) /* ty=Tensor[(2), int64] */;
  %1850 = fn (%p0416: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0416, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1851 = (%x669,);
  %1852 = (%tensor_0417,);
  let %x672: () = vm.invoke_tvm_op(%1850, %1851, %1852) /* ty=() */;
  let %x673: Tensor[(2), int64] = %tensor_0417;
  let %in_shape_076: Tensor[(2), int64] = vm.shape_of(%x667, meta[relay.attrs.ShapeOfAttrs][100]) /* ty=Tensor[(2), int64] */;
  let %in_shape_150: Tensor[(2), int32] = %x671;
  let %in_shape_233: Tensor[(2), int64] = %x673;
  let %storage_0500: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][511]) /* ty=Storage[] */;
  let %tensor_0418: Tensor[(2), int64] = memory.alloc_tensor(%storage_0500, 0 /* ty=int64 */, meta[relay.Constant][693] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][511]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_085: Tensor[(2), int64] = %tensor_0418;
  %1853 = fn (%p0417: Tensor[(?, ?), float32], %p1172: Tensor[(2), int32], %p2150: Tensor[(2), int64], %p357: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0417, %p1172, %p2150, %p357, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1854 = (%in_shape_076, %in_shape_150, %in_shape_233, meta[relay.Constant][694] /* ty=Tensor[(2), int32] */);
  %1855 = (%shape_func_out_085,);
  let %shape_func85: () = vm.shape_func(%1853, %1854, %1855, meta[relay.attrs.ShapeFuncAttrs][85]) /* ty=() */;
  let %storage_0501: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][512]) /* ty=Storage[] */;
  let %tensor_0419: int64 = memory.alloc_tensor(%storage_0501, 0 /* ty=int64 */, meta[relay.Constant][695] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][512]) /* ty=int64 */;
  %1856 = fn (%p0418: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0418) /* ty=int64 */
  };
  %1857 = (%shape_func_out_085,);
  %1858 = (%tensor_0419,);
  let %x674: () = vm.invoke_tvm_op(%1856, %1857, %1858) /* ty=() */;
  let %storage_0502: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][513]) /* ty=Storage[] */;
  let %tensor_0420: int64 = memory.alloc_tensor(%storage_0502, 0 /* ty=int64 */, meta[relay.Constant][696] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][513]) /* ty=int64 */;
  %1859 = fn (%p0419: int64, Primitive=1) -> int64 {
    multiply(%p0419, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1860 = (%tensor_0419,);
  %1861 = (%tensor_0420,);
  let %x675: () = vm.invoke_tvm_op(%1859, %1860, %1861) /* ty=() */;
  let %storage_0503: Storage[] = memory.alloc_storage(%tensor_0420, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][514]) /* ty=Storage[] */;
  let %out_082: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0503, 0 /* ty=int64 */, %shape_func_out_085, meta[relay.attrs.AllocTensorAttrs][514]) /* ty=Tensor[(?, ?), float32] */;
  %1862 = (%x667, %x671, %x673, meta[relay.Constant][694] /* ty=Tensor[(2), int32] */);
  %1863 = (%out_082,);
  let %x676: () = vm.invoke_tvm_op(%1853, %1862, %1863) /* ty=() */;
  let %x677: Tensor[(?, ?), float32] = %out_082;
  let %storage_0504: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][515]) /* ty=Storage[] */;
  let %tensor_0421: Tensor[(1), int32] = memory.alloc_tensor(%storage_0504, 0 /* ty=int64 */, meta[relay.Constant][697] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][515]) /* ty=Tensor[(1), int32] */;
  %1866 = fn (%p0420: Tensor[(1), int32], %p1173: Tensor[(1), int32], %p2151: Tensor[(1), bool], Primitive=1) -> Tensor[(1), int32] {
    %1864 = cast_like(%p0420, %p1173) /* ty=Tensor[(1), int32] */;
    %1865 = add(%p1173, %1864) /* ty=Tensor[(1), int32] */;
    where(%p2151, %1865, %p1173) /* ty=Tensor[(1), int32] */
  };
  %1867 = (%x633, meta[relay.Constant][698] /* ty=Tensor[(1), int32] */, meta[relay.Constant][699] /* ty=Tensor[(1), bool] */);
  %1868 = (%tensor_0421,);
  let %x678: () = vm.invoke_tvm_op(%1866, %1867, %1868) /* ty=() */;
  let %x679: Tensor[(1), int32] = %tensor_0421;
  let %in_shape_077: Tensor[(1), int64] = vm.shape_of(%x631, meta[relay.attrs.ShapeOfAttrs][101]) /* ty=Tensor[(1), int64] */;
  let %in_shape_151: Tensor[(1), int32] = %x679;
  let %in_shape_234: Tensor[(1), int64] = %x637;
  let %storage_0505: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][516]) /* ty=Storage[] */;
  let %tensor_0422: Tensor[(1), int64] = memory.alloc_tensor(%storage_0505, 0 /* ty=int64 */, meta[relay.Constant][700] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][516]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_086: Tensor[(1), int64] = %tensor_0422;
  %1869 = fn (%p0421: Tensor[(?), float32], %p1174: Tensor[(1), int32], %p2152: Tensor[(1), int64], %p358: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0421, %p1174, %p2152, %p358, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %1870 = (%in_shape_077, %in_shape_151, %in_shape_234, meta[relay.Constant][701] /* ty=Tensor[(1), int32] */);
  %1871 = (%shape_func_out_086,);
  let %shape_func86: () = vm.shape_func(%1869, %1870, %1871, meta[relay.attrs.ShapeFuncAttrs][86]) /* ty=() */;
  let %storage_0506: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][517]) /* ty=Storage[] */;
  let %tensor_0423: int64 = memory.alloc_tensor(%storage_0506, 0 /* ty=int64 */, meta[relay.Constant][702] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][517]) /* ty=int64 */;
  %1872 = fn (%p0422: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0422) /* ty=int64 */
  };
  %1873 = (%shape_func_out_086,);
  %1874 = (%tensor_0423,);
  let %x680: () = vm.invoke_tvm_op(%1872, %1873, %1874) /* ty=() */;
  let %storage_0507: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][518]) /* ty=Storage[] */;
  let %tensor_0424: int64 = memory.alloc_tensor(%storage_0507, 0 /* ty=int64 */, meta[relay.Constant][703] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][518]) /* ty=int64 */;
  %1875 = fn (%p0423: int64, Primitive=1) -> int64 {
    multiply(%p0423, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1876 = (%tensor_0423,);
  %1877 = (%tensor_0424,);
  let %x681: () = vm.invoke_tvm_op(%1875, %1876, %1877) /* ty=() */;
  let %storage_0508: Storage[] = memory.alloc_storage(%tensor_0424, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][519]) /* ty=Storage[] */;
  let %out_083: Tensor[(?), float32] = memory.alloc_tensor(%storage_0508, 0 /* ty=int64 */, %shape_func_out_086, meta[relay.attrs.AllocTensorAttrs][519]) /* ty=Tensor[(?), float32] */;
  %1878 = (%x631, %x679, %x637, meta[relay.Constant][701] /* ty=Tensor[(1), int32] */);
  %1879 = (%out_083,);
  let %x682: () = vm.invoke_tvm_op(%1869, %1878, %1879) /* ty=() */;
  let %x683: Tensor[(?), float32] = %out_083;
  let %in_shape_078: Tensor[(2), int64] = vm.shape_of(%x523, meta[relay.attrs.ShapeOfAttrs][102]) /* ty=Tensor[(2), int64] */;
  let %in_shape_152: Tensor[(1), int64] = vm.shape_of(%x557, meta[relay.attrs.ShapeOfAttrs][103]) /* ty=Tensor[(1), int64] */;
  let %in_shape_235: Tensor[(1), int64] = vm.shape_of(%x577, meta[relay.attrs.ShapeOfAttrs][104]) /* ty=Tensor[(1), int64] */;
  let %in_shape_34: Tensor[(2), int64] = vm.shape_of(%x593, meta[relay.attrs.ShapeOfAttrs][105]) /* ty=Tensor[(2), int64] */;
  let %in_shape_41: Tensor[(1), int64] = vm.shape_of(%x599, meta[relay.attrs.ShapeOfAttrs][106]) /* ty=Tensor[(1), int64] */;
  let %in_shape_51: Tensor[(2), int64] = vm.shape_of(%x615, meta[relay.attrs.ShapeOfAttrs][107]) /* ty=Tensor[(2), int64] */;
  let %in_shape_61: Tensor[(1), int64] = vm.shape_of(%x641, meta[relay.attrs.ShapeOfAttrs][108]) /* ty=Tensor[(1), int64] */;
  let %in_shape_7: Tensor[(1), int64] = vm.shape_of(%x661, meta[relay.attrs.ShapeOfAttrs][109]) /* ty=Tensor[(1), int64] */;
  let %in_shape_8: Tensor[(2), int64] = vm.shape_of(%x677, meta[relay.attrs.ShapeOfAttrs][110]) /* ty=Tensor[(2), int64] */;
  let %in_shape_9: Tensor[(1), int64] = vm.shape_of(%x683, meta[relay.attrs.ShapeOfAttrs][111]) /* ty=Tensor[(1), int64] */;
  let %storage_0509: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][520]) /* ty=Storage[] */;
  let %tensor_0425: Tensor[(2), int64] = memory.alloc_tensor(%storage_0509, 0 /* ty=int64 */, meta[relay.Constant][704] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][520]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_087: Tensor[(2), int64] = %tensor_0425;
  %1909 = fn (%p0424: Tensor[(?, ?), float32], %p1175: Tensor[(?), float32], %p2153: Tensor[(?), float32], %p359: Tensor[(?, ?), float32], %p45: Tensor[(?), float32], %p53: Tensor[(?, ?), float32], %p63: Tensor[(?), float32], %p72: Tensor[(?), float32], %p82: Tensor[(?, ?), float32], %p91: Tensor[(?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
    %1880 = divide(%p0424, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
    %1881 = expand_dims(%p1175, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %1882 = multiply(%1880, %1881) /* ty=Tensor[(?, ?), float32] */;
    %1883 = expand_dims(%p2153, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %1884 = add(%1882, %1883) /* ty=Tensor[(?, ?), float32] */;
    %1885 = divide(%p359, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
    %1886 = clip(%1885, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
    %1887 = exp(%1886) /* ty=Tensor[(?, ?), float32] */;
    %1888 = expand_dims(%p45, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %1889 = multiply(%1887, %1888) /* ty=Tensor[(?, ?), float32] */;
    %1890 = multiply(0.5f /* ty=float32 */, %1889) /* ty=Tensor[(?, ?), float32] */;
    %1891 = subtract(%1884, %1890) /* ty=Tensor[(?, ?), float32] */;
    %1892 = divide(%p53, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
    %1893 = expand_dims(%p63, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %1894 = multiply(%1892, %1893) /* ty=Tensor[(?, ?), float32] */;
    %1895 = expand_dims(%p72, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %1896 = add(%1894, %1895) /* ty=Tensor[(?, ?), float32] */;
    %1897 = divide(%p82, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
    %1898 = clip(%1897, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
    %1899 = exp(%1898) /* ty=Tensor[(?, ?), float32] */;
    %1900 = expand_dims(%p91, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %1901 = multiply(%1899, %1900) /* ty=Tensor[(?, ?), float32] */;
    %1902 = multiply(0.5f /* ty=float32 */, %1901) /* ty=Tensor[(?, ?), float32] */;
    %1903 = subtract(%1896, %1902) /* ty=Tensor[(?, ?), float32] */;
    %1904 = add(%1884, %1890) /* ty=Tensor[(?, ?), float32] */;
    %1905 = add(%1896, %1902) /* ty=Tensor[(?, ?), float32] */;
    %1906 = (%1891, %1903, %1904, %1905);
    %1907 = stack(%1906, axis=2) /* ty=Tensor[(?, ?, 4), float32] */;
    %1908 = reshape(%1907, newshape=[0, -1, 1]) /* ty=Tensor[(?, ?, 1), float32] */;
    squeeze(%1908, axis=[2]) /* ty=Tensor[(?, ?), float32] */
  };
  %1910 = (%in_shape_078, %in_shape_152, %in_shape_235, %in_shape_34, %in_shape_41, %in_shape_51, %in_shape_61, %in_shape_7, %in_shape_8, %in_shape_9);
  %1911 = (%shape_func_out_087,);
  let %shape_func87: () = vm.shape_func(%1909, %1910, %1911, meta[relay.attrs.ShapeFuncAttrs][87]) /* ty=() */;
  let %storage_0510: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][521]) /* ty=Storage[] */;
  let %tensor_0426: int64 = memory.alloc_tensor(%storage_0510, 0 /* ty=int64 */, meta[relay.Constant][705] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][521]) /* ty=int64 */;
  %1912 = fn (%p0425: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0425) /* ty=int64 */
  };
  %1913 = (%shape_func_out_087,);
  %1914 = (%tensor_0426,);
  let %x684: () = vm.invoke_tvm_op(%1912, %1913, %1914) /* ty=() */;
  let %storage_0511: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][522]) /* ty=Storage[] */;
  let %tensor_0427: int64 = memory.alloc_tensor(%storage_0511, 0 /* ty=int64 */, meta[relay.Constant][706] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][522]) /* ty=int64 */;
  %1915 = fn (%p0426: int64, Primitive=1) -> int64 {
    multiply(%p0426, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1916 = (%tensor_0426,);
  %1917 = (%tensor_0427,);
  let %x685: () = vm.invoke_tvm_op(%1915, %1916, %1917) /* ty=() */;
  let %storage_0512: Storage[] = memory.alloc_storage(%tensor_0427, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][523]) /* ty=Storage[] */;
  let %out_084: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0512, 0 /* ty=int64 */, %shape_func_out_087, meta[relay.attrs.AllocTensorAttrs][523]) /* ty=Tensor[(?, ?), float32] */;
  %1918 = (%x523, %x557, %x577, %x593, %x599, %x615, %x641, %x661, %x677, %x683);
  %1919 = (%out_084,);
  let %x686: () = vm.invoke_tvm_op(%1909, %1918, %1919) /* ty=() */;
  let %x687: Tensor[(?, ?), float32] = %out_084;
  let %storage_0513: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][524]) /* ty=Storage[] */;
  let %tensor_0428: Tensor[(3), int64] = memory.alloc_tensor(%storage_0513, 0 /* ty=int64 */, meta[relay.Constant][707] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][524]) /* ty=Tensor[(3), int64] */;
  %1921 = fn (%p0427: Tensor[(1), int64], %p1176: Tensor[(1), int64], %p2154: Tensor[(1), int64], Primitive=1) -> Tensor[(3), int64] {
    %1920 = (%p0427, %p1176, %p2154);
    concatenate(%1920) /* ty=Tensor[(3), int64] */
  };
  %1922 = (%x500, meta[relay.Constant][527] /* ty=Tensor[(1), int64] */, meta[relay.Constant][708] /* ty=Tensor[(1), int64] */);
  %1923 = (%tensor_0428,);
  let %x688: () = vm.invoke_tvm_op(%1921, %1922, %1923) /* ty=() */;
  let %x689: Tensor[(3), int64] = %tensor_0428;
  let %in_shape_079: Tensor[(2), int64] = vm.shape_of(%x687, meta[relay.attrs.ShapeOfAttrs][112]) /* ty=Tensor[(2), int64] */;
  let %in_shape_153: Tensor[(3), int64] = %x689;
  let %storage_0514: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][525]) /* ty=Storage[] */;
  let %tensor_0429: Tensor[(3), int64] = memory.alloc_tensor(%storage_0514, 0 /* ty=int64 */, meta[relay.Constant][709] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][525]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_088: Tensor[(3), int64] = %tensor_0429;
  %1924 = fn (%p0428: Tensor[(?, ?), float32], %p1177: Tensor[(3), int64], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.reshape(%p0428, %p1177, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %1925 = (%in_shape_079, %in_shape_153);
  %1926 = (%shape_func_out_088,);
  let %shape_func88: () = vm.shape_func(%1924, %1925, %1926, meta[relay.attrs.ShapeFuncAttrs][88]) /* ty=() */;
  let %x690: Tensor[(?, ?, ?), float32] = vm.reshape_tensor(%x687, %shape_func_out_088, meta[relay.attrs.ReshapeTensorAttrs][3]) /* ty=Tensor[(?, ?, ?), float32] */;
  let %storage_0515: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][526]) /* ty=Storage[] */;
  let %tensor_0430: Tensor[(3), int32] = memory.alloc_tensor(%storage_0515, 0 /* ty=int64 */, meta[relay.Constant][710] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][526]) /* ty=Tensor[(3), int32] */;
  %1927 = fn (%p0429: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(3), int32] {
    shape_of(%p0429, dtype="int32") /* ty=Tensor[(3), int32] */
  };
  %1928 = (%x690,);
  %1929 = (%tensor_0430,);
  let %x691: () = vm.invoke_tvm_op(%1927, %1928, %1929) /* ty=() */;
  let %x692: Tensor[(3), int32] = %tensor_0430;
  let %storage_0516: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][527]) /* ty=Storage[] */;
  let %tensor_0431: Tensor[(3), int32] = memory.alloc_tensor(%storage_0516, 0 /* ty=int64 */, meta[relay.Constant][711] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][527]) /* ty=Tensor[(3), int32] */;
  %1932 = fn (%p0430: Tensor[(3), int32], %p1178: Tensor[(3), int32], %p2155: Tensor[(3), bool], Primitive=1) -> Tensor[(3), int32] {
    %1930 = cast_like(%p0430, %p1178) /* ty=Tensor[(3), int32] */;
    %1931 = add(%p1178, %1930) /* ty=Tensor[(3), int32] */;
    where(%p2155, %1931, %p1178) /* ty=Tensor[(3), int32] */
  };
  %1933 = (%x692, meta[relay.Constant][712] /* ty=Tensor[(3), int32] */, meta[relay.Constant][713] /* ty=Tensor[(3), bool] */);
  %1934 = (%tensor_0431,);
  let %x693: () = vm.invoke_tvm_op(%1932, %1933, %1934) /* ty=() */;
  let %x694: Tensor[(3), int32] = %tensor_0431;
  let %storage_0517: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][528]) /* ty=Storage[] */;
  let %tensor_0432: Tensor[(3), int64] = memory.alloc_tensor(%storage_0517, 0 /* ty=int64 */, meta[relay.Constant][714] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][528]) /* ty=Tensor[(3), int64] */;
  %1935 = fn (%p0431: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    cast(%p0431, dtype="int64") /* ty=Tensor[(3), int64] */
  };
  %1936 = (%x692,);
  %1937 = (%tensor_0432,);
  let %x695: () = vm.invoke_tvm_op(%1935, %1936, %1937) /* ty=() */;
  let %x696: Tensor[(3), int64] = %tensor_0432;
  let %in_shape_080: Tensor[(3), int64] = vm.shape_of(%x690, meta[relay.attrs.ShapeOfAttrs][113]) /* ty=Tensor[(3), int64] */;
  let %in_shape_154: Tensor[(3), int32] = %x694;
  let %in_shape_236: Tensor[(3), int64] = %x696;
  let %storage_0518: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][529]) /* ty=Storage[] */;
  let %tensor_0433: Tensor[(3), int64] = memory.alloc_tensor(%storage_0518, 0 /* ty=int64 */, meta[relay.Constant][715] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][529]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_089: Tensor[(3), int64] = %tensor_0433;
  %1938 = fn (%p0432: Tensor[(?, ?, ?), float32], %p1179: Tensor[(3), int32], %p2156: Tensor[(3), int64], %p360: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0432, %p1179, %p2156, %p360, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %1939 = (%in_shape_080, %in_shape_154, %in_shape_236, meta[relay.Constant][716] /* ty=Tensor[(3), int32] */);
  %1940 = (%shape_func_out_089,);
  let %shape_func89: () = vm.shape_func(%1938, %1939, %1940, meta[relay.attrs.ShapeFuncAttrs][89]) /* ty=() */;
  let %storage_0519: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][530]) /* ty=Storage[] */;
  let %tensor_0434: int64 = memory.alloc_tensor(%storage_0519, 0 /* ty=int64 */, meta[relay.Constant][717] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][530]) /* ty=int64 */;
  %1941 = fn (%p0433: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0433) /* ty=int64 */
  };
  %1942 = (%shape_func_out_089,);
  %1943 = (%tensor_0434,);
  let %x697: () = vm.invoke_tvm_op(%1941, %1942, %1943) /* ty=() */;
  let %storage_0520: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][531]) /* ty=Storage[] */;
  let %tensor_0435: int64 = memory.alloc_tensor(%storage_0520, 0 /* ty=int64 */, meta[relay.Constant][718] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][531]) /* ty=int64 */;
  %1944 = fn (%p0434: int64, Primitive=1) -> int64 {
    multiply(%p0434, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1945 = (%tensor_0434,);
  %1946 = (%tensor_0435,);
  let %x698: () = vm.invoke_tvm_op(%1944, %1945, %1946) /* ty=() */;
  let %storage_0521: Storage[] = memory.alloc_storage(%tensor_0435, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][532]) /* ty=Storage[] */;
  let %out_085: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_0521, 0 /* ty=int64 */, %shape_func_out_089, meta[relay.attrs.AllocTensorAttrs][532]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1947 = (%x690, %x694, %x696, meta[relay.Constant][716] /* ty=Tensor[(3), int32] */);
  %1948 = (%out_085,);
  let %x699: () = vm.invoke_tvm_op(%1938, %1947, %1948) /* ty=() */;
  let %x700: Tensor[(?, ?, ?), float32] = %out_085;
  let %storage_0522: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][533]) /* ty=Storage[] */;
  let %tensor_0436: Tensor[(3), int32] = memory.alloc_tensor(%storage_0522, 0 /* ty=int64 */, meta[relay.Constant][719] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][533]) /* ty=Tensor[(3), int32] */;
  %1951 = fn (%p0435: Tensor[(3), int32], %p1180: Tensor[(3), int32], %p2157: Tensor[(3), bool], Primitive=1) -> Tensor[(3), int32] {
    %1949 = cast_like(%p0435, %p1180) /* ty=Tensor[(3), int32] */;
    %1950 = add(%p1180, %1949) /* ty=Tensor[(3), int32] */;
    where(%p2157, %1950, %p1180) /* ty=Tensor[(3), int32] */
  };
  %1952 = (%x692, meta[relay.Constant][720] /* ty=Tensor[(3), int32] */, meta[relay.Constant][721] /* ty=Tensor[(3), bool] */);
  %1953 = (%tensor_0436,);
  let %x701: () = vm.invoke_tvm_op(%1951, %1952, %1953) /* ty=() */;
  let %x702: Tensor[(3), int32] = %tensor_0436;
  let %in_shape_081: Tensor[(3), int64] = vm.shape_of(%x690, meta[relay.attrs.ShapeOfAttrs][114]) /* ty=Tensor[(3), int64] */;
  let %in_shape_155: Tensor[(3), int32] = %x702;
  let %in_shape_237: Tensor[(3), int64] = %x696;
  let %storage_0523: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][534]) /* ty=Storage[] */;
  let %tensor_0437: Tensor[(3), int64] = memory.alloc_tensor(%storage_0523, 0 /* ty=int64 */, meta[relay.Constant][722] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][534]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_090: Tensor[(3), int64] = %tensor_0437;
  %1954 = fn (%p0436: Tensor[(?, ?, ?), float32], %p1181: Tensor[(3), int32], %p2158: Tensor[(3), int64], %p361: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0436, %p1181, %p2158, %p361, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %1955 = (%in_shape_081, %in_shape_155, %in_shape_237, meta[relay.Constant][723] /* ty=Tensor[(3), int32] */);
  %1956 = (%shape_func_out_090,);
  let %shape_func90: () = vm.shape_func(%1954, %1955, %1956, meta[relay.attrs.ShapeFuncAttrs][90]) /* ty=() */;
  let %storage_0524: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][535]) /* ty=Storage[] */;
  let %tensor_0438: int64 = memory.alloc_tensor(%storage_0524, 0 /* ty=int64 */, meta[relay.Constant][724] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][535]) /* ty=int64 */;
  %1957 = fn (%p0437: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0437) /* ty=int64 */
  };
  %1958 = (%shape_func_out_090,);
  %1959 = (%tensor_0438,);
  let %x703: () = vm.invoke_tvm_op(%1957, %1958, %1959) /* ty=() */;
  let %storage_0525: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][536]) /* ty=Storage[] */;
  let %tensor_0439: int64 = memory.alloc_tensor(%storage_0525, 0 /* ty=int64 */, meta[relay.Constant][725] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][536]) /* ty=int64 */;
  %1960 = fn (%p0438: int64, Primitive=1) -> int64 {
    multiply(%p0438, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1961 = (%tensor_0438,);
  %1962 = (%tensor_0439,);
  let %x704: () = vm.invoke_tvm_op(%1960, %1961, %1962) /* ty=() */;
  let %storage_0526: Storage[] = memory.alloc_storage(%tensor_0439, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][537]) /* ty=Storage[] */;
  let %out_086: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_0526, 0 /* ty=int64 */, %shape_func_out_090, meta[relay.attrs.AllocTensorAttrs][537]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1963 = (%x690, %x702, %x696, meta[relay.Constant][723] /* ty=Tensor[(3), int32] */);
  %1964 = (%out_086,);
  let %x705: () = vm.invoke_tvm_op(%1954, %1963, %1964) /* ty=() */;
  let %x706: Tensor[(?, ?, ?), float32] = %out_086;
  let %in_shape_082: Tensor[(3), int64] = vm.shape_of(%x700, meta[relay.attrs.ShapeOfAttrs][115]) /* ty=Tensor[(3), int64] */;
  let %in_shape_238: Tensor[(3), int64] = vm.shape_of(%x706, meta[relay.attrs.ShapeOfAttrs][116]) /* ty=Tensor[(3), int64] */;
  let %storage_0527: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][538]) /* ty=Storage[] */;
  let %tensor_0440: Tensor[(4), int64] = memory.alloc_tensor(%storage_0527, 0 /* ty=int64 */, meta[relay.Constant][726] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][538]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_091: Tensor[(4), int64] = %tensor_0440;
  %1970 = fn (%p0439: Tensor[(?, ?, ?), float32], %p1182: float32, %p2159: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(?, ?, ?, 2), float32] {
    %1965 = maximum(%p0439, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
    %1966 = minimum(%1965, %p1182) /* ty=Tensor[(?, ?, ?), float32] */;
    %1967 = maximum(%p2159, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
    %1968 = minimum(%1967, %p1182) /* ty=Tensor[(?, ?, ?), float32] */;
    %1969 = (%1966, %1968);
    stack(%1969, axis=3) /* ty=Tensor[(?, ?, ?, 2), float32] */
  };
  %1971 = (%in_shape_082, 1066908304 /* ty=int64 */, %in_shape_238);
  %1972 = (%shape_func_out_091,);
  let %shape_func91: () = vm.shape_func(%1970, %1971, %1972, meta[relay.attrs.ShapeFuncAttrs][91]) /* ty=() */;
  let %storage_0528: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][539]) /* ty=Storage[] */;
  let %tensor_0441: int64 = memory.alloc_tensor(%storage_0528, 0 /* ty=int64 */, meta[relay.Constant][727] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][539]) /* ty=int64 */;
  %1973 = fn (%p0440: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0440) /* ty=int64 */
  };
  %1974 = (%shape_func_out_091,);
  %1975 = (%tensor_0441,);
  let %x707: () = vm.invoke_tvm_op(%1973, %1974, %1975) /* ty=() */;
  let %storage_0529: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][540]) /* ty=Storage[] */;
  let %tensor_0442: int64 = memory.alloc_tensor(%storage_0529, 0 /* ty=int64 */, meta[relay.Constant][728] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][540]) /* ty=int64 */;
  %1976 = fn (%p0441: int64, Primitive=1) -> int64 {
    multiply(%p0441, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1977 = (%tensor_0441,);
  %1978 = (%tensor_0442,);
  let %x708: () = vm.invoke_tvm_op(%1976, %1977, %1978) /* ty=() */;
  let %storage_0530: Storage[] = memory.alloc_storage(%tensor_0442, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][541]) /* ty=Storage[] */;
  let %out_087: Tensor[(?, ?, ?, 2), float32] = memory.alloc_tensor(%storage_0530, 0 /* ty=int64 */, %shape_func_out_091, meta[relay.attrs.AllocTensorAttrs][541]) /* ty=Tensor[(?, ?, ?, 2), float32] */;
  %1979 = (%x700, 800f /* ty=float32 */, %x706);
  %1980 = (%out_087,);
  let %x709: () = vm.invoke_tvm_op(%1970, %1979, %1980) /* ty=() */;
  let %x710: Tensor[(?, ?, ?, 2), float32] = %out_087;
  let %storage_0531: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][542]) /* ty=Storage[] */;
  let %tensor_0443: Tensor[(3), int64] = memory.alloc_tensor(%storage_0531, 0 /* ty=int64 */, meta[relay.Constant][729] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][542]) /* ty=Tensor[(3), int64] */;
  %1991 = fn (%p0442: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    %1981 = take(%p0442, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
    %1982 = cast(%1981, dtype="int64") /* ty=int64 */;
    %1983 = expand_dims(%1982, axis=0) /* ty=Tensor[(1), int64] */;
    %1984 = take(%p0442, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
    %1985 = cast(%1984, dtype="int64") /* ty=int64 */;
    %1986 = expand_dims(%1985, axis=0) /* ty=Tensor[(1), int64] */;
    %1987 = take(%p0442, 2 /* ty=int32 */, axis=0) /* ty=int32 */;
    %1988 = cast(%1987, dtype="int64") /* ty=int64 */;
    %1989 = expand_dims(%1988, axis=0) /* ty=Tensor[(1), int64] */;
    %1990 = (%1983, %1986, %1989);
    concatenate(%1990) /* ty=Tensor[(3), int64] */
  };
  %1992 = (%x692,);
  %1993 = (%tensor_0443,);
  let %x711: () = vm.invoke_tvm_op(%1991, %1992, %1993) /* ty=() */;
  let %x712: Tensor[(3), int64] = %tensor_0443;
  let %in_shape_083: Tensor[(4), int64] = vm.shape_of(%x710, meta[relay.attrs.ShapeOfAttrs][117]) /* ty=Tensor[(4), int64] */;
  let %in_shape_156: Tensor[(3), int64] = %x712;
  let %storage_0532: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][543]) /* ty=Storage[] */;
  let %tensor_0444: Tensor[(3), int64] = memory.alloc_tensor(%storage_0532, 0 /* ty=int64 */, meta[relay.Constant][730] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][543]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_092: Tensor[(3), int64] = %tensor_0444;
  %1994 = fn (%p0443: Tensor[(?, ?, ?, 2), float32], %p1183: Tensor[(3), int64], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.reshape(%p0443, %p1183, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %1995 = (%in_shape_083, %in_shape_156);
  %1996 = (%shape_func_out_092,);
  let %shape_func92: () = vm.shape_func(%1994, %1995, %1996, meta[relay.attrs.ShapeFuncAttrs][92]) /* ty=() */;
  let %x713: Tensor[(?, ?, ?), float32] = vm.reshape_tensor(%x710, %shape_func_out_092, meta[relay.attrs.ReshapeTensorAttrs][4]) /* ty=Tensor[(?, ?, ?), float32] */;
  let %storage_0533: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][544]) /* ty=Storage[] */;
  let %tensor_0445: Tensor[(3), int32] = memory.alloc_tensor(%storage_0533, 0 /* ty=int64 */, meta[relay.Constant][731] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][544]) /* ty=Tensor[(3), int32] */;
  %1997 = fn (%p0444: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(3), int32] {
    shape_of(%p0444, dtype="int32") /* ty=Tensor[(3), int32] */
  };
  %1998 = (%x713,);
  %1999 = (%tensor_0445,);
  let %x714: () = vm.invoke_tvm_op(%1997, %1998, %1999) /* ty=() */;
  let %x715: Tensor[(3), int32] = %tensor_0445;
  let %storage_0534: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][545]) /* ty=Storage[] */;
  let %tensor_0446: Tensor[(3), int32] = memory.alloc_tensor(%storage_0534, 0 /* ty=int64 */, meta[relay.Constant][732] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][545]) /* ty=Tensor[(3), int32] */;
  %2002 = fn (%p0445: Tensor[(3), int32], %p1184: Tensor[(3), int32], %p2160: Tensor[(3), bool], Primitive=1) -> Tensor[(3), int32] {
    %2000 = cast_like(%p0445, %p1184) /* ty=Tensor[(3), int32] */;
    %2001 = add(%p1184, %2000) /* ty=Tensor[(3), int32] */;
    where(%p2160, %2001, %p1184) /* ty=Tensor[(3), int32] */
  };
  %2003 = (%x715, meta[relay.Constant][733] /* ty=Tensor[(3), int32] */, meta[relay.Constant][734] /* ty=Tensor[(3), bool] */);
  %2004 = (%tensor_0446,);
  let %x716: () = vm.invoke_tvm_op(%2002, %2003, %2004) /* ty=() */;
  let %x717: Tensor[(3), int32] = %tensor_0446;
  let %storage_0535: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][546]) /* ty=Storage[] */;
  let %tensor_0447: Tensor[(3), int64] = memory.alloc_tensor(%storage_0535, 0 /* ty=int64 */, meta[relay.Constant][735] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][546]) /* ty=Tensor[(3), int64] */;
  %2005 = fn (%p0446: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    cast(%p0446, dtype="int64") /* ty=Tensor[(3), int64] */
  };
  %2006 = (%x715,);
  %2007 = (%tensor_0447,);
  let %x718: () = vm.invoke_tvm_op(%2005, %2006, %2007) /* ty=() */;
  let %x719: Tensor[(3), int64] = %tensor_0447;
  let %in_shape_084: Tensor[(3), int64] = vm.shape_of(%x713, meta[relay.attrs.ShapeOfAttrs][118]) /* ty=Tensor[(3), int64] */;
  let %in_shape_157: Tensor[(3), int32] = %x717;
  let %in_shape_239: Tensor[(3), int64] = %x719;
  let %storage_0536: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][547]) /* ty=Storage[] */;
  let %tensor_0448: Tensor[(3), int64] = memory.alloc_tensor(%storage_0536, 0 /* ty=int64 */, meta[relay.Constant][736] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][547]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_093: Tensor[(3), int64] = %tensor_0448;
  %2008 = fn (%p0447: Tensor[(?, ?, ?), float32], %p1185: Tensor[(3), int32], %p2161: Tensor[(3), int64], %p362: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0447, %p1185, %p2161, %p362, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %2009 = (%in_shape_084, %in_shape_157, %in_shape_239, meta[relay.Constant][737] /* ty=Tensor[(3), int32] */);
  %2010 = (%shape_func_out_093,);
  let %shape_func93: () = vm.shape_func(%2008, %2009, %2010, meta[relay.attrs.ShapeFuncAttrs][93]) /* ty=() */;
  let %storage_0537: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][548]) /* ty=Storage[] */;
  let %tensor_0449: int64 = memory.alloc_tensor(%storage_0537, 0 /* ty=int64 */, meta[relay.Constant][738] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][548]) /* ty=int64 */;
  %2011 = fn (%p0448: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0448) /* ty=int64 */
  };
  %2012 = (%shape_func_out_093,);
  %2013 = (%tensor_0449,);
  let %x720: () = vm.invoke_tvm_op(%2011, %2012, %2013) /* ty=() */;
  let %storage_0538: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][549]) /* ty=Storage[] */;
  let %tensor_0450: int64 = memory.alloc_tensor(%storage_0538, 0 /* ty=int64 */, meta[relay.Constant][739] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][549]) /* ty=int64 */;
  %2014 = fn (%p0449: int64, Primitive=1) -> int64 {
    multiply(%p0449, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2015 = (%tensor_0449,);
  %2016 = (%tensor_0450,);
  let %x721: () = vm.invoke_tvm_op(%2014, %2015, %2016) /* ty=() */;
  let %storage_0539: Storage[] = memory.alloc_storage(%tensor_0450, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][550]) /* ty=Storage[] */;
  let %out_088: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_0539, 0 /* ty=int64 */, %shape_func_out_093, meta[relay.attrs.AllocTensorAttrs][550]) /* ty=Tensor[(?, ?, ?), float32] */;
  %2017 = (%x713, %x717, %x719, meta[relay.Constant][737] /* ty=Tensor[(3), int32] */);
  %2018 = (%out_088,);
  let %x722: () = vm.invoke_tvm_op(%2008, %2017, %2018) /* ty=() */;
  let %x723: Tensor[(?, ?, ?), float32] = %out_088;
  let %storage_0540: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][551]) /* ty=Storage[] */;
  let %tensor_0451: Tensor[(3), int32] = memory.alloc_tensor(%storage_0540, 0 /* ty=int64 */, meta[relay.Constant][740] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][551]) /* ty=Tensor[(3), int32] */;
  %2019 = fn (%p0450: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(3), int32] {
    shape_of(%p0450, dtype="int32") /* ty=Tensor[(3), int32] */
  };
  %2020 = (%x723,);
  %2021 = (%tensor_0451,);
  let %x724: () = vm.invoke_tvm_op(%2019, %2020, %2021) /* ty=() */;
  let %x725: Tensor[(3), int32] = %tensor_0451;
  let %storage_0541: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][552]) /* ty=Storage[] */;
  let %tensor_0452: Tensor[(3), int32] = memory.alloc_tensor(%storage_0541, 0 /* ty=int64 */, meta[relay.Constant][741] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][552]) /* ty=Tensor[(3), int32] */;
  %2024 = fn (%p0451: Tensor[(3), int32], %p1186: Tensor[(3), int32], %p2162: Tensor[(3), bool], Primitive=1) -> Tensor[(3), int32] {
    %2022 = cast_like(%p0451, %p1186) /* ty=Tensor[(3), int32] */;
    %2023 = add(%p1186, %2022) /* ty=Tensor[(3), int32] */;
    where(%p2162, %2023, %p1186) /* ty=Tensor[(3), int32] */
  };
  %2025 = (%x725, meta[relay.Constant][742] /* ty=Tensor[(3), int32] */, meta[relay.Constant][743] /* ty=Tensor[(3), bool] */);
  %2026 = (%tensor_0452,);
  let %x726: () = vm.invoke_tvm_op(%2024, %2025, %2026) /* ty=() */;
  let %x727: Tensor[(3), int32] = %tensor_0452;
  let %storage_0542: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][553]) /* ty=Storage[] */;
  let %tensor_0453: Tensor[(3), int64] = memory.alloc_tensor(%storage_0542, 0 /* ty=int64 */, meta[relay.Constant][744] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][553]) /* ty=Tensor[(3), int64] */;
  %2027 = fn (%p0452: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    cast(%p0452, dtype="int64") /* ty=Tensor[(3), int64] */
  };
  %2028 = (%x725,);
  %2029 = (%tensor_0453,);
  let %x728: () = vm.invoke_tvm_op(%2027, %2028, %2029) /* ty=() */;
  let %x729: Tensor[(3), int64] = %tensor_0453;
  let %in_shape_085: Tensor[(3), int64] = vm.shape_of(%x723, meta[relay.attrs.ShapeOfAttrs][119]) /* ty=Tensor[(3), int64] */;
  let %in_shape_158: Tensor[(3), int32] = %x727;
  let %in_shape_240: Tensor[(3), int64] = %x729;
  let %storage_0543: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][554]) /* ty=Storage[] */;
  let %tensor_0454: Tensor[(3), int64] = memory.alloc_tensor(%storage_0543, 0 /* ty=int64 */, meta[relay.Constant][745] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][554]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_094: Tensor[(3), int64] = %tensor_0454;
  %2030 = fn (%p0453: Tensor[(?, ?, ?), float32], %p1187: Tensor[(3), int32], %p2163: Tensor[(3), int64], %p363: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0453, %p1187, %p2163, %p363, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %2031 = (%in_shape_085, %in_shape_158, %in_shape_240, meta[relay.Constant][746] /* ty=Tensor[(3), int32] */);
  %2032 = (%shape_func_out_094,);
  let %shape_func94: () = vm.shape_func(%2030, %2031, %2032, meta[relay.attrs.ShapeFuncAttrs][94]) /* ty=() */;
  let %storage_0544: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][555]) /* ty=Storage[] */;
  let %tensor_0455: int64 = memory.alloc_tensor(%storage_0544, 0 /* ty=int64 */, meta[relay.Constant][747] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][555]) /* ty=int64 */;
  %2033 = fn (%p0454: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0454) /* ty=int64 */
  };
  %2034 = (%shape_func_out_094,);
  %2035 = (%tensor_0455,);
  let %x730: () = vm.invoke_tvm_op(%2033, %2034, %2035) /* ty=() */;
  let %storage_0545: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][556]) /* ty=Storage[] */;
  let %tensor_0456: int64 = memory.alloc_tensor(%storage_0545, 0 /* ty=int64 */, meta[relay.Constant][748] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][556]) /* ty=int64 */;
  %2036 = fn (%p0455: int64, Primitive=1) -> int64 {
    multiply(%p0455, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2037 = (%tensor_0455,);
  %2038 = (%tensor_0456,);
  let %x731: () = vm.invoke_tvm_op(%2036, %2037, %2038) /* ty=() */;
  let %storage_0546: Storage[] = memory.alloc_storage(%tensor_0456, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][557]) /* ty=Storage[] */;
  let %out_089: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_0546, 0 /* ty=int64 */, %shape_func_out_094, meta[relay.attrs.AllocTensorAttrs][557]) /* ty=Tensor[(?, ?, ?), float32] */;
  %2039 = (%x723, %x727, %x729, meta[relay.Constant][746] /* ty=Tensor[(3), int32] */);
  %2040 = (%out_089,);
  let %x732: () = vm.invoke_tvm_op(%2030, %2039, %2040) /* ty=() */;
  let %x733: Tensor[(?, ?, ?), float32] = %out_089;
  let %in_shape_086: Tensor[(3), int64] = vm.shape_of(%x733, meta[relay.attrs.ShapeOfAttrs][120]) /* ty=Tensor[(3), int64] */;
  let %in_shape_159: Tensor[(1), int64] = vm.shape_of(%x494, meta[relay.attrs.ShapeOfAttrs][121]) /* ty=Tensor[(1), int64] */;
  let %storage_0547: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][558]) /* ty=Storage[] */;
  let %tensor_0457: Tensor[(2), int64] = memory.alloc_tensor(%storage_0547, 0 /* ty=int64 */, meta[relay.Constant][749] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][558]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_095: Tensor[(2), int64] = %tensor_0457;
  %2043 = fn (%p0456: Tensor[(?, ?, ?), float32], %p1188: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 4), float32] {
    %2041 = reshape(%p0456, newshape=[-1, 4]) /* ty=Tensor[(?, 4), float32] */;
    %2042 = (%2041, %p1188);
    adv_index(%2042) /* ty=Tensor[(?, 4), float32] */
  };
  %2044 = (%in_shape_086, %in_shape_159);
  %2045 = (%shape_func_out_095,);
  let %shape_func95: () = vm.shape_func(%2043, %2044, %2045, meta[relay.attrs.ShapeFuncAttrs][95]) /* ty=() */;
  let %storage_0548: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][559]) /* ty=Storage[] */;
  let %tensor_0458: int64 = memory.alloc_tensor(%storage_0548, 0 /* ty=int64 */, meta[relay.Constant][750] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][559]) /* ty=int64 */;
  %2046 = fn (%p0457: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0457) /* ty=int64 */
  };
  %2047 = (%shape_func_out_095,);
  %2048 = (%tensor_0458,);
  let %x734: () = vm.invoke_tvm_op(%2046, %2047, %2048) /* ty=() */;
  let %storage_0549: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][560]) /* ty=Storage[] */;
  let %tensor_0459: int64 = memory.alloc_tensor(%storage_0549, 0 /* ty=int64 */, meta[relay.Constant][751] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][560]) /* ty=int64 */;
  %2049 = fn (%p0458: int64, Primitive=1) -> int64 {
    multiply(%p0458, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2050 = (%tensor_0458,);
  %2051 = (%tensor_0459,);
  let %x735: () = vm.invoke_tvm_op(%2049, %2050, %2051) /* ty=() */;
  let %storage_0550: Storage[] = memory.alloc_storage(%tensor_0459, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][561]) /* ty=Storage[] */;
  let %out_090: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0550, 0 /* ty=int64 */, %shape_func_out_095, meta[relay.attrs.AllocTensorAttrs][561]) /* ty=Tensor[(?, 4), float32] */;
  %2052 = (%x733, %x494);
  %2053 = (%out_090,);
  let %x736: () = vm.invoke_tvm_op(%2043, %2052, %2053) /* ty=() */;
  let %x737: Tensor[(?, 4), float32] = %out_090;
  let %storage_0551: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][562]) /* ty=Storage[] */;
  let %tensor_0460: Tensor[(2), int32] = memory.alloc_tensor(%storage_0551, 0 /* ty=int64 */, meta[relay.Constant][752] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][562]) /* ty=Tensor[(2), int32] */;
  %2054 = fn (%p0459: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0459, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2055 = (%x737,);
  %2056 = (%tensor_0460,);
  let %x738: () = vm.invoke_tvm_op(%2054, %2055, %2056) /* ty=() */;
  let %x739: Tensor[(2), int32] = %tensor_0460;
  let %storage_0552: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][563]) /* ty=Storage[] */;
  let %tensor_0461: Tensor[(2), int32] = memory.alloc_tensor(%storage_0552, 0 /* ty=int64 */, meta[relay.Constant][753] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][563]) /* ty=Tensor[(2), int32] */;
  %2059 = fn (%p0460: Tensor[(2), int32], %p1189: Tensor[(2), int32], %p2164: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %2057 = cast_like(%p0460, %p1189) /* ty=Tensor[(2), int32] */;
    %2058 = add(%p1189, %2057) /* ty=Tensor[(2), int32] */;
    where(%p2164, %2058, %p1189) /* ty=Tensor[(2), int32] */
  };
  %2060 = (%x739, meta[relay.Constant][754] /* ty=Tensor[(2), int32] */, meta[relay.Constant][755] /* ty=Tensor[(2), bool] */);
  %2061 = (%tensor_0461,);
  let %x740: () = vm.invoke_tvm_op(%2059, %2060, %2061) /* ty=() */;
  let %x741: Tensor[(2), int32] = %tensor_0461;
  let %storage_0553: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][564]) /* ty=Storage[] */;
  let %tensor_0462: Tensor[(2), int64] = memory.alloc_tensor(%storage_0553, 0 /* ty=int64 */, meta[relay.Constant][756] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][564]) /* ty=Tensor[(2), int64] */;
  %2062 = fn (%p0461: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0461, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2063 = (%x739,);
  %2064 = (%tensor_0462,);
  let %x742: () = vm.invoke_tvm_op(%2062, %2063, %2064) /* ty=() */;
  let %x743: Tensor[(2), int64] = %tensor_0462;
  let %in_shape_087: Tensor[(2), int64] = vm.shape_of(%x737, meta[relay.attrs.ShapeOfAttrs][122]) /* ty=Tensor[(2), int64] */;
  let %in_shape_160: Tensor[(2), int32] = %x741;
  let %in_shape_241: Tensor[(2), int64] = %x743;
  let %storage_0554: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][565]) /* ty=Storage[] */;
  let %tensor_0463: Tensor[(2), int64] = memory.alloc_tensor(%storage_0554, 0 /* ty=int64 */, meta[relay.Constant][757] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][565]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_096: Tensor[(2), int64] = %tensor_0463;
  %2065 = fn (%p0462: Tensor[(?, 4), float32], %p1190: Tensor[(2), int32], %p2165: Tensor[(2), int64], %p364: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0462, %p1190, %p2165, %p364, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2066 = (%in_shape_087, %in_shape_160, %in_shape_241, meta[relay.Constant][758] /* ty=Tensor[(2), int32] */);
  %2067 = (%shape_func_out_096,);
  let %shape_func96: () = vm.shape_func(%2065, %2066, %2067, meta[relay.attrs.ShapeFuncAttrs][96]) /* ty=() */;
  let %storage_0555: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][566]) /* ty=Storage[] */;
  let %tensor_0464: int64 = memory.alloc_tensor(%storage_0555, 0 /* ty=int64 */, meta[relay.Constant][759] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][566]) /* ty=int64 */;
  %2068 = fn (%p0463: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0463) /* ty=int64 */
  };
  %2069 = (%shape_func_out_096,);
  %2070 = (%tensor_0464,);
  let %x744: () = vm.invoke_tvm_op(%2068, %2069, %2070) /* ty=() */;
  let %storage_0556: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][567]) /* ty=Storage[] */;
  let %tensor_0465: int64 = memory.alloc_tensor(%storage_0556, 0 /* ty=int64 */, meta[relay.Constant][760] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][567]) /* ty=int64 */;
  %2071 = fn (%p0464: int64, Primitive=1) -> int64 {
    multiply(%p0464, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2072 = (%tensor_0464,);
  %2073 = (%tensor_0465,);
  let %x745: () = vm.invoke_tvm_op(%2071, %2072, %2073) /* ty=() */;
  let %storage_0557: Storage[] = memory.alloc_storage(%tensor_0465, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][568]) /* ty=Storage[] */;
  let %out_091: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0557, 0 /* ty=int64 */, %shape_func_out_096, meta[relay.attrs.AllocTensorAttrs][568]) /* ty=Tensor[(?, ?), float32] */;
  %2074 = (%x737, %x741, %x743, meta[relay.Constant][758] /* ty=Tensor[(2), int32] */);
  %2075 = (%out_091,);
  let %x746: () = vm.invoke_tvm_op(%2065, %2074, %2075) /* ty=() */;
  let %x747: Tensor[(?, ?), float32] = %out_091;
  let %storage_0558: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][569]) /* ty=Storage[] */;
  let %tensor_0466: Tensor[(2), int32] = memory.alloc_tensor(%storage_0558, 0 /* ty=int64 */, meta[relay.Constant][761] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][569]) /* ty=Tensor[(2), int32] */;
  %2078 = fn (%p0465: Tensor[(2), int32], %p1191: Tensor[(2), int32], %p2166: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %2076 = cast_like(%p0465, %p1191) /* ty=Tensor[(2), int32] */;
    %2077 = add(%p1191, %2076) /* ty=Tensor[(2), int32] */;
    where(%p2166, %2077, %p1191) /* ty=Tensor[(2), int32] */
  };
  %2079 = (%x739, meta[relay.Constant][762] /* ty=Tensor[(2), int32] */, meta[relay.Constant][763] /* ty=Tensor[(2), bool] */);
  %2080 = (%tensor_0466,);
  let %x748: () = vm.invoke_tvm_op(%2078, %2079, %2080) /* ty=() */;
  let %x749: Tensor[(2), int32] = %tensor_0466;
  let %in_shape_088: Tensor[(2), int64] = vm.shape_of(%x737, meta[relay.attrs.ShapeOfAttrs][123]) /* ty=Tensor[(2), int64] */;
  let %in_shape_161: Tensor[(2), int32] = %x749;
  let %in_shape_242: Tensor[(2), int64] = %x743;
  let %storage_0559: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][570]) /* ty=Storage[] */;
  let %tensor_0467: Tensor[(2), int64] = memory.alloc_tensor(%storage_0559, 0 /* ty=int64 */, meta[relay.Constant][764] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][570]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_097: Tensor[(2), int64] = %tensor_0467;
  %2081 = fn (%p0466: Tensor[(?, 4), float32], %p1192: Tensor[(2), int32], %p2167: Tensor[(2), int64], %p365: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0466, %p1192, %p2167, %p365, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2082 = (%in_shape_088, %in_shape_161, %in_shape_242, meta[relay.Constant][765] /* ty=Tensor[(2), int32] */);
  %2083 = (%shape_func_out_097,);
  let %shape_func97: () = vm.shape_func(%2081, %2082, %2083, meta[relay.attrs.ShapeFuncAttrs][97]) /* ty=() */;
  let %storage_0560: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][571]) /* ty=Storage[] */;
  let %tensor_0468: int64 = memory.alloc_tensor(%storage_0560, 0 /* ty=int64 */, meta[relay.Constant][766] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][571]) /* ty=int64 */;
  %2084 = fn (%p0467: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0467) /* ty=int64 */
  };
  %2085 = (%shape_func_out_097,);
  %2086 = (%tensor_0468,);
  let %x750: () = vm.invoke_tvm_op(%2084, %2085, %2086) /* ty=() */;
  let %storage_0561: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][572]) /* ty=Storage[] */;
  let %tensor_0469: int64 = memory.alloc_tensor(%storage_0561, 0 /* ty=int64 */, meta[relay.Constant][767] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][572]) /* ty=int64 */;
  %2087 = fn (%p0468: int64, Primitive=1) -> int64 {
    multiply(%p0468, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2088 = (%tensor_0468,);
  %2089 = (%tensor_0469,);
  let %x751: () = vm.invoke_tvm_op(%2087, %2088, %2089) /* ty=() */;
  let %storage_0562: Storage[] = memory.alloc_storage(%tensor_0469, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][573]) /* ty=Storage[] */;
  let %out_092: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0562, 0 /* ty=int64 */, %shape_func_out_097, meta[relay.attrs.AllocTensorAttrs][573]) /* ty=Tensor[(?, ?), float32] */;
  %2090 = (%x737, %x749, %x743, meta[relay.Constant][765] /* ty=Tensor[(2), int32] */);
  %2091 = (%out_092,);
  let %x752: () = vm.invoke_tvm_op(%2081, %2090, %2091) /* ty=() */;
  let %x753: Tensor[(?, ?), float32] = %out_092;
  let %storage_0563: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][574]) /* ty=Storage[] */;
  let %tensor_0470: Tensor[(2), int32] = memory.alloc_tensor(%storage_0563, 0 /* ty=int64 */, meta[relay.Constant][768] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][574]) /* ty=Tensor[(2), int32] */;
  %2094 = fn (%p0469: Tensor[(2), int32], %p1193: Tensor[(2), int32], %p2168: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %2092 = cast_like(%p0469, %p1193) /* ty=Tensor[(2), int32] */;
    %2093 = add(%p1193, %2092) /* ty=Tensor[(2), int32] */;
    where(%p2168, %2093, %p1193) /* ty=Tensor[(2), int32] */
  };
  %2095 = (%x739, meta[relay.Constant][769] /* ty=Tensor[(2), int32] */, meta[relay.Constant][770] /* ty=Tensor[(2), bool] */);
  %2096 = (%tensor_0470,);
  let %x754: () = vm.invoke_tvm_op(%2094, %2095, %2096) /* ty=() */;
  let %x755: Tensor[(2), int32] = %tensor_0470;
  let %in_shape_089: Tensor[(2), int64] = vm.shape_of(%x737, meta[relay.attrs.ShapeOfAttrs][124]) /* ty=Tensor[(2), int64] */;
  let %in_shape_162: Tensor[(2), int32] = %x755;
  let %in_shape_243: Tensor[(2), int64] = %x743;
  let %storage_0564: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][575]) /* ty=Storage[] */;
  let %tensor_0471: Tensor[(2), int64] = memory.alloc_tensor(%storage_0564, 0 /* ty=int64 */, meta[relay.Constant][771] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][575]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_098: Tensor[(2), int64] = %tensor_0471;
  %2097 = fn (%p0470: Tensor[(?, 4), float32], %p1194: Tensor[(2), int32], %p2169: Tensor[(2), int64], %p366: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0470, %p1194, %p2169, %p366, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2098 = (%in_shape_089, %in_shape_162, %in_shape_243, meta[relay.Constant][772] /* ty=Tensor[(2), int32] */);
  %2099 = (%shape_func_out_098,);
  let %shape_func98: () = vm.shape_func(%2097, %2098, %2099, meta[relay.attrs.ShapeFuncAttrs][98]) /* ty=() */;
  let %storage_0565: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][576]) /* ty=Storage[] */;
  let %tensor_0472: int64 = memory.alloc_tensor(%storage_0565, 0 /* ty=int64 */, meta[relay.Constant][773] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][576]) /* ty=int64 */;
  %2100 = fn (%p0471: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0471) /* ty=int64 */
  };
  %2101 = (%shape_func_out_098,);
  %2102 = (%tensor_0472,);
  let %x756: () = vm.invoke_tvm_op(%2100, %2101, %2102) /* ty=() */;
  let %storage_0566: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][577]) /* ty=Storage[] */;
  let %tensor_0473: int64 = memory.alloc_tensor(%storage_0566, 0 /* ty=int64 */, meta[relay.Constant][774] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][577]) /* ty=int64 */;
  %2103 = fn (%p0472: int64, Primitive=1) -> int64 {
    multiply(%p0472, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2104 = (%tensor_0472,);
  %2105 = (%tensor_0473,);
  let %x757: () = vm.invoke_tvm_op(%2103, %2104, %2105) /* ty=() */;
  let %storage_0567: Storage[] = memory.alloc_storage(%tensor_0473, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][578]) /* ty=Storage[] */;
  let %out_093: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0567, 0 /* ty=int64 */, %shape_func_out_098, meta[relay.attrs.AllocTensorAttrs][578]) /* ty=Tensor[(?, ?), float32] */;
  %2106 = (%x737, %x755, %x743, meta[relay.Constant][772] /* ty=Tensor[(2), int32] */);
  %2107 = (%out_093,);
  let %x758: () = vm.invoke_tvm_op(%2097, %2106, %2107) /* ty=() */;
  let %x759: Tensor[(?, ?), float32] = %out_093;
  let %storage_0568: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][579]) /* ty=Storage[] */;
  let %tensor_0474: Tensor[(2), int32] = memory.alloc_tensor(%storage_0568, 0 /* ty=int64 */, meta[relay.Constant][775] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][579]) /* ty=Tensor[(2), int32] */;
  %2110 = fn (%p0473: Tensor[(2), int32], %p1195: Tensor[(2), int32], %p2170: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %2108 = cast_like(%p0473, %p1195) /* ty=Tensor[(2), int32] */;
    %2109 = add(%p1195, %2108) /* ty=Tensor[(2), int32] */;
    where(%p2170, %2109, %p1195) /* ty=Tensor[(2), int32] */
  };
  %2111 = (%x739, meta[relay.Constant][776] /* ty=Tensor[(2), int32] */, meta[relay.Constant][777] /* ty=Tensor[(2), bool] */);
  %2112 = (%tensor_0474,);
  let %x760: () = vm.invoke_tvm_op(%2110, %2111, %2112) /* ty=() */;
  let %x761: Tensor[(2), int32] = %tensor_0474;
  let %in_shape_090: Tensor[(2), int64] = vm.shape_of(%x737, meta[relay.attrs.ShapeOfAttrs][125]) /* ty=Tensor[(2), int64] */;
  let %in_shape_163: Tensor[(2), int32] = %x761;
  let %in_shape_244: Tensor[(2), int64] = %x743;
  let %storage_0569: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][580]) /* ty=Storage[] */;
  let %tensor_0475: Tensor[(2), int64] = memory.alloc_tensor(%storage_0569, 0 /* ty=int64 */, meta[relay.Constant][778] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][580]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_099: Tensor[(2), int64] = %tensor_0475;
  %2113 = fn (%p0474: Tensor[(?, 4), float32], %p1196: Tensor[(2), int32], %p2171: Tensor[(2), int64], %p367: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0474, %p1196, %p2171, %p367, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2114 = (%in_shape_090, %in_shape_163, %in_shape_244, meta[relay.Constant][779] /* ty=Tensor[(2), int32] */);
  %2115 = (%shape_func_out_099,);
  let %shape_func99: () = vm.shape_func(%2113, %2114, %2115, meta[relay.attrs.ShapeFuncAttrs][99]) /* ty=() */;
  let %storage_0570: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][581]) /* ty=Storage[] */;
  let %tensor_0476: int64 = memory.alloc_tensor(%storage_0570, 0 /* ty=int64 */, meta[relay.Constant][780] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][581]) /* ty=int64 */;
  %2116 = fn (%p0475: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0475) /* ty=int64 */
  };
  %2117 = (%shape_func_out_099,);
  %2118 = (%tensor_0476,);
  let %x762: () = vm.invoke_tvm_op(%2116, %2117, %2118) /* ty=() */;
  let %storage_0571: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][582]) /* ty=Storage[] */;
  let %tensor_0477: int64 = memory.alloc_tensor(%storage_0571, 0 /* ty=int64 */, meta[relay.Constant][781] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][582]) /* ty=int64 */;
  %2119 = fn (%p0476: int64, Primitive=1) -> int64 {
    multiply(%p0476, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2120 = (%tensor_0476,);
  %2121 = (%tensor_0477,);
  let %x763: () = vm.invoke_tvm_op(%2119, %2120, %2121) /* ty=() */;
  let %storage_0572: Storage[] = memory.alloc_storage(%tensor_0477, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][583]) /* ty=Storage[] */;
  let %out_094: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0572, 0 /* ty=int64 */, %shape_func_out_099, meta[relay.attrs.AllocTensorAttrs][583]) /* ty=Tensor[(?, ?), float32] */;
  %2122 = (%x737, %x761, %x743, meta[relay.Constant][779] /* ty=Tensor[(2), int32] */);
  %2123 = (%out_094,);
  let %x764: () = vm.invoke_tvm_op(%2113, %2122, %2123) /* ty=() */;
  let %x765: Tensor[(?, ?), float32] = %out_094;
  let %in_shape_091: Tensor[(2), int64] = vm.shape_of(%x747, meta[relay.attrs.ShapeOfAttrs][126]) /* ty=Tensor[(2), int64] */;
  let %in_shape_164: Tensor[(2), int64] = vm.shape_of(%x753, meta[relay.attrs.ShapeOfAttrs][127]) /* ty=Tensor[(2), int64] */;
  let %in_shape_245: Tensor[(2), int64] = vm.shape_of(%x759, meta[relay.attrs.ShapeOfAttrs][128]) /* ty=Tensor[(2), int64] */;
  let %in_shape_35: Tensor[(2), int64] = vm.shape_of(%x765, meta[relay.attrs.ShapeOfAttrs][129]) /* ty=Tensor[(2), int64] */;
  let %storage_0573: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][584]) /* ty=Storage[] */;
  let %tensor_0478: Tensor[(1), int64] = memory.alloc_tensor(%storage_0573, 0 /* ty=int64 */, meta[relay.Constant][782] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][584]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0100: Tensor[(1), int64] = %tensor_0478;
  %2134 = fn (%p0477: Tensor[(?, ?), float32], %p1197: Tensor[(?, ?), float32], %p2172: Tensor[(?, ?), float32], %p368: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), bool] {
    %2124 = take(%p0477, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %2125 = take(%p1197, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %2126 = subtract(%2124, %2125) /* ty=Tensor[(?), float32] */;
    %2127 = greater_equal(%2126, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
    %2128 = cast(%2127, dtype="bool") /* ty=Tensor[(?), bool] */;
    %2129 = take(%p2172, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %2130 = take(%p368, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %2131 = subtract(%2129, %2130) /* ty=Tensor[(?), float32] */;
    %2132 = greater_equal(%2131, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
    %2133 = cast(%2132, dtype="bool") /* ty=Tensor[(?), bool] */;
    logical_and(%2128, %2133) /* ty=Tensor[(?), bool] */
  };
  %2135 = (%in_shape_091, %in_shape_164, %in_shape_245, %in_shape_35);
  %2136 = (%shape_func_out_0100,);
  let %shape_func100: () = vm.shape_func(%2134, %2135, %2136, meta[relay.attrs.ShapeFuncAttrs][100]) /* ty=() */;
  let %storage_0574: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][585]) /* ty=Storage[] */;
  let %tensor_0479: int64 = memory.alloc_tensor(%storage_0574, 0 /* ty=int64 */, meta[relay.Constant][783] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][585]) /* ty=int64 */;
  %2137 = fn (%p0478: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0478) /* ty=int64 */
  };
  %2138 = (%shape_func_out_0100,);
  %2139 = (%tensor_0479,);
  let %x766: () = vm.invoke_tvm_op(%2137, %2138, %2139) /* ty=() */;
  let %storage_0575: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][586]) /* ty=Storage[] */;
  let %tensor_0480: int64 = memory.alloc_tensor(%storage_0575, 0 /* ty=int64 */, meta[relay.Constant][784] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][586]) /* ty=int64 */;
  %2140 = fn (%p0479: int64, Primitive=1) -> int64 {
    multiply(%p0479, 1 /* ty=int64 */) /* ty=int64 */
  };
  %2141 = (%tensor_0479,);
  %2142 = (%tensor_0480,);
  let %x767: () = vm.invoke_tvm_op(%2140, %2141, %2142) /* ty=() */;
  let %storage_0576: Storage[] = memory.alloc_storage(%tensor_0480, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][587]) /* ty=Storage[] */;
  let %out_095: Tensor[(?), bool] = memory.alloc_tensor(%storage_0576, 0 /* ty=int64 */, %shape_func_out_0100, meta[relay.attrs.AllocTensorAttrs][587]) /* ty=Tensor[(?), bool] */;
  %2143 = (%x747, %x753, %x759, %x765);
  %2144 = (%out_095,);
  let %x768: () = vm.invoke_tvm_op(%2134, %2143, %2144) /* ty=() */;
  let %x769: Tensor[(?), bool] = %out_095;
  let %in_shape_092: Tensor[(?), bool] = %x769;
  let %storage_0577: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][588]) /* ty=Storage[] */;
  let %tensor_0481: Tensor[(2), int64] = memory.alloc_tensor(%storage_0577, 0 /* ty=int64 */, meta[relay.Constant][785] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][588]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0101: Tensor[(2), int64] = %tensor_0481;
  %2145 = fn (%p0480: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0480) /* ty=Tensor[(?, 1), int32] */
  };
  %2146 = (%in_shape_092,);
  %2147 = (%shape_func_out_0101,);
  let %shape_func101: () = vm.shape_func(%2145, %2146, %2147, meta[relay.attrs.ShapeFuncAttrs][101]) /* ty=() */;
  let %storage_0578: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][589]) /* ty=Storage[] */;
  let %tensor_0482: int64 = memory.alloc_tensor(%storage_0578, 0 /* ty=int64 */, meta[relay.Constant][786] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][589]) /* ty=int64 */;
  %2148 = fn (%p0481: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0481) /* ty=int64 */
  };
  %2149 = (%shape_func_out_0101,);
  %2150 = (%tensor_0482,);
  let %x770: () = vm.invoke_tvm_op(%2148, %2149, %2150) /* ty=() */;
  let %storage_0579: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][590]) /* ty=Storage[] */;
  let %tensor_0483: int64 = memory.alloc_tensor(%storage_0579, 0 /* ty=int64 */, meta[relay.Constant][787] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][590]) /* ty=int64 */;
  %2151 = fn (%p0482: int64, Primitive=1) -> int64 {
    multiply(%p0482, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2152 = (%tensor_0482,);
  %2153 = (%tensor_0483,);
  let %x771: () = vm.invoke_tvm_op(%2151, %2152, %2153) /* ty=() */;
  let %storage_0580: Storage[] = memory.alloc_storage(%tensor_0483, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][591]) /* ty=Storage[] */;
  let %out_096: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0580, 0 /* ty=int64 */, %shape_func_out_0101, meta[relay.attrs.AllocTensorAttrs][591]) /* ty=Tensor[(?, 1), int32] */;
  %2154 = (%x769,);
  %2155 = (%out_096,);
  let %x772: () = vm.invoke_tvm_op(%2145, %2154, %2155) /* ty=() */;
  let %x773: Tensor[(?, 1), int32] = %out_096;
  let %in_shape_093: Tensor[(2), int64] = vm.shape_of(%x773, meta[relay.attrs.ShapeOfAttrs][130]) /* ty=Tensor[(2), int64] */;
  let %storage_0581: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][592]) /* ty=Storage[] */;
  let %tensor_0484: Tensor[(1), int64] = memory.alloc_tensor(%storage_0581, 0 /* ty=int64 */, meta[relay.Constant][788] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][592]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0102: Tensor[(1), int64] = %tensor_0484;
  %2159 = fn (%p0483: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int64] {
    %2156 = split(%p0483, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %2157 = %2156.0;
    %2158 = squeeze(%2157, axis=[1]) /* ty=Tensor[(?), int32] */;
    cast(%2158, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %2160 = (%in_shape_093,);
  %2161 = (%shape_func_out_0102,);
  let %shape_func102: () = vm.shape_func(%2159, %2160, %2161, meta[relay.attrs.ShapeFuncAttrs][102]) /* ty=() */;
  let %storage_0582: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][593]) /* ty=Storage[] */;
  let %tensor_0485: int64 = memory.alloc_tensor(%storage_0582, 0 /* ty=int64 */, meta[relay.Constant][789] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][593]) /* ty=int64 */;
  %2162 = fn (%p0484: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0484) /* ty=int64 */
  };
  %2163 = (%shape_func_out_0102,);
  %2164 = (%tensor_0485,);
  let %x774: () = vm.invoke_tvm_op(%2162, %2163, %2164) /* ty=() */;
  let %storage_0583: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][594]) /* ty=Storage[] */;
  let %tensor_0486: int64 = memory.alloc_tensor(%storage_0583, 0 /* ty=int64 */, meta[relay.Constant][790] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][594]) /* ty=int64 */;
  %2165 = fn (%p0485: int64, Primitive=1) -> int64 {
    multiply(%p0485, 8 /* ty=int64 */) /* ty=int64 */
  };
  %2166 = (%tensor_0485,);
  %2167 = (%tensor_0486,);
  let %x775: () = vm.invoke_tvm_op(%2165, %2166, %2167) /* ty=() */;
  let %storage_0584: Storage[] = memory.alloc_storage(%tensor_0486, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][595]) /* ty=Storage[] */;
  let %out_097: Tensor[(?), int64] = memory.alloc_tensor(%storage_0584, 0 /* ty=int64 */, %shape_func_out_0102, meta[relay.attrs.AllocTensorAttrs][595]) /* ty=Tensor[(?), int64] */;
  %2168 = (%x773,);
  %2169 = (%out_097,);
  let %x776: () = vm.invoke_tvm_op(%2159, %2168, %2169) /* ty=() */;
  let %x777: Tensor[(?), int64] = %out_097;
  let %in_shape_094: Tensor[(2), int64] = vm.shape_of(%x461, meta[relay.attrs.ShapeOfAttrs][131]) /* ty=Tensor[(2), int64] */;
  let %in_shape_165: Tensor[(1), int64] = vm.shape_of(%x494, meta[relay.attrs.ShapeOfAttrs][132]) /* ty=Tensor[(1), int64] */;
  let %in_shape_246: Tensor[(1), int64] = vm.shape_of(%x777, meta[relay.attrs.ShapeOfAttrs][133]) /* ty=Tensor[(1), int64] */;
  let %storage_0585: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][596]) /* ty=Storage[] */;
  let %tensor_0487: Tensor[(1), int64] = memory.alloc_tensor(%storage_0585, 0 /* ty=int64 */, meta[relay.Constant][791] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][596]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0103: Tensor[(1), int64] = %tensor_0487;
  %2174 = fn (%p0486: Tensor[(?, ?), int64], %p1198: Tensor[(?), int64], %p2173: Tensor[(?), int64], Primitive=1) -> Tensor[(?), int64] {
    %2170 = reshape(%p0486, newshape=[-1]) /* ty=Tensor[(?), int64] */;
    %2171 = (%2170, %p1198);
    %2172 = adv_index(%2171) /* ty=Tensor[(?), int64] */;
    %2173 = (%2172, %p2173);
    adv_index(%2173) /* ty=Tensor[(?), int64] */
  };
  %2175 = (%in_shape_094, %in_shape_165, %in_shape_246);
  %2176 = (%shape_func_out_0103,);
  let %shape_func103: () = vm.shape_func(%2174, %2175, %2176, meta[relay.attrs.ShapeFuncAttrs][103]) /* ty=() */;
  let %storage_0586: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][597]) /* ty=Storage[] */;
  let %tensor_0488: int64 = memory.alloc_tensor(%storage_0586, 0 /* ty=int64 */, meta[relay.Constant][792] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][597]) /* ty=int64 */;
  %2177 = fn (%p0487: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0487) /* ty=int64 */
  };
  %2178 = (%shape_func_out_0103,);
  %2179 = (%tensor_0488,);
  let %x778: () = vm.invoke_tvm_op(%2177, %2178, %2179) /* ty=() */;
  let %storage_0587: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][598]) /* ty=Storage[] */;
  let %tensor_0489: int64 = memory.alloc_tensor(%storage_0587, 0 /* ty=int64 */, meta[relay.Constant][793] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][598]) /* ty=int64 */;
  %2180 = fn (%p0488: int64, Primitive=1) -> int64 {
    multiply(%p0488, 8 /* ty=int64 */) /* ty=int64 */
  };
  %2181 = (%tensor_0488,);
  %2182 = (%tensor_0489,);
  let %x779: () = vm.invoke_tvm_op(%2180, %2181, %2182) /* ty=() */;
  let %storage_0588: Storage[] = memory.alloc_storage(%tensor_0489, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][599]) /* ty=Storage[] */;
  let %out_098: Tensor[(?), int64] = memory.alloc_tensor(%storage_0588, 0 /* ty=int64 */, %shape_func_out_0103, meta[relay.attrs.AllocTensorAttrs][599]) /* ty=Tensor[(?), int64] */;
  %2183 = (%x461, %x494, %x777);
  %2184 = (%out_098,);
  let %x780: () = vm.invoke_tvm_op(%2174, %2183, %2184) /* ty=() */;
  let %x781: Tensor[(?), int64] = %out_098;
  let %x782: (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) = let %in_shape_095: Tensor[(1), int64] = vm.shape_of(%x482, meta[relay.attrs.ShapeOfAttrs][134]) /* ty=Tensor[(1), int64] */;
  let %in_shape_166: Tensor[(1), int64] = vm.shape_of(%x494, meta[relay.attrs.ShapeOfAttrs][135]) /* ty=Tensor[(1), int64] */;
  let %in_shape_247: Tensor[(1), int64] = vm.shape_of(%x777, meta[relay.attrs.ShapeOfAttrs][136]) /* ty=Tensor[(1), int64] */;
  let %storage_0589: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][600]) /* ty=Storage[] */;
  let %tensor_0490: Tensor[(1), int64] = memory.alloc_tensor(%storage_0589, 0 /* ty=int64 */, meta[relay.Constant][794] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][600]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0104: Tensor[(1), int64] = %tensor_0490;
  %2188 = fn (%p0489: Tensor[(?), float32], %p1199: Tensor[(?), int64], %p2174: Tensor[(?), int64], Primitive=1) -> Tensor[(?), float32] {
    %2185 = (%p0489, %p1199);
    %2186 = adv_index(%2185) /* ty=Tensor[(?), float32] */;
    %2187 = (%2186, %p2174);
    adv_index(%2187) /* ty=Tensor[(?), float32] */
  };
  %2189 = (%in_shape_095, %in_shape_166, %in_shape_247);
  %2190 = (%shape_func_out_0104,);
  let %shape_func104: () = vm.shape_func(%2188, %2189, %2190, meta[relay.attrs.ShapeFuncAttrs][104]) /* ty=() */;
  let %storage_0590: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][601]) /* ty=Storage[] */;
  let %tensor_0491: int64 = memory.alloc_tensor(%storage_0590, 0 /* ty=int64 */, meta[relay.Constant][795] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][601]) /* ty=int64 */;
  %2191 = fn (%p0490: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0490) /* ty=int64 */
  };
  %2192 = (%shape_func_out_0104,);
  %2193 = (%tensor_0491,);
  let %x783: () = vm.invoke_tvm_op(%2191, %2192, %2193) /* ty=() */;
  let %storage_0591: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][602]) /* ty=Storage[] */;
  let %tensor_0492: int64 = memory.alloc_tensor(%storage_0591, 0 /* ty=int64 */, meta[relay.Constant][796] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][602]) /* ty=int64 */;
  %2194 = fn (%p0491: int64, Primitive=1) -> int64 {
    multiply(%p0491, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2195 = (%tensor_0491,);
  %2196 = (%tensor_0492,);
  let %x784: () = vm.invoke_tvm_op(%2194, %2195, %2196) /* ty=() */;
  let %storage_0592: Storage[] = memory.alloc_storage(%tensor_0492, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][603]) /* ty=Storage[] */;
  let %out_099: Tensor[(?), float32] = memory.alloc_tensor(%storage_0592, 0 /* ty=int64 */, %shape_func_out_0104, meta[relay.attrs.AllocTensorAttrs][603]) /* ty=Tensor[(?), float32] */;
  %2197 = (%x482, %x494, %x777);
  %2198 = (%out_099,);
  let %x785: () = vm.invoke_tvm_op(%2188, %2197, %2198) /* ty=() */;
  let %x786: Tensor[(?), float32] = %out_099;
  let %x787: (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) = let %in_shape_096: Tensor[(2), int64] = vm.shape_of(%x737, meta[relay.attrs.ShapeOfAttrs][137]) /* ty=Tensor[(2), int64] */;
  let %in_shape_167: Tensor[(1), int64] = vm.shape_of(%x777, meta[relay.attrs.ShapeOfAttrs][138]) /* ty=Tensor[(1), int64] */;
  let %storage_0593: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][604]) /* ty=Storage[] */;
  let %tensor_0493: Tensor[(2), int64] = memory.alloc_tensor(%storage_0593, 0 /* ty=int64 */, meta[relay.Constant][797] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][604]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0105: Tensor[(2), int64] = %tensor_0493;
  %2200 = fn (%p0492: Tensor[(?, 4), float32], %p1200: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 4), float32] {
    %2199 = (%p0492, %p1200);
    adv_index(%2199) /* ty=Tensor[(?, 4), float32] */
  };
  %2201 = (%in_shape_096, %in_shape_167);
  %2202 = (%shape_func_out_0105,);
  let %shape_func105: () = vm.shape_func(%2200, %2201, %2202, meta[relay.attrs.ShapeFuncAttrs][105]) /* ty=() */;
  let %storage_0594: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][605]) /* ty=Storage[] */;
  let %tensor_0494: int64 = memory.alloc_tensor(%storage_0594, 0 /* ty=int64 */, meta[relay.Constant][798] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][605]) /* ty=int64 */;
  %2203 = fn (%p0493: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0493) /* ty=int64 */
  };
  %2204 = (%shape_func_out_0105,);
  %2205 = (%tensor_0494,);
  let %x788: () = vm.invoke_tvm_op(%2203, %2204, %2205) /* ty=() */;
  let %storage_0595: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][606]) /* ty=Storage[] */;
  let %tensor_0495: int64 = memory.alloc_tensor(%storage_0595, 0 /* ty=int64 */, meta[relay.Constant][799] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][606]) /* ty=int64 */;
  %2206 = fn (%p0494: int64, Primitive=1) -> int64 {
    multiply(%p0494, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2207 = (%tensor_0494,);
  %2208 = (%tensor_0495,);
  let %x789: () = vm.invoke_tvm_op(%2206, %2207, %2208) /* ty=() */;
  let %storage_0596: Storage[] = memory.alloc_storage(%tensor_0495, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][607]) /* ty=Storage[] */;
  let %out_0100: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0596, 0 /* ty=int64 */, %shape_func_out_0105, meta[relay.attrs.AllocTensorAttrs][607]) /* ty=Tensor[(?, 4), float32] */;
  %2209 = (%x737, %x777);
  %2210 = (%out_0100,);
  let %x790: () = vm.invoke_tvm_op(%2200, %2209, %2210) /* ty=() */;
  let %x791: Tensor[(?, 4), float32] = %out_0100;
  let %storage_0597: Storage[] = memory.alloc_storage(1 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][608]) /* ty=Storage[] */;
  let %tensor_0496: bool = memory.alloc_tensor(%storage_0597, 0 /* ty=int64 */, meta[relay.Constant][800] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][608]) /* ty=bool */;
  %2212 = fn (%p0495: Tensor[(?, 4), float32], Primitive=1) -> bool {
    %2211 = ndarray_size(%p0495, dtype="int32") /* ty=int32 */;
    equal(%2211, 0 /* ty=int32 */) /* ty=bool */
  };
  %2213 = (%x791,);
  %2214 = (%tensor_0496,);
  let %x792: () = vm.invoke_tvm_op(%2212, %2213, %2214) /* ty=() */;
  let %x793: bool = %tensor_0496;
  let %x794: Tensor[(?), int64] = if (%x793) {
    let %storage_0598: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][609]) /* ty=Storage[] */;
    let %tensor_0497: Tensor[(1), int64] = memory.alloc_tensor(%storage_0598, 0 /* ty=int64 */, meta[relay.Constant][801] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][609]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0106: Tensor[(1), int64] = %tensor_0497;
    %2215 = fn (Primitive=1) -> Tensor[(?), int64] {
      zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
    };
    %2216 = ();
    %2217 = (%shape_func_out_0106,);
    let %shape_func106: () = vm.shape_func(%2215, %2216, %2217, meta[relay.attrs.ShapeFuncAttrs][106]) /* ty=() */;
    let %storage_0599: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][610]) /* ty=Storage[] */;
    let %tensor_0498: int64 = memory.alloc_tensor(%storage_0599, 0 /* ty=int64 */, meta[relay.Constant][802] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][610]) /* ty=int64 */;
    %2218 = fn (%p0496: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0496) /* ty=int64 */
    };
    %2219 = (%shape_func_out_0106,);
    %2220 = (%tensor_0498,);
    let %x795: () = vm.invoke_tvm_op(%2218, %2219, %2220) /* ty=() */;
    let %storage_0600: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][611]) /* ty=Storage[] */;
    let %tensor_0499: int64 = memory.alloc_tensor(%storage_0600, 0 /* ty=int64 */, meta[relay.Constant][803] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][611]) /* ty=int64 */;
    %2221 = fn (%p0497: int64, Primitive=1) -> int64 {
      multiply(%p0497, 8 /* ty=int64 */) /* ty=int64 */
    };
    %2222 = (%tensor_0498,);
    %2223 = (%tensor_0499,);
    let %x796: () = vm.invoke_tvm_op(%2221, %2222, %2223) /* ty=() */;
    let %storage_0601: Storage[] = memory.alloc_storage(%tensor_0499, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][612]) /* ty=Storage[] */;
    let %out_0101: Tensor[(?), int64] = memory.alloc_tensor(%storage_0601, 0 /* ty=int64 */, %shape_func_out_0106, meta[relay.attrs.AllocTensorAttrs][612]) /* ty=Tensor[(?), int64] */;
    %2224 = ();
    %2225 = (%out_0101,);
    let %x797: () = vm.invoke_tvm_op(%2215, %2224, %2225) /* ty=() */;
    let %x798: Tensor[(?), int64] = %out_0101;
    %x798
  } else {
    let %storage_0602: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][613]) /* ty=Storage[] */;
    let %tensor_0500: float32 = memory.alloc_tensor(%storage_0602, 0 /* ty=int64 */, meta[relay.Constant][804] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][613]) /* ty=float32 */;
    %2226 = fn (%p0498: Tensor[(?), float32], Primitive=1) -> float32 {
      min(%p0498) /* ty=float32 */
    };
    %2227 = (%x786,);
    %2228 = (%tensor_0500,);
    let %x799: () = vm.invoke_tvm_op(%2226, %2227, %2228) /* ty=() */;
    let %x800: float32 = %tensor_0500;
    let %in_shape_097: Tensor[(1), int64] = vm.shape_of(%x786, meta[relay.attrs.ShapeOfAttrs][139]) /* ty=Tensor[(1), int64] */;
    let %storage_0603: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][614]) /* ty=Storage[] */;
    let %tensor_0501: Tensor[(1), int64] = memory.alloc_tensor(%storage_0603, 0 /* ty=int64 */, meta[relay.Constant][805] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][614]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0107: Tensor[(1), int64] = %tensor_0501;
    %2230 = fn (%p0499: Tensor[(?), float32], %p1201: float32, Primitive=1) -> Tensor[(?), float32] {
      %2229 = subtract(%p0499, %p1201) /* ty=Tensor[(?), float32] */;
      add(%2229, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */
    };
    %2231 = (%in_shape_097, 1334353056 /* ty=int64 */);
    %2232 = (%shape_func_out_0107,);
    let %shape_func107: () = vm.shape_func(%2230, %2231, %2232, meta[relay.attrs.ShapeFuncAttrs][107]) /* ty=() */;
    let %storage_0604: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][615]) /* ty=Storage[] */;
    let %tensor_0502: int64 = memory.alloc_tensor(%storage_0604, 0 /* ty=int64 */, meta[relay.Constant][806] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][615]) /* ty=int64 */;
    %2233 = fn (%p0500: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0500) /* ty=int64 */
    };
    %2234 = (%shape_func_out_0107,);
    %2235 = (%tensor_0502,);
    let %x801: () = vm.invoke_tvm_op(%2233, %2234, %2235) /* ty=() */;
    let %storage_0605: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][616]) /* ty=Storage[] */;
    let %tensor_0503: int64 = memory.alloc_tensor(%storage_0605, 0 /* ty=int64 */, meta[relay.Constant][807] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][616]) /* ty=int64 */;
    %2236 = fn (%p0501: int64, Primitive=1) -> int64 {
      multiply(%p0501, 4 /* ty=int64 */) /* ty=int64 */
    };
    %2237 = (%tensor_0502,);
    %2238 = (%tensor_0503,);
    let %x802: () = vm.invoke_tvm_op(%2236, %2237, %2238) /* ty=() */;
    let %storage_0606: Storage[] = memory.alloc_storage(%tensor_0503, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][617]) /* ty=Storage[] */;
    let %out_0102: Tensor[(?), float32] = memory.alloc_tensor(%storage_0606, 0 /* ty=int64 */, %shape_func_out_0107, meta[relay.attrs.AllocTensorAttrs][617]) /* ty=Tensor[(?), float32] */;
    %2239 = (%x786, %x800);
    %2240 = (%out_0102,);
    let %x803: () = vm.invoke_tvm_op(%2230, %2239, %2240) /* ty=() */;
    let %x804: Tensor[(?), float32] = %out_0102;
    let %in_shape_098: Tensor[(1), int64] = vm.shape_of(%x781, meta[relay.attrs.ShapeOfAttrs][140]) /* ty=Tensor[(1), int64] */;
    let %in_shape_168: Tensor[(1), int64] = vm.shape_of(%x804, meta[relay.attrs.ShapeOfAttrs][141]) /* ty=Tensor[(1), int64] */;
    let %in_shape_248: Tensor[(2), int64] = vm.shape_of(%x791, meta[relay.attrs.ShapeOfAttrs][142]) /* ty=Tensor[(2), int64] */;
    let %storage_0607: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][618]) /* ty=Storage[] */;
    let %tensor_0504: Tensor[(3), int64] = memory.alloc_tensor(%storage_0607, 0 /* ty=int64 */, meta[relay.Constant][808] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][618]) /* ty=Tensor[(3), int64] */;
    let %shape_func_out_0108: Tensor[(3), int64] = %tensor_0504;
    %2246 = fn (%p0502: Tensor[(?), int64], %p1202: Tensor[(?), float32], %p2175: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(1, ?, 6), float32] {
      %2241 = expand_dims(%p0502, axis=-1) /* ty=Tensor[(?, 1), int64] */;
      %2242 = cast(%2241, dtype="float32") /* ty=Tensor[(?, 1), float32] */;
      %2243 = expand_dims(%p1202, axis=-1) /* ty=Tensor[(?, 1), float32] */;
      %2244 = (%2242, %2243, %p2175);
      %2245 = concatenate(%2244, axis=-1) /* ty=Tensor[(?, 6), float32] */;
      expand_dims(%2245, axis=0) /* ty=Tensor[(1, ?, 6), float32] */
    };
    %2247 = (%in_shape_098, %in_shape_168, %in_shape_248);
    %2248 = (%shape_func_out_0108,);
    let %shape_func108: () = vm.shape_func(%2246, %2247, %2248, meta[relay.attrs.ShapeFuncAttrs][108]) /* ty=() */;
    let %storage_0608: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][619]) /* ty=Storage[] */;
    let %tensor_0505: int64 = memory.alloc_tensor(%storage_0608, 0 /* ty=int64 */, meta[relay.Constant][809] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][619]) /* ty=int64 */;
    %2249 = fn (%p0503: Tensor[(3), int64], Primitive=1) -> int64 {
      prod(%p0503) /* ty=int64 */
    };
    %2250 = (%shape_func_out_0108,);
    %2251 = (%tensor_0505,);
    let %x805: () = vm.invoke_tvm_op(%2249, %2250, %2251) /* ty=() */;
    let %storage_0609: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][620]) /* ty=Storage[] */;
    let %tensor_0506: int64 = memory.alloc_tensor(%storage_0609, 0 /* ty=int64 */, meta[relay.Constant][810] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][620]) /* ty=int64 */;
    %2252 = fn (%p0504: int64, Primitive=1) -> int64 {
      multiply(%p0504, 4 /* ty=int64 */) /* ty=int64 */
    };
    %2253 = (%tensor_0505,);
    %2254 = (%tensor_0506,);
    let %x806: () = vm.invoke_tvm_op(%2252, %2253, %2254) /* ty=() */;
    let %storage_0610: Storage[] = memory.alloc_storage(%tensor_0506, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][621]) /* ty=Storage[] */;
    let %out_0103: Tensor[(1, ?, 6), float32] = memory.alloc_tensor(%storage_0610, 0 /* ty=int64 */, %shape_func_out_0108, meta[relay.attrs.AllocTensorAttrs][621]) /* ty=Tensor[(1, ?, 6), float32] */;
    %2255 = (%x781, %x804, %x791);
    %2256 = (%out_0103,);
    let %x807: () = vm.invoke_tvm_op(%2246, %2255, %2256) /* ty=() */;
    let %x808: Tensor[(1, ?, 6), float32] = %out_0103;
    let %storage_0611: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][622]) /* ty=Storage[] */;
    let %tensor_0507: Tensor[(1), int32] = memory.alloc_tensor(%storage_0611, 0 /* ty=int64 */, meta[relay.Constant][811] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][622]) /* ty=Tensor[(1), int32] */;
    %2257 = fn (%p0505: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
      shape_of(%p0505, dtype="int32") /* ty=Tensor[(1), int32] */
    };
    %2258 = (%x804,);
    %2259 = (%tensor_0507,);
    let %x809: () = vm.invoke_tvm_op(%2257, %2258, %2259) /* ty=() */;
    let %x810: Tensor[(1), int32] = %tensor_0507;
    let %storage_0612: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][623]) /* ty=Storage[] */;
    let %tensor_0508: int32 = memory.alloc_tensor(%storage_0612, 0 /* ty=int64 */, meta[relay.Constant][812] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][623]) /* ty=int32 */;
    %2260 = fn (%p0506: Tensor[(1), int32], Primitive=1) -> int32 {
      squeeze(%p0506) /* ty=int32 */
    };
    %2261 = (%x810,);
    %2262 = (%tensor_0508,);
    let %x811: () = vm.invoke_tvm_op(%2260, %2261, %2262) /* ty=() */;
    let %x812: int32 = %tensor_0508;
    let %in_shape_169: int32 = %x812;
    let %storage_0613: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][624]) /* ty=Storage[] */;
    let %tensor_0509: Tensor[(1), int64] = memory.alloc_tensor(%storage_0613, 0 /* ty=int64 */, meta[relay.Constant][813] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][624]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0109: Tensor[(1), int64] = %tensor_0509;
    %2263 = fn (%p0507: int32, %p1203: int32, %p2176: int32, Primitive=1) -> Tensor[(?), int32] {
      arange(%p0507, %p1203, %p2176, start=meta[relay.Constant][814], stop=meta[relay.Call][1], step=meta[relay.Constant][815], dtype="int32") /* ty=Tensor[(?), int32] */
    };
    %2264 = (0 /* ty=int32 */, %in_shape_169, 1 /* ty=int32 */);
    %2265 = (%shape_func_out_0109,);
    let %shape_func109: () = vm.shape_func(%2263, %2264, %2265, meta[relay.attrs.ShapeFuncAttrs][109]) /* ty=() */;
    let %storage_0614: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][625]) /* ty=Storage[] */;
    let %tensor_0510: int64 = memory.alloc_tensor(%storage_0614, 0 /* ty=int64 */, meta[relay.Constant][816] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][625]) /* ty=int64 */;
    %2266 = fn (%p0508: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0508) /* ty=int64 */
    };
    %2267 = (%shape_func_out_0109,);
    %2268 = (%tensor_0510,);
    let %x813: () = vm.invoke_tvm_op(%2266, %2267, %2268) /* ty=() */;
    let %storage_0615: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][626]) /* ty=Storage[] */;
    let %tensor_0511: int64 = memory.alloc_tensor(%storage_0615, 0 /* ty=int64 */, meta[relay.Constant][817] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][626]) /* ty=int64 */;
    %2269 = fn (%p0509: int64, Primitive=1) -> int64 {
      multiply(%p0509, 4 /* ty=int64 */) /* ty=int64 */
    };
    %2270 = (%tensor_0510,);
    %2271 = (%tensor_0511,);
    let %x814: () = vm.invoke_tvm_op(%2269, %2270, %2271) /* ty=() */;
    let %storage_0616: Storage[] = memory.alloc_storage(%tensor_0511, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][627]) /* ty=Storage[] */;
    let %out_0104: Tensor[(?), int32] = memory.alloc_tensor(%storage_0616, 0 /* ty=int64 */, %shape_func_out_0109, meta[relay.attrs.AllocTensorAttrs][627]) /* ty=Tensor[(?), int32] */;
    %2272 = (0 /* ty=int32 */, %x812, 1 /* ty=int32 */);
    %2273 = (%out_0104,);
    let %x815: () = vm.invoke_tvm_op(%2263, %2272, %2273) /* ty=() */;
    let %x816: Tensor[(?), int32] = %out_0104;
    let %in_shape_099: Tensor[(1), int64] = vm.shape_of(%x816, meta[relay.attrs.ShapeOfAttrs][143]) /* ty=Tensor[(1), int64] */;
    let %storage_0617: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][628]) /* ty=Storage[] */;
    let %tensor_0512: Tensor[(2), int64] = memory.alloc_tensor(%storage_0617, 0 /* ty=int64 */, meta[relay.Constant][818] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][628]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_0110: Tensor[(2), int64] = %tensor_0512;
    %2274 = fn (%p0510: Tensor[(?), int32], Primitive=1) -> Tensor[(1, ?), int32] {
      expand_dims(%p0510, axis=0) /* ty=Tensor[(1, ?), int32] */
    };
    %2275 = (%in_shape_099,);
    %2276 = (%shape_func_out_0110,);
    let %shape_func110: () = vm.shape_func(%2274, %2275, %2276, meta[relay.attrs.ShapeFuncAttrs][110]) /* ty=() */;
    let %storage_0618: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][629]) /* ty=Storage[] */;
    let %tensor_0513: int64 = memory.alloc_tensor(%storage_0618, 0 /* ty=int64 */, meta[relay.Constant][819] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][629]) /* ty=int64 */;
    %2277 = fn (%p0511: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0511) /* ty=int64 */
    };
    %2278 = (%shape_func_out_0110,);
    %2279 = (%tensor_0513,);
    let %x817: () = vm.invoke_tvm_op(%2277, %2278, %2279) /* ty=() */;
    let %storage_0619: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][630]) /* ty=Storage[] */;
    let %tensor_0514: int64 = memory.alloc_tensor(%storage_0619, 0 /* ty=int64 */, meta[relay.Constant][820] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][630]) /* ty=int64 */;
    %2280 = fn (%p0512: int64, Primitive=1) -> int64 {
      multiply(%p0512, 4 /* ty=int64 */) /* ty=int64 */
    };
    %2281 = (%tensor_0513,);
    %2282 = (%tensor_0514,);
    let %x818: () = vm.invoke_tvm_op(%2280, %2281, %2282) /* ty=() */;
    let %storage_0620: Storage[] = memory.alloc_storage(%tensor_0514, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][631]) /* ty=Storage[] */;
    let %out_0105: Tensor[(1, ?), int32] = memory.alloc_tensor(%storage_0620, 0 /* ty=int64 */, %shape_func_out_0110, meta[relay.attrs.AllocTensorAttrs][631]) /* ty=Tensor[(1, ?), int32] */;
    %2283 = (%x816,);
    %2284 = (%out_0105,);
    let %x819: () = vm.invoke_tvm_op(%2274, %2283, %2284) /* ty=() */;
    let %x820: Tensor[(1, ?), int32] = %out_0105;
    let %in_shape_0100: Tensor[(3), int64] = vm.shape_of(%x808, meta[relay.attrs.ShapeOfAttrs][144]) /* ty=Tensor[(3), int64] */;
    let %in_shape_249: Tensor[(2), int64] = vm.shape_of(%x820, meta[relay.attrs.ShapeOfAttrs][145]) /* ty=Tensor[(2), int64] */;
    let %storage_0621: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][632]) /* ty=Storage[] */;
    let %tensor_0515: Tensor[(2), int64] = memory.alloc_tensor(%storage_0621, 0 /* ty=int64 */, meta[relay.Constant][821] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][632]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_0111: Tensor[(2), int64] = %tensor_0515;
    let %storage_18: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][633]) /* ty=Storage[] */;
    let %tensor_17: Tensor[(2), int64] = memory.alloc_tensor(%storage_18, 0 /* ty=int64 */, meta[relay.Constant][822] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][633]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_11: Tensor[(2), int64] = %tensor_17;
    %2285 = fn (%p0513: Tensor[(1, ?, 6), float32], %p1204: Tensor[(1), int32], %p2177: Tensor[(1, ?), int32], %p369: int32, %p46: float32, Primitive=1) -> (Tensor[(1, ?), int32], Tensor[(1, 1), int32]) {
      vision.non_max_suppression(%p0513, %p1204, %p2177, %p369, %p46, meta[relay.attrs.NonMaximumSuppressionAttrs][1]) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */
    };
    %2286 = (%in_shape_0100, meta[relay.Constant][823] /* ty=Tensor[(1), int64] */, %in_shape_249, 1334353056 /* ty=int64 */, 1439277936 /* ty=int64 */);
    %2287 = (%shape_func_out_0111, %shape_func_out_11);
    let %shape_func111: () = vm.shape_func(%2285, %2286, %2287, meta[relay.attrs.ShapeFuncAttrs][111]) /* ty=() */;
    let %storage_0622: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][634]) /* ty=Storage[] */;
    let %tensor_0516: int64 = memory.alloc_tensor(%storage_0622, 0 /* ty=int64 */, meta[relay.Constant][824] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][634]) /* ty=int64 */;
    %2288 = fn (%p0514: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0514) /* ty=int64 */
    };
    %2289 = (%shape_func_out_0111,);
    %2290 = (%tensor_0516,);
    let %x821: () = vm.invoke_tvm_op(%2288, %2289, %2290) /* ty=() */;
    let %storage_0623: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][635]) /* ty=Storage[] */;
    let %tensor_0517: int64 = memory.alloc_tensor(%storage_0623, 0 /* ty=int64 */, meta[relay.Constant][825] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][635]) /* ty=int64 */;
    %2291 = fn (%p0515: int64, Primitive=1) -> int64 {
      multiply(%p0515, 4 /* ty=int64 */) /* ty=int64 */
    };
    %2292 = (%tensor_0516,);
    %2293 = (%tensor_0517,);
    let %x822: () = vm.invoke_tvm_op(%2291, %2292, %2293) /* ty=() */;
    let %storage_0624: Storage[] = memory.alloc_storage(%tensor_0517, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][636]) /* ty=Storage[] */;
    let %storage_0625: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][637]) /* ty=Storage[] */;
    let %tensor_0518: int64 = memory.alloc_tensor(%storage_0625, 0 /* ty=int64 */, meta[relay.Constant][826] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][636]) /* ty=int64 */;
    %2294 = fn (%p0516: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0516) /* ty=int64 */
    };
    %2295 = (%shape_func_out_11,);
    %2296 = (%tensor_0518,);
    let %x823: () = vm.invoke_tvm_op(%2294, %2295, %2296) /* ty=() */;
    let %storage_0626: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][638]) /* ty=Storage[] */;
    let %tensor_0519: int64 = memory.alloc_tensor(%storage_0626, 0 /* ty=int64 */, meta[relay.Constant][827] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][637]) /* ty=int64 */;
    %2297 = fn (%p0517: int64, Primitive=1) -> int64 {
      multiply(%p0517, 4 /* ty=int64 */) /* ty=int64 */
    };
    %2298 = (%tensor_0518,);
    %2299 = (%tensor_0519,);
    let %x824: () = vm.invoke_tvm_op(%2297, %2298, %2299) /* ty=() */;
    let %storage_19: Storage[] = memory.alloc_storage(%tensor_0519, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][639]) /* ty=Storage[] */;
    let %out_0106: Tensor[(1, ?), int32] = memory.alloc_tensor(%storage_0624, 0 /* ty=int64 */, %shape_func_out_0111, meta[relay.attrs.AllocTensorAttrs][638]) /* ty=Tensor[(1, ?), int32] */;
    let %out_11: Tensor[(1, 1), int32] = memory.alloc_tensor(%storage_19, 0 /* ty=int64 */, %shape_func_out_11, meta[relay.attrs.AllocTensorAttrs][639]) /* ty=Tensor[(1, 1), int32] */;
    %2300 = (%x808, %x810, %x820, 100 /* ty=int32 */, 0.5f /* ty=float32 */);
    %2301 = (%out_0106, %out_11);
    let %x825: () = vm.invoke_tvm_op(%2285, %2300, %2301) /* ty=() */;
    let %x826: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]) = (%out_0106, %out_11);
    %2302 = %x826.0;
    let %in_shape_0101: Tensor[(2), int64] = vm.shape_of(%2302, meta[relay.attrs.ShapeOfAttrs][146]) /* ty=Tensor[(2), int64] */;
    let %storage_0627: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][640]) /* ty=Storage[] */;
    let %tensor_0520: Tensor[(1), int64] = memory.alloc_tensor(%storage_0627, 0 /* ty=int64 */, meta[relay.Constant][828] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][640]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0112: Tensor[(1), int64] = %tensor_0520;
    %2304 = fn (%p0518: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]), Primitive=1) -> Tensor[(?), int32] {
      %2303 = %p0518.0;
      squeeze(%2303, axis=[0]) /* ty=Tensor[(?), int32] */
    };
    %2305 = (%in_shape_0101, meta[relay.Constant][829] /* ty=Tensor[(2), int64] */);
    %2306 = (%shape_func_out_0112,);
    let %shape_func112: () = vm.shape_func(%2304, %2305, %2306, meta[relay.attrs.ShapeFuncAttrs][112]) /* ty=() */;
    let %storage_0628: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][641]) /* ty=Storage[] */;
    let %tensor_0521: int64 = memory.alloc_tensor(%storage_0628, 0 /* ty=int64 */, meta[relay.Constant][830] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][641]) /* ty=int64 */;
    %2307 = fn (%p0519: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0519) /* ty=int64 */
    };
    %2308 = (%shape_func_out_0112,);
    %2309 = (%tensor_0521,);
    let %x827: () = vm.invoke_tvm_op(%2307, %2308, %2309) /* ty=() */;
    let %storage_0629: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][642]) /* ty=Storage[] */;
    let %tensor_0522: int64 = memory.alloc_tensor(%storage_0629, 0 /* ty=int64 */, meta[relay.Constant][831] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][642]) /* ty=int64 */;
    %2310 = fn (%p0520: int64, Primitive=1) -> int64 {
      multiply(%p0520, 4 /* ty=int64 */) /* ty=int64 */
    };
    %2311 = (%tensor_0521,);
    %2312 = (%tensor_0522,);
    let %x828: () = vm.invoke_tvm_op(%2310, %2311, %2312) /* ty=() */;
    let %storage_0630: Storage[] = memory.alloc_storage(%tensor_0522, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][643]) /* ty=Storage[] */;
    let %out_0107: Tensor[(?), int32] = memory.alloc_tensor(%storage_0630, 0 /* ty=int64 */, %shape_func_out_0112, meta[relay.attrs.AllocTensorAttrs][643]) /* ty=Tensor[(?), int32] */;
    %2313 = (%x826,);
    %2314 = (%out_0107,);
    let %x829: () = vm.invoke_tvm_op(%2304, %2313, %2314) /* ty=() */;
    let %x830: Tensor[(?), int32] = %out_0107;
    let %storage_0631: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][644]) /* ty=Storage[] */;
    let %tensor_0523: Tensor[(1), int32] = memory.alloc_tensor(%storage_0631, 0 /* ty=int64 */, meta[relay.Constant][832] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][644]) /* ty=Tensor[(1), int32] */;
    %2315 = fn (%p0521: Tensor[(?), int32], Primitive=1) -> Tensor[(1), int32] {
      shape_of(%p0521, dtype="int32") /* ty=Tensor[(1), int32] */
    };
    %2316 = (%x830,);
    %2317 = (%tensor_0523,);
    let %x831: () = vm.invoke_tvm_op(%2315, %2316, %2317) /* ty=() */;
    let %x832: Tensor[(1), int32] = %tensor_0523;
    let %storage_0632: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][645]) /* ty=Storage[] */;
    let %tensor_0524: Tensor[(1), int32] = memory.alloc_tensor(%storage_0632, 0 /* ty=int64 */, meta[relay.Constant][833] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][645]) /* ty=Tensor[(1), int32] */;
    %2320 = fn (%p0522: Tensor[(1), int32], %p1205: Tensor[(1), int32], %p2178: Tensor[(1), bool], Primitive=1) -> Tensor[(1), int32] {
      %2318 = cast_like(%p0522, %p1205) /* ty=Tensor[(1), int32] */;
      %2319 = add(%p1205, %2318) /* ty=Tensor[(1), int32] */;
      where(%p2178, %2319, %p1205) /* ty=Tensor[(1), int32] */
    };
    %2321 = (%x832, meta[relay.Constant][834] /* ty=Tensor[(1), int32] */, meta[relay.Constant][835] /* ty=Tensor[(1), bool] */);
    %2322 = (%tensor_0524,);
    let %x833: () = vm.invoke_tvm_op(%2320, %2321, %2322) /* ty=() */;
    let %x834: Tensor[(1), int32] = %tensor_0524;
    let %storage_0633: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][646]) /* ty=Storage[] */;
    let %tensor_0525: Tensor[(1), int32] = memory.alloc_tensor(%storage_0633, 0 /* ty=int64 */, meta[relay.Constant][836] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][646]) /* ty=Tensor[(1), int32] */;
    %2324 = fn (%p0523: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]), Primitive=1) -> Tensor[(1), int32] {
      %2323 = %p0523.1;
      squeeze(%2323, axis=[1]) /* ty=Tensor[(1), int32] */
    };
    %2325 = (%x826,);
    %2326 = (%tensor_0525,);
    let %x835: () = vm.invoke_tvm_op(%2324, %2325, %2326) /* ty=() */;
    let %x836: Tensor[(1), int32] = %tensor_0525;
    let %in_shape_0102: Tensor[(1), int64] = vm.shape_of(%x830, meta[relay.attrs.ShapeOfAttrs][147]) /* ty=Tensor[(1), int64] */;
    let %in_shape_170: Tensor[(1), int32] = %x834;
    let %in_shape_250: Tensor[(1), int32] = %x836;
    let %storage_0634: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][647]) /* ty=Storage[] */;
    let %tensor_0526: Tensor[(1), int64] = memory.alloc_tensor(%storage_0634, 0 /* ty=int64 */, meta[relay.Constant][837] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][647]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0113: Tensor[(1), int64] = %tensor_0526;
    %2327 = fn (%p0524: Tensor[(?), int32], %p1206: Tensor[(1), int32], %p2179: Tensor[(1), int32], %p370: Tensor[(1), int32], Primitive=1) -> Tensor[(?), int32] {
      dyn.strided_slice(%p0524, %p1206, %p2179, %p370, begin=None, end=None, strides=None, slice_mode="size") /* ty=Tensor[(?), int32] */
    };
    %2328 = (%in_shape_0102, %in_shape_170, %in_shape_250, meta[relay.Constant][838] /* ty=Tensor[(1), int32] */);
    %2329 = (%shape_func_out_0113,);
    let %shape_func113: () = vm.shape_func(%2327, %2328, %2329, meta[relay.attrs.ShapeFuncAttrs][113]) /* ty=() */;
    let %storage_0635: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][648]) /* ty=Storage[] */;
    let %tensor_0527: int64 = memory.alloc_tensor(%storage_0635, 0 /* ty=int64 */, meta[relay.Constant][839] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][648]) /* ty=int64 */;
    %2330 = fn (%p0525: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0525) /* ty=int64 */
    };
    %2331 = (%shape_func_out_0113,);
    %2332 = (%tensor_0527,);
    let %x837: () = vm.invoke_tvm_op(%2330, %2331, %2332) /* ty=() */;
    let %storage_0636: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][649]) /* ty=Storage[] */;
    let %tensor_0528: int64 = memory.alloc_tensor(%storage_0636, 0 /* ty=int64 */, meta[relay.Constant][840] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][649]) /* ty=int64 */;
    %2333 = fn (%p0526: int64, Primitive=1) -> int64 {
      multiply(%p0526, 4 /* ty=int64 */) /* ty=int64 */
    };
    %2334 = (%tensor_0527,);
    %2335 = (%tensor_0528,);
    let %x838: () = vm.invoke_tvm_op(%2333, %2334, %2335) /* ty=() */;
    let %storage_0637: Storage[] = memory.alloc_storage(%tensor_0528, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][650]) /* ty=Storage[] */;
    let %out_0108: Tensor[(?), int32] = memory.alloc_tensor(%storage_0637, 0 /* ty=int64 */, %shape_func_out_0113, meta[relay.attrs.AllocTensorAttrs][650]) /* ty=Tensor[(?), int32] */;
    %2336 = (%x830, %x834, %x836, meta[relay.Constant][838] /* ty=Tensor[(1), int32] */);
    %2337 = (%out_0108,);
    let %x839: () = vm.invoke_tvm_op(%2327, %2336, %2337) /* ty=() */;
    let %x840: Tensor[(?), int32] = %out_0108;
    let %in_shape_0103: Tensor[(1), int64] = vm.shape_of(%x840, meta[relay.attrs.ShapeOfAttrs][148]) /* ty=Tensor[(1), int64] */;
    let %storage_0638: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][651]) /* ty=Storage[] */;
    let %tensor_0529: Tensor[(1), int64] = memory.alloc_tensor(%storage_0638, 0 /* ty=int64 */, meta[relay.Constant][841] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][651]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0114: Tensor[(1), int64] = %tensor_0529;
    %2338 = fn (%p0527: Tensor[(?), int32], Primitive=1) -> Tensor[(?), int64] {
      cast(%p0527, dtype="int64") /* ty=Tensor[(?), int64] */
    };
    %2339 = (%in_shape_0103,);
    %2340 = (%shape_func_out_0114,);
    let %shape_func114: () = vm.shape_func(%2338, %2339, %2340, meta[relay.attrs.ShapeFuncAttrs][114]) /* ty=() */;
    let %storage_0639: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][652]) /* ty=Storage[] */;
    let %tensor_0530: int64 = memory.alloc_tensor(%storage_0639, 0 /* ty=int64 */, meta[relay.Constant][842] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][652]) /* ty=int64 */;
    %2341 = fn (%p0528: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0528) /* ty=int64 */
    };
    %2342 = (%shape_func_out_0114,);
    %2343 = (%tensor_0530,);
    let %x841: () = vm.invoke_tvm_op(%2341, %2342, %2343) /* ty=() */;
    let %storage_0640: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][653]) /* ty=Storage[] */;
    let %tensor_0531: int64 = memory.alloc_tensor(%storage_0640, 0 /* ty=int64 */, meta[relay.Constant][843] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][653]) /* ty=int64 */;
    %2344 = fn (%p0529: int64, Primitive=1) -> int64 {
      multiply(%p0529, 8 /* ty=int64 */) /* ty=int64 */
    };
    %2345 = (%tensor_0530,);
    %2346 = (%tensor_0531,);
    let %x842: () = vm.invoke_tvm_op(%2344, %2345, %2346) /* ty=() */;
    let %storage_0641: Storage[] = memory.alloc_storage(%tensor_0531, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][654]) /* ty=Storage[] */;
    let %out_0109: Tensor[(?), int64] = memory.alloc_tensor(%storage_0641, 0 /* ty=int64 */, %shape_func_out_0114, meta[relay.attrs.AllocTensorAttrs][654]) /* ty=Tensor[(?), int64] */;
    %2347 = (%x840,);
    %2348 = (%out_0109,);
    let %x843: () = vm.invoke_tvm_op(%2338, %2347, %2348) /* ty=() */;
    let %x844: Tensor[(?), int64] = %out_0109;
    %x844
  };
  let %in_shape_0104: Tensor[(2), int64] = vm.shape_of(%x791, meta[relay.attrs.ShapeOfAttrs][149]) /* ty=Tensor[(2), int64] */;
  let %in_shape_171: Tensor[(1), int64] = vm.shape_of(%x794, meta[relay.attrs.ShapeOfAttrs][150]) /* ty=Tensor[(1), int64] */;
  let %storage_0642: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][655]) /* ty=Storage[] */;
  let %tensor_0532: Tensor[(2), int64] = memory.alloc_tensor(%storage_0642, 0 /* ty=int64 */, meta[relay.Constant][844] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][655]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0115: Tensor[(2), int64] = %tensor_0532;
  %2350 = fn (%p0530: Tensor[(?, 4), float32], %p1207: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 4), float32] {
    %2349 = (%p0530, %p1207);
    adv_index(%2349) /* ty=Tensor[(?, 4), float32] */
  };
  %2351 = (%in_shape_0104, %in_shape_171);
  %2352 = (%shape_func_out_0115,);
  let %shape_func115: () = vm.shape_func(%2350, %2351, %2352, meta[relay.attrs.ShapeFuncAttrs][115]) /* ty=() */;
  let %storage_0643: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][656]) /* ty=Storage[] */;
  let %tensor_0533: int64 = memory.alloc_tensor(%storage_0643, 0 /* ty=int64 */, meta[relay.Constant][845] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][656]) /* ty=int64 */;
  %2353 = fn (%p0531: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0531) /* ty=int64 */
  };
  %2354 = (%shape_func_out_0115,);
  %2355 = (%tensor_0533,);
  let %x845: () = vm.invoke_tvm_op(%2353, %2354, %2355) /* ty=() */;
  let %storage_0644: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][657]) /* ty=Storage[] */;
  let %tensor_0534: int64 = memory.alloc_tensor(%storage_0644, 0 /* ty=int64 */, meta[relay.Constant][846] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][657]) /* ty=int64 */;
  %2356 = fn (%p0532: int64, Primitive=1) -> int64 {
    multiply(%p0532, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2357 = (%tensor_0533,);
  %2358 = (%tensor_0534,);
  let %x846: () = vm.invoke_tvm_op(%2356, %2357, %2358) /* ty=() */;
  let %storage_0645: Storage[] = memory.alloc_storage(%tensor_0534, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][658]) /* ty=Storage[] */;
  let %out_0110: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0645, 0 /* ty=int64 */, %shape_func_out_0115, meta[relay.attrs.AllocTensorAttrs][658]) /* ty=Tensor[(?, 4), float32] */;
  %2359 = (%x791, %x794);
  %2360 = (%out_0110,);
  let %x847: () = vm.invoke_tvm_op(%2350, %2359, %2360) /* ty=() */;
  let %x848: Tensor[(?, 4), float32] = %out_0110;
  let %storage_0646: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][659]) /* ty=Storage[] */;
  let %tensor_0535: Tensor[(2), int32] = memory.alloc_tensor(%storage_0646, 0 /* ty=int64 */, meta[relay.Constant][847] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][659]) /* ty=Tensor[(2), int32] */;
  %2361 = fn (%p0533: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0533, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2362 = (%x848,);
  %2363 = (%tensor_0535,);
  let %x849: () = vm.invoke_tvm_op(%2361, %2362, %2363) /* ty=() */;
  let %x850: Tensor[(2), int32] = %tensor_0535;
  let %storage_0647: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][660]) /* ty=Storage[] */;
  let %tensor_0536: Tensor[(2), int32] = memory.alloc_tensor(%storage_0647, 0 /* ty=int64 */, meta[relay.Constant][848] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][660]) /* ty=Tensor[(2), int32] */;
  %2366 = fn (%p0534: Tensor[(2), int32], %p1208: Tensor[(2), int32], %p2180: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %2364 = cast_like(%p0534, %p1208) /* ty=Tensor[(2), int32] */;
    %2365 = add(%p1208, %2364) /* ty=Tensor[(2), int32] */;
    where(%p2180, %2365, %p1208) /* ty=Tensor[(2), int32] */
  };
  %2367 = (%x850, meta[relay.Constant][849] /* ty=Tensor[(2), int32] */, meta[relay.Constant][850] /* ty=Tensor[(2), bool] */);
  %2368 = (%tensor_0536,);
  let %x851: () = vm.invoke_tvm_op(%2366, %2367, %2368) /* ty=() */;
  let %x852: Tensor[(2), int32] = %tensor_0536;
  let %storage_0648: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][661]) /* ty=Storage[] */;
  let %tensor_0537: Tensor[(2), int64] = memory.alloc_tensor(%storage_0648, 0 /* ty=int64 */, meta[relay.Constant][851] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][661]) /* ty=Tensor[(2), int64] */;
  %2369 = fn (%p0535: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0535, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2370 = (%x850,);
  %2371 = (%tensor_0537,);
  let %x853: () = vm.invoke_tvm_op(%2369, %2370, %2371) /* ty=() */;
  let %x854: Tensor[(2), int64] = %tensor_0537;
  let %in_shape_0105: Tensor[(2), int64] = vm.shape_of(%x848, meta[relay.attrs.ShapeOfAttrs][151]) /* ty=Tensor[(2), int64] */;
  let %in_shape_172: Tensor[(2), int32] = %x852;
  let %in_shape_251: Tensor[(2), int64] = %x854;
  let %storage_0649: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][662]) /* ty=Storage[] */;
  let %tensor_0538: Tensor[(2), int64] = memory.alloc_tensor(%storage_0649, 0 /* ty=int64 */, meta[relay.Constant][852] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][662]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0116: Tensor[(2), int64] = %tensor_0538;
  %2372 = fn (%p0536: Tensor[(?, 4), float32], %p1209: Tensor[(2), int32], %p2181: Tensor[(2), int64], %p371: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0536, %p1209, %p2181, %p371, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2373 = (%in_shape_0105, %in_shape_172, %in_shape_251, meta[relay.Constant][853] /* ty=Tensor[(2), int32] */);
  %2374 = (%shape_func_out_0116,);
  let %shape_func116: () = vm.shape_func(%2372, %2373, %2374, meta[relay.attrs.ShapeFuncAttrs][116]) /* ty=() */;
  let %storage_0650: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][663]) /* ty=Storage[] */;
  let %tensor_0539: int64 = memory.alloc_tensor(%storage_0650, 0 /* ty=int64 */, meta[relay.Constant][854] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][663]) /* ty=int64 */;
  %2375 = fn (%p0537: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0537) /* ty=int64 */
  };
  %2376 = (%shape_func_out_0116,);
  %2377 = (%tensor_0539,);
  let %x855: () = vm.invoke_tvm_op(%2375, %2376, %2377) /* ty=() */;
  let %storage_0651: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][664]) /* ty=Storage[] */;
  let %tensor_0540: int64 = memory.alloc_tensor(%storage_0651, 0 /* ty=int64 */, meta[relay.Constant][855] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][664]) /* ty=int64 */;
  %2378 = fn (%p0538: int64, Primitive=1) -> int64 {
    multiply(%p0538, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2379 = (%tensor_0539,);
  %2380 = (%tensor_0540,);
  let %x856: () = vm.invoke_tvm_op(%2378, %2379, %2380) /* ty=() */;
  let %storage_0652: Storage[] = memory.alloc_storage(%tensor_0540, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][665]) /* ty=Storage[] */;
  let %out_0111: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0652, 0 /* ty=int64 */, %shape_func_out_0116, meta[relay.attrs.AllocTensorAttrs][665]) /* ty=Tensor[(?, ?), float32] */;
  %2381 = (%x848, %x852, %x854, meta[relay.Constant][853] /* ty=Tensor[(2), int32] */);
  %2382 = (%out_0111,);
  let %x857: () = vm.invoke_tvm_op(%2372, %2381, %2382) /* ty=() */;
  let %x858: Tensor[(?, ?), float32] = %out_0111;
  let %storage_0653: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][666]) /* ty=Storage[] */;
  let %tensor_0541: Tensor[(2), int32] = memory.alloc_tensor(%storage_0653, 0 /* ty=int64 */, meta[relay.Constant][856] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][666]) /* ty=Tensor[(2), int32] */;
  %2385 = fn (%p0539: Tensor[(2), int32], %p1210: Tensor[(2), int32], %p2182: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %2383 = cast_like(%p0539, %p1210) /* ty=Tensor[(2), int32] */;
    %2384 = add(%p1210, %2383) /* ty=Tensor[(2), int32] */;
    where(%p2182, %2384, %p1210) /* ty=Tensor[(2), int32] */
  };
  %2386 = (%x850, meta[relay.Constant][857] /* ty=Tensor[(2), int32] */, meta[relay.Constant][858] /* ty=Tensor[(2), bool] */);
  %2387 = (%tensor_0541,);
  let %x859: () = vm.invoke_tvm_op(%2385, %2386, %2387) /* ty=() */;
  let %x860: Tensor[(2), int32] = %tensor_0541;
  let %in_shape_0106: Tensor[(2), int64] = vm.shape_of(%x848, meta[relay.attrs.ShapeOfAttrs][152]) /* ty=Tensor[(2), int64] */;
  let %in_shape_173: Tensor[(2), int32] = %x860;
  let %in_shape_252: Tensor[(2), int64] = %x854;
  let %storage_0654: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][667]) /* ty=Storage[] */;
  let %tensor_0542: Tensor[(2), int64] = memory.alloc_tensor(%storage_0654, 0 /* ty=int64 */, meta[relay.Constant][859] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][667]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0117: Tensor[(2), int64] = %tensor_0542;
  %2388 = fn (%p0540: Tensor[(?, 4), float32], %p1211: Tensor[(2), int32], %p2183: Tensor[(2), int64], %p372: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0540, %p1211, %p2183, %p372, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2389 = (%in_shape_0106, %in_shape_173, %in_shape_252, meta[relay.Constant][860] /* ty=Tensor[(2), int32] */);
  %2390 = (%shape_func_out_0117,);
  let %shape_func117: () = vm.shape_func(%2388, %2389, %2390, meta[relay.attrs.ShapeFuncAttrs][117]) /* ty=() */;
  let %storage_0655: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][668]) /* ty=Storage[] */;
  let %tensor_0543: int64 = memory.alloc_tensor(%storage_0655, 0 /* ty=int64 */, meta[relay.Constant][861] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][668]) /* ty=int64 */;
  %2391 = fn (%p0541: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0541) /* ty=int64 */
  };
  %2392 = (%shape_func_out_0117,);
  %2393 = (%tensor_0543,);
  let %x861: () = vm.invoke_tvm_op(%2391, %2392, %2393) /* ty=() */;
  let %storage_0656: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][669]) /* ty=Storage[] */;
  let %tensor_0544: int64 = memory.alloc_tensor(%storage_0656, 0 /* ty=int64 */, meta[relay.Constant][862] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][669]) /* ty=int64 */;
  %2394 = fn (%p0542: int64, Primitive=1) -> int64 {
    multiply(%p0542, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2395 = (%tensor_0543,);
  %2396 = (%tensor_0544,);
  let %x862: () = vm.invoke_tvm_op(%2394, %2395, %2396) /* ty=() */;
  let %storage_0657: Storage[] = memory.alloc_storage(%tensor_0544, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][670]) /* ty=Storage[] */;
  let %out_0112: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0657, 0 /* ty=int64 */, %shape_func_out_0117, meta[relay.attrs.AllocTensorAttrs][670]) /* ty=Tensor[(?, ?), float32] */;
  %2397 = (%x848, %x860, %x854, meta[relay.Constant][860] /* ty=Tensor[(2), int32] */);
  %2398 = (%out_0112,);
  let %x863: () = vm.invoke_tvm_op(%2388, %2397, %2398) /* ty=() */;
  let %x864: Tensor[(?, ?), float32] = %out_0112;
  let %storage_0658: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][671]) /* ty=Storage[] */;
  let %tensor_0545: Tensor[(2), int32] = memory.alloc_tensor(%storage_0658, 0 /* ty=int64 */, meta[relay.Constant][863] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][671]) /* ty=Tensor[(2), int32] */;
  %2401 = fn (%p0543: Tensor[(2), int32], %p1212: Tensor[(2), int32], %p2184: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %2399 = cast_like(%p0543, %p1212) /* ty=Tensor[(2), int32] */;
    %2400 = add(%p1212, %2399) /* ty=Tensor[(2), int32] */;
    where(%p2184, %2400, %p1212) /* ty=Tensor[(2), int32] */
  };
  %2402 = (%x850, meta[relay.Constant][864] /* ty=Tensor[(2), int32] */, meta[relay.Constant][865] /* ty=Tensor[(2), bool] */);
  %2403 = (%tensor_0545,);
  let %x865: () = vm.invoke_tvm_op(%2401, %2402, %2403) /* ty=() */;
  let %x866: Tensor[(2), int32] = %tensor_0545;
  let %in_shape_0107: Tensor[(2), int64] = vm.shape_of(%x848, meta[relay.attrs.ShapeOfAttrs][153]) /* ty=Tensor[(2), int64] */;
  let %in_shape_174: Tensor[(2), int32] = %x866;
  let %in_shape_253: Tensor[(2), int64] = %x854;
  let %storage_0659: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][672]) /* ty=Storage[] */;
  let %tensor_0546: Tensor[(2), int64] = memory.alloc_tensor(%storage_0659, 0 /* ty=int64 */, meta[relay.Constant][866] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][672]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0118: Tensor[(2), int64] = %tensor_0546;
  %2404 = fn (%p0544: Tensor[(?, 4), float32], %p1213: Tensor[(2), int32], %p2185: Tensor[(2), int64], %p373: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0544, %p1213, %p2185, %p373, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2405 = (%in_shape_0107, %in_shape_174, %in_shape_253, meta[relay.Constant][867] /* ty=Tensor[(2), int32] */);
  %2406 = (%shape_func_out_0118,);
  let %shape_func118: () = vm.shape_func(%2404, %2405, %2406, meta[relay.attrs.ShapeFuncAttrs][118]) /* ty=() */;
  let %storage_0660: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][673]) /* ty=Storage[] */;
  let %tensor_0547: int64 = memory.alloc_tensor(%storage_0660, 0 /* ty=int64 */, meta[relay.Constant][868] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][673]) /* ty=int64 */;
  %2407 = fn (%p0545: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0545) /* ty=int64 */
  };
  %2408 = (%shape_func_out_0118,);
  %2409 = (%tensor_0547,);
  let %x867: () = vm.invoke_tvm_op(%2407, %2408, %2409) /* ty=() */;
  let %storage_0661: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][674]) /* ty=Storage[] */;
  let %tensor_0548: int64 = memory.alloc_tensor(%storage_0661, 0 /* ty=int64 */, meta[relay.Constant][869] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][674]) /* ty=int64 */;
  %2410 = fn (%p0546: int64, Primitive=1) -> int64 {
    multiply(%p0546, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2411 = (%tensor_0547,);
  %2412 = (%tensor_0548,);
  let %x868: () = vm.invoke_tvm_op(%2410, %2411, %2412) /* ty=() */;
  let %storage_0662: Storage[] = memory.alloc_storage(%tensor_0548, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][675]) /* ty=Storage[] */;
  let %out_0113: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0662, 0 /* ty=int64 */, %shape_func_out_0118, meta[relay.attrs.AllocTensorAttrs][675]) /* ty=Tensor[(?, ?), float32] */;
  %2413 = (%x848, %x866, %x854, meta[relay.Constant][867] /* ty=Tensor[(2), int32] */);
  %2414 = (%out_0113,);
  let %x869: () = vm.invoke_tvm_op(%2404, %2413, %2414) /* ty=() */;
  let %x870: Tensor[(?, ?), float32] = %out_0113;
  let %storage_0663: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][676]) /* ty=Storage[] */;
  let %tensor_0549: Tensor[(2), int32] = memory.alloc_tensor(%storage_0663, 0 /* ty=int64 */, meta[relay.Constant][870] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][676]) /* ty=Tensor[(2), int32] */;
  %2417 = fn (%p0547: Tensor[(2), int32], %p1214: Tensor[(2), int32], %p2186: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %2415 = cast_like(%p0547, %p1214) /* ty=Tensor[(2), int32] */;
    %2416 = add(%p1214, %2415) /* ty=Tensor[(2), int32] */;
    where(%p2186, %2416, %p1214) /* ty=Tensor[(2), int32] */
  };
  %2418 = (%x850, meta[relay.Constant][871] /* ty=Tensor[(2), int32] */, meta[relay.Constant][872] /* ty=Tensor[(2), bool] */);
  %2419 = (%tensor_0549,);
  let %x871: () = vm.invoke_tvm_op(%2417, %2418, %2419) /* ty=() */;
  let %x872: Tensor[(2), int32] = %tensor_0549;
  let %in_shape_0108: Tensor[(2), int64] = vm.shape_of(%x848, meta[relay.attrs.ShapeOfAttrs][154]) /* ty=Tensor[(2), int64] */;
  let %in_shape_175: Tensor[(2), int32] = %x872;
  let %in_shape_254: Tensor[(2), int64] = %x854;
  let %storage_0664: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][677]) /* ty=Storage[] */;
  let %tensor_0550: Tensor[(2), int64] = memory.alloc_tensor(%storage_0664, 0 /* ty=int64 */, meta[relay.Constant][873] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][677]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0119: Tensor[(2), int64] = %tensor_0550;
  %2420 = fn (%p0548: Tensor[(?, 4), float32], %p1215: Tensor[(2), int32], %p2187: Tensor[(2), int64], %p374: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0548, %p1215, %p2187, %p374, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2421 = (%in_shape_0108, %in_shape_175, %in_shape_254, meta[relay.Constant][874] /* ty=Tensor[(2), int32] */);
  %2422 = (%shape_func_out_0119,);
  let %shape_func119: () = vm.shape_func(%2420, %2421, %2422, meta[relay.attrs.ShapeFuncAttrs][119]) /* ty=() */;
  let %storage_0665: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][678]) /* ty=Storage[] */;
  let %tensor_0551: int64 = memory.alloc_tensor(%storage_0665, 0 /* ty=int64 */, meta[relay.Constant][875] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][678]) /* ty=int64 */;
  %2423 = fn (%p0549: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0549) /* ty=int64 */
  };
  %2424 = (%shape_func_out_0119,);
  %2425 = (%tensor_0551,);
  let %x873: () = vm.invoke_tvm_op(%2423, %2424, %2425) /* ty=() */;
  let %storage_0666: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][679]) /* ty=Storage[] */;
  let %tensor_0552: int64 = memory.alloc_tensor(%storage_0666, 0 /* ty=int64 */, meta[relay.Constant][876] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][679]) /* ty=int64 */;
  %2426 = fn (%p0550: int64, Primitive=1) -> int64 {
    multiply(%p0550, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2427 = (%tensor_0551,);
  %2428 = (%tensor_0552,);
  let %x874: () = vm.invoke_tvm_op(%2426, %2427, %2428) /* ty=() */;
  let %storage_0667: Storage[] = memory.alloc_storage(%tensor_0552, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][680]) /* ty=Storage[] */;
  let %out_0114: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0667, 0 /* ty=int64 */, %shape_func_out_0119, meta[relay.attrs.AllocTensorAttrs][680]) /* ty=Tensor[(?, ?), float32] */;
  %2429 = (%x848, %x872, %x854, meta[relay.Constant][874] /* ty=Tensor[(2), int32] */);
  %2430 = (%out_0114,);
  let %x875: () = vm.invoke_tvm_op(%2420, %2429, %2430) /* ty=() */;
  let %x876: Tensor[(?, ?), float32] = %out_0114;
  let %in_shape_0109: Tensor[(2), int64] = vm.shape_of(%x858, meta[relay.attrs.ShapeOfAttrs][155]) /* ty=Tensor[(2), int64] */;
  let %in_shape_176: Tensor[(2), int64] = vm.shape_of(%x864, meta[relay.attrs.ShapeOfAttrs][156]) /* ty=Tensor[(2), int64] */;
  let %in_shape_255: Tensor[(2), int64] = vm.shape_of(%x870, meta[relay.attrs.ShapeOfAttrs][157]) /* ty=Tensor[(2), int64] */;
  let %in_shape_36: Tensor[(2), int64] = vm.shape_of(%x876, meta[relay.attrs.ShapeOfAttrs][158]) /* ty=Tensor[(2), int64] */;
  let %storage_0668: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][681]) /* ty=Storage[] */;
  let %tensor_0553: Tensor[(1), int64] = memory.alloc_tensor(%storage_0668, 0 /* ty=int64 */, meta[relay.Constant][877] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][681]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0120: Tensor[(1), int64] = %tensor_0553;
  %2448 = fn (%p0551: Tensor[(?, ?), float32], %p1216: Tensor[(?, ?), float32], %p2188: Tensor[(?, ?), float32], %p375: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), int64] {
    %2431 = take(%p0551, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %2432 = take(%p1216, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %2433 = subtract(%2431, %2432) /* ty=Tensor[(?), float32] */;
    %2434 = take(%p2188, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %2435 = take(%p375, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %2436 = subtract(%2434, %2435) /* ty=Tensor[(?), float32] */;
    %2437 = multiply(%2433, %2436) /* ty=Tensor[(?), float32] */;
    %2438 = (%2437,);
    %2439 = concatenate(%2438) /* ty=Tensor[(?), float32] */;
    %2440 = sqrt(%2439) /* ty=Tensor[(?), float32] */;
    %2441 = divide(%2440, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %2442 = log2(%2441) /* ty=Tensor[(?), float32] */;
    %2443 = add(%2442, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %2444 = add(%2443, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %2445 = floor(%2444) /* ty=Tensor[(?), float32] */;
    %2446 = clip(%2445, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
    %2447 = cast(%2446, dtype="int64") /* ty=Tensor[(?), int64] */;
    subtract(%2447, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */
  };
  %2449 = (%in_shape_0109, %in_shape_176, %in_shape_255, %in_shape_36);
  %2450 = (%shape_func_out_0120,);
  let %shape_func120: () = vm.shape_func(%2448, %2449, %2450, meta[relay.attrs.ShapeFuncAttrs][120]) /* ty=() */;
  let %storage_0669: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][682]) /* ty=Storage[] */;
  let %tensor_0554: int64 = memory.alloc_tensor(%storage_0669, 0 /* ty=int64 */, meta[relay.Constant][878] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][682]) /* ty=int64 */;
  %2451 = fn (%p0552: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0552) /* ty=int64 */
  };
  %2452 = (%shape_func_out_0120,);
  %2453 = (%tensor_0554,);
  let %x877: () = vm.invoke_tvm_op(%2451, %2452, %2453) /* ty=() */;
  let %storage_0670: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][683]) /* ty=Storage[] */;
  let %tensor_0555: int64 = memory.alloc_tensor(%storage_0670, 0 /* ty=int64 */, meta[relay.Constant][879] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][683]) /* ty=int64 */;
  %2454 = fn (%p0553: int64, Primitive=1) -> int64 {
    multiply(%p0553, 8 /* ty=int64 */) /* ty=int64 */
  };
  %2455 = (%tensor_0554,);
  %2456 = (%tensor_0555,);
  let %x878: () = vm.invoke_tvm_op(%2454, %2455, %2456) /* ty=() */;
  let %storage_0671: Storage[] = memory.alloc_storage(%tensor_0555, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][684]) /* ty=Storage[] */;
  let %out_0115: Tensor[(?), int64] = memory.alloc_tensor(%storage_0671, 0 /* ty=int64 */, %shape_func_out_0120, meta[relay.attrs.AllocTensorAttrs][684]) /* ty=Tensor[(?), int64] */;
  %2457 = (%x858, %x864, %x870, %x876);
  %2458 = (%out_0115,);
  let %x879: () = vm.invoke_tvm_op(%2448, %2457, %2458) /* ty=() */;
  let %x880: Tensor[(?), int64] = %out_0115;
  let %storage_0672: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][685]) /* ty=Storage[] */;
  let %tensor_0556: Tensor[(1), int32] = memory.alloc_tensor(%storage_0672, 0 /* ty=int64 */, meta[relay.Constant][880] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][685]) /* ty=Tensor[(1), int32] */;
  %2459 = fn (%p0554: Tensor[(?), int64], Primitive=1) -> Tensor[(1), int32] {
    shape_of(%p0554, dtype="int32") /* ty=Tensor[(1), int32] */
  };
  %2460 = (%x880,);
  %2461 = (%tensor_0556,);
  let %x881: () = vm.invoke_tvm_op(%2459, %2460, %2461) /* ty=() */;
  let %x882: Tensor[(1), int32] = %tensor_0556;
  let %storage_0673: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][686]) /* ty=Storage[] */;
  let %tensor_0557: Tensor[(4), int64] = memory.alloc_tensor(%storage_0673, 0 /* ty=int64 */, meta[relay.Constant][881] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][686]) /* ty=Tensor[(4), int64] */;
  %2466 = fn (%p0555: Tensor[(1), int32], %p1217: Tensor[(1), int64], %p2189: Tensor[(1), int64], Primitive=1) -> Tensor[(4), int64] {
    %2462 = take(%p0555, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
    %2463 = expand_dims(%2462, axis=0) /* ty=Tensor[(1), int32] */;
    %2464 = cast(%2463, dtype="int64") /* ty=Tensor[(1), int64] */;
    %2465 = (%2464, %p1217, %p2189, %p2189);
    concatenate(%2465) /* ty=Tensor[(4), int64] */
  };
  %2467 = (%x882, meta[relay.Constant][882] /* ty=Tensor[(1), int64] */, meta[relay.Constant][883] /* ty=Tensor[(1), int64] */);
  %2468 = (%tensor_0557,);
  let %x883: () = vm.invoke_tvm_op(%2466, %2467, %2468) /* ty=() */;
  let %x884: Tensor[(4), int64] = %tensor_0557;
  let %in_shape_177: Tensor[(4), int64] = %x884;
  let %storage_0674: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][687]) /* ty=Storage[] */;
  let %tensor_0558: Tensor[(4), int64] = memory.alloc_tensor(%storage_0674, 0 /* ty=int64 */, meta[relay.Constant][884] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][687]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0121: Tensor[(4), int64] = %tensor_0558;
  %2469 = fn (%p0556: int32, %p1218: Tensor[(4), int64], Primitive=1) -> Tensor[(?, ?, ?, ?), float32] {
    dyn.full(%p0556, %p1218, shape=None, dtype="float32") /* ty=Tensor[(?, ?, ?, ?), float32] */
  };
  %2470 = (0 /* ty=int32 */, %in_shape_177);
  %2471 = (%shape_func_out_0121,);
  let %shape_func121: () = vm.shape_func(%2469, %2470, %2471, meta[relay.attrs.ShapeFuncAttrs][121]) /* ty=() */;
  let %storage_0675: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][688]) /* ty=Storage[] */;
  let %tensor_0559: int64 = memory.alloc_tensor(%storage_0675, 0 /* ty=int64 */, meta[relay.Constant][885] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][688]) /* ty=int64 */;
  %2472 = fn (%p0557: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0557) /* ty=int64 */
  };
  %2473 = (%shape_func_out_0121,);
  %2474 = (%tensor_0559,);
  let %x885: () = vm.invoke_tvm_op(%2472, %2473, %2474) /* ty=() */;
  let %storage_0676: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][689]) /* ty=Storage[] */;
  let %tensor_0560: int64 = memory.alloc_tensor(%storage_0676, 0 /* ty=int64 */, meta[relay.Constant][886] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][689]) /* ty=int64 */;
  %2475 = fn (%p0558: int64, Primitive=1) -> int64 {
    multiply(%p0558, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2476 = (%tensor_0559,);
  %2477 = (%tensor_0560,);
  let %x886: () = vm.invoke_tvm_op(%2475, %2476, %2477) /* ty=() */;
  let %storage_0677: Storage[] = memory.alloc_storage(%tensor_0560, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][690]) /* ty=Storage[] */;
  let %out_0116: Tensor[(?, ?, ?, ?), float32] = memory.alloc_tensor(%storage_0677, 0 /* ty=int64 */, %shape_func_out_0121, meta[relay.attrs.AllocTensorAttrs][690]) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %2478 = (0 /* ty=int32 */, %x884);
  %2479 = (%out_0116,);
  let %x887: () = vm.invoke_tvm_op(%2469, %2478, %2479) /* ty=() */;
  let %x888: Tensor[(?, ?, ?, ?), float32] = %out_0116;
  let %in_shape_0110: Tensor[(4), int64] = vm.shape_of(%x888, meta[relay.attrs.ShapeOfAttrs][159]) /* ty=Tensor[(4), int64] */;
  let %storage_0678: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][691]) /* ty=Storage[] */;
  let %tensor_0561: Tensor[(4), int64] = memory.alloc_tensor(%storage_0678, 0 /* ty=int64 */, meta[relay.Constant][887] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][691]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0122: Tensor[(4), int64] = %tensor_0561;
  %2480 = fn (%p0559: Tensor[(?, ?, ?, ?), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    reshape(%p0559, newshape=[0, 256, 14, 14]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %2481 = (%in_shape_0110,);
  %2482 = (%shape_func_out_0122,);
  let %shape_func122: () = vm.shape_func(%2480, %2481, %2482, meta[relay.attrs.ShapeFuncAttrs][122]) /* ty=() */;
  let %x889: Tensor[(?, 256, 14, 14), float32] = vm.reshape_tensor(%x888, %shape_func_out_0122, meta[relay.attrs.ReshapeTensorAttrs][5]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  let %in_shape_0111: Tensor[(1), int64] = vm.shape_of(%x880, meta[relay.attrs.ShapeOfAttrs][160]) /* ty=Tensor[(1), int64] */;
  let %storage_0679: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][692]) /* ty=Storage[] */;
  let %tensor_0562: Tensor[(1), int64] = memory.alloc_tensor(%storage_0679, 0 /* ty=int64 */, meta[relay.Constant][888] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][692]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0123: Tensor[(1), int64] = %tensor_0562;
  %2483 = fn (%p0560: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0560, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %2484 = (%in_shape_0111,);
  %2485 = (%shape_func_out_0123,);
  let %shape_func123: () = vm.shape_func(%2483, %2484, %2485, meta[relay.attrs.ShapeFuncAttrs][123]) /* ty=() */;
  let %storage_0680: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][693]) /* ty=Storage[] */;
  let %tensor_0563: int64 = memory.alloc_tensor(%storage_0680, 0 /* ty=int64 */, meta[relay.Constant][889] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][693]) /* ty=int64 */;
  %2486 = fn (%p0561: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0561) /* ty=int64 */
  };
  %2487 = (%shape_func_out_0123,);
  %2488 = (%tensor_0563,);
  let %x890: () = vm.invoke_tvm_op(%2486, %2487, %2488) /* ty=() */;
  let %storage_0681: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][694]) /* ty=Storage[] */;
  let %tensor_0564: int64 = memory.alloc_tensor(%storage_0681, 0 /* ty=int64 */, meta[relay.Constant][890] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][694]) /* ty=int64 */;
  %2489 = fn (%p0562: int64, Primitive=1) -> int64 {
    multiply(%p0562, 1 /* ty=int64 */) /* ty=int64 */
  };
  %2490 = (%tensor_0563,);
  %2491 = (%tensor_0564,);
  let %x891: () = vm.invoke_tvm_op(%2489, %2490, %2491) /* ty=() */;
  let %storage_0682: Storage[] = memory.alloc_storage(%tensor_0564, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][695]) /* ty=Storage[] */;
  let %out_0117: Tensor[(?), bool] = memory.alloc_tensor(%storage_0682, 0 /* ty=int64 */, %shape_func_out_0123, meta[relay.attrs.AllocTensorAttrs][695]) /* ty=Tensor[(?), bool] */;
  %2492 = (%x880,);
  %2493 = (%out_0117,);
  let %x892: () = vm.invoke_tvm_op(%2483, %2492, %2493) /* ty=() */;
  let %x893: Tensor[(?), bool] = %out_0117;
  let %in_shape_0112: Tensor[(?), bool] = %x893;
  let %storage_0683: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][696]) /* ty=Storage[] */;
  let %tensor_0565: Tensor[(2), int64] = memory.alloc_tensor(%storage_0683, 0 /* ty=int64 */, meta[relay.Constant][891] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][696]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0124: Tensor[(2), int64] = %tensor_0565;
  %2494 = fn (%p0563: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0563) /* ty=Tensor[(?, 1), int32] */
  };
  %2495 = (%in_shape_0112,);
  %2496 = (%shape_func_out_0124,);
  let %shape_func124: () = vm.shape_func(%2494, %2495, %2496, meta[relay.attrs.ShapeFuncAttrs][124]) /* ty=() */;
  let %storage_0684: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][697]) /* ty=Storage[] */;
  let %tensor_0566: int64 = memory.alloc_tensor(%storage_0684, 0 /* ty=int64 */, meta[relay.Constant][892] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][697]) /* ty=int64 */;
  %2497 = fn (%p0564: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0564) /* ty=int64 */
  };
  %2498 = (%shape_func_out_0124,);
  %2499 = (%tensor_0566,);
  let %x894: () = vm.invoke_tvm_op(%2497, %2498, %2499) /* ty=() */;
  let %storage_0685: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][698]) /* ty=Storage[] */;
  let %tensor_0567: int64 = memory.alloc_tensor(%storage_0685, 0 /* ty=int64 */, meta[relay.Constant][893] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][698]) /* ty=int64 */;
  %2500 = fn (%p0565: int64, Primitive=1) -> int64 {
    multiply(%p0565, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2501 = (%tensor_0566,);
  %2502 = (%tensor_0567,);
  let %x895: () = vm.invoke_tvm_op(%2500, %2501, %2502) /* ty=() */;
  let %storage_0686: Storage[] = memory.alloc_storage(%tensor_0567, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][699]) /* ty=Storage[] */;
  let %out_0118: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0686, 0 /* ty=int64 */, %shape_func_out_0124, meta[relay.attrs.AllocTensorAttrs][699]) /* ty=Tensor[(?, 1), int32] */;
  %2503 = (%x893,);
  %2504 = (%out_0118,);
  let %x896: () = vm.invoke_tvm_op(%2494, %2503, %2504) /* ty=() */;
  let %x897: Tensor[(?, 1), int32] = %out_0118;
  let %in_shape_0113: Tensor[(2), int64] = vm.shape_of(%x897, meta[relay.attrs.ShapeOfAttrs][161]) /* ty=Tensor[(2), int64] */;
  let %storage_0687: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][700]) /* ty=Storage[] */;
  let %tensor_0568: Tensor[(1), int64] = memory.alloc_tensor(%storage_0687, 0 /* ty=int64 */, meta[relay.Constant][894] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][700]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0125: Tensor[(1), int64] = %tensor_0568;
  %2507 = fn (%p0566: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %2505 = split(%p0566, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %2506 = %2505.0;
    squeeze(%2506, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %2508 = (%in_shape_0113,);
  %2509 = (%shape_func_out_0125,);
  let %shape_func125: () = vm.shape_func(%2507, %2508, %2509, meta[relay.attrs.ShapeFuncAttrs][125]) /* ty=() */;
  let %storage_0688: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][701]) /* ty=Storage[] */;
  let %tensor_0569: int64 = memory.alloc_tensor(%storage_0688, 0 /* ty=int64 */, meta[relay.Constant][895] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][701]) /* ty=int64 */;
  %2510 = fn (%p0567: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0567) /* ty=int64 */
  };
  %2511 = (%shape_func_out_0125,);
  %2512 = (%tensor_0569,);
  let %x898: () = vm.invoke_tvm_op(%2510, %2511, %2512) /* ty=() */;
  let %storage_0689: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][702]) /* ty=Storage[] */;
  let %tensor_0570: int64 = memory.alloc_tensor(%storage_0689, 0 /* ty=int64 */, meta[relay.Constant][896] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][702]) /* ty=int64 */;
  %2513 = fn (%p0568: int64, Primitive=1) -> int64 {
    multiply(%p0568, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2514 = (%tensor_0569,);
  %2515 = (%tensor_0570,);
  let %x899: () = vm.invoke_tvm_op(%2513, %2514, %2515) /* ty=() */;
  let %storage_0690: Storage[] = memory.alloc_storage(%tensor_0570, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][703]) /* ty=Storage[] */;
  let %out_0119: Tensor[(?), int32] = memory.alloc_tensor(%storage_0690, 0 /* ty=int64 */, %shape_func_out_0125, meta[relay.attrs.AllocTensorAttrs][703]) /* ty=Tensor[(?), int32] */;
  %2516 = (%x897,);
  %2517 = (%out_0119,);
  let %x900: () = vm.invoke_tvm_op(%2507, %2516, %2517) /* ty=() */;
  let %x901: Tensor[(?), int32] = %out_0119;
  let %in_shape_0114: Tensor[(1), int64] = vm.shape_of(%x901, meta[relay.attrs.ShapeOfAttrs][162]) /* ty=Tensor[(1), int64] */;
  let %storage_0691: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][704]) /* ty=Storage[] */;
  let %tensor_0571: Tensor[(4), int64] = memory.alloc_tensor(%storage_0691, 0 /* ty=int64 */, meta[relay.Constant][897] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][704]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0126: Tensor[(4), int64] = %tensor_0571;
  %2521 = fn (%p0569: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 14, 14), int32] {
    %2518 = reshape(%p0569, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %2519 = repeat(%2518, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %2520 = repeat(%2519, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
    repeat(%2520, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */
  };
  %2522 = (%in_shape_0114,);
  %2523 = (%shape_func_out_0126,);
  let %shape_func126: () = vm.shape_func(%2521, %2522, %2523, meta[relay.attrs.ShapeFuncAttrs][126]) /* ty=() */;
  let %storage_0692: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][705]) /* ty=Storage[] */;
  let %tensor_0572: int64 = memory.alloc_tensor(%storage_0692, 0 /* ty=int64 */, meta[relay.Constant][898] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][705]) /* ty=int64 */;
  %2524 = fn (%p0570: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0570) /* ty=int64 */
  };
  %2525 = (%shape_func_out_0126,);
  %2526 = (%tensor_0572,);
  let %x902: () = vm.invoke_tvm_op(%2524, %2525, %2526) /* ty=() */;
  let %storage_0693: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][706]) /* ty=Storage[] */;
  let %tensor_0573: int64 = memory.alloc_tensor(%storage_0693, 0 /* ty=int64 */, meta[relay.Constant][899] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][706]) /* ty=int64 */;
  %2527 = fn (%p0571: int64, Primitive=1) -> int64 {
    multiply(%p0571, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2528 = (%tensor_0572,);
  %2529 = (%tensor_0573,);
  let %x903: () = vm.invoke_tvm_op(%2527, %2528, %2529) /* ty=() */;
  let %storage_0694: Storage[] = memory.alloc_storage(%tensor_0573, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][707]) /* ty=Storage[] */;
  let %out_0120: Tensor[(?, 256, 14, 14), int32] = memory.alloc_tensor(%storage_0694, 0 /* ty=int64 */, %shape_func_out_0126, meta[relay.attrs.AllocTensorAttrs][707]) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2530 = (%x901,);
  %2531 = (%out_0120,);
  let %x904: () = vm.invoke_tvm_op(%2521, %2530, %2531) /* ty=() */;
  let %x905: Tensor[(?, 256, 14, 14), int32] = %out_0120;
  let %storage_0695: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][708]) /* ty=Storage[] */;
  let %tensor_0574: Tensor[(2), int32] = memory.alloc_tensor(%storage_0695, 0 /* ty=int64 */, meta[relay.Constant][900] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][708]) /* ty=Tensor[(2), int32] */;
  %2534 = fn (%p0572: Tensor[(2), int32], %p1219: Tensor[(2), int32], %p2190: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %2532 = cast_like(%p0572, %p1219) /* ty=Tensor[(2), int32] */;
    %2533 = add(%p1219, %2532) /* ty=Tensor[(2), int32] */;
    where(%p2190, %2533, %p1219) /* ty=Tensor[(2), int32] */
  };
  %2535 = (%x850, meta[relay.Constant][901] /* ty=Tensor[(2), int32] */, meta[relay.Constant][902] /* ty=Tensor[(2), bool] */);
  %2536 = (%tensor_0574,);
  let %x906: () = vm.invoke_tvm_op(%2534, %2535, %2536) /* ty=() */;
  let %x907: Tensor[(2), int32] = %tensor_0574;
  let %in_shape_0115: Tensor[(2), int64] = vm.shape_of(%x848, meta[relay.attrs.ShapeOfAttrs][163]) /* ty=Tensor[(2), int64] */;
  let %in_shape_178: Tensor[(2), int32] = %x907;
  let %in_shape_256: Tensor[(2), int64] = %x854;
  let %storage_0696: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][709]) /* ty=Storage[] */;
  let %tensor_0575: Tensor[(2), int64] = memory.alloc_tensor(%storage_0696, 0 /* ty=int64 */, meta[relay.Constant][903] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][709]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0127: Tensor[(2), int64] = %tensor_0575;
  %2537 = fn (%p0573: Tensor[(?, 4), float32], %p1220: Tensor[(2), int32], %p2191: Tensor[(2), int64], %p376: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0573, %p1220, %p2191, %p376, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2538 = (%in_shape_0115, %in_shape_178, %in_shape_256, meta[relay.Constant][904] /* ty=Tensor[(2), int32] */);
  %2539 = (%shape_func_out_0127,);
  let %shape_func127: () = vm.shape_func(%2537, %2538, %2539, meta[relay.attrs.ShapeFuncAttrs][127]) /* ty=() */;
  let %storage_0697: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][710]) /* ty=Storage[] */;
  let %tensor_0576: int64 = memory.alloc_tensor(%storage_0697, 0 /* ty=int64 */, meta[relay.Constant][905] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][710]) /* ty=int64 */;
  %2540 = fn (%p0574: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0574) /* ty=int64 */
  };
  %2541 = (%shape_func_out_0127,);
  %2542 = (%tensor_0576,);
  let %x908: () = vm.invoke_tvm_op(%2540, %2541, %2542) /* ty=() */;
  let %storage_0698: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][711]) /* ty=Storage[] */;
  let %tensor_0577: int64 = memory.alloc_tensor(%storage_0698, 0 /* ty=int64 */, meta[relay.Constant][906] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][711]) /* ty=int64 */;
  %2543 = fn (%p0575: int64, Primitive=1) -> int64 {
    multiply(%p0575, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2544 = (%tensor_0576,);
  %2545 = (%tensor_0577,);
  let %x909: () = vm.invoke_tvm_op(%2543, %2544, %2545) /* ty=() */;
  let %storage_0699: Storage[] = memory.alloc_storage(%tensor_0577, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][712]) /* ty=Storage[] */;
  let %out_0121: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0699, 0 /* ty=int64 */, %shape_func_out_0127, meta[relay.attrs.AllocTensorAttrs][712]) /* ty=Tensor[(?, ?), float32] */;
  %2546 = (%x848, %x907, %x854, meta[relay.Constant][904] /* ty=Tensor[(2), int32] */);
  %2547 = (%out_0121,);
  let %x910: () = vm.invoke_tvm_op(%2537, %2546, %2547) /* ty=() */;
  let %x911: Tensor[(?, ?), float32] = %out_0121;
  let %storage_0700: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][713]) /* ty=Storage[] */;
  let %tensor_0578: Tensor[(2), int32] = memory.alloc_tensor(%storage_0700, 0 /* ty=int64 */, meta[relay.Constant][907] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][713]) /* ty=Tensor[(2), int32] */;
  %2548 = fn (%p0576: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0576, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2549 = (%x911,);
  %2550 = (%tensor_0578,);
  let %x912: () = vm.invoke_tvm_op(%2548, %2549, %2550) /* ty=() */;
  let %x913: Tensor[(2), int32] = %tensor_0578;
  let %storage_0701: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][714]) /* ty=Storage[] */;
  let %tensor_0579: Tensor[(2), int32] = memory.alloc_tensor(%storage_0701, 0 /* ty=int64 */, meta[relay.Constant][908] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][714]) /* ty=Tensor[(2), int32] */;
  %2553 = fn (%p0577: Tensor[(2), int32], %p1221: Tensor[(2), int32], %p2192: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %2551 = cast_like(%p0577, %p1221) /* ty=Tensor[(2), int32] */;
    %2552 = add(%p1221, %2551) /* ty=Tensor[(2), int32] */;
    where(%p2192, %2552, %p1221) /* ty=Tensor[(2), int32] */
  };
  %2554 = (%x913, meta[relay.Constant][909] /* ty=Tensor[(2), int32] */, meta[relay.Constant][910] /* ty=Tensor[(2), bool] */);
  %2555 = (%tensor_0579,);
  let %x914: () = vm.invoke_tvm_op(%2553, %2554, %2555) /* ty=() */;
  let %x915: Tensor[(2), int32] = %tensor_0579;
  let %storage_0702: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][715]) /* ty=Storage[] */;
  let %tensor_0580: Tensor[(2), int32] = memory.alloc_tensor(%storage_0702, 0 /* ty=int64 */, meta[relay.Constant][911] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][715]) /* ty=Tensor[(2), int32] */;
  %2556 = fn (%p0578: Tensor[(2), int32], %p1222: Tensor[(1), int32], Primitive=1) -> Tensor[(2), int32] {
    scatter(%p0578, %p1222, %p1222, meta[relay.attrs.ScatterAttrs][1]) /* ty=Tensor[(2), int32] */
  };
  %2557 = (%x913, meta[relay.Constant][396] /* ty=Tensor[(1), int32] */);
  %2558 = (%tensor_0580,);
  let %x916: () = vm.invoke_tvm_op(%2556, %2557, %2558) /* ty=() */;
  let %x917: Tensor[(2), int32] = %tensor_0580;
  let %storage_0703: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][716]) /* ty=Storage[] */;
  let %tensor_0581: Tensor[(2), int64] = memory.alloc_tensor(%storage_0703, 0 /* ty=int64 */, meta[relay.Constant][912] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][716]) /* ty=Tensor[(2), int64] */;
  %2559 = fn (%p0579: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0579, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2560 = (%x917,);
  %2561 = (%tensor_0581,);
  let %x918: () = vm.invoke_tvm_op(%2559, %2560, %2561) /* ty=() */;
  let %x919: Tensor[(2), int64] = %tensor_0581;
  let %in_shape_0116: Tensor[(2), int64] = vm.shape_of(%x911, meta[relay.attrs.ShapeOfAttrs][164]) /* ty=Tensor[(2), int64] */;
  let %in_shape_179: Tensor[(2), int32] = %x915;
  let %in_shape_257: Tensor[(2), int64] = %x919;
  let %storage_0704: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][717]) /* ty=Storage[] */;
  let %tensor_0582: Tensor[(2), int64] = memory.alloc_tensor(%storage_0704, 0 /* ty=int64 */, meta[relay.Constant][913] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][717]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0128: Tensor[(2), int64] = %tensor_0582;
  %2562 = fn (%p0580: Tensor[(?, ?), float32], %p1223: Tensor[(2), int32], %p2193: Tensor[(2), int64], %p377: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0580, %p1223, %p2193, %p377, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2563 = (%in_shape_0116, %in_shape_179, %in_shape_257, meta[relay.Constant][914] /* ty=Tensor[(2), int32] */);
  %2564 = (%shape_func_out_0128,);
  let %shape_func128: () = vm.shape_func(%2562, %2563, %2564, meta[relay.attrs.ShapeFuncAttrs][128]) /* ty=() */;
  let %storage_0705: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][718]) /* ty=Storage[] */;
  let %tensor_0583: int64 = memory.alloc_tensor(%storage_0705, 0 /* ty=int64 */, meta[relay.Constant][915] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][718]) /* ty=int64 */;
  %2565 = fn (%p0581: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0581) /* ty=int64 */
  };
  %2566 = (%shape_func_out_0128,);
  %2567 = (%tensor_0583,);
  let %x920: () = vm.invoke_tvm_op(%2565, %2566, %2567) /* ty=() */;
  let %storage_0706: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][719]) /* ty=Storage[] */;
  let %tensor_0584: int64 = memory.alloc_tensor(%storage_0706, 0 /* ty=int64 */, meta[relay.Constant][916] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][719]) /* ty=int64 */;
  %2568 = fn (%p0582: int64, Primitive=1) -> int64 {
    multiply(%p0582, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2569 = (%tensor_0583,);
  %2570 = (%tensor_0584,);
  let %x921: () = vm.invoke_tvm_op(%2568, %2569, %2570) /* ty=() */;
  let %storage_0707: Storage[] = memory.alloc_storage(%tensor_0584, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][720]) /* ty=Storage[] */;
  let %out_0122: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0707, 0 /* ty=int64 */, %shape_func_out_0128, meta[relay.attrs.AllocTensorAttrs][720]) /* ty=Tensor[(?, ?), float32] */;
  %2571 = (%x911, %x915, %x919, meta[relay.Constant][914] /* ty=Tensor[(2), int32] */);
  %2572 = (%out_0122,);
  let %x922: () = vm.invoke_tvm_op(%2562, %2571, %2572) /* ty=() */;
  let %x923: Tensor[(?, ?), float32] = %out_0122;
  let %in_shape_0117: Tensor[(2), int64] = vm.shape_of(%x923, meta[relay.attrs.ShapeOfAttrs][165]) /* ty=Tensor[(2), int64] */;
  let %in_shape_180: Tensor[(2), int64] = vm.shape_of(%x848, meta[relay.attrs.ShapeOfAttrs][166]) /* ty=Tensor[(2), int64] */;
  let %storage_0708: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][721]) /* ty=Storage[] */;
  let %tensor_0585: Tensor[(2), int64] = memory.alloc_tensor(%storage_0708, 0 /* ty=int64 */, meta[relay.Constant][917] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][721]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0129: Tensor[(2), int64] = %tensor_0585;
  %2579 = fn (%p0583: Tensor[(?, ?), float32], %p1224: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(?, ?), float32] {
    %2573 = full_like(%p0583, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
    %2574 = (%2573,);
    %2575 = concatenate(%2574) /* ty=Tensor[(?, ?), float32] */;
    %2576 = (%p1224,);
    %2577 = concatenate(%2576) /* ty=Tensor[(?, 4), float32] */;
    %2578 = (%2575, %2577);
    concatenate(%2578, axis=1) /* ty=Tensor[(?, ?), float32] */
  };
  %2580 = (%in_shape_0117, %in_shape_180);
  %2581 = (%shape_func_out_0129,);
  let %shape_func129: () = vm.shape_func(%2579, %2580, %2581, meta[relay.attrs.ShapeFuncAttrs][129]) /* ty=() */;
  let %storage_0709: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][722]) /* ty=Storage[] */;
  let %tensor_0586: int64 = memory.alloc_tensor(%storage_0709, 0 /* ty=int64 */, meta[relay.Constant][918] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][722]) /* ty=int64 */;
  %2582 = fn (%p0584: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0584) /* ty=int64 */
  };
  %2583 = (%shape_func_out_0129,);
  %2584 = (%tensor_0586,);
  let %x924: () = vm.invoke_tvm_op(%2582, %2583, %2584) /* ty=() */;
  let %storage_0710: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][723]) /* ty=Storage[] */;
  let %tensor_0587: int64 = memory.alloc_tensor(%storage_0710, 0 /* ty=int64 */, meta[relay.Constant][919] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][723]) /* ty=int64 */;
  %2585 = fn (%p0585: int64, Primitive=1) -> int64 {
    multiply(%p0585, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2586 = (%tensor_0586,);
  %2587 = (%tensor_0587,);
  let %x925: () = vm.invoke_tvm_op(%2585, %2586, %2587) /* ty=() */;
  let %storage_0711: Storage[] = memory.alloc_storage(%tensor_0587, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][724]) /* ty=Storage[] */;
  let %out_0123: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0711, 0 /* ty=int64 */, %shape_func_out_0129, meta[relay.attrs.AllocTensorAttrs][724]) /* ty=Tensor[(?, ?), float32] */;
  %2588 = (%x923, %x848);
  %2589 = (%out_0123,);
  let %x926: () = vm.invoke_tvm_op(%2579, %2588, %2589) /* ty=() */;
  let %x927: Tensor[(?, ?), float32] = %out_0123;
  let %in_shape_0118: Tensor[(1), int64] = vm.shape_of(%x901, meta[relay.attrs.ShapeOfAttrs][167]) /* ty=Tensor[(1), int64] */;
  let %in_shape_181: Tensor[(2), int64] = vm.shape_of(%x927, meta[relay.attrs.ShapeOfAttrs][168]) /* ty=Tensor[(2), int64] */;
  let %storage_0712: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][725]) /* ty=Storage[] */;
  let %tensor_0588: Tensor[(2), int64] = memory.alloc_tensor(%storage_0712, 0 /* ty=int64 */, meta[relay.Constant][920] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][725]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0130: Tensor[(2), int64] = %tensor_0588;
  %2592 = fn (%p0586: Tensor[(?), int32], %p1225: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
    %2590 = cast(%p0586, dtype="int64") /* ty=Tensor[(?), int64] */;
    %2591 = (%p1225, %2590);
    adv_index(%2591) /* ty=Tensor[(?, ?), float32] */
  };
  %2593 = (%in_shape_0118, %in_shape_181);
  %2594 = (%shape_func_out_0130,);
  let %shape_func130: () = vm.shape_func(%2592, %2593, %2594, meta[relay.attrs.ShapeFuncAttrs][130]) /* ty=() */;
  let %storage_0713: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][726]) /* ty=Storage[] */;
  let %tensor_0589: int64 = memory.alloc_tensor(%storage_0713, 0 /* ty=int64 */, meta[relay.Constant][921] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][726]) /* ty=int64 */;
  %2595 = fn (%p0587: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0587) /* ty=int64 */
  };
  %2596 = (%shape_func_out_0130,);
  %2597 = (%tensor_0589,);
  let %x928: () = vm.invoke_tvm_op(%2595, %2596, %2597) /* ty=() */;
  let %storage_0714: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][727]) /* ty=Storage[] */;
  let %tensor_0590: int64 = memory.alloc_tensor(%storage_0714, 0 /* ty=int64 */, meta[relay.Constant][922] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][727]) /* ty=int64 */;
  %2598 = fn (%p0588: int64, Primitive=1) -> int64 {
    multiply(%p0588, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2599 = (%tensor_0589,);
  %2600 = (%tensor_0590,);
  let %x929: () = vm.invoke_tvm_op(%2598, %2599, %2600) /* ty=() */;
  let %storage_0715: Storage[] = memory.alloc_storage(%tensor_0590, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][728]) /* ty=Storage[] */;
  let %out_0124: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0715, 0 /* ty=int64 */, %shape_func_out_0130, meta[relay.attrs.AllocTensorAttrs][728]) /* ty=Tensor[(?, ?), float32] */;
  %2601 = (%x901, %x927);
  %2602 = (%out_0124,);
  let %x930: () = vm.invoke_tvm_op(%2592, %2601, %2602) /* ty=() */;
  let %x931: Tensor[(?, ?), float32] = %out_0124;
  let %in_shape_182: Tensor[(2), int64] = vm.shape_of(%x931, meta[relay.attrs.ShapeOfAttrs][169]) /* ty=Tensor[(2), int64] */;
  let %storage_0716: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][729]) /* ty=Storage[] */;
  let %tensor_0591: Tensor[(4), int64] = memory.alloc_tensor(%storage_0716, 0 /* ty=int64 */, meta[relay.Constant][923] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][729]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0131: Tensor[(4), int64] = %tensor_0591;
  %2603 = fn (%p0589: Tensor[(1, 256, 200, 200), float32], %p1226: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    vision.roi_align(%p0589, %p1226, meta[relay.attrs.ROIAlignAttrs][4]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %2604 = (meta[relay.Constant][924] /* ty=Tensor[(4), int64] */, %in_shape_182);
  %2605 = (%shape_func_out_0131,);
  let %shape_func131: () = vm.shape_func(%2603, %2604, %2605, meta[relay.attrs.ShapeFuncAttrs][131]) /* ty=() */;
  let %storage_0717: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][730]) /* ty=Storage[] */;
  let %tensor_0592: int64 = memory.alloc_tensor(%storage_0717, 0 /* ty=int64 */, meta[relay.Constant][925] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][730]) /* ty=int64 */;
  %2606 = fn (%p0590: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0590) /* ty=int64 */
  };
  %2607 = (%shape_func_out_0131,);
  %2608 = (%tensor_0592,);
  let %x932: () = vm.invoke_tvm_op(%2606, %2607, %2608) /* ty=() */;
  let %storage_0718: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][731]) /* ty=Storage[] */;
  let %tensor_0593: int64 = memory.alloc_tensor(%storage_0718, 0 /* ty=int64 */, meta[relay.Constant][926] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][731]) /* ty=int64 */;
  %2609 = fn (%p0591: int64, Primitive=1) -> int64 {
    multiply(%p0591, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2610 = (%tensor_0592,);
  %2611 = (%tensor_0593,);
  let %x933: () = vm.invoke_tvm_op(%2609, %2610, %2611) /* ty=() */;
  let %storage_0719: Storage[] = memory.alloc_storage(%tensor_0593, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][732]) /* ty=Storage[] */;
  let %out_0125: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_0719, 0 /* ty=int64 */, %shape_func_out_0131, meta[relay.attrs.AllocTensorAttrs][732]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2612 = (%x352, %x931);
  %2613 = (%out_0125,);
  let %x934: () = vm.invoke_tvm_op(%2603, %2612, %2613) /* ty=() */;
  let %x935: Tensor[(?, 256, 14, 14), float32] = %out_0125;
  let %in_shape_0119: Tensor[(4), int64] = vm.shape_of(%x889, meta[relay.attrs.ShapeOfAttrs][170]) /* ty=Tensor[(4), int64] */;
  let %in_shape_183: Tensor[(4), int64] = vm.shape_of(%x905, meta[relay.attrs.ShapeOfAttrs][171]) /* ty=Tensor[(4), int64] */;
  let %in_shape_258: Tensor[(4), int64] = vm.shape_of(%x935, meta[relay.attrs.ShapeOfAttrs][172]) /* ty=Tensor[(4), int64] */;
  let %storage_0720: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][733]) /* ty=Storage[] */;
  let %tensor_0594: Tensor[(4), int64] = memory.alloc_tensor(%storage_0720, 0 /* ty=int64 */, meta[relay.Constant][927] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][733]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0132: Tensor[(4), int64] = %tensor_0594;
  %2614 = fn (%p0592: Tensor[(?, 256, 14, 14), float32], %p1227: Tensor[(?, 256, 14, 14), int32], %p2194: Tensor[(?, 256, 14, 14), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    scatter(%p0592, %p1227, %p2194, meta[relay.attrs.ScatterAttrs][2]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %2615 = (%in_shape_0119, %in_shape_183, %in_shape_258);
  %2616 = (%shape_func_out_0132,);
  let %shape_func132: () = vm.shape_func(%2614, %2615, %2616, meta[relay.attrs.ShapeFuncAttrs][132]) /* ty=() */;
  let %storage_0721: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][734]) /* ty=Storage[] */;
  let %tensor_0595: int64 = memory.alloc_tensor(%storage_0721, 0 /* ty=int64 */, meta[relay.Constant][928] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][734]) /* ty=int64 */;
  %2617 = fn (%p0593: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0593) /* ty=int64 */
  };
  %2618 = (%shape_func_out_0132,);
  %2619 = (%tensor_0595,);
  let %x936: () = vm.invoke_tvm_op(%2617, %2618, %2619) /* ty=() */;
  let %storage_0722: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][735]) /* ty=Storage[] */;
  let %tensor_0596: int64 = memory.alloc_tensor(%storage_0722, 0 /* ty=int64 */, meta[relay.Constant][929] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][735]) /* ty=int64 */;
  %2620 = fn (%p0594: int64, Primitive=1) -> int64 {
    multiply(%p0594, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2621 = (%tensor_0595,);
  %2622 = (%tensor_0596,);
  let %x937: () = vm.invoke_tvm_op(%2620, %2621, %2622) /* ty=() */;
  let %storage_0723: Storage[] = memory.alloc_storage(%tensor_0596, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][736]) /* ty=Storage[] */;
  let %out_0126: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_0723, 0 /* ty=int64 */, %shape_func_out_0132, meta[relay.attrs.AllocTensorAttrs][736]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2623 = (%x889, %x905, %x935);
  %2624 = (%out_0126,);
  let %x938: () = vm.invoke_tvm_op(%2614, %2623, %2624) /* ty=() */;
  let %x939: Tensor[(?, 256, 14, 14), float32] = %out_0126;
  let %in_shape_0120: Tensor[(1), int64] = vm.shape_of(%x880, meta[relay.attrs.ShapeOfAttrs][173]) /* ty=Tensor[(1), int64] */;
  let %storage_0724: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][737]) /* ty=Storage[] */;
  let %tensor_0597: Tensor[(1), int64] = memory.alloc_tensor(%storage_0724, 0 /* ty=int64 */, meta[relay.Constant][930] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][737]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0133: Tensor[(1), int64] = %tensor_0597;
  %2625 = fn (%p0595: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0595, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %2626 = (%in_shape_0120,);
  %2627 = (%shape_func_out_0133,);
  let %shape_func133: () = vm.shape_func(%2625, %2626, %2627, meta[relay.attrs.ShapeFuncAttrs][133]) /* ty=() */;
  let %storage_0725: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][738]) /* ty=Storage[] */;
  let %tensor_0598: int64 = memory.alloc_tensor(%storage_0725, 0 /* ty=int64 */, meta[relay.Constant][931] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][738]) /* ty=int64 */;
  %2628 = fn (%p0596: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0596) /* ty=int64 */
  };
  %2629 = (%shape_func_out_0133,);
  %2630 = (%tensor_0598,);
  let %x940: () = vm.invoke_tvm_op(%2628, %2629, %2630) /* ty=() */;
  let %storage_0726: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][739]) /* ty=Storage[] */;
  let %tensor_0599: int64 = memory.alloc_tensor(%storage_0726, 0 /* ty=int64 */, meta[relay.Constant][932] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][739]) /* ty=int64 */;
  %2631 = fn (%p0597: int64, Primitive=1) -> int64 {
    multiply(%p0597, 1 /* ty=int64 */) /* ty=int64 */
  };
  %2632 = (%tensor_0598,);
  %2633 = (%tensor_0599,);
  let %x941: () = vm.invoke_tvm_op(%2631, %2632, %2633) /* ty=() */;
  let %storage_0727: Storage[] = memory.alloc_storage(%tensor_0599, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][740]) /* ty=Storage[] */;
  let %out_0127: Tensor[(?), bool] = memory.alloc_tensor(%storage_0727, 0 /* ty=int64 */, %shape_func_out_0133, meta[relay.attrs.AllocTensorAttrs][740]) /* ty=Tensor[(?), bool] */;
  %2634 = (%x880,);
  %2635 = (%out_0127,);
  let %x942: () = vm.invoke_tvm_op(%2625, %2634, %2635) /* ty=() */;
  let %x943: Tensor[(?), bool] = %out_0127;
  let %in_shape_0121: Tensor[(?), bool] = %x943;
  let %storage_0728: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][741]) /* ty=Storage[] */;
  let %tensor_0600: Tensor[(2), int64] = memory.alloc_tensor(%storage_0728, 0 /* ty=int64 */, meta[relay.Constant][933] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][741]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0134: Tensor[(2), int64] = %tensor_0600;
  %2636 = fn (%p0598: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0598) /* ty=Tensor[(?, 1), int32] */
  };
  %2637 = (%in_shape_0121,);
  %2638 = (%shape_func_out_0134,);
  let %shape_func134: () = vm.shape_func(%2636, %2637, %2638, meta[relay.attrs.ShapeFuncAttrs][134]) /* ty=() */;
  let %storage_0729: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][742]) /* ty=Storage[] */;
  let %tensor_0601: int64 = memory.alloc_tensor(%storage_0729, 0 /* ty=int64 */, meta[relay.Constant][934] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][742]) /* ty=int64 */;
  %2639 = fn (%p0599: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0599) /* ty=int64 */
  };
  %2640 = (%shape_func_out_0134,);
  %2641 = (%tensor_0601,);
  let %x944: () = vm.invoke_tvm_op(%2639, %2640, %2641) /* ty=() */;
  let %storage_0730: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][743]) /* ty=Storage[] */;
  let %tensor_0602: int64 = memory.alloc_tensor(%storage_0730, 0 /* ty=int64 */, meta[relay.Constant][935] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][743]) /* ty=int64 */;
  %2642 = fn (%p0600: int64, Primitive=1) -> int64 {
    multiply(%p0600, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2643 = (%tensor_0601,);
  %2644 = (%tensor_0602,);
  let %x945: () = vm.invoke_tvm_op(%2642, %2643, %2644) /* ty=() */;
  let %storage_0731: Storage[] = memory.alloc_storage(%tensor_0602, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][744]) /* ty=Storage[] */;
  let %out_0128: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0731, 0 /* ty=int64 */, %shape_func_out_0134, meta[relay.attrs.AllocTensorAttrs][744]) /* ty=Tensor[(?, 1), int32] */;
  %2645 = (%x943,);
  %2646 = (%out_0128,);
  let %x946: () = vm.invoke_tvm_op(%2636, %2645, %2646) /* ty=() */;
  let %x947: Tensor[(?, 1), int32] = %out_0128;
  let %in_shape_0122: Tensor[(2), int64] = vm.shape_of(%x947, meta[relay.attrs.ShapeOfAttrs][174]) /* ty=Tensor[(2), int64] */;
  let %storage_0732: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][745]) /* ty=Storage[] */;
  let %tensor_0603: Tensor[(1), int64] = memory.alloc_tensor(%storage_0732, 0 /* ty=int64 */, meta[relay.Constant][936] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][745]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0135: Tensor[(1), int64] = %tensor_0603;
  %2649 = fn (%p0601: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %2647 = split(%p0601, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %2648 = %2647.0;
    squeeze(%2648, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %2650 = (%in_shape_0122,);
  %2651 = (%shape_func_out_0135,);
  let %shape_func135: () = vm.shape_func(%2649, %2650, %2651, meta[relay.attrs.ShapeFuncAttrs][135]) /* ty=() */;
  let %storage_0733: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][746]) /* ty=Storage[] */;
  let %tensor_0604: int64 = memory.alloc_tensor(%storage_0733, 0 /* ty=int64 */, meta[relay.Constant][937] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][746]) /* ty=int64 */;
  %2652 = fn (%p0602: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0602) /* ty=int64 */
  };
  %2653 = (%shape_func_out_0135,);
  %2654 = (%tensor_0604,);
  let %x948: () = vm.invoke_tvm_op(%2652, %2653, %2654) /* ty=() */;
  let %storage_0734: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][747]) /* ty=Storage[] */;
  let %tensor_0605: int64 = memory.alloc_tensor(%storage_0734, 0 /* ty=int64 */, meta[relay.Constant][938] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][747]) /* ty=int64 */;
  %2655 = fn (%p0603: int64, Primitive=1) -> int64 {
    multiply(%p0603, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2656 = (%tensor_0604,);
  %2657 = (%tensor_0605,);
  let %x949: () = vm.invoke_tvm_op(%2655, %2656, %2657) /* ty=() */;
  let %storage_0735: Storage[] = memory.alloc_storage(%tensor_0605, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][748]) /* ty=Storage[] */;
  let %out_0129: Tensor[(?), int32] = memory.alloc_tensor(%storage_0735, 0 /* ty=int64 */, %shape_func_out_0135, meta[relay.attrs.AllocTensorAttrs][748]) /* ty=Tensor[(?), int32] */;
  %2658 = (%x947,);
  %2659 = (%out_0129,);
  let %x950: () = vm.invoke_tvm_op(%2649, %2658, %2659) /* ty=() */;
  let %x951: Tensor[(?), int32] = %out_0129;
  let %in_shape_0123: Tensor[(1), int64] = vm.shape_of(%x951, meta[relay.attrs.ShapeOfAttrs][175]) /* ty=Tensor[(1), int64] */;
  let %storage_0736: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][749]) /* ty=Storage[] */;
  let %tensor_0606: Tensor[(4), int64] = memory.alloc_tensor(%storage_0736, 0 /* ty=int64 */, meta[relay.Constant][939] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][749]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0136: Tensor[(4), int64] = %tensor_0606;
  %2663 = fn (%p0604: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 14, 14), int32] {
    %2660 = reshape(%p0604, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %2661 = repeat(%2660, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %2662 = repeat(%2661, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
    repeat(%2662, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */
  };
  %2664 = (%in_shape_0123,);
  %2665 = (%shape_func_out_0136,);
  let %shape_func136: () = vm.shape_func(%2663, %2664, %2665, meta[relay.attrs.ShapeFuncAttrs][136]) /* ty=() */;
  let %storage_0737: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][750]) /* ty=Storage[] */;
  let %tensor_0607: int64 = memory.alloc_tensor(%storage_0737, 0 /* ty=int64 */, meta[relay.Constant][940] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][750]) /* ty=int64 */;
  %2666 = fn (%p0605: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0605) /* ty=int64 */
  };
  %2667 = (%shape_func_out_0136,);
  %2668 = (%tensor_0607,);
  let %x952: () = vm.invoke_tvm_op(%2666, %2667, %2668) /* ty=() */;
  let %storage_0738: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][751]) /* ty=Storage[] */;
  let %tensor_0608: int64 = memory.alloc_tensor(%storage_0738, 0 /* ty=int64 */, meta[relay.Constant][941] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][751]) /* ty=int64 */;
  %2669 = fn (%p0606: int64, Primitive=1) -> int64 {
    multiply(%p0606, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2670 = (%tensor_0607,);
  %2671 = (%tensor_0608,);
  let %x953: () = vm.invoke_tvm_op(%2669, %2670, %2671) /* ty=() */;
  let %storage_0739: Storage[] = memory.alloc_storage(%tensor_0608, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][752]) /* ty=Storage[] */;
  let %out_0130: Tensor[(?, 256, 14, 14), int32] = memory.alloc_tensor(%storage_0739, 0 /* ty=int64 */, %shape_func_out_0136, meta[relay.attrs.AllocTensorAttrs][752]) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2672 = (%x951,);
  %2673 = (%out_0130,);
  let %x954: () = vm.invoke_tvm_op(%2663, %2672, %2673) /* ty=() */;
  let %x955: Tensor[(?, 256, 14, 14), int32] = %out_0130;
  let %in_shape_0124: Tensor[(1), int64] = vm.shape_of(%x951, meta[relay.attrs.ShapeOfAttrs][176]) /* ty=Tensor[(1), int64] */;
  let %in_shape_184: Tensor[(2), int64] = vm.shape_of(%x927, meta[relay.attrs.ShapeOfAttrs][177]) /* ty=Tensor[(2), int64] */;
  let %storage_0740: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][753]) /* ty=Storage[] */;
  let %tensor_0609: Tensor[(2), int64] = memory.alloc_tensor(%storage_0740, 0 /* ty=int64 */, meta[relay.Constant][942] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][753]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0137: Tensor[(2), int64] = %tensor_0609;
  %2676 = fn (%p0607: Tensor[(?), int32], %p1228: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
    %2674 = cast(%p0607, dtype="int64") /* ty=Tensor[(?), int64] */;
    %2675 = (%p1228, %2674);
    adv_index(%2675) /* ty=Tensor[(?, ?), float32] */
  };
  %2677 = (%in_shape_0124, %in_shape_184);
  %2678 = (%shape_func_out_0137,);
  let %shape_func137: () = vm.shape_func(%2676, %2677, %2678, meta[relay.attrs.ShapeFuncAttrs][137]) /* ty=() */;
  let %storage_0741: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][754]) /* ty=Storage[] */;
  let %tensor_0610: int64 = memory.alloc_tensor(%storage_0741, 0 /* ty=int64 */, meta[relay.Constant][943] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][754]) /* ty=int64 */;
  %2679 = fn (%p0608: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0608) /* ty=int64 */
  };
  %2680 = (%shape_func_out_0137,);
  %2681 = (%tensor_0610,);
  let %x956: () = vm.invoke_tvm_op(%2679, %2680, %2681) /* ty=() */;
  let %storage_0742: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][755]) /* ty=Storage[] */;
  let %tensor_0611: int64 = memory.alloc_tensor(%storage_0742, 0 /* ty=int64 */, meta[relay.Constant][944] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][755]) /* ty=int64 */;
  %2682 = fn (%p0609: int64, Primitive=1) -> int64 {
    multiply(%p0609, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2683 = (%tensor_0610,);
  %2684 = (%tensor_0611,);
  let %x957: () = vm.invoke_tvm_op(%2682, %2683, %2684) /* ty=() */;
  let %storage_0743: Storage[] = memory.alloc_storage(%tensor_0611, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][756]) /* ty=Storage[] */;
  let %out_0131: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0743, 0 /* ty=int64 */, %shape_func_out_0137, meta[relay.attrs.AllocTensorAttrs][756]) /* ty=Tensor[(?, ?), float32] */;
  %2685 = (%x951, %x927);
  %2686 = (%out_0131,);
  let %x958: () = vm.invoke_tvm_op(%2676, %2685, %2686) /* ty=() */;
  let %x959: Tensor[(?, ?), float32] = %out_0131;
  let %in_shape_185: Tensor[(2), int64] = vm.shape_of(%x959, meta[relay.attrs.ShapeOfAttrs][178]) /* ty=Tensor[(2), int64] */;
  let %storage_0744: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][757]) /* ty=Storage[] */;
  let %tensor_0612: Tensor[(4), int64] = memory.alloc_tensor(%storage_0744, 0 /* ty=int64 */, meta[relay.Constant][945] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][757]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0138: Tensor[(4), int64] = %tensor_0612;
  %2687 = fn (%p0610: Tensor[(1, 256, 100, 100), float32], %p1229: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    vision.roi_align(%p0610, %p1229, meta[relay.attrs.ROIAlignAttrs][5]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %2688 = (meta[relay.Constant][946] /* ty=Tensor[(4), int64] */, %in_shape_185);
  %2689 = (%shape_func_out_0138,);
  let %shape_func138: () = vm.shape_func(%2687, %2688, %2689, meta[relay.attrs.ShapeFuncAttrs][138]) /* ty=() */;
  let %storage_0745: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][758]) /* ty=Storage[] */;
  let %tensor_0613: int64 = memory.alloc_tensor(%storage_0745, 0 /* ty=int64 */, meta[relay.Constant][947] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][758]) /* ty=int64 */;
  %2690 = fn (%p0611: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0611) /* ty=int64 */
  };
  %2691 = (%shape_func_out_0138,);
  %2692 = (%tensor_0613,);
  let %x960: () = vm.invoke_tvm_op(%2690, %2691, %2692) /* ty=() */;
  let %storage_0746: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][759]) /* ty=Storage[] */;
  let %tensor_0614: int64 = memory.alloc_tensor(%storage_0746, 0 /* ty=int64 */, meta[relay.Constant][948] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][759]) /* ty=int64 */;
  %2693 = fn (%p0612: int64, Primitive=1) -> int64 {
    multiply(%p0612, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2694 = (%tensor_0613,);
  %2695 = (%tensor_0614,);
  let %x961: () = vm.invoke_tvm_op(%2693, %2694, %2695) /* ty=() */;
  let %storage_0747: Storage[] = memory.alloc_storage(%tensor_0614, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][760]) /* ty=Storage[] */;
  let %out_0132: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_0747, 0 /* ty=int64 */, %shape_func_out_0138, meta[relay.attrs.AllocTensorAttrs][760]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2696 = (%x384, %x959);
  %2697 = (%out_0132,);
  let %x962: () = vm.invoke_tvm_op(%2687, %2696, %2697) /* ty=() */;
  let %x963: Tensor[(?, 256, 14, 14), float32] = %out_0132;
  let %in_shape_0125: Tensor[(4), int64] = vm.shape_of(%x939, meta[relay.attrs.ShapeOfAttrs][179]) /* ty=Tensor[(4), int64] */;
  let %in_shape_186: Tensor[(4), int64] = vm.shape_of(%x955, meta[relay.attrs.ShapeOfAttrs][180]) /* ty=Tensor[(4), int64] */;
  let %in_shape_259: Tensor[(4), int64] = vm.shape_of(%x963, meta[relay.attrs.ShapeOfAttrs][181]) /* ty=Tensor[(4), int64] */;
  let %storage_0748: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][761]) /* ty=Storage[] */;
  let %tensor_0615: Tensor[(4), int64] = memory.alloc_tensor(%storage_0748, 0 /* ty=int64 */, meta[relay.Constant][949] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][761]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0139: Tensor[(4), int64] = %tensor_0615;
  %2698 = fn (%p0613: Tensor[(?, 256, 14, 14), float32], %p1230: Tensor[(?, 256, 14, 14), int32], %p2195: Tensor[(?, 256, 14, 14), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    scatter(%p0613, %p1230, %p2195, meta[relay.attrs.ScatterAttrs][3]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %2699 = (%in_shape_0125, %in_shape_186, %in_shape_259);
  %2700 = (%shape_func_out_0139,);
  let %shape_func139: () = vm.shape_func(%2698, %2699, %2700, meta[relay.attrs.ShapeFuncAttrs][139]) /* ty=() */;
  let %storage_0749: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][762]) /* ty=Storage[] */;
  let %tensor_0616: int64 = memory.alloc_tensor(%storage_0749, 0 /* ty=int64 */, meta[relay.Constant][950] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][762]) /* ty=int64 */;
  %2701 = fn (%p0614: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0614) /* ty=int64 */
  };
  %2702 = (%shape_func_out_0139,);
  %2703 = (%tensor_0616,);
  let %x964: () = vm.invoke_tvm_op(%2701, %2702, %2703) /* ty=() */;
  let %storage_0750: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][763]) /* ty=Storage[] */;
  let %tensor_0617: int64 = memory.alloc_tensor(%storage_0750, 0 /* ty=int64 */, meta[relay.Constant][951] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][763]) /* ty=int64 */;
  %2704 = fn (%p0615: int64, Primitive=1) -> int64 {
    multiply(%p0615, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2705 = (%tensor_0616,);
  %2706 = (%tensor_0617,);
  let %x965: () = vm.invoke_tvm_op(%2704, %2705, %2706) /* ty=() */;
  let %storage_0751: Storage[] = memory.alloc_storage(%tensor_0617, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][764]) /* ty=Storage[] */;
  let %out_0133: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_0751, 0 /* ty=int64 */, %shape_func_out_0139, meta[relay.attrs.AllocTensorAttrs][764]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2707 = (%x939, %x955, %x963);
  %2708 = (%out_0133,);
  let %x966: () = vm.invoke_tvm_op(%2698, %2707, %2708) /* ty=() */;
  let %x967: Tensor[(?, 256, 14, 14), float32] = %out_0133;
  let %in_shape_0126: Tensor[(1), int64] = vm.shape_of(%x880, meta[relay.attrs.ShapeOfAttrs][182]) /* ty=Tensor[(1), int64] */;
  let %storage_0752: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][765]) /* ty=Storage[] */;
  let %tensor_0618: Tensor[(1), int64] = memory.alloc_tensor(%storage_0752, 0 /* ty=int64 */, meta[relay.Constant][952] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][765]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0140: Tensor[(1), int64] = %tensor_0618;
  %2709 = fn (%p0616: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0616, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %2710 = (%in_shape_0126,);
  %2711 = (%shape_func_out_0140,);
  let %shape_func140: () = vm.shape_func(%2709, %2710, %2711, meta[relay.attrs.ShapeFuncAttrs][140]) /* ty=() */;
  let %storage_0753: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][766]) /* ty=Storage[] */;
  let %tensor_0619: int64 = memory.alloc_tensor(%storage_0753, 0 /* ty=int64 */, meta[relay.Constant][953] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][766]) /* ty=int64 */;
  %2712 = fn (%p0617: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0617) /* ty=int64 */
  };
  %2713 = (%shape_func_out_0140,);
  %2714 = (%tensor_0619,);
  let %x968: () = vm.invoke_tvm_op(%2712, %2713, %2714) /* ty=() */;
  let %storage_0754: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][767]) /* ty=Storage[] */;
  let %tensor_0620: int64 = memory.alloc_tensor(%storage_0754, 0 /* ty=int64 */, meta[relay.Constant][954] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][767]) /* ty=int64 */;
  %2715 = fn (%p0618: int64, Primitive=1) -> int64 {
    multiply(%p0618, 1 /* ty=int64 */) /* ty=int64 */
  };
  %2716 = (%tensor_0619,);
  %2717 = (%tensor_0620,);
  let %x969: () = vm.invoke_tvm_op(%2715, %2716, %2717) /* ty=() */;
  let %storage_0755: Storage[] = memory.alloc_storage(%tensor_0620, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][768]) /* ty=Storage[] */;
  let %out_0134: Tensor[(?), bool] = memory.alloc_tensor(%storage_0755, 0 /* ty=int64 */, %shape_func_out_0140, meta[relay.attrs.AllocTensorAttrs][768]) /* ty=Tensor[(?), bool] */;
  %2718 = (%x880,);
  %2719 = (%out_0134,);
  let %x970: () = vm.invoke_tvm_op(%2709, %2718, %2719) /* ty=() */;
  let %x971: Tensor[(?), bool] = %out_0134;
  let %in_shape_0127: Tensor[(?), bool] = %x971;
  let %storage_0756: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][769]) /* ty=Storage[] */;
  let %tensor_0621: Tensor[(2), int64] = memory.alloc_tensor(%storage_0756, 0 /* ty=int64 */, meta[relay.Constant][955] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][769]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0141: Tensor[(2), int64] = %tensor_0621;
  %2720 = fn (%p0619: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0619) /* ty=Tensor[(?, 1), int32] */
  };
  %2721 = (%in_shape_0127,);
  %2722 = (%shape_func_out_0141,);
  let %shape_func141: () = vm.shape_func(%2720, %2721, %2722, meta[relay.attrs.ShapeFuncAttrs][141]) /* ty=() */;
  let %storage_0757: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][770]) /* ty=Storage[] */;
  let %tensor_0622: int64 = memory.alloc_tensor(%storage_0757, 0 /* ty=int64 */, meta[relay.Constant][956] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][770]) /* ty=int64 */;
  %2723 = fn (%p0620: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0620) /* ty=int64 */
  };
  %2724 = (%shape_func_out_0141,);
  %2725 = (%tensor_0622,);
  let %x972: () = vm.invoke_tvm_op(%2723, %2724, %2725) /* ty=() */;
  let %storage_0758: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][771]) /* ty=Storage[] */;
  let %tensor_0623: int64 = memory.alloc_tensor(%storage_0758, 0 /* ty=int64 */, meta[relay.Constant][957] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][771]) /* ty=int64 */;
  %2726 = fn (%p0621: int64, Primitive=1) -> int64 {
    multiply(%p0621, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2727 = (%tensor_0622,);
  %2728 = (%tensor_0623,);
  let %x973: () = vm.invoke_tvm_op(%2726, %2727, %2728) /* ty=() */;
  let %storage_0759: Storage[] = memory.alloc_storage(%tensor_0623, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][772]) /* ty=Storage[] */;
  let %out_0135: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0759, 0 /* ty=int64 */, %shape_func_out_0141, meta[relay.attrs.AllocTensorAttrs][772]) /* ty=Tensor[(?, 1), int32] */;
  %2729 = (%x971,);
  %2730 = (%out_0135,);
  let %x974: () = vm.invoke_tvm_op(%2720, %2729, %2730) /* ty=() */;
  let %x975: Tensor[(?, 1), int32] = %out_0135;
  let %in_shape_0128: Tensor[(2), int64] = vm.shape_of(%x975, meta[relay.attrs.ShapeOfAttrs][183]) /* ty=Tensor[(2), int64] */;
  let %storage_0760: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][773]) /* ty=Storage[] */;
  let %tensor_0624: Tensor[(1), int64] = memory.alloc_tensor(%storage_0760, 0 /* ty=int64 */, meta[relay.Constant][958] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][773]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0142: Tensor[(1), int64] = %tensor_0624;
  %2733 = fn (%p0622: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %2731 = split(%p0622, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %2732 = %2731.0;
    squeeze(%2732, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %2734 = (%in_shape_0128,);
  %2735 = (%shape_func_out_0142,);
  let %shape_func142: () = vm.shape_func(%2733, %2734, %2735, meta[relay.attrs.ShapeFuncAttrs][142]) /* ty=() */;
  let %storage_0761: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][774]) /* ty=Storage[] */;
  let %tensor_0625: int64 = memory.alloc_tensor(%storage_0761, 0 /* ty=int64 */, meta[relay.Constant][959] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][774]) /* ty=int64 */;
  %2736 = fn (%p0623: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0623) /* ty=int64 */
  };
  %2737 = (%shape_func_out_0142,);
  %2738 = (%tensor_0625,);
  let %x976: () = vm.invoke_tvm_op(%2736, %2737, %2738) /* ty=() */;
  let %storage_0762: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][775]) /* ty=Storage[] */;
  let %tensor_0626: int64 = memory.alloc_tensor(%storage_0762, 0 /* ty=int64 */, meta[relay.Constant][960] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][775]) /* ty=int64 */;
  %2739 = fn (%p0624: int64, Primitive=1) -> int64 {
    multiply(%p0624, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2740 = (%tensor_0625,);
  %2741 = (%tensor_0626,);
  let %x977: () = vm.invoke_tvm_op(%2739, %2740, %2741) /* ty=() */;
  let %storage_0763: Storage[] = memory.alloc_storage(%tensor_0626, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][776]) /* ty=Storage[] */;
  let %out_0136: Tensor[(?), int32] = memory.alloc_tensor(%storage_0763, 0 /* ty=int64 */, %shape_func_out_0142, meta[relay.attrs.AllocTensorAttrs][776]) /* ty=Tensor[(?), int32] */;
  %2742 = (%x975,);
  %2743 = (%out_0136,);
  let %x978: () = vm.invoke_tvm_op(%2733, %2742, %2743) /* ty=() */;
  let %x979: Tensor[(?), int32] = %out_0136;
  let %in_shape_0129: Tensor[(1), int64] = vm.shape_of(%x979, meta[relay.attrs.ShapeOfAttrs][184]) /* ty=Tensor[(1), int64] */;
  let %storage_0764: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][777]) /* ty=Storage[] */;
  let %tensor_0627: Tensor[(4), int64] = memory.alloc_tensor(%storage_0764, 0 /* ty=int64 */, meta[relay.Constant][961] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][777]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0143: Tensor[(4), int64] = %tensor_0627;
  %2747 = fn (%p0625: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 14, 14), int32] {
    %2744 = reshape(%p0625, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %2745 = repeat(%2744, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %2746 = repeat(%2745, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
    repeat(%2746, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */
  };
  %2748 = (%in_shape_0129,);
  %2749 = (%shape_func_out_0143,);
  let %shape_func143: () = vm.shape_func(%2747, %2748, %2749, meta[relay.attrs.ShapeFuncAttrs][143]) /* ty=() */;
  let %storage_0765: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][778]) /* ty=Storage[] */;
  let %tensor_0628: int64 = memory.alloc_tensor(%storage_0765, 0 /* ty=int64 */, meta[relay.Constant][962] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][778]) /* ty=int64 */;
  %2750 = fn (%p0626: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0626) /* ty=int64 */
  };
  %2751 = (%shape_func_out_0143,);
  %2752 = (%tensor_0628,);
  let %x980: () = vm.invoke_tvm_op(%2750, %2751, %2752) /* ty=() */;
  let %storage_0766: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][779]) /* ty=Storage[] */;
  let %tensor_0629: int64 = memory.alloc_tensor(%storage_0766, 0 /* ty=int64 */, meta[relay.Constant][963] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][779]) /* ty=int64 */;
  %2753 = fn (%p0627: int64, Primitive=1) -> int64 {
    multiply(%p0627, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2754 = (%tensor_0628,);
  %2755 = (%tensor_0629,);
  let %x981: () = vm.invoke_tvm_op(%2753, %2754, %2755) /* ty=() */;
  let %storage_0767: Storage[] = memory.alloc_storage(%tensor_0629, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][780]) /* ty=Storage[] */;
  let %out_0137: Tensor[(?, 256, 14, 14), int32] = memory.alloc_tensor(%storage_0767, 0 /* ty=int64 */, %shape_func_out_0143, meta[relay.attrs.AllocTensorAttrs][780]) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2756 = (%x979,);
  %2757 = (%out_0137,);
  let %x982: () = vm.invoke_tvm_op(%2747, %2756, %2757) /* ty=() */;
  let %x983: Tensor[(?, 256, 14, 14), int32] = %out_0137;
  let %in_shape_0130: Tensor[(1), int64] = vm.shape_of(%x979, meta[relay.attrs.ShapeOfAttrs][185]) /* ty=Tensor[(1), int64] */;
  let %in_shape_187: Tensor[(2), int64] = vm.shape_of(%x927, meta[relay.attrs.ShapeOfAttrs][186]) /* ty=Tensor[(2), int64] */;
  let %storage_0768: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][781]) /* ty=Storage[] */;
  let %tensor_0630: Tensor[(2), int64] = memory.alloc_tensor(%storage_0768, 0 /* ty=int64 */, meta[relay.Constant][964] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][781]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0144: Tensor[(2), int64] = %tensor_0630;
  %2760 = fn (%p0628: Tensor[(?), int32], %p1231: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
    %2758 = cast(%p0628, dtype="int64") /* ty=Tensor[(?), int64] */;
    %2759 = (%p1231, %2758);
    adv_index(%2759) /* ty=Tensor[(?, ?), float32] */
  };
  %2761 = (%in_shape_0130, %in_shape_187);
  %2762 = (%shape_func_out_0144,);
  let %shape_func144: () = vm.shape_func(%2760, %2761, %2762, meta[relay.attrs.ShapeFuncAttrs][144]) /* ty=() */;
  let %storage_0769: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][782]) /* ty=Storage[] */;
  let %tensor_0631: int64 = memory.alloc_tensor(%storage_0769, 0 /* ty=int64 */, meta[relay.Constant][965] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][782]) /* ty=int64 */;
  %2763 = fn (%p0629: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0629) /* ty=int64 */
  };
  %2764 = (%shape_func_out_0144,);
  %2765 = (%tensor_0631,);
  let %x984: () = vm.invoke_tvm_op(%2763, %2764, %2765) /* ty=() */;
  let %storage_0770: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][783]) /* ty=Storage[] */;
  let %tensor_0632: int64 = memory.alloc_tensor(%storage_0770, 0 /* ty=int64 */, meta[relay.Constant][966] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][783]) /* ty=int64 */;
  %2766 = fn (%p0630: int64, Primitive=1) -> int64 {
    multiply(%p0630, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2767 = (%tensor_0631,);
  %2768 = (%tensor_0632,);
  let %x985: () = vm.invoke_tvm_op(%2766, %2767, %2768) /* ty=() */;
  let %storage_0771: Storage[] = memory.alloc_storage(%tensor_0632, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][784]) /* ty=Storage[] */;
  let %out_0138: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0771, 0 /* ty=int64 */, %shape_func_out_0144, meta[relay.attrs.AllocTensorAttrs][784]) /* ty=Tensor[(?, ?), float32] */;
  %2769 = (%x979, %x927);
  %2770 = (%out_0138,);
  let %x986: () = vm.invoke_tvm_op(%2760, %2769, %2770) /* ty=() */;
  let %x987: Tensor[(?, ?), float32] = %out_0138;
  let %in_shape_188: Tensor[(2), int64] = vm.shape_of(%x987, meta[relay.attrs.ShapeOfAttrs][187]) /* ty=Tensor[(2), int64] */;
  let %storage_0772: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][785]) /* ty=Storage[] */;
  let %tensor_0633: Tensor[(4), int64] = memory.alloc_tensor(%storage_0772, 0 /* ty=int64 */, meta[relay.Constant][967] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][785]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0145: Tensor[(4), int64] = %tensor_0633;
  %2771 = fn (%p0631: Tensor[(1, 256, 50, 50), float32], %p1232: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    vision.roi_align(%p0631, %p1232, meta[relay.attrs.ROIAlignAttrs][6]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %2772 = (meta[relay.Constant][968] /* ty=Tensor[(4), int64] */, %in_shape_188);
  %2773 = (%shape_func_out_0145,);
  let %shape_func145: () = vm.shape_func(%2771, %2772, %2773, meta[relay.attrs.ShapeFuncAttrs][145]) /* ty=() */;
  let %storage_0773: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][786]) /* ty=Storage[] */;
  let %tensor_0634: int64 = memory.alloc_tensor(%storage_0773, 0 /* ty=int64 */, meta[relay.Constant][969] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][786]) /* ty=int64 */;
  %2774 = fn (%p0632: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0632) /* ty=int64 */
  };
  %2775 = (%shape_func_out_0145,);
  %2776 = (%tensor_0634,);
  let %x988: () = vm.invoke_tvm_op(%2774, %2775, %2776) /* ty=() */;
  let %storage_0774: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][787]) /* ty=Storage[] */;
  let %tensor_0635: int64 = memory.alloc_tensor(%storage_0774, 0 /* ty=int64 */, meta[relay.Constant][970] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][787]) /* ty=int64 */;
  %2777 = fn (%p0633: int64, Primitive=1) -> int64 {
    multiply(%p0633, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2778 = (%tensor_0634,);
  %2779 = (%tensor_0635,);
  let %x989: () = vm.invoke_tvm_op(%2777, %2778, %2779) /* ty=() */;
  let %storage_0775: Storage[] = memory.alloc_storage(%tensor_0635, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][788]) /* ty=Storage[] */;
  let %out_0139: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_0775, 0 /* ty=int64 */, %shape_func_out_0145, meta[relay.attrs.AllocTensorAttrs][788]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2780 = (%x394, %x987);
  %2781 = (%out_0139,);
  let %x990: () = vm.invoke_tvm_op(%2771, %2780, %2781) /* ty=() */;
  let %x991: Tensor[(?, 256, 14, 14), float32] = %out_0139;
  let %in_shape_0131: Tensor[(4), int64] = vm.shape_of(%x967, meta[relay.attrs.ShapeOfAttrs][188]) /* ty=Tensor[(4), int64] */;
  let %in_shape_189: Tensor[(4), int64] = vm.shape_of(%x983, meta[relay.attrs.ShapeOfAttrs][189]) /* ty=Tensor[(4), int64] */;
  let %in_shape_260: Tensor[(4), int64] = vm.shape_of(%x991, meta[relay.attrs.ShapeOfAttrs][190]) /* ty=Tensor[(4), int64] */;
  let %storage_0776: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][789]) /* ty=Storage[] */;
  let %tensor_0636: Tensor[(4), int64] = memory.alloc_tensor(%storage_0776, 0 /* ty=int64 */, meta[relay.Constant][971] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][789]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0146: Tensor[(4), int64] = %tensor_0636;
  %2782 = fn (%p0634: Tensor[(?, 256, 14, 14), float32], %p1233: Tensor[(?, 256, 14, 14), int32], %p2196: Tensor[(?, 256, 14, 14), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    scatter(%p0634, %p1233, %p2196, meta[relay.attrs.ScatterAttrs][4]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %2783 = (%in_shape_0131, %in_shape_189, %in_shape_260);
  %2784 = (%shape_func_out_0146,);
  let %shape_func146: () = vm.shape_func(%2782, %2783, %2784, meta[relay.attrs.ShapeFuncAttrs][146]) /* ty=() */;
  let %storage_0777: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][790]) /* ty=Storage[] */;
  let %tensor_0637: int64 = memory.alloc_tensor(%storage_0777, 0 /* ty=int64 */, meta[relay.Constant][972] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][790]) /* ty=int64 */;
  %2785 = fn (%p0635: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0635) /* ty=int64 */
  };
  %2786 = (%shape_func_out_0146,);
  %2787 = (%tensor_0637,);
  let %x992: () = vm.invoke_tvm_op(%2785, %2786, %2787) /* ty=() */;
  let %storage_0778: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][791]) /* ty=Storage[] */;
  let %tensor_0638: int64 = memory.alloc_tensor(%storage_0778, 0 /* ty=int64 */, meta[relay.Constant][973] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][791]) /* ty=int64 */;
  %2788 = fn (%p0636: int64, Primitive=1) -> int64 {
    multiply(%p0636, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2789 = (%tensor_0637,);
  %2790 = (%tensor_0638,);
  let %x993: () = vm.invoke_tvm_op(%2788, %2789, %2790) /* ty=() */;
  let %storage_0779: Storage[] = memory.alloc_storage(%tensor_0638, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][792]) /* ty=Storage[] */;
  let %out_0140: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_0779, 0 /* ty=int64 */, %shape_func_out_0146, meta[relay.attrs.AllocTensorAttrs][792]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2791 = (%x967, %x983, %x991);
  %2792 = (%out_0140,);
  let %x994: () = vm.invoke_tvm_op(%2782, %2791, %2792) /* ty=() */;
  let %x995: Tensor[(?, 256, 14, 14), float32] = %out_0140;
  let %in_shape_0132: Tensor[(1), int64] = vm.shape_of(%x880, meta[relay.attrs.ShapeOfAttrs][191]) /* ty=Tensor[(1), int64] */;
  let %storage_0780: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][793]) /* ty=Storage[] */;
  let %tensor_0639: Tensor[(1), int64] = memory.alloc_tensor(%storage_0780, 0 /* ty=int64 */, meta[relay.Constant][974] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][793]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0147: Tensor[(1), int64] = %tensor_0639;
  %2793 = fn (%p0637: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0637, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %2794 = (%in_shape_0132,);
  %2795 = (%shape_func_out_0147,);
  let %shape_func147: () = vm.shape_func(%2793, %2794, %2795, meta[relay.attrs.ShapeFuncAttrs][147]) /* ty=() */;
  let %storage_0781: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][794]) /* ty=Storage[] */;
  let %tensor_0640: int64 = memory.alloc_tensor(%storage_0781, 0 /* ty=int64 */, meta[relay.Constant][975] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][794]) /* ty=int64 */;
  %2796 = fn (%p0638: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0638) /* ty=int64 */
  };
  %2797 = (%shape_func_out_0147,);
  %2798 = (%tensor_0640,);
  let %x996: () = vm.invoke_tvm_op(%2796, %2797, %2798) /* ty=() */;
  let %storage_0782: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][795]) /* ty=Storage[] */;
  let %tensor_0641: int64 = memory.alloc_tensor(%storage_0782, 0 /* ty=int64 */, meta[relay.Constant][976] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][795]) /* ty=int64 */;
  %2799 = fn (%p0639: int64, Primitive=1) -> int64 {
    multiply(%p0639, 1 /* ty=int64 */) /* ty=int64 */
  };
  %2800 = (%tensor_0640,);
  %2801 = (%tensor_0641,);
  let %x997: () = vm.invoke_tvm_op(%2799, %2800, %2801) /* ty=() */;
  let %storage_0783: Storage[] = memory.alloc_storage(%tensor_0641, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][796]) /* ty=Storage[] */;
  let %out_0141: Tensor[(?), bool] = memory.alloc_tensor(%storage_0783, 0 /* ty=int64 */, %shape_func_out_0147, meta[relay.attrs.AllocTensorAttrs][796]) /* ty=Tensor[(?), bool] */;
  %2802 = (%x880,);
  %2803 = (%out_0141,);
  let %x998: () = vm.invoke_tvm_op(%2793, %2802, %2803) /* ty=() */;
  let %x999: Tensor[(?), bool] = %out_0141;
  let %in_shape_0133: Tensor[(?), bool] = %x999;
  let %storage_0784: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][797]) /* ty=Storage[] */;
  let %tensor_0642: Tensor[(2), int64] = memory.alloc_tensor(%storage_0784, 0 /* ty=int64 */, meta[relay.Constant][977] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][797]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0148: Tensor[(2), int64] = %tensor_0642;
  %2804 = fn (%p0640: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0640) /* ty=Tensor[(?, 1), int32] */
  };
  %2805 = (%in_shape_0133,);
  %2806 = (%shape_func_out_0148,);
  let %shape_func148: () = vm.shape_func(%2804, %2805, %2806, meta[relay.attrs.ShapeFuncAttrs][148]) /* ty=() */;
  let %storage_0785: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][798]) /* ty=Storage[] */;
  let %tensor_0643: int64 = memory.alloc_tensor(%storage_0785, 0 /* ty=int64 */, meta[relay.Constant][978] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][798]) /* ty=int64 */;
  %2807 = fn (%p0641: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0641) /* ty=int64 */
  };
  %2808 = (%shape_func_out_0148,);
  %2809 = (%tensor_0643,);
  let %x1000: () = vm.invoke_tvm_op(%2807, %2808, %2809) /* ty=() */;
  let %storage_0786: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][799]) /* ty=Storage[] */;
  let %tensor_0644: int64 = memory.alloc_tensor(%storage_0786, 0 /* ty=int64 */, meta[relay.Constant][979] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][799]) /* ty=int64 */;
  %2810 = fn (%p0642: int64, Primitive=1) -> int64 {
    multiply(%p0642, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2811 = (%tensor_0643,);
  %2812 = (%tensor_0644,);
  let %x1001: () = vm.invoke_tvm_op(%2810, %2811, %2812) /* ty=() */;
  let %storage_0787: Storage[] = memory.alloc_storage(%tensor_0644, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][800]) /* ty=Storage[] */;
  let %out_0142: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0787, 0 /* ty=int64 */, %shape_func_out_0148, meta[relay.attrs.AllocTensorAttrs][800]) /* ty=Tensor[(?, 1), int32] */;
  %2813 = (%x999,);
  %2814 = (%out_0142,);
  let %x1002: () = vm.invoke_tvm_op(%2804, %2813, %2814) /* ty=() */;
  let %x1003: Tensor[(?, 1), int32] = %out_0142;
  let %in_shape_0134: Tensor[(2), int64] = vm.shape_of(%x1003, meta[relay.attrs.ShapeOfAttrs][192]) /* ty=Tensor[(2), int64] */;
  let %storage_0788: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][801]) /* ty=Storage[] */;
  let %tensor_0645: Tensor[(1), int64] = memory.alloc_tensor(%storage_0788, 0 /* ty=int64 */, meta[relay.Constant][980] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][801]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0149: Tensor[(1), int64] = %tensor_0645;
  %2817 = fn (%p0643: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %2815 = split(%p0643, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %2816 = %2815.0;
    squeeze(%2816, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %2818 = (%in_shape_0134,);
  %2819 = (%shape_func_out_0149,);
  let %shape_func149: () = vm.shape_func(%2817, %2818, %2819, meta[relay.attrs.ShapeFuncAttrs][149]) /* ty=() */;
  let %storage_0789: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][802]) /* ty=Storage[] */;
  let %tensor_0646: int64 = memory.alloc_tensor(%storage_0789, 0 /* ty=int64 */, meta[relay.Constant][981] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][802]) /* ty=int64 */;
  %2820 = fn (%p0644: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0644) /* ty=int64 */
  };
  %2821 = (%shape_func_out_0149,);
  %2822 = (%tensor_0646,);
  let %x1004: () = vm.invoke_tvm_op(%2820, %2821, %2822) /* ty=() */;
  let %storage_0790: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][803]) /* ty=Storage[] */;
  let %tensor_0647: int64 = memory.alloc_tensor(%storage_0790, 0 /* ty=int64 */, meta[relay.Constant][982] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][803]) /* ty=int64 */;
  %2823 = fn (%p0645: int64, Primitive=1) -> int64 {
    multiply(%p0645, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2824 = (%tensor_0646,);
  %2825 = (%tensor_0647,);
  let %x1005: () = vm.invoke_tvm_op(%2823, %2824, %2825) /* ty=() */;
  let %storage_0791: Storage[] = memory.alloc_storage(%tensor_0647, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][804]) /* ty=Storage[] */;
  let %out_0143: Tensor[(?), int32] = memory.alloc_tensor(%storage_0791, 0 /* ty=int64 */, %shape_func_out_0149, meta[relay.attrs.AllocTensorAttrs][804]) /* ty=Tensor[(?), int32] */;
  %2826 = (%x1003,);
  %2827 = (%out_0143,);
  let %x1006: () = vm.invoke_tvm_op(%2817, %2826, %2827) /* ty=() */;
  let %x1007: Tensor[(?), int32] = %out_0143;
  let %in_shape_0135: Tensor[(1), int64] = vm.shape_of(%x1007, meta[relay.attrs.ShapeOfAttrs][193]) /* ty=Tensor[(1), int64] */;
  let %storage_0792: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][805]) /* ty=Storage[] */;
  let %tensor_0648: Tensor[(4), int64] = memory.alloc_tensor(%storage_0792, 0 /* ty=int64 */, meta[relay.Constant][983] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][805]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0150: Tensor[(4), int64] = %tensor_0648;
  %2831 = fn (%p0646: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 14, 14), int32] {
    %2828 = reshape(%p0646, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %2829 = repeat(%2828, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %2830 = repeat(%2829, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
    repeat(%2830, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */
  };
  %2832 = (%in_shape_0135,);
  %2833 = (%shape_func_out_0150,);
  let %shape_func150: () = vm.shape_func(%2831, %2832, %2833, meta[relay.attrs.ShapeFuncAttrs][150]) /* ty=() */;
  let %storage_0793: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][806]) /* ty=Storage[] */;
  let %tensor_0649: int64 = memory.alloc_tensor(%storage_0793, 0 /* ty=int64 */, meta[relay.Constant][984] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][806]) /* ty=int64 */;
  %2834 = fn (%p0647: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0647) /* ty=int64 */
  };
  %2835 = (%shape_func_out_0150,);
  %2836 = (%tensor_0649,);
  let %x1008: () = vm.invoke_tvm_op(%2834, %2835, %2836) /* ty=() */;
  let %storage_0794: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][807]) /* ty=Storage[] */;
  let %tensor_0650: int64 = memory.alloc_tensor(%storage_0794, 0 /* ty=int64 */, meta[relay.Constant][985] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][807]) /* ty=int64 */;
  %2837 = fn (%p0648: int64, Primitive=1) -> int64 {
    multiply(%p0648, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2838 = (%tensor_0649,);
  %2839 = (%tensor_0650,);
  let %x1009: () = vm.invoke_tvm_op(%2837, %2838, %2839) /* ty=() */;
  let %storage_0795: Storage[] = memory.alloc_storage(%tensor_0650, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][808]) /* ty=Storage[] */;
  let %out_0144: Tensor[(?, 256, 14, 14), int32] = memory.alloc_tensor(%storage_0795, 0 /* ty=int64 */, %shape_func_out_0150, meta[relay.attrs.AllocTensorAttrs][808]) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2840 = (%x1007,);
  %2841 = (%out_0144,);
  let %x1010: () = vm.invoke_tvm_op(%2831, %2840, %2841) /* ty=() */;
  let %x1011: Tensor[(?, 256, 14, 14), int32] = %out_0144;
  let %in_shape_0136: Tensor[(1), int64] = vm.shape_of(%x1007, meta[relay.attrs.ShapeOfAttrs][194]) /* ty=Tensor[(1), int64] */;
  let %in_shape_190: Tensor[(2), int64] = vm.shape_of(%x927, meta[relay.attrs.ShapeOfAttrs][195]) /* ty=Tensor[(2), int64] */;
  let %storage_0796: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][809]) /* ty=Storage[] */;
  let %tensor_0651: Tensor[(2), int64] = memory.alloc_tensor(%storage_0796, 0 /* ty=int64 */, meta[relay.Constant][986] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][809]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0151: Tensor[(2), int64] = %tensor_0651;
  %2844 = fn (%p0649: Tensor[(?), int32], %p1234: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
    %2842 = cast(%p0649, dtype="int64") /* ty=Tensor[(?), int64] */;
    %2843 = (%p1234, %2842);
    adv_index(%2843) /* ty=Tensor[(?, ?), float32] */
  };
  %2845 = (%in_shape_0136, %in_shape_190);
  %2846 = (%shape_func_out_0151,);
  let %shape_func151: () = vm.shape_func(%2844, %2845, %2846, meta[relay.attrs.ShapeFuncAttrs][151]) /* ty=() */;
  let %storage_0797: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][810]) /* ty=Storage[] */;
  let %tensor_0652: int64 = memory.alloc_tensor(%storage_0797, 0 /* ty=int64 */, meta[relay.Constant][987] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][810]) /* ty=int64 */;
  %2847 = fn (%p0650: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0650) /* ty=int64 */
  };
  %2848 = (%shape_func_out_0151,);
  %2849 = (%tensor_0652,);
  let %x1012: () = vm.invoke_tvm_op(%2847, %2848, %2849) /* ty=() */;
  let %storage_0798: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][811]) /* ty=Storage[] */;
  let %tensor_0653: int64 = memory.alloc_tensor(%storage_0798, 0 /* ty=int64 */, meta[relay.Constant][988] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][811]) /* ty=int64 */;
  %2850 = fn (%p0651: int64, Primitive=1) -> int64 {
    multiply(%p0651, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2851 = (%tensor_0652,);
  %2852 = (%tensor_0653,);
  let %x1013: () = vm.invoke_tvm_op(%2850, %2851, %2852) /* ty=() */;
  let %storage_0799: Storage[] = memory.alloc_storage(%tensor_0653, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][812]) /* ty=Storage[] */;
  let %out_0145: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0799, 0 /* ty=int64 */, %shape_func_out_0151, meta[relay.attrs.AllocTensorAttrs][812]) /* ty=Tensor[(?, ?), float32] */;
  %2853 = (%x1007, %x927);
  %2854 = (%out_0145,);
  let %x1014: () = vm.invoke_tvm_op(%2844, %2853, %2854) /* ty=() */;
  let %x1015: Tensor[(?, ?), float32] = %out_0145;
  let %in_shape_191: Tensor[(2), int64] = vm.shape_of(%x1015, meta[relay.attrs.ShapeOfAttrs][196]) /* ty=Tensor[(2), int64] */;
  let %storage_0800: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][813]) /* ty=Storage[] */;
  let %tensor_0654: Tensor[(4), int64] = memory.alloc_tensor(%storage_0800, 0 /* ty=int64 */, meta[relay.Constant][989] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][813]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0152: Tensor[(4), int64] = %tensor_0654;
  %2855 = fn (%p0652: Tensor[(1, 256, 25, 25), float32], %p1235: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    vision.roi_align(%p0652, %p1235, meta[relay.attrs.ROIAlignAttrs][7]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %2856 = (meta[relay.Constant][990] /* ty=Tensor[(4), int64] */, %in_shape_191);
  %2857 = (%shape_func_out_0152,);
  let %shape_func152: () = vm.shape_func(%2855, %2856, %2857, meta[relay.attrs.ShapeFuncAttrs][152]) /* ty=() */;
  let %storage_0801: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][814]) /* ty=Storage[] */;
  let %tensor_0655: int64 = memory.alloc_tensor(%storage_0801, 0 /* ty=int64 */, meta[relay.Constant][991] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][814]) /* ty=int64 */;
  %2858 = fn (%p0653: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0653) /* ty=int64 */
  };
  %2859 = (%shape_func_out_0152,);
  %2860 = (%tensor_0655,);
  let %x1016: () = vm.invoke_tvm_op(%2858, %2859, %2860) /* ty=() */;
  let %storage_0802: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][815]) /* ty=Storage[] */;
  let %tensor_0656: int64 = memory.alloc_tensor(%storage_0802, 0 /* ty=int64 */, meta[relay.Constant][992] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][815]) /* ty=int64 */;
  %2861 = fn (%p0654: int64, Primitive=1) -> int64 {
    multiply(%p0654, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2862 = (%tensor_0655,);
  %2863 = (%tensor_0656,);
  let %x1017: () = vm.invoke_tvm_op(%2861, %2862, %2863) /* ty=() */;
  let %storage_0803: Storage[] = memory.alloc_storage(%tensor_0656, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][816]) /* ty=Storage[] */;
  let %out_0146: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_0803, 0 /* ty=int64 */, %shape_func_out_0152, meta[relay.attrs.AllocTensorAttrs][816]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2864 = (%x404, %x1015);
  %2865 = (%out_0146,);
  let %x1018: () = vm.invoke_tvm_op(%2855, %2864, %2865) /* ty=() */;
  let %x1019: Tensor[(?, 256, 14, 14), float32] = %out_0146;
  let %in_shape_0137: Tensor[(4), int64] = vm.shape_of(%x995, meta[relay.attrs.ShapeOfAttrs][197]) /* ty=Tensor[(4), int64] */;
  let %in_shape_192: Tensor[(4), int64] = vm.shape_of(%x1011, meta[relay.attrs.ShapeOfAttrs][198]) /* ty=Tensor[(4), int64] */;
  let %in_shape_261: Tensor[(4), int64] = vm.shape_of(%x1019, meta[relay.attrs.ShapeOfAttrs][199]) /* ty=Tensor[(4), int64] */;
  let %storage_0804: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][817]) /* ty=Storage[] */;
  let %tensor_0657: Tensor[(4), int64] = memory.alloc_tensor(%storage_0804, 0 /* ty=int64 */, meta[relay.Constant][993] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][817]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0153: Tensor[(4), int64] = %tensor_0657;
  %2866 = fn (%p0655: Tensor[(?, 256, 14, 14), float32], %p1236: Tensor[(?, 256, 14, 14), int32], %p2197: Tensor[(?, 256, 14, 14), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    scatter(%p0655, %p1236, %p2197, meta[relay.attrs.ScatterAttrs][5]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %2867 = (%in_shape_0137, %in_shape_192, %in_shape_261);
  %2868 = (%shape_func_out_0153,);
  let %shape_func153: () = vm.shape_func(%2866, %2867, %2868, meta[relay.attrs.ShapeFuncAttrs][153]) /* ty=() */;
  let %storage_0805: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][818]) /* ty=Storage[] */;
  let %tensor_0658: int64 = memory.alloc_tensor(%storage_0805, 0 /* ty=int64 */, meta[relay.Constant][994] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][818]) /* ty=int64 */;
  %2869 = fn (%p0656: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0656) /* ty=int64 */
  };
  %2870 = (%shape_func_out_0153,);
  %2871 = (%tensor_0658,);
  let %x1020: () = vm.invoke_tvm_op(%2869, %2870, %2871) /* ty=() */;
  let %storage_0806: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][819]) /* ty=Storage[] */;
  let %tensor_0659: int64 = memory.alloc_tensor(%storage_0806, 0 /* ty=int64 */, meta[relay.Constant][995] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][819]) /* ty=int64 */;
  %2872 = fn (%p0657: int64, Primitive=1) -> int64 {
    multiply(%p0657, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2873 = (%tensor_0658,);
  %2874 = (%tensor_0659,);
  let %x1021: () = vm.invoke_tvm_op(%2872, %2873, %2874) /* ty=() */;
  let %storage_0807: Storage[] = memory.alloc_storage(%tensor_0659, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][820]) /* ty=Storage[] */;
  let %out_0147: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_0807, 0 /* ty=int64 */, %shape_func_out_0153, meta[relay.attrs.AllocTensorAttrs][820]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2875 = (%x995, %x1011, %x1019);
  %2876 = (%out_0147,);
  let %x1022: () = vm.invoke_tvm_op(%2866, %2875, %2876) /* ty=() */;
  let %x1023: Tensor[(?, 256, 14, 14), float32] = %out_0147;
  let %in_shape_0138: Tensor[(4), int64] = vm.shape_of(%x1023, meta[relay.attrs.ShapeOfAttrs][200]) /* ty=Tensor[(4), int64] */;
  let %storage_0808: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][821]) /* ty=Storage[] */;
  let %tensor_0660: Tensor[(4), int64] = memory.alloc_tensor(%storage_0808, 0 /* ty=int64 */, meta[relay.Constant][996] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][821]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0154: Tensor[(4), int64] = %tensor_0660;
  %2877 = fn (%p0658: Tensor[(?, 256, 14, 14), float32], Primitive=1) -> Tensor[(?, 14, 14, 256), float32] {
    layout_transform(%p0658, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(?, 14, 14, 256), float32] */
  };
  %2878 = (%in_shape_0138,);
  %2879 = (%shape_func_out_0154,);
  let %shape_func154: () = vm.shape_func(%2877, %2878, %2879, meta[relay.attrs.ShapeFuncAttrs][154]) /* ty=() */;
  let %storage_0809: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][822]) /* ty=Storage[] */;
  let %tensor_0661: int64 = memory.alloc_tensor(%storage_0809, 0 /* ty=int64 */, meta[relay.Constant][997] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][822]) /* ty=int64 */;
  %2880 = fn (%p0659: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0659) /* ty=int64 */
  };
  %2881 = (%shape_func_out_0154,);
  %2882 = (%tensor_0661,);
  let %x1024: () = vm.invoke_tvm_op(%2880, %2881, %2882) /* ty=() */;
  let %storage_0810: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][823]) /* ty=Storage[] */;
  let %tensor_0662: int64 = memory.alloc_tensor(%storage_0810, 0 /* ty=int64 */, meta[relay.Constant][998] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][823]) /* ty=int64 */;
  %2883 = fn (%p0660: int64, Primitive=1) -> int64 {
    multiply(%p0660, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2884 = (%tensor_0661,);
  %2885 = (%tensor_0662,);
  let %x1025: () = vm.invoke_tvm_op(%2883, %2884, %2885) /* ty=() */;
  let %storage_0811: Storage[] = memory.alloc_storage(%tensor_0662, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][824]) /* ty=Storage[] */;
  let %out_0148: Tensor[(?, 14, 14, 256), float32] = memory.alloc_tensor(%storage_0811, 0 /* ty=int64 */, %shape_func_out_0154, meta[relay.attrs.AllocTensorAttrs][824]) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2886 = (%x1023,);
  %2887 = (%out_0148,);
  let %x1026: () = vm.invoke_tvm_op(%2877, %2886, %2887) /* ty=() */;
  let %x1027: Tensor[(?, 14, 14, 256), float32] = %out_0148;
  let %in_shape_0139: Tensor[(4), int64] = vm.shape_of(%x1027, meta[relay.attrs.ShapeOfAttrs][201]) /* ty=Tensor[(4), int64] */;
  let %storage_0812: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][825]) /* ty=Storage[] */;
  let %tensor_0663: Tensor[(4), int64] = memory.alloc_tensor(%storage_0812, 0 /* ty=int64 */, meta[relay.Constant][999] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][825]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0155: Tensor[(4), int64] = %tensor_0663;
  %2890 = fn (%p0661: Tensor[(?, 14, 14, 256), float32], %p1237: Tensor[(3, 3, 256, 256), float32], %p2198: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(?, 14, 14, 256), float32] {
    %2888 = nn.conv2d(%p0661, %p1237, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
    %2889 = add(%2888, %p2198) /* ty=Tensor[(?, 14, 14, 256), float32] */;
    nn.relu(%2889) /* ty=Tensor[(?, 14, 14, 256), float32] */
  };
  %2891 = (%in_shape_0139, meta[relay.Constant][1000] /* ty=Tensor[(4), int64] */, meta[relay.Constant][1001] /* ty=Tensor[(4), int64] */);
  %2892 = (%shape_func_out_0155,);
  let %shape_func155: () = vm.shape_func(%2890, %2891, %2892, meta[relay.attrs.ShapeFuncAttrs][155]) /* ty=() */;
  let %storage_0813: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][826]) /* ty=Storage[] */;
  let %tensor_0664: int64 = memory.alloc_tensor(%storage_0813, 0 /* ty=int64 */, meta[relay.Constant][1002] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][826]) /* ty=int64 */;
  %2893 = fn (%p0662: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0662) /* ty=int64 */
  };
  %2894 = (%shape_func_out_0155,);
  %2895 = (%tensor_0664,);
  let %x1028: () = vm.invoke_tvm_op(%2893, %2894, %2895) /* ty=() */;
  let %storage_0814: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][827]) /* ty=Storage[] */;
  let %tensor_0665: int64 = memory.alloc_tensor(%storage_0814, 0 /* ty=int64 */, meta[relay.Constant][1003] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][827]) /* ty=int64 */;
  %2896 = fn (%p0663: int64, Primitive=1) -> int64 {
    multiply(%p0663, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2897 = (%tensor_0664,);
  %2898 = (%tensor_0665,);
  let %x1029: () = vm.invoke_tvm_op(%2896, %2897, %2898) /* ty=() */;
  let %storage_0815: Storage[] = memory.alloc_storage(%tensor_0665, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][828]) /* ty=Storage[] */;
  let %out_0149: Tensor[(?, 14, 14, 256), float32] = memory.alloc_tensor(%storage_0815, 0 /* ty=int64 */, %shape_func_out_0155, meta[relay.attrs.AllocTensorAttrs][828]) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2899 = (%x1027, meta[relay.Constant][1004] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][1005] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %2900 = (%out_0149,);
  let %x1030: () = vm.invoke_tvm_op(%2890, %2899, %2900) /* ty=() */;
  let %x1031: Tensor[(?, 14, 14, 256), float32] = %out_0149;
  let %in_shape_0140: Tensor[(4), int64] = vm.shape_of(%x1031, meta[relay.attrs.ShapeOfAttrs][202]) /* ty=Tensor[(4), int64] */;
  let %storage_0816: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][829]) /* ty=Storage[] */;
  let %tensor_0666: Tensor[(4), int64] = memory.alloc_tensor(%storage_0816, 0 /* ty=int64 */, meta[relay.Constant][1006] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][829]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0156: Tensor[(4), int64] = %tensor_0666;
  %2903 = fn (%p0664: Tensor[(?, 14, 14, 256), float32], %p1238: Tensor[(3, 3, 256, 256), float32], %p2199: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(?, 14, 14, 256), float32] {
    %2901 = nn.conv2d(%p0664, %p1238, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
    %2902 = add(%2901, %p2199) /* ty=Tensor[(?, 14, 14, 256), float32] */;
    nn.relu(%2902) /* ty=Tensor[(?, 14, 14, 256), float32] */
  };
  %2904 = (%in_shape_0140, meta[relay.Constant][1007] /* ty=Tensor[(4), int64] */, meta[relay.Constant][1008] /* ty=Tensor[(4), int64] */);
  %2905 = (%shape_func_out_0156,);
  let %shape_func156: () = vm.shape_func(%2903, %2904, %2905, meta[relay.attrs.ShapeFuncAttrs][156]) /* ty=() */;
  let %storage_0817: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][830]) /* ty=Storage[] */;
  let %tensor_0667: int64 = memory.alloc_tensor(%storage_0817, 0 /* ty=int64 */, meta[relay.Constant][1009] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][830]) /* ty=int64 */;
  %2906 = fn (%p0665: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0665) /* ty=int64 */
  };
  %2907 = (%shape_func_out_0156,);
  %2908 = (%tensor_0667,);
  let %x1032: () = vm.invoke_tvm_op(%2906, %2907, %2908) /* ty=() */;
  let %storage_0818: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][831]) /* ty=Storage[] */;
  let %tensor_0668: int64 = memory.alloc_tensor(%storage_0818, 0 /* ty=int64 */, meta[relay.Constant][1010] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][831]) /* ty=int64 */;
  %2909 = fn (%p0666: int64, Primitive=1) -> int64 {
    multiply(%p0666, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2910 = (%tensor_0667,);
  %2911 = (%tensor_0668,);
  let %x1033: () = vm.invoke_tvm_op(%2909, %2910, %2911) /* ty=() */;
  let %storage_0819: Storage[] = memory.alloc_storage(%tensor_0668, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][832]) /* ty=Storage[] */;
  let %out_0150: Tensor[(?, 14, 14, 256), float32] = memory.alloc_tensor(%storage_0819, 0 /* ty=int64 */, %shape_func_out_0156, meta[relay.attrs.AllocTensorAttrs][832]) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2912 = (%x1031, meta[relay.Constant][1011] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][1012] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %2913 = (%out_0150,);
  let %x1034: () = vm.invoke_tvm_op(%2903, %2912, %2913) /* ty=() */;
  let %x1035: Tensor[(?, 14, 14, 256), float32] = %out_0150;
  let %in_shape_0141: Tensor[(4), int64] = vm.shape_of(%x1035, meta[relay.attrs.ShapeOfAttrs][203]) /* ty=Tensor[(4), int64] */;
  let %storage_0820: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][833]) /* ty=Storage[] */;
  let %tensor_0669: Tensor[(4), int64] = memory.alloc_tensor(%storage_0820, 0 /* ty=int64 */, meta[relay.Constant][1013] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][833]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0157: Tensor[(4), int64] = %tensor_0669;
  %2916 = fn (%p0667: Tensor[(?, 14, 14, 256), float32], %p1239: Tensor[(3, 3, 256, 256), float32], %p2200: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(?, 14, 14, 256), float32] {
    %2914 = nn.conv2d(%p0667, %p1239, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
    %2915 = add(%2914, %p2200) /* ty=Tensor[(?, 14, 14, 256), float32] */;
    nn.relu(%2915) /* ty=Tensor[(?, 14, 14, 256), float32] */
  };
  %2917 = (%in_shape_0141, meta[relay.Constant][1014] /* ty=Tensor[(4), int64] */, meta[relay.Constant][1015] /* ty=Tensor[(4), int64] */);
  %2918 = (%shape_func_out_0157,);
  let %shape_func157: () = vm.shape_func(%2916, %2917, %2918, meta[relay.attrs.ShapeFuncAttrs][157]) /* ty=() */;
  let %storage_0821: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][834]) /* ty=Storage[] */;
  let %tensor_0670: int64 = memory.alloc_tensor(%storage_0821, 0 /* ty=int64 */, meta[relay.Constant][1016] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][834]) /* ty=int64 */;
  %2919 = fn (%p0668: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0668) /* ty=int64 */
  };
  %2920 = (%shape_func_out_0157,);
  %2921 = (%tensor_0670,);
  let %x1036: () = vm.invoke_tvm_op(%2919, %2920, %2921) /* ty=() */;
  let %storage_0822: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][835]) /* ty=Storage[] */;
  let %tensor_0671: int64 = memory.alloc_tensor(%storage_0822, 0 /* ty=int64 */, meta[relay.Constant][1017] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][835]) /* ty=int64 */;
  %2922 = fn (%p0669: int64, Primitive=1) -> int64 {
    multiply(%p0669, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2923 = (%tensor_0670,);
  %2924 = (%tensor_0671,);
  let %x1037: () = vm.invoke_tvm_op(%2922, %2923, %2924) /* ty=() */;
  let %storage_0823: Storage[] = memory.alloc_storage(%tensor_0671, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][836]) /* ty=Storage[] */;
  let %out_0151: Tensor[(?, 14, 14, 256), float32] = memory.alloc_tensor(%storage_0823, 0 /* ty=int64 */, %shape_func_out_0157, meta[relay.attrs.AllocTensorAttrs][836]) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2925 = (%x1035, meta[relay.Constant][1018] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][1019] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %2926 = (%out_0151,);
  let %x1038: () = vm.invoke_tvm_op(%2916, %2925, %2926) /* ty=() */;
  let %x1039: Tensor[(?, 14, 14, 256), float32] = %out_0151;
  let %in_shape_0142: Tensor[(4), int64] = vm.shape_of(%x1039, meta[relay.attrs.ShapeOfAttrs][204]) /* ty=Tensor[(4), int64] */;
  let %storage_0824: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][837]) /* ty=Storage[] */;
  let %tensor_0672: Tensor[(4), int64] = memory.alloc_tensor(%storage_0824, 0 /* ty=int64 */, meta[relay.Constant][1020] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][837]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0158: Tensor[(4), int64] = %tensor_0672;
  %2929 = fn (%p0670: Tensor[(?, 14, 14, 256), float32], %p1240: Tensor[(3, 3, 256, 256), float32], %p2201: Tensor[(1, 1, 1, 256), float32], Primitive=1) -> Tensor[(?, 14, 14, 256), float32] {
    %2927 = nn.conv2d(%p0670, %p1240, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
    %2928 = add(%2927, %p2201) /* ty=Tensor[(?, 14, 14, 256), float32] */;
    nn.relu(%2928) /* ty=Tensor[(?, 14, 14, 256), float32] */
  };
  %2930 = (%in_shape_0142, meta[relay.Constant][1021] /* ty=Tensor[(4), int64] */, meta[relay.Constant][1022] /* ty=Tensor[(4), int64] */);
  %2931 = (%shape_func_out_0158,);
  let %shape_func158: () = vm.shape_func(%2929, %2930, %2931, meta[relay.attrs.ShapeFuncAttrs][158]) /* ty=() */;
  let %storage_0825: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][838]) /* ty=Storage[] */;
  let %tensor_0673: int64 = memory.alloc_tensor(%storage_0825, 0 /* ty=int64 */, meta[relay.Constant][1023] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][838]) /* ty=int64 */;
  %2932 = fn (%p0671: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0671) /* ty=int64 */
  };
  %2933 = (%shape_func_out_0158,);
  %2934 = (%tensor_0673,);
  let %x1040: () = vm.invoke_tvm_op(%2932, %2933, %2934) /* ty=() */;
  let %storage_0826: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][839]) /* ty=Storage[] */;
  let %tensor_0674: int64 = memory.alloc_tensor(%storage_0826, 0 /* ty=int64 */, meta[relay.Constant][1024] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][839]) /* ty=int64 */;
  %2935 = fn (%p0672: int64, Primitive=1) -> int64 {
    multiply(%p0672, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2936 = (%tensor_0673,);
  %2937 = (%tensor_0674,);
  let %x1041: () = vm.invoke_tvm_op(%2935, %2936, %2937) /* ty=() */;
  let %storage_0827: Storage[] = memory.alloc_storage(%tensor_0674, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][840]) /* ty=Storage[] */;
  let %out_0152: Tensor[(?, 14, 14, 256), float32] = memory.alloc_tensor(%storage_0827, 0 /* ty=int64 */, %shape_func_out_0158, meta[relay.attrs.AllocTensorAttrs][840]) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2938 = (%x1039, meta[relay.Constant][1025] /* ty=Tensor[(3, 3, 256, 256), float32] */, meta[relay.Constant][1026] /* ty=Tensor[(1, 1, 1, 256), float32] */);
  %2939 = (%out_0152,);
  let %x1042: () = vm.invoke_tvm_op(%2929, %2938, %2939) /* ty=() */;
  let %x1043: Tensor[(?, 14, 14, 256), float32] = %out_0152;
  let %in_shape_0143: Tensor[(4), int64] = vm.shape_of(%x1043, meta[relay.attrs.ShapeOfAttrs][205]) /* ty=Tensor[(4), int64] */;
  let %storage_0828: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][841]) /* ty=Storage[] */;
  let %tensor_0675: Tensor[(4), int64] = memory.alloc_tensor(%storage_0828, 0 /* ty=int64 */, meta[relay.Constant][1027] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][841]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0159: Tensor[(4), int64] = %tensor_0675;
  %2940 = fn (%p0673: Tensor[(?, 14, 14, 256), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    layout_transform(%p0673, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %2941 = (%in_shape_0143,);
  %2942 = (%shape_func_out_0159,);
  let %shape_func159: () = vm.shape_func(%2940, %2941, %2942, meta[relay.attrs.ShapeFuncAttrs][159]) /* ty=() */;
  let %storage_0829: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][842]) /* ty=Storage[] */;
  let %tensor_0676: int64 = memory.alloc_tensor(%storage_0829, 0 /* ty=int64 */, meta[relay.Constant][1028] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][842]) /* ty=int64 */;
  %2943 = fn (%p0674: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0674) /* ty=int64 */
  };
  %2944 = (%shape_func_out_0159,);
  %2945 = (%tensor_0676,);
  let %x1044: () = vm.invoke_tvm_op(%2943, %2944, %2945) /* ty=() */;
  let %storage_0830: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][843]) /* ty=Storage[] */;
  let %tensor_0677: int64 = memory.alloc_tensor(%storage_0830, 0 /* ty=int64 */, meta[relay.Constant][1029] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][843]) /* ty=int64 */;
  %2946 = fn (%p0675: int64, Primitive=1) -> int64 {
    multiply(%p0675, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2947 = (%tensor_0676,);
  %2948 = (%tensor_0677,);
  let %x1045: () = vm.invoke_tvm_op(%2946, %2947, %2948) /* ty=() */;
  let %storage_0831: Storage[] = memory.alloc_storage(%tensor_0677, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][844]) /* ty=Storage[] */;
  let %out_0153: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_0831, 0 /* ty=int64 */, %shape_func_out_0159, meta[relay.attrs.AllocTensorAttrs][844]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2949 = (%x1043,);
  %2950 = (%out_0153,);
  let %x1046: () = vm.invoke_tvm_op(%2940, %2949, %2950) /* ty=() */;
  let %x1047: Tensor[(?, 256, 14, 14), float32] = %out_0153;
  let %in_shape_0144: Tensor[(4), int64] = vm.shape_of(%x1047, meta[relay.attrs.ShapeOfAttrs][206]) /* ty=Tensor[(4), int64] */;
  let %storage_0832: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][845]) /* ty=Storage[] */;
  let %tensor_0678: Tensor[(4), int64] = memory.alloc_tensor(%storage_0832, 0 /* ty=int64 */, meta[relay.Constant][1030] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][845]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0160: Tensor[(4), int64] = %tensor_0678;
  %2953 = fn (%p0676: Tensor[(?, 256, 14, 14), float32], %p1241: Tensor[(256, 256, 2, 2), float32], %p2202: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(?, 256, 28, 28), float32] {
    %2951 = nn.conv2d_transpose(%p0676, %p1241, channels=256, kernel_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(?, 256, 28, 28), float32] */;
    %2952 = add(%2951, %p2202) /* ty=Tensor[(?, 256, 28, 28), float32] */;
    nn.relu(%2952) /* ty=Tensor[(?, 256, 28, 28), float32] */
  };
  %2954 = (%in_shape_0144, meta[relay.Constant][1031] /* ty=Tensor[(4), int64] */, meta[relay.Constant][1032] /* ty=Tensor[(4), int64] */);
  %2955 = (%shape_func_out_0160,);
  let %shape_func160: () = vm.shape_func(%2953, %2954, %2955, meta[relay.attrs.ShapeFuncAttrs][160]) /* ty=() */;
  let %storage_0833: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][846]) /* ty=Storage[] */;
  let %tensor_0679: int64 = memory.alloc_tensor(%storage_0833, 0 /* ty=int64 */, meta[relay.Constant][1033] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][846]) /* ty=int64 */;
  %2956 = fn (%p0677: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0677) /* ty=int64 */
  };
  %2957 = (%shape_func_out_0160,);
  %2958 = (%tensor_0679,);
  let %x1048: () = vm.invoke_tvm_op(%2956, %2957, %2958) /* ty=() */;
  let %storage_0834: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][847]) /* ty=Storage[] */;
  let %tensor_0680: int64 = memory.alloc_tensor(%storage_0834, 0 /* ty=int64 */, meta[relay.Constant][1034] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][847]) /* ty=int64 */;
  %2959 = fn (%p0678: int64, Primitive=1) -> int64 {
    multiply(%p0678, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2960 = (%tensor_0679,);
  %2961 = (%tensor_0680,);
  let %x1049: () = vm.invoke_tvm_op(%2959, %2960, %2961) /* ty=() */;
  let %storage_0835: Storage[] = memory.alloc_storage(%tensor_0680, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][848]) /* ty=Storage[] */;
  let %out_0154: Tensor[(?, 256, 28, 28), float32] = memory.alloc_tensor(%storage_0835, 0 /* ty=int64 */, %shape_func_out_0160, meta[relay.attrs.AllocTensorAttrs][848]) /* ty=Tensor[(?, 256, 28, 28), float32] */;
  %2962 = (%x1047, meta[relay.Constant][1035] /* ty=Tensor[(256, 256, 2, 2), float32] */, meta[relay.Constant][1036] /* ty=Tensor[(1, 256, 1, 1), float32] */);
  %2963 = (%out_0154,);
  let %x1050: () = vm.invoke_tvm_op(%2953, %2962, %2963) /* ty=() */;
  let %x1051: Tensor[(?, 256, 28, 28), float32] = %out_0154;
  let %in_shape_0145: Tensor[(4), int64] = vm.shape_of(%x1051, meta[relay.attrs.ShapeOfAttrs][207]) /* ty=Tensor[(4), int64] */;
  let %storage_0836: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][849]) /* ty=Storage[] */;
  let %tensor_0681: Tensor[(4), int64] = memory.alloc_tensor(%storage_0836, 0 /* ty=int64 */, meta[relay.Constant][1037] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][849]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0161: Tensor[(4), int64] = %tensor_0681;
  %2964 = fn (%p0679: Tensor[(?, 256, 28, 28), float32], Primitive=1) -> Tensor[(?, 28, 28, 256), float32] {
    layout_transform(%p0679, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(?, 28, 28, 256), float32] */
  };
  %2965 = (%in_shape_0145,);
  %2966 = (%shape_func_out_0161,);
  let %shape_func161: () = vm.shape_func(%2964, %2965, %2966, meta[relay.attrs.ShapeFuncAttrs][161]) /* ty=() */;
  let %storage_0837: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][850]) /* ty=Storage[] */;
  let %tensor_0682: int64 = memory.alloc_tensor(%storage_0837, 0 /* ty=int64 */, meta[relay.Constant][1038] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][850]) /* ty=int64 */;
  %2967 = fn (%p0680: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0680) /* ty=int64 */
  };
  %2968 = (%shape_func_out_0161,);
  %2969 = (%tensor_0682,);
  let %x1052: () = vm.invoke_tvm_op(%2967, %2968, %2969) /* ty=() */;
  let %storage_0838: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][851]) /* ty=Storage[] */;
  let %tensor_0683: int64 = memory.alloc_tensor(%storage_0838, 0 /* ty=int64 */, meta[relay.Constant][1039] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][851]) /* ty=int64 */;
  %2970 = fn (%p0681: int64, Primitive=1) -> int64 {
    multiply(%p0681, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2971 = (%tensor_0682,);
  %2972 = (%tensor_0683,);
  let %x1053: () = vm.invoke_tvm_op(%2970, %2971, %2972) /* ty=() */;
  let %storage_0839: Storage[] = memory.alloc_storage(%tensor_0683, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][852]) /* ty=Storage[] */;
  let %out_0155: Tensor[(?, 28, 28, 256), float32] = memory.alloc_tensor(%storage_0839, 0 /* ty=int64 */, %shape_func_out_0161, meta[relay.attrs.AllocTensorAttrs][852]) /* ty=Tensor[(?, 28, 28, 256), float32] */;
  %2973 = (%x1051,);
  %2974 = (%out_0155,);
  let %x1054: () = vm.invoke_tvm_op(%2964, %2973, %2974) /* ty=() */;
  let %x1055: Tensor[(?, 28, 28, 256), float32] = %out_0155;
  let %in_shape_0146: Tensor[(4), int64] = vm.shape_of(%x1055, meta[relay.attrs.ShapeOfAttrs][208]) /* ty=Tensor[(4), int64] */;
  let %storage_0840: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][853]) /* ty=Storage[] */;
  let %tensor_0684: Tensor[(4), int64] = memory.alloc_tensor(%storage_0840, 0 /* ty=int64 */, meta[relay.Constant][1040] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][853]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0162: Tensor[(4), int64] = %tensor_0684;
  %2976 = fn (%p0682: Tensor[(?, 28, 28, 256), float32], %p1242: Tensor[(1, 1, 256, 91), float32], %p2203: Tensor[(1, 1, 1, 91), float32], Primitive=1) -> Tensor[(?, 28, 28, 91), float32] {
    %2975 = nn.conv2d(%p0682, %p1242, padding=[0, 0, 0, 0], channels=91, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 28, 28, 91), float32] */;
    add(%2975, %p2203) /* ty=Tensor[(?, 28, 28, 91), float32] */
  };
  %2977 = (%in_shape_0146, meta[relay.Constant][1041] /* ty=Tensor[(4), int64] */, meta[relay.Constant][1042] /* ty=Tensor[(4), int64] */);
  %2978 = (%shape_func_out_0162,);
  let %shape_func162: () = vm.shape_func(%2976, %2977, %2978, meta[relay.attrs.ShapeFuncAttrs][162]) /* ty=() */;
  let %storage_0841: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][854]) /* ty=Storage[] */;
  let %tensor_0685: int64 = memory.alloc_tensor(%storage_0841, 0 /* ty=int64 */, meta[relay.Constant][1043] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][854]) /* ty=int64 */;
  %2979 = fn (%p0683: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0683) /* ty=int64 */
  };
  %2980 = (%shape_func_out_0162,);
  %2981 = (%tensor_0685,);
  let %x1056: () = vm.invoke_tvm_op(%2979, %2980, %2981) /* ty=() */;
  let %storage_0842: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][855]) /* ty=Storage[] */;
  let %tensor_0686: int64 = memory.alloc_tensor(%storage_0842, 0 /* ty=int64 */, meta[relay.Constant][1044] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][855]) /* ty=int64 */;
  %2982 = fn (%p0684: int64, Primitive=1) -> int64 {
    multiply(%p0684, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2983 = (%tensor_0685,);
  %2984 = (%tensor_0686,);
  let %x1057: () = vm.invoke_tvm_op(%2982, %2983, %2984) /* ty=() */;
  let %storage_0843: Storage[] = memory.alloc_storage(%tensor_0686, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][856]) /* ty=Storage[] */;
  let %out_0156: Tensor[(?, 28, 28, 91), float32] = memory.alloc_tensor(%storage_0843, 0 /* ty=int64 */, %shape_func_out_0162, meta[relay.attrs.AllocTensorAttrs][856]) /* ty=Tensor[(?, 28, 28, 91), float32] */;
  %2985 = (%x1055, meta[relay.Constant][1045] /* ty=Tensor[(1, 1, 256, 91), float32] */, meta[relay.Constant][1046] /* ty=Tensor[(1, 1, 1, 91), float32] */);
  %2986 = (%out_0156,);
  let %x1058: () = vm.invoke_tvm_op(%2976, %2985, %2986) /* ty=() */;
  let %x1059: Tensor[(?, 28, 28, 91), float32] = %out_0156;
  let %in_shape_0147: Tensor[(1), int64] = vm.shape_of(%x781, meta[relay.attrs.ShapeOfAttrs][209]) /* ty=Tensor[(1), int64] */;
  let %in_shape_193: Tensor[(1), int64] = vm.shape_of(%x794, meta[relay.attrs.ShapeOfAttrs][210]) /* ty=Tensor[(1), int64] */;
  let %storage_0844: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][857]) /* ty=Storage[] */;
  let %tensor_0687: Tensor[(1), int64] = memory.alloc_tensor(%storage_0844, 0 /* ty=int64 */, meta[relay.Constant][1047] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][857]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0163: Tensor[(1), int64] = %tensor_0687;
  %2988 = fn (%p0685: Tensor[(?), int64], %p1243: Tensor[(?), int64], Primitive=1) -> Tensor[(?), int64] {
    %2987 = (%p0685, %p1243);
    adv_index(%2987) /* ty=Tensor[(?), int64] */
  };
  %2989 = (%in_shape_0147, %in_shape_193);
  %2990 = (%shape_func_out_0163,);
  let %shape_func163: () = vm.shape_func(%2988, %2989, %2990, meta[relay.attrs.ShapeFuncAttrs][163]) /* ty=() */;
  let %storage_0845: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][858]) /* ty=Storage[] */;
  let %tensor_0688: int64 = memory.alloc_tensor(%storage_0845, 0 /* ty=int64 */, meta[relay.Constant][1048] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][858]) /* ty=int64 */;
  %2991 = fn (%p0686: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0686) /* ty=int64 */
  };
  %2992 = (%shape_func_out_0163,);
  %2993 = (%tensor_0688,);
  let %x1060: () = vm.invoke_tvm_op(%2991, %2992, %2993) /* ty=() */;
  let %storage_0846: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][859]) /* ty=Storage[] */;
  let %tensor_0689: int64 = memory.alloc_tensor(%storage_0846, 0 /* ty=int64 */, meta[relay.Constant][1049] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][859]) /* ty=int64 */;
  %2994 = fn (%p0687: int64, Primitive=1) -> int64 {
    multiply(%p0687, 8 /* ty=int64 */) /* ty=int64 */
  };
  %2995 = (%tensor_0688,);
  %2996 = (%tensor_0689,);
  let %x1061: () = vm.invoke_tvm_op(%2994, %2995, %2996) /* ty=() */;
  let %storage_0847: Storage[] = memory.alloc_storage(%tensor_0689, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][860]) /* ty=Storage[] */;
  let %out_0157: Tensor[(?), int64] = memory.alloc_tensor(%storage_0847, 0 /* ty=int64 */, %shape_func_out_0163, meta[relay.attrs.AllocTensorAttrs][860]) /* ty=Tensor[(?), int64] */;
  %2997 = (%x781, %x794);
  %2998 = (%out_0157,);
  let %x1062: () = vm.invoke_tvm_op(%2988, %2997, %2998) /* ty=() */;
  let %x1063: Tensor[(?), int64] = %out_0157;
  let %in_shape_0148: Tensor[(4), int64] = vm.shape_of(%x1059, meta[relay.attrs.ShapeOfAttrs][211]) /* ty=Tensor[(4), int64] */;
  let %storage_0848: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][861]) /* ty=Storage[] */;
  let %tensor_0690: Tensor[(4), int64] = memory.alloc_tensor(%storage_0848, 0 /* ty=int64 */, meta[relay.Constant][1050] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][861]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0164: Tensor[(4), int64] = %tensor_0690;
  %2999 = fn (%p0688: Tensor[(?, 28, 28, 91), float32], Primitive=1) -> Tensor[(?, 91, 28, 28), float32] {
    layout_transform(%p0688, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 91, 28, 28), float32] */
  };
  %3000 = (%in_shape_0148,);
  %3001 = (%shape_func_out_0164,);
  let %shape_func164: () = vm.shape_func(%2999, %3000, %3001, meta[relay.attrs.ShapeFuncAttrs][164]) /* ty=() */;
  let %storage_0849: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][862]) /* ty=Storage[] */;
  let %tensor_0691: int64 = memory.alloc_tensor(%storage_0849, 0 /* ty=int64 */, meta[relay.Constant][1051] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][862]) /* ty=int64 */;
  %3002 = fn (%p0689: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0689) /* ty=int64 */
  };
  %3003 = (%shape_func_out_0164,);
  %3004 = (%tensor_0691,);
  let %x1064: () = vm.invoke_tvm_op(%3002, %3003, %3004) /* ty=() */;
  let %storage_0850: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][863]) /* ty=Storage[] */;
  let %tensor_0692: int64 = memory.alloc_tensor(%storage_0850, 0 /* ty=int64 */, meta[relay.Constant][1052] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][863]) /* ty=int64 */;
  %3005 = fn (%p0690: int64, Primitive=1) -> int64 {
    multiply(%p0690, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3006 = (%tensor_0691,);
  %3007 = (%tensor_0692,);
  let %x1065: () = vm.invoke_tvm_op(%3005, %3006, %3007) /* ty=() */;
  let %storage_0851: Storage[] = memory.alloc_storage(%tensor_0692, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][864]) /* ty=Storage[] */;
  let %out_0158: Tensor[(?, 91, 28, 28), float32] = memory.alloc_tensor(%storage_0851, 0 /* ty=int64 */, %shape_func_out_0164, meta[relay.attrs.AllocTensorAttrs][864]) /* ty=Tensor[(?, 91, 28, 28), float32] */;
  %3008 = (%x1059,);
  %3009 = (%out_0158,);
  let %x1066: () = vm.invoke_tvm_op(%2999, %3008, %3009) /* ty=() */;
  let %x1067: Tensor[(?, 91, 28, 28), float32] = %out_0158;
  let %storage_0852: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][865]) /* ty=Storage[] */;
  let %tensor_0693: Tensor[(4), int32] = memory.alloc_tensor(%storage_0852, 0 /* ty=int64 */, meta[relay.Constant][1053] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][865]) /* ty=Tensor[(4), int32] */;
  %3010 = fn (%p0691: Tensor[(?, 91, 28, 28), float32], Primitive=1) -> Tensor[(4), int32] {
    shape_of(%p0691, dtype="int32") /* ty=Tensor[(4), int32] */
  };
  %3011 = (%x1067,);
  %3012 = (%tensor_0693,);
  let %x1068: () = vm.invoke_tvm_op(%3010, %3011, %3012) /* ty=() */;
  let %x1069: Tensor[(4), int32] = %tensor_0693;
  let %storage_0853: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][866]) /* ty=Storage[] */;
  let %tensor_0694: int64 = memory.alloc_tensor(%storage_0853, 0 /* ty=int64 */, meta[relay.Constant][1054] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][866]) /* ty=int64 */;
  %3014 = fn (%p0692: Tensor[(4), int32], Primitive=1) -> int64 {
    %3013 = take(%p0692, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
    cast(%3013, dtype="int64") /* ty=int64 */
  };
  %3015 = (%x1069,);
  %3016 = (%tensor_0694,);
  let %x1070: () = vm.invoke_tvm_op(%3014, %3015, %3016) /* ty=() */;
  let %x1071: int64 = %tensor_0694;
  let %in_shape_194: int64 = %x1071;
  let %storage_0854: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][867]) /* ty=Storage[] */;
  let %tensor_0695: Tensor[(1), int64] = memory.alloc_tensor(%storage_0854, 0 /* ty=int64 */, meta[relay.Constant][1055] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][867]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0165: Tensor[(1), int64] = %tensor_0695;
  %3017 = fn (%p0693: int64, %p1244: int64, %p2204: int64, Primitive=1) -> Tensor[(?), int64] {
    arange(%p0693, %p1244, %p2204, start=meta[relay.Constant][1056], stop=meta[relay.Call][2], step=meta[relay.Constant][1057], dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %3018 = (0 /* ty=int64 */, %in_shape_194, 1 /* ty=int64 */);
  %3019 = (%shape_func_out_0165,);
  let %shape_func165: () = vm.shape_func(%3017, %3018, %3019, meta[relay.attrs.ShapeFuncAttrs][165]) /* ty=() */;
  let %storage_0855: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][868]) /* ty=Storage[] */;
  let %tensor_0696: int64 = memory.alloc_tensor(%storage_0855, 0 /* ty=int64 */, meta[relay.Constant][1058] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][868]) /* ty=int64 */;
  %3020 = fn (%p0694: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0694) /* ty=int64 */
  };
  %3021 = (%shape_func_out_0165,);
  %3022 = (%tensor_0696,);
  let %x1072: () = vm.invoke_tvm_op(%3020, %3021, %3022) /* ty=() */;
  let %storage_0856: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][869]) /* ty=Storage[] */;
  let %tensor_0697: int64 = memory.alloc_tensor(%storage_0856, 0 /* ty=int64 */, meta[relay.Constant][1059] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][869]) /* ty=int64 */;
  %3023 = fn (%p0695: int64, Primitive=1) -> int64 {
    multiply(%p0695, 8 /* ty=int64 */) /* ty=int64 */
  };
  %3024 = (%tensor_0696,);
  %3025 = (%tensor_0697,);
  let %x1073: () = vm.invoke_tvm_op(%3023, %3024, %3025) /* ty=() */;
  let %storage_0857: Storage[] = memory.alloc_storage(%tensor_0697, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][870]) /* ty=Storage[] */;
  let %out_0159: Tensor[(?), int64] = memory.alloc_tensor(%storage_0857, 0 /* ty=int64 */, %shape_func_out_0165, meta[relay.attrs.AllocTensorAttrs][870]) /* ty=Tensor[(?), int64] */;
  %3026 = (0 /* ty=int64 */, %x1071, 1 /* ty=int64 */);
  %3027 = (%out_0159,);
  let %x1074: () = vm.invoke_tvm_op(%3017, %3026, %3027) /* ty=() */;
  let %x1075: Tensor[(?), int64] = %out_0159;
  let %in_shape_0149: Tensor[(4), int64] = vm.shape_of(%x1059, meta[relay.attrs.ShapeOfAttrs][212]) /* ty=Tensor[(4), int64] */;
  let %in_shape_195: Tensor[(1), int64] = vm.shape_of(%x1063, meta[relay.attrs.ShapeOfAttrs][213]) /* ty=Tensor[(1), int64] */;
  let %in_shape_262: Tensor[(1), int64] = vm.shape_of(%x1075, meta[relay.attrs.ShapeOfAttrs][214]) /* ty=Tensor[(1), int64] */;
  let %storage_0858: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][871]) /* ty=Storage[] */;
  let %tensor_0698: Tensor[(3), int64] = memory.alloc_tensor(%storage_0858, 0 /* ty=int64 */, meta[relay.Constant][1060] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][871]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0166: Tensor[(3), int64] = %tensor_0698;
  %3033 = fn (%p0696: Tensor[(?, 28, 28, 91), float32], %p1245: Tensor[(?), int64], %p2205: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 28, 28), float32] {
    %3028 = sigmoid(%p0696) /* ty=Tensor[(?, 28, 28, 91), float32] */;
    %3029 = layout_transform(%3028, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 91, 28, 28), float32] */;
    %3030 = (%p1245,);
    %3031 = concatenate(%3030) /* ty=Tensor[(?), int64] */;
    %3032 = (%3029, %p2205, %3031);
    adv_index(%3032) /* ty=Tensor[(?, 28, 28), float32] */
  };
  %3034 = (%in_shape_0149, %in_shape_195, %in_shape_262);
  %3035 = (%shape_func_out_0166,);
  let %shape_func166: () = vm.shape_func(%3033, %3034, %3035, meta[relay.attrs.ShapeFuncAttrs][166]) /* ty=() */;
  let %storage_0859: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][872]) /* ty=Storage[] */;
  let %tensor_0699: int64 = memory.alloc_tensor(%storage_0859, 0 /* ty=int64 */, meta[relay.Constant][1061] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][872]) /* ty=int64 */;
  %3036 = fn (%p0697: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0697) /* ty=int64 */
  };
  %3037 = (%shape_func_out_0166,);
  %3038 = (%tensor_0699,);
  let %x1076: () = vm.invoke_tvm_op(%3036, %3037, %3038) /* ty=() */;
  let %storage_0860: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][873]) /* ty=Storage[] */;
  let %tensor_0700: int64 = memory.alloc_tensor(%storage_0860, 0 /* ty=int64 */, meta[relay.Constant][1062] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][873]) /* ty=int64 */;
  %3039 = fn (%p0698: int64, Primitive=1) -> int64 {
    multiply(%p0698, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3040 = (%tensor_0699,);
  %3041 = (%tensor_0700,);
  let %x1077: () = vm.invoke_tvm_op(%3039, %3040, %3041) /* ty=() */;
  let %storage_0861: Storage[] = memory.alloc_storage(%tensor_0700, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][874]) /* ty=Storage[] */;
  let %out_0160: Tensor[(?, 28, 28), float32] = memory.alloc_tensor(%storage_0861, 0 /* ty=int64 */, %shape_func_out_0166, meta[relay.attrs.AllocTensorAttrs][874]) /* ty=Tensor[(?, 28, 28), float32] */;
  %3042 = (%x1059, %x1063, %x1075);
  %3043 = (%out_0160,);
  let %x1078: () = vm.invoke_tvm_op(%3033, %3042, %3043) /* ty=() */;
  let %x1079: Tensor[(?, 28, 28), float32] = %out_0160;
  let %storage_0862: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][875]) /* ty=Storage[] */;
  let %tensor_0701: Tensor[(3), int32] = memory.alloc_tensor(%storage_0862, 0 /* ty=int64 */, meta[relay.Constant][1063] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][875]) /* ty=Tensor[(3), int32] */;
  %3044 = fn (%p0699: Tensor[(?, 28, 28), float32], Primitive=1) -> Tensor[(3), int32] {
    shape_of(%p0699, dtype="int32") /* ty=Tensor[(3), int32] */
  };
  %3045 = (%x1079,);
  %3046 = (%tensor_0701,);
  let %x1080: () = vm.invoke_tvm_op(%3044, %3045, %3046) /* ty=() */;
  let %x1081: Tensor[(3), int32] = %tensor_0701;
  let %storage_0863: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][876]) /* ty=Storage[] */;
  let %tensor_0702: Tensor[(3), int32] = memory.alloc_tensor(%storage_0863, 0 /* ty=int64 */, meta[relay.Constant][1064] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][876]) /* ty=Tensor[(3), int32] */;
  %3049 = fn (%p0700: Tensor[(3), int32], %p1246: Tensor[(3), int32], %p2206: Tensor[(3), bool], Primitive=1) -> Tensor[(3), int32] {
    %3047 = cast_like(%p0700, %p1246) /* ty=Tensor[(3), int32] */;
    %3048 = add(%p1246, %3047) /* ty=Tensor[(3), int32] */;
    where(%p2206, %3048, %p1246) /* ty=Tensor[(3), int32] */
  };
  %3050 = (%x1081, meta[relay.Constant][1065] /* ty=Tensor[(3), int32] */, meta[relay.Constant][1066] /* ty=Tensor[(3), bool] */);
  %3051 = (%tensor_0702,);
  let %x1082: () = vm.invoke_tvm_op(%3049, %3050, %3051) /* ty=() */;
  let %x1083: Tensor[(3), int32] = %tensor_0702;
  let %storage_0864: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][877]) /* ty=Storage[] */;
  let %tensor_0703: Tensor[(3), int64] = memory.alloc_tensor(%storage_0864, 0 /* ty=int64 */, meta[relay.Constant][1067] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][877]) /* ty=Tensor[(3), int64] */;
  %3052 = fn (%p0701: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    cast(%p0701, dtype="int64") /* ty=Tensor[(3), int64] */
  };
  %3053 = (%x1081,);
  %3054 = (%tensor_0703,);
  let %x1084: () = vm.invoke_tvm_op(%3052, %3053, %3054) /* ty=() */;
  let %x1085: Tensor[(3), int64] = %tensor_0703;
  let %in_shape_0150: Tensor[(3), int64] = vm.shape_of(%x1079, meta[relay.attrs.ShapeOfAttrs][215]) /* ty=Tensor[(3), int64] */;
  let %in_shape_196: Tensor[(3), int32] = %x1083;
  let %in_shape_263: Tensor[(3), int64] = %x1085;
  let %storage_0865: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][878]) /* ty=Storage[] */;
  let %tensor_0704: Tensor[(3), int64] = memory.alloc_tensor(%storage_0865, 0 /* ty=int64 */, meta[relay.Constant][1068] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][878]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0167: Tensor[(3), int64] = %tensor_0704;
  %3055 = fn (%p0702: Tensor[(?, 28, 28), float32], %p1247: Tensor[(3), int32], %p2207: Tensor[(3), int64], %p378: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0702, %p1247, %p2207, %p378, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %3056 = (%in_shape_0150, %in_shape_196, %in_shape_263, meta[relay.Constant][1069] /* ty=Tensor[(3), int32] */);
  %3057 = (%shape_func_out_0167,);
  let %shape_func167: () = vm.shape_func(%3055, %3056, %3057, meta[relay.attrs.ShapeFuncAttrs][167]) /* ty=() */;
  let %storage_0866: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][879]) /* ty=Storage[] */;
  let %tensor_0705: int64 = memory.alloc_tensor(%storage_0866, 0 /* ty=int64 */, meta[relay.Constant][1070] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][879]) /* ty=int64 */;
  %3058 = fn (%p0703: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0703) /* ty=int64 */
  };
  %3059 = (%shape_func_out_0167,);
  %3060 = (%tensor_0705,);
  let %x1086: () = vm.invoke_tvm_op(%3058, %3059, %3060) /* ty=() */;
  let %storage_0867: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][880]) /* ty=Storage[] */;
  let %tensor_0706: int64 = memory.alloc_tensor(%storage_0867, 0 /* ty=int64 */, meta[relay.Constant][1071] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][880]) /* ty=int64 */;
  %3061 = fn (%p0704: int64, Primitive=1) -> int64 {
    multiply(%p0704, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3062 = (%tensor_0705,);
  %3063 = (%tensor_0706,);
  let %x1087: () = vm.invoke_tvm_op(%3061, %3062, %3063) /* ty=() */;
  let %storage_0868: Storage[] = memory.alloc_storage(%tensor_0706, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][881]) /* ty=Storage[] */;
  let %out_0161: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_0868, 0 /* ty=int64 */, %shape_func_out_0167, meta[relay.attrs.AllocTensorAttrs][881]) /* ty=Tensor[(?, ?, ?), float32] */;
  %3064 = (%x1079, %x1083, %x1085, meta[relay.Constant][1069] /* ty=Tensor[(3), int32] */);
  %3065 = (%out_0161,);
  let %x1088: () = vm.invoke_tvm_op(%3055, %3064, %3065) /* ty=() */;
  let %x1089: Tensor[(?, ?, ?), float32] = %out_0161;
  let %in_shape_0151: Tensor[(3), int64] = vm.shape_of(%x1089, meta[relay.attrs.ShapeOfAttrs][216]) /* ty=Tensor[(3), int64] */;
  let %storage_0869: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][882]) /* ty=Storage[] */;
  let %tensor_0707: Tensor[(4), int64] = memory.alloc_tensor(%storage_0869, 0 /* ty=int64 */, meta[relay.Constant][1072] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][882]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0168: Tensor[(4), int64] = %tensor_0707;
  %3066 = fn (%p0705: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(?, 1, ?, ?), float32] {
    expand_dims(%p0705, axis=1) /* ty=Tensor[(?, 1, ?, ?), float32] */
  };
  %3067 = (%in_shape_0151,);
  %3068 = (%shape_func_out_0168,);
  let %shape_func168: () = vm.shape_func(%3066, %3067, %3068, meta[relay.attrs.ShapeFuncAttrs][168]) /* ty=() */;
  let %storage_0870: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][883]) /* ty=Storage[] */;
  let %tensor_0708: int64 = memory.alloc_tensor(%storage_0870, 0 /* ty=int64 */, meta[relay.Constant][1073] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][883]) /* ty=int64 */;
  %3069 = fn (%p0706: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0706) /* ty=int64 */
  };
  %3070 = (%shape_func_out_0168,);
  %3071 = (%tensor_0708,);
  let %x1090: () = vm.invoke_tvm_op(%3069, %3070, %3071) /* ty=() */;
  let %storage_0871: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][884]) /* ty=Storage[] */;
  let %tensor_0709: int64 = memory.alloc_tensor(%storage_0871, 0 /* ty=int64 */, meta[relay.Constant][1074] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][884]) /* ty=int64 */;
  %3072 = fn (%p0707: int64, Primitive=1) -> int64 {
    multiply(%p0707, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3073 = (%tensor_0708,);
  %3074 = (%tensor_0709,);
  let %x1091: () = vm.invoke_tvm_op(%3072, %3073, %3074) /* ty=() */;
  let %storage_0872: Storage[] = memory.alloc_storage(%tensor_0709, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][885]) /* ty=Storage[] */;
  let %out_0162: Tensor[(?, 1, ?, ?), float32] = memory.alloc_tensor(%storage_0872, 0 /* ty=int64 */, %shape_func_out_0168, meta[relay.attrs.AllocTensorAttrs][885]) /* ty=Tensor[(?, 1, ?, ?), float32] */;
  %3075 = (%x1089,);
  %3076 = (%out_0162,);
  let %x1092: () = vm.invoke_tvm_op(%3066, %3075, %3076) /* ty=() */;
  let %x1093: Tensor[(?, 1, ?, ?), float32] = %out_0162;
  let %in_shape_0152: Tensor[(4), int64] = vm.shape_of(%x1093, meta[relay.attrs.ShapeOfAttrs][217]) /* ty=Tensor[(4), int64] */;
  let %storage_0873: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][886]) /* ty=Storage[] */;
  let %tensor_0710: Tensor[(4), int64] = memory.alloc_tensor(%storage_0873, 0 /* ty=int64 */, meta[relay.Constant][1075] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][886]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0169: Tensor[(4), int64] = %tensor_0710;
  %3077 = fn (%p0708: Tensor[(?, 1, ?, ?), float32], Primitive=1) -> Tensor[(?, 1, ?, ?), float32] {
    nn.pad(%p0708, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]) /* ty=Tensor[(?, 1, ?, ?), float32] */
  };
  %3078 = (%in_shape_0152,);
  %3079 = (%shape_func_out_0169,);
  let %shape_func169: () = vm.shape_func(%3077, %3078, %3079, meta[relay.attrs.ShapeFuncAttrs][169]) /* ty=() */;
  let %storage_0874: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][887]) /* ty=Storage[] */;
  let %tensor_0711: int64 = memory.alloc_tensor(%storage_0874, 0 /* ty=int64 */, meta[relay.Constant][1076] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][887]) /* ty=int64 */;
  %3080 = fn (%p0709: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0709) /* ty=int64 */
  };
  %3081 = (%shape_func_out_0169,);
  %3082 = (%tensor_0711,);
  let %x1094: () = vm.invoke_tvm_op(%3080, %3081, %3082) /* ty=() */;
  let %storage_0875: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][888]) /* ty=Storage[] */;
  let %tensor_0712: int64 = memory.alloc_tensor(%storage_0875, 0 /* ty=int64 */, meta[relay.Constant][1077] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][888]) /* ty=int64 */;
  %3083 = fn (%p0710: int64, Primitive=1) -> int64 {
    multiply(%p0710, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3084 = (%tensor_0711,);
  %3085 = (%tensor_0712,);
  let %x1095: () = vm.invoke_tvm_op(%3083, %3084, %3085) /* ty=() */;
  let %storage_0876: Storage[] = memory.alloc_storage(%tensor_0712, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][889]) /* ty=Storage[] */;
  let %out_0163: Tensor[(?, 1, ?, ?), float32] = memory.alloc_tensor(%storage_0876, 0 /* ty=int64 */, %shape_func_out_0169, meta[relay.attrs.AllocTensorAttrs][889]) /* ty=Tensor[(?, 1, ?, ?), float32] */;
  %3086 = (%x1093,);
  %3087 = (%out_0163,);
  let %x1096: () = vm.invoke_tvm_op(%3077, %3086, %3087) /* ty=() */;
  let %x1097: Tensor[(?, 1, ?, ?), float32] = %out_0163;
  let %in_shape_0153: Tensor[(2), int64] = vm.shape_of(%x848, meta[relay.attrs.ShapeOfAttrs][218]) /* ty=Tensor[(2), int64] */;
  let %storage_0877: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][890]) /* ty=Storage[] */;
  let %tensor_0713: Tensor[(2), int64] = memory.alloc_tensor(%storage_0877, 0 /* ty=int64 */, meta[relay.Constant][1078] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][890]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0170: Tensor[(2), int64] = %tensor_0713;
  %3102 = fn (%p0711: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(?, 4), float32] {
    %3088 = split(%p0711, indices_or_sections=4, axis=1) /* ty=(Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32]) */;
    %3089 = %3088.0;
    %3090 = squeeze(%3089, axis=[1]) /* ty=Tensor[(?), float32] */;
    %3091 = multiply(%3090, 0.375f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %3092 = %3088.1;
    %3093 = squeeze(%3092, axis=[1]) /* ty=Tensor[(?), float32] */;
    %3094 = multiply(%3093, 0.375f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %3095 = %3088.2;
    %3096 = squeeze(%3095, axis=[1]) /* ty=Tensor[(?), float32] */;
    %3097 = multiply(%3096, 0.375f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %3098 = %3088.3;
    %3099 = squeeze(%3098, axis=[1]) /* ty=Tensor[(?), float32] */;
    %3100 = multiply(%3099, 0.375f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %3101 = (%3091, %3094, %3097, %3100);
    stack(%3101, axis=1) /* ty=Tensor[(?, 4), float32] */
  };
  %3103 = (%in_shape_0153,);
  %3104 = (%shape_func_out_0170,);
  let %shape_func170: () = vm.shape_func(%3102, %3103, %3104, meta[relay.attrs.ShapeFuncAttrs][170]) /* ty=() */;
  let %storage_0878: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][891]) /* ty=Storage[] */;
  let %tensor_0714: int64 = memory.alloc_tensor(%storage_0878, 0 /* ty=int64 */, meta[relay.Constant][1079] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][891]) /* ty=int64 */;
  %3105 = fn (%p0712: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0712) /* ty=int64 */
  };
  %3106 = (%shape_func_out_0170,);
  %3107 = (%tensor_0714,);
  let %x1098: () = vm.invoke_tvm_op(%3105, %3106, %3107) /* ty=() */;
  let %storage_0879: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][892]) /* ty=Storage[] */;
  let %tensor_0715: int64 = memory.alloc_tensor(%storage_0879, 0 /* ty=int64 */, meta[relay.Constant][1080] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][892]) /* ty=int64 */;
  %3108 = fn (%p0713: int64, Primitive=1) -> int64 {
    multiply(%p0713, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3109 = (%tensor_0714,);
  %3110 = (%tensor_0715,);
  let %x1099: () = vm.invoke_tvm_op(%3108, %3109, %3110) /* ty=() */;
  let %storage_0880: Storage[] = memory.alloc_storage(%tensor_0715, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][893]) /* ty=Storage[] */;
  let %out_0164: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0880, 0 /* ty=int64 */, %shape_func_out_0170, meta[relay.attrs.AllocTensorAttrs][893]) /* ty=Tensor[(?, 4), float32] */;
  %3111 = (%x848,);
  %3112 = (%out_0164,);
  let %x1100: () = vm.invoke_tvm_op(%3102, %3111, %3112) /* ty=() */;
  let %x1101: Tensor[(?, 4), float32] = %out_0164;
  let %in_shape_0154: Tensor[(1), int64] = vm.shape_of(%x786, meta[relay.attrs.ShapeOfAttrs][219]) /* ty=Tensor[(1), int64] */;
  let %in_shape_197: Tensor[(1), int64] = vm.shape_of(%x794, meta[relay.attrs.ShapeOfAttrs][220]) /* ty=Tensor[(1), int64] */;
  let %storage_0881: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][894]) /* ty=Storage[] */;
  let %tensor_0716: Tensor[(1), int64] = memory.alloc_tensor(%storage_0881, 0 /* ty=int64 */, meta[relay.Constant][1081] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][894]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0171: Tensor[(1), int64] = %tensor_0716;
  %3114 = fn (%p0714: Tensor[(?), float32], %p1248: Tensor[(?), int64], Primitive=1) -> Tensor[(?), float32] {
    %3113 = (%p0714, %p1248);
    adv_index(%3113) /* ty=Tensor[(?), float32] */
  };
  %3115 = (%in_shape_0154, %in_shape_197);
  %3116 = (%shape_func_out_0171,);
  let %shape_func171: () = vm.shape_func(%3114, %3115, %3116, meta[relay.attrs.ShapeFuncAttrs][171]) /* ty=() */;
  let %storage_0882: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][895]) /* ty=Storage[] */;
  let %tensor_0717: int64 = memory.alloc_tensor(%storage_0882, 0 /* ty=int64 */, meta[relay.Constant][1082] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][895]) /* ty=int64 */;
  %3117 = fn (%p0715: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0715) /* ty=int64 */
  };
  %3118 = (%shape_func_out_0171,);
  %3119 = (%tensor_0717,);
  let %x1102: () = vm.invoke_tvm_op(%3117, %3118, %3119) /* ty=() */;
  let %storage_0883: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][896]) /* ty=Storage[] */;
  let %tensor_0718: int64 = memory.alloc_tensor(%storage_0883, 0 /* ty=int64 */, meta[relay.Constant][1083] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][896]) /* ty=int64 */;
  %3120 = fn (%p0716: int64, Primitive=1) -> int64 {
    multiply(%p0716, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3121 = (%tensor_0717,);
  %3122 = (%tensor_0718,);
  let %x1103: () = vm.invoke_tvm_op(%3120, %3121, %3122) /* ty=() */;
  let %storage_0884: Storage[] = memory.alloc_storage(%tensor_0718, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][897]) /* ty=Storage[] */;
  let %out_0165: Tensor[(?), float32] = memory.alloc_tensor(%storage_0884, 0 /* ty=int64 */, %shape_func_out_0171, meta[relay.attrs.AllocTensorAttrs][897]) /* ty=Tensor[(?), float32] */;
  %3123 = (%x786, %x794);
  %3124 = (%out_0165,);
  let %x1104: () = vm.invoke_tvm_op(%3114, %3123, %3124) /* ty=() */;
  let %x1105: Tensor[(?), float32] = %out_0165;
  let %storage_0885: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][898]) /* ty=Storage[] */;
  let %tensor_0719: Tensor[(2), int32] = memory.alloc_tensor(%storage_0885, 0 /* ty=int64 */, meta[relay.Constant][1084] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][898]) /* ty=Tensor[(2), int32] */;
  %3125 = fn (%p0717: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0717, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %3126 = (%x1101,);
  %3127 = (%tensor_0719,);
  let %x1106: () = vm.invoke_tvm_op(%3125, %3126, %3127) /* ty=() */;
  let %x1107: Tensor[(2), int32] = %tensor_0719;
  let %storage_0886: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][899]) /* ty=Storage[] */;
  let %tensor_0720: Tensor[(2), int32] = memory.alloc_tensor(%storage_0886, 0 /* ty=int64 */, meta[relay.Constant][1085] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][899]) /* ty=Tensor[(2), int32] */;
  %3130 = fn (%p0718: Tensor[(2), int32], %p1249: Tensor[(2), int32], %p2208: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %3128 = cast_like(%p0718, %p1249) /* ty=Tensor[(2), int32] */;
    %3129 = add(%p1249, %3128) /* ty=Tensor[(2), int32] */;
    where(%p2208, %3129, %p1249) /* ty=Tensor[(2), int32] */
  };
  %3131 = (%x1107, meta[relay.Constant][1086] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1087] /* ty=Tensor[(2), bool] */);
  %3132 = (%tensor_0720,);
  let %x1108: () = vm.invoke_tvm_op(%3130, %3131, %3132) /* ty=() */;
  let %x1109: Tensor[(2), int32] = %tensor_0720;
  let %storage_0887: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][900]) /* ty=Storage[] */;
  let %tensor_0721: Tensor[(2), int64] = memory.alloc_tensor(%storage_0887, 0 /* ty=int64 */, meta[relay.Constant][1088] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][900]) /* ty=Tensor[(2), int64] */;
  %3133 = fn (%p0719: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0719, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %3134 = (%x1107,);
  %3135 = (%tensor_0721,);
  let %x1110: () = vm.invoke_tvm_op(%3133, %3134, %3135) /* ty=() */;
  let %x1111: Tensor[(2), int64] = %tensor_0721;
  let %in_shape_0155: Tensor[(2), int64] = vm.shape_of(%x1101, meta[relay.attrs.ShapeOfAttrs][221]) /* ty=Tensor[(2), int64] */;
  let %in_shape_198: Tensor[(2), int32] = %x1109;
  let %in_shape_264: Tensor[(2), int64] = %x1111;
  let %storage_0888: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][901]) /* ty=Storage[] */;
  let %tensor_0722: Tensor[(2), int64] = memory.alloc_tensor(%storage_0888, 0 /* ty=int64 */, meta[relay.Constant][1089] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][901]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0172: Tensor[(2), int64] = %tensor_0722;
  %3136 = fn (%p0720: Tensor[(?, 4), float32], %p1250: Tensor[(2), int32], %p2209: Tensor[(2), int64], %p379: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0720, %p1250, %p2209, %p379, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3137 = (%in_shape_0155, %in_shape_198, %in_shape_264, meta[relay.Constant][1090] /* ty=Tensor[(2), int32] */);
  %3138 = (%shape_func_out_0172,);
  let %shape_func172: () = vm.shape_func(%3136, %3137, %3138, meta[relay.attrs.ShapeFuncAttrs][172]) /* ty=() */;
  let %storage_0889: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][902]) /* ty=Storage[] */;
  let %tensor_0723: int64 = memory.alloc_tensor(%storage_0889, 0 /* ty=int64 */, meta[relay.Constant][1091] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][902]) /* ty=int64 */;
  %3139 = fn (%p0721: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0721) /* ty=int64 */
  };
  %3140 = (%shape_func_out_0172,);
  %3141 = (%tensor_0723,);
  let %x1112: () = vm.invoke_tvm_op(%3139, %3140, %3141) /* ty=() */;
  let %storage_0890: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][903]) /* ty=Storage[] */;
  let %tensor_0724: int64 = memory.alloc_tensor(%storage_0890, 0 /* ty=int64 */, meta[relay.Constant][1092] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][903]) /* ty=int64 */;
  %3142 = fn (%p0722: int64, Primitive=1) -> int64 {
    multiply(%p0722, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3143 = (%tensor_0723,);
  %3144 = (%tensor_0724,);
  let %x1113: () = vm.invoke_tvm_op(%3142, %3143, %3144) /* ty=() */;
  let %storage_0891: Storage[] = memory.alloc_storage(%tensor_0724, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][904]) /* ty=Storage[] */;
  let %out_0166: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0891, 0 /* ty=int64 */, %shape_func_out_0172, meta[relay.attrs.AllocTensorAttrs][904]) /* ty=Tensor[(?, ?), float32] */;
  %3145 = (%x1101, %x1109, %x1111, meta[relay.Constant][1090] /* ty=Tensor[(2), int32] */);
  %3146 = (%out_0166,);
  let %x1114: () = vm.invoke_tvm_op(%3136, %3145, %3146) /* ty=() */;
  let %x1115: Tensor[(?, ?), float32] = %out_0166;
  let %storage_0892: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][905]) /* ty=Storage[] */;
  let %tensor_0725: Tensor[(2), int32] = memory.alloc_tensor(%storage_0892, 0 /* ty=int64 */, meta[relay.Constant][1093] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][905]) /* ty=Tensor[(2), int32] */;
  %3149 = fn (%p0723: Tensor[(2), int32], %p1251: Tensor[(2), int32], %p2210: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %3147 = cast_like(%p0723, %p1251) /* ty=Tensor[(2), int32] */;
    %3148 = add(%p1251, %3147) /* ty=Tensor[(2), int32] */;
    where(%p2210, %3148, %p1251) /* ty=Tensor[(2), int32] */
  };
  %3150 = (%x1107, meta[relay.Constant][1094] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1095] /* ty=Tensor[(2), bool] */);
  %3151 = (%tensor_0725,);
  let %x1116: () = vm.invoke_tvm_op(%3149, %3150, %3151) /* ty=() */;
  let %x1117: Tensor[(2), int32] = %tensor_0725;
  let %in_shape_0156: Tensor[(2), int64] = vm.shape_of(%x1101, meta[relay.attrs.ShapeOfAttrs][222]) /* ty=Tensor[(2), int64] */;
  let %in_shape_199: Tensor[(2), int32] = %x1117;
  let %in_shape_265: Tensor[(2), int64] = %x1111;
  let %storage_0893: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][906]) /* ty=Storage[] */;
  let %tensor_0726: Tensor[(2), int64] = memory.alloc_tensor(%storage_0893, 0 /* ty=int64 */, meta[relay.Constant][1096] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][906]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0173: Tensor[(2), int64] = %tensor_0726;
  %3152 = fn (%p0724: Tensor[(?, 4), float32], %p1252: Tensor[(2), int32], %p2211: Tensor[(2), int64], %p380: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0724, %p1252, %p2211, %p380, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3153 = (%in_shape_0156, %in_shape_199, %in_shape_265, meta[relay.Constant][1097] /* ty=Tensor[(2), int32] */);
  %3154 = (%shape_func_out_0173,);
  let %shape_func173: () = vm.shape_func(%3152, %3153, %3154, meta[relay.attrs.ShapeFuncAttrs][173]) /* ty=() */;
  let %storage_0894: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][907]) /* ty=Storage[] */;
  let %tensor_0727: int64 = memory.alloc_tensor(%storage_0894, 0 /* ty=int64 */, meta[relay.Constant][1098] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][907]) /* ty=int64 */;
  %3155 = fn (%p0725: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0725) /* ty=int64 */
  };
  %3156 = (%shape_func_out_0173,);
  %3157 = (%tensor_0727,);
  let %x1118: () = vm.invoke_tvm_op(%3155, %3156, %3157) /* ty=() */;
  let %storage_0895: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][908]) /* ty=Storage[] */;
  let %tensor_0728: int64 = memory.alloc_tensor(%storage_0895, 0 /* ty=int64 */, meta[relay.Constant][1099] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][908]) /* ty=int64 */;
  %3158 = fn (%p0726: int64, Primitive=1) -> int64 {
    multiply(%p0726, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3159 = (%tensor_0727,);
  %3160 = (%tensor_0728,);
  let %x1119: () = vm.invoke_tvm_op(%3158, %3159, %3160) /* ty=() */;
  let %storage_0896: Storage[] = memory.alloc_storage(%tensor_0728, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][909]) /* ty=Storage[] */;
  let %out_0167: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0896, 0 /* ty=int64 */, %shape_func_out_0173, meta[relay.attrs.AllocTensorAttrs][909]) /* ty=Tensor[(?, ?), float32] */;
  %3161 = (%x1101, %x1117, %x1111, meta[relay.Constant][1097] /* ty=Tensor[(2), int32] */);
  %3162 = (%out_0167,);
  let %x1120: () = vm.invoke_tvm_op(%3152, %3161, %3162) /* ty=() */;
  let %x1121: Tensor[(?, ?), float32] = %out_0167;
  let %storage_0897: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][910]) /* ty=Storage[] */;
  let %tensor_0729: Tensor[(2), int32] = memory.alloc_tensor(%storage_0897, 0 /* ty=int64 */, meta[relay.Constant][1100] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][910]) /* ty=Tensor[(2), int32] */;
  %3165 = fn (%p0727: Tensor[(2), int32], %p1253: Tensor[(2), int32], %p2212: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %3163 = cast_like(%p0727, %p1253) /* ty=Tensor[(2), int32] */;
    %3164 = add(%p1253, %3163) /* ty=Tensor[(2), int32] */;
    where(%p2212, %3164, %p1253) /* ty=Tensor[(2), int32] */
  };
  %3166 = (%x1107, meta[relay.Constant][1101] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1102] /* ty=Tensor[(2), bool] */);
  %3167 = (%tensor_0729,);
  let %x1122: () = vm.invoke_tvm_op(%3165, %3166, %3167) /* ty=() */;
  let %x1123: Tensor[(2), int32] = %tensor_0729;
  let %in_shape_0157: Tensor[(2), int64] = vm.shape_of(%x1101, meta[relay.attrs.ShapeOfAttrs][223]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1100: Tensor[(2), int32] = %x1123;
  let %in_shape_266: Tensor[(2), int64] = %x1111;
  let %storage_0898: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][911]) /* ty=Storage[] */;
  let %tensor_0730: Tensor[(2), int64] = memory.alloc_tensor(%storage_0898, 0 /* ty=int64 */, meta[relay.Constant][1103] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][911]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0174: Tensor[(2), int64] = %tensor_0730;
  %3168 = fn (%p0728: Tensor[(?, 4), float32], %p1254: Tensor[(2), int32], %p2213: Tensor[(2), int64], %p381: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0728, %p1254, %p2213, %p381, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3169 = (%in_shape_0157, %in_shape_1100, %in_shape_266, meta[relay.Constant][1104] /* ty=Tensor[(2), int32] */);
  %3170 = (%shape_func_out_0174,);
  let %shape_func174: () = vm.shape_func(%3168, %3169, %3170, meta[relay.attrs.ShapeFuncAttrs][174]) /* ty=() */;
  let %storage_0899: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][912]) /* ty=Storage[] */;
  let %tensor_0731: int64 = memory.alloc_tensor(%storage_0899, 0 /* ty=int64 */, meta[relay.Constant][1105] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][912]) /* ty=int64 */;
  %3171 = fn (%p0729: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0729) /* ty=int64 */
  };
  %3172 = (%shape_func_out_0174,);
  %3173 = (%tensor_0731,);
  let %x1124: () = vm.invoke_tvm_op(%3171, %3172, %3173) /* ty=() */;
  let %storage_0900: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][913]) /* ty=Storage[] */;
  let %tensor_0732: int64 = memory.alloc_tensor(%storage_0900, 0 /* ty=int64 */, meta[relay.Constant][1106] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][913]) /* ty=int64 */;
  %3174 = fn (%p0730: int64, Primitive=1) -> int64 {
    multiply(%p0730, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3175 = (%tensor_0731,);
  %3176 = (%tensor_0732,);
  let %x1125: () = vm.invoke_tvm_op(%3174, %3175, %3176) /* ty=() */;
  let %storage_0901: Storage[] = memory.alloc_storage(%tensor_0732, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][914]) /* ty=Storage[] */;
  let %out_0168: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0901, 0 /* ty=int64 */, %shape_func_out_0174, meta[relay.attrs.AllocTensorAttrs][914]) /* ty=Tensor[(?, ?), float32] */;
  %3177 = (%x1101, %x1123, %x1111, meta[relay.Constant][1104] /* ty=Tensor[(2), int32] */);
  %3178 = (%out_0168,);
  let %x1126: () = vm.invoke_tvm_op(%3168, %3177, %3178) /* ty=() */;
  let %x1127: Tensor[(?, ?), float32] = %out_0168;
  let %storage_0902: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][915]) /* ty=Storage[] */;
  let %tensor_0733: Tensor[(2), int32] = memory.alloc_tensor(%storage_0902, 0 /* ty=int64 */, meta[relay.Constant][1107] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][915]) /* ty=Tensor[(2), int32] */;
  %3181 = fn (%p0731: Tensor[(2), int32], %p1255: Tensor[(2), int32], %p2214: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %3179 = cast_like(%p0731, %p1255) /* ty=Tensor[(2), int32] */;
    %3180 = add(%p1255, %3179) /* ty=Tensor[(2), int32] */;
    where(%p2214, %3180, %p1255) /* ty=Tensor[(2), int32] */
  };
  %3182 = (%x1107, meta[relay.Constant][1108] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1109] /* ty=Tensor[(2), bool] */);
  %3183 = (%tensor_0733,);
  let %x1128: () = vm.invoke_tvm_op(%3181, %3182, %3183) /* ty=() */;
  let %x1129: Tensor[(2), int32] = %tensor_0733;
  let %in_shape_0158: Tensor[(2), int64] = vm.shape_of(%x1101, meta[relay.attrs.ShapeOfAttrs][224]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1101: Tensor[(2), int32] = %x1129;
  let %in_shape_267: Tensor[(2), int64] = %x1111;
  let %storage_0903: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][916]) /* ty=Storage[] */;
  let %tensor_0734: Tensor[(2), int64] = memory.alloc_tensor(%storage_0903, 0 /* ty=int64 */, meta[relay.Constant][1110] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][916]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0175: Tensor[(2), int64] = %tensor_0734;
  %3184 = fn (%p0732: Tensor[(?, 4), float32], %p1256: Tensor[(2), int32], %p2215: Tensor[(2), int64], %p382: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0732, %p1256, %p2215, %p382, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3185 = (%in_shape_0158, %in_shape_1101, %in_shape_267, meta[relay.Constant][1111] /* ty=Tensor[(2), int32] */);
  %3186 = (%shape_func_out_0175,);
  let %shape_func175: () = vm.shape_func(%3184, %3185, %3186, meta[relay.attrs.ShapeFuncAttrs][175]) /* ty=() */;
  let %storage_0904: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][917]) /* ty=Storage[] */;
  let %tensor_0735: int64 = memory.alloc_tensor(%storage_0904, 0 /* ty=int64 */, meta[relay.Constant][1112] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][917]) /* ty=int64 */;
  %3187 = fn (%p0733: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0733) /* ty=int64 */
  };
  %3188 = (%shape_func_out_0175,);
  %3189 = (%tensor_0735,);
  let %x1130: () = vm.invoke_tvm_op(%3187, %3188, %3189) /* ty=() */;
  let %storage_0905: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][918]) /* ty=Storage[] */;
  let %tensor_0736: int64 = memory.alloc_tensor(%storage_0905, 0 /* ty=int64 */, meta[relay.Constant][1113] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][918]) /* ty=int64 */;
  %3190 = fn (%p0734: int64, Primitive=1) -> int64 {
    multiply(%p0734, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3191 = (%tensor_0735,);
  %3192 = (%tensor_0736,);
  let %x1131: () = vm.invoke_tvm_op(%3190, %3191, %3192) /* ty=() */;
  let %storage_0906: Storage[] = memory.alloc_storage(%tensor_0736, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][919]) /* ty=Storage[] */;
  let %out_0169: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0906, 0 /* ty=int64 */, %shape_func_out_0175, meta[relay.attrs.AllocTensorAttrs][919]) /* ty=Tensor[(?, ?), float32] */;
  %3193 = (%x1101, %x1129, %x1111, meta[relay.Constant][1111] /* ty=Tensor[(2), int32] */);
  %3194 = (%out_0169,);
  let %x1132: () = vm.invoke_tvm_op(%3184, %3193, %3194) /* ty=() */;
  let %x1133: Tensor[(?, ?), float32] = %out_0169;
  let %storage_0907: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][920]) /* ty=Storage[] */;
  let %tensor_0737: Tensor[(4), int32] = memory.alloc_tensor(%storage_0907, 0 /* ty=int64 */, meta[relay.Constant][1114] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][920]) /* ty=Tensor[(4), int32] */;
  %3195 = fn (%p0735: Tensor[(?, 1, ?, ?), float32], Primitive=1) -> Tensor[(4), int32] {
    shape_of(%p0735, dtype="int32") /* ty=Tensor[(4), int32] */
  };
  %3196 = (%x1093,);
  %3197 = (%tensor_0737,);
  let %x1134: () = vm.invoke_tvm_op(%3195, %3196, %3197) /* ty=() */;
  let %x1135: Tensor[(4), int32] = %tensor_0737;
  let %storage_0908: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][921]) /* ty=Storage[] */;
  let %tensor_0738: Tensor[(2), int32] = memory.alloc_tensor(%storage_0908, 0 /* ty=int64 */, meta[relay.Constant][1115] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][921]) /* ty=Tensor[(2), int32] */;
  %3200 = fn (%p0736: Tensor[(2), int32], %p1257: Tensor[(2), int32], %p2216: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %3198 = cast_like(%p0736, %p1257) /* ty=Tensor[(2), int32] */;
    %3199 = add(%p1257, %3198) /* ty=Tensor[(2), int32] */;
    where(%p2216, %3199, %p1257) /* ty=Tensor[(2), int32] */
  };
  %3201 = (%x1107, meta[relay.Constant][1116] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1117] /* ty=Tensor[(2), bool] */);
  %3202 = (%tensor_0738,);
  let %x1136: () = vm.invoke_tvm_op(%3200, %3201, %3202) /* ty=() */;
  let %x1137: Tensor[(2), int32] = %tensor_0738;
  let %in_shape_0159: Tensor[(2), int64] = vm.shape_of(%x1101, meta[relay.attrs.ShapeOfAttrs][225]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1102: Tensor[(2), int32] = %x1137;
  let %in_shape_268: Tensor[(2), int64] = %x1111;
  let %storage_0909: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][922]) /* ty=Storage[] */;
  let %tensor_0739: Tensor[(2), int64] = memory.alloc_tensor(%storage_0909, 0 /* ty=int64 */, meta[relay.Constant][1118] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][922]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0176: Tensor[(2), int64] = %tensor_0739;
  %3203 = fn (%p0737: Tensor[(?, 4), float32], %p1258: Tensor[(2), int32], %p2217: Tensor[(2), int64], %p383: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0737, %p1258, %p2217, %p383, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3204 = (%in_shape_0159, %in_shape_1102, %in_shape_268, meta[relay.Constant][1119] /* ty=Tensor[(2), int32] */);
  %3205 = (%shape_func_out_0176,);
  let %shape_func176: () = vm.shape_func(%3203, %3204, %3205, meta[relay.attrs.ShapeFuncAttrs][176]) /* ty=() */;
  let %storage_0910: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][923]) /* ty=Storage[] */;
  let %tensor_0740: int64 = memory.alloc_tensor(%storage_0910, 0 /* ty=int64 */, meta[relay.Constant][1120] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][923]) /* ty=int64 */;
  %3206 = fn (%p0738: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0738) /* ty=int64 */
  };
  %3207 = (%shape_func_out_0176,);
  %3208 = (%tensor_0740,);
  let %x1138: () = vm.invoke_tvm_op(%3206, %3207, %3208) /* ty=() */;
  let %storage_0911: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][924]) /* ty=Storage[] */;
  let %tensor_0741: int64 = memory.alloc_tensor(%storage_0911, 0 /* ty=int64 */, meta[relay.Constant][1121] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][924]) /* ty=int64 */;
  %3209 = fn (%p0739: int64, Primitive=1) -> int64 {
    multiply(%p0739, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3210 = (%tensor_0740,);
  %3211 = (%tensor_0741,);
  let %x1139: () = vm.invoke_tvm_op(%3209, %3210, %3211) /* ty=() */;
  let %storage_0912: Storage[] = memory.alloc_storage(%tensor_0741, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][925]) /* ty=Storage[] */;
  let %out_0170: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0912, 0 /* ty=int64 */, %shape_func_out_0176, meta[relay.attrs.AllocTensorAttrs][925]) /* ty=Tensor[(?, ?), float32] */;
  %3212 = (%x1101, %x1137, %x1111, meta[relay.Constant][1119] /* ty=Tensor[(2), int32] */);
  %3213 = (%out_0170,);
  let %x1140: () = vm.invoke_tvm_op(%3203, %3212, %3213) /* ty=() */;
  let %x1141: Tensor[(?, ?), float32] = %out_0170;
  let %storage_0913: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][926]) /* ty=Storage[] */;
  let %tensor_0742: Tensor[(2), int32] = memory.alloc_tensor(%storage_0913, 0 /* ty=int64 */, meta[relay.Constant][1122] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][926]) /* ty=Tensor[(2), int32] */;
  %3216 = fn (%p0740: Tensor[(2), int32], %p1259: Tensor[(2), int32], %p2218: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %3214 = cast_like(%p0740, %p1259) /* ty=Tensor[(2), int32] */;
    %3215 = add(%p1259, %3214) /* ty=Tensor[(2), int32] */;
    where(%p2218, %3215, %p1259) /* ty=Tensor[(2), int32] */
  };
  %3217 = (%x1107, meta[relay.Constant][1123] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1124] /* ty=Tensor[(2), bool] */);
  %3218 = (%tensor_0742,);
  let %x1142: () = vm.invoke_tvm_op(%3216, %3217, %3218) /* ty=() */;
  let %x1143: Tensor[(2), int32] = %tensor_0742;
  let %in_shape_0160: Tensor[(2), int64] = vm.shape_of(%x1101, meta[relay.attrs.ShapeOfAttrs][226]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1103: Tensor[(2), int32] = %x1143;
  let %in_shape_269: Tensor[(2), int64] = %x1111;
  let %storage_0914: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][927]) /* ty=Storage[] */;
  let %tensor_0743: Tensor[(2), int64] = memory.alloc_tensor(%storage_0914, 0 /* ty=int64 */, meta[relay.Constant][1125] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][927]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0177: Tensor[(2), int64] = %tensor_0743;
  %3219 = fn (%p0741: Tensor[(?, 4), float32], %p1260: Tensor[(2), int32], %p2219: Tensor[(2), int64], %p384: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0741, %p1260, %p2219, %p384, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3220 = (%in_shape_0160, %in_shape_1103, %in_shape_269, meta[relay.Constant][1126] /* ty=Tensor[(2), int32] */);
  %3221 = (%shape_func_out_0177,);
  let %shape_func177: () = vm.shape_func(%3219, %3220, %3221, meta[relay.attrs.ShapeFuncAttrs][177]) /* ty=() */;
  let %storage_0915: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][928]) /* ty=Storage[] */;
  let %tensor_0744: int64 = memory.alloc_tensor(%storage_0915, 0 /* ty=int64 */, meta[relay.Constant][1127] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][928]) /* ty=int64 */;
  %3222 = fn (%p0742: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0742) /* ty=int64 */
  };
  %3223 = (%shape_func_out_0177,);
  %3224 = (%tensor_0744,);
  let %x1144: () = vm.invoke_tvm_op(%3222, %3223, %3224) /* ty=() */;
  let %storage_0916: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][929]) /* ty=Storage[] */;
  let %tensor_0745: int64 = memory.alloc_tensor(%storage_0916, 0 /* ty=int64 */, meta[relay.Constant][1128] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][929]) /* ty=int64 */;
  %3225 = fn (%p0743: int64, Primitive=1) -> int64 {
    multiply(%p0743, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3226 = (%tensor_0744,);
  %3227 = (%tensor_0745,);
  let %x1145: () = vm.invoke_tvm_op(%3225, %3226, %3227) /* ty=() */;
  let %storage_0917: Storage[] = memory.alloc_storage(%tensor_0745, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][930]) /* ty=Storage[] */;
  let %out_0171: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0917, 0 /* ty=int64 */, %shape_func_out_0177, meta[relay.attrs.AllocTensorAttrs][930]) /* ty=Tensor[(?, ?), float32] */;
  %3228 = (%x1101, %x1143, %x1111, meta[relay.Constant][1126] /* ty=Tensor[(2), int32] */);
  %3229 = (%out_0171,);
  let %x1146: () = vm.invoke_tvm_op(%3219, %3228, %3229) /* ty=() */;
  let %x1147: Tensor[(?, ?), float32] = %out_0171;
  let %storage_0918: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][931]) /* ty=Storage[] */;
  let %tensor_0746: Tensor[(2), int32] = memory.alloc_tensor(%storage_0918, 0 /* ty=int64 */, meta[relay.Constant][1129] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][931]) /* ty=Tensor[(2), int32] */;
  %3232 = fn (%p0744: Tensor[(2), int32], %p1261: Tensor[(2), int32], %p2220: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %3230 = cast_like(%p0744, %p1261) /* ty=Tensor[(2), int32] */;
    %3231 = add(%p1261, %3230) /* ty=Tensor[(2), int32] */;
    where(%p2220, %3231, %p1261) /* ty=Tensor[(2), int32] */
  };
  %3233 = (%x1107, meta[relay.Constant][1130] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1131] /* ty=Tensor[(2), bool] */);
  %3234 = (%tensor_0746,);
  let %x1148: () = vm.invoke_tvm_op(%3232, %3233, %3234) /* ty=() */;
  let %x1149: Tensor[(2), int32] = %tensor_0746;
  let %in_shape_0161: Tensor[(2), int64] = vm.shape_of(%x1101, meta[relay.attrs.ShapeOfAttrs][227]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1104: Tensor[(2), int32] = %x1149;
  let %in_shape_270: Tensor[(2), int64] = %x1111;
  let %storage_0919: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][932]) /* ty=Storage[] */;
  let %tensor_0747: Tensor[(2), int64] = memory.alloc_tensor(%storage_0919, 0 /* ty=int64 */, meta[relay.Constant][1132] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][932]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0178: Tensor[(2), int64] = %tensor_0747;
  %3235 = fn (%p0745: Tensor[(?, 4), float32], %p1262: Tensor[(2), int32], %p2221: Tensor[(2), int64], %p385: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0745, %p1262, %p2221, %p385, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3236 = (%in_shape_0161, %in_shape_1104, %in_shape_270, meta[relay.Constant][1133] /* ty=Tensor[(2), int32] */);
  %3237 = (%shape_func_out_0178,);
  let %shape_func178: () = vm.shape_func(%3235, %3236, %3237, meta[relay.attrs.ShapeFuncAttrs][178]) /* ty=() */;
  let %storage_0920: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][933]) /* ty=Storage[] */;
  let %tensor_0748: int64 = memory.alloc_tensor(%storage_0920, 0 /* ty=int64 */, meta[relay.Constant][1134] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][933]) /* ty=int64 */;
  %3238 = fn (%p0746: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0746) /* ty=int64 */
  };
  %3239 = (%shape_func_out_0178,);
  %3240 = (%tensor_0748,);
  let %x1150: () = vm.invoke_tvm_op(%3238, %3239, %3240) /* ty=() */;
  let %storage_0921: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][934]) /* ty=Storage[] */;
  let %tensor_0749: int64 = memory.alloc_tensor(%storage_0921, 0 /* ty=int64 */, meta[relay.Constant][1135] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][934]) /* ty=int64 */;
  %3241 = fn (%p0747: int64, Primitive=1) -> int64 {
    multiply(%p0747, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3242 = (%tensor_0748,);
  %3243 = (%tensor_0749,);
  let %x1151: () = vm.invoke_tvm_op(%3241, %3242, %3243) /* ty=() */;
  let %storage_0922: Storage[] = memory.alloc_storage(%tensor_0749, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][935]) /* ty=Storage[] */;
  let %out_0172: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0922, 0 /* ty=int64 */, %shape_func_out_0178, meta[relay.attrs.AllocTensorAttrs][935]) /* ty=Tensor[(?, ?), float32] */;
  %3244 = (%x1101, %x1149, %x1111, meta[relay.Constant][1133] /* ty=Tensor[(2), int32] */);
  %3245 = (%out_0172,);
  let %x1152: () = vm.invoke_tvm_op(%3235, %3244, %3245) /* ty=() */;
  let %x1153: Tensor[(?, ?), float32] = %out_0172;
  let %storage_0923: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][936]) /* ty=Storage[] */;
  let %tensor_0750: Tensor[(2), int32] = memory.alloc_tensor(%storage_0923, 0 /* ty=int64 */, meta[relay.Constant][1136] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][936]) /* ty=Tensor[(2), int32] */;
  %3248 = fn (%p0748: Tensor[(2), int32], %p1263: Tensor[(2), int32], %p2222: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
    %3246 = cast_like(%p0748, %p1263) /* ty=Tensor[(2), int32] */;
    %3247 = add(%p1263, %3246) /* ty=Tensor[(2), int32] */;
    where(%p2222, %3247, %p1263) /* ty=Tensor[(2), int32] */
  };
  %3249 = (%x1107, meta[relay.Constant][1137] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1138] /* ty=Tensor[(2), bool] */);
  %3250 = (%tensor_0750,);
  let %x1154: () = vm.invoke_tvm_op(%3248, %3249, %3250) /* ty=() */;
  let %x1155: Tensor[(2), int32] = %tensor_0750;
  let %in_shape_0162: Tensor[(2), int64] = vm.shape_of(%x1101, meta[relay.attrs.ShapeOfAttrs][228]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1105: Tensor[(2), int32] = %x1155;
  let %in_shape_271: Tensor[(2), int64] = %x1111;
  let %storage_0924: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][937]) /* ty=Storage[] */;
  let %tensor_0751: Tensor[(2), int64] = memory.alloc_tensor(%storage_0924, 0 /* ty=int64 */, meta[relay.Constant][1139] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][937]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0179: Tensor[(2), int64] = %tensor_0751;
  %3251 = fn (%p0749: Tensor[(?, 4), float32], %p1264: Tensor[(2), int32], %p2223: Tensor[(2), int64], %p386: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0749, %p1264, %p2223, %p386, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3252 = (%in_shape_0162, %in_shape_1105, %in_shape_271, meta[relay.Constant][1140] /* ty=Tensor[(2), int32] */);
  %3253 = (%shape_func_out_0179,);
  let %shape_func179: () = vm.shape_func(%3251, %3252, %3253, meta[relay.attrs.ShapeFuncAttrs][179]) /* ty=() */;
  let %storage_0925: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][938]) /* ty=Storage[] */;
  let %tensor_0752: int64 = memory.alloc_tensor(%storage_0925, 0 /* ty=int64 */, meta[relay.Constant][1141] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][938]) /* ty=int64 */;
  %3254 = fn (%p0750: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0750) /* ty=int64 */
  };
  %3255 = (%shape_func_out_0179,);
  %3256 = (%tensor_0752,);
  let %x1156: () = vm.invoke_tvm_op(%3254, %3255, %3256) /* ty=() */;
  let %storage_0926: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][939]) /* ty=Storage[] */;
  let %tensor_0753: int64 = memory.alloc_tensor(%storage_0926, 0 /* ty=int64 */, meta[relay.Constant][1142] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][939]) /* ty=int64 */;
  %3257 = fn (%p0751: int64, Primitive=1) -> int64 {
    multiply(%p0751, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3258 = (%tensor_0752,);
  %3259 = (%tensor_0753,);
  let %x1157: () = vm.invoke_tvm_op(%3257, %3258, %3259) /* ty=() */;
  let %storage_0927: Storage[] = memory.alloc_storage(%tensor_0753, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][940]) /* ty=Storage[] */;
  let %out_0173: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0927, 0 /* ty=int64 */, %shape_func_out_0179, meta[relay.attrs.AllocTensorAttrs][940]) /* ty=Tensor[(?, ?), float32] */;
  %3260 = (%x1101, %x1155, %x1111, meta[relay.Constant][1140] /* ty=Tensor[(2), int32] */);
  %3261 = (%out_0173,);
  let %x1158: () = vm.invoke_tvm_op(%3251, %3260, %3261) /* ty=() */;
  let %x1159: Tensor[(?, ?), float32] = %out_0173;
  let %in_shape_0163: Tensor[(2), int64] = vm.shape_of(%x1115, meta[relay.attrs.ShapeOfAttrs][229]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1106: Tensor[(2), int64] = vm.shape_of(%x1121, meta[relay.attrs.ShapeOfAttrs][230]) /* ty=Tensor[(2), int64] */;
  let %in_shape_272: Tensor[(2), int64] = vm.shape_of(%x1127, meta[relay.attrs.ShapeOfAttrs][231]) /* ty=Tensor[(2), int64] */;
  let %in_shape_37: Tensor[(2), int64] = vm.shape_of(%x1133, meta[relay.attrs.ShapeOfAttrs][232]) /* ty=Tensor[(2), int64] */;
  let %in_shape_52: Tensor[(2), int64] = vm.shape_of(%x1141, meta[relay.attrs.ShapeOfAttrs][233]) /* ty=Tensor[(2), int64] */;
  let %in_shape_62: Tensor[(2), int64] = vm.shape_of(%x1147, meta[relay.attrs.ShapeOfAttrs][234]) /* ty=Tensor[(2), int64] */;
  let %in_shape_71: Tensor[(2), int64] = vm.shape_of(%x1153, meta[relay.attrs.ShapeOfAttrs][235]) /* ty=Tensor[(2), int64] */;
  let %in_shape_81: Tensor[(2), int64] = vm.shape_of(%x1159, meta[relay.attrs.ShapeOfAttrs][236]) /* ty=Tensor[(2), int64] */;
  let %storage_0928: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][941]) /* ty=Storage[] */;
  let %tensor_0754: Tensor[(2), int64] = memory.alloc_tensor(%storage_0928, 0 /* ty=int64 */, meta[relay.Constant][1143] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][941]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0180: Tensor[(2), int64] = %tensor_0754;
  %3293 = fn (%p0752: Tensor[(?, ?), float32], %p1265: Tensor[(?, ?), float32], %p2224: Tensor[(?, ?), float32], %p387: Tensor[(?, ?), float32], %p47: Tensor[(4), int32], %p54: Tensor[(?, ?), float32], %p64: Tensor[(?, ?), float32], %p73: Tensor[(?, ?), float32], %p83: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 4), int64] {
    %3262 = take(%p0752, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %3263 = take(%p1265, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %3264 = add(%3262, %3263) /* ty=Tensor[(?), float32] */;
    %3265 = multiply(%3264, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %3266 = take(%p2224, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %3267 = take(%p387, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %3268 = subtract(%3266, %3267) /* ty=Tensor[(?), float32] */;
    %3269 = multiply(%3268, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %3270 = take(%p47, 3 /* ty=int32 */, axis=0) /* ty=int32 */;
    %3271 = add(%3270, 2 /* ty=int32 */) /* ty=int32 */;
    %3272 = cast(%3271, dtype="int64") /* ty=int64 */;
    %3273 = cast(%3272, dtype="float32") /* ty=float32 */;
    %3274 = cast(%3270, dtype="int64") /* ty=int64 */;
    %3275 = cast(%3274, dtype="float32") /* ty=float32 */;
    %3276 = divide(%3273, %3275) /* ty=float32 */;
    %3277 = multiply(%3269, %3276) /* ty=Tensor[(?), float32] */;
    %3278 = subtract(%3265, %3277) /* ty=Tensor[(?), float32] */;
    %3279 = take(%p54, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %3280 = take(%p64, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %3281 = add(%3279, %3280) /* ty=Tensor[(?), float32] */;
    %3282 = multiply(%3281, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %3283 = take(%p73, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %3284 = take(%p83, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
    %3285 = subtract(%3283, %3284) /* ty=Tensor[(?), float32] */;
    %3286 = multiply(%3285, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %3287 = multiply(%3286, %3276) /* ty=Tensor[(?), float32] */;
    %3288 = subtract(%3282, %3287) /* ty=Tensor[(?), float32] */;
    %3289 = add(%3265, %3277) /* ty=Tensor[(?), float32] */;
    %3290 = add(%3282, %3287) /* ty=Tensor[(?), float32] */;
    %3291 = (%3278, %3288, %3289, %3290);
    %3292 = stack(%3291, axis=1) /* ty=Tensor[(?, 4), float32] */;
    cast(%3292, dtype="int64") /* ty=Tensor[(?, 4), int64] */
  };
  %3294 = (%in_shape_0163, %in_shape_1106, %in_shape_272, %in_shape_37, meta[relay.Constant][1144] /* ty=Tensor[(1), int64] */, %in_shape_52, %in_shape_62, %in_shape_71, %in_shape_81);
  %3295 = (%shape_func_out_0180,);
  let %shape_func180: () = vm.shape_func(%3293, %3294, %3295, meta[relay.attrs.ShapeFuncAttrs][180]) /* ty=() */;
  let %storage_0929: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][942]) /* ty=Storage[] */;
  let %tensor_0755: int64 = memory.alloc_tensor(%storage_0929, 0 /* ty=int64 */, meta[relay.Constant][1145] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][942]) /* ty=int64 */;
  %3296 = fn (%p0753: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0753) /* ty=int64 */
  };
  %3297 = (%shape_func_out_0180,);
  %3298 = (%tensor_0755,);
  let %x1160: () = vm.invoke_tvm_op(%3296, %3297, %3298) /* ty=() */;
  let %storage_0930: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][943]) /* ty=Storage[] */;
  let %tensor_0756: int64 = memory.alloc_tensor(%storage_0930, 0 /* ty=int64 */, meta[relay.Constant][1146] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][943]) /* ty=int64 */;
  %3299 = fn (%p0754: int64, Primitive=1) -> int64 {
    multiply(%p0754, 8 /* ty=int64 */) /* ty=int64 */
  };
  %3300 = (%tensor_0755,);
  %3301 = (%tensor_0756,);
  let %x1161: () = vm.invoke_tvm_op(%3299, %3300, %3301) /* ty=() */;
  let %storage_0931: Storage[] = memory.alloc_storage(%tensor_0756, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][944]) /* ty=Storage[] */;
  let %out_0174: Tensor[(?, 4), int64] = memory.alloc_tensor(%storage_0931, 0 /* ty=int64 */, %shape_func_out_0180, meta[relay.attrs.AllocTensorAttrs][944]) /* ty=Tensor[(?, 4), int64] */;
  %3302 = (%x1115, %x1121, %x1127, %x1133, %x1135, %x1141, %x1147, %x1153, %x1159);
  %3303 = (%out_0174,);
  let %x1162: () = vm.invoke_tvm_op(%3293, %3302, %3303) /* ty=() */;
  let %x1163: Tensor[(?, 4), int64] = %out_0174;
  let %x1164: fn (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %while_loop: fn (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = @lifted_name6846283260542760146(%x1097, meta[relay.Constant][396] /* ty=Tensor[(1), int32] */) /* ty=fn (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) */;
  %while_loop;
  let %x1165: (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = %x1164(0 /* ty=int32 */, meta[relay.Constant][1147] /* ty=Tensor[(0, 300, 300), float32] */, %x1097, %x1163) /* ty=(int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) */;
  let %x1166: Tensor[(?, ?, ?), float32] = %x1165.1;
  let %storage_0932: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][945]) /* ty=Storage[] */;
  let %tensor_0757: Tensor[(3), int32] = memory.alloc_tensor(%storage_0932, 0 /* ty=int64 */, meta[relay.Constant][1148] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][945]) /* ty=Tensor[(3), int32] */;
  %3304 = fn (%p0755: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(3), int32] {
    shape_of(%p0755, dtype="int32") /* ty=Tensor[(3), int32] */
  };
  %3305 = (%x1166,);
  %3306 = (%tensor_0757,);
  let %x1167: () = vm.invoke_tvm_op(%3304, %3305, %3306) /* ty=() */;
  let %x1168: Tensor[(3), int32] = %tensor_0757;
  let %storage_0933: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][946]) /* ty=Storage[] */;
  let %tensor_0758: Tensor[(3), int32] = memory.alloc_tensor(%storage_0933, 0 /* ty=int64 */, meta[relay.Constant][1149] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][946]) /* ty=Tensor[(3), int32] */;
  %3309 = fn (%p0756: Tensor[(3), int32], %p1266: Tensor[(3), int32], %p2225: Tensor[(3), bool], Primitive=1) -> Tensor[(3), int32] {
    %3307 = cast_like(%p0756, %p1266) /* ty=Tensor[(3), int32] */;
    %3308 = add(%p1266, %3307) /* ty=Tensor[(3), int32] */;
    where(%p2225, %3308, %p1266) /* ty=Tensor[(3), int32] */
  };
  %3310 = (%x1168, meta[relay.Constant][1150] /* ty=Tensor[(3), int32] */, meta[relay.Constant][1151] /* ty=Tensor[(3), bool] */);
  %3311 = (%tensor_0758,);
  let %x1169: () = vm.invoke_tvm_op(%3309, %3310, %3311) /* ty=() */;
  let %x1170: Tensor[(3), int32] = %tensor_0758;
  let %storage_0934: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][947]) /* ty=Storage[] */;
  let %tensor_0759: Tensor[(3), int64] = memory.alloc_tensor(%storage_0934, 0 /* ty=int64 */, meta[relay.Constant][1152] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][947]) /* ty=Tensor[(3), int64] */;
  %3312 = fn (%p0757: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    cast(%p0757, dtype="int64") /* ty=Tensor[(3), int64] */
  };
  %3313 = (%x1168,);
  %3314 = (%tensor_0759,);
  let %x1171: () = vm.invoke_tvm_op(%3312, %3313, %3314) /* ty=() */;
  let %x1172: Tensor[(3), int64] = %tensor_0759;
  let %in_shape_0164: Tensor[(3), int64] = vm.shape_of(%x1166, meta[relay.attrs.ShapeOfAttrs][237]) /* ty=Tensor[(3), int64] */;
  let %in_shape_1107: Tensor[(3), int32] = %x1170;
  let %in_shape_273: Tensor[(3), int64] = %x1172;
  let %storage_0935: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][948]) /* ty=Storage[] */;
  let %tensor_0760: Tensor[(3), int64] = memory.alloc_tensor(%storage_0935, 0 /* ty=int64 */, meta[relay.Constant][1153] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][948]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0181: Tensor[(3), int64] = %tensor_0760;
  %3315 = fn (%p0758: Tensor[(?, ?, ?), float32], %p1267: Tensor[(3), int32], %p2226: Tensor[(3), int64], %p388: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0758, %p1267, %p2226, %p388, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %3316 = (%in_shape_0164, %in_shape_1107, %in_shape_273, meta[relay.Constant][1154] /* ty=Tensor[(3), int32] */);
  %3317 = (%shape_func_out_0181,);
  let %shape_func181: () = vm.shape_func(%3315, %3316, %3317, meta[relay.attrs.ShapeFuncAttrs][181]) /* ty=() */;
  let %storage_0936: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][949]) /* ty=Storage[] */;
  let %tensor_0761: int64 = memory.alloc_tensor(%storage_0936, 0 /* ty=int64 */, meta[relay.Constant][1155] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][949]) /* ty=int64 */;
  %3318 = fn (%p0759: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0759) /* ty=int64 */
  };
  %3319 = (%shape_func_out_0181,);
  %3320 = (%tensor_0761,);
  let %x1173: () = vm.invoke_tvm_op(%3318, %3319, %3320) /* ty=() */;
  let %storage_0937: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][950]) /* ty=Storage[] */;
  let %tensor_0762: int64 = memory.alloc_tensor(%storage_0937, 0 /* ty=int64 */, meta[relay.Constant][1156] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][950]) /* ty=int64 */;
  %3321 = fn (%p0760: int64, Primitive=1) -> int64 {
    multiply(%p0760, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3322 = (%tensor_0761,);
  %3323 = (%tensor_0762,);
  let %x1174: () = vm.invoke_tvm_op(%3321, %3322, %3323) /* ty=() */;
  let %storage_0938: Storage[] = memory.alloc_storage(%tensor_0762, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][951]) /* ty=Storage[] */;
  let %out_0175: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_0938, 0 /* ty=int64 */, %shape_func_out_0181, meta[relay.attrs.AllocTensorAttrs][951]) /* ty=Tensor[(?, ?, ?), float32] */;
  %3324 = (%x1166, %x1170, %x1172, meta[relay.Constant][1154] /* ty=Tensor[(3), int32] */);
  %3325 = (%out_0175,);
  let %x1175: () = vm.invoke_tvm_op(%3315, %3324, %3325) /* ty=() */;
  let %x1176: Tensor[(?, ?, ?), float32] = %out_0175;
  let %in_shape_0165: Tensor[(3), int64] = vm.shape_of(%x1176, meta[relay.attrs.ShapeOfAttrs][238]) /* ty=Tensor[(3), int64] */;
  let %storage_0939: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][952]) /* ty=Storage[] */;
  let %tensor_0763: Tensor[(4), int64] = memory.alloc_tensor(%storage_0939, 0 /* ty=int64 */, meta[relay.Constant][1157] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][952]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0182: Tensor[(4), int64] = %tensor_0763;
  %3326 = fn (%p0761: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(?, 1, ?, ?), float32] {
    expand_dims(%p0761, axis=1) /* ty=Tensor[(?, 1, ?, ?), float32] */
  };
  %3327 = (%in_shape_0165,);
  %3328 = (%shape_func_out_0182,);
  let %shape_func182: () = vm.shape_func(%3326, %3327, %3328, meta[relay.attrs.ShapeFuncAttrs][182]) /* ty=() */;
  let %storage_0940: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][953]) /* ty=Storage[] */;
  let %tensor_0764: int64 = memory.alloc_tensor(%storage_0940, 0 /* ty=int64 */, meta[relay.Constant][1158] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][953]) /* ty=int64 */;
  %3329 = fn (%p0762: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0762) /* ty=int64 */
  };
  %3330 = (%shape_func_out_0182,);
  %3331 = (%tensor_0764,);
  let %x1177: () = vm.invoke_tvm_op(%3329, %3330, %3331) /* ty=() */;
  let %storage_0941: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][954]) /* ty=Storage[] */;
  let %tensor_0765: int64 = memory.alloc_tensor(%storage_0941, 0 /* ty=int64 */, meta[relay.Constant][1159] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][954]) /* ty=int64 */;
  %3332 = fn (%p0763: int64, Primitive=1) -> int64 {
    multiply(%p0763, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3333 = (%tensor_0764,);
  %3334 = (%tensor_0765,);
  let %x1178: () = vm.invoke_tvm_op(%3332, %3333, %3334) /* ty=() */;
  let %storage_0942: Storage[] = memory.alloc_storage(%tensor_0765, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][955]) /* ty=Storage[] */;
  let %out_0176: Tensor[(?, 1, ?, ?), float32] = memory.alloc_tensor(%storage_0942, 0 /* ty=int64 */, %shape_func_out_0182, meta[relay.attrs.AllocTensorAttrs][955]) /* ty=Tensor[(?, 1, ?, ?), float32] */;
  %3335 = (%x1176,);
  %3336 = (%out_0176,);
  let %x1179: () = vm.invoke_tvm_op(%3326, %3335, %3336) /* ty=() */;
  let %x1180: Tensor[(?, 1, ?, ?), float32] = %out_0176;
  let %x1181: (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) = (%x1101, %x1105, %x1063, %x1180);
  %x1181;
  %x787;
  %x782;
  %x
}

def @lifted_name6846283260542760146(%x1182: Tensor[(?, 1, ?, ?), float32], %x1183: Tensor[(1), int32], Closure=1) -> fn (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) {
  fn (%i.1: int32, %res_append.6: Tensor[(?, ?, ?), float32], %v7286: Tensor[(?, 1, ?, ?), float32], %v7394: Tensor[(?, 4), int64]) -> (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) {
    let %storage_0943: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][956]) /* ty=Storage[] */;
    let %tensor_0766: Tensor[(4), int32] = memory.alloc_tensor(%storage_0943, 0 /* ty=int64 */, meta[relay.Constant][1160] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][956]) /* ty=Tensor[(4), int32] */;
    %3337 = fn (%p0764: Tensor[(?, 1, ?, ?), float32], Primitive=1) -> Tensor[(4), int32] {
      shape_of(%p0764, dtype="int32") /* ty=Tensor[(4), int32] */
    };
    %3338 = (%x1182,);
    %3339 = (%tensor_0766,);
    let %x1184: () = vm.invoke_tvm_op(%3337, %3338, %3339) /* ty=() */;
    let %x1185: Tensor[(4), int32] = %tensor_0766;
    let %storage_0944: Storage[] = memory.alloc_storage(1 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][957]) /* ty=Storage[] */;
    let %tensor_0767: bool = memory.alloc_tensor(%storage_0944, 0 /* ty=int64 */, meta[relay.Constant][1161] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][957]) /* ty=bool */;
    %3341 = fn (%p0765: Tensor[(4), int32], %p1268: int32, Primitive=1) -> bool {
      %3340 = take(%p0765, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
      less(%p1268, %3340) /* ty=bool */
    };
    %3342 = (%x1185, %i.1);
    %3343 = (%tensor_0767,);
    let %x1186: () = vm.invoke_tvm_op(%3341, %3342, %3343) /* ty=() */;
    let %x1187: bool = %tensor_0767;
    let %x1188: (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = if (%x1187) {
      let %storage_0945: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][958]) /* ty=Storage[] */;
      let %tensor_0768: int32 = memory.alloc_tensor(%storage_0945, 0 /* ty=int64 */, meta[relay.Constant][1162] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][958]) /* ty=int32 */;
      %3344 = fn (%p0766: int32, Primitive=1) -> int32 {
        add(%p0766, 1 /* ty=int32 */) /* ty=int32 */
      };
      %3345 = (%i.1,);
      %3346 = (%tensor_0768,);
      let %x1189: () = vm.invoke_tvm_op(%3344, %3345, %3346) /* ty=() */;
      let %x1190: int32 = %tensor_0768;
      let %storage_0946: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][959]) /* ty=Storage[] */;
      let %tensor_0769: Tensor[(4), int64] = memory.alloc_tensor(%storage_0946, 0 /* ty=int64 */, meta[relay.Constant][1163] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][959]) /* ty=Tensor[(4), int64] */;
      %3347 = fn (%p0767: Tensor[(?, 4), int64], %p1269: int32, Primitive=1) -> Tensor[(4), int64] {
        take(%p0767, %p1269, axis=0, mode="wrap") /* ty=Tensor[(4), int64] */
      };
      %3348 = (%v7394, %i.1);
      %3349 = (%tensor_0769,);
      let %x1191: () = vm.invoke_tvm_op(%3347, %3348, %3349) /* ty=() */;
      let %x1192: Tensor[(4), int64] = %tensor_0769;
      let %storage_0947: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][960]) /* ty=Storage[] */;
      let %tensor_0770: int64 = memory.alloc_tensor(%storage_0947, 0 /* ty=int64 */, meta[relay.Constant][1164] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][960]) /* ty=int64 */;
      %3350 = fn (%p0768: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p0768, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */
      };
      %3351 = (%x1192,);
      %3352 = (%tensor_0770,);
      let %x1193: () = vm.invoke_tvm_op(%3350, %3351, %3352) /* ty=() */;
      let %x1194: int64 = %tensor_0770;
      let %storage_0948: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][961]) /* ty=Storage[] */;
      let %tensor_0771: Tensor[(2), int64] = memory.alloc_tensor(%storage_0948, 0 /* ty=int64 */, meta[relay.Constant][1165] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][961]) /* ty=Tensor[(2), int64] */;
      %3355 = fn (%p0769: int64, %p1270: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %3353 = expand_dims(%p0769, axis=0) /* ty=Tensor[(1), int64] */;
        %3354 = (%3353, %p1270);
        concatenate(%3354) /* ty=Tensor[(2), int64] */
      };
      %3356 = (%x1194, meta[relay.Constant][1166] /* ty=Tensor[(1), int64] */);
      %3357 = (%tensor_0771,);
      let %x1195: () = vm.invoke_tvm_op(%3355, %3356, %3357) /* ty=() */;
      let %x1196: Tensor[(2), int64] = %tensor_0771;
      let %storage_0949: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][962]) /* ty=Storage[] */;
      let %tensor_0772: int64 = memory.alloc_tensor(%storage_0949, 0 /* ty=int64 */, meta[relay.Constant][1167] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][962]) /* ty=int64 */;
      %3358 = fn (%p0770: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p0770) /* ty=int64 */
      };
      %3359 = (%x1196,);
      %3360 = (%tensor_0772,);
      let %x1197: () = vm.invoke_tvm_op(%3358, %3359, %3360) /* ty=() */;
      let %x1198: int64 = %tensor_0772;
      let %storage_0950: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][963]) /* ty=Storage[] */;
      let %tensor_0773: int64 = memory.alloc_tensor(%storage_0950, 0 /* ty=int64 */, meta[relay.Constant][1168] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][963]) /* ty=int64 */;
      %3361 = fn (%p0771: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p0771, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */
      };
      %3362 = (%x1192,);
      %3363 = (%tensor_0773,);
      let %x1199: () = vm.invoke_tvm_op(%3361, %3362, %3363) /* ty=() */;
      let %x1200: int64 = %tensor_0773;
      let %storage_0951: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][964]) /* ty=Storage[] */;
      let %tensor_0774: Tensor[(2), int64] = memory.alloc_tensor(%storage_0951, 0 /* ty=int64 */, meta[relay.Constant][1169] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][964]) /* ty=Tensor[(2), int64] */;
      %3366 = fn (%p0772: int64, %p1271: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %3364 = expand_dims(%p0772, axis=0) /* ty=Tensor[(1), int64] */;
        %3365 = (%3364, %p1271);
        concatenate(%3365) /* ty=Tensor[(2), int64] */
      };
      %3367 = (%x1200, meta[relay.Constant][1166] /* ty=Tensor[(1), int64] */);
      %3368 = (%tensor_0774,);
      let %x1201: () = vm.invoke_tvm_op(%3366, %3367, %3368) /* ty=() */;
      let %x1202: Tensor[(2), int64] = %tensor_0774;
      let %storage_0952: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][965]) /* ty=Storage[] */;
      let %tensor_0775: int64 = memory.alloc_tensor(%storage_0952, 0 /* ty=int64 */, meta[relay.Constant][1170] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][965]) /* ty=int64 */;
      %3369 = fn (%p0773: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p0773) /* ty=int64 */
      };
      %3370 = (%x1202,);
      %3371 = (%tensor_0775,);
      let %x1203: () = vm.invoke_tvm_op(%3369, %3370, %3371) /* ty=() */;
      let %x1204: int64 = %tensor_0775;
      let %in_shape_0166: Tensor[(4), int64] = vm.shape_of(%v7286, meta[relay.attrs.ShapeOfAttrs][239]) /* ty=Tensor[(4), int64] */;
      let %storage_0953: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][966]) /* ty=Storage[] */;
      let %tensor_0776: Tensor[(3), int64] = memory.alloc_tensor(%storage_0953, 0 /* ty=int64 */, meta[relay.Constant][1171] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][966]) /* ty=Tensor[(3), int64] */;
      let %shape_func_out_0183: Tensor[(3), int64] = %tensor_0776;
      %3372 = fn (%p0774: Tensor[(?, 1, ?, ?), float32], %p1272: int32, Primitive=1) -> Tensor[(1, ?, ?), float32] {
        take(%p0774, %p1272, axis=0, mode="wrap") /* ty=Tensor[(1, ?, ?), float32] */
      };
      %3373 = (%in_shape_0166, 1334353056 /* ty=int64 */);
      %3374 = (%shape_func_out_0183,);
      let %shape_func183: () = vm.shape_func(%3372, %3373, %3374, meta[relay.attrs.ShapeFuncAttrs][183]) /* ty=() */;
      let %storage_0954: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][967]) /* ty=Storage[] */;
      let %tensor_0777: int64 = memory.alloc_tensor(%storage_0954, 0 /* ty=int64 */, meta[relay.Constant][1172] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][967]) /* ty=int64 */;
      %3375 = fn (%p0775: Tensor[(3), int64], Primitive=1) -> int64 {
        prod(%p0775) /* ty=int64 */
      };
      %3376 = (%shape_func_out_0183,);
      %3377 = (%tensor_0777,);
      let %x1205: () = vm.invoke_tvm_op(%3375, %3376, %3377) /* ty=() */;
      let %storage_0955: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][968]) /* ty=Storage[] */;
      let %tensor_0778: int64 = memory.alloc_tensor(%storage_0955, 0 /* ty=int64 */, meta[relay.Constant][1173] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][968]) /* ty=int64 */;
      %3378 = fn (%p0776: int64, Primitive=1) -> int64 {
        multiply(%p0776, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3379 = (%tensor_0777,);
      %3380 = (%tensor_0778,);
      let %x1206: () = vm.invoke_tvm_op(%3378, %3379, %3380) /* ty=() */;
      let %storage_0956: Storage[] = memory.alloc_storage(%tensor_0778, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][969]) /* ty=Storage[] */;
      let %out_0177: Tensor[(1, ?, ?), float32] = memory.alloc_tensor(%storage_0956, 0 /* ty=int64 */, %shape_func_out_0183, meta[relay.attrs.AllocTensorAttrs][969]) /* ty=Tensor[(1, ?, ?), float32] */;
      %3381 = (%v7286, %i.1);
      %3382 = (%out_0177,);
      let %x1207: () = vm.invoke_tvm_op(%3372, %3381, %3382) /* ty=() */;
      let %x1208: Tensor[(1, ?, ?), float32] = %out_0177;
      let %in_shape_0167: Tensor[(3), int64] = vm.shape_of(%x1208, meta[relay.attrs.ShapeOfAttrs][240]) /* ty=Tensor[(3), int64] */;
      let %storage_0957: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][970]) /* ty=Storage[] */;
      let %tensor_0779: Tensor[(4), int64] = memory.alloc_tensor(%storage_0957, 0 /* ty=int64 */, meta[relay.Constant][1174] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][970]) /* ty=Tensor[(4), int64] */;
      let %shape_func_out_0184: Tensor[(4), int64] = %tensor_0779;
      %3386 = fn (%p0777: Tensor[(1, ?, ?), float32], Primitive=1) -> Tensor[(1, 1, ?, ?), float32] {
        %3383 = take(%p0777, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(?, ?), float32] */;
        %3384 = expand_dims(%3383, axis=0, num_newaxis=2) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        %3385 = repeat(%3384, repeats=1, axis=0) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        repeat(%3385, repeats=1, axis=1) /* ty=Tensor[(1, 1, ?, ?), float32] */
      };
      %3387 = (%in_shape_0167,);
      %3388 = (%shape_func_out_0184,);
      let %shape_func184: () = vm.shape_func(%3386, %3387, %3388, meta[relay.attrs.ShapeFuncAttrs][184]) /* ty=() */;
      let %storage_0958: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][971]) /* ty=Storage[] */;
      let %tensor_0780: int64 = memory.alloc_tensor(%storage_0958, 0 /* ty=int64 */, meta[relay.Constant][1175] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][971]) /* ty=int64 */;
      %3389 = fn (%p0778: Tensor[(4), int64], Primitive=1) -> int64 {
        prod(%p0778) /* ty=int64 */
      };
      %3390 = (%shape_func_out_0184,);
      %3391 = (%tensor_0780,);
      let %x1209: () = vm.invoke_tvm_op(%3389, %3390, %3391) /* ty=() */;
      let %storage_0959: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][972]) /* ty=Storage[] */;
      let %tensor_0781: int64 = memory.alloc_tensor(%storage_0959, 0 /* ty=int64 */, meta[relay.Constant][1176] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][972]) /* ty=int64 */;
      %3392 = fn (%p0779: int64, Primitive=1) -> int64 {
        multiply(%p0779, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3393 = (%tensor_0780,);
      %3394 = (%tensor_0781,);
      let %x1210: () = vm.invoke_tvm_op(%3392, %3393, %3394) /* ty=() */;
      let %storage_0960: Storage[] = memory.alloc_storage(%tensor_0781, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][973]) /* ty=Storage[] */;
      let %out_0178: Tensor[(1, 1, ?, ?), float32] = memory.alloc_tensor(%storage_0960, 0 /* ty=int64 */, %shape_func_out_0184, meta[relay.attrs.AllocTensorAttrs][973]) /* ty=Tensor[(1, 1, ?, ?), float32] */;
      %3395 = (%x1208,);
      %3396 = (%out_0178,);
      let %x1211: () = vm.invoke_tvm_op(%3386, %3395, %3396) /* ty=() */;
      let %x1212: Tensor[(1, 1, ?, ?), float32] = %out_0178;
      let %storage_0961: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][974]) /* ty=Storage[] */;
      let %tensor_0782: int64 = memory.alloc_tensor(%storage_0961, 0 /* ty=int64 */, meta[relay.Constant][1177] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][974]) /* ty=int64 */;
      %3397 = fn (%p0780: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p0780, 3 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */
      };
      %3398 = (%x1192,);
      %3399 = (%tensor_0782,);
      let %x1213: () = vm.invoke_tvm_op(%3397, %3398, %3399) /* ty=() */;
      let %x1214: int64 = %tensor_0782;
      let %storage_0962: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][975]) /* ty=Storage[] */;
      let %tensor_0783: Tensor[(2), int64] = memory.alloc_tensor(%storage_0962, 0 /* ty=int64 */, meta[relay.Constant][1178] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][975]) /* ty=Tensor[(2), int64] */;
      %3403 = fn (%p0781: int64, %p1273: int64, %p2227: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %3400 = subtract(%p0781, %p1273) /* ty=int64 */;
        %3401 = add(%3400, %p2227) /* ty=Tensor[(1), int64] */;
        %3402 = (%3401, %p2227);
        concatenate(%3402) /* ty=Tensor[(2), int64] */
      };
      %3404 = (%x1214, %x1200, meta[relay.Constant][1179] /* ty=Tensor[(1), int64] */);
      %3405 = (%tensor_0783,);
      let %x1215: () = vm.invoke_tvm_op(%3403, %3404, %3405) /* ty=() */;
      let %x1216: Tensor[(2), int64] = %tensor_0783;
      let %storage_0963: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][976]) /* ty=Storage[] */;
      let %tensor_0784: int64 = memory.alloc_tensor(%storage_0963, 0 /* ty=int64 */, meta[relay.Constant][1180] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][976]) /* ty=int64 */;
      %3406 = fn (%p0782: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p0782) /* ty=int64 */
      };
      %3407 = (%x1216,);
      %3408 = (%tensor_0784,);
      let %x1217: () = vm.invoke_tvm_op(%3406, %3407, %3408) /* ty=() */;
      let %x1218: int64 = %tensor_0784;
      let %storage_0964: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][977]) /* ty=Storage[] */;
      let %tensor_0785: int64 = memory.alloc_tensor(%storage_0964, 0 /* ty=int64 */, meta[relay.Constant][1181] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][977]) /* ty=int64 */;
      %3409 = fn (%p0783: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p0783, 2 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */
      };
      %3410 = (%x1192,);
      %3411 = (%tensor_0785,);
      let %x1219: () = vm.invoke_tvm_op(%3409, %3410, %3411) /* ty=() */;
      let %x1220: int64 = %tensor_0785;
      let %storage_0965: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][978]) /* ty=Storage[] */;
      let %tensor_0786: Tensor[(2), int64] = memory.alloc_tensor(%storage_0965, 0 /* ty=int64 */, meta[relay.Constant][1182] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][978]) /* ty=Tensor[(2), int64] */;
      %3415 = fn (%p0784: int64, %p1274: int64, %p2228: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %3412 = subtract(%p0784, %p1274) /* ty=int64 */;
        %3413 = add(%3412, %p2228) /* ty=Tensor[(1), int64] */;
        %3414 = (%3413, %p2228);
        concatenate(%3414) /* ty=Tensor[(2), int64] */
      };
      %3416 = (%x1220, %x1194, meta[relay.Constant][1179] /* ty=Tensor[(1), int64] */);
      %3417 = (%tensor_0786,);
      let %x1221: () = vm.invoke_tvm_op(%3415, %3416, %3417) /* ty=() */;
      let %x1222: Tensor[(2), int64] = %tensor_0786;
      let %storage_0966: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][979]) /* ty=Storage[] */;
      let %tensor_0787: int64 = memory.alloc_tensor(%storage_0966, 0 /* ty=int64 */, meta[relay.Constant][1183] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][979]) /* ty=int64 */;
      %3418 = fn (%p0785: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p0785) /* ty=int64 */
      };
      %3419 = (%x1222,);
      %3420 = (%tensor_0787,);
      let %x1223: () = vm.invoke_tvm_op(%3418, %3419, %3420) /* ty=() */;
      let %x1224: int64 = %tensor_0787;
      let %storage_0967: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][980]) /* ty=Storage[] */;
      let %tensor_0788: Tensor[(2), int64] = memory.alloc_tensor(%storage_0967, 0 /* ty=int64 */, meta[relay.Constant][1184] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][980]) /* ty=Tensor[(2), int64] */;
      %3424 = fn (%p0786: int64, %p1275: int64, Primitive=1) -> Tensor[(2), int64] {
        %3421 = expand_dims(%p0786, axis=0) /* ty=Tensor[(1), int64] */;
        %3422 = expand_dims(%p1275, axis=0) /* ty=Tensor[(1), int64] */;
        %3423 = (%3421, %3422);
        concatenate(%3423) /* ty=Tensor[(2), int64] */
      };
      %3425 = (%x1218, %x1224);
      %3426 = (%tensor_0788,);
      let %x1225: () = vm.invoke_tvm_op(%3424, %3425, %3426) /* ty=() */;
      let %x1226: Tensor[(2), int64] = %tensor_0788;
      let %in_shape_0168: Tensor[(1, 1, ?, ?), float32] = %x1212;
      let %in_shape_1108: Tensor[(2), int64] = %x1226;
      let %storage_0968: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][981]) /* ty=Storage[] */;
      let %tensor_0789: Tensor[(4), int64] = memory.alloc_tensor(%storage_0968, 0 /* ty=int64 */, meta[relay.Constant][1185] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][981]) /* ty=Tensor[(4), int64] */;
      let %shape_func_out_0185: Tensor[(4), int64] = %tensor_0789;
      %3427 = fn (%p0787: Tensor[(1, 1, ?, ?), float32], %p1276: Tensor[(2), int64], Primitive=1) -> Tensor[(1, 1, ?, ?), float32] {
        dyn.image.resize(%p0787, %p1276, size=[]) /* ty=Tensor[(1, 1, ?, ?), float32] */
      };
      %3428 = (%in_shape_0168, %in_shape_1108);
      %3429 = (%shape_func_out_0185,);
      let %shape_func185: () = vm.shape_func(%3427, %3428, %3429, meta[relay.attrs.ShapeFuncAttrs][185]) /* ty=() */;
      let %storage_0969: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][982]) /* ty=Storage[] */;
      let %tensor_0790: int64 = memory.alloc_tensor(%storage_0969, 0 /* ty=int64 */, meta[relay.Constant][1186] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][982]) /* ty=int64 */;
      %3430 = fn (%p0788: Tensor[(4), int64], Primitive=1) -> int64 {
        prod(%p0788) /* ty=int64 */
      };
      %3431 = (%shape_func_out_0185,);
      %3432 = (%tensor_0790,);
      let %x1227: () = vm.invoke_tvm_op(%3430, %3431, %3432) /* ty=() */;
      let %storage_0970: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][983]) /* ty=Storage[] */;
      let %tensor_0791: int64 = memory.alloc_tensor(%storage_0970, 0 /* ty=int64 */, meta[relay.Constant][1187] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][983]) /* ty=int64 */;
      %3433 = fn (%p0789: int64, Primitive=1) -> int64 {
        multiply(%p0789, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3434 = (%tensor_0790,);
      %3435 = (%tensor_0791,);
      let %x1228: () = vm.invoke_tvm_op(%3433, %3434, %3435) /* ty=() */;
      let %storage_0971: Storage[] = memory.alloc_storage(%tensor_0791, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][984]) /* ty=Storage[] */;
      let %out_0179: Tensor[(1, 1, ?, ?), float32] = memory.alloc_tensor(%storage_0971, 0 /* ty=int64 */, %shape_func_out_0185, meta[relay.attrs.AllocTensorAttrs][984]) /* ty=Tensor[(1, 1, ?, ?), float32] */;
      %3436 = (%x1212, %x1226);
      %3437 = (%out_0179,);
      let %x1229: () = vm.invoke_tvm_op(%3427, %3436, %3437) /* ty=() */;
      let %x1230: Tensor[(1, 1, ?, ?), float32] = %out_0179;
      let %in_shape_0169: Tensor[(4), int64] = vm.shape_of(%x1230, meta[relay.attrs.ShapeOfAttrs][241]) /* ty=Tensor[(4), int64] */;
      let %storage_0972: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][985]) /* ty=Storage[] */;
      let %tensor_0792: Tensor[(3), int64] = memory.alloc_tensor(%storage_0972, 0 /* ty=int64 */, meta[relay.Constant][1188] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][985]) /* ty=Tensor[(3), int64] */;
      let %shape_func_out_0186: Tensor[(3), int64] = %tensor_0792;
      %3438 = fn (%p0790: Tensor[(1, 1, ?, ?), float32], Primitive=1) -> Tensor[(1, ?, ?), float32] {
        take(%p0790, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(1, ?, ?), float32] */
      };
      %3439 = (%in_shape_0169,);
      %3440 = (%shape_func_out_0186,);
      let %shape_func186: () = vm.shape_func(%3438, %3439, %3440, meta[relay.attrs.ShapeFuncAttrs][186]) /* ty=() */;
      let %storage_0973: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][986]) /* ty=Storage[] */;
      let %tensor_0793: int64 = memory.alloc_tensor(%storage_0973, 0 /* ty=int64 */, meta[relay.Constant][1189] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][986]) /* ty=int64 */;
      %3441 = fn (%p0791: Tensor[(3), int64], Primitive=1) -> int64 {
        prod(%p0791) /* ty=int64 */
      };
      %3442 = (%shape_func_out_0186,);
      %3443 = (%tensor_0793,);
      let %x1231: () = vm.invoke_tvm_op(%3441, %3442, %3443) /* ty=() */;
      let %storage_0974: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][987]) /* ty=Storage[] */;
      let %tensor_0794: int64 = memory.alloc_tensor(%storage_0974, 0 /* ty=int64 */, meta[relay.Constant][1190] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][987]) /* ty=int64 */;
      %3444 = fn (%p0792: int64, Primitive=1) -> int64 {
        multiply(%p0792, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3445 = (%tensor_0793,);
      %3446 = (%tensor_0794,);
      let %x1232: () = vm.invoke_tvm_op(%3444, %3445, %3446) /* ty=() */;
      let %storage_0975: Storage[] = memory.alloc_storage(%tensor_0794, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][988]) /* ty=Storage[] */;
      let %out_0180: Tensor[(1, ?, ?), float32] = memory.alloc_tensor(%storage_0975, 0 /* ty=int64 */, %shape_func_out_0186, meta[relay.attrs.AllocTensorAttrs][988]) /* ty=Tensor[(1, ?, ?), float32] */;
      %3447 = (%x1230,);
      %3448 = (%out_0180,);
      let %x1233: () = vm.invoke_tvm_op(%3438, %3447, %3448) /* ty=() */;
      let %x1234: Tensor[(1, ?, ?), float32] = %out_0180;
      let %in_shape_0170: Tensor[(3), int64] = vm.shape_of(%x1234, meta[relay.attrs.ShapeOfAttrs][242]) /* ty=Tensor[(3), int64] */;
      let %storage_0976: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][989]) /* ty=Storage[] */;
      let %tensor_0795: Tensor[(2), int64] = memory.alloc_tensor(%storage_0976, 0 /* ty=int64 */, meta[relay.Constant][1191] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][989]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0187: Tensor[(2), int64] = %tensor_0795;
      %3449 = fn (%p0793: Tensor[(1, ?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
        take(%p0793, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(?, ?), float32] */
      };
      %3450 = (%in_shape_0170,);
      %3451 = (%shape_func_out_0187,);
      let %shape_func187: () = vm.shape_func(%3449, %3450, %3451, meta[relay.attrs.ShapeFuncAttrs][187]) /* ty=() */;
      let %storage_0977: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][990]) /* ty=Storage[] */;
      let %tensor_0796: int64 = memory.alloc_tensor(%storage_0977, 0 /* ty=int64 */, meta[relay.Constant][1192] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][990]) /* ty=int64 */;
      %3452 = fn (%p0794: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0794) /* ty=int64 */
      };
      %3453 = (%shape_func_out_0187,);
      %3454 = (%tensor_0796,);
      let %x1235: () = vm.invoke_tvm_op(%3452, %3453, %3454) /* ty=() */;
      let %storage_0978: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][991]) /* ty=Storage[] */;
      let %tensor_0797: int64 = memory.alloc_tensor(%storage_0978, 0 /* ty=int64 */, meta[relay.Constant][1193] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][991]) /* ty=int64 */;
      %3455 = fn (%p0795: int64, Primitive=1) -> int64 {
        multiply(%p0795, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3456 = (%tensor_0796,);
      %3457 = (%tensor_0797,);
      let %x1236: () = vm.invoke_tvm_op(%3455, %3456, %3457) /* ty=() */;
      let %storage_0979: Storage[] = memory.alloc_storage(%tensor_0797, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][992]) /* ty=Storage[] */;
      let %out_0181: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0979, 0 /* ty=int64 */, %shape_func_out_0187, meta[relay.attrs.AllocTensorAttrs][992]) /* ty=Tensor[(?, ?), float32] */;
      %3458 = (%x1234,);
      %3459 = (%out_0181,);
      let %x1237: () = vm.invoke_tvm_op(%3449, %3458, %3459) /* ty=() */;
      let %x1238: Tensor[(?, ?), float32] = %out_0181;
      let %storage_0980: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][993]) /* ty=Storage[] */;
      let %tensor_0798: Tensor[(2), int32] = memory.alloc_tensor(%storage_0980, 0 /* ty=int64 */, meta[relay.Constant][1194] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][993]) /* ty=Tensor[(2), int32] */;
      %3460 = fn (%p0796: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p0796, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %3461 = (%x1238,);
      %3462 = (%tensor_0798,);
      let %x1239: () = vm.invoke_tvm_op(%3460, %3461, %3462) /* ty=() */;
      let %x1240: Tensor[(2), int32] = %tensor_0798;
      let %storage_0981: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][994]) /* ty=Storage[] */;
      let %tensor_0799: Tensor[(2), int64] = memory.alloc_tensor(%storage_0981, 0 /* ty=int64 */, meta[relay.Constant][1195] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][994]) /* ty=Tensor[(2), int64] */;
      %3472 = fn (%p0797: int64, %p1277: int64, %p2229: Tensor[(1), int64], %p389: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        %3463 = subtract(%p0797, %p1277) /* ty=int64 */;
        %3464 = expand_dims(%3463, axis=0) /* ty=Tensor[(1), int64] */;
        %3465 = cast(%3464, dtype="int64") /* ty=Tensor[(1), int64] */;
        %3466 = (%3465, %p2229);
        %3467 = concatenate(%3466) /* ty=Tensor[(2), int64] */;
        %3468 = cast_like(0 /* ty=int32 */, %3467) /* ty=int64 */;
        %3469 = less(%3467, %3468) /* ty=Tensor[(2), bool] */;
        %3470 = cast_like(%p389, %3467) /* ty=Tensor[(2), int64] */;
        %3471 = add(%3467, %3470) /* ty=Tensor[(2), int64] */;
        where(%3469, %3471, %3467) /* ty=Tensor[(2), int64] */
      };
      %3473 = (%x1204, %x1200, meta[relay.Constant][1196] /* ty=Tensor[(1), int64] */, %x1240);
      %3474 = (%tensor_0799,);
      let %x1241: () = vm.invoke_tvm_op(%3472, %3473, %3474) /* ty=() */;
      let %x1242: Tensor[(2), int64] = %tensor_0799;
      let %storage_0982: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][995]) /* ty=Storage[] */;
      let %tensor_0800: Tensor[(2), int64] = memory.alloc_tensor(%storage_0982, 0 /* ty=int64 */, meta[relay.Constant][1197] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][995]) /* ty=Tensor[(2), int64] */;
      %3475 = fn (%p0798: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p0798, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %3476 = (%x1240,);
      %3477 = (%tensor_0800,);
      let %x1243: () = vm.invoke_tvm_op(%3475, %3476, %3477) /* ty=() */;
      let %x1244: Tensor[(2), int64] = %tensor_0800;
      let %storage_0983: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][996]) /* ty=Storage[] */;
      let %tensor_0801: Tensor[(2), int64] = memory.alloc_tensor(%storage_0983, 0 /* ty=int64 */, meta[relay.Constant][1198] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][996]) /* ty=Tensor[(2), int64] */;
      %3481 = fn (%p0799: int64, %p1278: Tensor[(1), int64], %p2230: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %3478 = expand_dims(%p0799, axis=0) /* ty=Tensor[(1), int64] */;
        %3479 = add(%3478, %p1278) /* ty=Tensor[(1), int64] */;
        %3480 = (%3479, %p2230);
        concatenate(%3480) /* ty=Tensor[(2), int64] */
      };
      %3482 = (%x1214, meta[relay.Constant][1179] /* ty=Tensor[(1), int64] */, meta[relay.Constant][1199] /* ty=Tensor[(1), int64] */);
      %3483 = (%tensor_0801,);
      let %x1245: () = vm.invoke_tvm_op(%3481, %3482, %3483) /* ty=() */;
      let %x1246: Tensor[(2), int64] = %tensor_0801;
      let %storage_0984: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][997]) /* ty=Storage[] */;
      let %tensor_0802: int64 = memory.alloc_tensor(%storage_0984, 0 /* ty=int64 */, meta[relay.Constant][1200] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][997]) /* ty=int64 */;
      %3484 = fn (%p0800: Tensor[(2), int64], Primitive=1) -> int64 {
        min(%p0800) /* ty=int64 */
      };
      %3485 = (%x1246,);
      %3486 = (%tensor_0802,);
      let %x1247: () = vm.invoke_tvm_op(%3484, %3485, %3486) /* ty=() */;
      let %x1248: int64 = %tensor_0802;
      let %storage_0985: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][998]) /* ty=Storage[] */;
      let %tensor_0803: Tensor[(1), int64] = memory.alloc_tensor(%storage_0985, 0 /* ty=int64 */, meta[relay.Constant][1201] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][998]) /* ty=Tensor[(1), int64] */;
      %3488 = fn (%p0801: int64, %p1279: int64, Primitive=1) -> Tensor[(1), int64] {
        %3487 = subtract(%p0801, %p1279) /* ty=int64 */;
        expand_dims(%3487, axis=0) /* ty=Tensor[(1), int64] */
      };
      %3489 = (%x1248, %x1200);
      %3490 = (%tensor_0803,);
      let %x1249: () = vm.invoke_tvm_op(%3488, %3489, %3490) /* ty=() */;
      let %x1250: Tensor[(1), int64] = %tensor_0803;
      let %storage_0986: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][999]) /* ty=Storage[] */;
      let %tensor_0804: Tensor[(2), int64] = memory.alloc_tensor(%storage_0986, 0 /* ty=int64 */, meta[relay.Constant][1202] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][999]) /* ty=Tensor[(2), int64] */;
      %3491 = fn (%p0802: Tensor[(2), int64], %p1280: Tensor[(1), int32], %p2231: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        scatter(%p0802, %p1280, %p2231, meta[relay.attrs.ScatterAttrs][6]) /* ty=Tensor[(2), int64] */
      };
      %3492 = (%x1244, meta[relay.Constant][1203] /* ty=Tensor[(1), int32] */, %x1250);
      %3493 = (%tensor_0804,);
      let %x1251: () = vm.invoke_tvm_op(%3491, %3492, %3493) /* ty=() */;
      let %x1252: Tensor[(2), int64] = %tensor_0804;
      let %in_shape_0171: Tensor[(2), int64] = vm.shape_of(%x1238, meta[relay.attrs.ShapeOfAttrs][243]) /* ty=Tensor[(2), int64] */;
      let %in_shape_1109: Tensor[(2), int64] = %x1242;
      let %in_shape_274: Tensor[(2), int64] = %x1252;
      let %storage_0987: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1000]) /* ty=Storage[] */;
      let %tensor_0805: Tensor[(2), int64] = memory.alloc_tensor(%storage_0987, 0 /* ty=int64 */, meta[relay.Constant][1204] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1000]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0188: Tensor[(2), int64] = %tensor_0805;
      %3494 = fn (%p0803: Tensor[(?, ?), float32], %p1281: Tensor[(2), int64], %p2232: Tensor[(2), int64], %p390: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p0803, %p1281, %p2232, %p390, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %3495 = (%in_shape_0171, %in_shape_1109, %in_shape_274, meta[relay.Constant][1205] /* ty=Tensor[(2), int32] */);
      %3496 = (%shape_func_out_0188,);
      let %shape_func188: () = vm.shape_func(%3494, %3495, %3496, meta[relay.attrs.ShapeFuncAttrs][188]) /* ty=() */;
      let %storage_0988: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1001]) /* ty=Storage[] */;
      let %tensor_0806: int64 = memory.alloc_tensor(%storage_0988, 0 /* ty=int64 */, meta[relay.Constant][1206] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1001]) /* ty=int64 */;
      %3497 = fn (%p0804: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0804) /* ty=int64 */
      };
      %3498 = (%shape_func_out_0188,);
      %3499 = (%tensor_0806,);
      let %x1253: () = vm.invoke_tvm_op(%3497, %3498, %3499) /* ty=() */;
      let %storage_0989: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1002]) /* ty=Storage[] */;
      let %tensor_0807: int64 = memory.alloc_tensor(%storage_0989, 0 /* ty=int64 */, meta[relay.Constant][1207] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1002]) /* ty=int64 */;
      %3500 = fn (%p0805: int64, Primitive=1) -> int64 {
        multiply(%p0805, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3501 = (%tensor_0806,);
      %3502 = (%tensor_0807,);
      let %x1254: () = vm.invoke_tvm_op(%3500, %3501, %3502) /* ty=() */;
      let %storage_0990: Storage[] = memory.alloc_storage(%tensor_0807, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1003]) /* ty=Storage[] */;
      let %out_0182: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0990, 0 /* ty=int64 */, %shape_func_out_0188, meta[relay.attrs.AllocTensorAttrs][1003]) /* ty=Tensor[(?, ?), float32] */;
      %3503 = (%x1238, %x1242, %x1252, meta[relay.Constant][1205] /* ty=Tensor[(2), int32] */);
      %3504 = (%out_0182,);
      let %x1255: () = vm.invoke_tvm_op(%3494, %3503, %3504) /* ty=() */;
      let %x1256: Tensor[(?, ?), float32] = %out_0182;
      let %storage_0991: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1004]) /* ty=Storage[] */;
      let %tensor_0808: Tensor[(2), int32] = memory.alloc_tensor(%storage_0991, 0 /* ty=int64 */, meta[relay.Constant][1208] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1004]) /* ty=Tensor[(2), int32] */;
      %3505 = fn (%p0806: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p0806, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %3506 = (%x1256,);
      %3507 = (%tensor_0808,);
      let %x1257: () = vm.invoke_tvm_op(%3505, %3506, %3507) /* ty=() */;
      let %x1258: Tensor[(2), int32] = %tensor_0808;
      let %storage_0992: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1005]) /* ty=Storage[] */;
      let %tensor_0809: Tensor[(2), int64] = memory.alloc_tensor(%storage_0992, 0 /* ty=int64 */, meta[relay.Constant][1209] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1005]) /* ty=Tensor[(2), int64] */;
      %3517 = fn (%p0807: int64, %p1282: int64, %p2233: Tensor[(1), int64], %p391: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        %3508 = subtract(%p0807, %p1282) /* ty=int64 */;
        %3509 = expand_dims(%3508, axis=0) /* ty=Tensor[(1), int64] */;
        %3510 = cast(%3509, dtype="int64") /* ty=Tensor[(1), int64] */;
        %3511 = (%p2233, %3510);
        %3512 = concatenate(%3511) /* ty=Tensor[(2), int64] */;
        %3513 = cast_like(0 /* ty=int32 */, %3512) /* ty=int64 */;
        %3514 = less(%3512, %3513) /* ty=Tensor[(2), bool] */;
        %3515 = cast_like(%p391, %3512) /* ty=Tensor[(2), int64] */;
        %3516 = add(%3512, %3515) /* ty=Tensor[(2), int64] */;
        where(%3514, %3516, %3512) /* ty=Tensor[(2), int64] */
      };
      %3518 = (%x1198, %x1194, meta[relay.Constant][1196] /* ty=Tensor[(1), int64] */, %x1258);
      %3519 = (%tensor_0809,);
      let %x1259: () = vm.invoke_tvm_op(%3517, %3518, %3519) /* ty=() */;
      let %x1260: Tensor[(2), int64] = %tensor_0809;
      let %storage_0993: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1006]) /* ty=Storage[] */;
      let %tensor_0810: Tensor[(2), int64] = memory.alloc_tensor(%storage_0993, 0 /* ty=int64 */, meta[relay.Constant][1210] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1006]) /* ty=Tensor[(2), int64] */;
      %3520 = fn (%p0808: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p0808, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %3521 = (%x1258,);
      %3522 = (%tensor_0810,);
      let %x1261: () = vm.invoke_tvm_op(%3520, %3521, %3522) /* ty=() */;
      let %x1262: Tensor[(2), int64] = %tensor_0810;
      let %storage_0994: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1007]) /* ty=Storage[] */;
      let %tensor_0811: Tensor[(2), int64] = memory.alloc_tensor(%storage_0994, 0 /* ty=int64 */, meta[relay.Constant][1211] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1007]) /* ty=Tensor[(2), int64] */;
      %3526 = fn (%p0809: int64, %p1283: Tensor[(1), int64], %p2234: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %3523 = expand_dims(%p0809, axis=0) /* ty=Tensor[(1), int64] */;
        %3524 = add(%3523, %p1283) /* ty=Tensor[(1), int64] */;
        %3525 = (%3524, %p2234);
        concatenate(%3525) /* ty=Tensor[(2), int64] */
      };
      %3527 = (%x1220, meta[relay.Constant][1179] /* ty=Tensor[(1), int64] */, meta[relay.Constant][1199] /* ty=Tensor[(1), int64] */);
      %3528 = (%tensor_0811,);
      let %x1263: () = vm.invoke_tvm_op(%3526, %3527, %3528) /* ty=() */;
      let %x1264: Tensor[(2), int64] = %tensor_0811;
      let %storage_0995: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1008]) /* ty=Storage[] */;
      let %tensor_0812: int64 = memory.alloc_tensor(%storage_0995, 0 /* ty=int64 */, meta[relay.Constant][1212] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1008]) /* ty=int64 */;
      %3529 = fn (%p0810: Tensor[(2), int64], Primitive=1) -> int64 {
        min(%p0810) /* ty=int64 */
      };
      %3530 = (%x1264,);
      %3531 = (%tensor_0812,);
      let %x1265: () = vm.invoke_tvm_op(%3529, %3530, %3531) /* ty=() */;
      let %x1266: int64 = %tensor_0812;
      let %storage_0996: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1009]) /* ty=Storage[] */;
      let %tensor_0813: Tensor[(1), int64] = memory.alloc_tensor(%storage_0996, 0 /* ty=int64 */, meta[relay.Constant][1213] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1009]) /* ty=Tensor[(1), int64] */;
      %3533 = fn (%p0811: int64, %p1284: int64, Primitive=1) -> Tensor[(1), int64] {
        %3532 = subtract(%p0811, %p1284) /* ty=int64 */;
        expand_dims(%3532, axis=0) /* ty=Tensor[(1), int64] */
      };
      %3534 = (%x1266, %x1194);
      %3535 = (%tensor_0813,);
      let %x1267: () = vm.invoke_tvm_op(%3533, %3534, %3535) /* ty=() */;
      let %x1268: Tensor[(1), int64] = %tensor_0813;
      let %storage_0997: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1010]) /* ty=Storage[] */;
      let %tensor_0814: Tensor[(2), int64] = memory.alloc_tensor(%storage_0997, 0 /* ty=int64 */, meta[relay.Constant][1214] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1010]) /* ty=Tensor[(2), int64] */;
      %3536 = fn (%p0812: Tensor[(2), int64], %p1285: Tensor[(1), int32], %p2235: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        scatter(%p0812, %p1285, %p2235, meta[relay.attrs.ScatterAttrs][7]) /* ty=Tensor[(2), int64] */
      };
      %3537 = (%x1262, %x1183, %x1268);
      %3538 = (%tensor_0814,);
      let %x1269: () = vm.invoke_tvm_op(%3536, %3537, %3538) /* ty=() */;
      let %x1270: Tensor[(2), int64] = %tensor_0814;
      let %in_shape_0172: Tensor[(2), int64] = vm.shape_of(%x1256, meta[relay.attrs.ShapeOfAttrs][244]) /* ty=Tensor[(2), int64] */;
      let %in_shape_1110: Tensor[(2), int64] = %x1260;
      let %in_shape_275: Tensor[(2), int64] = %x1270;
      let %storage_0998: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1011]) /* ty=Storage[] */;
      let %tensor_0815: Tensor[(2), int64] = memory.alloc_tensor(%storage_0998, 0 /* ty=int64 */, meta[relay.Constant][1215] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1011]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0189: Tensor[(2), int64] = %tensor_0815;
      %3539 = fn (%p0813: Tensor[(?, ?), float32], %p1286: Tensor[(2), int64], %p2236: Tensor[(2), int64], %p392: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p0813, %p1286, %p2236, %p392, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %3540 = (%in_shape_0172, %in_shape_1110, %in_shape_275, meta[relay.Constant][1216] /* ty=Tensor[(2), int32] */);
      %3541 = (%shape_func_out_0189,);
      let %shape_func189: () = vm.shape_func(%3539, %3540, %3541, meta[relay.attrs.ShapeFuncAttrs][189]) /* ty=() */;
      let %storage_0999: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1012]) /* ty=Storage[] */;
      let %tensor_0816: int64 = memory.alloc_tensor(%storage_0999, 0 /* ty=int64 */, meta[relay.Constant][1217] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1012]) /* ty=int64 */;
      %3542 = fn (%p0814: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0814) /* ty=int64 */
      };
      %3543 = (%shape_func_out_0189,);
      %3544 = (%tensor_0816,);
      let %x1271: () = vm.invoke_tvm_op(%3542, %3543, %3544) /* ty=() */;
      let %storage_01000: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1013]) /* ty=Storage[] */;
      let %tensor_0817: int64 = memory.alloc_tensor(%storage_01000, 0 /* ty=int64 */, meta[relay.Constant][1218] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1013]) /* ty=int64 */;
      %3545 = fn (%p0815: int64, Primitive=1) -> int64 {
        multiply(%p0815, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3546 = (%tensor_0816,);
      %3547 = (%tensor_0817,);
      let %x1272: () = vm.invoke_tvm_op(%3545, %3546, %3547) /* ty=() */;
      let %storage_01001: Storage[] = memory.alloc_storage(%tensor_0817, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1014]) /* ty=Storage[] */;
      let %out_0183: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01001, 0 /* ty=int64 */, %shape_func_out_0189, meta[relay.attrs.AllocTensorAttrs][1014]) /* ty=Tensor[(?, ?), float32] */;
      %3548 = (%x1256, %x1260, %x1270, meta[relay.Constant][1216] /* ty=Tensor[(2), int32] */);
      %3549 = (%out_0183,);
      let %x1273: () = vm.invoke_tvm_op(%3539, %3548, %3549) /* ty=() */;
      let %x1274: Tensor[(?, ?), float32] = %out_0183;
      let %storage_01002: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1015]) /* ty=Storage[] */;
      let %tensor_0818: Tensor[(2), int32] = memory.alloc_tensor(%storage_01002, 0 /* ty=int64 */, meta[relay.Constant][1219] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1015]) /* ty=Tensor[(2), int32] */;
      %3550 = fn (%p0816: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p0816, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %3551 = (%x1274,);
      %3552 = (%tensor_0818,);
      let %x1275: () = vm.invoke_tvm_op(%3550, %3551, %3552) /* ty=() */;
      let %x1276: Tensor[(2), int32] = %tensor_0818;
      let %storage_01003: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1016]) /* ty=Storage[] */;
      let %tensor_0819: Tensor[(1), int64] = memory.alloc_tensor(%storage_01003, 0 /* ty=int64 */, meta[relay.Constant][1220] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1016]) /* ty=Tensor[(1), int64] */;
      %3555 = fn (%p0817: Tensor[(2), int32], Primitive=1) -> Tensor[(1), int64] {
        %3553 = take(%p0817, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
        %3554 = expand_dims(%3553, axis=0) /* ty=Tensor[(1), int32] */;
        cast(%3554, dtype="int64") /* ty=Tensor[(1), int64] */
      };
      %3556 = (%x1276,);
      %3557 = (%tensor_0819,);
      let %x1277: () = vm.invoke_tvm_op(%3555, %3556, %3557) /* ty=() */;
      let %x1278: Tensor[(1), int64] = %tensor_0819;
      let %storage_01004: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1017]) /* ty=Storage[] */;
      let %tensor_0820: Tensor[(2), int64] = memory.alloc_tensor(%storage_01004, 0 /* ty=int64 */, meta[relay.Constant][1221] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1017]) /* ty=Tensor[(2), int64] */;
      %3561 = fn (%p0818: int64, %p1287: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %3558 = expand_dims(%p0818, axis=0) /* ty=Tensor[(1), int64] */;
        %3559 = cast(%3558, dtype="int64") /* ty=Tensor[(1), int64] */;
        %3560 = (%3559, %p1287);
        concatenate(%3560) /* ty=Tensor[(2), int64] */
      };
      %3562 = (%x1204, %x1278);
      %3563 = (%tensor_0820,);
      let %x1279: () = vm.invoke_tvm_op(%3561, %3562, %3563) /* ty=() */;
      let %x1280: Tensor[(2), int64] = %tensor_0820;
      let %in_shape_1111: Tensor[(2), int64] = %x1280;
      let %storage_01005: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1018]) /* ty=Storage[] */;
      let %tensor_0821: Tensor[(2), int64] = memory.alloc_tensor(%storage_01005, 0 /* ty=int64 */, meta[relay.Constant][1222] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1018]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0190: Tensor[(2), int64] = %tensor_0821;
      %3564 = fn (%p0819: int32, %p1288: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p0819, %p1288, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      %3565 = (0 /* ty=int32 */, %in_shape_1111);
      %3566 = (%shape_func_out_0190,);
      let %shape_func190: () = vm.shape_func(%3564, %3565, %3566, meta[relay.attrs.ShapeFuncAttrs][190]) /* ty=() */;
      let %storage_01006: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1019]) /* ty=Storage[] */;
      let %tensor_0822: int64 = memory.alloc_tensor(%storage_01006, 0 /* ty=int64 */, meta[relay.Constant][1223] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1019]) /* ty=int64 */;
      %3567 = fn (%p0820: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0820) /* ty=int64 */
      };
      %3568 = (%shape_func_out_0190,);
      %3569 = (%tensor_0822,);
      let %x1281: () = vm.invoke_tvm_op(%3567, %3568, %3569) /* ty=() */;
      let %storage_01007: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1020]) /* ty=Storage[] */;
      let %tensor_0823: int64 = memory.alloc_tensor(%storage_01007, 0 /* ty=int64 */, meta[relay.Constant][1224] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1020]) /* ty=int64 */;
      %3570 = fn (%p0821: int64, Primitive=1) -> int64 {
        multiply(%p0821, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3571 = (%tensor_0822,);
      %3572 = (%tensor_0823,);
      let %x1282: () = vm.invoke_tvm_op(%3570, %3571, %3572) /* ty=() */;
      let %storage_01008: Storage[] = memory.alloc_storage(%tensor_0823, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1021]) /* ty=Storage[] */;
      let %out_0184: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01008, 0 /* ty=int64 */, %shape_func_out_0190, meta[relay.attrs.AllocTensorAttrs][1021]) /* ty=Tensor[(?, ?), float32] */;
      %3573 = (0 /* ty=int32 */, %x1280);
      %3574 = (%out_0184,);
      let %x1283: () = vm.invoke_tvm_op(%3564, %3573, %3574) /* ty=() */;
      let %x1284: Tensor[(?, ?), float32] = %out_0184;
      let %storage_01009: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1022]) /* ty=Storage[] */;
      let %tensor_0824: Tensor[(2), int64] = memory.alloc_tensor(%storage_01009, 0 /* ty=int64 */, meta[relay.Constant][1225] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1022]) /* ty=Tensor[(2), int64] */;
      %3579 = fn (%p0822: int64, %p1289: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %3575 = subtract(300 /* ty=int64 */, %p0822) /* ty=int64 */;
        %3576 = expand_dims(%3575, axis=0) /* ty=Tensor[(1), int64] */;
        %3577 = cast(%3576, dtype="int64") /* ty=Tensor[(1), int64] */;
        %3578 = (%3577, %p1289);
        concatenate(%3578) /* ty=Tensor[(2), int64] */
      };
      %3580 = (%x1248, %x1278);
      %3581 = (%tensor_0824,);
      let %x1285: () = vm.invoke_tvm_op(%3579, %3580, %3581) /* ty=() */;
      let %x1286: Tensor[(2), int64] = %tensor_0824;
      let %in_shape_1112: Tensor[(2), int64] = %x1286;
      let %storage_01010: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1023]) /* ty=Storage[] */;
      let %tensor_0825: Tensor[(2), int64] = memory.alloc_tensor(%storage_01010, 0 /* ty=int64 */, meta[relay.Constant][1226] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1023]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0191: Tensor[(2), int64] = %tensor_0825;
      %3582 = fn (%p0823: int32, %p1290: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p0823, %p1290, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      %3583 = (0 /* ty=int32 */, %in_shape_1112);
      %3584 = (%shape_func_out_0191,);
      let %shape_func191: () = vm.shape_func(%3582, %3583, %3584, meta[relay.attrs.ShapeFuncAttrs][191]) /* ty=() */;
      let %storage_01011: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1024]) /* ty=Storage[] */;
      let %tensor_0826: int64 = memory.alloc_tensor(%storage_01011, 0 /* ty=int64 */, meta[relay.Constant][1227] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1024]) /* ty=int64 */;
      %3585 = fn (%p0824: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0824) /* ty=int64 */
      };
      %3586 = (%shape_func_out_0191,);
      %3587 = (%tensor_0826,);
      let %x1287: () = vm.invoke_tvm_op(%3585, %3586, %3587) /* ty=() */;
      let %storage_01012: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1025]) /* ty=Storage[] */;
      let %tensor_0827: int64 = memory.alloc_tensor(%storage_01012, 0 /* ty=int64 */, meta[relay.Constant][1228] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1025]) /* ty=int64 */;
      %3588 = fn (%p0825: int64, Primitive=1) -> int64 {
        multiply(%p0825, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3589 = (%tensor_0826,);
      %3590 = (%tensor_0827,);
      let %x1288: () = vm.invoke_tvm_op(%3588, %3589, %3590) /* ty=() */;
      let %storage_01013: Storage[] = memory.alloc_storage(%tensor_0827, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1026]) /* ty=Storage[] */;
      let %out_0185: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01013, 0 /* ty=int64 */, %shape_func_out_0191, meta[relay.attrs.AllocTensorAttrs][1026]) /* ty=Tensor[(?, ?), float32] */;
      %3591 = (0 /* ty=int32 */, %x1286);
      %3592 = (%out_0185,);
      let %x1289: () = vm.invoke_tvm_op(%3582, %3591, %3592) /* ty=() */;
      let %x1290: Tensor[(?, ?), float32] = %out_0185;
      let %in_shape_0173: Tensor[(2), int64] = vm.shape_of(%x1284, meta[relay.attrs.ShapeOfAttrs][245]) /* ty=Tensor[(2), int64] */;
      let %in_shape_1113: Tensor[(2), int64] = vm.shape_of(%x1290, meta[relay.attrs.ShapeOfAttrs][246]) /* ty=Tensor[(2), int64] */;
      let %in_shape_276: Tensor[(2), int64] = vm.shape_of(%x1274, meta[relay.attrs.ShapeOfAttrs][247]) /* ty=Tensor[(2), int64] */;
      let %storage_01014: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1027]) /* ty=Storage[] */;
      let %tensor_0828: Tensor[(2), int64] = memory.alloc_tensor(%storage_01014, 0 /* ty=int64 */, meta[relay.Constant][1229] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1027]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0192: Tensor[(2), int64] = %tensor_0828;
      %3596 = fn (%p0826: Tensor[(?, ?), float32], %p1291: Tensor[(?, ?), float32], %p2237: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
        %3593 = reshape(%p0826, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %3594 = reshape(%p1291, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %3595 = (%3593, %p2237, %3594);
        concatenate(%3595) /* ty=Tensor[(?, ?), float32] */
      };
      %3597 = (%in_shape_0173, %in_shape_1113, %in_shape_276);
      %3598 = (%shape_func_out_0192,);
      let %shape_func192: () = vm.shape_func(%3596, %3597, %3598, meta[relay.attrs.ShapeFuncAttrs][192]) /* ty=() */;
      let %storage_01015: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1028]) /* ty=Storage[] */;
      let %tensor_0829: int64 = memory.alloc_tensor(%storage_01015, 0 /* ty=int64 */, meta[relay.Constant][1230] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1028]) /* ty=int64 */;
      %3599 = fn (%p0827: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0827) /* ty=int64 */
      };
      %3600 = (%shape_func_out_0192,);
      %3601 = (%tensor_0829,);
      let %x1291: () = vm.invoke_tvm_op(%3599, %3600, %3601) /* ty=() */;
      let %storage_01016: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1029]) /* ty=Storage[] */;
      let %tensor_0830: int64 = memory.alloc_tensor(%storage_01016, 0 /* ty=int64 */, meta[relay.Constant][1231] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1029]) /* ty=int64 */;
      %3602 = fn (%p0828: int64, Primitive=1) -> int64 {
        multiply(%p0828, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3603 = (%tensor_0829,);
      %3604 = (%tensor_0830,);
      let %x1292: () = vm.invoke_tvm_op(%3602, %3603, %3604) /* ty=() */;
      let %storage_01017: Storage[] = memory.alloc_storage(%tensor_0830, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1030]) /* ty=Storage[] */;
      let %out_0186: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01017, 0 /* ty=int64 */, %shape_func_out_0192, meta[relay.attrs.AllocTensorAttrs][1030]) /* ty=Tensor[(?, ?), float32] */;
      %3605 = (%x1284, %x1290, %x1274);
      %3606 = (%out_0186,);
      let %x1293: () = vm.invoke_tvm_op(%3596, %3605, %3606) /* ty=() */;
      let %x1294: Tensor[(?, ?), float32] = %out_0186;
      let %storage_01018: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1031]) /* ty=Storage[] */;
      let %tensor_0831: Tensor[(2), int32] = memory.alloc_tensor(%storage_01018, 0 /* ty=int64 */, meta[relay.Constant][1232] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1031]) /* ty=Tensor[(2), int32] */;
      %3607 = fn (%p0829: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p0829, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %3608 = (%x1294,);
      %3609 = (%tensor_0831,);
      let %x1295: () = vm.invoke_tvm_op(%3607, %3608, %3609) /* ty=() */;
      let %x1296: Tensor[(2), int32] = %tensor_0831;
      let %storage_01019: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1032]) /* ty=Storage[] */;
      let %tensor_0832: Tensor[(2), int32] = memory.alloc_tensor(%storage_01019, 0 /* ty=int64 */, meta[relay.Constant][1233] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1032]) /* ty=Tensor[(2), int32] */;
      %3612 = fn (%p0830: Tensor[(2), int32], %p1292: Tensor[(2), int32], %p2238: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
        %3610 = cast_like(%p0830, %p1292) /* ty=Tensor[(2), int32] */;
        %3611 = add(%p1292, %3610) /* ty=Tensor[(2), int32] */;
        where(%p2238, %3611, %p1292) /* ty=Tensor[(2), int32] */
      };
      %3613 = (%x1296, meta[relay.Constant][1234] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1235] /* ty=Tensor[(2), bool] */);
      %3614 = (%tensor_0832,);
      let %x1297: () = vm.invoke_tvm_op(%3612, %3613, %3614) /* ty=() */;
      let %x1298: Tensor[(2), int32] = %tensor_0832;
      let %storage_01020: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1033]) /* ty=Storage[] */;
      let %tensor_0833: Tensor[(2), int32] = memory.alloc_tensor(%storage_01020, 0 /* ty=int64 */, meta[relay.Constant][1236] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1033]) /* ty=Tensor[(2), int32] */;
      %3615 = fn (%p0831: Tensor[(2), int32], %p1293: Tensor[(1), int32], %p2239: Tensor[(1), int32], Primitive=1) -> Tensor[(2), int32] {
        scatter(%p0831, %p1293, %p2239, meta[relay.attrs.ScatterAttrs][8]) /* ty=Tensor[(2), int32] */
      };
      %3616 = (%x1296, meta[relay.Constant][1203] /* ty=Tensor[(1), int32] */, meta[relay.Constant][1237] /* ty=Tensor[(1), int32] */);
      %3617 = (%tensor_0833,);
      let %x1299: () = vm.invoke_tvm_op(%3615, %3616, %3617) /* ty=() */;
      let %x1300: Tensor[(2), int32] = %tensor_0833;
      let %storage_01021: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1034]) /* ty=Storage[] */;
      let %tensor_0834: Tensor[(2), int64] = memory.alloc_tensor(%storage_01021, 0 /* ty=int64 */, meta[relay.Constant][1238] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1034]) /* ty=Tensor[(2), int64] */;
      %3618 = fn (%p0832: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p0832, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %3619 = (%x1300,);
      %3620 = (%tensor_0834,);
      let %x1301: () = vm.invoke_tvm_op(%3618, %3619, %3620) /* ty=() */;
      let %x1302: Tensor[(2), int64] = %tensor_0834;
      let %in_shape_0174: Tensor[(2), int64] = vm.shape_of(%x1294, meta[relay.attrs.ShapeOfAttrs][248]) /* ty=Tensor[(2), int64] */;
      let %in_shape_1114: Tensor[(2), int32] = %x1298;
      let %in_shape_277: Tensor[(2), int64] = %x1302;
      let %storage_01022: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1035]) /* ty=Storage[] */;
      let %tensor_0835: Tensor[(2), int64] = memory.alloc_tensor(%storage_01022, 0 /* ty=int64 */, meta[relay.Constant][1239] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1035]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0193: Tensor[(2), int64] = %tensor_0835;
      %3621 = fn (%p0833: Tensor[(?, ?), float32], %p1294: Tensor[(2), int32], %p2240: Tensor[(2), int64], %p393: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p0833, %p1294, %p2240, %p393, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %3622 = (%in_shape_0174, %in_shape_1114, %in_shape_277, meta[relay.Constant][1240] /* ty=Tensor[(2), int32] */);
      %3623 = (%shape_func_out_0193,);
      let %shape_func193: () = vm.shape_func(%3621, %3622, %3623, meta[relay.attrs.ShapeFuncAttrs][193]) /* ty=() */;
      let %storage_01023: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1036]) /* ty=Storage[] */;
      let %tensor_0836: int64 = memory.alloc_tensor(%storage_01023, 0 /* ty=int64 */, meta[relay.Constant][1241] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1036]) /* ty=int64 */;
      %3624 = fn (%p0834: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0834) /* ty=int64 */
      };
      %3625 = (%shape_func_out_0193,);
      %3626 = (%tensor_0836,);
      let %x1303: () = vm.invoke_tvm_op(%3624, %3625, %3626) /* ty=() */;
      let %storage_01024: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1037]) /* ty=Storage[] */;
      let %tensor_0837: int64 = memory.alloc_tensor(%storage_01024, 0 /* ty=int64 */, meta[relay.Constant][1242] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1037]) /* ty=int64 */;
      %3627 = fn (%p0835: int64, Primitive=1) -> int64 {
        multiply(%p0835, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3628 = (%tensor_0836,);
      %3629 = (%tensor_0837,);
      let %x1304: () = vm.invoke_tvm_op(%3627, %3628, %3629) /* ty=() */;
      let %storage_01025: Storage[] = memory.alloc_storage(%tensor_0837, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1038]) /* ty=Storage[] */;
      let %out_0187: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01025, 0 /* ty=int64 */, %shape_func_out_0193, meta[relay.attrs.AllocTensorAttrs][1038]) /* ty=Tensor[(?, ?), float32] */;
      %3630 = (%x1294, %x1298, %x1302, meta[relay.Constant][1240] /* ty=Tensor[(2), int32] */);
      %3631 = (%out_0187,);
      let %x1305: () = vm.invoke_tvm_op(%3621, %3630, %3631) /* ty=() */;
      let %x1306: Tensor[(?, ?), float32] = %out_0187;
      let %storage_01026: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1039]) /* ty=Storage[] */;
      let %tensor_0838: Tensor[(2), int32] = memory.alloc_tensor(%storage_01026, 0 /* ty=int64 */, meta[relay.Constant][1243] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1039]) /* ty=Tensor[(2), int32] */;
      %3632 = fn (%p0836: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p0836, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %3633 = (%x1306,);
      %3634 = (%tensor_0838,);
      let %x1307: () = vm.invoke_tvm_op(%3632, %3633, %3634) /* ty=() */;
      let %x1308: Tensor[(2), int32] = %tensor_0838;
      let %storage_01027: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1040]) /* ty=Storage[] */;
      let %tensor_0839: Tensor[(2), int32] = memory.alloc_tensor(%storage_01027, 0 /* ty=int64 */, meta[relay.Constant][1244] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1040]) /* ty=Tensor[(2), int32] */;
      %3637 = fn (%p0837: Tensor[(2), int32], %p1295: Tensor[(2), int32], %p2241: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
        %3635 = cast_like(%p0837, %p1295) /* ty=Tensor[(2), int32] */;
        %3636 = add(%p1295, %3635) /* ty=Tensor[(2), int32] */;
        where(%p2241, %3636, %p1295) /* ty=Tensor[(2), int32] */
      };
      %3638 = (%x1308, meta[relay.Constant][1245] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1246] /* ty=Tensor[(2), bool] */);
      %3639 = (%tensor_0839,);
      let %x1309: () = vm.invoke_tvm_op(%3637, %3638, %3639) /* ty=() */;
      let %x1310: Tensor[(2), int32] = %tensor_0839;
      let %storage_01028: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1041]) /* ty=Storage[] */;
      let %tensor_0840: Tensor[(2), int64] = memory.alloc_tensor(%storage_01028, 0 /* ty=int64 */, meta[relay.Constant][1247] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1041]) /* ty=Tensor[(2), int64] */;
      %3640 = fn (%p0838: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p0838, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %3641 = (%x1308,);
      %3642 = (%tensor_0840,);
      let %x1311: () = vm.invoke_tvm_op(%3640, %3641, %3642) /* ty=() */;
      let %x1312: Tensor[(2), int64] = %tensor_0840;
      let %in_shape_0175: Tensor[(2), int64] = vm.shape_of(%x1306, meta[relay.attrs.ShapeOfAttrs][249]) /* ty=Tensor[(2), int64] */;
      let %in_shape_1115: Tensor[(2), int32] = %x1310;
      let %in_shape_278: Tensor[(2), int64] = %x1312;
      let %storage_01029: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1042]) /* ty=Storage[] */;
      let %tensor_0841: Tensor[(2), int64] = memory.alloc_tensor(%storage_01029, 0 /* ty=int64 */, meta[relay.Constant][1248] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1042]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0194: Tensor[(2), int64] = %tensor_0841;
      %3643 = fn (%p0839: Tensor[(?, ?), float32], %p1296: Tensor[(2), int32], %p2242: Tensor[(2), int64], %p394: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p0839, %p1296, %p2242, %p394, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %3644 = (%in_shape_0175, %in_shape_1115, %in_shape_278, meta[relay.Constant][1249] /* ty=Tensor[(2), int32] */);
      %3645 = (%shape_func_out_0194,);
      let %shape_func194: () = vm.shape_func(%3643, %3644, %3645, meta[relay.attrs.ShapeFuncAttrs][194]) /* ty=() */;
      let %storage_01030: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1043]) /* ty=Storage[] */;
      let %tensor_0842: int64 = memory.alloc_tensor(%storage_01030, 0 /* ty=int64 */, meta[relay.Constant][1250] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1043]) /* ty=int64 */;
      %3646 = fn (%p0840: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0840) /* ty=int64 */
      };
      %3647 = (%shape_func_out_0194,);
      %3648 = (%tensor_0842,);
      let %x1313: () = vm.invoke_tvm_op(%3646, %3647, %3648) /* ty=() */;
      let %storage_01031: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1044]) /* ty=Storage[] */;
      let %tensor_0843: int64 = memory.alloc_tensor(%storage_01031, 0 /* ty=int64 */, meta[relay.Constant][1251] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1044]) /* ty=int64 */;
      %3649 = fn (%p0841: int64, Primitive=1) -> int64 {
        multiply(%p0841, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3650 = (%tensor_0842,);
      %3651 = (%tensor_0843,);
      let %x1314: () = vm.invoke_tvm_op(%3649, %3650, %3651) /* ty=() */;
      let %storage_01032: Storage[] = memory.alloc_storage(%tensor_0843, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1045]) /* ty=Storage[] */;
      let %out_0188: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01032, 0 /* ty=int64 */, %shape_func_out_0194, meta[relay.attrs.AllocTensorAttrs][1045]) /* ty=Tensor[(?, ?), float32] */;
      %3652 = (%x1306, %x1310, %x1312, meta[relay.Constant][1249] /* ty=Tensor[(2), int32] */);
      %3653 = (%out_0188,);
      let %x1315: () = vm.invoke_tvm_op(%3643, %3652, %3653) /* ty=() */;
      let %x1316: Tensor[(?, ?), float32] = %out_0188;
      let %storage_01033: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1046]) /* ty=Storage[] */;
      let %tensor_0844: Tensor[(2), int32] = memory.alloc_tensor(%storage_01033, 0 /* ty=int64 */, meta[relay.Constant][1252] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1046]) /* ty=Tensor[(2), int32] */;
      %3654 = fn (%p0842: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p0842, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %3655 = (%x1316,);
      %3656 = (%tensor_0844,);
      let %x1317: () = vm.invoke_tvm_op(%3654, %3655, %3656) /* ty=() */;
      let %x1318: Tensor[(2), int32] = %tensor_0844;
      let %storage_01034: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1047]) /* ty=Storage[] */;
      let %tensor_0845: Tensor[(1), int64] = memory.alloc_tensor(%storage_01034, 0 /* ty=int64 */, meta[relay.Constant][1253] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1047]) /* ty=Tensor[(1), int64] */;
      %3659 = fn (%p0843: Tensor[(2), int32], Primitive=1) -> Tensor[(1), int64] {
        %3657 = take(%p0843, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
        %3658 = expand_dims(%3657, axis=0) /* ty=Tensor[(1), int32] */;
        cast(%3658, dtype="int64") /* ty=Tensor[(1), int64] */
      };
      %3660 = (%x1318,);
      %3661 = (%tensor_0845,);
      let %x1319: () = vm.invoke_tvm_op(%3659, %3660, %3661) /* ty=() */;
      let %x1320: Tensor[(1), int64] = %tensor_0845;
      let %storage_01035: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1048]) /* ty=Storage[] */;
      let %tensor_0846: Tensor[(2), int64] = memory.alloc_tensor(%storage_01035, 0 /* ty=int64 */, meta[relay.Constant][1254] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1048]) /* ty=Tensor[(2), int64] */;
      %3665 = fn (%p0844: int64, %p1297: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %3662 = expand_dims(%p0844, axis=0) /* ty=Tensor[(1), int64] */;
        %3663 = cast(%3662, dtype="int64") /* ty=Tensor[(1), int64] */;
        %3664 = (%p1297, %3663);
        concatenate(%3664) /* ty=Tensor[(2), int64] */
      };
      %3666 = (%x1198, %x1320);
      %3667 = (%tensor_0846,);
      let %x1321: () = vm.invoke_tvm_op(%3665, %3666, %3667) /* ty=() */;
      let %x1322: Tensor[(2), int64] = %tensor_0846;
      let %in_shape_1116: Tensor[(2), int64] = %x1322;
      let %storage_01036: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1049]) /* ty=Storage[] */;
      let %tensor_0847: Tensor[(2), int64] = memory.alloc_tensor(%storage_01036, 0 /* ty=int64 */, meta[relay.Constant][1255] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1049]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0195: Tensor[(2), int64] = %tensor_0847;
      %3668 = fn (%p0845: int32, %p1298: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p0845, %p1298, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      %3669 = (0 /* ty=int32 */, %in_shape_1116);
      %3670 = (%shape_func_out_0195,);
      let %shape_func195: () = vm.shape_func(%3668, %3669, %3670, meta[relay.attrs.ShapeFuncAttrs][195]) /* ty=() */;
      let %storage_01037: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1050]) /* ty=Storage[] */;
      let %tensor_0848: int64 = memory.alloc_tensor(%storage_01037, 0 /* ty=int64 */, meta[relay.Constant][1256] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1050]) /* ty=int64 */;
      %3671 = fn (%p0846: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0846) /* ty=int64 */
      };
      %3672 = (%shape_func_out_0195,);
      %3673 = (%tensor_0848,);
      let %x1323: () = vm.invoke_tvm_op(%3671, %3672, %3673) /* ty=() */;
      let %storage_01038: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1051]) /* ty=Storage[] */;
      let %tensor_0849: int64 = memory.alloc_tensor(%storage_01038, 0 /* ty=int64 */, meta[relay.Constant][1257] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1051]) /* ty=int64 */;
      %3674 = fn (%p0847: int64, Primitive=1) -> int64 {
        multiply(%p0847, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3675 = (%tensor_0848,);
      %3676 = (%tensor_0849,);
      let %x1324: () = vm.invoke_tvm_op(%3674, %3675, %3676) /* ty=() */;
      let %storage_01039: Storage[] = memory.alloc_storage(%tensor_0849, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1052]) /* ty=Storage[] */;
      let %out_0189: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01039, 0 /* ty=int64 */, %shape_func_out_0195, meta[relay.attrs.AllocTensorAttrs][1052]) /* ty=Tensor[(?, ?), float32] */;
      %3677 = (0 /* ty=int32 */, %x1322);
      %3678 = (%out_0189,);
      let %x1325: () = vm.invoke_tvm_op(%3668, %3677, %3678) /* ty=() */;
      let %x1326: Tensor[(?, ?), float32] = %out_0189;
      let %storage_01040: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1053]) /* ty=Storage[] */;
      let %tensor_0850: Tensor[(2), int64] = memory.alloc_tensor(%storage_01040, 0 /* ty=int64 */, meta[relay.Constant][1258] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1053]) /* ty=Tensor[(2), int64] */;
      %3683 = fn (%p0848: int64, %p1299: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %3679 = subtract(300 /* ty=int64 */, %p0848) /* ty=int64 */;
        %3680 = expand_dims(%3679, axis=0) /* ty=Tensor[(1), int64] */;
        %3681 = cast(%3680, dtype="int64") /* ty=Tensor[(1), int64] */;
        %3682 = (%p1299, %3681);
        concatenate(%3682) /* ty=Tensor[(2), int64] */
      };
      %3684 = (%x1266, %x1320);
      %3685 = (%tensor_0850,);
      let %x1327: () = vm.invoke_tvm_op(%3683, %3684, %3685) /* ty=() */;
      let %x1328: Tensor[(2), int64] = %tensor_0850;
      let %in_shape_1117: Tensor[(2), int64] = %x1328;
      let %storage_01041: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1054]) /* ty=Storage[] */;
      let %tensor_0851: Tensor[(2), int64] = memory.alloc_tensor(%storage_01041, 0 /* ty=int64 */, meta[relay.Constant][1259] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1054]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0196: Tensor[(2), int64] = %tensor_0851;
      %3686 = fn (%p0849: int32, %p1300: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p0849, %p1300, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      %3687 = (0 /* ty=int32 */, %in_shape_1117);
      %3688 = (%shape_func_out_0196,);
      let %shape_func196: () = vm.shape_func(%3686, %3687, %3688, meta[relay.attrs.ShapeFuncAttrs][196]) /* ty=() */;
      let %storage_01042: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1055]) /* ty=Storage[] */;
      let %tensor_0852: int64 = memory.alloc_tensor(%storage_01042, 0 /* ty=int64 */, meta[relay.Constant][1260] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1055]) /* ty=int64 */;
      %3689 = fn (%p0850: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0850) /* ty=int64 */
      };
      %3690 = (%shape_func_out_0196,);
      %3691 = (%tensor_0852,);
      let %x1329: () = vm.invoke_tvm_op(%3689, %3690, %3691) /* ty=() */;
      let %storage_01043: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1056]) /* ty=Storage[] */;
      let %tensor_0853: int64 = memory.alloc_tensor(%storage_01043, 0 /* ty=int64 */, meta[relay.Constant][1261] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1056]) /* ty=int64 */;
      %3692 = fn (%p0851: int64, Primitive=1) -> int64 {
        multiply(%p0851, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3693 = (%tensor_0852,);
      %3694 = (%tensor_0853,);
      let %x1330: () = vm.invoke_tvm_op(%3692, %3693, %3694) /* ty=() */;
      let %storage_01044: Storage[] = memory.alloc_storage(%tensor_0853, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1057]) /* ty=Storage[] */;
      let %out_0190: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01044, 0 /* ty=int64 */, %shape_func_out_0196, meta[relay.attrs.AllocTensorAttrs][1057]) /* ty=Tensor[(?, ?), float32] */;
      %3695 = (0 /* ty=int32 */, %x1328);
      %3696 = (%out_0190,);
      let %x1331: () = vm.invoke_tvm_op(%3686, %3695, %3696) /* ty=() */;
      let %x1332: Tensor[(?, ?), float32] = %out_0190;
      let %in_shape_0176: Tensor[(2), int64] = vm.shape_of(%x1326, meta[relay.attrs.ShapeOfAttrs][250]) /* ty=Tensor[(2), int64] */;
      let %in_shape_1118: Tensor[(2), int64] = vm.shape_of(%x1332, meta[relay.attrs.ShapeOfAttrs][251]) /* ty=Tensor[(2), int64] */;
      let %in_shape_279: Tensor[(2), int64] = vm.shape_of(%x1316, meta[relay.attrs.ShapeOfAttrs][252]) /* ty=Tensor[(2), int64] */;
      let %storage_01045: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1058]) /* ty=Storage[] */;
      let %tensor_0854: Tensor[(2), int64] = memory.alloc_tensor(%storage_01045, 0 /* ty=int64 */, meta[relay.Constant][1262] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1058]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0197: Tensor[(2), int64] = %tensor_0854;
      %3700 = fn (%p0852: Tensor[(?, ?), float32], %p1301: Tensor[(?, ?), float32], %p2243: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
        %3697 = reshape(%p0852, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %3698 = reshape(%p1301, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %3699 = (%3697, %p2243, %3698);
        concatenate(%3699, axis=1) /* ty=Tensor[(?, ?), float32] */
      };
      %3701 = (%in_shape_0176, %in_shape_1118, %in_shape_279);
      %3702 = (%shape_func_out_0197,);
      let %shape_func197: () = vm.shape_func(%3700, %3701, %3702, meta[relay.attrs.ShapeFuncAttrs][197]) /* ty=() */;
      let %storage_01046: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1059]) /* ty=Storage[] */;
      let %tensor_0855: int64 = memory.alloc_tensor(%storage_01046, 0 /* ty=int64 */, meta[relay.Constant][1263] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1059]) /* ty=int64 */;
      %3703 = fn (%p0853: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0853) /* ty=int64 */
      };
      %3704 = (%shape_func_out_0197,);
      %3705 = (%tensor_0855,);
      let %x1333: () = vm.invoke_tvm_op(%3703, %3704, %3705) /* ty=() */;
      let %storage_01047: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1060]) /* ty=Storage[] */;
      let %tensor_0856: int64 = memory.alloc_tensor(%storage_01047, 0 /* ty=int64 */, meta[relay.Constant][1264] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1060]) /* ty=int64 */;
      %3706 = fn (%p0854: int64, Primitive=1) -> int64 {
        multiply(%p0854, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3707 = (%tensor_0855,);
      %3708 = (%tensor_0856,);
      let %x1334: () = vm.invoke_tvm_op(%3706, %3707, %3708) /* ty=() */;
      let %storage_01048: Storage[] = memory.alloc_storage(%tensor_0856, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1061]) /* ty=Storage[] */;
      let %out_0191: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01048, 0 /* ty=int64 */, %shape_func_out_0197, meta[relay.attrs.AllocTensorAttrs][1061]) /* ty=Tensor[(?, ?), float32] */;
      %3709 = (%x1326, %x1332, %x1316);
      %3710 = (%out_0191,);
      let %x1335: () = vm.invoke_tvm_op(%3700, %3709, %3710) /* ty=() */;
      let %x1336: Tensor[(?, ?), float32] = %out_0191;
      let %storage_01049: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1062]) /* ty=Storage[] */;
      let %tensor_0857: Tensor[(2), int32] = memory.alloc_tensor(%storage_01049, 0 /* ty=int64 */, meta[relay.Constant][1265] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1062]) /* ty=Tensor[(2), int32] */;
      %3711 = fn (%p0855: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p0855, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %3712 = (%x1336,);
      %3713 = (%tensor_0857,);
      let %x1337: () = vm.invoke_tvm_op(%3711, %3712, %3713) /* ty=() */;
      let %x1338: Tensor[(2), int32] = %tensor_0857;
      let %storage_01050: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1063]) /* ty=Storage[] */;
      let %tensor_0858: Tensor[(2), int32] = memory.alloc_tensor(%storage_01050, 0 /* ty=int64 */, meta[relay.Constant][1266] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1063]) /* ty=Tensor[(2), int32] */;
      %3716 = fn (%p0856: Tensor[(2), int32], %p1302: Tensor[(2), int32], %p2244: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
        %3714 = cast_like(%p0856, %p1302) /* ty=Tensor[(2), int32] */;
        %3715 = add(%p1302, %3714) /* ty=Tensor[(2), int32] */;
        where(%p2244, %3715, %p1302) /* ty=Tensor[(2), int32] */
      };
      %3717 = (%x1338, meta[relay.Constant][1267] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1268] /* ty=Tensor[(2), bool] */);
      %3718 = (%tensor_0858,);
      let %x1339: () = vm.invoke_tvm_op(%3716, %3717, %3718) /* ty=() */;
      let %x1340: Tensor[(2), int32] = %tensor_0858;
      let %storage_01051: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1064]) /* ty=Storage[] */;
      let %tensor_0859: Tensor[(2), int64] = memory.alloc_tensor(%storage_01051, 0 /* ty=int64 */, meta[relay.Constant][1269] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1064]) /* ty=Tensor[(2), int64] */;
      %3719 = fn (%p0857: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p0857, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %3720 = (%x1338,);
      %3721 = (%tensor_0859,);
      let %x1341: () = vm.invoke_tvm_op(%3719, %3720, %3721) /* ty=() */;
      let %x1342: Tensor[(2), int64] = %tensor_0859;
      let %in_shape_0177: Tensor[(2), int64] = vm.shape_of(%x1336, meta[relay.attrs.ShapeOfAttrs][253]) /* ty=Tensor[(2), int64] */;
      let %in_shape_1119: Tensor[(2), int32] = %x1340;
      let %in_shape_280: Tensor[(2), int64] = %x1342;
      let %storage_01052: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1065]) /* ty=Storage[] */;
      let %tensor_0860: Tensor[(2), int64] = memory.alloc_tensor(%storage_01052, 0 /* ty=int64 */, meta[relay.Constant][1270] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1065]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0198: Tensor[(2), int64] = %tensor_0860;
      %3722 = fn (%p0858: Tensor[(?, ?), float32], %p1303: Tensor[(2), int32], %p2245: Tensor[(2), int64], %p395: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p0858, %p1303, %p2245, %p395, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %3723 = (%in_shape_0177, %in_shape_1119, %in_shape_280, meta[relay.Constant][1271] /* ty=Tensor[(2), int32] */);
      %3724 = (%shape_func_out_0198,);
      let %shape_func198: () = vm.shape_func(%3722, %3723, %3724, meta[relay.attrs.ShapeFuncAttrs][198]) /* ty=() */;
      let %storage_01053: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1066]) /* ty=Storage[] */;
      let %tensor_0861: int64 = memory.alloc_tensor(%storage_01053, 0 /* ty=int64 */, meta[relay.Constant][1272] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1066]) /* ty=int64 */;
      %3725 = fn (%p0859: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0859) /* ty=int64 */
      };
      %3726 = (%shape_func_out_0198,);
      %3727 = (%tensor_0861,);
      let %x1343: () = vm.invoke_tvm_op(%3725, %3726, %3727) /* ty=() */;
      let %storage_01054: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1067]) /* ty=Storage[] */;
      let %tensor_0862: int64 = memory.alloc_tensor(%storage_01054, 0 /* ty=int64 */, meta[relay.Constant][1273] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1067]) /* ty=int64 */;
      %3728 = fn (%p0860: int64, Primitive=1) -> int64 {
        multiply(%p0860, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3729 = (%tensor_0861,);
      %3730 = (%tensor_0862,);
      let %x1344: () = vm.invoke_tvm_op(%3728, %3729, %3730) /* ty=() */;
      let %storage_01055: Storage[] = memory.alloc_storage(%tensor_0862, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1068]) /* ty=Storage[] */;
      let %out_0192: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01055, 0 /* ty=int64 */, %shape_func_out_0198, meta[relay.attrs.AllocTensorAttrs][1068]) /* ty=Tensor[(?, ?), float32] */;
      %3731 = (%x1336, %x1340, %x1342, meta[relay.Constant][1271] /* ty=Tensor[(2), int32] */);
      %3732 = (%out_0192,);
      let %x1345: () = vm.invoke_tvm_op(%3722, %3731, %3732) /* ty=() */;
      let %x1346: Tensor[(?, ?), float32] = %out_0192;
      let %storage_01056: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1069]) /* ty=Storage[] */;
      let %tensor_0863: Tensor[(2), int32] = memory.alloc_tensor(%storage_01056, 0 /* ty=int64 */, meta[relay.Constant][1274] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1069]) /* ty=Tensor[(2), int32] */;
      %3733 = fn (%p0861: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p0861, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %3734 = (%x1346,);
      %3735 = (%tensor_0863,);
      let %x1347: () = vm.invoke_tvm_op(%3733, %3734, %3735) /* ty=() */;
      let %x1348: Tensor[(2), int32] = %tensor_0863;
      let %storage_01057: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1070]) /* ty=Storage[] */;
      let %tensor_0864: Tensor[(2), int32] = memory.alloc_tensor(%storage_01057, 0 /* ty=int64 */, meta[relay.Constant][1275] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1070]) /* ty=Tensor[(2), int32] */;
      %3738 = fn (%p0862: Tensor[(2), int32], %p1304: Tensor[(2), int32], %p2246: Tensor[(2), bool], Primitive=1) -> Tensor[(2), int32] {
        %3736 = cast_like(%p0862, %p1304) /* ty=Tensor[(2), int32] */;
        %3737 = add(%p1304, %3736) /* ty=Tensor[(2), int32] */;
        where(%p2246, %3737, %p1304) /* ty=Tensor[(2), int32] */
      };
      %3739 = (%x1348, meta[relay.Constant][1276] /* ty=Tensor[(2), int32] */, meta[relay.Constant][1277] /* ty=Tensor[(2), bool] */);
      %3740 = (%tensor_0864,);
      let %x1349: () = vm.invoke_tvm_op(%3738, %3739, %3740) /* ty=() */;
      let %x1350: Tensor[(2), int32] = %tensor_0864;
      let %storage_01058: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1071]) /* ty=Storage[] */;
      let %tensor_0865: Tensor[(2), int32] = memory.alloc_tensor(%storage_01058, 0 /* ty=int64 */, meta[relay.Constant][1278] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1071]) /* ty=Tensor[(2), int32] */;
      %3741 = fn (%p0863: Tensor[(2), int32], %p1305: Tensor[(1), int32], %p2247: Tensor[(1), int32], Primitive=1) -> Tensor[(2), int32] {
        scatter(%p0863, %p1305, %p2247, meta[relay.attrs.ScatterAttrs][9]) /* ty=Tensor[(2), int32] */
      };
      %3742 = (%x1348, %x1183, meta[relay.Constant][1237] /* ty=Tensor[(1), int32] */);
      %3743 = (%tensor_0865,);
      let %x1351: () = vm.invoke_tvm_op(%3741, %3742, %3743) /* ty=() */;
      let %x1352: Tensor[(2), int32] = %tensor_0865;
      let %storage_01059: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1072]) /* ty=Storage[] */;
      let %tensor_0866: Tensor[(2), int64] = memory.alloc_tensor(%storage_01059, 0 /* ty=int64 */, meta[relay.Constant][1279] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1072]) /* ty=Tensor[(2), int64] */;
      %3744 = fn (%p0864: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p0864, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %3745 = (%x1352,);
      %3746 = (%tensor_0866,);
      let %x1353: () = vm.invoke_tvm_op(%3744, %3745, %3746) /* ty=() */;
      let %x1354: Tensor[(2), int64] = %tensor_0866;
      let %in_shape_0178: Tensor[(2), int64] = vm.shape_of(%x1346, meta[relay.attrs.ShapeOfAttrs][254]) /* ty=Tensor[(2), int64] */;
      let %in_shape_1120: Tensor[(2), int32] = %x1350;
      let %in_shape_281: Tensor[(2), int64] = %x1354;
      let %storage_01060: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1073]) /* ty=Storage[] */;
      let %tensor_0867: Tensor[(2), int64] = memory.alloc_tensor(%storage_01060, 0 /* ty=int64 */, meta[relay.Constant][1280] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1073]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0199: Tensor[(2), int64] = %tensor_0867;
      %3747 = fn (%p0865: Tensor[(?, ?), float32], %p1306: Tensor[(2), int32], %p2248: Tensor[(2), int64], %p396: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p0865, %p1306, %p2248, %p396, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %3748 = (%in_shape_0178, %in_shape_1120, %in_shape_281, meta[relay.Constant][1281] /* ty=Tensor[(2), int32] */);
      %3749 = (%shape_func_out_0199,);
      let %shape_func199: () = vm.shape_func(%3747, %3748, %3749, meta[relay.attrs.ShapeFuncAttrs][199]) /* ty=() */;
      let %storage_01061: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1074]) /* ty=Storage[] */;
      let %tensor_0868: int64 = memory.alloc_tensor(%storage_01061, 0 /* ty=int64 */, meta[relay.Constant][1282] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1074]) /* ty=int64 */;
      %3750 = fn (%p0866: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0866) /* ty=int64 */
      };
      %3751 = (%shape_func_out_0199,);
      %3752 = (%tensor_0868,);
      let %x1355: () = vm.invoke_tvm_op(%3750, %3751, %3752) /* ty=() */;
      let %storage_01062: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1075]) /* ty=Storage[] */;
      let %tensor_0869: int64 = memory.alloc_tensor(%storage_01062, 0 /* ty=int64 */, meta[relay.Constant][1283] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1075]) /* ty=int64 */;
      %3753 = fn (%p0867: int64, Primitive=1) -> int64 {
        multiply(%p0867, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3754 = (%tensor_0868,);
      %3755 = (%tensor_0869,);
      let %x1356: () = vm.invoke_tvm_op(%3753, %3754, %3755) /* ty=() */;
      let %storage_01063: Storage[] = memory.alloc_storage(%tensor_0869, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1076]) /* ty=Storage[] */;
      let %out_0193: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01063, 0 /* ty=int64 */, %shape_func_out_0199, meta[relay.attrs.AllocTensorAttrs][1076]) /* ty=Tensor[(?, ?), float32] */;
      %3756 = (%x1346, %x1350, %x1354, meta[relay.Constant][1281] /* ty=Tensor[(2), int32] */);
      %3757 = (%out_0193,);
      let %x1357: () = vm.invoke_tvm_op(%3747, %3756, %3757) /* ty=() */;
      let %x1358: Tensor[(?, ?), float32] = %out_0193;
      let %in_shape_0179: Tensor[(2), int64] = vm.shape_of(%x1358, meta[relay.attrs.ShapeOfAttrs][255]) /* ty=Tensor[(2), int64] */;
      let %in_shape_1121: Tensor[(3), int64] = vm.shape_of(%res_append.6, meta[relay.attrs.ShapeOfAttrs][256]) /* ty=Tensor[(3), int64] */;
      let %storage_01064: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1077]) /* ty=Storage[] */;
      let %tensor_0870: Tensor[(3), int64] = memory.alloc_tensor(%storage_01064, 0 /* ty=int64 */, meta[relay.Constant][1284] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1077]) /* ty=Tensor[(3), int64] */;
      let %shape_func_out_0200: Tensor[(3), int64] = %tensor_0870;
      %3760 = fn (%p0868: Tensor[(?, ?), float32], %p1307: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
        %3758 = expand_dims(%p0868, axis=0) /* ty=Tensor[(1, ?, ?), float32] */;
        %3759 = (%p1307, %3758);
        concatenate(%3759) /* ty=Tensor[(?, ?, ?), float32] */
      };
      %3761 = (%in_shape_0179, %in_shape_1121);
      %3762 = (%shape_func_out_0200,);
      let %shape_func200: () = vm.shape_func(%3760, %3761, %3762, meta[relay.attrs.ShapeFuncAttrs][200]) /* ty=() */;
      let %storage_01065: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1078]) /* ty=Storage[] */;
      let %tensor_0871: int64 = memory.alloc_tensor(%storage_01065, 0 /* ty=int64 */, meta[relay.Constant][1285] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1078]) /* ty=int64 */;
      %3763 = fn (%p0869: Tensor[(3), int64], Primitive=1) -> int64 {
        prod(%p0869) /* ty=int64 */
      };
      %3764 = (%shape_func_out_0200,);
      %3765 = (%tensor_0871,);
      let %x1359: () = vm.invoke_tvm_op(%3763, %3764, %3765) /* ty=() */;
      let %storage_01066: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1079]) /* ty=Storage[] */;
      let %tensor_0872: int64 = memory.alloc_tensor(%storage_01066, 0 /* ty=int64 */, meta[relay.Constant][1286] /* ty=Tensor[(0), int64] */, meta[relay.attrs.AllocTensorAttrs][1079]) /* ty=int64 */;
      %3766 = fn (%p0870: int64, Primitive=1) -> int64 {
        multiply(%p0870, 4 /* ty=int64 */) /* ty=int64 */
      };
      %3767 = (%tensor_0871,);
      %3768 = (%tensor_0872,);
      let %x1360: () = vm.invoke_tvm_op(%3766, %3767, %3768) /* ty=() */;
      let %storage_01067: Storage[] = memory.alloc_storage(%tensor_0872, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1080]) /* ty=Storage[] */;
      let %out_0194: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_01067, 0 /* ty=int64 */, %shape_func_out_0200, meta[relay.attrs.AllocTensorAttrs][1080]) /* ty=Tensor[(?, ?, ?), float32] */;
      %3769 = (%x1358, %res_append.6);
      %3770 = (%out_0194,);
      let %x1361: () = vm.invoke_tvm_op(%3760, %3769, %3770) /* ty=() */;
      let %x1362: Tensor[(?, ?, ?), float32] = %out_0194;
      %3771 = @lifted_name6846283260542760146(%x1182, %x1183) /* ty=fn (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) */;
      let %x1363: (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = %3771(%x1190, %x1362, %v7286, %v7394) /* ty=(int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) */;
      %x1363
    } else {
      let %x1364: (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = (%i.1, %res_append.6, %v7286, %v7394);
      %x1364
    };
    %x1188
  }
}


