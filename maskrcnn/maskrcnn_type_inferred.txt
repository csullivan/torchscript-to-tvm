type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type Option[A] {
  Some(A),
  None,
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

def @main(%input0: Tensor[(1, 3, 300, 300), float32], %model.backbone.body.conv1.weight: Tensor[(64, 3, 7, 7), float32], %model.backbone.body.bn1.weight: Tensor[(64), float32], %model.backbone.body.bn1.running_var: Tensor[(64), float32], %model.backbone.body.bn1.bias: Tensor[(64), float32], %model.backbone.body.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.0.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.downsample.1.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.1.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.1.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.1.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.2.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.2.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.2.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32], %model.backbone.body.layer2.0.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.0.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.0.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %model.backbone.body.layer2.0.downsample.1.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.1.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.1.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.1.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.2.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.2.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.2.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.3.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.3.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.3.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.body.layer3.0.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.0.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.0.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32], %model.backbone.body.layer3.0.downsample.1.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.1.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.1.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.1.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.2.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.2.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.2.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.3.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.3.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.3.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.4.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.4.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.4.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.5.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.5.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.5.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32], %model.backbone.body.layer4.0.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.0.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.0.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32], %model.backbone.body.layer4.0.downsample.1.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.1.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.1.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.1.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.2.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.2.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.2.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_mean: Tensor[(2048), float32], %model.backbone.fpn.inner_blocks.0.weight: Tensor[(256, 256, 1, 1), float32], %model.backbone.fpn.inner_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.fpn.inner_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.2.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.fpn.inner_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.3.weight: Tensor[(256, 2048, 1, 1), float32], %model.backbone.fpn.inner_blocks.3.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.0.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.1.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.3.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.3.bias: Tensor[(256), float32], %model.rpn.head.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.rpn.head.conv.bias: Tensor[(256), float32], %model.rpn.head.cls_logits.weight: Tensor[(3, 256, 1, 1), float32], %model.rpn.head.cls_logits.bias: Tensor[(3), float32], %model.rpn.head.bbox_pred.weight: Tensor[(12, 256, 1, 1), float32], %model.rpn.head.bbox_pred.bias: Tensor[(12), float32], %model.roi_heads.box_head.fc6.weight: Tensor[(1024, 12544), float32], %model.roi_heads.box_head.fc6.bias: Tensor[(1024), float32], %model.roi_heads.box_head.fc7.weight: Tensor[(1024, 1024), float32], %model.roi_heads.box_head.fc7.bias: Tensor[(1024), float32], %model.roi_heads.box_predictor.cls_score.weight: Tensor[(91, 1024), float32], %model.roi_heads.box_predictor.cls_score.bias: Tensor[(91), float32], %model.roi_heads.box_predictor.bbox_pred.weight: Tensor[(364, 1024), float32], %model.roi_heads.box_predictor.bbox_pred.bias: Tensor[(364), float32], %model.roi_heads.mask_head.mask_fcn1.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn1.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn2.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn2.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn3.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn3.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn4.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn4.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.conv5_mask.weight: Tensor[(256, 256, 2, 2), float32], %model.roi_heads.mask_predictor.conv5_mask.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.weight: Tensor[(91, 256, 1, 1), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.bias: Tensor[(91), float32]) -> (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) {
  %0 = split(%input0, indices_or_sections=1) /* ty=(Tensor[(1, 3, 300, 300), float32],) */;
  %1 = %0.0;
  %2 = squeeze(%1, axis=[0]) /* ty=Tensor[(3, 300, 300), float32] */;
  %3 = (%2,);
  %4 = %3.0;
  %5 = expand_dims(meta[relay.Constant][0] /* ty=Tensor[(3), float32] */, axis=1) /* ty=Tensor[(3, 1), float32] */;
  %6 = expand_dims(%5, axis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %7 = subtract(%4, %6) /* ty=Tensor[(3, 300, 300), float32] */;
  %8 = expand_dims(meta[relay.Constant][1] /* ty=Tensor[(3), float32] */, axis=1) /* ty=Tensor[(3, 1), float32] */;
  %9 = expand_dims(%8, axis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %10 = divide(%7, %9) /* ty=Tensor[(3, 300, 300), float32] */;
  %11 = expand_dims(%10, axis=0) /* ty=Tensor[(1, 3, 300, 300), float32] */;
  %12 = image.resize(%11, size=[800, 800]) /* ty=Tensor[(1, 3, 800, 800), float32] */;
  %13 = take(%12, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(3, 800, 800), float32] */;
  %14 = nn.pad(%13, pad_width=[[0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(3, 800, 800), float32] */;
  %15 = (%14,);
  %16 = stack(%15) /* ty=Tensor[(1, 3, 800, 800), float32] */;
  %17 = (%16, 800 /* ty=int32 */, 800 /* ty=int32 */);
  %18 = %17.0;
  %19 = nn.conv2d(%18, %model.backbone.body.conv1.weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 400, 400), float32] */;
  %20 = reshape(%model.backbone.body.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %21 = reshape(%model.backbone.body.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %22 = add(%21, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %23 = rsqrt(%22) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %24 = multiply(%20, %23) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %25 = multiply(%19, %24) /* ty=Tensor[(1, 64, 400, 400), float32] */;
  %26 = reshape(%model.backbone.body.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %27 = reshape(%model.backbone.body.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %28 = multiply(%27, %24) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %29 = subtract(%26, %28) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %30 = add(%25, %29) /* ty=Tensor[(1, 64, 400, 400), float32] */;
  %31 = nn.relu(%30) /* ty=Tensor[(1, 64, 400, 400), float32] */;
  %32 = nn.max_pool2d(%31, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %33 = nn.conv2d(%32, %model.backbone.body.layer1.0.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %34 = reshape(%model.backbone.body.layer1.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %35 = reshape(%model.backbone.body.layer1.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %36 = add(%35, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %37 = rsqrt(%36) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %38 = multiply(%34, %37) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %39 = multiply(%33, %38) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %40 = reshape(%model.backbone.body.layer1.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %41 = reshape(%model.backbone.body.layer1.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %42 = multiply(%41, %38) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %43 = subtract(%40, %42) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %44 = add(%39, %43) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %45 = nn.relu(%44) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %46 = nn.conv2d(%45, %model.backbone.body.layer1.0.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %47 = reshape(%model.backbone.body.layer1.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %48 = reshape(%model.backbone.body.layer1.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %49 = add(%48, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %50 = rsqrt(%49) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %51 = multiply(%47, %50) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %52 = multiply(%46, %51) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %53 = reshape(%model.backbone.body.layer1.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %54 = reshape(%model.backbone.body.layer1.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %55 = multiply(%54, %51) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %56 = subtract(%53, %55) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %57 = add(%52, %56) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %58 = nn.relu(%57) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %59 = nn.conv2d(%58, %model.backbone.body.layer1.0.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %60 = reshape(%model.backbone.body.layer1.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %61 = reshape(%model.backbone.body.layer1.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %62 = add(%61, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %63 = rsqrt(%62) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %64 = multiply(%60, %63) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %65 = multiply(%59, %64) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %66 = reshape(%model.backbone.body.layer1.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %67 = reshape(%model.backbone.body.layer1.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %68 = multiply(%67, %64) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %69 = subtract(%66, %68) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %70 = add(%65, %69) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %71 = nn.conv2d(%32, %model.backbone.body.layer1.0.downsample.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %72 = reshape(%model.backbone.body.layer1.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %73 = reshape(%model.backbone.body.layer1.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %74 = add(%73, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %75 = rsqrt(%74) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %76 = multiply(%72, %75) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %77 = multiply(%71, %76) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %78 = reshape(%model.backbone.body.layer1.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %79 = reshape(%model.backbone.body.layer1.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %80 = multiply(%79, %76) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %81 = subtract(%78, %80) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %82 = add(%77, %81) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %83 = add(%70, %82) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %84 = nn.relu(%83) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %85 = nn.conv2d(%84, %model.backbone.body.layer1.1.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %86 = reshape(%model.backbone.body.layer1.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %87 = reshape(%model.backbone.body.layer1.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %88 = add(%87, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %89 = rsqrt(%88) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %90 = multiply(%86, %89) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %91 = multiply(%85, %90) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %92 = reshape(%model.backbone.body.layer1.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %93 = reshape(%model.backbone.body.layer1.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %94 = multiply(%93, %90) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %95 = subtract(%92, %94) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %96 = add(%91, %95) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %97 = nn.relu(%96) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %98 = nn.conv2d(%97, %model.backbone.body.layer1.1.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %99 = reshape(%model.backbone.body.layer1.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %100 = reshape(%model.backbone.body.layer1.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %101 = add(%100, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %102 = rsqrt(%101) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %103 = multiply(%99, %102) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %104 = multiply(%98, %103) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %105 = reshape(%model.backbone.body.layer1.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %106 = reshape(%model.backbone.body.layer1.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %107 = multiply(%106, %103) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %108 = subtract(%105, %107) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %109 = add(%104, %108) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %110 = nn.relu(%109) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %111 = nn.conv2d(%110, %model.backbone.body.layer1.1.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %112 = reshape(%model.backbone.body.layer1.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %113 = reshape(%model.backbone.body.layer1.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %114 = add(%113, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %115 = rsqrt(%114) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %116 = multiply(%112, %115) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %117 = multiply(%111, %116) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %118 = reshape(%model.backbone.body.layer1.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %119 = reshape(%model.backbone.body.layer1.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %120 = multiply(%119, %116) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %121 = subtract(%118, %120) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %122 = add(%117, %121) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %123 = add(%122, %84) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %124 = nn.relu(%123) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %125 = nn.conv2d(%124, %model.backbone.body.layer1.2.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %126 = reshape(%model.backbone.body.layer1.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %127 = reshape(%model.backbone.body.layer1.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %128 = add(%127, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %129 = rsqrt(%128) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %130 = multiply(%126, %129) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %131 = multiply(%125, %130) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %132 = reshape(%model.backbone.body.layer1.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %133 = reshape(%model.backbone.body.layer1.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %134 = multiply(%133, %130) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %135 = subtract(%132, %134) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %136 = add(%131, %135) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %137 = nn.relu(%136) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %138 = nn.conv2d(%137, %model.backbone.body.layer1.2.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %139 = reshape(%model.backbone.body.layer1.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %140 = reshape(%model.backbone.body.layer1.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %141 = add(%140, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %142 = rsqrt(%141) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %143 = multiply(%139, %142) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %144 = multiply(%138, %143) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %145 = reshape(%model.backbone.body.layer1.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %146 = reshape(%model.backbone.body.layer1.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %147 = multiply(%146, %143) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %148 = subtract(%145, %147) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %149 = add(%144, %148) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %150 = nn.relu(%149) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %151 = nn.conv2d(%150, %model.backbone.body.layer1.2.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %152 = reshape(%model.backbone.body.layer1.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %153 = reshape(%model.backbone.body.layer1.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %154 = add(%153, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %155 = rsqrt(%154) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %156 = multiply(%152, %155) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %157 = multiply(%151, %156) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %158 = reshape(%model.backbone.body.layer1.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %159 = reshape(%model.backbone.body.layer1.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %160 = multiply(%159, %156) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %161 = subtract(%158, %160) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %162 = add(%157, %161) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %163 = add(%162, %124) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %164 = nn.relu(%163) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %165 = nn.conv2d(%164, %model.backbone.body.layer2.0.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 200, 200), float32] */;
  %166 = reshape(%model.backbone.body.layer2.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %167 = reshape(%model.backbone.body.layer2.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %168 = add(%167, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %169 = rsqrt(%168) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %170 = multiply(%166, %169) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %171 = multiply(%165, %170) /* ty=Tensor[(1, 128, 200, 200), float32] */;
  %172 = reshape(%model.backbone.body.layer2.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %173 = reshape(%model.backbone.body.layer2.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %174 = multiply(%173, %170) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %175 = subtract(%172, %174) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %176 = add(%171, %175) /* ty=Tensor[(1, 128, 200, 200), float32] */;
  %177 = nn.relu(%176) /* ty=Tensor[(1, 128, 200, 200), float32] */;
  %178 = nn.conv2d(%177, %model.backbone.body.layer2.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %179 = reshape(%model.backbone.body.layer2.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %180 = reshape(%model.backbone.body.layer2.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %181 = add(%180, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %182 = rsqrt(%181) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %183 = multiply(%179, %182) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %184 = multiply(%178, %183) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %185 = reshape(%model.backbone.body.layer2.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %186 = reshape(%model.backbone.body.layer2.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %187 = multiply(%186, %183) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %188 = subtract(%185, %187) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %189 = add(%184, %188) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %190 = nn.relu(%189) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %191 = nn.conv2d(%190, %model.backbone.body.layer2.0.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %192 = reshape(%model.backbone.body.layer2.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %193 = reshape(%model.backbone.body.layer2.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %194 = add(%193, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %195 = rsqrt(%194) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %196 = multiply(%192, %195) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %197 = multiply(%191, %196) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %198 = reshape(%model.backbone.body.layer2.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %199 = reshape(%model.backbone.body.layer2.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %200 = multiply(%199, %196) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %201 = subtract(%198, %200) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %202 = add(%197, %201) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %203 = nn.conv2d(%164, %model.backbone.body.layer2.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %204 = reshape(%model.backbone.body.layer2.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %205 = reshape(%model.backbone.body.layer2.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %206 = add(%205, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %207 = rsqrt(%206) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %208 = multiply(%204, %207) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %209 = multiply(%203, %208) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %210 = reshape(%model.backbone.body.layer2.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %211 = reshape(%model.backbone.body.layer2.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %212 = multiply(%211, %208) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %213 = subtract(%210, %212) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %214 = add(%209, %213) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %215 = add(%202, %214) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %216 = nn.relu(%215) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %217 = nn.conv2d(%216, %model.backbone.body.layer2.1.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %218 = reshape(%model.backbone.body.layer2.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %219 = reshape(%model.backbone.body.layer2.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %220 = add(%219, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %221 = rsqrt(%220) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %222 = multiply(%218, %221) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %223 = multiply(%217, %222) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %224 = reshape(%model.backbone.body.layer2.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %225 = reshape(%model.backbone.body.layer2.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %226 = multiply(%225, %222) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %227 = subtract(%224, %226) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %228 = add(%223, %227) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %229 = nn.relu(%228) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %230 = nn.conv2d(%229, %model.backbone.body.layer2.1.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %231 = reshape(%model.backbone.body.layer2.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %232 = reshape(%model.backbone.body.layer2.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %233 = add(%232, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %234 = rsqrt(%233) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %235 = multiply(%231, %234) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %236 = multiply(%230, %235) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %237 = reshape(%model.backbone.body.layer2.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %238 = reshape(%model.backbone.body.layer2.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %239 = multiply(%238, %235) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %240 = subtract(%237, %239) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %241 = add(%236, %240) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %242 = nn.relu(%241) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %243 = nn.conv2d(%242, %model.backbone.body.layer2.1.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %244 = reshape(%model.backbone.body.layer2.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %245 = reshape(%model.backbone.body.layer2.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %246 = add(%245, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %247 = rsqrt(%246) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %248 = multiply(%244, %247) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %249 = multiply(%243, %248) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %250 = reshape(%model.backbone.body.layer2.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %251 = reshape(%model.backbone.body.layer2.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %252 = multiply(%251, %248) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %253 = subtract(%250, %252) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %254 = add(%249, %253) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %255 = add(%254, %216) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %256 = nn.relu(%255) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %257 = nn.conv2d(%256, %model.backbone.body.layer2.2.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %258 = reshape(%model.backbone.body.layer2.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %259 = reshape(%model.backbone.body.layer2.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %260 = add(%259, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %261 = rsqrt(%260) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %262 = multiply(%258, %261) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %263 = multiply(%257, %262) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %264 = reshape(%model.backbone.body.layer2.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %265 = reshape(%model.backbone.body.layer2.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %266 = multiply(%265, %262) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %267 = subtract(%264, %266) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %268 = add(%263, %267) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %269 = nn.relu(%268) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %270 = nn.conv2d(%269, %model.backbone.body.layer2.2.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %271 = reshape(%model.backbone.body.layer2.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %272 = reshape(%model.backbone.body.layer2.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %273 = add(%272, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %274 = rsqrt(%273) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %275 = multiply(%271, %274) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %276 = multiply(%270, %275) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %277 = reshape(%model.backbone.body.layer2.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %278 = reshape(%model.backbone.body.layer2.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %279 = multiply(%278, %275) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %280 = subtract(%277, %279) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %281 = add(%276, %280) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %282 = nn.relu(%281) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %283 = nn.conv2d(%282, %model.backbone.body.layer2.2.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %284 = reshape(%model.backbone.body.layer2.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %285 = reshape(%model.backbone.body.layer2.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %286 = add(%285, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %287 = rsqrt(%286) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %288 = multiply(%284, %287) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %289 = multiply(%283, %288) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %290 = reshape(%model.backbone.body.layer2.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %291 = reshape(%model.backbone.body.layer2.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %292 = multiply(%291, %288) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %293 = subtract(%290, %292) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %294 = add(%289, %293) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %295 = add(%294, %256) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %296 = nn.relu(%295) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %297 = nn.conv2d(%296, %model.backbone.body.layer2.3.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %298 = reshape(%model.backbone.body.layer2.3.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %299 = reshape(%model.backbone.body.layer2.3.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %300 = add(%299, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %301 = rsqrt(%300) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %302 = multiply(%298, %301) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %303 = multiply(%297, %302) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %304 = reshape(%model.backbone.body.layer2.3.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %305 = reshape(%model.backbone.body.layer2.3.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %306 = multiply(%305, %302) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %307 = subtract(%304, %306) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %308 = add(%303, %307) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %309 = nn.relu(%308) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %310 = nn.conv2d(%309, %model.backbone.body.layer2.3.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %311 = reshape(%model.backbone.body.layer2.3.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %312 = reshape(%model.backbone.body.layer2.3.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %313 = add(%312, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %314 = rsqrt(%313) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %315 = multiply(%311, %314) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %316 = multiply(%310, %315) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %317 = reshape(%model.backbone.body.layer2.3.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %318 = reshape(%model.backbone.body.layer2.3.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %319 = multiply(%318, %315) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %320 = subtract(%317, %319) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %321 = add(%316, %320) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %322 = nn.relu(%321) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %323 = nn.conv2d(%322, %model.backbone.body.layer2.3.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %324 = reshape(%model.backbone.body.layer2.3.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %325 = reshape(%model.backbone.body.layer2.3.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %326 = add(%325, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %327 = rsqrt(%326) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %328 = multiply(%324, %327) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %329 = multiply(%323, %328) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %330 = reshape(%model.backbone.body.layer2.3.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %331 = reshape(%model.backbone.body.layer2.3.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %332 = multiply(%331, %328) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %333 = subtract(%330, %332) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %334 = add(%329, %333) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %335 = add(%334, %296) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %336 = nn.relu(%335) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %337 = nn.conv2d(%336, %model.backbone.body.layer3.0.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %338 = reshape(%model.backbone.body.layer3.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %339 = reshape(%model.backbone.body.layer3.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %340 = add(%339, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %341 = rsqrt(%340) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %342 = multiply(%338, %341) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %343 = multiply(%337, %342) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %344 = reshape(%model.backbone.body.layer3.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %345 = reshape(%model.backbone.body.layer3.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %346 = multiply(%345, %342) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %347 = subtract(%344, %346) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %348 = add(%343, %347) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %349 = nn.relu(%348) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %350 = nn.conv2d(%349, %model.backbone.body.layer3.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %351 = reshape(%model.backbone.body.layer3.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %352 = reshape(%model.backbone.body.layer3.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %353 = add(%352, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %354 = rsqrt(%353) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %355 = multiply(%351, %354) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %356 = multiply(%350, %355) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %357 = reshape(%model.backbone.body.layer3.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %358 = reshape(%model.backbone.body.layer3.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %359 = multiply(%358, %355) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %360 = subtract(%357, %359) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %361 = add(%356, %360) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %362 = nn.relu(%361) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %363 = nn.conv2d(%362, %model.backbone.body.layer3.0.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %364 = reshape(%model.backbone.body.layer3.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %365 = reshape(%model.backbone.body.layer3.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %366 = add(%365, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %367 = rsqrt(%366) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %368 = multiply(%364, %367) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %369 = multiply(%363, %368) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %370 = reshape(%model.backbone.body.layer3.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %371 = reshape(%model.backbone.body.layer3.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %372 = multiply(%371, %368) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %373 = subtract(%370, %372) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %374 = add(%369, %373) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %375 = nn.conv2d(%336, %model.backbone.body.layer3.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %376 = reshape(%model.backbone.body.layer3.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %377 = reshape(%model.backbone.body.layer3.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %378 = add(%377, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %379 = rsqrt(%378) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %380 = multiply(%376, %379) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %381 = multiply(%375, %380) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %382 = reshape(%model.backbone.body.layer3.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %383 = reshape(%model.backbone.body.layer3.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %384 = multiply(%383, %380) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %385 = subtract(%382, %384) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %386 = add(%381, %385) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %387 = add(%374, %386) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %388 = nn.relu(%387) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %389 = nn.conv2d(%388, %model.backbone.body.layer3.1.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %390 = reshape(%model.backbone.body.layer3.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %391 = reshape(%model.backbone.body.layer3.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %392 = add(%391, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %393 = rsqrt(%392) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %394 = multiply(%390, %393) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %395 = multiply(%389, %394) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %396 = reshape(%model.backbone.body.layer3.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %397 = reshape(%model.backbone.body.layer3.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %398 = multiply(%397, %394) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %399 = subtract(%396, %398) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %400 = add(%395, %399) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %401 = nn.relu(%400) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %402 = nn.conv2d(%401, %model.backbone.body.layer3.1.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %403 = reshape(%model.backbone.body.layer3.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %404 = reshape(%model.backbone.body.layer3.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %405 = add(%404, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %406 = rsqrt(%405) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %407 = multiply(%403, %406) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %408 = multiply(%402, %407) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %409 = reshape(%model.backbone.body.layer3.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %410 = reshape(%model.backbone.body.layer3.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %411 = multiply(%410, %407) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %412 = subtract(%409, %411) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %413 = add(%408, %412) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %414 = nn.relu(%413) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %415 = nn.conv2d(%414, %model.backbone.body.layer3.1.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %416 = reshape(%model.backbone.body.layer3.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %417 = reshape(%model.backbone.body.layer3.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %418 = add(%417, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %419 = rsqrt(%418) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %420 = multiply(%416, %419) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %421 = multiply(%415, %420) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %422 = reshape(%model.backbone.body.layer3.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %423 = reshape(%model.backbone.body.layer3.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %424 = multiply(%423, %420) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %425 = subtract(%422, %424) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %426 = add(%421, %425) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %427 = add(%426, %388) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %428 = nn.relu(%427) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %429 = nn.conv2d(%428, %model.backbone.body.layer3.2.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %430 = reshape(%model.backbone.body.layer3.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %431 = reshape(%model.backbone.body.layer3.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %432 = add(%431, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %433 = rsqrt(%432) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %434 = multiply(%430, %433) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %435 = multiply(%429, %434) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %436 = reshape(%model.backbone.body.layer3.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %437 = reshape(%model.backbone.body.layer3.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %438 = multiply(%437, %434) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %439 = subtract(%436, %438) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %440 = add(%435, %439) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %441 = nn.relu(%440) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %442 = nn.conv2d(%441, %model.backbone.body.layer3.2.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %443 = reshape(%model.backbone.body.layer3.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %444 = reshape(%model.backbone.body.layer3.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %445 = add(%444, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %446 = rsqrt(%445) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %447 = multiply(%443, %446) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %448 = multiply(%442, %447) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %449 = reshape(%model.backbone.body.layer3.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %450 = reshape(%model.backbone.body.layer3.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %451 = multiply(%450, %447) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %452 = subtract(%449, %451) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %453 = add(%448, %452) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %454 = nn.relu(%453) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %455 = nn.conv2d(%454, %model.backbone.body.layer3.2.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %456 = reshape(%model.backbone.body.layer3.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %457 = reshape(%model.backbone.body.layer3.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %458 = add(%457, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %459 = rsqrt(%458) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %460 = multiply(%456, %459) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %461 = multiply(%455, %460) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %462 = reshape(%model.backbone.body.layer3.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %463 = reshape(%model.backbone.body.layer3.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %464 = multiply(%463, %460) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %465 = subtract(%462, %464) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %466 = add(%461, %465) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %467 = add(%466, %428) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %468 = nn.relu(%467) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %469 = nn.conv2d(%468, %model.backbone.body.layer3.3.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %470 = reshape(%model.backbone.body.layer3.3.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %471 = reshape(%model.backbone.body.layer3.3.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %472 = add(%471, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %473 = rsqrt(%472) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %474 = multiply(%470, %473) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %475 = multiply(%469, %474) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %476 = reshape(%model.backbone.body.layer3.3.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %477 = reshape(%model.backbone.body.layer3.3.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %478 = multiply(%477, %474) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %479 = subtract(%476, %478) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %480 = add(%475, %479) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %481 = nn.relu(%480) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %482 = nn.conv2d(%481, %model.backbone.body.layer3.3.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %483 = reshape(%model.backbone.body.layer3.3.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %484 = reshape(%model.backbone.body.layer3.3.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %485 = add(%484, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %486 = rsqrt(%485) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %487 = multiply(%483, %486) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %488 = multiply(%482, %487) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %489 = reshape(%model.backbone.body.layer3.3.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %490 = reshape(%model.backbone.body.layer3.3.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %491 = multiply(%490, %487) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %492 = subtract(%489, %491) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %493 = add(%488, %492) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %494 = nn.relu(%493) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %495 = nn.conv2d(%494, %model.backbone.body.layer3.3.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %496 = reshape(%model.backbone.body.layer3.3.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %497 = reshape(%model.backbone.body.layer3.3.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %498 = add(%497, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %499 = rsqrt(%498) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %500 = multiply(%496, %499) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %501 = multiply(%495, %500) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %502 = reshape(%model.backbone.body.layer3.3.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %503 = reshape(%model.backbone.body.layer3.3.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %504 = multiply(%503, %500) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %505 = subtract(%502, %504) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %506 = add(%501, %505) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %507 = add(%506, %468) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %508 = nn.relu(%507) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %509 = nn.conv2d(%508, %model.backbone.body.layer3.4.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %510 = reshape(%model.backbone.body.layer3.4.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %511 = reshape(%model.backbone.body.layer3.4.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %512 = add(%511, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %513 = rsqrt(%512) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %514 = multiply(%510, %513) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %515 = multiply(%509, %514) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %516 = reshape(%model.backbone.body.layer3.4.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %517 = reshape(%model.backbone.body.layer3.4.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %518 = multiply(%517, %514) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %519 = subtract(%516, %518) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %520 = add(%515, %519) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %521 = nn.relu(%520) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %522 = nn.conv2d(%521, %model.backbone.body.layer3.4.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %523 = reshape(%model.backbone.body.layer3.4.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %524 = reshape(%model.backbone.body.layer3.4.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %525 = add(%524, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %526 = rsqrt(%525) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %527 = multiply(%523, %526) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %528 = multiply(%522, %527) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %529 = reshape(%model.backbone.body.layer3.4.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %530 = reshape(%model.backbone.body.layer3.4.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %531 = multiply(%530, %527) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %532 = subtract(%529, %531) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %533 = add(%528, %532) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %534 = nn.relu(%533) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %535 = nn.conv2d(%534, %model.backbone.body.layer3.4.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %536 = reshape(%model.backbone.body.layer3.4.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %537 = reshape(%model.backbone.body.layer3.4.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %538 = add(%537, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %539 = rsqrt(%538) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %540 = multiply(%536, %539) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %541 = multiply(%535, %540) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %542 = reshape(%model.backbone.body.layer3.4.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %543 = reshape(%model.backbone.body.layer3.4.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %544 = multiply(%543, %540) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %545 = subtract(%542, %544) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %546 = add(%541, %545) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %547 = add(%546, %508) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %548 = nn.relu(%547) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %549 = nn.conv2d(%548, %model.backbone.body.layer3.5.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %550 = reshape(%model.backbone.body.layer3.5.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %551 = reshape(%model.backbone.body.layer3.5.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %552 = add(%551, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %553 = rsqrt(%552) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %554 = multiply(%550, %553) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %555 = multiply(%549, %554) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %556 = reshape(%model.backbone.body.layer3.5.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %557 = reshape(%model.backbone.body.layer3.5.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %558 = multiply(%557, %554) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %559 = subtract(%556, %558) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %560 = add(%555, %559) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %561 = nn.relu(%560) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %562 = nn.conv2d(%561, %model.backbone.body.layer3.5.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %563 = reshape(%model.backbone.body.layer3.5.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %564 = reshape(%model.backbone.body.layer3.5.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %565 = add(%564, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %566 = rsqrt(%565) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %567 = multiply(%563, %566) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %568 = multiply(%562, %567) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %569 = reshape(%model.backbone.body.layer3.5.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %570 = reshape(%model.backbone.body.layer3.5.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %571 = multiply(%570, %567) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %572 = subtract(%569, %571) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %573 = add(%568, %572) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %574 = nn.relu(%573) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %575 = nn.conv2d(%574, %model.backbone.body.layer3.5.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %576 = reshape(%model.backbone.body.layer3.5.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %577 = reshape(%model.backbone.body.layer3.5.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %578 = add(%577, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %579 = rsqrt(%578) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %580 = multiply(%576, %579) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %581 = multiply(%575, %580) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %582 = reshape(%model.backbone.body.layer3.5.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %583 = reshape(%model.backbone.body.layer3.5.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %584 = multiply(%583, %580) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %585 = subtract(%582, %584) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %586 = add(%581, %585) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %587 = add(%586, %548) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %588 = nn.relu(%587) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %589 = nn.conv2d(%588, %model.backbone.body.layer4.0.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 50, 50), float32] */;
  %590 = reshape(%model.backbone.body.layer4.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %591 = reshape(%model.backbone.body.layer4.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %592 = add(%591, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %593 = rsqrt(%592) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %594 = multiply(%590, %593) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %595 = multiply(%589, %594) /* ty=Tensor[(1, 512, 50, 50), float32] */;
  %596 = reshape(%model.backbone.body.layer4.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %597 = reshape(%model.backbone.body.layer4.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %598 = multiply(%597, %594) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %599 = subtract(%596, %598) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %600 = add(%595, %599) /* ty=Tensor[(1, 512, 50, 50), float32] */;
  %601 = nn.relu(%600) /* ty=Tensor[(1, 512, 50, 50), float32] */;
  %602 = nn.conv2d(%601, %model.backbone.body.layer4.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %603 = reshape(%model.backbone.body.layer4.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %604 = reshape(%model.backbone.body.layer4.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %605 = add(%604, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %606 = rsqrt(%605) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %607 = multiply(%603, %606) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %608 = multiply(%602, %607) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %609 = reshape(%model.backbone.body.layer4.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %610 = reshape(%model.backbone.body.layer4.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %611 = multiply(%610, %607) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %612 = subtract(%609, %611) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %613 = add(%608, %612) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %614 = nn.relu(%613) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %615 = nn.conv2d(%614, %model.backbone.body.layer4.0.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %616 = reshape(%model.backbone.body.layer4.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %617 = reshape(%model.backbone.body.layer4.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %618 = add(%617, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %619 = rsqrt(%618) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %620 = multiply(%616, %619) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %621 = multiply(%615, %620) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %622 = reshape(%model.backbone.body.layer4.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %623 = reshape(%model.backbone.body.layer4.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %624 = multiply(%623, %620) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %625 = subtract(%622, %624) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %626 = add(%621, %625) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %627 = nn.conv2d(%588, %model.backbone.body.layer4.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %628 = reshape(%model.backbone.body.layer4.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %629 = reshape(%model.backbone.body.layer4.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %630 = add(%629, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %631 = rsqrt(%630) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %632 = multiply(%628, %631) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %633 = multiply(%627, %632) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %634 = reshape(%model.backbone.body.layer4.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %635 = reshape(%model.backbone.body.layer4.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %636 = multiply(%635, %632) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %637 = subtract(%634, %636) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %638 = add(%633, %637) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %639 = add(%626, %638) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %640 = nn.relu(%639) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %641 = nn.conv2d(%640, %model.backbone.body.layer4.1.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %642 = reshape(%model.backbone.body.layer4.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %643 = reshape(%model.backbone.body.layer4.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %644 = add(%643, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %645 = rsqrt(%644) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %646 = multiply(%642, %645) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %647 = multiply(%641, %646) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %648 = reshape(%model.backbone.body.layer4.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %649 = reshape(%model.backbone.body.layer4.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %650 = multiply(%649, %646) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %651 = subtract(%648, %650) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %652 = add(%647, %651) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %653 = nn.relu(%652) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %654 = nn.conv2d(%653, %model.backbone.body.layer4.1.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %655 = reshape(%model.backbone.body.layer4.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %656 = reshape(%model.backbone.body.layer4.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %657 = add(%656, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %658 = rsqrt(%657) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %659 = multiply(%655, %658) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %660 = multiply(%654, %659) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %661 = reshape(%model.backbone.body.layer4.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %662 = reshape(%model.backbone.body.layer4.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %663 = multiply(%662, %659) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %664 = subtract(%661, %663) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %665 = add(%660, %664) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %666 = nn.relu(%665) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %667 = nn.conv2d(%666, %model.backbone.body.layer4.1.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %668 = reshape(%model.backbone.body.layer4.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %669 = reshape(%model.backbone.body.layer4.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %670 = add(%669, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %671 = rsqrt(%670) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %672 = multiply(%668, %671) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %673 = multiply(%667, %672) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %674 = reshape(%model.backbone.body.layer4.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %675 = reshape(%model.backbone.body.layer4.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %676 = multiply(%675, %672) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %677 = subtract(%674, %676) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %678 = add(%673, %677) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %679 = add(%678, %640) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %680 = nn.relu(%679) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %681 = nn.conv2d(%680, %model.backbone.body.layer4.2.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %682 = reshape(%model.backbone.body.layer4.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %683 = reshape(%model.backbone.body.layer4.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %684 = add(%683, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %685 = rsqrt(%684) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %686 = multiply(%682, %685) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %687 = multiply(%681, %686) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %688 = reshape(%model.backbone.body.layer4.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %689 = reshape(%model.backbone.body.layer4.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %690 = multiply(%689, %686) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %691 = subtract(%688, %690) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %692 = add(%687, %691) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %693 = nn.relu(%692) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %694 = nn.conv2d(%693, %model.backbone.body.layer4.2.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %695 = reshape(%model.backbone.body.layer4.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %696 = reshape(%model.backbone.body.layer4.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %697 = add(%696, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %698 = rsqrt(%697) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %699 = multiply(%695, %698) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %700 = multiply(%694, %699) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %701 = reshape(%model.backbone.body.layer4.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %702 = reshape(%model.backbone.body.layer4.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %703 = multiply(%702, %699) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %704 = subtract(%701, %703) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %705 = add(%700, %704) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %706 = nn.relu(%705) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %707 = nn.conv2d(%706, %model.backbone.body.layer4.2.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %708 = reshape(%model.backbone.body.layer4.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %709 = reshape(%model.backbone.body.layer4.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %710 = add(%709, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %711 = rsqrt(%710) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %712 = multiply(%708, %711) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %713 = multiply(%707, %712) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %714 = reshape(%model.backbone.body.layer4.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %715 = reshape(%model.backbone.body.layer4.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %716 = multiply(%715, %712) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %717 = subtract(%714, %716) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %718 = add(%713, %717) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %719 = add(%718, %680) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %720 = nn.relu(%719) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %721 = (%720, %588, %336, %164);
  %722 = %721.3;
  %723 = nn.conv2d(%722, %model.backbone.fpn.inner_blocks.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %724 = nn.bias_add(%723, %model.backbone.fpn.inner_blocks.0.bias) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %725 = %721.2;
  %726 = nn.conv2d(%725, %model.backbone.fpn.inner_blocks.1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %727 = nn.bias_add(%726, %model.backbone.fpn.inner_blocks.1.bias) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %728 = %721.1;
  %729 = nn.conv2d(%728, %model.backbone.fpn.inner_blocks.2.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %730 = nn.bias_add(%729, %model.backbone.fpn.inner_blocks.2.bias) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %731 = %721.0;
  %732 = nn.conv2d(%731, %model.backbone.fpn.inner_blocks.3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %733 = nn.bias_add(%732, %model.backbone.fpn.inner_blocks.3.bias) /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %734 = image.resize(%733, size=[50, 50], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %735 = add(%730, %734) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %736 = image.resize(%735, size=[100, 100], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %737 = add(%727, %736) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %738 = image.resize(%737, size=[200, 200], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %739 = add(%724, %738) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %740 = nn.conv2d(%739, %model.backbone.fpn.layer_blocks.0.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %741 = nn.bias_add(%740, %model.backbone.fpn.layer_blocks.0.bias) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %742 = nn.conv2d(%737, %model.backbone.fpn.layer_blocks.1.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %743 = nn.bias_add(%742, %model.backbone.fpn.layer_blocks.1.bias) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %744 = nn.conv2d(%735, %model.backbone.fpn.layer_blocks.2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %745 = nn.bias_add(%744, %model.backbone.fpn.layer_blocks.2.bias) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %746 = nn.conv2d(%733, %model.backbone.fpn.layer_blocks.3.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %747 = nn.bias_add(%746, %model.backbone.fpn.layer_blocks.3.bias) /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %748 = nn.max_pool2d(%747, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  %749 = (%741, %743, %745, %747, %748, %747, %747, %747, %747, %747, %747);
  %750 = %749.0;
  %751 = %749.1;
  %752 = %749.2;
  %753 = %749.3;
  %754 = %749.4;
  %755 = %749.5;
  %756 = %749.6;
  %757 = %749.7;
  %758 = %749.8;
  %759 = %749.9;
  %760 = %749.10;
  %761 = (%750, %751, %752, %753, %754, %755, %756, %757, %758, %759, %760);
  %762 = %761.0;
  %763 = nn.conv2d(%762, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %764 = nn.bias_add(%763, %model.rpn.head.conv.bias) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %765 = nn.relu(%764) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %766 = nn.conv2d(%765, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]) /* ty=Tensor[(1, 3, 200, 200), float32] */;
  %767 = nn.bias_add(%766, %model.rpn.head.cls_logits.bias) /* ty=Tensor[(1, 3, 200, 200), float32] */;
  %768 = %761.1;
  %769 = nn.conv2d(%768, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %770 = nn.bias_add(%769, %model.rpn.head.conv.bias) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %771 = nn.relu(%770) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %772 = nn.conv2d(%771, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]) /* ty=Tensor[(1, 3, 100, 100), float32] */;
  %773 = nn.bias_add(%772, %model.rpn.head.cls_logits.bias) /* ty=Tensor[(1, 3, 100, 100), float32] */;
  %774 = %761.2;
  %775 = nn.conv2d(%774, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %776 = nn.bias_add(%775, %model.rpn.head.conv.bias) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %777 = nn.relu(%776) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %778 = nn.conv2d(%777, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]) /* ty=Tensor[(1, 3, 50, 50), float32] */;
  %779 = nn.bias_add(%778, %model.rpn.head.cls_logits.bias) /* ty=Tensor[(1, 3, 50, 50), float32] */;
  %780 = %761.3;
  %781 = nn.conv2d(%780, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %782 = nn.bias_add(%781, %model.rpn.head.conv.bias) /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %783 = nn.relu(%782) /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %784 = nn.conv2d(%783, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]) /* ty=Tensor[(1, 3, 25, 25), float32] */;
  %785 = nn.bias_add(%784, %model.rpn.head.cls_logits.bias) /* ty=Tensor[(1, 3, 25, 25), float32] */;
  %786 = %761.4;
  %787 = nn.conv2d(%786, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  %788 = nn.bias_add(%787, %model.rpn.head.conv.bias) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  %789 = nn.relu(%788) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  %790 = nn.conv2d(%789, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]) /* ty=Tensor[(1, 3, 13, 13), float32] */;
  %791 = nn.bias_add(%790, %model.rpn.head.cls_logits.bias) /* ty=Tensor[(1, 3, 13, 13), float32] */;
  %792 = nn.conv2d(%765, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 200, 200), float32] */;
  %793 = nn.bias_add(%792, %model.rpn.head.bbox_pred.bias) /* ty=Tensor[(1, 12, 200, 200), float32] */;
  %794 = nn.conv2d(%771, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 100, 100), float32] */;
  %795 = nn.bias_add(%794, %model.rpn.head.bbox_pred.bias) /* ty=Tensor[(1, 12, 100, 100), float32] */;
  %796 = nn.conv2d(%777, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 50, 50), float32] */;
  %797 = nn.bias_add(%796, %model.rpn.head.bbox_pred.bias) /* ty=Tensor[(1, 12, 50, 50), float32] */;
  %798 = nn.conv2d(%783, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 25, 25), float32] */;
  %799 = nn.bias_add(%798, %model.rpn.head.bbox_pred.bias) /* ty=Tensor[(1, 12, 25, 25), float32] */;
  %800 = nn.conv2d(%789, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 13, 13), float32] */;
  %801 = nn.bias_add(%800, %model.rpn.head.bbox_pred.bias) /* ty=Tensor[(1, 12, 13, 13), float32] */;
  %802 = (%767, %773, %779, %785, %791, %793, %795, %797, %799, %801);
  %803 = %802.5;
  %804 = reshape(%803, newshape=[1, -1, 4, 200, 200]) /* ty=Tensor[(1, 3, 4, 200, 200), float32] */;
  %805 = transpose(%804, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 4), float32] */;
  %806 = reshape(%805, newshape=[1, -1, 4]) /* ty=Tensor[(1, 120000, 4), float32] */;
  %807 = %802.6;
  %808 = reshape(%807, newshape=[1, -1, 4, 100, 100]) /* ty=Tensor[(1, 3, 4, 100, 100), float32] */;
  %809 = transpose(%808, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 4), float32] */;
  %810 = reshape(%809, newshape=[1, -1, 4]) /* ty=Tensor[(1, 30000, 4), float32] */;
  %811 = %802.7;
  %812 = reshape(%811, newshape=[1, -1, 4, 50, 50]) /* ty=Tensor[(1, 3, 4, 50, 50), float32] */;
  %813 = transpose(%812, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 4), float32] */;
  %814 = reshape(%813, newshape=[1, -1, 4]) /* ty=Tensor[(1, 7500, 4), float32] */;
  %815 = %802.8;
  %816 = reshape(%815, newshape=[1, -1, 4, 25, 25]) /* ty=Tensor[(1, 3, 4, 25, 25), float32] */;
  %817 = transpose(%816, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 4), float32] */;
  %818 = reshape(%817, newshape=[1, -1, 4]) /* ty=Tensor[(1, 1875, 4), float32] */;
  %819 = %802.9;
  %820 = reshape(%819, newshape=[1, -1, 4, 13, 13]) /* ty=Tensor[(1, 3, 4, 13, 13), float32] */;
  %821 = transpose(%820, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 4), float32] */;
  %822 = reshape(%821, newshape=[1, -1, 4]) /* ty=Tensor[(1, 507, 4), float32] */;
  %823 = (%806, %810, %814, %818, %822);
  %824 = concatenate(%823, axis=1) /* ty=Tensor[(1, 159882, 4), float32] */;
  %825 = reshape(%824, newshape=[-1, 4]) /* ty=Tensor[(159882, 4), float32] */;
  %826 = reshape(%825, newshape=[159882, -1]) /* ty=Tensor[(159882, 4), float32] */;
  %827 = strided_slice(%826, begin=[0, 0], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %828 = divide(%827, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %829 = arange(0f /* ty=float32 */, 200f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][2], stop=meta[relay.Constant][3], step=meta[relay.Constant][4], dtype="float32") /* ty=Tensor[(200), float32] */;
  %830 = floor_divide(800 /* ty=int32 */, 200 /* ty=int32 */) /* ty=int32 */;
  %831 = cast(%830, dtype="int64") /* ty=int64 */;
  %832 = cast(%831, dtype="float32") /* ty=float32 */;
  %833 = multiply(%829, %832) /* ty=Tensor[(200), float32] */;
  %834 = arange(0f /* ty=float32 */, 200f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][5], stop=meta[relay.Constant][6], step=meta[relay.Constant][7], dtype="float32") /* ty=Tensor[(200), float32] */;
  %835 = floor_divide(800 /* ty=int32 */, 200 /* ty=int32 */) /* ty=int32 */;
  %836 = cast(%835, dtype="int64") /* ty=int64 */;
  %837 = cast(%836, dtype="float32") /* ty=float32 */;
  %838 = multiply(%834, %837) /* ty=Tensor[(200), float32] */;
  %839 = (%833, %838);
  %840 = meshgrid(%839) /* ty=(Tensor[(200, 200), float32], Tensor[(200, 200), float32]) */;
  %841 = %840.1;
  %842 = reshape(%841, newshape=[-1]) /* ty=Tensor[(40000), float32] */;
  %843 = %840.0;
  %844 = reshape(%843, newshape=[-1]) /* ty=Tensor[(40000), float32] */;
  %845 = (%842, %844, %842, %844);
  %846 = stack(%845, axis=1) /* ty=Tensor[(40000, 4), float32] */;
  %847 = reshape(%846, newshape=[-1, 1, 4]) /* ty=Tensor[(40000, 1, 4), float32] */;
  %848 = reshape(meta[relay.Constant][8] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %849 = add(%847, %848) /* ty=Tensor[(40000, 3, 4), float32] */;
  %850 = reshape(%849, newshape=[-1, 4]) /* ty=Tensor[(120000, 4), float32] */;
  %851 = arange(0f /* ty=float32 */, 100f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][9], stop=meta[relay.Constant][10], step=meta[relay.Constant][11], dtype="float32") /* ty=Tensor[(100), float32] */;
  %852 = floor_divide(800 /* ty=int32 */, 100 /* ty=int32 */) /* ty=int32 */;
  %853 = cast(%852, dtype="int64") /* ty=int64 */;
  %854 = cast(%853, dtype="float32") /* ty=float32 */;
  %855 = multiply(%851, %854) /* ty=Tensor[(100), float32] */;
  %856 = arange(0f /* ty=float32 */, 100f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][12], stop=meta[relay.Constant][13], step=meta[relay.Constant][14], dtype="float32") /* ty=Tensor[(100), float32] */;
  %857 = floor_divide(800 /* ty=int32 */, 100 /* ty=int32 */) /* ty=int32 */;
  %858 = cast(%857, dtype="int64") /* ty=int64 */;
  %859 = cast(%858, dtype="float32") /* ty=float32 */;
  %860 = multiply(%856, %859) /* ty=Tensor[(100), float32] */;
  %861 = (%855, %860);
  %862 = meshgrid(%861) /* ty=(Tensor[(100, 100), float32], Tensor[(100, 100), float32]) */;
  %863 = %862.1;
  %864 = reshape(%863, newshape=[-1]) /* ty=Tensor[(10000), float32] */;
  %865 = %862.0;
  %866 = reshape(%865, newshape=[-1]) /* ty=Tensor[(10000), float32] */;
  %867 = (%864, %866, %864, %866);
  %868 = stack(%867, axis=1) /* ty=Tensor[(10000, 4), float32] */;
  %869 = reshape(%868, newshape=[-1, 1, 4]) /* ty=Tensor[(10000, 1, 4), float32] */;
  %870 = reshape(meta[relay.Constant][15] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %871 = add(%869, %870) /* ty=Tensor[(10000, 3, 4), float32] */;
  %872 = reshape(%871, newshape=[-1, 4]) /* ty=Tensor[(30000, 4), float32] */;
  %873 = arange(0f /* ty=float32 */, 50f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][16], stop=meta[relay.Constant][17], step=meta[relay.Constant][18], dtype="float32") /* ty=Tensor[(50), float32] */;
  %874 = floor_divide(800 /* ty=int32 */, 50 /* ty=int32 */) /* ty=int32 */;
  %875 = cast(%874, dtype="int64") /* ty=int64 */;
  %876 = cast(%875, dtype="float32") /* ty=float32 */;
  %877 = multiply(%873, %876) /* ty=Tensor[(50), float32] */;
  %878 = arange(0f /* ty=float32 */, 50f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][19], stop=meta[relay.Constant][20], step=meta[relay.Constant][21], dtype="float32") /* ty=Tensor[(50), float32] */;
  %879 = floor_divide(800 /* ty=int32 */, 50 /* ty=int32 */) /* ty=int32 */;
  %880 = cast(%879, dtype="int64") /* ty=int64 */;
  %881 = cast(%880, dtype="float32") /* ty=float32 */;
  %882 = multiply(%878, %881) /* ty=Tensor[(50), float32] */;
  %883 = (%877, %882);
  %884 = meshgrid(%883) /* ty=(Tensor[(50, 50), float32], Tensor[(50, 50), float32]) */;
  %885 = %884.1;
  %886 = reshape(%885, newshape=[-1]) /* ty=Tensor[(2500), float32] */;
  %887 = %884.0;
  %888 = reshape(%887, newshape=[-1]) /* ty=Tensor[(2500), float32] */;
  %889 = (%886, %888, %886, %888);
  %890 = stack(%889, axis=1) /* ty=Tensor[(2500, 4), float32] */;
  %891 = reshape(%890, newshape=[-1, 1, 4]) /* ty=Tensor[(2500, 1, 4), float32] */;
  %892 = reshape(meta[relay.Constant][22] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %893 = add(%891, %892) /* ty=Tensor[(2500, 3, 4), float32] */;
  %894 = reshape(%893, newshape=[-1, 4]) /* ty=Tensor[(7500, 4), float32] */;
  %895 = arange(0f /* ty=float32 */, 25f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][23], stop=meta[relay.Constant][24], step=meta[relay.Constant][25], dtype="float32") /* ty=Tensor[(25), float32] */;
  %896 = floor_divide(800 /* ty=int32 */, 25 /* ty=int32 */) /* ty=int32 */;
  %897 = cast(%896, dtype="int64") /* ty=int64 */;
  %898 = cast(%897, dtype="float32") /* ty=float32 */;
  %899 = multiply(%895, %898) /* ty=Tensor[(25), float32] */;
  %900 = arange(0f /* ty=float32 */, 25f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][26], stop=meta[relay.Constant][27], step=meta[relay.Constant][28], dtype="float32") /* ty=Tensor[(25), float32] */;
  %901 = floor_divide(800 /* ty=int32 */, 25 /* ty=int32 */) /* ty=int32 */;
  %902 = cast(%901, dtype="int64") /* ty=int64 */;
  %903 = cast(%902, dtype="float32") /* ty=float32 */;
  %904 = multiply(%900, %903) /* ty=Tensor[(25), float32] */;
  %905 = (%899, %904);
  %906 = meshgrid(%905) /* ty=(Tensor[(25, 25), float32], Tensor[(25, 25), float32]) */;
  %907 = %906.1;
  %908 = reshape(%907, newshape=[-1]) /* ty=Tensor[(625), float32] */;
  %909 = %906.0;
  %910 = reshape(%909, newshape=[-1]) /* ty=Tensor[(625), float32] */;
  %911 = (%908, %910, %908, %910);
  %912 = stack(%911, axis=1) /* ty=Tensor[(625, 4), float32] */;
  %913 = reshape(%912, newshape=[-1, 1, 4]) /* ty=Tensor[(625, 1, 4), float32] */;
  %914 = reshape(meta[relay.Constant][29] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %915 = add(%913, %914) /* ty=Tensor[(625, 3, 4), float32] */;
  %916 = reshape(%915, newshape=[-1, 4]) /* ty=Tensor[(1875, 4), float32] */;
  %917 = arange(0f /* ty=float32 */, 13f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][30], stop=meta[relay.Constant][31], step=meta[relay.Constant][32], dtype="float32") /* ty=Tensor[(13), float32] */;
  %918 = floor_divide(800 /* ty=int32 */, 13 /* ty=int32 */) /* ty=int32 */;
  %919 = cast(%918, dtype="int64") /* ty=int64 */;
  %920 = cast(%919, dtype="float32") /* ty=float32 */;
  %921 = multiply(%917, %920) /* ty=Tensor[(13), float32] */;
  %922 = arange(0f /* ty=float32 */, 13f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][33], stop=meta[relay.Constant][34], step=meta[relay.Constant][35], dtype="float32") /* ty=Tensor[(13), float32] */;
  %923 = floor_divide(800 /* ty=int32 */, 13 /* ty=int32 */) /* ty=int32 */;
  %924 = cast(%923, dtype="int64") /* ty=int64 */;
  %925 = cast(%924, dtype="float32") /* ty=float32 */;
  %926 = multiply(%922, %925) /* ty=Tensor[(13), float32] */;
  %927 = (%921, %926);
  %928 = meshgrid(%927) /* ty=(Tensor[(13, 13), float32], Tensor[(13, 13), float32]) */;
  %929 = %928.1;
  %930 = reshape(%929, newshape=[-1]) /* ty=Tensor[(169), float32] */;
  %931 = %928.0;
  %932 = reshape(%931, newshape=[-1]) /* ty=Tensor[(169), float32] */;
  %933 = (%930, %932, %930, %932);
  %934 = stack(%933, axis=1) /* ty=Tensor[(169, 4), float32] */;
  %935 = reshape(%934, newshape=[-1, 1, 4]) /* ty=Tensor[(169, 1, 4), float32] */;
  %936 = reshape(meta[relay.Constant][36] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %937 = add(%935, %936) /* ty=Tensor[(169, 3, 4), float32] */;
  %938 = reshape(%937, newshape=[-1, 4]) /* ty=Tensor[(507, 4), float32] */;
  %939 = (%850, %872, %894, %916, %938);
  %940 = concatenate(%939) /* ty=Tensor[(159882, 4), float32] */;
  %941 = (%940,);
  %942 = concatenate(%941) /* ty=Tensor[(159882, 4), float32] */;
  %943 = take(%942, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %944 = take(%942, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %945 = subtract(%943, %944) /* ty=Tensor[(159882), float32] */;
  %946 = expand_dims(%945, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %947 = multiply(%828, %946) /* ty=Tensor[(159882, 1), float32] */;
  %948 = take(%942, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %949 = multiply(%945, 0.5f /* ty=float32 */) /* ty=Tensor[(159882), float32] */;
  %950 = add(%948, %949) /* ty=Tensor[(159882), float32] */;
  %951 = expand_dims(%950, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %952 = add(%947, %951) /* ty=Tensor[(159882, 1), float32] */;
  %953 = strided_slice(%826, begin=[0, 2], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %954 = divide(%953, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %955 = clip(%954, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float32] */;
  %956 = exp(%955) /* ty=Tensor[(159882, 1), float32] */;
  %957 = expand_dims(%945, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %958 = multiply(%956, %957) /* ty=Tensor[(159882, 1), float32] */;
  %959 = multiply(0.5f /* ty=float32 */, %958) /* ty=Tensor[(159882, 1), float32] */;
  %960 = subtract(%952, %959) /* ty=Tensor[(159882, 1), float32] */;
  %961 = strided_slice(%826, begin=[0, 1], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %962 = divide(%961, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %963 = take(%942, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %964 = take(%942, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %965 = subtract(%963, %964) /* ty=Tensor[(159882), float32] */;
  %966 = expand_dims(%965, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %967 = multiply(%962, %966) /* ty=Tensor[(159882, 1), float32] */;
  %968 = take(%942, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %969 = multiply(%965, 0.5f /* ty=float32 */) /* ty=Tensor[(159882), float32] */;
  %970 = add(%968, %969) /* ty=Tensor[(159882), float32] */;
  %971 = expand_dims(%970, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %972 = add(%967, %971) /* ty=Tensor[(159882, 1), float32] */;
  %973 = strided_slice(%826, begin=[0, 3], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %974 = divide(%973, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %975 = clip(%974, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float32] */;
  %976 = exp(%975) /* ty=Tensor[(159882, 1), float32] */;
  %977 = expand_dims(%965, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %978 = multiply(%976, %977) /* ty=Tensor[(159882, 1), float32] */;
  %979 = multiply(0.5f /* ty=float32 */, %978) /* ty=Tensor[(159882, 1), float32] */;
  %980 = subtract(%972, %979) /* ty=Tensor[(159882, 1), float32] */;
  %981 = multiply(0.5f /* ty=float32 */, %958) /* ty=Tensor[(159882, 1), float32] */;
  %982 = add(%952, %981) /* ty=Tensor[(159882, 1), float32] */;
  %983 = multiply(0.5f /* ty=float32 */, %978) /* ty=Tensor[(159882, 1), float32] */;
  %984 = add(%972, %983) /* ty=Tensor[(159882, 1), float32] */;
  %985 = (%960, %980, %982, %984);
  %986 = stack(%985, axis=2) /* ty=Tensor[(159882, 1, 4), float32] */;
  %987 = reshape(%986, newshape=[0, -1, 1]) /* ty=Tensor[(159882, 4, 1), float32] */;
  %988 = squeeze(%987, axis=[2]) /* ty=Tensor[(159882, 4), float32] */;
  %989 = reshape(%988, newshape=[159882, -1, 4]) /* ty=Tensor[(159882, 1, 4), float32] */;
  %990 = reshape(%989, newshape=[1, -1, 4]) /* ty=Tensor[(1, 159882, 4), float32] */;
  %991 = arange(0 /* ty=int64 */, 1 /* ty=int64 */, 1 /* ty=int64 */, start=meta[relay.Constant][37], stop=meta[relay.Constant][38], step=meta[relay.Constant][39], dtype="int64") /* ty=Tensor[(1), int64] */;
  %992 = expand_dims(%991, axis=1) /* ty=Tensor[(1, 1), int64] */;
  %993 = %802.0;
  %994 = reshape(%993, newshape=[1, -1, 1, 200, 200]) /* ty=Tensor[(1, 3, 1, 200, 200), float32] */;
  %995 = transpose(%994, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 1), float32] */;
  %996 = reshape(%995, newshape=[1, -1, 1]) /* ty=Tensor[(1, 120000, 1), float32] */;
  %997 = %802.1;
  %998 = reshape(%997, newshape=[1, -1, 1, 100, 100]) /* ty=Tensor[(1, 3, 1, 100, 100), float32] */;
  %999 = transpose(%998, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 1), float32] */;
  %1000 = reshape(%999, newshape=[1, -1, 1]) /* ty=Tensor[(1, 30000, 1), float32] */;
  %1001 = %802.2;
  %1002 = reshape(%1001, newshape=[1, -1, 1, 50, 50]) /* ty=Tensor[(1, 3, 1, 50, 50), float32] */;
  %1003 = transpose(%1002, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 1), float32] */;
  %1004 = reshape(%1003, newshape=[1, -1, 1]) /* ty=Tensor[(1, 7500, 1), float32] */;
  %1005 = %802.3;
  %1006 = reshape(%1005, newshape=[1, -1, 1, 25, 25]) /* ty=Tensor[(1, 3, 1, 25, 25), float32] */;
  %1007 = transpose(%1006, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 1), float32] */;
  %1008 = reshape(%1007, newshape=[1, -1, 1]) /* ty=Tensor[(1, 1875, 1), float32] */;
  %1009 = %802.4;
  %1010 = reshape(%1009, newshape=[1, -1, 1, 13, 13]) /* ty=Tensor[(1, 3, 1, 13, 13), float32] */;
  %1011 = transpose(%1010, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 1), float32] */;
  %1012 = reshape(%1011, newshape=[1, -1, 1]) /* ty=Tensor[(1, 507, 1), float32] */;
  %1013 = (%996, %1000, %1004, %1008, %1012);
  %1014 = concatenate(%1013, axis=1) /* ty=Tensor[(1, 159882, 1), float32] */;
  %1015 = reshape(%1014, newshape=[-1, 1, 0]) /* ty=Tensor[(159882, 1, 1), float32] */;
  %1016 = squeeze(%1015, axis=[1]) /* ty=Tensor[(159882, 1), float32] */;
  %1017 = reshape(%1016, newshape=[1, -1]) /* ty=Tensor[(1, 159882), float32] */;
  %1018 = split(%1017, indices_or_sections=[120000, 150000, 157500, 159375], axis=1) /* ty=(Tensor[(1, 120000), float32], Tensor[(1, 30000), float32], Tensor[(1, 7500), float32], Tensor[(1, 1875), float32], Tensor[(1, 507), float32]) */;
  %1019 = %1018.0;
  %1020 = topk(%1019, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1021 = %1020.1;
  %1022 = add(%1021, 0 /* ty=int64 */) /* ty=Tensor[(1, 1000), int64] */;
  %1023 = %1018.1;
  %1024 = topk(%1023, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1025 = %1024.1;
  %1026 = take(meta[relay.Constant][40] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1027 = expand_dims(%1026, axis=0) /* ty=Tensor[(1), int64] */;
  %1028 = add(%1027, 0 /* ty=int64 */) /* ty=Tensor[(1), int64] */;
  %1029 = add(%1025, %1028) /* ty=Tensor[(1, 1000), int64] */;
  %1030 = %1018.2;
  %1031 = topk(%1030, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1032 = %1031.1;
  %1033 = take(meta[relay.Constant][41] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1034 = expand_dims(%1033, axis=0) /* ty=Tensor[(1), int64] */;
  %1035 = add(%1028, %1034) /* ty=Tensor[(1), int64] */;
  %1036 = add(%1032, %1035) /* ty=Tensor[(1, 1000), int64] */;
  %1037 = %1018.3;
  %1038 = topk(%1037, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1039 = %1038.1;
  %1040 = take(meta[relay.Constant][42] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1041 = expand_dims(%1040, axis=0) /* ty=Tensor[(1), int64] */;
  %1042 = add(%1035, %1041) /* ty=Tensor[(1), int64] */;
  %1043 = add(%1039, %1042) /* ty=Tensor[(1, 1000), int64] */;
  %1044 = %1018.4;
  %1045 = topk(%1044, k=507, axis=1, dtype="int64") /* ty=(Tensor[(1, 507), float32], Tensor[(1, 507), int64]) */;
  %1046 = %1045.1;
  %1047 = take(meta[relay.Constant][43] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1048 = expand_dims(%1047, axis=0) /* ty=Tensor[(1), int64] */;
  %1049 = add(%1042, %1048) /* ty=Tensor[(1), int64] */;
  %1050 = add(%1046, %1049) /* ty=Tensor[(1, 507), int64] */;
  %1051 = (%1022, %1029, %1036, %1043, %1050);
  %1052 = concatenate(%1051, axis=1) /* ty=Tensor[(1, 4507), int64] */;
  %1053 = (%990, %992, %1052);
  %1054 = adv_index(%1053) /* ty=Tensor[(1, 4507, 4), float32] */;
  %1055 = split(%1054, indices_or_sections=1) /* ty=(Tensor[(1, 4507, 4), float32],) */;
  %1056 = %1055.0;
  %1057 = squeeze(%1056, axis=[0]) /* ty=Tensor[(4507, 4), float32] */;
  %1058 = (%1057,);
  %1059 = %1058.0;
  %1060 = strided_slice(%1059, begin=[0, 0], end=[4507, 4], strides=[1, 2]) /* ty=Tensor[(4507, 2), float32] */;
  %1061 = maximum(%1060, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
  %1062 = %17.1;
  %1063 = cast(%1062, dtype="float32") /* ty=float32 */;
  %1064 = minimum(%1061, %1063) /* ty=Tensor[(4507, 2), float32] */;
  %1065 = strided_slice(%1059, begin=[0, 1], end=[4507, 4], strides=[1, 2]) /* ty=Tensor[(4507, 2), float32] */;
  %1066 = maximum(%1065, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
  %1067 = %17.2;
  %1068 = cast(%1067, dtype="float32") /* ty=float32 */;
  %1069 = minimum(%1066, %1068) /* ty=Tensor[(4507, 2), float32] */;
  %1070 = (%1064, %1069);
  %1071 = stack(%1070, axis=2) /* ty=Tensor[(4507, 2, 2), float32] */;
  %1072 = reshape(%1071, newshape=[4507, 4]) /* ty=Tensor[(4507, 4), float32] */;
  %1073 = take(%1072, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1074 = take(%1072, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1075 = subtract(%1073, %1074) /* ty=Tensor[(4507), float32] */;
  %1076 = greater_equal(%1075, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
  %1077 = cast(%1076, dtype="bool") /* ty=Tensor[(4507), bool] */;
  %1078 = take(%1072, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1079 = take(%1072, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1080 = subtract(%1078, %1079) /* ty=Tensor[(4507), float32] */;
  %1081 = greater_equal(%1080, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
  %1082 = cast(%1081, dtype="bool") /* ty=Tensor[(4507), bool] */;
  %1083 = logical_and(%1077, %1082) /* ty=Tensor[(4507), bool] */;
  %1084 = argwhere(%1083) /* ty=Tensor[(?, 1), int32] */;
  %1085 = split(%1084, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1086 = %1085.0;
  %1087 = squeeze(%1086, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1088 = (%1087,);
  %1089 = %1088.0;
  %1090 = cast(%1089, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1091 = (%1072, %1090);
  %1092 = adv_index(%1091) /* ty=Tensor[(?, 4), float32] */;
  %1093 = ndarray_size(%1092, dtype="int32") /* ty=int32 */;
  %1094 = equal(%1093, 0 /* ty=int32 */) /* ty=bool */;
  %1152 = if (%1094) {
    zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
  } else {
    %1095 = (%1017, %992, %1052);
    %1096 = adv_index(%1095) /* ty=Tensor[(1, 4507), float32] */;
    %1097 = split(%1096, indices_or_sections=1) /* ty=(Tensor[(1, 4507), float32],) */;
    %1098 = %1097.0;
    %1099 = squeeze(%1098, axis=[0]) /* ty=Tensor[(4507), float32] */;
    %1100 = (%1099,);
    %1101 = %1100.0;
    %1102 = (%1101, %1090);
    %1103 = adv_index(%1102) /* ty=Tensor[(?), float32] */;
    %1104 = min(%1103) /* ty=float32 */;
    %1105 = subtract(%1103, %1104) /* ty=Tensor[(?), float32] */;
    %1106 = add(%1105, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %1107 = expand_dims(%1106, axis=-1) /* ty=Tensor[(?, 1), float32] */;
    %1108 = full(0 /* ty=int32 */, shape=[120000], dtype="int64") /* ty=Tensor[(120000), int64] */;
    %1109 = full(1 /* ty=int32 */, shape=[30000], dtype="int64") /* ty=Tensor[(30000), int64] */;
    %1110 = full(2 /* ty=int32 */, shape=[7500], dtype="int64") /* ty=Tensor[(7500), int64] */;
    %1111 = full(3 /* ty=int32 */, shape=[1875], dtype="int64") /* ty=Tensor[(1875), int64] */;
    %1112 = full(4 /* ty=int32 */, shape=[507], dtype="int64") /* ty=Tensor[(507), int64] */;
    %1113 = (%1108, %1109, %1110, %1111, %1112);
    %1114 = concatenate(%1113) /* ty=Tensor[(159882), int64] */;
    %1115 = reshape(%1114, newshape=[1, -1]) /* ty=Tensor[(1, 159882), int64] */;
    %1116 = cast(%1017, dtype="int64") /* ty=Tensor[(1, 159882), int64] */;
    %1117 = broadcast_to_like(%1115, %1116) /* ty=Tensor[(1, 159882), int64] */;
    %1118 = (%1117, %992, %1052);
    %1119 = adv_index(%1118) /* ty=Tensor[(1, 4507), int64] */;
    %1120 = split(%1119, indices_or_sections=1) /* ty=(Tensor[(1, 4507), int64],) */;
    %1121 = %1120.0;
    %1122 = squeeze(%1121, axis=[0]) /* ty=Tensor[(4507), int64] */;
    %1123 = (%1122,);
    %1124 = %1123.0;
    %1125 = (%1124, %1090);
    %1126 = adv_index(%1125) /* ty=Tensor[(?), int64] */;
    %1127 = cast(%1126, dtype="float32") /* ty=Tensor[(?), float32] */;
    %1128 = max(%1092) /* ty=float32 */;
    %1129 = add(%1128, 1f /* ty=float32 */) /* ty=float32 */;
    %1130 = multiply(%1127, %1129) /* ty=Tensor[(?), float32] */;
    %1131 = expand_dims(%1130, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %1132 = add(%1092, %1131) /* ty=Tensor[(?, 4), float32] */;
    %1133 = (%1107, %1132);
    %1134 = concatenate(%1133, axis=-1) /* ty=Tensor[(?, 5), float32] */;
    %1135 = expand_dims(%1134, axis=0) /* ty=Tensor[(1, ?, 5), float32] */;
    %1136 = shape_of(%1106, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1137 = squeeze(%1136) /* ty=int32 */;
    %1138 = arange(0 /* ty=int32 */, %1137, 1 /* ty=int32 */, start=meta[relay.Constant][44], stop=meta[relay.Call][0], step=meta[relay.Constant][45], dtype="int32") /* ty=Tensor[(?), int32] */;
    %1139 = expand_dims(%1138, axis=0) /* ty=Tensor[(1, ?), int32] */;
    %1140 = vision.non_max_suppression(%1135, %1136, %1139, -1 /* ty=int32 */, 0.7f /* ty=float32 */, meta[relay.attrs.NonMaximumSuppressionAttrs][0]) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */;
    %1141 = %1140.0;
    %1142 = squeeze(%1141, axis=[0]) /* ty=Tensor[(?), int32] */;
    %1143 = cast_like(0 /* ty=int32 */, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
    %1144 = less(meta[relay.Constant][46] /* ty=Tensor[(1), int32] */, %1143) /* ty=Tensor[(1), bool] */;
    %1145 = shape_of(%1142, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1146 = cast_like(%1145, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1147 = add(meta[relay.Constant][46] /* ty=Tensor[(1), int32] */, %1146) /* ty=Tensor[(1), int32] */;
    %1148 = where(%1144, %1147, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1149 = %1140.1;
    %1150 = squeeze(%1149, axis=[1]) /* ty=Tensor[(1), int32] */;
    %1151 = dyn.strided_slice(%1142, %1148, %1150, meta[relay.Constant][47] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None, slice_mode="size") /* ty=Tensor[(?), int32] */;
    cast(%1151, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %1153 = strided_slice(%1152, begin=[0], end=[1000], strides=[1]) /* ty=Tensor[(?), int64] */;
  %1154 = (%1092, %1153);
  %1155 = adv_index(%1154) /* ty=Tensor[(?, 4), float32] */;
  %1156 = take(%1155, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1157 = take(%1155, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1158 = subtract(%1156, %1157) /* ty=Tensor[(?), float32] */;
  %1159 = take(%1155, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1160 = take(%1155, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1161 = subtract(%1159, %1160) /* ty=Tensor[(?), float32] */;
  %1162 = multiply(%1158, %1161) /* ty=Tensor[(?), float32] */;
  %1163 = (%1162,);
  %1164 = concatenate(%1163) /* ty=Tensor[(?), float32] */;
  %1165 = sqrt(%1164) /* ty=Tensor[(?), float32] */;
  %1166 = divide(%1165, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1167 = log2(%1166) /* ty=Tensor[(?), float32] */;
  %1168 = add(%1167, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1169 = add(%1168, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1170 = floor(%1169) /* ty=Tensor[(?), float32] */;
  %1171 = clip(%1170, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
  %1172 = cast(%1171, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1173 = subtract(%1172, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */;
  %1174 = shape_of(%1173, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1175 = take(%1174, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1176 = expand_dims(%1175, axis=0) /* ty=Tensor[(1), int32] */;
  %1177 = cast(%1176, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1178 = expand_dims(256 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1179 = cast(%1178, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1180 = expand_dims(7 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1181 = cast(%1180, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1182 = expand_dims(7 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1183 = cast(%1182, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1184 = (%1177, %1179, %1181, %1183);
  %1185 = concatenate(%1184) /* ty=Tensor[(4), int64] */;
  %1186 = dyn.full(0 /* ty=int32 */, %1185, shape=None, dtype="float32") /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %1187 = reshape(%1186, newshape=[0, 256, 7, 7]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1188 = equal(%1173, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1189 = argwhere(%1188) /* ty=Tensor[(?, 1), int32] */;
  %1190 = split(%1189, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1191 = %1190.0;
  %1192 = squeeze(%1191, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1193 = (%1192,);
  %1194 = %1193.0;
  %1195 = reshape(%1194, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1196 = repeat(%1195, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1197 = repeat(%1196, repeats=7, axis=2) /* ty=Tensor[(?, 256, 7, 1), int32] */;
  %1198 = repeat(%1197, repeats=7, axis=3) /* ty=Tensor[(?, 256, 7, 7), int32] */;
  %1199 = cast_like(0 /* ty=int32 */, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1200 = less(meta[relay.Constant][48] /* ty=Tensor[(2), int32] */, %1199) /* ty=Tensor[(2), bool] */;
  %1201 = shape_of(%1155, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1202 = cast_like(%1201, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1203 = add(meta[relay.Constant][48] /* ty=Tensor[(2), int32] */, %1202) /* ty=Tensor[(2), int32] */;
  %1204 = where(%1200, %1203, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1205 = shape_of(%1155, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1206 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1207 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1208 = scatter(%1205, %1206, %1207, meta[relay.attrs.ScatterAttrs][0]) /* ty=Tensor[(2), int32] */;
  %1209 = cast(%1208, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1210 = dyn.strided_slice(%1155, %1204, %1209, meta[relay.Constant][49] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1211 = full_like(%1210, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
  %1212 = (%1211,);
  %1213 = concatenate(%1212) /* ty=Tensor[(?, ?), float32] */;
  %1214 = (%1155,);
  %1215 = concatenate(%1214) /* ty=Tensor[(?, 4), float32] */;
  %1216 = (%1213, %1215);
  %1217 = concatenate(%1216, axis=1) /* ty=Tensor[(?, ?), float32] */;
  %1218 = equal(%1173, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1219 = argwhere(%1218) /* ty=Tensor[(?, 1), int32] */;
  %1220 = split(%1219, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1221 = %1220.0;
  %1222 = squeeze(%1221, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1223 = (%1222,);
  %1224 = %1223.0;
  %1225 = cast(%1224, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1226 = (%1217, %1225);
  %1227 = adv_index(%1226) /* ty=Tensor[(?, ?), float32] */;
  %1228 = vision.roi_align(%762, %1227, meta[relay.attrs.ROIAlignAttrs][0]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1229 = scatter(%1187, %1198, %1228, meta[relay.attrs.ScatterAttrs][1]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1230 = equal(%1173, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1231 = argwhere(%1230) /* ty=Tensor[(?, 1), int32] */;
  %1232 = split(%1231, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1233 = %1232.0;
  %1234 = squeeze(%1233, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1235 = (%1234,);
  %1236 = %1235.0;
  %1237 = reshape(%1236, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1238 = repeat(%1237, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1239 = repeat(%1238, repeats=7, axis=2) /* ty=Tensor[(?, 256, 7, 1), int32] */;
  %1240 = repeat(%1239, repeats=7, axis=3) /* ty=Tensor[(?, 256, 7, 7), int32] */;
  %1241 = equal(%1173, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1242 = argwhere(%1241) /* ty=Tensor[(?, 1), int32] */;
  %1243 = split(%1242, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1244 = %1243.0;
  %1245 = squeeze(%1244, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1246 = (%1245,);
  %1247 = %1246.0;
  %1248 = cast(%1247, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1249 = (%1217, %1248);
  %1250 = adv_index(%1249) /* ty=Tensor[(?, ?), float32] */;
  %1251 = vision.roi_align(%768, %1250, meta[relay.attrs.ROIAlignAttrs][1]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1252 = scatter(%1229, %1240, %1251, meta[relay.attrs.ScatterAttrs][2]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1253 = equal(%1173, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1254 = argwhere(%1253) /* ty=Tensor[(?, 1), int32] */;
  %1255 = split(%1254, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1256 = %1255.0;
  %1257 = squeeze(%1256, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1258 = (%1257,);
  %1259 = %1258.0;
  %1260 = reshape(%1259, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1261 = repeat(%1260, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1262 = repeat(%1261, repeats=7, axis=2) /* ty=Tensor[(?, 256, 7, 1), int32] */;
  %1263 = repeat(%1262, repeats=7, axis=3) /* ty=Tensor[(?, 256, 7, 7), int32] */;
  %1264 = equal(%1173, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1265 = argwhere(%1264) /* ty=Tensor[(?, 1), int32] */;
  %1266 = split(%1265, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1267 = %1266.0;
  %1268 = squeeze(%1267, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1269 = (%1268,);
  %1270 = %1269.0;
  %1271 = cast(%1270, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1272 = (%1217, %1271);
  %1273 = adv_index(%1272) /* ty=Tensor[(?, ?), float32] */;
  %1274 = vision.roi_align(%774, %1273, meta[relay.attrs.ROIAlignAttrs][2]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1275 = scatter(%1252, %1263, %1274, meta[relay.attrs.ScatterAttrs][3]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1276 = equal(%1173, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1277 = argwhere(%1276) /* ty=Tensor[(?, 1), int32] */;
  %1278 = split(%1277, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1279 = %1278.0;
  %1280 = squeeze(%1279, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1281 = (%1280,);
  %1282 = %1281.0;
  %1283 = reshape(%1282, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1284 = repeat(%1283, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1285 = repeat(%1284, repeats=7, axis=2) /* ty=Tensor[(?, 256, 7, 1), int32] */;
  %1286 = repeat(%1285, repeats=7, axis=3) /* ty=Tensor[(?, 256, 7, 7), int32] */;
  %1287 = %761.9;
  %1288 = equal(%1173, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1289 = argwhere(%1288) /* ty=Tensor[(?, 1), int32] */;
  %1290 = split(%1289, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1291 = %1290.0;
  %1292 = squeeze(%1291, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1293 = (%1292,);
  %1294 = %1293.0;
  %1295 = cast(%1294, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1296 = (%1217, %1295);
  %1297 = adv_index(%1296) /* ty=Tensor[(?, ?), float32] */;
  %1298 = vision.roi_align(%1287, %1297, meta[relay.attrs.ROIAlignAttrs][3]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1299 = scatter(%1275, %1286, %1298, meta[relay.attrs.ScatterAttrs][4]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1300 = reshape(%1299, newshape=[0, -1, 1, 1]) /* ty=Tensor[(?, 12544, 1, 1), float32] */;
  %1301 = squeeze(%1300, axis=[2, 3]) /* ty=Tensor[(?, 12544), float32] */;
  %1302 = transpose(%model.roi_heads.box_head.fc6.weight, axes=[1, 0]) /* ty=Tensor[(12544, 1024), float32] */;
  %1303 = transpose(%1302, axes=[1, 0]) /* ty=Tensor[(1024, 12544), float32] */;
  %1304 = nn.dense(%1301, %1303, units=1024) /* ty=Tensor[(?, 1024), float32] */;
  %1305 = add(%1304, %model.roi_heads.box_head.fc6.bias) /* ty=Tensor[(?, 1024), float32] */;
  %1306 = nn.relu(%1305) /* ty=Tensor[(?, 1024), float32] */;
  %1307 = transpose(%model.roi_heads.box_head.fc7.weight, axes=[1, 0]) /* ty=Tensor[(1024, 1024), float32] */;
  %1308 = transpose(%1307, axes=[1, 0]) /* ty=Tensor[(1024, 1024), float32] */;
  %1309 = nn.dense(%1306, %1308, units=1024) /* ty=Tensor[(?, 1024), float32] */;
  %1310 = add(%1309, %model.roi_heads.box_head.fc7.bias) /* ty=Tensor[(?, 1024), float32] */;
  %1311 = nn.relu(%1310) /* ty=Tensor[(?, 1024), float32] */;
  %1312 = reshape(%1311, newshape=[0, -1]) /* ty=Tensor[(?, 1024), float32] */;
  %1313 = transpose(%model.roi_heads.box_predictor.cls_score.weight, axes=[1, 0]) /* ty=Tensor[(1024, 91), float32] */;
  %1314 = transpose(%1313, axes=[1, 0]) /* ty=Tensor[(91, 1024), float32] */;
  %1315 = nn.dense(%1312, %1314, units=91) /* ty=Tensor[(?, 91), float32] */;
  %1316 = add(%1315, %model.roi_heads.box_predictor.cls_score.bias) /* ty=Tensor[(?, 91), float32] */;
  %1317 = transpose(%model.roi_heads.box_predictor.bbox_pred.weight, axes=[1, 0]) /* ty=Tensor[(1024, 364), float32] */;
  %1318 = transpose(%1317, axes=[1, 0]) /* ty=Tensor[(364, 1024), float32] */;
  %1319 = nn.dense(%1312, %1318, units=364) /* ty=Tensor[(?, 364), float32] */;
  %1320 = add(%1319, %model.roi_heads.box_predictor.bbox_pred.bias) /* ty=Tensor[(?, 364), float32] */;
  %1321 = (%1316, %1320);
  %1322 = %1321.1;
  %1323 = shape_of(%1155, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1324 = take(%1323, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1325 = add(%1324, 0 /* ty=int32 */) /* ty=int32 */;
  %1326 = cast(%1325, dtype="int64") /* ty=int64 */;
  %1327 = expand_dims(%1326, axis=0) /* ty=Tensor[(1), int64] */;
  %1328 = expand_dims(-1 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1329 = (%1327, %1328);
  %1330 = concatenate(%1329) /* ty=Tensor[(2), int64] */;
  %1331 = dyn.reshape(%1322, %1330, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1332 = cast_like(0 /* ty=int32 */, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1333 = less(meta[relay.Constant][50] /* ty=Tensor[(2), int32] */, %1332) /* ty=Tensor[(2), bool] */;
  %1334 = shape_of(%1331, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1335 = cast_like(%1334, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1336 = add(meta[relay.Constant][50] /* ty=Tensor[(2), int32] */, %1335) /* ty=Tensor[(2), int32] */;
  %1337 = where(%1333, %1336, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1338 = shape_of(%1331, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1339 = cast(%1338, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1340 = dyn.strided_slice(%1331, %1337, %1339, meta[relay.Constant][51] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1341 = divide(%1340, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1342 = (%1155,);
  %1343 = concatenate(%1342) /* ty=Tensor[(?, 4), float32] */;
  %1344 = take(%1343, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1345 = take(%1343, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1346 = subtract(%1344, %1345) /* ty=Tensor[(?), float32] */;
  %1347 = expand_dims(%1346, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1348 = multiply(%1341, %1347) /* ty=Tensor[(?, ?), float32] */;
  %1349 = take(%1343, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1350 = multiply(%1346, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1351 = add(%1349, %1350) /* ty=Tensor[(?), float32] */;
  %1352 = expand_dims(%1351, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1353 = add(%1348, %1352) /* ty=Tensor[(?, ?), float32] */;
  %1354 = cast_like(0 /* ty=int32 */, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1355 = less(meta[relay.Constant][52] /* ty=Tensor[(2), int32] */, %1354) /* ty=Tensor[(2), bool] */;
  %1356 = shape_of(%1331, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1357 = cast_like(%1356, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1358 = add(meta[relay.Constant][52] /* ty=Tensor[(2), int32] */, %1357) /* ty=Tensor[(2), int32] */;
  %1359 = where(%1355, %1358, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1360 = shape_of(%1331, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1361 = cast(%1360, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1362 = dyn.strided_slice(%1331, %1359, %1361, meta[relay.Constant][53] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1363 = divide(%1362, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1364 = clip(%1363, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
  %1365 = exp(%1364) /* ty=Tensor[(?, ?), float32] */;
  %1366 = expand_dims(%1346, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1367 = multiply(%1365, %1366) /* ty=Tensor[(?, ?), float32] */;
  %1368 = multiply(0.5f /* ty=float32 */, %1367) /* ty=Tensor[(?, ?), float32] */;
  %1369 = subtract(%1353, %1368) /* ty=Tensor[(?, ?), float32] */;
  %1370 = cast_like(0 /* ty=int32 */, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1371 = less(meta[relay.Constant][54] /* ty=Tensor[(2), int32] */, %1370) /* ty=Tensor[(2), bool] */;
  %1372 = shape_of(%1331, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1373 = cast_like(%1372, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1374 = add(meta[relay.Constant][54] /* ty=Tensor[(2), int32] */, %1373) /* ty=Tensor[(2), int32] */;
  %1375 = where(%1371, %1374, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1376 = shape_of(%1331, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1377 = cast(%1376, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1378 = dyn.strided_slice(%1331, %1375, %1377, meta[relay.Constant][55] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1379 = divide(%1378, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1380 = take(%1343, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1381 = take(%1343, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1382 = subtract(%1380, %1381) /* ty=Tensor[(?), float32] */;
  %1383 = expand_dims(%1382, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1384 = multiply(%1379, %1383) /* ty=Tensor[(?, ?), float32] */;
  %1385 = take(%1343, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1386 = multiply(%1382, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1387 = add(%1385, %1386) /* ty=Tensor[(?), float32] */;
  %1388 = expand_dims(%1387, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1389 = add(%1384, %1388) /* ty=Tensor[(?, ?), float32] */;
  %1390 = cast_like(0 /* ty=int32 */, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1391 = less(meta[relay.Constant][56] /* ty=Tensor[(2), int32] */, %1390) /* ty=Tensor[(2), bool] */;
  %1392 = shape_of(%1331, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1393 = cast_like(%1392, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1394 = add(meta[relay.Constant][56] /* ty=Tensor[(2), int32] */, %1393) /* ty=Tensor[(2), int32] */;
  %1395 = where(%1391, %1394, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1396 = shape_of(%1331, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1397 = cast(%1396, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1398 = dyn.strided_slice(%1331, %1395, %1397, meta[relay.Constant][57] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1399 = divide(%1398, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1400 = clip(%1399, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
  %1401 = exp(%1400) /* ty=Tensor[(?, ?), float32] */;
  %1402 = expand_dims(%1382, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1403 = multiply(%1401, %1402) /* ty=Tensor[(?, ?), float32] */;
  %1404 = multiply(0.5f /* ty=float32 */, %1403) /* ty=Tensor[(?, ?), float32] */;
  %1405 = subtract(%1389, %1404) /* ty=Tensor[(?, ?), float32] */;
  %1406 = multiply(0.5f /* ty=float32 */, %1367) /* ty=Tensor[(?, ?), float32] */;
  %1407 = add(%1353, %1406) /* ty=Tensor[(?, ?), float32] */;
  %1408 = multiply(0.5f /* ty=float32 */, %1403) /* ty=Tensor[(?, ?), float32] */;
  %1409 = add(%1389, %1408) /* ty=Tensor[(?, ?), float32] */;
  %1410 = (%1369, %1405, %1407, %1409);
  %1411 = stack(%1410, axis=2) /* ty=Tensor[(?, ?, 4), float32] */;
  %1412 = reshape(%1411, newshape=[0, -1, 1]) /* ty=Tensor[(?, ?, 1), float32] */;
  %1413 = squeeze(%1412, axis=[2]) /* ty=Tensor[(?, ?), float32] */;
  %1414 = cast(%1325, dtype="int64") /* ty=int64 */;
  %1415 = expand_dims(%1414, axis=0) /* ty=Tensor[(1), int64] */;
  %1416 = expand_dims(-1 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1417 = expand_dims(4 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1418 = (%1415, %1416, %1417);
  %1419 = concatenate(%1418) /* ty=Tensor[(3), int64] */;
  %1420 = dyn.reshape(%1413, %1419, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1421 = (%1420,);
  %1422 = %1421.0;
  %1423 = cast_like(0 /* ty=int32 */, meta[relay.Constant][58] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1424 = less(meta[relay.Constant][58] /* ty=Tensor[(3), int32] */, %1423) /* ty=Tensor[(3), bool] */;
  %1425 = shape_of(%1422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1426 = cast_like(%1425, meta[relay.Constant][58] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1427 = add(meta[relay.Constant][58] /* ty=Tensor[(3), int32] */, %1426) /* ty=Tensor[(3), int32] */;
  %1428 = where(%1424, %1427, meta[relay.Constant][58] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1429 = shape_of(%1422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1430 = cast(%1429, dtype="int64") /* ty=Tensor[(3), int64] */;
  %1431 = dyn.strided_slice(%1422, %1428, %1430, meta[relay.Constant][59] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %1432 = maximum(%1431, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
  %1433 = cast(%1062, dtype="float32") /* ty=float32 */;
  %1434 = minimum(%1432, %1433) /* ty=Tensor[(?, ?, ?), float32] */;
  %1435 = cast_like(0 /* ty=int32 */, meta[relay.Constant][60] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1436 = less(meta[relay.Constant][60] /* ty=Tensor[(3), int32] */, %1435) /* ty=Tensor[(3), bool] */;
  %1437 = shape_of(%1422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1438 = cast_like(%1437, meta[relay.Constant][60] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1439 = add(meta[relay.Constant][60] /* ty=Tensor[(3), int32] */, %1438) /* ty=Tensor[(3), int32] */;
  %1440 = where(%1436, %1439, meta[relay.Constant][60] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1441 = shape_of(%1422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1442 = cast(%1441, dtype="int64") /* ty=Tensor[(3), int64] */;
  %1443 = dyn.strided_slice(%1422, %1440, %1442, meta[relay.Constant][61] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %1444 = maximum(%1443, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
  %1445 = cast(%1067, dtype="float32") /* ty=float32 */;
  %1446 = minimum(%1444, %1445) /* ty=Tensor[(?, ?, ?), float32] */;
  %1447 = (%1434, %1446);
  %1448 = stack(%1447, axis=3) /* ty=Tensor[(?, ?, ?, 2), float32] */;
  %1449 = shape_of(%1422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1450 = take(%1449, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1451 = cast(%1450, dtype="int64") /* ty=int64 */;
  %1452 = expand_dims(%1451, axis=0) /* ty=Tensor[(1), int64] */;
  %1453 = shape_of(%1422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1454 = take(%1453, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1455 = cast(%1454, dtype="int64") /* ty=int64 */;
  %1456 = expand_dims(%1455, axis=0) /* ty=Tensor[(1), int64] */;
  %1457 = shape_of(%1422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1458 = take(%1457, 2 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1459 = cast(%1458, dtype="int64") /* ty=int64 */;
  %1460 = expand_dims(%1459, axis=0) /* ty=Tensor[(1), int64] */;
  %1461 = (%1452, %1456, %1460);
  %1462 = concatenate(%1461) /* ty=Tensor[(3), int64] */;
  %1463 = dyn.reshape(%1448, %1462, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1464 = cast_like(0 /* ty=int32 */, meta[relay.Constant][62] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1465 = less(meta[relay.Constant][62] /* ty=Tensor[(3), int32] */, %1464) /* ty=Tensor[(3), bool] */;
  %1466 = shape_of(%1463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1467 = cast_like(%1466, meta[relay.Constant][62] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1468 = add(meta[relay.Constant][62] /* ty=Tensor[(3), int32] */, %1467) /* ty=Tensor[(3), int32] */;
  %1469 = where(%1465, %1468, meta[relay.Constant][62] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1470 = shape_of(%1463, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1471 = cast(%1470, dtype="int64") /* ty=Tensor[(3), int64] */;
  %1472 = dyn.strided_slice(%1463, %1469, %1471, meta[relay.Constant][63] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %1473 = reshape(%1472, newshape=[-1, 4]) /* ty=Tensor[(?, 4), float32] */;
  %1474 = %1321.0;
  %1475 = nn.softmax(%1474) /* ty=Tensor[(?, 91), float32] */;
  %1476 = (%1475,);
  %1477 = %1476.0;
  %1478 = cast_like(0 /* ty=int32 */, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1479 = less(meta[relay.Constant][64] /* ty=Tensor[(2), int32] */, %1478) /* ty=Tensor[(2), bool] */;
  %1480 = shape_of(%1477, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1481 = cast_like(%1480, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1482 = add(meta[relay.Constant][64] /* ty=Tensor[(2), int32] */, %1481) /* ty=Tensor[(2), int32] */;
  %1483 = where(%1479, %1482, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1484 = shape_of(%1477, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1485 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1486 = expand_dims(91 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1487 = scatter(%1484, %1485, %1486, meta[relay.attrs.ScatterAttrs][5]) /* ty=Tensor[(2), int32] */;
  %1488 = cast(%1487, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1489 = dyn.strided_slice(%1477, %1483, %1488, meta[relay.Constant][65] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1490 = reshape(%1489, newshape=[-1]) /* ty=Tensor[(?), float32] */;
  %1491 = greater(%1490, 0.05f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %1492 = argwhere(%1491) /* ty=Tensor[(?, 1), int32] */;
  %1493 = split(%1492, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1494 = %1493.0;
  %1495 = squeeze(%1494, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1496 = (%1495,);
  %1497 = %1496.0;
  %1498 = cast(%1497, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1499 = (%1473, %1498);
  %1500 = adv_index(%1499) /* ty=Tensor[(?, 4), float32] */;
  %1501 = take(%1500, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1502 = take(%1500, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1503 = subtract(%1501, %1502) /* ty=Tensor[(?), float32] */;
  %1504 = greater_equal(%1503, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %1505 = cast(%1504, dtype="bool") /* ty=Tensor[(?), bool] */;
  %1506 = take(%1500, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1507 = take(%1500, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1508 = subtract(%1506, %1507) /* ty=Tensor[(?), float32] */;
  %1509 = greater_equal(%1508, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %1510 = cast(%1509, dtype="bool") /* ty=Tensor[(?), bool] */;
  %1511 = logical_and(%1505, %1510) /* ty=Tensor[(?), bool] */;
  %1512 = argwhere(%1511) /* ty=Tensor[(?, 1), int32] */;
  %1513 = split(%1512, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1514 = %1513.0;
  %1515 = squeeze(%1514, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1516 = (%1515,);
  %1517 = %1516.0;
  %1518 = cast(%1517, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1519 = (%1500, %1518);
  %1520 = adv_index(%1519) /* ty=Tensor[(?, 4), float32] */;
  %1521 = ndarray_size(%1520, dtype="int32") /* ty=int32 */;
  %1522 = equal(%1521, 0 /* ty=int32 */) /* ty=bool */;
  %1577 = if (%1522) {
    zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
  } else {
    %1523 = (%1490, %1498);
    %1524 = adv_index(%1523) /* ty=Tensor[(?), float32] */;
    %1525 = (%1524, %1518);
    %1526 = adv_index(%1525) /* ty=Tensor[(?), float32] */;
    %1527 = min(%1526) /* ty=float32 */;
    %1528 = subtract(%1526, %1527) /* ty=Tensor[(?), float32] */;
    %1529 = add(%1528, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %1530 = expand_dims(%1529, axis=-1) /* ty=Tensor[(?, 1), float32] */;
    %1531 = arange(0 /* ty=int64 */, 91 /* ty=int64 */, 1 /* ty=int64 */, start=meta[relay.Constant][66], stop=meta[relay.Constant][67], step=meta[relay.Constant][68], dtype="int64") /* ty=Tensor[(91), int64] */;
    %1532 = reshape(%1531, newshape=[1, -1]) /* ty=Tensor[(1, 91), int64] */;
    %1533 = cast(%1477, dtype="int64") /* ty=Tensor[(?, 91), int64] */;
    %1534 = broadcast_to_like(%1532, %1533) /* ty=Tensor[(?, 91), int64] */;
    %1535 = cast_like(0 /* ty=int32 */, meta[relay.Constant][69] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
    %1536 = less(meta[relay.Constant][69] /* ty=Tensor[(2), int32] */, %1535) /* ty=Tensor[(2), bool] */;
    %1537 = shape_of(%1534, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1538 = cast_like(%1537, meta[relay.Constant][69] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
    %1539 = add(meta[relay.Constant][69] /* ty=Tensor[(2), int32] */, %1538) /* ty=Tensor[(2), int32] */;
    %1540 = where(%1536, %1539, meta[relay.Constant][69] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
    %1541 = shape_of(%1534, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1542 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
    %1543 = expand_dims(91 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
    %1544 = scatter(%1541, %1542, %1543, meta[relay.attrs.ScatterAttrs][6]) /* ty=Tensor[(2), int32] */;
    %1545 = cast(%1544, dtype="int64") /* ty=Tensor[(2), int64] */;
    %1546 = dyn.strided_slice(%1534, %1540, %1545, meta[relay.Constant][70] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), int64] */;
    %1547 = reshape(%1546, newshape=[-1]) /* ty=Tensor[(?), int64] */;
    %1548 = (%1547, %1498);
    %1549 = adv_index(%1548) /* ty=Tensor[(?), int64] */;
    %1550 = (%1549, %1518);
    %1551 = adv_index(%1550) /* ty=Tensor[(?), int64] */;
    %1552 = cast(%1551, dtype="float32") /* ty=Tensor[(?), float32] */;
    %1553 = max(%1520) /* ty=float32 */;
    %1554 = add(%1553, 1f /* ty=float32 */) /* ty=float32 */;
    %1555 = multiply(%1552, %1554) /* ty=Tensor[(?), float32] */;
    %1556 = expand_dims(%1555, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %1557 = add(%1520, %1556) /* ty=Tensor[(?, 4), float32] */;
    %1558 = (%1530, %1557);
    %1559 = concatenate(%1558, axis=-1) /* ty=Tensor[(?, 5), float32] */;
    %1560 = expand_dims(%1559, axis=0) /* ty=Tensor[(1, ?, 5), float32] */;
    %1561 = shape_of(%1529, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1562 = squeeze(%1561) /* ty=int32 */;
    %1563 = arange(0 /* ty=int32 */, %1562, 1 /* ty=int32 */, start=meta[relay.Constant][71], stop=meta[relay.Call][1], step=meta[relay.Constant][72], dtype="int32") /* ty=Tensor[(?), int32] */;
    %1564 = expand_dims(%1563, axis=0) /* ty=Tensor[(1, ?), int32] */;
    %1565 = vision.non_max_suppression(%1560, %1561, %1564, -1 /* ty=int32 */, 0.5f /* ty=float32 */, meta[relay.attrs.NonMaximumSuppressionAttrs][1]) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */;
    %1566 = %1565.0;
    %1567 = squeeze(%1566, axis=[0]) /* ty=Tensor[(?), int32] */;
    %1568 = cast_like(0 /* ty=int32 */, meta[relay.Constant][73] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
    %1569 = less(meta[relay.Constant][73] /* ty=Tensor[(1), int32] */, %1568) /* ty=Tensor[(1), bool] */;
    %1570 = shape_of(%1567, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1571 = cast_like(%1570, meta[relay.Constant][73] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1572 = add(meta[relay.Constant][73] /* ty=Tensor[(1), int32] */, %1571) /* ty=Tensor[(1), int32] */;
    %1573 = where(%1569, %1572, meta[relay.Constant][73] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1574 = %1565.1;
    %1575 = squeeze(%1574, axis=[1]) /* ty=Tensor[(1), int32] */;
    %1576 = dyn.strided_slice(%1567, %1573, %1575, meta[relay.Constant][74] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None, slice_mode="size") /* ty=Tensor[(?), int32] */;
    cast(%1576, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %1578 = strided_slice(%1577, begin=[0], end=[100], strides=[1]) /* ty=Tensor[(?), int64] */;
  %1579 = (%1520, %1578);
  %1580 = adv_index(%1579) /* ty=Tensor[(?, 4), float32] */;
  %1581 = take(%1580, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1582 = take(%1580, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1583 = subtract(%1581, %1582) /* ty=Tensor[(?), float32] */;
  %1584 = take(%1580, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1585 = take(%1580, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1586 = subtract(%1584, %1585) /* ty=Tensor[(?), float32] */;
  %1587 = multiply(%1583, %1586) /* ty=Tensor[(?), float32] */;
  %1588 = (%1587,);
  %1589 = concatenate(%1588) /* ty=Tensor[(?), float32] */;
  %1590 = sqrt(%1589) /* ty=Tensor[(?), float32] */;
  %1591 = divide(%1590, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1592 = log2(%1591) /* ty=Tensor[(?), float32] */;
  %1593 = add(%1592, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1594 = add(%1593, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1595 = floor(%1594) /* ty=Tensor[(?), float32] */;
  %1596 = clip(%1595, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
  %1597 = cast(%1596, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1598 = subtract(%1597, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */;
  %1599 = shape_of(%1598, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1600 = take(%1599, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1601 = expand_dims(%1600, axis=0) /* ty=Tensor[(1), int32] */;
  %1602 = cast(%1601, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1603 = expand_dims(256 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1604 = cast(%1603, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1605 = expand_dims(14 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1606 = cast(%1605, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1607 = expand_dims(14 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1608 = cast(%1607, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1609 = (%1602, %1604, %1606, %1608);
  %1610 = concatenate(%1609) /* ty=Tensor[(4), int64] */;
  %1611 = dyn.full(0 /* ty=int32 */, %1610, shape=None, dtype="float32") /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %1612 = reshape(%1611, newshape=[0, 256, 14, 14]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1613 = equal(%1598, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1614 = argwhere(%1613) /* ty=Tensor[(?, 1), int32] */;
  %1615 = split(%1614, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1616 = %1615.0;
  %1617 = squeeze(%1616, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1618 = (%1617,);
  %1619 = %1618.0;
  %1620 = reshape(%1619, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1621 = repeat(%1620, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1622 = repeat(%1621, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %1623 = repeat(%1622, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %1624 = cast_like(0 /* ty=int32 */, meta[relay.Constant][75] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1625 = less(meta[relay.Constant][75] /* ty=Tensor[(2), int32] */, %1624) /* ty=Tensor[(2), bool] */;
  %1626 = shape_of(%1580, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1627 = cast_like(%1626, meta[relay.Constant][75] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1628 = add(meta[relay.Constant][75] /* ty=Tensor[(2), int32] */, %1627) /* ty=Tensor[(2), int32] */;
  %1629 = where(%1625, %1628, meta[relay.Constant][75] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1630 = shape_of(%1580, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1631 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1632 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1633 = scatter(%1630, %1631, %1632, meta[relay.attrs.ScatterAttrs][7]) /* ty=Tensor[(2), int32] */;
  %1634 = cast(%1633, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1635 = dyn.strided_slice(%1580, %1629, %1634, meta[relay.Constant][76] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1636 = full_like(%1635, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
  %1637 = (%1636,);
  %1638 = concatenate(%1637) /* ty=Tensor[(?, ?), float32] */;
  %1639 = (%1580,);
  %1640 = concatenate(%1639) /* ty=Tensor[(?, 4), float32] */;
  %1641 = (%1638, %1640);
  %1642 = concatenate(%1641, axis=1) /* ty=Tensor[(?, ?), float32] */;
  %1643 = equal(%1598, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1644 = argwhere(%1643) /* ty=Tensor[(?, 1), int32] */;
  %1645 = split(%1644, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1646 = %1645.0;
  %1647 = squeeze(%1646, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1648 = (%1647,);
  %1649 = %1648.0;
  %1650 = cast(%1649, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1651 = (%1642, %1650);
  %1652 = adv_index(%1651) /* ty=Tensor[(?, ?), float32] */;
  %1653 = vision.roi_align(%762, %1652, meta[relay.attrs.ROIAlignAttrs][4]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1654 = scatter(%1612, %1623, %1653, meta[relay.attrs.ScatterAttrs][8]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1655 = equal(%1598, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1656 = argwhere(%1655) /* ty=Tensor[(?, 1), int32] */;
  %1657 = split(%1656, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1658 = %1657.0;
  %1659 = squeeze(%1658, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1660 = (%1659,);
  %1661 = %1660.0;
  %1662 = reshape(%1661, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1663 = repeat(%1662, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1664 = repeat(%1663, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %1665 = repeat(%1664, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %1666 = equal(%1598, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1667 = argwhere(%1666) /* ty=Tensor[(?, 1), int32] */;
  %1668 = split(%1667, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1669 = %1668.0;
  %1670 = squeeze(%1669, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1671 = (%1670,);
  %1672 = %1671.0;
  %1673 = cast(%1672, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1674 = (%1642, %1673);
  %1675 = adv_index(%1674) /* ty=Tensor[(?, ?), float32] */;
  %1676 = vision.roi_align(%768, %1675, meta[relay.attrs.ROIAlignAttrs][5]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1677 = scatter(%1654, %1665, %1676, meta[relay.attrs.ScatterAttrs][9]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1678 = equal(%1598, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1679 = argwhere(%1678) /* ty=Tensor[(?, 1), int32] */;
  %1680 = split(%1679, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1681 = %1680.0;
  %1682 = squeeze(%1681, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1683 = (%1682,);
  %1684 = %1683.0;
  %1685 = reshape(%1684, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1686 = repeat(%1685, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1687 = repeat(%1686, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %1688 = repeat(%1687, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %1689 = equal(%1598, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1690 = argwhere(%1689) /* ty=Tensor[(?, 1), int32] */;
  %1691 = split(%1690, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1692 = %1691.0;
  %1693 = squeeze(%1692, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1694 = (%1693,);
  %1695 = %1694.0;
  %1696 = cast(%1695, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1697 = (%1642, %1696);
  %1698 = adv_index(%1697) /* ty=Tensor[(?, ?), float32] */;
  %1699 = vision.roi_align(%774, %1698, meta[relay.attrs.ROIAlignAttrs][6]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1700 = scatter(%1677, %1688, %1699, meta[relay.attrs.ScatterAttrs][10]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1701 = equal(%1598, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1702 = argwhere(%1701) /* ty=Tensor[(?, 1), int32] */;
  %1703 = split(%1702, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1704 = %1703.0;
  %1705 = squeeze(%1704, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1706 = (%1705,);
  %1707 = %1706.0;
  %1708 = reshape(%1707, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1709 = repeat(%1708, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1710 = repeat(%1709, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %1711 = repeat(%1710, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %1712 = %761.10;
  %1713 = equal(%1598, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1714 = argwhere(%1713) /* ty=Tensor[(?, 1), int32] */;
  %1715 = split(%1714, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1716 = %1715.0;
  %1717 = squeeze(%1716, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1718 = (%1717,);
  %1719 = %1718.0;
  %1720 = cast(%1719, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1721 = (%1642, %1720);
  %1722 = adv_index(%1721) /* ty=Tensor[(?, ?), float32] */;
  %1723 = vision.roi_align(%1712, %1722, meta[relay.attrs.ROIAlignAttrs][7]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1724 = scatter(%1700, %1711, %1723, meta[relay.attrs.ScatterAttrs][11]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1725 = nn.conv2d(%1724, %model.roi_heads.mask_head.mask_fcn1.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1726 = nn.bias_add(%1725, %model.roi_heads.mask_head.mask_fcn1.bias) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1727 = nn.relu(%1726) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1728 = nn.conv2d(%1727, %model.roi_heads.mask_head.mask_fcn2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1729 = nn.bias_add(%1728, %model.roi_heads.mask_head.mask_fcn2.bias) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1730 = nn.relu(%1729) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1731 = nn.conv2d(%1730, %model.roi_heads.mask_head.mask_fcn3.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1732 = nn.bias_add(%1731, %model.roi_heads.mask_head.mask_fcn3.bias) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1733 = nn.relu(%1732) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1734 = nn.conv2d(%1733, %model.roi_heads.mask_head.mask_fcn4.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1735 = nn.bias_add(%1734, %model.roi_heads.mask_head.mask_fcn4.bias) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1736 = nn.relu(%1735) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1737 = nn.conv2d_transpose(%1736, %model.roi_heads.mask_predictor.conv5_mask.weight, channels=256, kernel_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(?, 256, 28, 28), float32] */;
  %1738 = nn.bias_add(%1737, %model.roi_heads.mask_predictor.conv5_mask.bias) /* ty=Tensor[(?, 256, 28, 28), float32] */;
  %1739 = nn.relu(%1738) /* ty=Tensor[(?, 256, 28, 28), float32] */;
  %1740 = nn.conv2d(%1739, %model.roi_heads.mask_predictor.mask_fcn_logits.weight, padding=[0, 0, 0, 0], channels=91, kernel_size=[1, 1]) /* ty=Tensor[(?, 91, 28, 28), float32] */;
  %1741 = nn.bias_add(%1740, %model.roi_heads.mask_predictor.mask_fcn_logits.bias) /* ty=Tensor[(?, 91, 28, 28), float32] */;
  %1742 = sigmoid(%1741) /* ty=Tensor[(?, 91, 28, 28), float32] */;
  %1743 = shape_of(%1741, dtype="int32") /* ty=Tensor[(4), int32] */;
  %1744 = take(%1743, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1745 = cast(%1744, dtype="int64") /* ty=int64 */;
  %1746 = arange(0 /* ty=int64 */, %1745, 1 /* ty=int64 */, start=meta[relay.Constant][77], stop=meta[relay.Call][2], step=meta[relay.Constant][78], dtype="int64") /* ty=Tensor[(?), int64] */;
  %1747 = (%1551, %1578);
  %1748 = adv_index(%1747) /* ty=Tensor[(?), int64] */;
  %1749 = (%1748,);
  %1750 = concatenate(%1749) /* ty=Tensor[(?), int64] */;
  %1751 = (%1742, %1746, %1750);
  %1752 = adv_index(%1751) /* ty=Tensor[(?, 28, 28), float32] */;
  %1753 = expand_dims(%1752, axis=1) /* ty=Tensor[(?, 1, 28, 28), float32] */;
  %1754 = (%1753,);
  %1755 = %1754.0;
  %1756 = (%1526, %1578);
  %1757 = adv_index(%1756) /* ty=Tensor[(?), float32] */;
  %1758 = (%1580, %1755, %1757, %1748);
  %1759 = %1758.0;
  %1760 = split(%1759, indices_or_sections=4, axis=1) /* ty=(Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32]) */;
  %1761 = %1760.0;
  %1762 = squeeze(%1761, axis=[1]) /* ty=Tensor[(?), float32] */;
  %1763 = %1760.1;
  %1764 = squeeze(%1763, axis=[1]) /* ty=Tensor[(?), float32] */;
  %1765 = %1760.2;
  %1766 = squeeze(%1765, axis=[1]) /* ty=Tensor[(?), float32] */;
  %1767 = %1760.3;
  %1768 = squeeze(%1767, axis=[1]) /* ty=Tensor[(?), float32] */;
  %1769 = (%1762, %1764, %1766, %1768);
  %1770 = %1769.0;
  %1771 = cast(300 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1772 = cast(%1062, dtype="float32") /* ty=float32 */;
  %1773 = divide(%1771, %1772) /* ty=float32 */;
  %1774 = multiply(%1770, %1773) /* ty=Tensor[(?), float32] */;
  %1775 = %1769.1;
  %1776 = cast(300 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1777 = cast(%1067, dtype="float32") /* ty=float32 */;
  %1778 = divide(%1776, %1777) /* ty=float32 */;
  %1779 = multiply(%1775, %1778) /* ty=Tensor[(?), float32] */;
  %1780 = %1769.2;
  %1781 = multiply(%1780, %1773) /* ty=Tensor[(?), float32] */;
  %1782 = %1769.3;
  %1783 = multiply(%1782, %1778) /* ty=Tensor[(?), float32] */;
  %1784 = (%1774, %1779, %1781, %1783);
  %1785 = stack(%1784, axis=1) /* ty=Tensor[(?, 4), float32] */;
  %1786 = %1758.2;
  %1787 = %1758.3;
  %1788 = full(0 /* ty=int32 */, shape=[0, 300, 300], dtype="float32") /* ty=Tensor[(0, 300, 300), float32] */;
  %1789 = %1758.1;
  %1790 = nn.pad(%1789, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]) /* ty=Tensor[(?, 1, 30, 30), float32] */;
  %1791 = take(%1785, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1792 = take(%1785, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1793 = add(%1791, %1792) /* ty=Tensor[(?), float32] */;
  %1794 = multiply(%1793, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1795 = take(%1785, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1796 = take(%1785, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1797 = subtract(%1795, %1796) /* ty=Tensor[(?), float32] */;
  %1798 = multiply(%1797, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1799 = add(28 /* ty=int32 */, 2 /* ty=int32 */) /* ty=int32 */;
  %1800 = cast(%1799, dtype="int64") /* ty=int64 */;
  %1801 = cast(%1800, dtype="float32") /* ty=float32 */;
  %1802 = cast(28 /* ty=int32 */, dtype="int64") /* ty=int64 */;
  %1803 = cast(%1802, dtype="float32") /* ty=float32 */;
  %1804 = divide(%1801, %1803) /* ty=float32 */;
  %1805 = multiply(%1798, %1804) /* ty=Tensor[(?), float32] */;
  %1806 = subtract(%1794, %1805) /* ty=Tensor[(?), float32] */;
  %1807 = take(%1785, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1808 = take(%1785, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1809 = add(%1807, %1808) /* ty=Tensor[(?), float32] */;
  %1810 = multiply(%1809, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1811 = take(%1785, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1812 = take(%1785, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1813 = subtract(%1811, %1812) /* ty=Tensor[(?), float32] */;
  %1814 = multiply(%1813, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1815 = multiply(%1814, %1804) /* ty=Tensor[(?), float32] */;
  %1816 = subtract(%1810, %1815) /* ty=Tensor[(?), float32] */;
  %1817 = add(%1794, %1805) /* ty=Tensor[(?), float32] */;
  %1818 = add(%1810, %1815) /* ty=Tensor[(?), float32] */;
  %1819 = (%1806, %1816, %1817, %1818);
  %1820 = stack(%1819, axis=1) /* ty=Tensor[(?, 4), float32] */;
  %1821 = cast(%1820, dtype="int64") /* ty=Tensor[(?, 4), int64] */;
  %1994 = (
    let %while_loop: fn (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, 30, 30), float32], Tensor[(?, 4), int64]) -> (int32, Tensor[(?, 300, 300), float32], Tensor[(?, 1, 30, 30), float32], Tensor[(?, 4), int64]) = fn (%i.1: int32, %res_append.6: Tensor[(?, ?, ?), float32], %v7286: Tensor[(?, 1, 30, 30), float32], %v7394: Tensor[(?, 4), int64]) -> (int32, Tensor[(?, 300, 300), float32], Tensor[(?, 1, 30, 30), float32], Tensor[(?, 4), int64]) {
      %1822 = shape_of(%1790, dtype="int32") /* ty=Tensor[(4), int32] */;
      %1823 = take(%1822, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
      %1824 = less(%i.1, %1823) /* ty=bool */;
      if (%1824) {
        %1825 = add(%i.1, 1 /* ty=int32 */) /* ty=int32 */;
        %1826 = take(%v7394, %i.1, axis=0, mode="wrap") /* ty=Tensor[(4), int64] */;
        %1827 = take(%1826, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1828 = expand_dims(%1827, axis=0) /* ty=Tensor[(1), int64] */;
        %1829 = full(0 /* ty=int32 */, shape=[1], dtype="int64") /* ty=Tensor[(1), int64] */;
        %1830 = (%1828, %1829);
        %1831 = concatenate(%1830) /* ty=Tensor[(2), int64] */;
        %1832 = max(%1831) /* ty=int64 */;
        %1833 = expand_dims(%1832, axis=0) /* ty=Tensor[(1), int64] */;
        %1834 = cast(%1833, dtype="int64") /* ty=Tensor[(1), int64] */;
        %1835 = take(%v7286, %i.1, axis=0, mode="wrap") /* ty=Tensor[(1, 30, 30), float32] */;
        %1836 = take(%1835, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(30, 30), float32] */;
        %1837 = expand_dims(%1836, axis=0, num_newaxis=2) /* ty=Tensor[(1, 1, 30, 30), float32] */;
        %1838 = repeat(%1837, repeats=1, axis=0) /* ty=Tensor[(1, 1, 30, 30), float32] */;
        %1839 = repeat(%1838, repeats=1, axis=1) /* ty=Tensor[(1, 1, 30, 30), float32] */;
        %1840 = take(%1826, 3 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1841 = take(%1826, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1842 = subtract(%1840, %1841) /* ty=int64 */;
        %1843 = full(1 /* ty=int32 */, shape=[1], dtype="int64") /* ty=Tensor[(1), int64] */;
        %1844 = add(%1842, %1843) /* ty=Tensor[(1), int64] */;
        %1845 = (%1844, %1843);
        %1846 = concatenate(%1845) /* ty=Tensor[(2), int64] */;
        %1847 = max(%1846) /* ty=int64 */;
        %1848 = expand_dims(%1847, axis=0) /* ty=Tensor[(1), int64] */;
        %1849 = take(%1826, 2 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1850 = take(%1826, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1851 = subtract(%1849, %1850) /* ty=int64 */;
        %1852 = add(%1851, %1843) /* ty=Tensor[(1), int64] */;
        %1853 = (%1852, %1843);
        %1854 = concatenate(%1853) /* ty=Tensor[(2), int64] */;
        %1855 = max(%1854) /* ty=int64 */;
        %1856 = expand_dims(%1855, axis=0) /* ty=Tensor[(1), int64] */;
        %1857 = (%1848, %1856);
        %1858 = concatenate(%1857) /* ty=Tensor[(2), int64] */;
        %1859 = dyn.image.resize(%1839, %1858, size=[]) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        %1860 = take(%1859, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(1, ?, ?), float32] */;
        %1861 = take(%1860, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(?, ?), float32] */;
        %1862 = take(%1826, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1863 = subtract(%1832, %1862) /* ty=int64 */;
        %1864 = expand_dims(%1863, axis=0) /* ty=Tensor[(1), int64] */;
        %1865 = cast(%1864, dtype="int64") /* ty=Tensor[(1), int64] */;
        %1866 = expand_dims(0 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %1867 = (%1865, %1866);
        %1868 = concatenate(%1867) /* ty=Tensor[(2), int64] */;
        %1869 = cast_like(0 /* ty=int32 */, %1868) /* ty=int64 */;
        %1870 = less(%1868, %1869) /* ty=Tensor[(2), bool] */;
        %1871 = shape_of(%1861, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1872 = cast_like(%1871, %1868) /* ty=Tensor[(2), int64] */;
        %1873 = add(%1868, %1872) /* ty=Tensor[(2), int64] */;
        %1874 = where(%1870, %1873, %1868) /* ty=Tensor[(2), int64] */;
        %1875 = shape_of(%1861, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1876 = cast(%1875, dtype="int64") /* ty=Tensor[(2), int64] */;
        %1877 = expand_dims(0 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %1878 = take(%1826, 3 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1879 = expand_dims(%1878, axis=0) /* ty=Tensor[(1), int64] */;
        %1880 = add(%1879, %1843) /* ty=Tensor[(1), int64] */;
        %1881 = expand_dims(300 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %1882 = (%1880, %1881);
        %1883 = concatenate(%1882) /* ty=Tensor[(2), int64] */;
        %1884 = min(%1883) /* ty=int64 */;
        %1885 = take(%1826, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1886 = subtract(%1884, %1885) /* ty=int64 */;
        %1887 = expand_dims(%1886, axis=0) /* ty=Tensor[(1), int64] */;
        %1888 = scatter(%1876, %1877, %1887, meta[relay.attrs.ScatterAttrs][12]) /* ty=Tensor[(2), int64] */;
        %1889 = dyn.strided_slice(%1861, %1874, %1888, meta[relay.Constant][79] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %1890 = expand_dims(0 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %1891 = take(%1826, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1892 = expand_dims(%1891, axis=0) /* ty=Tensor[(1), int64] */;
        %1893 = (%1892, %1829);
        %1894 = concatenate(%1893) /* ty=Tensor[(2), int64] */;
        %1895 = max(%1894) /* ty=int64 */;
        %1896 = take(%1826, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1897 = subtract(%1895, %1896) /* ty=int64 */;
        %1898 = expand_dims(%1897, axis=0) /* ty=Tensor[(1), int64] */;
        %1899 = cast(%1898, dtype="int64") /* ty=Tensor[(1), int64] */;
        %1900 = (%1890, %1899);
        %1901 = concatenate(%1900) /* ty=Tensor[(2), int64] */;
        %1902 = cast_like(0 /* ty=int32 */, %1901) /* ty=int64 */;
        %1903 = less(%1901, %1902) /* ty=Tensor[(2), bool] */;
        %1904 = shape_of(%1889, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1905 = cast_like(%1904, %1901) /* ty=Tensor[(2), int64] */;
        %1906 = add(%1901, %1905) /* ty=Tensor[(2), int64] */;
        %1907 = where(%1903, %1906, %1901) /* ty=Tensor[(2), int64] */;
        %1908 = shape_of(%1889, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1909 = cast(%1908, dtype="int64") /* ty=Tensor[(2), int64] */;
        %1910 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %1911 = take(%1826, 2 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1912 = expand_dims(%1911, axis=0) /* ty=Tensor[(1), int64] */;
        %1913 = add(%1912, %1843) /* ty=Tensor[(1), int64] */;
        %1914 = expand_dims(300 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %1915 = (%1913, %1914);
        %1916 = concatenate(%1915) /* ty=Tensor[(2), int64] */;
        %1917 = min(%1916) /* ty=int64 */;
        %1918 = take(%1826, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1919 = subtract(%1917, %1918) /* ty=int64 */;
        %1920 = expand_dims(%1919, axis=0) /* ty=Tensor[(1), int64] */;
        %1921 = scatter(%1909, %1910, %1920, meta[relay.attrs.ScatterAttrs][13]) /* ty=Tensor[(2), int64] */;
        %1922 = dyn.strided_slice(%1889, %1907, %1921, meta[relay.Constant][80] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %1923 = shape_of(%1922, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1924 = take(%1923, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
        %1925 = expand_dims(%1924, axis=0) /* ty=Tensor[(1), int32] */;
        %1926 = cast(%1925, dtype="int64") /* ty=Tensor[(1), int64] */;
        %1927 = (%1834, %1926);
        %1928 = concatenate(%1927) /* ty=Tensor[(2), int64] */;
        %1929 = dyn.full(0 /* ty=int32 */, %1928, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %1930 = reshape(%1929, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %1931 = subtract(300 /* ty=int64 */, %1884) /* ty=int64 */;
        %1932 = expand_dims(%1931, axis=0) /* ty=Tensor[(1), int64] */;
        %1933 = cast(%1932, dtype="int64") /* ty=Tensor[(1), int64] */;
        %1934 = shape_of(%1922, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1935 = take(%1934, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
        %1936 = expand_dims(%1935, axis=0) /* ty=Tensor[(1), int32] */;
        %1937 = cast(%1936, dtype="int64") /* ty=Tensor[(1), int64] */;
        %1938 = (%1933, %1937);
        %1939 = concatenate(%1938) /* ty=Tensor[(2), int64] */;
        %1940 = dyn.full(0 /* ty=int32 */, %1939, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %1941 = reshape(%1940, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %1942 = (%1930, %1922, %1941);
        %1943 = concatenate(%1942) /* ty=Tensor[(?, ?), float32] */;
        %1944 = cast_like(0 /* ty=int32 */, meta[relay.Constant][81] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
        %1945 = less(meta[relay.Constant][81] /* ty=Tensor[(2), int32] */, %1944) /* ty=Tensor[(2), bool] */;
        %1946 = shape_of(%1943, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1947 = cast_like(%1946, meta[relay.Constant][81] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %1948 = add(meta[relay.Constant][81] /* ty=Tensor[(2), int32] */, %1947) /* ty=Tensor[(2), int32] */;
        %1949 = where(%1945, %1948, meta[relay.Constant][81] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %1950 = shape_of(%1943, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1951 = expand_dims(0 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %1952 = expand_dims(300 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %1953 = scatter(%1950, %1951, %1952, meta[relay.attrs.ScatterAttrs][14]) /* ty=Tensor[(2), int32] */;
        %1954 = cast(%1953, dtype="int64") /* ty=Tensor[(2), int64] */;
        %1955 = dyn.strided_slice(%1943, %1949, %1954, meta[relay.Constant][82] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %1956 = shape_of(%1955, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1957 = take(%1956, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
        %1958 = expand_dims(%1957, axis=0) /* ty=Tensor[(1), int32] */;
        %1959 = cast(%1958, dtype="int64") /* ty=Tensor[(1), int64] */;
        %1960 = expand_dims(%1895, axis=0) /* ty=Tensor[(1), int64] */;
        %1961 = cast(%1960, dtype="int64") /* ty=Tensor[(1), int64] */;
        %1962 = (%1959, %1961);
        %1963 = concatenate(%1962) /* ty=Tensor[(2), int64] */;
        %1964 = dyn.full(0 /* ty=int32 */, %1963, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %1965 = reshape(%1964, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %1966 = shape_of(%1955, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1967 = take(%1966, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
        %1968 = expand_dims(%1967, axis=0) /* ty=Tensor[(1), int32] */;
        %1969 = cast(%1968, dtype="int64") /* ty=Tensor[(1), int64] */;
        %1970 = subtract(300 /* ty=int64 */, %1917) /* ty=int64 */;
        %1971 = expand_dims(%1970, axis=0) /* ty=Tensor[(1), int64] */;
        %1972 = cast(%1971, dtype="int64") /* ty=Tensor[(1), int64] */;
        %1973 = (%1969, %1972);
        %1974 = concatenate(%1973) /* ty=Tensor[(2), int64] */;
        %1975 = dyn.full(0 /* ty=int32 */, %1974, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %1976 = reshape(%1975, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %1977 = (%1965, %1955, %1976);
        %1978 = concatenate(%1977, axis=1) /* ty=Tensor[(?, ?), float32] */;
        %1979 = cast_like(0 /* ty=int32 */, meta[relay.Constant][83] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
        %1980 = less(meta[relay.Constant][83] /* ty=Tensor[(2), int32] */, %1979) /* ty=Tensor[(2), bool] */;
        %1981 = shape_of(%1978, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1982 = cast_like(%1981, meta[relay.Constant][83] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %1983 = add(meta[relay.Constant][83] /* ty=Tensor[(2), int32] */, %1982) /* ty=Tensor[(2), int32] */;
        %1984 = where(%1980, %1983, meta[relay.Constant][83] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %1985 = shape_of(%1978, dtype="int32") /* ty=Tensor[(2), int32] */;
        %1986 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %1987 = expand_dims(300 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %1988 = scatter(%1985, %1986, %1987, meta[relay.attrs.ScatterAttrs][15]) /* ty=Tensor[(2), int32] */;
        %1989 = cast(%1988, dtype="int64") /* ty=Tensor[(2), int64] */;
        %1990 = dyn.strided_slice(%1978, %1984, %1989, meta[relay.Constant][84] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %1991 = expand_dims(%1990, axis=0) /* ty=Tensor[(1, ?, ?), float32] */;
        %1992 = (%res_append.6, %1991);
        %1993 = concatenate(%1992) /* ty=Tensor[(?, ?, ?), float32] */;
        %while_loop(%1825, %1993, %v7286, %v7394) /* ty=(int32, Tensor[(?, 300, 300), float32], Tensor[(?, 1, 30, 30), float32], Tensor[(?, 4), int64]) */
      } else {
        (%i.1, %res_append.6, %v7286, %v7394)
      }
    };
    %while_loop
  );
  %1995 = %1994(0 /* ty=int32 */, %1788, %1790, %1821) /* ty=(int32, Tensor[(?, 300, 300), float32], Tensor[(?, 1, 30, 30), float32], Tensor[(?, 4), int64]) */;
  %1996 = %1995.1;
  %1997 = expand_dims(%1996, axis=1) /* ty=Tensor[(?, 1, ?, ?), float32] */;
  %1998 = (%1785, %1786, %1787, %1997);
  %1999 = %1998.0;
  %2000 = %1998.1;
  %2001 = %1998.2;
  %2002 = %1998.3;
  (%1999, %2000, %2001, %2002)
}
