type static_tensor_float32_any_t {
  tensor_nil_float32_any,
  tensor_constructor_float32_any(Tensor[(?), float32]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

type static_tensor_float32_any_any_any_t {
  tensor_nil_float32_any_any_any,
  tensor_constructor_float32_any_any_any(Tensor[(?, ?, ?), float32]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type static_tensor_float32_any_any_any_any_t {
  tensor_nil_float32_any_any_any_any,
  tensor_constructor_float32_any_any_any_any(Tensor[(?, ?, ?, ?), float32]),
}

type Option[A] {
  Some(A),
  None,
}

type static_tensor_float32_any_any_t {
  tensor_nil_float32_any_any,
  tensor_constructor_float32_any_any(Tensor[(?, ?), float32]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

def @foldl[A, B](%f: fn (A, B) -> A, %acc: A, %xs: List[B]) -> A {
  match (%xs) {
    Cons(%x: B, %rest: List[B]) => {
      %0 = %f(%acc, %x) /* /home/masa/projects/dev/tvm/python/tvm/relay/std/prelude.rly */ /* ty=A */;
      @foldl(%f, %0, %rest) /* /home/masa/projects/dev/tvm/python/tvm/relay/std/prelude.rly */ /* ty=A */
    },
    Nil => {
      %acc
    },
  }
}

def @concat[A](%xs1: List[A], %ys: List[A]) -> List[A] {
  @foldr(Cons, %ys, %xs1) /* /home/masa/projects/dev/tvm/python/tvm/relay/std/prelude.rly */ /* ty=List[A] */
}

def @tensor_array_stack_float32_any_any(%tensor_array: List[static_tensor_float32_any_any_t[]]) -> static_tensor_float32_any_any_any_t[] {
  %1 = @map(@tensor_expand_dims_float32_any_any, %tensor_array);
  %2 = @hd(%1);
  %3 = @tl(%1);
  @foldl(@tensor_concatenate_float32_any_any_any, %2, %3)
}

def @tl[A](%xs2: List[A]) -> List[A] {
  match? (%xs2) {
    Cons(_, %rest1: List[A]) => {
      %rest1
    },
  }
}

def @tensor_concatenate_float32_any_any_any(%x1: static_tensor_float32_any_any_any_t[], %y: static_tensor_float32_any_any_any_t[]) -> static_tensor_float32_any_any_any_t[] {
  match? (%x1) {
    tensor_constructor_float32_any_any_any(%t1) => {
      match? (%y) {
        tensor_constructor_float32_any_any_any(%t2) => {
          %4 = (%t1, %t2);
          %5 = concatenate(%4);
          tensor_constructor_float32_any_any_any(%5)
        },
      }
    },
  }
}

def @main(%input0: Tensor[(1, 3, 300, 300), float32], %model.backbone.body.conv1.weight: Tensor[(64, 3, 7, 7), float32], %model.backbone.body.bn1.weight: Tensor[(64), float32], %model.backbone.body.bn1.running_var: Tensor[(64), float32], %model.backbone.body.bn1.bias: Tensor[(64), float32], %model.backbone.body.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.0.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.downsample.1.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.1.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.1.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.1.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.2.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.2.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.2.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32], %model.backbone.body.layer2.0.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.0.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.0.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %model.backbone.body.layer2.0.downsample.1.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.1.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.1.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.1.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.2.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.2.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.2.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.3.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.3.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.3.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.body.layer3.0.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.0.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.0.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32], %model.backbone.body.layer3.0.downsample.1.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.1.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.1.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.1.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.2.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.2.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.2.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.3.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.3.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.3.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.4.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.4.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.4.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.5.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.5.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.5.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32], %model.backbone.body.layer4.0.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.0.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.0.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32], %model.backbone.body.layer4.0.downsample.1.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.1.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.1.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.1.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.2.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.2.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.2.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_mean: Tensor[(2048), float32], %model.backbone.fpn.inner_blocks.0.weight: Tensor[(256, 256, 1, 1), float32], %model.backbone.fpn.inner_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.fpn.inner_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.2.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.fpn.inner_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.3.weight: Tensor[(256, 2048, 1, 1), float32], %model.backbone.fpn.inner_blocks.3.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.0.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.1.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.3.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.3.bias: Tensor[(256), float32], %model.rpn.head.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.rpn.head.conv.bias: Tensor[(256), float32], %model.rpn.head.cls_logits.weight: Tensor[(3, 256, 1, 1), float32], %model.rpn.head.cls_logits.bias: Tensor[(3), float32], %model.rpn.head.bbox_pred.weight: Tensor[(12, 256, 1, 1), float32], %model.rpn.head.bbox_pred.bias: Tensor[(12), float32], %model.roi_heads.box_head.fc6.weight: Tensor[(1024, 12544), float32], %model.roi_heads.box_head.fc6.bias: Tensor[(1024), float32], %model.roi_heads.box_head.fc7.weight: Tensor[(1024, 1024), float32], %model.roi_heads.box_head.fc7.bias: Tensor[(1024), float32], %model.roi_heads.box_predictor.cls_score.weight: Tensor[(91, 1024), float32], %model.roi_heads.box_predictor.cls_score.bias: Tensor[(91), float32], %model.roi_heads.box_predictor.bbox_pred.weight: Tensor[(364, 1024), float32], %model.roi_heads.box_predictor.bbox_pred.bias: Tensor[(364), float32], %model.roi_heads.mask_head.mask_fcn1.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn1.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn2.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn2.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn3.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn3.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn4.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn4.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.conv5_mask.weight: Tensor[(256, 256, 2, 2), float32], %model.roi_heads.mask_predictor.conv5_mask.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.weight: Tensor[(91, 256, 1, 1), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.bias: Tensor[(91), float32]) {
  %6 = split(%input0, indices_or_sections=1);
  %7 = %6.0;
  %8 = squeeze(%7, axis=[0]);
  %9 = (%8,);
  %10 = %9.0;
  %11 = strided_slice(meta[relay.Constant][0], begin=[0], end=[3], strides=[1]);
  %12 = expand_dims(%11, axis=1);
  %13 = expand_dims(%12, axis=2);
  %14 = subtract(%10, %13);
  %15 = strided_slice(meta[relay.Constant][1], begin=[0], end=[3], strides=[1]);
  %16 = expand_dims(%15, axis=1);
  %17 = expand_dims(%16, axis=2);
  %18 = divide(%14, %17);
  %19 = expand_dims(%18, axis=0);
  %20 = image.resize(%19, size=[800, 800]);
  %21 = take(%20, 0, axis=0);
  %22 = nn.pad(%21, pad_width=[[0, 0], [0, 0], [0, 0]]);
  %23 = (%22,);
  %24 = stack(%23);
  %25 = (%24, 800, 800);
  %26 = %25.0;
  %27 = nn.conv2d(%26, %model.backbone.body.conv1.weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]);
  %28 = reshape(%model.backbone.body.bn1.weight, newshape=[1, -1, 1, 1]);
  %29 = reshape(%model.backbone.body.bn1.running_var, newshape=[1, -1, 1, 1]);
  %30 = add(%29, 0f);
  %31 = rsqrt(%30);
  %32 = multiply(%28, %31);
  %33 = multiply(%27, %32);
  %34 = reshape(%model.backbone.body.bn1.bias, newshape=[1, -1, 1, 1]);
  %35 = reshape(%model.backbone.body.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %36 = multiply(%35, %32);
  %37 = subtract(%34, %36);
  %38 = add(%33, %37);
  %39 = nn.relu(%38);
  %40 = nn.max_pool2d(%39, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]);
  %41 = nn.conv2d(%40, %model.backbone.body.layer1.0.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %42 = reshape(%model.backbone.body.layer1.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %43 = reshape(%model.backbone.body.layer1.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %44 = add(%43, 0f);
  %45 = rsqrt(%44);
  %46 = multiply(%42, %45);
  %47 = multiply(%41, %46);
  %48 = reshape(%model.backbone.body.layer1.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %49 = reshape(%model.backbone.body.layer1.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %50 = multiply(%49, %46);
  %51 = subtract(%48, %50);
  %52 = add(%47, %51);
  %53 = nn.relu(%52);
  %54 = nn.conv2d(%53, %model.backbone.body.layer1.0.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %55 = reshape(%model.backbone.body.layer1.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %56 = reshape(%model.backbone.body.layer1.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %57 = add(%56, 0f);
  %58 = rsqrt(%57);
  %59 = multiply(%55, %58);
  %60 = multiply(%54, %59);
  %61 = reshape(%model.backbone.body.layer1.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %62 = reshape(%model.backbone.body.layer1.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %63 = multiply(%62, %59);
  %64 = subtract(%61, %63);
  %65 = add(%60, %64);
  %66 = nn.relu(%65);
  %67 = nn.conv2d(%66, %model.backbone.body.layer1.0.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %68 = reshape(%model.backbone.body.layer1.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %69 = reshape(%model.backbone.body.layer1.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %70 = add(%69, 0f);
  %71 = rsqrt(%70);
  %72 = multiply(%68, %71);
  %73 = multiply(%67, %72);
  %74 = reshape(%model.backbone.body.layer1.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %75 = reshape(%model.backbone.body.layer1.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %76 = multiply(%75, %72);
  %77 = subtract(%74, %76);
  %78 = add(%73, %77);
  %79 = nn.conv2d(%40, %model.backbone.body.layer1.0.downsample.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %80 = reshape(%model.backbone.body.layer1.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %81 = reshape(%model.backbone.body.layer1.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %82 = add(%81, 0f);
  %83 = rsqrt(%82);
  %84 = multiply(%80, %83);
  %85 = multiply(%79, %84);
  %86 = reshape(%model.backbone.body.layer1.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %87 = reshape(%model.backbone.body.layer1.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %88 = multiply(%87, %84);
  %89 = subtract(%86, %88);
  %90 = add(%85, %89);
  %91 = add(%78, %90);
  %92 = nn.relu(%91);
  %93 = nn.conv2d(%92, %model.backbone.body.layer1.1.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %94 = reshape(%model.backbone.body.layer1.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %95 = reshape(%model.backbone.body.layer1.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %96 = add(%95, 0f);
  %97 = rsqrt(%96);
  %98 = multiply(%94, %97);
  %99 = multiply(%93, %98);
  %100 = reshape(%model.backbone.body.layer1.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %101 = reshape(%model.backbone.body.layer1.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %102 = multiply(%101, %98);
  %103 = subtract(%100, %102);
  %104 = add(%99, %103);
  %105 = nn.relu(%104);
  %106 = nn.conv2d(%105, %model.backbone.body.layer1.1.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %107 = reshape(%model.backbone.body.layer1.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %108 = reshape(%model.backbone.body.layer1.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %109 = add(%108, 0f);
  %110 = rsqrt(%109);
  %111 = multiply(%107, %110);
  %112 = multiply(%106, %111);
  %113 = reshape(%model.backbone.body.layer1.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %114 = reshape(%model.backbone.body.layer1.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %115 = multiply(%114, %111);
  %116 = subtract(%113, %115);
  %117 = add(%112, %116);
  %118 = nn.relu(%117);
  %119 = nn.conv2d(%118, %model.backbone.body.layer1.1.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %120 = reshape(%model.backbone.body.layer1.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %121 = reshape(%model.backbone.body.layer1.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %122 = add(%121, 0f);
  %123 = rsqrt(%122);
  %124 = multiply(%120, %123);
  %125 = multiply(%119, %124);
  %126 = reshape(%model.backbone.body.layer1.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %127 = reshape(%model.backbone.body.layer1.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %128 = multiply(%127, %124);
  %129 = subtract(%126, %128);
  %130 = add(%125, %129);
  %131 = add(%130, %92);
  %132 = nn.relu(%131);
  %133 = nn.conv2d(%132, %model.backbone.body.layer1.2.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %134 = reshape(%model.backbone.body.layer1.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %135 = reshape(%model.backbone.body.layer1.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %136 = add(%135, 0f);
  %137 = rsqrt(%136);
  %138 = multiply(%134, %137);
  %139 = multiply(%133, %138);
  %140 = reshape(%model.backbone.body.layer1.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %141 = reshape(%model.backbone.body.layer1.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %142 = multiply(%141, %138);
  %143 = subtract(%140, %142);
  %144 = add(%139, %143);
  %145 = nn.relu(%144);
  %146 = nn.conv2d(%145, %model.backbone.body.layer1.2.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %147 = reshape(%model.backbone.body.layer1.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %148 = reshape(%model.backbone.body.layer1.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %149 = add(%148, 0f);
  %150 = rsqrt(%149);
  %151 = multiply(%147, %150);
  %152 = multiply(%146, %151);
  %153 = reshape(%model.backbone.body.layer1.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %154 = reshape(%model.backbone.body.layer1.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %155 = multiply(%154, %151);
  %156 = subtract(%153, %155);
  %157 = add(%152, %156);
  %158 = nn.relu(%157);
  %159 = nn.conv2d(%158, %model.backbone.body.layer1.2.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %160 = reshape(%model.backbone.body.layer1.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %161 = reshape(%model.backbone.body.layer1.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %162 = add(%161, 0f);
  %163 = rsqrt(%162);
  %164 = multiply(%160, %163);
  %165 = multiply(%159, %164);
  %166 = reshape(%model.backbone.body.layer1.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %167 = reshape(%model.backbone.body.layer1.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %168 = multiply(%167, %164);
  %169 = subtract(%166, %168);
  %170 = add(%165, %169);
  %171 = add(%170, %132);
  %172 = nn.relu(%171);
  %173 = nn.conv2d(%172, %model.backbone.body.layer2.0.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %174 = reshape(%model.backbone.body.layer2.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %175 = reshape(%model.backbone.body.layer2.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %176 = add(%175, 0f);
  %177 = rsqrt(%176);
  %178 = multiply(%174, %177);
  %179 = multiply(%173, %178);
  %180 = reshape(%model.backbone.body.layer2.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %181 = reshape(%model.backbone.body.layer2.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %182 = multiply(%181, %178);
  %183 = subtract(%180, %182);
  %184 = add(%179, %183);
  %185 = nn.relu(%184);
  %186 = nn.conv2d(%185, %model.backbone.body.layer2.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %187 = reshape(%model.backbone.body.layer2.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %188 = reshape(%model.backbone.body.layer2.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %189 = add(%188, 0f);
  %190 = rsqrt(%189);
  %191 = multiply(%187, %190);
  %192 = multiply(%186, %191);
  %193 = reshape(%model.backbone.body.layer2.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %194 = reshape(%model.backbone.body.layer2.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %195 = multiply(%194, %191);
  %196 = subtract(%193, %195);
  %197 = add(%192, %196);
  %198 = nn.relu(%197);
  %199 = nn.conv2d(%198, %model.backbone.body.layer2.0.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %200 = reshape(%model.backbone.body.layer2.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %201 = reshape(%model.backbone.body.layer2.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %202 = add(%201, 0f);
  %203 = rsqrt(%202);
  %204 = multiply(%200, %203);
  %205 = multiply(%199, %204);
  %206 = reshape(%model.backbone.body.layer2.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %207 = reshape(%model.backbone.body.layer2.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %208 = multiply(%207, %204);
  %209 = subtract(%206, %208);
  %210 = add(%205, %209);
  %211 = nn.conv2d(%172, %model.backbone.body.layer2.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %212 = reshape(%model.backbone.body.layer2.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %213 = reshape(%model.backbone.body.layer2.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %214 = add(%213, 0f);
  %215 = rsqrt(%214);
  %216 = multiply(%212, %215);
  %217 = multiply(%211, %216);
  %218 = reshape(%model.backbone.body.layer2.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %219 = reshape(%model.backbone.body.layer2.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %220 = multiply(%219, %216);
  %221 = subtract(%218, %220);
  %222 = add(%217, %221);
  %223 = add(%210, %222);
  %224 = nn.relu(%223);
  %225 = nn.conv2d(%224, %model.backbone.body.layer2.1.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %226 = reshape(%model.backbone.body.layer2.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %227 = reshape(%model.backbone.body.layer2.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %228 = add(%227, 0f);
  %229 = rsqrt(%228);
  %230 = multiply(%226, %229);
  %231 = multiply(%225, %230);
  %232 = reshape(%model.backbone.body.layer2.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %233 = reshape(%model.backbone.body.layer2.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %234 = multiply(%233, %230);
  %235 = subtract(%232, %234);
  %236 = add(%231, %235);
  %237 = nn.relu(%236);
  %238 = nn.conv2d(%237, %model.backbone.body.layer2.1.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %239 = reshape(%model.backbone.body.layer2.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %240 = reshape(%model.backbone.body.layer2.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %241 = add(%240, 0f);
  %242 = rsqrt(%241);
  %243 = multiply(%239, %242);
  %244 = multiply(%238, %243);
  %245 = reshape(%model.backbone.body.layer2.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %246 = reshape(%model.backbone.body.layer2.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %247 = multiply(%246, %243);
  %248 = subtract(%245, %247);
  %249 = add(%244, %248);
  %250 = nn.relu(%249);
  %251 = nn.conv2d(%250, %model.backbone.body.layer2.1.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %252 = reshape(%model.backbone.body.layer2.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %253 = reshape(%model.backbone.body.layer2.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %254 = add(%253, 0f);
  %255 = rsqrt(%254);
  %256 = multiply(%252, %255);
  %257 = multiply(%251, %256);
  %258 = reshape(%model.backbone.body.layer2.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %259 = reshape(%model.backbone.body.layer2.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %260 = multiply(%259, %256);
  %261 = subtract(%258, %260);
  %262 = add(%257, %261);
  %263 = add(%262, %224);
  %264 = nn.relu(%263);
  %265 = nn.conv2d(%264, %model.backbone.body.layer2.2.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %266 = reshape(%model.backbone.body.layer2.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %267 = reshape(%model.backbone.body.layer2.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %268 = add(%267, 0f);
  %269 = rsqrt(%268);
  %270 = multiply(%266, %269);
  %271 = multiply(%265, %270);
  %272 = reshape(%model.backbone.body.layer2.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %273 = reshape(%model.backbone.body.layer2.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %274 = multiply(%273, %270);
  %275 = subtract(%272, %274);
  %276 = add(%271, %275);
  %277 = nn.relu(%276);
  %278 = nn.conv2d(%277, %model.backbone.body.layer2.2.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %279 = reshape(%model.backbone.body.layer2.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %280 = reshape(%model.backbone.body.layer2.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %281 = add(%280, 0f);
  %282 = rsqrt(%281);
  %283 = multiply(%279, %282);
  %284 = multiply(%278, %283);
  %285 = reshape(%model.backbone.body.layer2.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %286 = reshape(%model.backbone.body.layer2.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %287 = multiply(%286, %283);
  %288 = subtract(%285, %287);
  %289 = add(%284, %288);
  %290 = nn.relu(%289);
  %291 = nn.conv2d(%290, %model.backbone.body.layer2.2.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %292 = reshape(%model.backbone.body.layer2.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %293 = reshape(%model.backbone.body.layer2.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %294 = add(%293, 0f);
  %295 = rsqrt(%294);
  %296 = multiply(%292, %295);
  %297 = multiply(%291, %296);
  %298 = reshape(%model.backbone.body.layer2.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %299 = reshape(%model.backbone.body.layer2.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %300 = multiply(%299, %296);
  %301 = subtract(%298, %300);
  %302 = add(%297, %301);
  %303 = add(%302, %264);
  %304 = nn.relu(%303);
  %305 = nn.conv2d(%304, %model.backbone.body.layer2.3.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %306 = reshape(%model.backbone.body.layer2.3.bn1.weight, newshape=[1, -1, 1, 1]);
  %307 = reshape(%model.backbone.body.layer2.3.bn1.running_var, newshape=[1, -1, 1, 1]);
  %308 = add(%307, 0f);
  %309 = rsqrt(%308);
  %310 = multiply(%306, %309);
  %311 = multiply(%305, %310);
  %312 = reshape(%model.backbone.body.layer2.3.bn1.bias, newshape=[1, -1, 1, 1]);
  %313 = reshape(%model.backbone.body.layer2.3.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %314 = multiply(%313, %310);
  %315 = subtract(%312, %314);
  %316 = add(%311, %315);
  %317 = nn.relu(%316);
  %318 = nn.conv2d(%317, %model.backbone.body.layer2.3.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %319 = reshape(%model.backbone.body.layer2.3.bn2.weight, newshape=[1, -1, 1, 1]);
  %320 = reshape(%model.backbone.body.layer2.3.bn2.running_var, newshape=[1, -1, 1, 1]);
  %321 = add(%320, 0f);
  %322 = rsqrt(%321);
  %323 = multiply(%319, %322);
  %324 = multiply(%318, %323);
  %325 = reshape(%model.backbone.body.layer2.3.bn2.bias, newshape=[1, -1, 1, 1]);
  %326 = reshape(%model.backbone.body.layer2.3.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %327 = multiply(%326, %323);
  %328 = subtract(%325, %327);
  %329 = add(%324, %328);
  %330 = nn.relu(%329);
  %331 = nn.conv2d(%330, %model.backbone.body.layer2.3.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %332 = reshape(%model.backbone.body.layer2.3.bn3.weight, newshape=[1, -1, 1, 1]);
  %333 = reshape(%model.backbone.body.layer2.3.bn3.running_var, newshape=[1, -1, 1, 1]);
  %334 = add(%333, 0f);
  %335 = rsqrt(%334);
  %336 = multiply(%332, %335);
  %337 = multiply(%331, %336);
  %338 = reshape(%model.backbone.body.layer2.3.bn3.bias, newshape=[1, -1, 1, 1]);
  %339 = reshape(%model.backbone.body.layer2.3.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %340 = multiply(%339, %336);
  %341 = subtract(%338, %340);
  %342 = add(%337, %341);
  %343 = add(%342, %304);
  %344 = nn.relu(%343);
  %345 = nn.conv2d(%344, %model.backbone.body.layer3.0.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %346 = reshape(%model.backbone.body.layer3.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %347 = reshape(%model.backbone.body.layer3.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %348 = add(%347, 0f);
  %349 = rsqrt(%348);
  %350 = multiply(%346, %349);
  %351 = multiply(%345, %350);
  %352 = reshape(%model.backbone.body.layer3.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %353 = reshape(%model.backbone.body.layer3.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %354 = multiply(%353, %350);
  %355 = subtract(%352, %354);
  %356 = add(%351, %355);
  %357 = nn.relu(%356);
  %358 = nn.conv2d(%357, %model.backbone.body.layer3.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %359 = reshape(%model.backbone.body.layer3.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %360 = reshape(%model.backbone.body.layer3.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %361 = add(%360, 0f);
  %362 = rsqrt(%361);
  %363 = multiply(%359, %362);
  %364 = multiply(%358, %363);
  %365 = reshape(%model.backbone.body.layer3.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %366 = reshape(%model.backbone.body.layer3.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %367 = multiply(%366, %363);
  %368 = subtract(%365, %367);
  %369 = add(%364, %368);
  %370 = nn.relu(%369);
  %371 = nn.conv2d(%370, %model.backbone.body.layer3.0.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %372 = reshape(%model.backbone.body.layer3.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %373 = reshape(%model.backbone.body.layer3.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %374 = add(%373, 0f);
  %375 = rsqrt(%374);
  %376 = multiply(%372, %375);
  %377 = multiply(%371, %376);
  %378 = reshape(%model.backbone.body.layer3.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %379 = reshape(%model.backbone.body.layer3.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %380 = multiply(%379, %376);
  %381 = subtract(%378, %380);
  %382 = add(%377, %381);
  %383 = nn.conv2d(%344, %model.backbone.body.layer3.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %384 = reshape(%model.backbone.body.layer3.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %385 = reshape(%model.backbone.body.layer3.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %386 = add(%385, 0f);
  %387 = rsqrt(%386);
  %388 = multiply(%384, %387);
  %389 = multiply(%383, %388);
  %390 = reshape(%model.backbone.body.layer3.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %391 = reshape(%model.backbone.body.layer3.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %392 = multiply(%391, %388);
  %393 = subtract(%390, %392);
  %394 = add(%389, %393);
  %395 = add(%382, %394);
  %396 = nn.relu(%395);
  %397 = nn.conv2d(%396, %model.backbone.body.layer3.1.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %398 = reshape(%model.backbone.body.layer3.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %399 = reshape(%model.backbone.body.layer3.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %400 = add(%399, 0f);
  %401 = rsqrt(%400);
  %402 = multiply(%398, %401);
  %403 = multiply(%397, %402);
  %404 = reshape(%model.backbone.body.layer3.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %405 = reshape(%model.backbone.body.layer3.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %406 = multiply(%405, %402);
  %407 = subtract(%404, %406);
  %408 = add(%403, %407);
  %409 = nn.relu(%408);
  %410 = nn.conv2d(%409, %model.backbone.body.layer3.1.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %411 = reshape(%model.backbone.body.layer3.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %412 = reshape(%model.backbone.body.layer3.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %413 = add(%412, 0f);
  %414 = rsqrt(%413);
  %415 = multiply(%411, %414);
  %416 = multiply(%410, %415);
  %417 = reshape(%model.backbone.body.layer3.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %418 = reshape(%model.backbone.body.layer3.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %419 = multiply(%418, %415);
  %420 = subtract(%417, %419);
  %421 = add(%416, %420);
  %422 = nn.relu(%421);
  %423 = nn.conv2d(%422, %model.backbone.body.layer3.1.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %424 = reshape(%model.backbone.body.layer3.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %425 = reshape(%model.backbone.body.layer3.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %426 = add(%425, 0f);
  %427 = rsqrt(%426);
  %428 = multiply(%424, %427);
  %429 = multiply(%423, %428);
  %430 = reshape(%model.backbone.body.layer3.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %431 = reshape(%model.backbone.body.layer3.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %432 = multiply(%431, %428);
  %433 = subtract(%430, %432);
  %434 = add(%429, %433);
  %435 = add(%434, %396);
  %436 = nn.relu(%435);
  %437 = nn.conv2d(%436, %model.backbone.body.layer3.2.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %438 = reshape(%model.backbone.body.layer3.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %439 = reshape(%model.backbone.body.layer3.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %440 = add(%439, 0f);
  %441 = rsqrt(%440);
  %442 = multiply(%438, %441);
  %443 = multiply(%437, %442);
  %444 = reshape(%model.backbone.body.layer3.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %445 = reshape(%model.backbone.body.layer3.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %446 = multiply(%445, %442);
  %447 = subtract(%444, %446);
  %448 = add(%443, %447);
  %449 = nn.relu(%448);
  %450 = nn.conv2d(%449, %model.backbone.body.layer3.2.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %451 = reshape(%model.backbone.body.layer3.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %452 = reshape(%model.backbone.body.layer3.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %453 = add(%452, 0f);
  %454 = rsqrt(%453);
  %455 = multiply(%451, %454);
  %456 = multiply(%450, %455);
  %457 = reshape(%model.backbone.body.layer3.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %458 = reshape(%model.backbone.body.layer3.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %459 = multiply(%458, %455);
  %460 = subtract(%457, %459);
  %461 = add(%456, %460);
  %462 = nn.relu(%461);
  %463 = nn.conv2d(%462, %model.backbone.body.layer3.2.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %464 = reshape(%model.backbone.body.layer3.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %465 = reshape(%model.backbone.body.layer3.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %466 = add(%465, 0f);
  %467 = rsqrt(%466);
  %468 = multiply(%464, %467);
  %469 = multiply(%463, %468);
  %470 = reshape(%model.backbone.body.layer3.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %471 = reshape(%model.backbone.body.layer3.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %472 = multiply(%471, %468);
  %473 = subtract(%470, %472);
  %474 = add(%469, %473);
  %475 = add(%474, %436);
  %476 = nn.relu(%475);
  %477 = nn.conv2d(%476, %model.backbone.body.layer3.3.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %478 = reshape(%model.backbone.body.layer3.3.bn1.weight, newshape=[1, -1, 1, 1]);
  %479 = reshape(%model.backbone.body.layer3.3.bn1.running_var, newshape=[1, -1, 1, 1]);
  %480 = add(%479, 0f);
  %481 = rsqrt(%480);
  %482 = multiply(%478, %481);
  %483 = multiply(%477, %482);
  %484 = reshape(%model.backbone.body.layer3.3.bn1.bias, newshape=[1, -1, 1, 1]);
  %485 = reshape(%model.backbone.body.layer3.3.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %486 = multiply(%485, %482);
  %487 = subtract(%484, %486);
  %488 = add(%483, %487);
  %489 = nn.relu(%488);
  %490 = nn.conv2d(%489, %model.backbone.body.layer3.3.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %491 = reshape(%model.backbone.body.layer3.3.bn2.weight, newshape=[1, -1, 1, 1]);
  %492 = reshape(%model.backbone.body.layer3.3.bn2.running_var, newshape=[1, -1, 1, 1]);
  %493 = add(%492, 0f);
  %494 = rsqrt(%493);
  %495 = multiply(%491, %494);
  %496 = multiply(%490, %495);
  %497 = reshape(%model.backbone.body.layer3.3.bn2.bias, newshape=[1, -1, 1, 1]);
  %498 = reshape(%model.backbone.body.layer3.3.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %499 = multiply(%498, %495);
  %500 = subtract(%497, %499);
  %501 = add(%496, %500);
  %502 = nn.relu(%501);
  %503 = nn.conv2d(%502, %model.backbone.body.layer3.3.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %504 = reshape(%model.backbone.body.layer3.3.bn3.weight, newshape=[1, -1, 1, 1]);
  %505 = reshape(%model.backbone.body.layer3.3.bn3.running_var, newshape=[1, -1, 1, 1]);
  %506 = add(%505, 0f);
  %507 = rsqrt(%506);
  %508 = multiply(%504, %507);
  %509 = multiply(%503, %508);
  %510 = reshape(%model.backbone.body.layer3.3.bn3.bias, newshape=[1, -1, 1, 1]);
  %511 = reshape(%model.backbone.body.layer3.3.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %512 = multiply(%511, %508);
  %513 = subtract(%510, %512);
  %514 = add(%509, %513);
  %515 = add(%514, %476);
  %516 = nn.relu(%515);
  %517 = nn.conv2d(%516, %model.backbone.body.layer3.4.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %518 = reshape(%model.backbone.body.layer3.4.bn1.weight, newshape=[1, -1, 1, 1]);
  %519 = reshape(%model.backbone.body.layer3.4.bn1.running_var, newshape=[1, -1, 1, 1]);
  %520 = add(%519, 0f);
  %521 = rsqrt(%520);
  %522 = multiply(%518, %521);
  %523 = multiply(%517, %522);
  %524 = reshape(%model.backbone.body.layer3.4.bn1.bias, newshape=[1, -1, 1, 1]);
  %525 = reshape(%model.backbone.body.layer3.4.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %526 = multiply(%525, %522);
  %527 = subtract(%524, %526);
  %528 = add(%523, %527);
  %529 = nn.relu(%528);
  %530 = nn.conv2d(%529, %model.backbone.body.layer3.4.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %531 = reshape(%model.backbone.body.layer3.4.bn2.weight, newshape=[1, -1, 1, 1]);
  %532 = reshape(%model.backbone.body.layer3.4.bn2.running_var, newshape=[1, -1, 1, 1]);
  %533 = add(%532, 0f);
  %534 = rsqrt(%533);
  %535 = multiply(%531, %534);
  %536 = multiply(%530, %535);
  %537 = reshape(%model.backbone.body.layer3.4.bn2.bias, newshape=[1, -1, 1, 1]);
  %538 = reshape(%model.backbone.body.layer3.4.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %539 = multiply(%538, %535);
  %540 = subtract(%537, %539);
  %541 = add(%536, %540);
  %542 = nn.relu(%541);
  %543 = nn.conv2d(%542, %model.backbone.body.layer3.4.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %544 = reshape(%model.backbone.body.layer3.4.bn3.weight, newshape=[1, -1, 1, 1]);
  %545 = reshape(%model.backbone.body.layer3.4.bn3.running_var, newshape=[1, -1, 1, 1]);
  %546 = add(%545, 0f);
  %547 = rsqrt(%546);
  %548 = multiply(%544, %547);
  %549 = multiply(%543, %548);
  %550 = reshape(%model.backbone.body.layer3.4.bn3.bias, newshape=[1, -1, 1, 1]);
  %551 = reshape(%model.backbone.body.layer3.4.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %552 = multiply(%551, %548);
  %553 = subtract(%550, %552);
  %554 = add(%549, %553);
  %555 = add(%554, %516);
  %556 = nn.relu(%555);
  %557 = nn.conv2d(%556, %model.backbone.body.layer3.5.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %558 = reshape(%model.backbone.body.layer3.5.bn1.weight, newshape=[1, -1, 1, 1]);
  %559 = reshape(%model.backbone.body.layer3.5.bn1.running_var, newshape=[1, -1, 1, 1]);
  %560 = add(%559, 0f);
  %561 = rsqrt(%560);
  %562 = multiply(%558, %561);
  %563 = multiply(%557, %562);
  %564 = reshape(%model.backbone.body.layer3.5.bn1.bias, newshape=[1, -1, 1, 1]);
  %565 = reshape(%model.backbone.body.layer3.5.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %566 = multiply(%565, %562);
  %567 = subtract(%564, %566);
  %568 = add(%563, %567);
  %569 = nn.relu(%568);
  %570 = nn.conv2d(%569, %model.backbone.body.layer3.5.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %571 = reshape(%model.backbone.body.layer3.5.bn2.weight, newshape=[1, -1, 1, 1]);
  %572 = reshape(%model.backbone.body.layer3.5.bn2.running_var, newshape=[1, -1, 1, 1]);
  %573 = add(%572, 0f);
  %574 = rsqrt(%573);
  %575 = multiply(%571, %574);
  %576 = multiply(%570, %575);
  %577 = reshape(%model.backbone.body.layer3.5.bn2.bias, newshape=[1, -1, 1, 1]);
  %578 = reshape(%model.backbone.body.layer3.5.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %579 = multiply(%578, %575);
  %580 = subtract(%577, %579);
  %581 = add(%576, %580);
  %582 = nn.relu(%581);
  %583 = nn.conv2d(%582, %model.backbone.body.layer3.5.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %584 = reshape(%model.backbone.body.layer3.5.bn3.weight, newshape=[1, -1, 1, 1]);
  %585 = reshape(%model.backbone.body.layer3.5.bn3.running_var, newshape=[1, -1, 1, 1]);
  %586 = add(%585, 0f);
  %587 = rsqrt(%586);
  %588 = multiply(%584, %587);
  %589 = multiply(%583, %588);
  %590 = reshape(%model.backbone.body.layer3.5.bn3.bias, newshape=[1, -1, 1, 1]);
  %591 = reshape(%model.backbone.body.layer3.5.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %592 = multiply(%591, %588);
  %593 = subtract(%590, %592);
  %594 = add(%589, %593);
  %595 = add(%594, %556);
  %596 = nn.relu(%595);
  %597 = nn.conv2d(%596, %model.backbone.body.layer4.0.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %598 = reshape(%model.backbone.body.layer4.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %599 = reshape(%model.backbone.body.layer4.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %600 = add(%599, 0f);
  %601 = rsqrt(%600);
  %602 = multiply(%598, %601);
  %603 = multiply(%597, %602);
  %604 = reshape(%model.backbone.body.layer4.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %605 = reshape(%model.backbone.body.layer4.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %606 = multiply(%605, %602);
  %607 = subtract(%604, %606);
  %608 = add(%603, %607);
  %609 = nn.relu(%608);
  %610 = nn.conv2d(%609, %model.backbone.body.layer4.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %611 = reshape(%model.backbone.body.layer4.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %612 = reshape(%model.backbone.body.layer4.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %613 = add(%612, 0f);
  %614 = rsqrt(%613);
  %615 = multiply(%611, %614);
  %616 = multiply(%610, %615);
  %617 = reshape(%model.backbone.body.layer4.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %618 = reshape(%model.backbone.body.layer4.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %619 = multiply(%618, %615);
  %620 = subtract(%617, %619);
  %621 = add(%616, %620);
  %622 = nn.relu(%621);
  %623 = nn.conv2d(%622, %model.backbone.body.layer4.0.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %624 = reshape(%model.backbone.body.layer4.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %625 = reshape(%model.backbone.body.layer4.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %626 = add(%625, 0f);
  %627 = rsqrt(%626);
  %628 = multiply(%624, %627);
  %629 = multiply(%623, %628);
  %630 = reshape(%model.backbone.body.layer4.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %631 = reshape(%model.backbone.body.layer4.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %632 = multiply(%631, %628);
  %633 = subtract(%630, %632);
  %634 = add(%629, %633);
  %635 = nn.conv2d(%596, %model.backbone.body.layer4.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %636 = reshape(%model.backbone.body.layer4.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %637 = reshape(%model.backbone.body.layer4.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %638 = add(%637, 0f);
  %639 = rsqrt(%638);
  %640 = multiply(%636, %639);
  %641 = multiply(%635, %640);
  %642 = reshape(%model.backbone.body.layer4.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %643 = reshape(%model.backbone.body.layer4.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %644 = multiply(%643, %640);
  %645 = subtract(%642, %644);
  %646 = add(%641, %645);
  %647 = add(%634, %646);
  %648 = nn.relu(%647);
  %649 = nn.conv2d(%648, %model.backbone.body.layer4.1.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %650 = reshape(%model.backbone.body.layer4.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %651 = reshape(%model.backbone.body.layer4.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %652 = add(%651, 0f);
  %653 = rsqrt(%652);
  %654 = multiply(%650, %653);
  %655 = multiply(%649, %654);
  %656 = reshape(%model.backbone.body.layer4.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %657 = reshape(%model.backbone.body.layer4.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %658 = multiply(%657, %654);
  %659 = subtract(%656, %658);
  %660 = add(%655, %659);
  %661 = nn.relu(%660);
  %662 = nn.conv2d(%661, %model.backbone.body.layer4.1.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %663 = reshape(%model.backbone.body.layer4.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %664 = reshape(%model.backbone.body.layer4.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %665 = add(%664, 0f);
  %666 = rsqrt(%665);
  %667 = multiply(%663, %666);
  %668 = multiply(%662, %667);
  %669 = reshape(%model.backbone.body.layer4.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %670 = reshape(%model.backbone.body.layer4.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %671 = multiply(%670, %667);
  %672 = subtract(%669, %671);
  %673 = add(%668, %672);
  %674 = nn.relu(%673);
  %675 = nn.conv2d(%674, %model.backbone.body.layer4.1.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %676 = reshape(%model.backbone.body.layer4.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %677 = reshape(%model.backbone.body.layer4.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %678 = add(%677, 0f);
  %679 = rsqrt(%678);
  %680 = multiply(%676, %679);
  %681 = multiply(%675, %680);
  %682 = reshape(%model.backbone.body.layer4.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %683 = reshape(%model.backbone.body.layer4.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %684 = multiply(%683, %680);
  %685 = subtract(%682, %684);
  %686 = add(%681, %685);
  %687 = add(%686, %648);
  %688 = nn.relu(%687);
  %689 = nn.conv2d(%688, %model.backbone.body.layer4.2.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %690 = reshape(%model.backbone.body.layer4.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %691 = reshape(%model.backbone.body.layer4.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %692 = add(%691, 0f);
  %693 = rsqrt(%692);
  %694 = multiply(%690, %693);
  %695 = multiply(%689, %694);
  %696 = reshape(%model.backbone.body.layer4.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %697 = reshape(%model.backbone.body.layer4.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %698 = multiply(%697, %694);
  %699 = subtract(%696, %698);
  %700 = add(%695, %699);
  %701 = nn.relu(%700);
  %702 = nn.conv2d(%701, %model.backbone.body.layer4.2.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %703 = reshape(%model.backbone.body.layer4.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %704 = reshape(%model.backbone.body.layer4.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %705 = add(%704, 0f);
  %706 = rsqrt(%705);
  %707 = multiply(%703, %706);
  %708 = multiply(%702, %707);
  %709 = reshape(%model.backbone.body.layer4.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %710 = reshape(%model.backbone.body.layer4.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %711 = multiply(%710, %707);
  %712 = subtract(%709, %711);
  %713 = add(%708, %712);
  %714 = nn.relu(%713);
  %715 = nn.conv2d(%714, %model.backbone.body.layer4.2.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %716 = reshape(%model.backbone.body.layer4.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %717 = reshape(%model.backbone.body.layer4.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %718 = add(%717, 0f);
  %719 = rsqrt(%718);
  %720 = multiply(%716, %719);
  %721 = multiply(%715, %720);
  %722 = reshape(%model.backbone.body.layer4.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %723 = reshape(%model.backbone.body.layer4.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %724 = multiply(%723, %720);
  %725 = subtract(%722, %724);
  %726 = add(%721, %725);
  %727 = add(%726, %688);
  %728 = nn.relu(%727);
  %729 = (%728, %596, %344, %172);
  %730 = %729.3;
  %731 = nn.conv2d(%730, %model.backbone.fpn.inner_blocks.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %732 = nn.bias_add(%731, %model.backbone.fpn.inner_blocks.0.bias);
  %733 = %729.2;
  %734 = nn.conv2d(%733, %model.backbone.fpn.inner_blocks.1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %735 = nn.bias_add(%734, %model.backbone.fpn.inner_blocks.1.bias);
  %736 = %729.1;
  %737 = nn.conv2d(%736, %model.backbone.fpn.inner_blocks.2.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %738 = nn.bias_add(%737, %model.backbone.fpn.inner_blocks.2.bias);
  %739 = %729.0;
  %740 = nn.conv2d(%739, %model.backbone.fpn.inner_blocks.3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %741 = nn.bias_add(%740, %model.backbone.fpn.inner_blocks.3.bias);
  %742 = image.resize(%741, size=[50, 50], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %743 = add(%738, %742);
  %744 = image.resize(%743, size=[100, 100], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %745 = add(%735, %744);
  %746 = image.resize(%745, size=[200, 200], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %747 = add(%732, %746);
  %748 = nn.conv2d(%747, %model.backbone.fpn.layer_blocks.0.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %749 = nn.bias_add(%748, %model.backbone.fpn.layer_blocks.0.bias);
  %750 = nn.conv2d(%745, %model.backbone.fpn.layer_blocks.1.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %751 = nn.bias_add(%750, %model.backbone.fpn.layer_blocks.1.bias);
  %752 = nn.conv2d(%743, %model.backbone.fpn.layer_blocks.2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %753 = nn.bias_add(%752, %model.backbone.fpn.layer_blocks.2.bias);
  %754 = nn.conv2d(%741, %model.backbone.fpn.layer_blocks.3.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %755 = nn.bias_add(%754, %model.backbone.fpn.layer_blocks.3.bias);
  %756 = nn.max_pool2d(%755, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0]);
  %757 = (%749, %751, %753, %755, %756, %755, %755, %755, %755, %755, %755);
  %758 = %757.0;
  %759 = %757.1;
  %760 = %757.2;
  %761 = %757.3;
  %762 = %757.4;
  %763 = %757.5;
  %764 = %757.6;
  %765 = %757.7;
  %766 = %757.8;
  %767 = %757.9;
  %768 = %757.10;
  %769 = (%758, %759, %760, %761, %762, %763, %764, %765, %766, %767, %768);
  %770 = %769.0;
  %771 = nn.conv2d(%770, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %772 = nn.bias_add(%771, %model.rpn.head.conv.bias);
  %773 = nn.relu(%772);
  %774 = nn.conv2d(%773, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %775 = nn.bias_add(%774, %model.rpn.head.cls_logits.bias);
  %776 = %769.1;
  %777 = nn.conv2d(%776, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %778 = nn.bias_add(%777, %model.rpn.head.conv.bias);
  %779 = nn.relu(%778);
  %780 = nn.conv2d(%779, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %781 = nn.bias_add(%780, %model.rpn.head.cls_logits.bias);
  %782 = %769.2;
  %783 = nn.conv2d(%782, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %784 = nn.bias_add(%783, %model.rpn.head.conv.bias);
  %785 = nn.relu(%784);
  %786 = nn.conv2d(%785, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %787 = nn.bias_add(%786, %model.rpn.head.cls_logits.bias);
  %788 = %769.3;
  %789 = nn.conv2d(%788, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %790 = nn.bias_add(%789, %model.rpn.head.conv.bias);
  %791 = nn.relu(%790);
  %792 = nn.conv2d(%791, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %793 = nn.bias_add(%792, %model.rpn.head.cls_logits.bias);
  %794 = %769.4;
  %795 = nn.conv2d(%794, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %796 = nn.bias_add(%795, %model.rpn.head.conv.bias);
  %797 = nn.relu(%796);
  %798 = nn.conv2d(%797, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %799 = nn.bias_add(%798, %model.rpn.head.cls_logits.bias);
  %800 = nn.conv2d(%773, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %801 = nn.bias_add(%800, %model.rpn.head.bbox_pred.bias);
  %802 = nn.conv2d(%779, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %803 = nn.bias_add(%802, %model.rpn.head.bbox_pred.bias);
  %804 = nn.conv2d(%785, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %805 = nn.bias_add(%804, %model.rpn.head.bbox_pred.bias);
  %806 = nn.conv2d(%791, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %807 = nn.bias_add(%806, %model.rpn.head.bbox_pred.bias);
  %808 = nn.conv2d(%797, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %809 = nn.bias_add(%808, %model.rpn.head.bbox_pred.bias);
  %810 = (%775, %781, %787, %793, %799, %801, %803, %805, %807, %809);
  %811 = %810.5;
  %812 = reshape(%811, newshape=[1, -1, 4, 200, 200]);
  %813 = transpose(%812, axes=[0, 3, 4, 1, 2]);
  %814 = reshape(%813, newshape=[1, -1, 4]);
  %815 = %810.6;
  %816 = reshape(%815, newshape=[1, -1, 4, 100, 100]);
  %817 = transpose(%816, axes=[0, 3, 4, 1, 2]);
  %818 = reshape(%817, newshape=[1, -1, 4]);
  %819 = %810.7;
  %820 = reshape(%819, newshape=[1, -1, 4, 50, 50]);
  %821 = transpose(%820, axes=[0, 3, 4, 1, 2]);
  %822 = reshape(%821, newshape=[1, -1, 4]);
  %823 = %810.8;
  %824 = reshape(%823, newshape=[1, -1, 4, 25, 25]);
  %825 = transpose(%824, axes=[0, 3, 4, 1, 2]);
  %826 = reshape(%825, newshape=[1, -1, 4]);
  %827 = %810.9;
  %828 = reshape(%827, newshape=[1, -1, 4, 13, 13]);
  %829 = transpose(%828, axes=[0, 3, 4, 1, 2]);
  %830 = reshape(%829, newshape=[1, -1, 4]);
  %831 = (%814, %818, %822, %826, %830);
  %832 = concatenate(%831, axis=1);
  %833 = reshape(%832, newshape=[-1, 4]);
  %834 = reshape(%833, newshape=[159882, -1]);
  %835 = strided_slice(%834, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %836 = strided_slice(%835, begin=[0, 0], end=[159882, 4], strides=[1, 4]);
  %837 = divide(%836, 1f);
  %838 = arange(0f, 200f, 1f, start=meta[relay.Constant][2], stop=meta[relay.Constant][3], step=meta[relay.Constant][4], dtype="float32");
  %839 = floor_divide(800, 200);
  %840 = cast(%839, dtype="int64");
  %841 = cast(%840, dtype="float32");
  %842 = multiply(%838, %841);
  %843 = arange(0f, 200f, 1f, start=meta[relay.Constant][5], stop=meta[relay.Constant][6], step=meta[relay.Constant][7], dtype="float32");
  %844 = floor_divide(800, 200);
  %845 = cast(%844, dtype="int64");
  %846 = cast(%845, dtype="float32");
  %847 = multiply(%843, %846);
  %848 = (%842, %847);
  %849 = meshgrid(%848);
  %850 = %849.1;
  %851 = reshape(%850, newshape=[-1]);
  %852 = %849.0;
  %853 = reshape(%852, newshape=[-1]);
  %854 = (%851, %853, %851, %853);
  %855 = stack(%854, axis=1);
  %856 = reshape(%855, newshape=[-1, 1, 4]);
  %857 = reshape(meta[relay.Constant][8], newshape=[1, -1, 4]);
  %858 = add(%856, %857);
  %859 = reshape(%858, newshape=[-1, 4]);
  %860 = arange(0f, 100f, 1f, start=meta[relay.Constant][9], stop=meta[relay.Constant][10], step=meta[relay.Constant][11], dtype="float32");
  %861 = floor_divide(800, 100);
  %862 = cast(%861, dtype="int64");
  %863 = cast(%862, dtype="float32");
  %864 = multiply(%860, %863);
  %865 = arange(0f, 100f, 1f, start=meta[relay.Constant][12], stop=meta[relay.Constant][13], step=meta[relay.Constant][14], dtype="float32");
  %866 = floor_divide(800, 100);
  %867 = cast(%866, dtype="int64");
  %868 = cast(%867, dtype="float32");
  %869 = multiply(%865, %868);
  %870 = (%864, %869);
  %871 = meshgrid(%870);
  %872 = %871.1;
  %873 = reshape(%872, newshape=[-1]);
  %874 = %871.0;
  %875 = reshape(%874, newshape=[-1]);
  %876 = (%873, %875, %873, %875);
  %877 = stack(%876, axis=1);
  %878 = reshape(%877, newshape=[-1, 1, 4]);
  %879 = reshape(meta[relay.Constant][15], newshape=[1, -1, 4]);
  %880 = add(%878, %879);
  %881 = reshape(%880, newshape=[-1, 4]);
  %882 = arange(0f, 50f, 1f, start=meta[relay.Constant][16], stop=meta[relay.Constant][17], step=meta[relay.Constant][18], dtype="float32");
  %883 = floor_divide(800, 50);
  %884 = cast(%883, dtype="int64");
  %885 = cast(%884, dtype="float32");
  %886 = multiply(%882, %885);
  %887 = arange(0f, 50f, 1f, start=meta[relay.Constant][19], stop=meta[relay.Constant][20], step=meta[relay.Constant][21], dtype="float32");
  %888 = floor_divide(800, 50);
  %889 = cast(%888, dtype="int64");
  %890 = cast(%889, dtype="float32");
  %891 = multiply(%887, %890);
  %892 = (%886, %891);
  %893 = meshgrid(%892);
  %894 = %893.1;
  %895 = reshape(%894, newshape=[-1]);
  %896 = %893.0;
  %897 = reshape(%896, newshape=[-1]);
  %898 = (%895, %897, %895, %897);
  %899 = stack(%898, axis=1);
  %900 = reshape(%899, newshape=[-1, 1, 4]);
  %901 = reshape(meta[relay.Constant][22], newshape=[1, -1, 4]);
  %902 = add(%900, %901);
  %903 = reshape(%902, newshape=[-1, 4]);
  %904 = arange(0f, 25f, 1f, start=meta[relay.Constant][23], stop=meta[relay.Constant][24], step=meta[relay.Constant][25], dtype="float32");
  %905 = floor_divide(800, 25);
  %906 = cast(%905, dtype="int64");
  %907 = cast(%906, dtype="float32");
  %908 = multiply(%904, %907);
  %909 = arange(0f, 25f, 1f, start=meta[relay.Constant][26], stop=meta[relay.Constant][27], step=meta[relay.Constant][28], dtype="float32");
  %910 = floor_divide(800, 25);
  %911 = cast(%910, dtype="int64");
  %912 = cast(%911, dtype="float32");
  %913 = multiply(%909, %912);
  %914 = (%908, %913);
  %915 = meshgrid(%914);
  %916 = %915.1;
  %917 = reshape(%916, newshape=[-1]);
  %918 = %915.0;
  %919 = reshape(%918, newshape=[-1]);
  %920 = (%917, %919, %917, %919);
  %921 = stack(%920, axis=1);
  %922 = reshape(%921, newshape=[-1, 1, 4]);
  %923 = reshape(meta[relay.Constant][29], newshape=[1, -1, 4]);
  %924 = add(%922, %923);
  %925 = reshape(%924, newshape=[-1, 4]);
  %926 = arange(0f, 13f, 1f, start=meta[relay.Constant][30], stop=meta[relay.Constant][31], step=meta[relay.Constant][32], dtype="float32");
  %927 = floor_divide(800, 13);
  %928 = cast(%927, dtype="int64");
  %929 = cast(%928, dtype="float32");
  %930 = multiply(%926, %929);
  %931 = arange(0f, 13f, 1f, start=meta[relay.Constant][33], stop=meta[relay.Constant][34], step=meta[relay.Constant][35], dtype="float32");
  %932 = floor_divide(800, 13);
  %933 = cast(%932, dtype="int64");
  %934 = cast(%933, dtype="float32");
  %935 = multiply(%931, %934);
  %936 = (%930, %935);
  %937 = meshgrid(%936);
  %938 = %937.1;
  %939 = reshape(%938, newshape=[-1]);
  %940 = %937.0;
  %941 = reshape(%940, newshape=[-1]);
  %942 = (%939, %941, %939, %941);
  %943 = stack(%942, axis=1);
  %944 = reshape(%943, newshape=[-1, 1, 4]);
  %945 = reshape(meta[relay.Constant][36], newshape=[1, -1, 4]);
  %946 = add(%944, %945);
  %947 = reshape(%946, newshape=[-1, 4]);
  %948 = (%859, %881, %903, %925, %947);
  %949 = concatenate(%948);
  %950 = (%949,);
  %951 = concatenate(%950);
  %952 = strided_slice(%951, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %953 = take(%952, 2, axis=1);
  %954 = strided_slice(%951, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %955 = take(%954, 0, axis=1);
  %956 = subtract(%953, %955);
  %957 = strided_slice(%956, begin=[0], end=[159882], strides=[1]);
  %958 = expand_dims(%957, axis=1);
  %959 = multiply(%837, %958);
  %960 = strided_slice(%951, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %961 = take(%960, 0, axis=1);
  %962 = multiply(%956, 0.5f);
  %963 = add(%961, %962);
  %964 = strided_slice(%963, begin=[0], end=[159882], strides=[1]);
  %965 = expand_dims(%964, axis=1);
  %966 = add(%959, %965);
  %967 = strided_slice(%834, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %968 = strided_slice(%967, begin=[0, 2], end=[159882, 4], strides=[1, 4]);
  %969 = divide(%968, 1f);
  %970 = clip(%969, a_min=-3.40282e+38f, a_max=4.13517f);
  %971 = exp(%970);
  %972 = strided_slice(%956, begin=[0], end=[159882], strides=[1]);
  %973 = expand_dims(%972, axis=1);
  %974 = multiply(%971, %973);
  %975 = multiply(0.5f, %974);
  %976 = subtract(%966, %975);
  %977 = strided_slice(%834, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %978 = strided_slice(%977, begin=[0, 1], end=[159882, 4], strides=[1, 4]);
  %979 = divide(%978, 1f);
  %980 = strided_slice(%951, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %981 = take(%980, 3, axis=1);
  %982 = strided_slice(%951, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %983 = take(%982, 1, axis=1);
  %984 = subtract(%981, %983);
  %985 = strided_slice(%984, begin=[0], end=[159882], strides=[1]);
  %986 = expand_dims(%985, axis=1);
  %987 = multiply(%979, %986);
  %988 = strided_slice(%951, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %989 = take(%988, 1, axis=1);
  %990 = multiply(%984, 0.5f);
  %991 = add(%989, %990);
  %992 = strided_slice(%991, begin=[0], end=[159882], strides=[1]);
  %993 = expand_dims(%992, axis=1);
  %994 = add(%987, %993);
  %995 = strided_slice(%834, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %996 = strided_slice(%995, begin=[0, 3], end=[159882, 4], strides=[1, 4]);
  %997 = divide(%996, 1f);
  %998 = clip(%997, a_min=-3.40282e+38f, a_max=4.13517f);
  %999 = exp(%998);
  %1000 = strided_slice(%984, begin=[0], end=[159882], strides=[1]);
  %1001 = expand_dims(%1000, axis=1);
  %1002 = multiply(%999, %1001);
  %1003 = multiply(0.5f, %1002);
  %1004 = subtract(%994, %1003);
  %1005 = multiply(0.5f, %974);
  %1006 = add(%966, %1005);
  %1007 = multiply(0.5f, %1002);
  %1008 = add(%994, %1007);
  %1009 = (%976, %1004, %1006, %1008);
  %1010 = stack(%1009, axis=2);
  %1011 = reshape(%1010, newshape=[0, -1, 1]);
  %1012 = squeeze(%1011, axis=[2]);
  %1013 = reshape(%1012, newshape=[159882, -1, 4]);
  %1014 = reshape(%1013, newshape=[1, -1, 4]);
  %1015 = arange(0, 1, 1, start=meta[relay.Constant][37], stop=meta[relay.Constant][38], step=meta[relay.Constant][39], dtype="int64");
  %1016 = strided_slice(%1015, begin=[0], end=[1], strides=[1]);
  %1017 = expand_dims(%1016, axis=1);
  %1018 = %810.0;
  %1019 = reshape(%1018, newshape=[1, -1, 1, 200, 200]);
  %1020 = transpose(%1019, axes=[0, 3, 4, 1, 2]);
  %1021 = reshape(%1020, newshape=[1, -1, 1]);
  %1022 = %810.1;
  %1023 = reshape(%1022, newshape=[1, -1, 1, 100, 100]);
  %1024 = transpose(%1023, axes=[0, 3, 4, 1, 2]);
  %1025 = reshape(%1024, newshape=[1, -1, 1]);
  %1026 = %810.2;
  %1027 = reshape(%1026, newshape=[1, -1, 1, 50, 50]);
  %1028 = transpose(%1027, axes=[0, 3, 4, 1, 2]);
  %1029 = reshape(%1028, newshape=[1, -1, 1]);
  %1030 = %810.3;
  %1031 = reshape(%1030, newshape=[1, -1, 1, 25, 25]);
  %1032 = transpose(%1031, axes=[0, 3, 4, 1, 2]);
  %1033 = reshape(%1032, newshape=[1, -1, 1]);
  %1034 = %810.4;
  %1035 = reshape(%1034, newshape=[1, -1, 1, 13, 13]);
  %1036 = transpose(%1035, axes=[0, 3, 4, 1, 2]);
  %1037 = reshape(%1036, newshape=[1, -1, 1]);
  %1038 = (%1021, %1025, %1029, %1033, %1037);
  %1039 = concatenate(%1038, axis=1);
  %1040 = reshape(%1039, newshape=[-1, 1, 0]);
  %1041 = squeeze(%1040, axis=[1]);
  %1042 = reshape(%1041, newshape=[1, -1]);
  %1043 = split(%1042, indices_or_sections=[120000, 150000, 157500, 159375], axis=1);
  %1044 = %1043.0;
  %1045 = topk(%1044, k=1000, axis=1, dtype="int64");
  %1046 = %1045.1;
  %1047 = add(%1046, 0);
  %1048 = %1043.1;
  %1049 = topk(%1048, k=1000, axis=1, dtype="int64");
  %1050 = %1049.1;
  %1051 = take(meta[relay.Constant][40], 1, axis=0);
  %1052 = expand_dims(%1051, axis=0);
  %1053 = add(%1052, 0);
  %1054 = add(%1050, %1053);
  %1055 = %1043.2;
  %1056 = topk(%1055, k=1000, axis=1, dtype="int64");
  %1057 = %1056.1;
  %1058 = take(meta[relay.Constant][41], 1, axis=0);
  %1059 = expand_dims(%1058, axis=0);
  %1060 = add(%1053, %1059);
  %1061 = add(%1057, %1060);
  %1062 = %1043.3;
  %1063 = topk(%1062, k=1000, axis=1, dtype="int64");
  %1064 = %1063.1;
  %1065 = take(meta[relay.Constant][42], 1, axis=0);
  %1066 = expand_dims(%1065, axis=0);
  %1067 = add(%1060, %1066);
  %1068 = add(%1064, %1067);
  %1069 = %1043.4;
  %1070 = topk(%1069, k=507, axis=1, dtype="int64");
  %1071 = %1070.1;
  %1072 = take(meta[relay.Constant][43], 1, axis=0);
  %1073 = expand_dims(%1072, axis=0);
  %1074 = add(%1067, %1073);
  %1075 = add(%1071, %1074);
  %1076 = (%1047, %1054, %1061, %1068, %1075);
  %1077 = concatenate(%1076, axis=1);
  %1078 = (%1014, %1017, %1077);
  %1079 = adv_index(%1078);
  %1080 = split(%1079, indices_or_sections=1);
  %1081 = %1080.0;
  %1082 = squeeze(%1081, axis=[0]);
  %1083 = (%1082,);
  %1084 = %1083.0;
  %1085 = strided_slice(%1084, begin=[0, 0], end=[4507, 4], strides=[1, 2]);
  %1086 = maximum(%1085, 0f);
  %1087 = %25.1;
  %1088 = cast(%1087, dtype="float32");
  %1089 = minimum(%1086, %1088);
  %1090 = strided_slice(%1084, begin=[0, 1], end=[4507, 4], strides=[1, 2]);
  %1091 = maximum(%1090, 0f);
  %1092 = %25.2;
  %1093 = cast(%1092, dtype="float32");
  %1094 = minimum(%1091, %1093);
  %1095 = (%1089, %1094);
  %1096 = stack(%1095, axis=2);
  %1097 = reshape(%1096, newshape=[4507, 4]);
  %1098 = strided_slice(%1097, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1099 = take(%1098, 2, axis=1);
  %1100 = strided_slice(%1097, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1101 = take(%1100, 0, axis=1);
  %1102 = subtract(%1099, %1101);
  %1103 = greater_equal(%1102, 0.001f);
  %1104 = cast(%1103, dtype="bool");
  %1105 = strided_slice(%1097, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1106 = take(%1105, 3, axis=1);
  %1107 = strided_slice(%1097, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1108 = take(%1107, 1, axis=1);
  %1109 = subtract(%1106, %1108);
  %1110 = greater_equal(%1109, 0.001f);
  %1111 = cast(%1110, dtype="bool");
  %1112 = logical_and(%1104, %1111);
  %1113 = argwhere(%1112);
  %1114 = split(%1113, indices_or_sections=1, axis=1);
  %1115 = %1114.0;
  %1116 = squeeze(%1115, axis=[1]);
  %1117 = (%1116,);
  %1118 = %1117.0;
  %1119 = cast(%1118, dtype="int64");
  %1120 = (%1097, %1119);
  %1121 = adv_index(%1120);
  %1122 = ndarray_size(%1121, dtype="int32");
  %1123 = equal(%1122, 0);
  %1190 = if (%1123) {
    zeros(shape=[0], dtype="int64")
  } else {
    %1124 = (%1042, %1017, %1077);
    %1125 = adv_index(%1124);
    %1126 = split(%1125, indices_or_sections=1);
    %1127 = %1126.0;
    %1128 = squeeze(%1127, axis=[0]);
    %1129 = (%1128,);
    %1130 = %1129.0;
    %1131 = (%1130, %1119);
    %1132 = adv_index(%1131);
    %1133 = min(%1132);
    %1134 = subtract(%1132, %1133);
    %1135 = add(%1134, 1f);
    %1136 = expand_dims(%1135, axis=-1);
    %1137 = full(0, shape=[120000], dtype="int64");
    %1138 = full(1, shape=[30000], dtype="int64");
    %1139 = full(2, shape=[7500], dtype="int64");
    %1140 = full(3, shape=[1875], dtype="int64");
    %1141 = full(4, shape=[507], dtype="int64");
    %1142 = (%1137, %1138, %1139, %1140, %1141);
    %1143 = concatenate(%1142);
    %1144 = reshape(%1143, newshape=[1, -1]);
    %1145 = cast(%1042, dtype="int64");
    %1146 = broadcast_to_like(%1144, %1145);
    %1147 = (%1146, %1017, %1077);
    %1148 = adv_index(%1147);
    %1149 = split(%1148, indices_or_sections=1);
    %1150 = %1149.0;
    %1151 = squeeze(%1150, axis=[0]);
    %1152 = (%1151,);
    %1153 = %1152.0;
    %1154 = (%1153, %1119);
    %1155 = adv_index(%1154);
    %1156 = cast(%1155, dtype="float32");
    %1157 = max(%1121);
    %1158 = add(%1157, 1f);
    %1159 = multiply(%1156, %1158);
    %1160 = cast_like(0, meta[relay.Constant][44]);
    %1161 = less(meta[relay.Constant][44], %1160);
    %1162 = shape_of(%1159, dtype="int32");
    %1163 = cast_like(%1162, meta[relay.Constant][44]);
    %1164 = add(meta[relay.Constant][44], %1163);
    %1165 = where(%1161, %1164, meta[relay.Constant][44]);
    %1166 = shape_of(%1159, dtype="int32");
    %1167 = cast(%1166, dtype="int64");
    %1168 = dyn.strided_slice(%1159, %1165, %1167, meta[relay.Constant][45], begin=None, end=None, strides=None);
    %1169 = expand_dims(%1168, axis=1);
    %1170 = add(%1121, %1169);
    %1171 = (%1136, %1170);
    %1172 = concatenate(%1171, axis=-1);
    %1173 = expand_dims(%1172, axis=0);
    %1174 = shape_of(%1135, dtype="int32");
    %1175 = squeeze(%1174);
    %1176 = arange(0, %1175, 1, start=meta[relay.Constant][46], stop=meta[relay.Call][0], step=meta[relay.Constant][47], dtype="int32");
    %1177 = expand_dims(%1176, axis=0);
    %1178 = vision.non_max_suppression(%1173, %1174, %1177, -1, 0.7f, meta[relay.attrs.NonMaximumSuppressionAttrs][0]);
    %1179 = %1178.0;
    %1180 = squeeze(%1179, axis=[0]);
    %1181 = cast_like(0, meta[relay.Constant][48]);
    %1182 = less(meta[relay.Constant][48], %1181);
    %1183 = shape_of(%1180, dtype="int32");
    %1184 = cast_like(%1183, meta[relay.Constant][48]);
    %1185 = add(meta[relay.Constant][48], %1184);
    %1186 = where(%1182, %1185, meta[relay.Constant][48]);
    %1187 = %1178.1;
    %1188 = squeeze(%1187, axis=[1]);
    %1189 = dyn.strided_slice(%1180, %1186, %1188, meta[relay.Constant][49], begin=None, end=None, strides=None, slice_mode="size");
    cast(%1189, dtype="int64")
  };
  %1191 = strided_slice(%1190, begin=[0], end=[1000], strides=[1]);
  %1192 = (%1121, %1191);
  %1193 = adv_index(%1192);
  %1194 = cast_like(0, meta[relay.Constant][50]);
  %1195 = less(meta[relay.Constant][50], %1194);
  %1196 = shape_of(%1193, dtype="int32");
  %1197 = cast_like(%1196, meta[relay.Constant][50]);
  %1198 = add(meta[relay.Constant][50], %1197);
  %1199 = where(%1195, %1198, meta[relay.Constant][50]);
  %1200 = shape_of(%1193, dtype="int32");
  %1201 = cast(%1200, dtype="int64");
  %1202 = dyn.strided_slice(%1193, %1199, %1201, meta[relay.Constant][51], begin=None, end=None, strides=None);
  %1203 = take(%1202, 2, axis=1);
  %1204 = cast_like(0, meta[relay.Constant][52]);
  %1205 = less(meta[relay.Constant][52], %1204);
  %1206 = shape_of(%1193, dtype="int32");
  %1207 = cast_like(%1206, meta[relay.Constant][52]);
  %1208 = add(meta[relay.Constant][52], %1207);
  %1209 = where(%1205, %1208, meta[relay.Constant][52]);
  %1210 = shape_of(%1193, dtype="int32");
  %1211 = cast(%1210, dtype="int64");
  %1212 = dyn.strided_slice(%1193, %1209, %1211, meta[relay.Constant][53], begin=None, end=None, strides=None);
  %1213 = take(%1212, 0, axis=1);
  %1214 = subtract(%1203, %1213);
  %1215 = cast_like(0, meta[relay.Constant][54]);
  %1216 = less(meta[relay.Constant][54], %1215);
  %1217 = shape_of(%1193, dtype="int32");
  %1218 = cast_like(%1217, meta[relay.Constant][54]);
  %1219 = add(meta[relay.Constant][54], %1218);
  %1220 = where(%1216, %1219, meta[relay.Constant][54]);
  %1221 = shape_of(%1193, dtype="int32");
  %1222 = cast(%1221, dtype="int64");
  %1223 = dyn.strided_slice(%1193, %1220, %1222, meta[relay.Constant][55], begin=None, end=None, strides=None);
  %1224 = take(%1223, 3, axis=1);
  %1225 = cast_like(0, meta[relay.Constant][56]);
  %1226 = less(meta[relay.Constant][56], %1225);
  %1227 = shape_of(%1193, dtype="int32");
  %1228 = cast_like(%1227, meta[relay.Constant][56]);
  %1229 = add(meta[relay.Constant][56], %1228);
  %1230 = where(%1226, %1229, meta[relay.Constant][56]);
  %1231 = shape_of(%1193, dtype="int32");
  %1232 = cast(%1231, dtype="int64");
  %1233 = dyn.strided_slice(%1193, %1230, %1232, meta[relay.Constant][57], begin=None, end=None, strides=None);
  %1234 = take(%1233, 1, axis=1);
  %1235 = subtract(%1224, %1234);
  %1236 = multiply(%1214, %1235);
  %1237 = (%1236,);
  %1238 = concatenate(%1237);
  %1239 = sqrt(%1238);
  %1240 = divide(%1239, 224f);
  %1241 = log2(%1240);
  %1242 = add(%1241, 4f);
  %1243 = add(%1242, 1e-06f);
  %1244 = floor(%1243);
  %1245 = clip(%1244, a_min=2f, a_max=5f);
  %1246 = cast(%1245, dtype="int64");
  %1247 = subtract(%1246, 2);
  %1248 = shape_of(%1247, dtype="int32");
  %1249 = take(%1248, 0, axis=0);
  %1250 = expand_dims(%1249, axis=0);
  %1251 = cast(%1250, dtype="int64");
  %1252 = expand_dims(256, axis=0);
  %1253 = cast(%1252, dtype="int64");
  %1254 = expand_dims(7, axis=0);
  %1255 = cast(%1254, dtype="int64");
  %1256 = expand_dims(7, axis=0);
  %1257 = cast(%1256, dtype="int64");
  %1258 = (%1251, %1253, %1255, %1257);
  %1259 = concatenate(%1258);
  %1260 = dyn.full(0, %1259, shape=None, dtype="float32");
  %1261 = reshape(%1260, newshape=[0, 256, 7, 7]);
  %1262 = equal(%1247, 0);
  %1263 = argwhere(%1262);
  %1264 = split(%1263, indices_or_sections=1, axis=1);
  %1265 = %1264.0;
  %1266 = squeeze(%1265, axis=[1]);
  %1267 = (%1266,);
  %1268 = %1267.0;
  %1269 = reshape(%1268, newshape=[-1, 1, 1, 1]);
  %1270 = repeat(%1269, repeats=256, axis=1);
  %1271 = repeat(%1270, repeats=7, axis=2);
  %1272 = repeat(%1271, repeats=7, axis=3);
  %1273 = cast_like(0, meta[relay.Constant][58]);
  %1274 = less(meta[relay.Constant][58], %1273);
  %1275 = shape_of(%1193, dtype="int32");
  %1276 = cast_like(%1275, meta[relay.Constant][58]);
  %1277 = add(meta[relay.Constant][58], %1276);
  %1278 = where(%1274, %1277, meta[relay.Constant][58]);
  %1279 = shape_of(%1193, dtype="int32");
  %1280 = cast(%1279, dtype="int64");
  %1281 = dyn.strided_slice(%1193, %1278, %1280, meta[relay.Constant][59], begin=None, end=None, strides=None);
  %1282 = cast_like(0, meta[relay.Constant][60]);
  %1283 = less(meta[relay.Constant][60], %1282);
  %1284 = shape_of(%1281, dtype="int32");
  %1285 = cast_like(%1284, meta[relay.Constant][60]);
  %1286 = add(meta[relay.Constant][60], %1285);
  %1287 = where(%1283, %1286, meta[relay.Constant][60]);
  %1288 = shape_of(%1281, dtype="int32");
  %1289 = expand_dims(1, axis=0);
  %1290 = expand_dims(1, axis=0);
  %1291 = scatter(%1288, %1289, %1290, meta[relay.attrs.ScatterAttrs][0]);
  %1292 = cast(%1291, dtype="int64");
  %1293 = dyn.strided_slice(%1281, %1287, %1292, meta[relay.Constant][61], begin=None, end=None, strides=None);
  %1294 = full_like(%1293, 0);
  %1295 = (%1294,);
  %1296 = concatenate(%1295);
  %1297 = (%1193,);
  %1298 = concatenate(%1297);
  %1299 = (%1296, %1298);
  %1300 = concatenate(%1299, axis=1);
  %1301 = equal(%1247, 0);
  %1302 = argwhere(%1301);
  %1303 = split(%1302, indices_or_sections=1, axis=1);
  %1304 = %1303.0;
  %1305 = squeeze(%1304, axis=[1]);
  %1306 = (%1305,);
  %1307 = %1306.0;
  %1308 = cast(%1307, dtype="int64");
  %1309 = (%1300, %1308);
  %1310 = adv_index(%1309);
  %1311 = vision.roi_align(%770, %1310, meta[relay.attrs.ROIAlignAttrs][0]);
  %1312 = scatter(%1261, %1272, %1311, meta[relay.attrs.ScatterAttrs][1]);
  %1313 = equal(%1247, 1);
  %1314 = argwhere(%1313);
  %1315 = split(%1314, indices_or_sections=1, axis=1);
  %1316 = %1315.0;
  %1317 = squeeze(%1316, axis=[1]);
  %1318 = (%1317,);
  %1319 = %1318.0;
  %1320 = reshape(%1319, newshape=[-1, 1, 1, 1]);
  %1321 = repeat(%1320, repeats=256, axis=1);
  %1322 = repeat(%1321, repeats=7, axis=2);
  %1323 = repeat(%1322, repeats=7, axis=3);
  %1324 = equal(%1247, 1);
  %1325 = argwhere(%1324);
  %1326 = split(%1325, indices_or_sections=1, axis=1);
  %1327 = %1326.0;
  %1328 = squeeze(%1327, axis=[1]);
  %1329 = (%1328,);
  %1330 = %1329.0;
  %1331 = cast(%1330, dtype="int64");
  %1332 = (%1300, %1331);
  %1333 = adv_index(%1332);
  %1334 = vision.roi_align(%776, %1333, meta[relay.attrs.ROIAlignAttrs][1]);
  %1335 = scatter(%1312, %1323, %1334, meta[relay.attrs.ScatterAttrs][2]);
  %1336 = equal(%1247, 2);
  %1337 = argwhere(%1336);
  %1338 = split(%1337, indices_or_sections=1, axis=1);
  %1339 = %1338.0;
  %1340 = squeeze(%1339, axis=[1]);
  %1341 = (%1340,);
  %1342 = %1341.0;
  %1343 = reshape(%1342, newshape=[-1, 1, 1, 1]);
  %1344 = repeat(%1343, repeats=256, axis=1);
  %1345 = repeat(%1344, repeats=7, axis=2);
  %1346 = repeat(%1345, repeats=7, axis=3);
  %1347 = equal(%1247, 2);
  %1348 = argwhere(%1347);
  %1349 = split(%1348, indices_or_sections=1, axis=1);
  %1350 = %1349.0;
  %1351 = squeeze(%1350, axis=[1]);
  %1352 = (%1351,);
  %1353 = %1352.0;
  %1354 = cast(%1353, dtype="int64");
  %1355 = (%1300, %1354);
  %1356 = adv_index(%1355);
  %1357 = vision.roi_align(%782, %1356, meta[relay.attrs.ROIAlignAttrs][2]);
  %1358 = scatter(%1335, %1346, %1357, meta[relay.attrs.ScatterAttrs][3]);
  %1359 = equal(%1247, 3);
  %1360 = argwhere(%1359);
  %1361 = split(%1360, indices_or_sections=1, axis=1);
  %1362 = %1361.0;
  %1363 = squeeze(%1362, axis=[1]);
  %1364 = (%1363,);
  %1365 = %1364.0;
  %1366 = reshape(%1365, newshape=[-1, 1, 1, 1]);
  %1367 = repeat(%1366, repeats=256, axis=1);
  %1368 = repeat(%1367, repeats=7, axis=2);
  %1369 = repeat(%1368, repeats=7, axis=3);
  %1370 = %769.9;
  %1371 = equal(%1247, 3);
  %1372 = argwhere(%1371);
  %1373 = split(%1372, indices_or_sections=1, axis=1);
  %1374 = %1373.0;
  %1375 = squeeze(%1374, axis=[1]);
  %1376 = (%1375,);
  %1377 = %1376.0;
  %1378 = cast(%1377, dtype="int64");
  %1379 = (%1300, %1378);
  %1380 = adv_index(%1379);
  %1381 = vision.roi_align(%1370, %1380, meta[relay.attrs.ROIAlignAttrs][3]);
  %1382 = scatter(%1358, %1369, %1381, meta[relay.attrs.ScatterAttrs][4]);
  %1383 = reshape(%1382, newshape=[0, -1, 1, 1]);
  %1384 = squeeze(%1383, axis=[2, 3]);
  %1385 = transpose(%model.roi_heads.box_head.fc6.weight, axes=[1, 0]);
  %1386 = transpose(%1385, axes=[1, 0]);
  %1387 = nn.dense(%1384, %1386, units=1024);
  %1388 = add(%1387, %model.roi_heads.box_head.fc6.bias);
  %1389 = nn.relu(%1388);
  %1390 = transpose(%model.roi_heads.box_head.fc7.weight, axes=[1, 0]);
  %1391 = transpose(%1390, axes=[1, 0]);
  %1392 = nn.dense(%1389, %1391, units=1024);
  %1393 = add(%1392, %model.roi_heads.box_head.fc7.bias);
  %1394 = nn.relu(%1393);
  %1395 = reshape(%1394, newshape=[0, -1]);
  %1396 = transpose(%model.roi_heads.box_predictor.cls_score.weight, axes=[1, 0]);
  %1397 = transpose(%1396, axes=[1, 0]);
  %1398 = nn.dense(%1395, %1397, units=91);
  %1399 = add(%1398, %model.roi_heads.box_predictor.cls_score.bias);
  %1400 = transpose(%model.roi_heads.box_predictor.bbox_pred.weight, axes=[1, 0]);
  %1401 = transpose(%1400, axes=[1, 0]);
  %1402 = nn.dense(%1395, %1401, units=364);
  %1403 = add(%1402, %model.roi_heads.box_predictor.bbox_pred.bias);
  %1404 = (%1399, %1403);
  %1405 = %1404.1;
  %1406 = shape_of(%1193, dtype="int32");
  %1407 = take(%1406, 0, axis=0);
  %1408 = add(%1407, 0);
  %1409 = cast(%1408, dtype="int64");
  %1410 = expand_dims(%1409, axis=0);
  %1411 = expand_dims(-1, axis=0);
  %1412 = (%1410, %1411);
  %1413 = concatenate(%1412);
  %1414 = dyn.reshape(%1405, %1413, newshape=[]);
  %1415 = cast_like(0, meta[relay.Constant][62]);
  %1416 = less(meta[relay.Constant][62], %1415);
  %1417 = shape_of(%1414, dtype="int32");
  %1418 = cast_like(%1417, meta[relay.Constant][62]);
  %1419 = add(meta[relay.Constant][62], %1418);
  %1420 = where(%1416, %1419, meta[relay.Constant][62]);
  %1421 = shape_of(%1414, dtype="int32");
  %1422 = cast(%1421, dtype="int64");
  %1423 = dyn.strided_slice(%1414, %1420, %1422, meta[relay.Constant][63], begin=None, end=None, strides=None);
  %1424 = cast_like(0, meta[relay.Constant][64]);
  %1425 = less(meta[relay.Constant][64], %1424);
  %1426 = shape_of(%1423, dtype="int32");
  %1427 = cast_like(%1426, meta[relay.Constant][64]);
  %1428 = add(meta[relay.Constant][64], %1427);
  %1429 = where(%1425, %1428, meta[relay.Constant][64]);
  %1430 = shape_of(%1423, dtype="int32");
  %1431 = cast(%1430, dtype="int64");
  %1432 = dyn.strided_slice(%1423, %1429, %1431, meta[relay.Constant][65], begin=None, end=None, strides=None);
  %1433 = divide(%1432, 10f);
  %1434 = (%1193,);
  %1435 = concatenate(%1434);
  %1436 = cast_like(0, meta[relay.Constant][66]);
  %1437 = less(meta[relay.Constant][66], %1436);
  %1438 = shape_of(%1435, dtype="int32");
  %1439 = cast_like(%1438, meta[relay.Constant][66]);
  %1440 = add(meta[relay.Constant][66], %1439);
  %1441 = where(%1437, %1440, meta[relay.Constant][66]);
  %1442 = shape_of(%1435, dtype="int32");
  %1443 = cast(%1442, dtype="int64");
  %1444 = dyn.strided_slice(%1435, %1441, %1443, meta[relay.Constant][67], begin=None, end=None, strides=None);
  %1445 = take(%1444, 2, axis=1);
  %1446 = cast_like(0, meta[relay.Constant][68]);
  %1447 = less(meta[relay.Constant][68], %1446);
  %1448 = shape_of(%1435, dtype="int32");
  %1449 = cast_like(%1448, meta[relay.Constant][68]);
  %1450 = add(meta[relay.Constant][68], %1449);
  %1451 = where(%1447, %1450, meta[relay.Constant][68]);
  %1452 = shape_of(%1435, dtype="int32");
  %1453 = cast(%1452, dtype="int64");
  %1454 = dyn.strided_slice(%1435, %1451, %1453, meta[relay.Constant][69], begin=None, end=None, strides=None);
  %1455 = take(%1454, 0, axis=1);
  %1456 = subtract(%1445, %1455);
  %1457 = cast_like(0, meta[relay.Constant][70]);
  %1458 = less(meta[relay.Constant][70], %1457);
  %1459 = shape_of(%1456, dtype="int32");
  %1460 = cast_like(%1459, meta[relay.Constant][70]);
  %1461 = add(meta[relay.Constant][70], %1460);
  %1462 = where(%1458, %1461, meta[relay.Constant][70]);
  %1463 = shape_of(%1456, dtype="int32");
  %1464 = cast(%1463, dtype="int64");
  %1465 = dyn.strided_slice(%1456, %1462, %1464, meta[relay.Constant][71], begin=None, end=None, strides=None);
  %1466 = expand_dims(%1465, axis=1);
  %1467 = multiply(%1433, %1466);
  %1468 = cast_like(0, meta[relay.Constant][72]);
  %1469 = less(meta[relay.Constant][72], %1468);
  %1470 = shape_of(%1435, dtype="int32");
  %1471 = cast_like(%1470, meta[relay.Constant][72]);
  %1472 = add(meta[relay.Constant][72], %1471);
  %1473 = where(%1469, %1472, meta[relay.Constant][72]);
  %1474 = shape_of(%1435, dtype="int32");
  %1475 = cast(%1474, dtype="int64");
  %1476 = dyn.strided_slice(%1435, %1473, %1475, meta[relay.Constant][73], begin=None, end=None, strides=None);
  %1477 = take(%1476, 0, axis=1);
  %1478 = multiply(%1456, 0.5f);
  %1479 = add(%1477, %1478);
  %1480 = cast_like(0, meta[relay.Constant][74]);
  %1481 = less(meta[relay.Constant][74], %1480);
  %1482 = shape_of(%1479, dtype="int32");
  %1483 = cast_like(%1482, meta[relay.Constant][74]);
  %1484 = add(meta[relay.Constant][74], %1483);
  %1485 = where(%1481, %1484, meta[relay.Constant][74]);
  %1486 = shape_of(%1479, dtype="int32");
  %1487 = cast(%1486, dtype="int64");
  %1488 = dyn.strided_slice(%1479, %1485, %1487, meta[relay.Constant][75], begin=None, end=None, strides=None);
  %1489 = expand_dims(%1488, axis=1);
  %1490 = add(%1467, %1489);
  %1491 = cast_like(0, meta[relay.Constant][76]);
  %1492 = less(meta[relay.Constant][76], %1491);
  %1493 = shape_of(%1414, dtype="int32");
  %1494 = cast_like(%1493, meta[relay.Constant][76]);
  %1495 = add(meta[relay.Constant][76], %1494);
  %1496 = where(%1492, %1495, meta[relay.Constant][76]);
  %1497 = shape_of(%1414, dtype="int32");
  %1498 = cast(%1497, dtype="int64");
  %1499 = dyn.strided_slice(%1414, %1496, %1498, meta[relay.Constant][77], begin=None, end=None, strides=None);
  %1500 = cast_like(0, meta[relay.Constant][78]);
  %1501 = less(meta[relay.Constant][78], %1500);
  %1502 = shape_of(%1499, dtype="int32");
  %1503 = cast_like(%1502, meta[relay.Constant][78]);
  %1504 = add(meta[relay.Constant][78], %1503);
  %1505 = where(%1501, %1504, meta[relay.Constant][78]);
  %1506 = shape_of(%1499, dtype="int32");
  %1507 = cast(%1506, dtype="int64");
  %1508 = dyn.strided_slice(%1499, %1505, %1507, meta[relay.Constant][79], begin=None, end=None, strides=None);
  %1509 = divide(%1508, 5f);
  %1510 = clip(%1509, a_min=-3.40282e+38f, a_max=4.13517f);
  %1511 = exp(%1510);
  %1512 = cast_like(0, meta[relay.Constant][80]);
  %1513 = less(meta[relay.Constant][80], %1512);
  %1514 = shape_of(%1456, dtype="int32");
  %1515 = cast_like(%1514, meta[relay.Constant][80]);
  %1516 = add(meta[relay.Constant][80], %1515);
  %1517 = where(%1513, %1516, meta[relay.Constant][80]);
  %1518 = shape_of(%1456, dtype="int32");
  %1519 = cast(%1518, dtype="int64");
  %1520 = dyn.strided_slice(%1456, %1517, %1519, meta[relay.Constant][81], begin=None, end=None, strides=None);
  %1521 = expand_dims(%1520, axis=1);
  %1522 = multiply(%1511, %1521);
  %1523 = multiply(0.5f, %1522);
  %1524 = subtract(%1490, %1523);
  %1525 = cast_like(0, meta[relay.Constant][82]);
  %1526 = less(meta[relay.Constant][82], %1525);
  %1527 = shape_of(%1414, dtype="int32");
  %1528 = cast_like(%1527, meta[relay.Constant][82]);
  %1529 = add(meta[relay.Constant][82], %1528);
  %1530 = where(%1526, %1529, meta[relay.Constant][82]);
  %1531 = shape_of(%1414, dtype="int32");
  %1532 = cast(%1531, dtype="int64");
  %1533 = dyn.strided_slice(%1414, %1530, %1532, meta[relay.Constant][83], begin=None, end=None, strides=None);
  %1534 = cast_like(0, meta[relay.Constant][84]);
  %1535 = less(meta[relay.Constant][84], %1534);
  %1536 = shape_of(%1533, dtype="int32");
  %1537 = cast_like(%1536, meta[relay.Constant][84]);
  %1538 = add(meta[relay.Constant][84], %1537);
  %1539 = where(%1535, %1538, meta[relay.Constant][84]);
  %1540 = shape_of(%1533, dtype="int32");
  %1541 = cast(%1540, dtype="int64");
  %1542 = dyn.strided_slice(%1533, %1539, %1541, meta[relay.Constant][85], begin=None, end=None, strides=None);
  %1543 = divide(%1542, 10f);
  %1544 = cast_like(0, meta[relay.Constant][86]);
  %1545 = less(meta[relay.Constant][86], %1544);
  %1546 = shape_of(%1435, dtype="int32");
  %1547 = cast_like(%1546, meta[relay.Constant][86]);
  %1548 = add(meta[relay.Constant][86], %1547);
  %1549 = where(%1545, %1548, meta[relay.Constant][86]);
  %1550 = shape_of(%1435, dtype="int32");
  %1551 = cast(%1550, dtype="int64");
  %1552 = dyn.strided_slice(%1435, %1549, %1551, meta[relay.Constant][87], begin=None, end=None, strides=None);
  %1553 = take(%1552, 3, axis=1);
  %1554 = cast_like(0, meta[relay.Constant][88]);
  %1555 = less(meta[relay.Constant][88], %1554);
  %1556 = shape_of(%1435, dtype="int32");
  %1557 = cast_like(%1556, meta[relay.Constant][88]);
  %1558 = add(meta[relay.Constant][88], %1557);
  %1559 = where(%1555, %1558, meta[relay.Constant][88]);
  %1560 = shape_of(%1435, dtype="int32");
  %1561 = cast(%1560, dtype="int64");
  %1562 = dyn.strided_slice(%1435, %1559, %1561, meta[relay.Constant][89], begin=None, end=None, strides=None);
  %1563 = take(%1562, 1, axis=1);
  %1564 = subtract(%1553, %1563);
  %1565 = cast_like(0, meta[relay.Constant][90]);
  %1566 = less(meta[relay.Constant][90], %1565);
  %1567 = shape_of(%1564, dtype="int32");
  %1568 = cast_like(%1567, meta[relay.Constant][90]);
  %1569 = add(meta[relay.Constant][90], %1568);
  %1570 = where(%1566, %1569, meta[relay.Constant][90]);
  %1571 = shape_of(%1564, dtype="int32");
  %1572 = cast(%1571, dtype="int64");
  %1573 = dyn.strided_slice(%1564, %1570, %1572, meta[relay.Constant][91], begin=None, end=None, strides=None);
  %1574 = expand_dims(%1573, axis=1);
  %1575 = multiply(%1543, %1574);
  %1576 = cast_like(0, meta[relay.Constant][92]);
  %1577 = less(meta[relay.Constant][92], %1576);
  %1578 = shape_of(%1435, dtype="int32");
  %1579 = cast_like(%1578, meta[relay.Constant][92]);
  %1580 = add(meta[relay.Constant][92], %1579);
  %1581 = where(%1577, %1580, meta[relay.Constant][92]);
  %1582 = shape_of(%1435, dtype="int32");
  %1583 = cast(%1582, dtype="int64");
  %1584 = dyn.strided_slice(%1435, %1581, %1583, meta[relay.Constant][93], begin=None, end=None, strides=None);
  %1585 = take(%1584, 1, axis=1);
  %1586 = multiply(%1564, 0.5f);
  %1587 = add(%1585, %1586);
  %1588 = cast_like(0, meta[relay.Constant][94]);
  %1589 = less(meta[relay.Constant][94], %1588);
  %1590 = shape_of(%1587, dtype="int32");
  %1591 = cast_like(%1590, meta[relay.Constant][94]);
  %1592 = add(meta[relay.Constant][94], %1591);
  %1593 = where(%1589, %1592, meta[relay.Constant][94]);
  %1594 = shape_of(%1587, dtype="int32");
  %1595 = cast(%1594, dtype="int64");
  %1596 = dyn.strided_slice(%1587, %1593, %1595, meta[relay.Constant][95], begin=None, end=None, strides=None);
  %1597 = expand_dims(%1596, axis=1);
  %1598 = add(%1575, %1597);
  %1599 = cast_like(0, meta[relay.Constant][96]);
  %1600 = less(meta[relay.Constant][96], %1599);
  %1601 = shape_of(%1414, dtype="int32");
  %1602 = cast_like(%1601, meta[relay.Constant][96]);
  %1603 = add(meta[relay.Constant][96], %1602);
  %1604 = where(%1600, %1603, meta[relay.Constant][96]);
  %1605 = shape_of(%1414, dtype="int32");
  %1606 = cast(%1605, dtype="int64");
  %1607 = dyn.strided_slice(%1414, %1604, %1606, meta[relay.Constant][97], begin=None, end=None, strides=None);
  %1608 = cast_like(0, meta[relay.Constant][98]);
  %1609 = less(meta[relay.Constant][98], %1608);
  %1610 = shape_of(%1607, dtype="int32");
  %1611 = cast_like(%1610, meta[relay.Constant][98]);
  %1612 = add(meta[relay.Constant][98], %1611);
  %1613 = where(%1609, %1612, meta[relay.Constant][98]);
  %1614 = shape_of(%1607, dtype="int32");
  %1615 = cast(%1614, dtype="int64");
  %1616 = dyn.strided_slice(%1607, %1613, %1615, meta[relay.Constant][99], begin=None, end=None, strides=None);
  %1617 = divide(%1616, 5f);
  %1618 = clip(%1617, a_min=-3.40282e+38f, a_max=4.13517f);
  %1619 = exp(%1618);
  %1620 = cast_like(0, meta[relay.Constant][100]);
  %1621 = less(meta[relay.Constant][100], %1620);
  %1622 = shape_of(%1564, dtype="int32");
  %1623 = cast_like(%1622, meta[relay.Constant][100]);
  %1624 = add(meta[relay.Constant][100], %1623);
  %1625 = where(%1621, %1624, meta[relay.Constant][100]);
  %1626 = shape_of(%1564, dtype="int32");
  %1627 = cast(%1626, dtype="int64");
  %1628 = dyn.strided_slice(%1564, %1625, %1627, meta[relay.Constant][101], begin=None, end=None, strides=None);
  %1629 = expand_dims(%1628, axis=1);
  %1630 = multiply(%1619, %1629);
  %1631 = multiply(0.5f, %1630);
  %1632 = subtract(%1598, %1631);
  %1633 = multiply(0.5f, %1522);
  %1634 = add(%1490, %1633);
  %1635 = multiply(0.5f, %1630);
  %1636 = add(%1598, %1635);
  %1637 = (%1524, %1632, %1634, %1636);
  %1638 = stack(%1637, axis=2);
  %1639 = reshape(%1638, newshape=[0, -1, 1]);
  %1640 = squeeze(%1639, axis=[2]);
  %1641 = cast(%1408, dtype="int64");
  %1642 = expand_dims(%1641, axis=0);
  %1643 = expand_dims(-1, axis=0);
  %1644 = expand_dims(4, axis=0);
  %1645 = (%1642, %1643, %1644);
  %1646 = concatenate(%1645);
  %1647 = dyn.reshape(%1640, %1646, newshape=[]);
  %1648 = (%1647,);
  %1649 = %1648.0;
  %1650 = cast_like(0, meta[relay.Constant][102]);
  %1651 = less(meta[relay.Constant][102], %1650);
  %1652 = shape_of(%1649, dtype="int32");
  %1653 = cast_like(%1652, meta[relay.Constant][102]);
  %1654 = add(meta[relay.Constant][102], %1653);
  %1655 = where(%1651, %1654, meta[relay.Constant][102]);
  %1656 = shape_of(%1649, dtype="int32");
  %1657 = cast(%1656, dtype="int64");
  %1658 = dyn.strided_slice(%1649, %1655, %1657, meta[relay.Constant][103], begin=None, end=None, strides=None);
  %1659 = maximum(%1658, 0f);
  %1660 = cast(%1087, dtype="float32");
  %1661 = minimum(%1659, %1660);
  %1662 = cast_like(0, meta[relay.Constant][104]);
  %1663 = less(meta[relay.Constant][104], %1662);
  %1664 = shape_of(%1649, dtype="int32");
  %1665 = cast_like(%1664, meta[relay.Constant][104]);
  %1666 = add(meta[relay.Constant][104], %1665);
  %1667 = where(%1663, %1666, meta[relay.Constant][104]);
  %1668 = shape_of(%1649, dtype="int32");
  %1669 = cast(%1668, dtype="int64");
  %1670 = dyn.strided_slice(%1649, %1667, %1669, meta[relay.Constant][105], begin=None, end=None, strides=None);
  %1671 = maximum(%1670, 0f);
  %1672 = cast(%1092, dtype="float32");
  %1673 = minimum(%1671, %1672);
  %1674 = (%1661, %1673);
  %1675 = stack(%1674, axis=3);
  %1676 = shape_of(%1649, dtype="int32");
  %1677 = take(%1676, 0, axis=0);
  %1678 = cast(%1677, dtype="int64");
  %1679 = expand_dims(%1678, axis=0);
  %1680 = shape_of(%1649, dtype="int32");
  %1681 = take(%1680, 1, axis=0);
  %1682 = cast(%1681, dtype="int64");
  %1683 = expand_dims(%1682, axis=0);
  %1684 = shape_of(%1649, dtype="int32");
  %1685 = take(%1684, 2, axis=0);
  %1686 = cast(%1685, dtype="int64");
  %1687 = expand_dims(%1686, axis=0);
  %1688 = (%1679, %1683, %1687);
  %1689 = concatenate(%1688);
  %1690 = dyn.reshape(%1675, %1689, newshape=[]);
  %1691 = cast_like(0, meta[relay.Constant][106]);
  %1692 = less(meta[relay.Constant][106], %1691);
  %1693 = shape_of(%1690, dtype="int32");
  %1694 = cast_like(%1693, meta[relay.Constant][106]);
  %1695 = add(meta[relay.Constant][106], %1694);
  %1696 = where(%1692, %1695, meta[relay.Constant][106]);
  %1697 = shape_of(%1690, dtype="int32");
  %1698 = cast(%1697, dtype="int64");
  %1699 = dyn.strided_slice(%1690, %1696, %1698, meta[relay.Constant][107], begin=None, end=None, strides=None);
  %1700 = cast_like(0, meta[relay.Constant][108]);
  %1701 = less(meta[relay.Constant][108], %1700);
  %1702 = shape_of(%1699, dtype="int32");
  %1703 = cast_like(%1702, meta[relay.Constant][108]);
  %1704 = add(meta[relay.Constant][108], %1703);
  %1705 = where(%1701, %1704, meta[relay.Constant][108]);
  %1706 = shape_of(%1699, dtype="int32");
  %1707 = cast(%1706, dtype="int64");
  %1708 = dyn.strided_slice(%1699, %1705, %1707, meta[relay.Constant][109], begin=None, end=None, strides=None);
  %1709 = reshape(%1708, newshape=[-1, 4]);
  %1710 = %1404.0;
  %1711 = nn.softmax(%1710);
  %1712 = (%1711,);
  %1713 = %1712.0;
  %1714 = cast_like(0, meta[relay.Constant][110]);
  %1715 = less(meta[relay.Constant][110], %1714);
  %1716 = shape_of(%1713, dtype="int32");
  %1717 = cast_like(%1716, meta[relay.Constant][110]);
  %1718 = add(meta[relay.Constant][110], %1717);
  %1719 = where(%1715, %1718, meta[relay.Constant][110]);
  %1720 = shape_of(%1713, dtype="int32");
  %1721 = cast(%1720, dtype="int64");
  %1722 = dyn.strided_slice(%1713, %1719, %1721, meta[relay.Constant][111], begin=None, end=None, strides=None);
  %1723 = cast_like(0, meta[relay.Constant][112]);
  %1724 = less(meta[relay.Constant][112], %1723);
  %1725 = shape_of(%1722, dtype="int32");
  %1726 = cast_like(%1725, meta[relay.Constant][112]);
  %1727 = add(meta[relay.Constant][112], %1726);
  %1728 = where(%1724, %1727, meta[relay.Constant][112]);
  %1729 = shape_of(%1722, dtype="int32");
  %1730 = cast(%1729, dtype="int64");
  %1731 = dyn.strided_slice(%1722, %1728, %1730, meta[relay.Constant][113], begin=None, end=None, strides=None);
  %1732 = reshape(%1731, newshape=[-1]);
  %1733 = greater(%1732, 0.05f);
  %1734 = argwhere(%1733);
  %1735 = split(%1734, indices_or_sections=1, axis=1);
  %1736 = %1735.0;
  %1737 = squeeze(%1736, axis=[1]);
  %1738 = (%1737,);
  %1739 = %1738.0;
  %1740 = cast(%1739, dtype="int64");
  %1741 = (%1709, %1740);
  %1742 = adv_index(%1741);
  %1743 = cast_like(0, meta[relay.Constant][114]);
  %1744 = less(meta[relay.Constant][114], %1743);
  %1745 = shape_of(%1742, dtype="int32");
  %1746 = cast_like(%1745, meta[relay.Constant][114]);
  %1747 = add(meta[relay.Constant][114], %1746);
  %1748 = where(%1744, %1747, meta[relay.Constant][114]);
  %1749 = shape_of(%1742, dtype="int32");
  %1750 = cast(%1749, dtype="int64");
  %1751 = dyn.strided_slice(%1742, %1748, %1750, meta[relay.Constant][115], begin=None, end=None, strides=None);
  %1752 = take(%1751, 2, axis=1);
  %1753 = cast_like(0, meta[relay.Constant][116]);
  %1754 = less(meta[relay.Constant][116], %1753);
  %1755 = shape_of(%1742, dtype="int32");
  %1756 = cast_like(%1755, meta[relay.Constant][116]);
  %1757 = add(meta[relay.Constant][116], %1756);
  %1758 = where(%1754, %1757, meta[relay.Constant][116]);
  %1759 = shape_of(%1742, dtype="int32");
  %1760 = cast(%1759, dtype="int64");
  %1761 = dyn.strided_slice(%1742, %1758, %1760, meta[relay.Constant][117], begin=None, end=None, strides=None);
  %1762 = take(%1761, 0, axis=1);
  %1763 = subtract(%1752, %1762);
  %1764 = greater_equal(%1763, 0.01f);
  %1765 = cast(%1764, dtype="bool");
  %1766 = cast_like(0, meta[relay.Constant][118]);
  %1767 = less(meta[relay.Constant][118], %1766);
  %1768 = shape_of(%1742, dtype="int32");
  %1769 = cast_like(%1768, meta[relay.Constant][118]);
  %1770 = add(meta[relay.Constant][118], %1769);
  %1771 = where(%1767, %1770, meta[relay.Constant][118]);
  %1772 = shape_of(%1742, dtype="int32");
  %1773 = cast(%1772, dtype="int64");
  %1774 = dyn.strided_slice(%1742, %1771, %1773, meta[relay.Constant][119], begin=None, end=None, strides=None);
  %1775 = take(%1774, 3, axis=1);
  %1776 = cast_like(0, meta[relay.Constant][120]);
  %1777 = less(meta[relay.Constant][120], %1776);
  %1778 = shape_of(%1742, dtype="int32");
  %1779 = cast_like(%1778, meta[relay.Constant][120]);
  %1780 = add(meta[relay.Constant][120], %1779);
  %1781 = where(%1777, %1780, meta[relay.Constant][120]);
  %1782 = shape_of(%1742, dtype="int32");
  %1783 = cast(%1782, dtype="int64");
  %1784 = dyn.strided_slice(%1742, %1781, %1783, meta[relay.Constant][121], begin=None, end=None, strides=None);
  %1785 = take(%1784, 1, axis=1);
  %1786 = subtract(%1775, %1785);
  %1787 = greater_equal(%1786, 0.01f);
  %1788 = cast(%1787, dtype="bool");
  %1789 = logical_and(%1765, %1788);
  %1790 = argwhere(%1789);
  %1791 = split(%1790, indices_or_sections=1, axis=1);
  %1792 = %1791.0;
  %1793 = squeeze(%1792, axis=[1]);
  %1794 = (%1793,);
  %1795 = %1794.0;
  %1796 = cast(%1795, dtype="int64");
  %1797 = (%1742, %1796);
  %1798 = adv_index(%1797);
  %1799 = ndarray_size(%1798, dtype="int32");
  %1800 = equal(%1799, 0);
  %1870 = if (%1800) {
    zeros(shape=[0], dtype="int64")
  } else {
    %1801 = (%1732, %1740);
    %1802 = adv_index(%1801);
    %1803 = (%1802, %1796);
    %1804 = adv_index(%1803);
    %1805 = min(%1804);
    %1806 = subtract(%1804, %1805);
    %1807 = add(%1806, 1f);
    %1808 = expand_dims(%1807, axis=-1);
    %1809 = arange(0, 91, 1, start=meta[relay.Constant][122], stop=meta[relay.Constant][123], step=meta[relay.Constant][124], dtype="int64");
    %1810 = reshape(%1809, newshape=[1, -1]);
    %1811 = cast(%1713, dtype="int64");
    %1812 = broadcast_to_like(%1810, %1811);
    %1813 = cast_like(0, meta[relay.Constant][125]);
    %1814 = less(meta[relay.Constant][125], %1813);
    %1815 = shape_of(%1812, dtype="int32");
    %1816 = cast_like(%1815, meta[relay.Constant][125]);
    %1817 = add(meta[relay.Constant][125], %1816);
    %1818 = where(%1814, %1817, meta[relay.Constant][125]);
    %1819 = shape_of(%1812, dtype="int32");
    %1820 = cast(%1819, dtype="int64");
    %1821 = dyn.strided_slice(%1812, %1818, %1820, meta[relay.Constant][126], begin=None, end=None, strides=None);
    %1822 = cast_like(0, meta[relay.Constant][127]);
    %1823 = less(meta[relay.Constant][127], %1822);
    %1824 = shape_of(%1821, dtype="int32");
    %1825 = cast_like(%1824, meta[relay.Constant][127]);
    %1826 = add(meta[relay.Constant][127], %1825);
    %1827 = where(%1823, %1826, meta[relay.Constant][127]);
    %1828 = shape_of(%1821, dtype="int32");
    %1829 = cast(%1828, dtype="int64");
    %1830 = dyn.strided_slice(%1821, %1827, %1829, meta[relay.Constant][128], begin=None, end=None, strides=None);
    %1831 = reshape(%1830, newshape=[-1]);
    %1832 = (%1831, %1740);
    %1833 = adv_index(%1832);
    %1834 = (%1833, %1796);
    %1835 = adv_index(%1834);
    %1836 = cast(%1835, dtype="float32");
    %1837 = max(%1798);
    %1838 = add(%1837, 1f);
    %1839 = multiply(%1836, %1838);
    %1840 = cast_like(0, meta[relay.Constant][129]);
    %1841 = less(meta[relay.Constant][129], %1840);
    %1842 = shape_of(%1839, dtype="int32");
    %1843 = cast_like(%1842, meta[relay.Constant][129]);
    %1844 = add(meta[relay.Constant][129], %1843);
    %1845 = where(%1841, %1844, meta[relay.Constant][129]);
    %1846 = shape_of(%1839, dtype="int32");
    %1847 = cast(%1846, dtype="int64");
    %1848 = dyn.strided_slice(%1839, %1845, %1847, meta[relay.Constant][130], begin=None, end=None, strides=None);
    %1849 = expand_dims(%1848, axis=1);
    %1850 = add(%1798, %1849);
    %1851 = (%1808, %1850);
    %1852 = concatenate(%1851, axis=-1);
    %1853 = expand_dims(%1852, axis=0);
    %1854 = shape_of(%1807, dtype="int32");
    %1855 = squeeze(%1854);
    %1856 = arange(0, %1855, 1, start=meta[relay.Constant][131], stop=meta[relay.Call][1], step=meta[relay.Constant][132], dtype="int32");
    %1857 = expand_dims(%1856, axis=0);
    %1858 = vision.non_max_suppression(%1853, %1854, %1857, -1, 0.5f, meta[relay.attrs.NonMaximumSuppressionAttrs][1]);
    %1859 = %1858.0;
    %1860 = squeeze(%1859, axis=[0]);
    %1861 = cast_like(0, meta[relay.Constant][133]);
    %1862 = less(meta[relay.Constant][133], %1861);
    %1863 = shape_of(%1860, dtype="int32");
    %1864 = cast_like(%1863, meta[relay.Constant][133]);
    %1865 = add(meta[relay.Constant][133], %1864);
    %1866 = where(%1862, %1865, meta[relay.Constant][133]);
    %1867 = %1858.1;
    %1868 = squeeze(%1867, axis=[1]);
    %1869 = dyn.strided_slice(%1860, %1866, %1868, meta[relay.Constant][134], begin=None, end=None, strides=None, slice_mode="size");
    cast(%1869, dtype="int64")
  };
  %1871 = strided_slice(%1870, begin=[0], end=[100], strides=[1]);
  %1872 = (%1798, %1871);
  %1873 = adv_index(%1872);
  %1874 = cast_like(0, meta[relay.Constant][135]);
  %1875 = less(meta[relay.Constant][135], %1874);
  %1876 = shape_of(%1873, dtype="int32");
  %1877 = cast_like(%1876, meta[relay.Constant][135]);
  %1878 = add(meta[relay.Constant][135], %1877);
  %1879 = where(%1875, %1878, meta[relay.Constant][135]);
  %1880 = shape_of(%1873, dtype="int32");
  %1881 = cast(%1880, dtype="int64");
  %1882 = dyn.strided_slice(%1873, %1879, %1881, meta[relay.Constant][136], begin=None, end=None, strides=None);
  %1883 = take(%1882, 2, axis=1);
  %1884 = cast_like(0, meta[relay.Constant][137]);
  %1885 = less(meta[relay.Constant][137], %1884);
  %1886 = shape_of(%1873, dtype="int32");
  %1887 = cast_like(%1886, meta[relay.Constant][137]);
  %1888 = add(meta[relay.Constant][137], %1887);
  %1889 = where(%1885, %1888, meta[relay.Constant][137]);
  %1890 = shape_of(%1873, dtype="int32");
  %1891 = cast(%1890, dtype="int64");
  %1892 = dyn.strided_slice(%1873, %1889, %1891, meta[relay.Constant][138], begin=None, end=None, strides=None);
  %1893 = take(%1892, 0, axis=1);
  %1894 = subtract(%1883, %1893);
  %1895 = cast_like(0, meta[relay.Constant][139]);
  %1896 = less(meta[relay.Constant][139], %1895);
  %1897 = shape_of(%1873, dtype="int32");
  %1898 = cast_like(%1897, meta[relay.Constant][139]);
  %1899 = add(meta[relay.Constant][139], %1898);
  %1900 = where(%1896, %1899, meta[relay.Constant][139]);
  %1901 = shape_of(%1873, dtype="int32");
  %1902 = cast(%1901, dtype="int64");
  %1903 = dyn.strided_slice(%1873, %1900, %1902, meta[relay.Constant][140], begin=None, end=None, strides=None);
  %1904 = take(%1903, 3, axis=1);
  %1905 = cast_like(0, meta[relay.Constant][141]);
  %1906 = less(meta[relay.Constant][141], %1905);
  %1907 = shape_of(%1873, dtype="int32");
  %1908 = cast_like(%1907, meta[relay.Constant][141]);
  %1909 = add(meta[relay.Constant][141], %1908);
  %1910 = where(%1906, %1909, meta[relay.Constant][141]);
  %1911 = shape_of(%1873, dtype="int32");
  %1912 = cast(%1911, dtype="int64");
  %1913 = dyn.strided_slice(%1873, %1910, %1912, meta[relay.Constant][142], begin=None, end=None, strides=None);
  %1914 = take(%1913, 1, axis=1);
  %1915 = subtract(%1904, %1914);
  %1916 = multiply(%1894, %1915);
  %1917 = (%1916,);
  %1918 = concatenate(%1917);
  %1919 = sqrt(%1918);
  %1920 = divide(%1919, 224f);
  %1921 = log2(%1920);
  %1922 = add(%1921, 4f);
  %1923 = add(%1922, 1e-06f);
  %1924 = floor(%1923);
  %1925 = clip(%1924, a_min=2f, a_max=5f);
  %1926 = cast(%1925, dtype="int64");
  %1927 = subtract(%1926, 2);
  %1928 = shape_of(%1927, dtype="int32");
  %1929 = take(%1928, 0, axis=0);
  %1930 = expand_dims(%1929, axis=0);
  %1931 = cast(%1930, dtype="int64");
  %1932 = expand_dims(256, axis=0);
  %1933 = cast(%1932, dtype="int64");
  %1934 = expand_dims(14, axis=0);
  %1935 = cast(%1934, dtype="int64");
  %1936 = expand_dims(14, axis=0);
  %1937 = cast(%1936, dtype="int64");
  %1938 = (%1931, %1933, %1935, %1937);
  %1939 = concatenate(%1938);
  %1940 = dyn.full(0, %1939, shape=None, dtype="float32");
  %1941 = reshape(%1940, newshape=[0, 256, 14, 14]);
  %1942 = equal(%1927, 0);
  %1943 = argwhere(%1942);
  %1944 = split(%1943, indices_or_sections=1, axis=1);
  %1945 = %1944.0;
  %1946 = squeeze(%1945, axis=[1]);
  %1947 = (%1946,);
  %1948 = %1947.0;
  %1949 = reshape(%1948, newshape=[-1, 1, 1, 1]);
  %1950 = repeat(%1949, repeats=256, axis=1);
  %1951 = repeat(%1950, repeats=14, axis=2);
  %1952 = repeat(%1951, repeats=14, axis=3);
  %1953 = cast_like(0, meta[relay.Constant][143]);
  %1954 = less(meta[relay.Constant][143], %1953);
  %1955 = shape_of(%1873, dtype="int32");
  %1956 = cast_like(%1955, meta[relay.Constant][143]);
  %1957 = add(meta[relay.Constant][143], %1956);
  %1958 = where(%1954, %1957, meta[relay.Constant][143]);
  %1959 = shape_of(%1873, dtype="int32");
  %1960 = cast(%1959, dtype="int64");
  %1961 = dyn.strided_slice(%1873, %1958, %1960, meta[relay.Constant][144], begin=None, end=None, strides=None);
  %1962 = cast_like(0, meta[relay.Constant][145]);
  %1963 = less(meta[relay.Constant][145], %1962);
  %1964 = shape_of(%1961, dtype="int32");
  %1965 = cast_like(%1964, meta[relay.Constant][145]);
  %1966 = add(meta[relay.Constant][145], %1965);
  %1967 = where(%1963, %1966, meta[relay.Constant][145]);
  %1968 = shape_of(%1961, dtype="int32");
  %1969 = expand_dims(1, axis=0);
  %1970 = expand_dims(1, axis=0);
  %1971 = scatter(%1968, %1969, %1970, meta[relay.attrs.ScatterAttrs][5]);
  %1972 = cast(%1971, dtype="int64");
  %1973 = dyn.strided_slice(%1961, %1967, %1972, meta[relay.Constant][146], begin=None, end=None, strides=None);
  %1974 = full_like(%1973, 0);
  %1975 = (%1974,);
  %1976 = concatenate(%1975);
  %1977 = (%1873,);
  %1978 = concatenate(%1977);
  %1979 = (%1976, %1978);
  %1980 = concatenate(%1979, axis=1);
  %1981 = equal(%1927, 0);
  %1982 = argwhere(%1981);
  %1983 = split(%1982, indices_or_sections=1, axis=1);
  %1984 = %1983.0;
  %1985 = squeeze(%1984, axis=[1]);
  %1986 = (%1985,);
  %1987 = %1986.0;
  %1988 = cast(%1987, dtype="int64");
  %1989 = (%1980, %1988);
  %1990 = adv_index(%1989);
  %1991 = vision.roi_align(%770, %1990, meta[relay.attrs.ROIAlignAttrs][4]);
  %1992 = scatter(%1941, %1952, %1991, meta[relay.attrs.ScatterAttrs][6]);
  %1993 = equal(%1927, 1);
  %1994 = argwhere(%1993);
  %1995 = split(%1994, indices_or_sections=1, axis=1);
  %1996 = %1995.0;
  %1997 = squeeze(%1996, axis=[1]);
  %1998 = (%1997,);
  %1999 = %1998.0;
  %2000 = reshape(%1999, newshape=[-1, 1, 1, 1]);
  %2001 = repeat(%2000, repeats=256, axis=1);
  %2002 = repeat(%2001, repeats=14, axis=2);
  %2003 = repeat(%2002, repeats=14, axis=3);
  %2004 = equal(%1927, 1);
  %2005 = argwhere(%2004);
  %2006 = split(%2005, indices_or_sections=1, axis=1);
  %2007 = %2006.0;
  %2008 = squeeze(%2007, axis=[1]);
  %2009 = (%2008,);
  %2010 = %2009.0;
  %2011 = cast(%2010, dtype="int64");
  %2012 = (%1980, %2011);
  %2013 = adv_index(%2012);
  %2014 = vision.roi_align(%776, %2013, meta[relay.attrs.ROIAlignAttrs][5]);
  %2015 = scatter(%1992, %2003, %2014, meta[relay.attrs.ScatterAttrs][7]);
  %2016 = equal(%1927, 2);
  %2017 = argwhere(%2016);
  %2018 = split(%2017, indices_or_sections=1, axis=1);
  %2019 = %2018.0;
  %2020 = squeeze(%2019, axis=[1]);
  %2021 = (%2020,);
  %2022 = %2021.0;
  %2023 = reshape(%2022, newshape=[-1, 1, 1, 1]);
  %2024 = repeat(%2023, repeats=256, axis=1);
  %2025 = repeat(%2024, repeats=14, axis=2);
  %2026 = repeat(%2025, repeats=14, axis=3);
  %2027 = equal(%1927, 2);
  %2028 = argwhere(%2027);
  %2029 = split(%2028, indices_or_sections=1, axis=1);
  %2030 = %2029.0;
  %2031 = squeeze(%2030, axis=[1]);
  %2032 = (%2031,);
  %2033 = %2032.0;
  %2034 = cast(%2033, dtype="int64");
  %2035 = (%1980, %2034);
  %2036 = adv_index(%2035);
  %2037 = vision.roi_align(%782, %2036, meta[relay.attrs.ROIAlignAttrs][6]);
  %2038 = scatter(%2015, %2026, %2037, meta[relay.attrs.ScatterAttrs][8]);
  %2039 = equal(%1927, 3);
  %2040 = argwhere(%2039);
  %2041 = split(%2040, indices_or_sections=1, axis=1);
  %2042 = %2041.0;
  %2043 = squeeze(%2042, axis=[1]);
  %2044 = (%2043,);
  %2045 = %2044.0;
  %2046 = reshape(%2045, newshape=[-1, 1, 1, 1]);
  %2047 = repeat(%2046, repeats=256, axis=1);
  %2048 = repeat(%2047, repeats=14, axis=2);
  %2049 = repeat(%2048, repeats=14, axis=3);
  %2050 = %769.10;
  %2051 = equal(%1927, 3);
  %2052 = argwhere(%2051);
  %2053 = split(%2052, indices_or_sections=1, axis=1);
  %2054 = %2053.0;
  %2055 = squeeze(%2054, axis=[1]);
  %2056 = (%2055,);
  %2057 = %2056.0;
  %2058 = cast(%2057, dtype="int64");
  %2059 = (%1980, %2058);
  %2060 = adv_index(%2059);
  %2061 = vision.roi_align(%2050, %2060, meta[relay.attrs.ROIAlignAttrs][7]);
  %2062 = scatter(%2038, %2049, %2061, meta[relay.attrs.ScatterAttrs][9]);
  %2063 = nn.conv2d(%2062, %model.roi_heads.mask_head.mask_fcn1.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2064 = nn.bias_add(%2063, %model.roi_heads.mask_head.mask_fcn1.bias);
  %2065 = nn.relu(%2064);
  %2066 = nn.conv2d(%2065, %model.roi_heads.mask_head.mask_fcn2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2067 = nn.bias_add(%2066, %model.roi_heads.mask_head.mask_fcn2.bias);
  %2068 = nn.relu(%2067);
  %2069 = nn.conv2d(%2068, %model.roi_heads.mask_head.mask_fcn3.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2070 = nn.bias_add(%2069, %model.roi_heads.mask_head.mask_fcn3.bias);
  %2071 = nn.relu(%2070);
  %2072 = nn.conv2d(%2071, %model.roi_heads.mask_head.mask_fcn4.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2073 = nn.bias_add(%2072, %model.roi_heads.mask_head.mask_fcn4.bias);
  %2074 = nn.relu(%2073);
  %2075 = nn.conv2d_transpose(%2074, %model.roi_heads.mask_predictor.conv5_mask.weight, channels=256, kernel_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]);
  %2076 = nn.bias_add(%2075, %model.roi_heads.mask_predictor.conv5_mask.bias);
  %2077 = nn.relu(%2076);
  %2078 = nn.conv2d(%2077, %model.roi_heads.mask_predictor.mask_fcn_logits.weight, padding=[0, 0, 0, 0], channels=91, kernel_size=[1, 1]);
  %2079 = nn.bias_add(%2078, %model.roi_heads.mask_predictor.mask_fcn_logits.bias);
  %2080 = sigmoid(%2079);
  %2081 = shape_of(%2079, dtype="int32");
  %2082 = take(%2081, 0, axis=0);
  %2083 = cast(%2082, dtype="int64");
  %2084 = arange(0, %2083, 1, start=meta[relay.Constant][147], stop=meta[relay.Call][2], step=meta[relay.Constant][148], dtype="int64");
  %2085 = (%1835, %1871);
  %2086 = adv_index(%2085);
  %2087 = (%2086,);
  %2088 = concatenate(%2087);
  %2089 = (%2080, %2084, %2088);
  %2090 = adv_index(%2089);
  %2091 = cast_like(0, meta[relay.Constant][149]);
  %2092 = less(meta[relay.Constant][149], %2091);
  %2093 = shape_of(%2090, dtype="int32");
  %2094 = cast_like(%2093, meta[relay.Constant][149]);
  %2095 = add(meta[relay.Constant][149], %2094);
  %2096 = where(%2092, %2095, meta[relay.Constant][149]);
  %2097 = shape_of(%2090, dtype="int32");
  %2098 = cast(%2097, dtype="int64");
  %2099 = dyn.strided_slice(%2090, %2096, %2098, meta[relay.Constant][150], begin=None, end=None, strides=None);
  %2100 = expand_dims(%2099, axis=1);
  %2101 = (%2100,);
  %2102 = %2101.0;
  %2103 = (%1804, %1871);
  %2104 = adv_index(%2103);
  %2105 = (%1873, %2102, %2104, %2086);
  %2106 = %2105.0;
  %2107 = split(%2106, indices_or_sections=4, axis=1);
  %2108 = %2107.0;
  %2109 = squeeze(%2108, axis=[1]);
  %2110 = %2107.1;
  %2111 = squeeze(%2110, axis=[1]);
  %2112 = %2107.2;
  %2113 = squeeze(%2112, axis=[1]);
  %2114 = %2107.3;
  %2115 = squeeze(%2114, axis=[1]);
  %2116 = (%2109, %2111, %2113, %2115);
  %2117 = %2116.0;
  %2118 = cast(300, dtype="float32");
  %2119 = cast(%1087, dtype="float32");
  %2120 = divide(%2118, %2119);
  %2121 = multiply(%2117, %2120);
  %2122 = %2116.1;
  %2123 = cast(300, dtype="float32");
  %2124 = cast(%1092, dtype="float32");
  %2125 = divide(%2123, %2124);
  %2126 = multiply(%2122, %2125);
  %2127 = %2116.2;
  %2128 = multiply(%2127, %2120);
  %2129 = %2116.3;
  %2130 = multiply(%2129, %2125);
  %2131 = (%2121, %2126, %2128, %2130);
  %2132 = stack(%2131, axis=1);
  %2133 = %2105.2;
  %2134 = %2105.3;
  %2135 = Nil;
  %2136 = cast_like(0, meta[relay.Constant][151]);
  %2137 = less(meta[relay.Constant][151], %2136);
  %2138 = shape_of(%2132, dtype="int32");
  %2139 = cast_like(%2138, meta[relay.Constant][151]);
  %2140 = add(meta[relay.Constant][151], %2139);
  %2141 = where(%2137, %2140, meta[relay.Constant][151]);
  %2142 = shape_of(%2132, dtype="int32");
  %2143 = cast(%2142, dtype="int64");
  %2144 = dyn.strided_slice(%2132, %2141, %2143, meta[relay.Constant][152], begin=None, end=None, strides=None);
  %2145 = take(%2144, 2, axis=1);
  %2146 = cast_like(0, meta[relay.Constant][153]);
  %2147 = less(meta[relay.Constant][153], %2146);
  %2148 = shape_of(%2132, dtype="int32");
  %2149 = cast_like(%2148, meta[relay.Constant][153]);
  %2150 = add(meta[relay.Constant][153], %2149);
  %2151 = where(%2147, %2150, meta[relay.Constant][153]);
  %2152 = shape_of(%2132, dtype="int32");
  %2153 = cast(%2152, dtype="int64");
  %2154 = dyn.strided_slice(%2132, %2151, %2153, meta[relay.Constant][154], begin=None, end=None, strides=None);
  %2155 = take(%2154, 0, axis=1);
  %2156 = add(%2145, %2155);
  %2157 = multiply(%2156, 0.5f);
  %2158 = cast_like(0, meta[relay.Constant][155]);
  %2159 = less(meta[relay.Constant][155], %2158);
  %2160 = shape_of(%2132, dtype="int32");
  %2161 = cast_like(%2160, meta[relay.Constant][155]);
  %2162 = add(meta[relay.Constant][155], %2161);
  %2163 = where(%2159, %2162, meta[relay.Constant][155]);
  %2164 = shape_of(%2132, dtype="int32");
  %2165 = cast(%2164, dtype="int64");
  %2166 = dyn.strided_slice(%2132, %2163, %2165, meta[relay.Constant][156], begin=None, end=None, strides=None);
  %2167 = take(%2166, 2, axis=1);
  %2168 = cast_like(0, meta[relay.Constant][157]);
  %2169 = less(meta[relay.Constant][157], %2168);
  %2170 = shape_of(%2132, dtype="int32");
  %2171 = cast_like(%2170, meta[relay.Constant][157]);
  %2172 = add(meta[relay.Constant][157], %2171);
  %2173 = where(%2169, %2172, meta[relay.Constant][157]);
  %2174 = shape_of(%2132, dtype="int32");
  %2175 = cast(%2174, dtype="int64");
  %2176 = dyn.strided_slice(%2132, %2173, %2175, meta[relay.Constant][158], begin=None, end=None, strides=None);
  %2177 = take(%2176, 0, axis=1);
  %2178 = subtract(%2167, %2177);
  %2179 = multiply(%2178, 0.5f);
  %2180 = %2105.1;
  %2181 = shape_of(%2180, dtype="int32");
  %2182 = take(%2181, 3, axis=0);
  %2183 = add(%2182, 2);
  %2184 = cast(%2183, dtype="int64");
  %2185 = cast(%2184, dtype="float32");
  %2186 = cast(%2182, dtype="int64");
  %2187 = cast(%2186, dtype="float32");
  %2188 = divide(%2185, %2187);
  %2189 = multiply(%2179, %2188);
  %2190 = subtract(%2157, %2189);
  %2191 = cast_like(0, meta[relay.Constant][159]);
  %2192 = less(meta[relay.Constant][159], %2191);
  %2193 = shape_of(%2132, dtype="int32");
  %2194 = cast_like(%2193, meta[relay.Constant][159]);
  %2195 = add(meta[relay.Constant][159], %2194);
  %2196 = where(%2192, %2195, meta[relay.Constant][159]);
  %2197 = shape_of(%2132, dtype="int32");
  %2198 = cast(%2197, dtype="int64");
  %2199 = dyn.strided_slice(%2132, %2196, %2198, meta[relay.Constant][160], begin=None, end=None, strides=None);
  %2200 = take(%2199, 3, axis=1);
  %2201 = cast_like(0, meta[relay.Constant][161]);
  %2202 = less(meta[relay.Constant][161], %2201);
  %2203 = shape_of(%2132, dtype="int32");
  %2204 = cast_like(%2203, meta[relay.Constant][161]);
  %2205 = add(meta[relay.Constant][161], %2204);
  %2206 = where(%2202, %2205, meta[relay.Constant][161]);
  %2207 = shape_of(%2132, dtype="int32");
  %2208 = cast(%2207, dtype="int64");
  %2209 = dyn.strided_slice(%2132, %2206, %2208, meta[relay.Constant][162], begin=None, end=None, strides=None);
  %2210 = take(%2209, 1, axis=1);
  %2211 = add(%2200, %2210);
  %2212 = multiply(%2211, 0.5f);
  %2213 = cast_like(0, meta[relay.Constant][163]);
  %2214 = less(meta[relay.Constant][163], %2213);
  %2215 = shape_of(%2132, dtype="int32");
  %2216 = cast_like(%2215, meta[relay.Constant][163]);
  %2217 = add(meta[relay.Constant][163], %2216);
  %2218 = where(%2214, %2217, meta[relay.Constant][163]);
  %2219 = shape_of(%2132, dtype="int32");
  %2220 = cast(%2219, dtype="int64");
  %2221 = dyn.strided_slice(%2132, %2218, %2220, meta[relay.Constant][164], begin=None, end=None, strides=None);
  %2222 = take(%2221, 3, axis=1);
  %2223 = cast_like(0, meta[relay.Constant][165]);
  %2224 = less(meta[relay.Constant][165], %2223);
  %2225 = shape_of(%2132, dtype="int32");
  %2226 = cast_like(%2225, meta[relay.Constant][165]);
  %2227 = add(meta[relay.Constant][165], %2226);
  %2228 = where(%2224, %2227, meta[relay.Constant][165]);
  %2229 = shape_of(%2132, dtype="int32");
  %2230 = cast(%2229, dtype="int64");
  %2231 = dyn.strided_slice(%2132, %2228, %2230, meta[relay.Constant][166], begin=None, end=None, strides=None);
  %2232 = take(%2231, 1, axis=1);
  %2233 = subtract(%2222, %2232);
  %2234 = multiply(%2233, 0.5f);
  %2235 = multiply(%2234, %2188);
  %2236 = subtract(%2212, %2235);
  %2237 = add(%2157, %2189);
  %2238 = add(%2212, %2235);
  %2239 = (%2190, %2236, %2237, %2238);
  %2240 = stack(%2239, axis=1);
  %2241 = cast(%2240, dtype="int64");
  %2242 = nn.pad(%2180, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);

  %2433 = (
    let %while_loop = fn (%i.1: int32, %res.6: List[meta[IncompleteType][0]], %v7394: Tensor[(?, 4), int64], %v7286: Tensor[(?, 1, ?, ?), float32]) {
      %2243 = shape_of(%2242, dtype="int32");
      %2244 = take(%2243, 0, axis=0);
      %2245 = less(%i.1, %2244);
      if (%2245) {
        %2246 = add(%i.1, 1);
        %2247 = take(%v7394, %i.1, axis=0);
        %2248 = take(%2247, 1, axis=0);
        %2249 = expand_dims(%2248, axis=0);
        %2250 = full(0, shape=[1], dtype="int64");
        %2251 = (%2249, %2250);
        %2252 = concatenate(%2251);
        %2253 = max(%2252);
        %2254 = expand_dims(%2253, axis=0);
        %2255 = cast(%2254, dtype="int64");
        %2256 = take(%v7286, %i.1, axis=0);
        %2257 = take(%2256, 0, axis=0);
        %2258 = expand_dims(%2257, axis=0, num_newaxis=2);
        %2259 = repeat(%2258, repeats=1, axis=0);
        %2260 = repeat(%2259, repeats=1, axis=1);
        %2261 = take(%2247, 3, axis=0);
        %2262 = take(%2247, 1, axis=0);
        %2263 = subtract(%2261, %2262);
        %2264 = full(1, shape=[1], dtype="int64");
        %2265 = add(%2263, %2264);
        %2266 = (%2265, %2264);
        %2267 = concatenate(%2266);
        %2268 = max(%2267);
        %2269 = expand_dims(%2268, axis=0);
        %2270 = take(%2247, 2, axis=0);
        %2271 = take(%2247, 0, axis=0);
        %2272 = subtract(%2270, %2271);
        %2273 = add(%2272, %2264);
        %2274 = (%2273, %2264);
        %2275 = concatenate(%2274);
        %2276 = max(%2275);
        %2277 = expand_dims(%2276, axis=0);
        %2278 = (%2269, %2277);
        %2279 = concatenate(%2278);
        %2280 = dyn.image.resize(%2260, %2279, size=[]);
        %2281 = take(%2280, 0, axis=0);
        %2282 = take(%2281, 0, axis=0);
        %2283 = take(%2247, 1, axis=0);
        %2284 = subtract(%2253, %2283);
        %2285 = expand_dims(%2284, axis=0);
        %2286 = cast(%2285, dtype="int64");
        %2287 = expand_dims(0, axis=0);
        %2288 = (%2286, %2287);
        %2289 = concatenate(%2288);
        %2290 = cast_like(0, %2289);
        %2291 = less(%2289, %2290);
        %2292 = shape_of(%2282, dtype="int32");
        %2293 = cast_like(%2292, %2289);
        %2294 = add(%2289, %2293);
        %2295 = where(%2291, %2294, %2289);
        %2296 = shape_of(%2282, dtype="int32");
        %2297 = cast(%2296, dtype="int64");
        %2298 = expand_dims(0, axis=0);
        %2299 = take(%2247, 3, axis=0);
        %2300 = expand_dims(%2299, axis=0);
        %2301 = add(%2300, %2264);
        %2302 = expand_dims(300, axis=0);
        %2303 = (%2301, %2302);
        %2304 = concatenate(%2303);
        %2305 = min(%2304);
        %2306 = take(%2247, 1, axis=0);
        %2307 = subtract(%2305, %2306);
        %2308 = expand_dims(%2307, axis=0);
        %2309 = scatter(%2297, %2298, %2308, meta[relay.attrs.ScatterAttrs][10]);
        %2310 = dyn.strided_slice(%2282, %2295, %2309, meta[relay.Constant][167], begin=None, end=None, strides=None);
        %2311 = expand_dims(0, axis=0);
        %2312 = take(%2247, 0, axis=0);
        %2313 = expand_dims(%2312, axis=0);
        %2314 = (%2313, %2250);
        %2315 = concatenate(%2314);
        %2316 = max(%2315);
        %2317 = take(%2247, 0, axis=0);
        %2318 = subtract(%2316, %2317);
        %2319 = expand_dims(%2318, axis=0);
        %2320 = cast(%2319, dtype="int64");
        %2321 = (%2311, %2320);
        %2322 = concatenate(%2321);
        %2323 = cast_like(0, %2322);
        %2324 = less(%2322, %2323);
        %2325 = shape_of(%2310, dtype="int32");
        %2326 = cast_like(%2325, %2322);
        %2327 = add(%2322, %2326);
        %2328 = where(%2324, %2327, %2322);
        %2329 = shape_of(%2310, dtype="int32");
        %2330 = cast(%2329, dtype="int64");
        %2331 = expand_dims(1, axis=0);
        %2332 = take(%2247, 2, axis=0);
        %2333 = expand_dims(%2332, axis=0);
        %2334 = add(%2333, %2264);
        %2335 = expand_dims(300, axis=0);
        %2336 = (%2334, %2335);
        %2337 = concatenate(%2336);
        %2338 = min(%2337);
        %2339 = take(%2247, 0, axis=0);
        %2340 = subtract(%2338, %2339);
        %2341 = expand_dims(%2340, axis=0);
        %2342 = scatter(%2330, %2331, %2341, meta[relay.attrs.ScatterAttrs][11]);
        %2343 = dyn.strided_slice(%2310, %2328, %2342, meta[relay.Constant][168], begin=None, end=None, strides=None);
        %2344 = shape_of(%2343, dtype="int32");
        %2345 = take(%2344, 1, axis=0);
        %2346 = expand_dims(%2345, axis=0);
        %2347 = cast(%2346, dtype="int64");
        %2348 = (%2255, %2347);
        %2349 = concatenate(%2348);
        %2350 = dyn.full(0, %2349, shape=None, dtype="float32");
        %2351 = reshape(%2350, newshape=[0, 0]);
        %2352 = subtract(300, %2305);
        %2353 = expand_dims(%2352, axis=0);
        %2354 = cast(%2353, dtype="int64");
        %2355 = shape_of(%2343, dtype="int32");
        %2356 = take(%2355, 1, axis=0);
        %2357 = expand_dims(%2356, axis=0);
        %2358 = cast(%2357, dtype="int64");
        %2359 = (%2354, %2358);
        %2360 = concatenate(%2359);
        %2361 = dyn.full(0, %2360, shape=None, dtype="float32");
        %2362 = reshape(%2361, newshape=[0, 0]);
        %2363 = (%2351, %2343, %2362);
        %2364 = concatenate(%2363);
        %2365 = cast_like(0, meta[relay.Constant][169]);
        %2366 = less(meta[relay.Constant][169], %2365);
        %2367 = shape_of(%2364, dtype="int32");
        %2368 = cast_like(%2367, meta[relay.Constant][169]);
        %2369 = add(meta[relay.Constant][169], %2368);
        %2370 = where(%2366, %2369, meta[relay.Constant][169]);
        %2371 = shape_of(%2364, dtype="int32");
        %2372 = expand_dims(0, axis=0);
        %2373 = expand_dims(300, axis=0);
        %2374 = scatter(%2371, %2372, %2373, meta[relay.attrs.ScatterAttrs][12]);
        %2375 = cast(%2374, dtype="int64");
        %2376 = dyn.strided_slice(%2364, %2370, %2375, meta[relay.Constant][170], begin=None, end=None, strides=None);
        %2377 = cast_like(0, meta[relay.Constant][171]);
        %2378 = less(meta[relay.Constant][171], %2377);
        %2379 = shape_of(%2376, dtype="int32");
        %2380 = cast_like(%2379, meta[relay.Constant][171]);
        %2381 = add(meta[relay.Constant][171], %2380);
        %2382 = where(%2378, %2381, meta[relay.Constant][171]);
        %2383 = shape_of(%2376, dtype="int32");
        %2384 = cast(%2383, dtype="int64");
        %2385 = dyn.strided_slice(%2376, %2382, %2384, meta[relay.Constant][172], begin=None, end=None, strides=None);
        %2386 = shape_of(%2385, dtype="int32");
        %2387 = take(%2386, 0, axis=0);
        %2388 = expand_dims(%2387, axis=0);
        %2389 = cast(%2388, dtype="int64");
        %2390 = expand_dims(%2316, axis=0);
        %2391 = cast(%2390, dtype="int64");
        %2392 = (%2389, %2391);
        %2393 = concatenate(%2392);
        %2394 = dyn.full(0, %2393, shape=None, dtype="float32");
        %2395 = reshape(%2394, newshape=[0, 0]);
        %2396 = shape_of(%2385, dtype="int32");
        %2397 = take(%2396, 0, axis=0);
        %2398 = expand_dims(%2397, axis=0);
        %2399 = cast(%2398, dtype="int64");
        %2400 = subtract(300, %2338);
        %2401 = expand_dims(%2400, axis=0);
        %2402 = cast(%2401, dtype="int64");
        %2403 = (%2399, %2402);
        %2404 = concatenate(%2403);
        %2405 = dyn.full(0, %2404, shape=None, dtype="float32");
        %2406 = reshape(%2405, newshape=[0, 0]);
        %2407 = (%2395, %2385, %2406);
        %2408 = concatenate(%2407, axis=1);
        %2409 = cast_like(0, meta[relay.Constant][173]);
        %2410 = less(meta[relay.Constant][173], %2409);
        %2411 = shape_of(%2408, dtype="int32");
        %2412 = cast_like(%2411, meta[relay.Constant][173]);
        %2413 = add(meta[relay.Constant][173], %2412);
        %2414 = where(%2410, %2413, meta[relay.Constant][173]);
        %2415 = shape_of(%2408, dtype="int32");
        %2416 = cast(%2415, dtype="int64");
        %2417 = dyn.strided_slice(%2408, %2414, %2416, meta[relay.Constant][174], begin=None, end=None, strides=None);
        %2418 = cast_like(0, meta[relay.Constant][175]);
        %2419 = less(meta[relay.Constant][175], %2418);
        %2420 = shape_of(%2417, dtype="int32");
        %2421 = cast_like(%2420, meta[relay.Constant][175]);
        %2422 = add(meta[relay.Constant][175], %2421);
        %2423 = where(%2419, %2422, meta[relay.Constant][175]);
        %2424 = shape_of(%2417, dtype="int32");
        %2425 = expand_dims(1, axis=0);
        %2426 = expand_dims(300, axis=0);
        %2427 = scatter(%2424, %2425, %2426, meta[relay.attrs.ScatterAttrs][13]);
        %2428 = cast(%2427, dtype="int64");
        %2429 = dyn.strided_slice(%2417, %2423, %2428, meta[relay.Constant][176], begin=None, end=None, strides=None);
        %2430 = Nil;
        %2431 = Cons(%2429, %2430);
        %2432 = @concat(%res.6, %2431);
        %while_loop(%2246, %2432, %v7394, %v7286)
      } else {
        (%i.1, %res.6, %v7394, %v7286)
      }
    };
    %while_loop
  );
  %2434 = %2433(0, %2135, %2241, %2242);
  %2435 = %2434.1;
  %2436 = @map(tensor_constructor_float32_any_any(Tensor[(?, ?), float32]), %2435);
  %2437 = @tensor_array_stack_float32_any_any(%2436);
  %2438 = @tensor_get_data_float32_any_any_any(%2437);

  %2439 = cast_like(0, meta[relay.Constant][177]);
  %2440 = less(meta[relay.Constant][177], %2439);
  %2441 = shape_of(%2438, dtype="int32");
  %2442 = cast_like(%2441, meta[relay.Constant][177]);
  %2443 = add(meta[relay.Constant][177], %2442);
  %2444 = where(%2440, %2443, meta[relay.Constant][177]);
  %2445 = shape_of(%2438, dtype="int32");
  %2446 = cast(%2445, dtype="int64");
  %2447 = dyn.strided_slice(%2438, %2444, %2446, meta[relay.Constant][178], begin=None, end=None, strides=None);
  %2448 = expand_dims(%2447, axis=1);
  %2449 = (%2132, %2133, %2134, %2448);
  %2450 = %2449.0;
  %2451 = %2449.1;
  %2452 = %2449.2;
  %2453 = %2449.3;
  (%2450, %2451, %2452, %2453)
}

def @map[A, B](%f1: fn (A) -> B, %xs3: List[A]) -> List[B] {
  match (%xs3) {
    Cons(%x2: A, %rest2: List[A]) => {
      %2454 = %f1(%x2) /* /home/masa/projects/dev/tvm/python/tvm/relay/std/prelude.rly */ /* ty=B */;
      %2455 = @map(%f1, %rest2) /* /home/masa/projects/dev/tvm/python/tvm/relay/std/prelude.rly */ /* ty=List[B] */;
      Cons(%2454, %2455) /* /home/masa/projects/dev/tvm/python/tvm/relay/std/prelude.rly */ /* ty=List[B] */
    },
    Nil => {
      Nil /* ty=List[B] */
    },
  }
}

def @foldr[A, B](%f2: fn (A, B) -> B, %acc1: B, %xs4: List[A]) -> B {
  match (%xs4) {
    Cons(%x3: A, %rest3: List[A]) => {
      %2456 = @foldr(%f2, %acc1, %rest3) /* /home/masa/projects/dev/tvm/python/tvm/relay/std/prelude.rly */ /* ty=B */;
      %f2(%x3, %2456) /* /home/masa/projects/dev/tvm/python/tvm/relay/std/prelude.rly */ /* ty=B */
    },
    Nil => {
      %acc1
    },
  }
}

def @hd[A](%xs5: List[A]) -> A {
  match? (%xs5) {
    Cons(%x4: A, _) => {
      %x4
    },
  }
}

def @tensor_get_data_float32_any_any_any(%tensor: static_tensor_float32_any_any_any_t[]) -> Tensor[(?, ?, ?), float32] {
  match? (%tensor) {
    tensor_constructor_float32_any_any_any(%t) => {
      %t
    },
  }
}

def @tensor_expand_dims_float32_any_any(%x5: static_tensor_float32_any_any_t[]) -> static_tensor_float32_any_any_any_t[] {
  match? (%x5) {
    tensor_constructor_float32_any_any(%t3) => {
      %2457 = expand_dims(%t3, axis=0);
      tensor_constructor_float32_any_any_any(%2457)
    },
  }
}
