#[version = "0.0.5"]
fn [A](%eta_expand_param: A, %eta_expand_param1: List[A]) -> List[A] {
  let %x: List[A] = Cons(%eta_expand_param, %eta_expand_param1) /* ty=List[A] */;
  %x
}
#[version = "0.0.5"]
fn (%eta_expand_param: Tensor[(?, ?), float32]) -> static_tensor_float32_any_any_t[] {
  let %x: static_tensor_float32_any_any_t[] = tensor_constructor_float32_any_any(%eta_expand_param) /* ty=static_tensor_float32_any_any_t[] */;
  %x
}
#[version = "0.0.5"]
fn (%x: Tensor[(?, 1, ?, ?), float32], %x1: Tensor[(1), int32], Closure=1) -> fn (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) {
  fn (%i.1: int32, %res.6: List[Tensor[(?, ?), float32]], %v7286: Tensor[(?, 1, ?, ?), float32], %v7394: Tensor[(?, 4), int64]) -> (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) {
    let %x2: fn (Tensor[(?, 1, ?, ?), float32]) -> Tensor[(4), int32] = fn (%p0: Tensor[(?, 1, ?, ?), float32], Primitive=1) -> Tensor[(4), int32] {
      shape_of(%p0, dtype="int32") /* ty=Tensor[(4), int32] */
    };
    let %x3: Tensor[(4), int32] = %x2(%x);
    let %x4: fn (int32, Tensor[(4), int32]) -> bool = fn (%p01: int32, %p1: Tensor[(4), int32], Primitive=1) -> bool {
      %0 = take(%p1, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
      less(%p01, %0) /* ty=bool */
    };
    let %x5: bool = %x4(%i.1, %x3) /* ty=bool */;
    let %x6: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = if (%x5) {
      let %x7: fn (int32) -> int32 = fn (%p02: int32, Primitive=1) -> int32 {
        add(%p02, 1 /* ty=int32 */) /* ty=int32 */
      };
      let %x8: int32 = %x7(%i.1) /* ty=int32 */;
      let %x9: int32 = 0 /* ty=int32 */;
      let %x10: int32 = 0 /* ty=int32 */;
      let %x11: fn (Tensor[(?, 4), int64], int32) -> Tensor[(4), int64] = fn (%p03: Tensor[(?, 4), int64], %p11: int32, Primitive=1) -> Tensor[(4), int64] {
        take(%p03, %p11, axis=0) /* ty=Tensor[(4), int64] */
      };
      let %x12: Tensor[(4), int64] = %x11(%v7394, %i.1) /* ty=Tensor[(4), int64] */;
      let %x13: fn (Tensor[(4), int64]) -> int64 = fn (%p04: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p04, 1 /* ty=int32 */, axis=0) /* ty=int64 */
      };
      let %x14: int64 = %x13(%x12) /* ty=int64 */;
      let %x15: fn () -> Tensor[(1), int64] = fn (Primitive=1) -> Tensor[(1), int64] {
        full(0 /* ty=int32 */, shape=[1], dtype="int64") /* ty=Tensor[(1), int64] */
      };
      let %x16: Tensor[(1), int64] = %x15() /* ty=Tensor[(1), int64] */;
      let %x17: fn (int64, Tensor[(1), int64]) -> Tensor[(2), int64] = fn (%p05: int64, %p12: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %1 = expand_dims(%p05, axis=0) /* ty=Tensor[(1), int64] */;
        %2 = (%1, %p12);
        concatenate(%2) /* ty=Tensor[(2), int64] */
      };
      let %x18: Tensor[(2), int64] = %x17(%x14, %x16) /* ty=Tensor[(2), int64] */;
      let %x19: fn (Tensor[(2), int64]) -> int64 = fn (%p06: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p06) /* ty=int64 */
      };
      let %x20: int64 = %x19(%x18) /* ty=int64 */;
      let %x21: fn (Tensor[(?, 1, ?, ?), float32], int32) -> Tensor[(1, ?, ?), float32] = fn (%p07: Tensor[(?, 1, ?, ?), float32], %p13: int32, Primitive=1) -> Tensor[(1, ?, ?), float32] {
        take(%p07, %p13, axis=0) /* ty=Tensor[(1, ?, ?), float32] */
      };
      let %x22: Tensor[(1, ?, ?), float32] = %x21(%v7286, %i.1) /* ty=Tensor[(1, ?, ?), float32] */;
      let %x23: fn (Tensor[(1, ?, ?), float32]) -> Tensor[(1, 1, ?, ?), float32] = fn (%p08: Tensor[(1, ?, ?), float32], Primitive=1) -> Tensor[(1, 1, ?, ?), float32] {
        %3 = take(%p08, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(?, ?), float32] */;
        %4 = expand_dims(%3, axis=0, num_newaxis=2) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        %5 = repeat(%4, repeats=1, axis=0) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        repeat(%5, repeats=1, axis=1) /* ty=Tensor[(1, 1, ?, ?), float32] */
      };
      let %x24: Tensor[(1, 1, ?, ?), float32] = %x23(%x22) /* ty=Tensor[(1, 1, ?, ?), float32] */;
      let %x25: fn (Tensor[(4), int64]) -> int64 = fn (%p09: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p09, 3 /* ty=int32 */, axis=0) /* ty=int64 */
      };
      let %x26: int64 = %x25(%x12) /* ty=int64 */;
      let %x27: fn () -> Tensor[(1), int64] = fn (Primitive=1) -> Tensor[(1), int64] {
        full(1 /* ty=int32 */, shape=[1], dtype="int64") /* ty=Tensor[(1), int64] */
      };
      let %x28: Tensor[(1), int64] = %x27() /* ty=Tensor[(1), int64] */;
      let %x29: fn (int64, int64, Tensor[(1), int64]) -> Tensor[(2), int64] = fn (%p010: int64, %p14: int64, %p2: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %6 = subtract(%p010, %p14) /* ty=int64 */;
        %7 = add(%6, %p2) /* ty=Tensor[(1), int64] */;
        %8 = (%7, %p2);
        concatenate(%8) /* ty=Tensor[(2), int64] */
      };
      let %x30: Tensor[(2), int64] = %x29(%x26, %x14, %x28) /* ty=Tensor[(2), int64] */;
      let %x31: fn (Tensor[(2), int64]) -> int64 = fn (%p011: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p011) /* ty=int64 */
      };
      let %x32: int64 = %x31(%x30) /* ty=int64 */;
      let %x33: fn (Tensor[(4), int64]) -> int64 = fn (%p012: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p012, 2 /* ty=int32 */, axis=0) /* ty=int64 */
      };
      let %x34: int64 = %x33(%x12) /* ty=int64 */;
      let %x35: fn (Tensor[(4), int64]) -> int64 = fn (%p013: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p013, 0 /* ty=int32 */, axis=0) /* ty=int64 */
      };
      let %x36: int64 = %x35(%x12) /* ty=int64 */;
      let %x37: fn (int64, int64, Tensor[(1), int64]) -> Tensor[(2), int64] = fn (%p014: int64, %p15: int64, %p21: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %9 = subtract(%p014, %p15) /* ty=int64 */;
        %10 = add(%9, %p21) /* ty=Tensor[(1), int64] */;
        %11 = (%10, %p21);
        concatenate(%11) /* ty=Tensor[(2), int64] */
      };
      let %x38: Tensor[(2), int64] = %x37(%x34, %x36, %x28) /* ty=Tensor[(2), int64] */;
      let %x39: fn (Tensor[(2), int64]) -> int64 = fn (%p015: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p015) /* ty=int64 */
      };
      let %x40: int64 = %x39(%x38) /* ty=int64 */;
      let %x41: fn (int64, int64) -> Tensor[(2), int64] = fn (%p016: int64, %p16: int64, Primitive=1) -> Tensor[(2), int64] {
        %12 = expand_dims(%p016, axis=0) /* ty=Tensor[(1), int64] */;
        %13 = expand_dims(%p16, axis=0) /* ty=Tensor[(1), int64] */;
        %14 = (%12, %13);
        concatenate(%14) /* ty=Tensor[(2), int64] */
      };
      let %x42: Tensor[(2), int64] = %x41(%x32, %x40) /* ty=Tensor[(2), int64] */;
      let %x43: fn (Tensor[(1, 1, ?, ?), float32], Tensor[(2), int64]) -> Tensor[(1, 1, ?, ?), float32] = fn (%p017: Tensor[(1, 1, ?, ?), float32], %p17: Tensor[(2), int64], Primitive=1) -> Tensor[(1, 1, ?, ?), float32] {
        dyn.image.resize(%p017, %p17, size=[]) /* ty=Tensor[(1, 1, ?, ?), float32] */
      };
      let %x44: Tensor[(1, 1, ?, ?), float32] = %x43(%x24, %x42) /* ty=Tensor[(1, 1, ?, ?), float32] */;
      let %x45: fn (Tensor[(1, 1, ?, ?), float32]) -> Tensor[(1, ?, ?), float32] = fn (%p018: Tensor[(1, 1, ?, ?), float32], Primitive=1) -> Tensor[(1, ?, ?), float32] {
        take(%p018, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, ?, ?), float32] */
      };
      let %x46: Tensor[(1, ?, ?), float32] = %x45(%x44) /* ty=Tensor[(1, ?, ?), float32] */;
      let %x47: fn (Tensor[(1, ?, ?), float32]) -> Tensor[(?, ?), float32] = fn (%p019: Tensor[(1, ?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
        take(%p019, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(?, ?), float32] */
      };
      let %x48: Tensor[(?, ?), float32] = %x47(%x46) /* ty=Tensor[(?, ?), float32] */;
      let %x49: Tensor[(1), int64] = meta[relay.Constant][0] /* ty=Tensor[(1), int64] */;
      let %x50: fn (Tensor[(?, ?), float32]) -> Tensor[(2), int32] = fn (%p020: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p020, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      let %x51: Tensor[(2), int32] = %x50(%x48) /* ty=Tensor[(2), int32] */;
      let %x52: fn (int64, int64, Tensor[(1), int64], Tensor[(2), int32]) -> Tensor[(2), int64] = fn (%p021: int64, %p18: int64, %p22: Tensor[(1), int64], %p3: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        %15 = subtract(%p021, %p18) /* ty=int64 */;
        %16 = expand_dims(%15, axis=0) /* ty=Tensor[(1), int64] */;
        %17 = cast(%16, dtype="int64") /* ty=Tensor[(1), int64] */;
        %18 = (%17, %p22);
        %19 = concatenate(%18) /* ty=Tensor[(2), int64] */;
        %20 = cast_like(0 /* ty=int32 */, %19) /* ty=int64 */;
        %21 = less(%19, %20) /* ty=Tensor[(2), bool] */;
        %22 = cast_like(%p3, %19) /* ty=Tensor[(2), int64] */;
        %23 = add(%19, %22) /* ty=Tensor[(2), int64] */;
        where(%21, %23, %19) /* ty=Tensor[(2), int64] */
      };
      let %x53: Tensor[(2), int64] = %x52(%x20, %x14, %x49, %x51) /* ty=Tensor[(2), int64] */;
      let %x54: fn (Tensor[(2), int32]) -> Tensor[(2), int64] = fn (%p022: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p022, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      let %x55: Tensor[(2), int64] = %x54(%x51) /* ty=Tensor[(2), int64] */;
      let %x56: Tensor[(1), int32] = meta[relay.Constant][1] /* ty=Tensor[(1), int32] */;
      let %x57: Tensor[(1), int64] = meta[relay.Constant][2] /* ty=Tensor[(1), int64] */;
      let %x58: fn (int64, Tensor[(1), int64], Tensor[(1), int64]) -> Tensor[(2), int64] = fn (%p023: int64, %p19: Tensor[(1), int64], %p23: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %24 = expand_dims(%p023, axis=0) /* ty=Tensor[(1), int64] */;
        %25 = add(%24, %p19) /* ty=Tensor[(1), int64] */;
        %26 = (%25, %p23);
        concatenate(%26) /* ty=Tensor[(2), int64] */
      };
      let %x59: Tensor[(2), int64] = %x58(%x26, %x28, %x57) /* ty=Tensor[(2), int64] */;
      let %x60: fn (Tensor[(2), int64]) -> int64 = fn (%p024: Tensor[(2), int64], Primitive=1) -> int64 {
        min(%p024) /* ty=int64 */
      };
      let %x61: int64 = %x60(%x59) /* ty=int64 */;
      let %x62: fn (int64, int64) -> Tensor[(1), int64] = fn (%p025: int64, %p110: int64, Primitive=1) -> Tensor[(1), int64] {
        %27 = subtract(%p025, %p110) /* ty=int64 */;
        expand_dims(%27, axis=0) /* ty=Tensor[(1), int64] */
      };
      let %x63: Tensor[(1), int64] = %x62(%x61, %x14) /* ty=Tensor[(1), int64] */;
      let %x64: fn (Tensor[(2), int64], Tensor[(1), int32], Tensor[(1), int64]) -> Tensor[(2), int64] = fn (%p026: Tensor[(2), int64], %p111: Tensor[(1), int32], %p24: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        scatter(%p026, %p111, %p24, meta[relay.attrs.ScatterAttrs][0]) /* ty=Tensor[(2), int64] */
      };
      let %x65: Tensor[(2), int64] = %x64(%x55, %x56, %x63) /* ty=Tensor[(2), int64] */;
      let %x66: Tensor[(2), int32] = meta[relay.Constant][3] /* ty=Tensor[(2), int32] */;
      let %x67: fn (Tensor[(?, ?), float32], Tensor[(2), int64], Tensor[(2), int64], Tensor[(2), int32]) -> Tensor[(?, ?), float32] = fn (%p027: Tensor[(?, ?), float32], %p112: Tensor[(2), int64], %p25: Tensor[(2), int64], %p31: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p027, %p112, %p25, %p31, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      let %x68: Tensor[(?, ?), float32] = %x67(%x48, %x53, %x65, %x66) /* ty=Tensor[(?, ?), float32] */;
      let %x69: fn (int64, Tensor[(1), int64]) -> Tensor[(2), int64] = fn (%p028: int64, %p113: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %28 = expand_dims(%p028, axis=0) /* ty=Tensor[(1), int64] */;
        %29 = (%28, %p113);
        concatenate(%29) /* ty=Tensor[(2), int64] */
      };
      let %x70: Tensor[(2), int64] = %x69(%x36, %x16) /* ty=Tensor[(2), int64] */;
      let %x71: fn (Tensor[(2), int64]) -> int64 = fn (%p029: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p029) /* ty=int64 */
      };
      let %x72: int64 = %x71(%x70) /* ty=int64 */;
      let %x73: fn (Tensor[(?, ?), float32]) -> Tensor[(2), int32] = fn (%p030: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p030, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      let %x74: Tensor[(2), int32] = %x73(%x68) /* ty=Tensor[(2), int32] */;
      let %x75: fn (Tensor[(1), int64], int64, int64, Tensor[(2), int32]) -> Tensor[(2), int64] = fn (%p031: Tensor[(1), int64], %p114: int64, %p26: int64, %p32: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        %30 = subtract(%p114, %p26) /* ty=int64 */;
        %31 = expand_dims(%30, axis=0) /* ty=Tensor[(1), int64] */;
        %32 = cast(%31, dtype="int64") /* ty=Tensor[(1), int64] */;
        %33 = (%p031, %32);
        %34 = concatenate(%33) /* ty=Tensor[(2), int64] */;
        %35 = cast_like(0 /* ty=int32 */, %34) /* ty=int64 */;
        %36 = less(%34, %35) /* ty=Tensor[(2), bool] */;
        %37 = cast_like(%p32, %34) /* ty=Tensor[(2), int64] */;
        %38 = add(%34, %37) /* ty=Tensor[(2), int64] */;
        where(%36, %38, %34) /* ty=Tensor[(2), int64] */
      };
      let %x76: Tensor[(2), int64] = %x75(%x49, %x72, %x36, %x74) /* ty=Tensor[(2), int64] */;
      let %x77: fn (Tensor[(2), int32]) -> Tensor[(2), int64] = fn (%p032: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p032, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      let %x78: Tensor[(2), int64] = %x77(%x74) /* ty=Tensor[(2), int64] */;
      let %x79: fn (int64, Tensor[(1), int64], Tensor[(1), int64]) -> Tensor[(2), int64] = fn (%p033: int64, %p115: Tensor[(1), int64], %p27: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %39 = expand_dims(%p033, axis=0) /* ty=Tensor[(1), int64] */;
        %40 = add(%39, %p115) /* ty=Tensor[(1), int64] */;
        %41 = (%40, %p27);
        concatenate(%41) /* ty=Tensor[(2), int64] */
      };
      let %x80: Tensor[(2), int64] = %x79(%x34, %x28, %x57) /* ty=Tensor[(2), int64] */;
      let %x81: fn (Tensor[(2), int64]) -> int64 = fn (%p034: Tensor[(2), int64], Primitive=1) -> int64 {
        min(%p034) /* ty=int64 */
      };
      let %x82: int64 = %x81(%x80) /* ty=int64 */;
      let %x83: fn (int64, int64) -> Tensor[(1), int64] = fn (%p035: int64, %p116: int64, Primitive=1) -> Tensor[(1), int64] {
        %42 = subtract(%p035, %p116) /* ty=int64 */;
        expand_dims(%42, axis=0) /* ty=Tensor[(1), int64] */
      };
      let %x84: Tensor[(1), int64] = %x83(%x82, %x36) /* ty=Tensor[(1), int64] */;
      let %x85: fn (Tensor[(2), int64], Tensor[(1), int32], Tensor[(1), int64]) -> Tensor[(2), int64] = fn (%p036: Tensor[(2), int64], %p117: Tensor[(1), int32], %p28: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        scatter(%p036, %p117, %p28, meta[relay.attrs.ScatterAttrs][1]) /* ty=Tensor[(2), int64] */
      };
      let %x86: Tensor[(2), int64] = %x85(%x78, %x1, %x84);
      let %x87: Tensor[(2), int32] = meta[relay.Constant][4] /* ty=Tensor[(2), int32] */;
      let %x88: fn (Tensor[(?, ?), float32], Tensor[(2), int64], Tensor[(2), int64], Tensor[(2), int32]) -> Tensor[(?, ?), float32] = fn (%p037: Tensor[(?, ?), float32], %p118: Tensor[(2), int64], %p29: Tensor[(2), int64], %p33: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p037, %p118, %p29, %p33, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      let %x89: Tensor[(?, ?), float32] = %x88(%x68, %x76, %x86, %x87) /* ty=Tensor[(?, ?), float32] */;
      let %x90: fn (Tensor[(?, ?), float32]) -> Tensor[(2), int32] = fn (%p038: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p038, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      let %x91: Tensor[(2), int32] = %x90(%x89) /* ty=Tensor[(2), int32] */;
      let %x92: fn (Tensor[(2), int32]) -> Tensor[(1), int64] = fn (%p039: Tensor[(2), int32], Primitive=1) -> Tensor[(1), int64] {
        %43 = take(%p039, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
        %44 = expand_dims(%43, axis=0) /* ty=Tensor[(1), int32] */;
        cast(%44, dtype="int64") /* ty=Tensor[(1), int64] */
      };
      let %x93: Tensor[(1), int64] = %x92(%x91) /* ty=Tensor[(1), int64] */;
      let %x94: fn (int64, Tensor[(1), int64]) -> Tensor[(2), int64] = fn (%p040: int64, %p119: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %45 = expand_dims(%p040, axis=0) /* ty=Tensor[(1), int64] */;
        %46 = cast(%45, dtype="int64") /* ty=Tensor[(1), int64] */;
        %47 = (%46, %p119);
        concatenate(%47) /* ty=Tensor[(2), int64] */
      };
      let %x95: Tensor[(2), int64] = %x94(%x20, %x93) /* ty=Tensor[(2), int64] */;
      let %x96: fn (int32, Tensor[(2), int64]) -> Tensor[(?, ?), float32] = fn (%p041: int32, %p120: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p041, %p120, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      let %x97: Tensor[(?, ?), float32] = %x96(%x10, %x95) /* ty=Tensor[(?, ?), float32] */;
      let %x98: int32 = 0 /* ty=int32 */;
      let %x99: fn (int64, Tensor[(1), int64]) -> Tensor[(2), int64] = fn (%p042: int64, %p121: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %48 = subtract(300 /* ty=int64 */, %p042) /* ty=int64 */;
        %49 = expand_dims(%48, axis=0) /* ty=Tensor[(1), int64] */;
        %50 = cast(%49, dtype="int64") /* ty=Tensor[(1), int64] */;
        %51 = (%50, %p121);
        concatenate(%51) /* ty=Tensor[(2), int64] */
      };
      let %x100: Tensor[(2), int64] = %x99(%x61, %x93) /* ty=Tensor[(2), int64] */;
      let %x101: fn (int32, Tensor[(2), int64]) -> Tensor[(?, ?), float32] = fn (%p043: int32, %p122: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p043, %p122, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      let %x102: Tensor[(?, ?), float32] = %x101(%x98, %x100) /* ty=Tensor[(?, ?), float32] */;
      let %x103: fn (Tensor[(?, ?), float32], Tensor[(?, ?), float32], Tensor[(?, ?), float32]) -> Tensor[(?, ?), float32] = fn (%p044: Tensor[(?, ?), float32], %p123: Tensor[(?, ?), float32], %p210: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
        %52 = reshape(%p044, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %53 = reshape(%p210, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %54 = (%52, %p123, %53);
        concatenate(%54) /* ty=Tensor[(?, ?), float32] */
      };
      let %x104: Tensor[(?, ?), float32] = %x103(%x97, %x89, %x102) /* ty=Tensor[(?, ?), float32] */;
      let %x105: Tensor[(2), bool] = meta[relay.Constant][5] /* ty=Tensor[(2), bool] */;
      let %x106: Tensor[(2), int32] = meta[relay.Constant][6] /* ty=Tensor[(2), int32] */;
      let %x107: fn (Tensor[(?, ?), float32]) -> Tensor[(2), int32] = fn (%p045: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p045, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      let %x108: Tensor[(2), int32] = %x107(%x104) /* ty=Tensor[(2), int32] */;
      let %x109: fn (Tensor[(2), bool], Tensor[(2), int32], Tensor[(2), int32]) -> Tensor[(2), int32] = fn (%p046: Tensor[(2), bool], %p124: Tensor[(2), int32], %p211: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
        %55 = cast_like(%p211, %p124) /* ty=Tensor[(2), int32] */;
        %56 = add(%p124, %55) /* ty=Tensor[(2), int32] */;
        where(%p046, %56, %p124) /* ty=Tensor[(2), int32] */
      };
      let %x110: Tensor[(2), int32] = %x109(%x105, %x106, %x108) /* ty=Tensor[(2), int32] */;
      let %x111: Tensor[(1), int32] = meta[relay.Constant][7] /* ty=Tensor[(1), int32] */;
      let %x112: fn (Tensor[(2), int32], Tensor[(1), int32], Tensor[(1), int32]) -> Tensor[(2), int32] = fn (%p047: Tensor[(2), int32], %p125: Tensor[(1), int32], %p212: Tensor[(1), int32], Primitive=1) -> Tensor[(2), int32] {
        scatter(%p047, %p125, %p212, meta[relay.attrs.ScatterAttrs][2]) /* ty=Tensor[(2), int32] */
      };
      let %x113: Tensor[(2), int32] = %x112(%x108, %x56, %x111) /* ty=Tensor[(2), int32] */;
      let %x114: fn (Tensor[(2), int32]) -> Tensor[(2), int64] = fn (%p048: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p048, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      let %x115: Tensor[(2), int64] = %x114(%x113) /* ty=Tensor[(2), int64] */;
      let %x116: Tensor[(2), int32] = meta[relay.Constant][8] /* ty=Tensor[(2), int32] */;
      let %x117: fn (Tensor[(?, ?), float32], Tensor[(2), int32], Tensor[(2), int64], Tensor[(2), int32]) -> Tensor[(?, ?), float32] = fn (%p049: Tensor[(?, ?), float32], %p126: Tensor[(2), int32], %p213: Tensor[(2), int64], %p34: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p049, %p126, %p213, %p34, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      let %x118: Tensor[(?, ?), float32] = %x117(%x104, %x110, %x115, %x116) /* ty=Tensor[(?, ?), float32] */;
      let %x119: Tensor[(2), bool] = meta[relay.Constant][9] /* ty=Tensor[(2), bool] */;
      let %x120: Tensor[(2), int32] = meta[relay.Constant][10] /* ty=Tensor[(2), int32] */;
      let %x121: fn (Tensor[(?, ?), float32]) -> Tensor[(2), int32] = fn (%p050: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p050, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      let %x122: Tensor[(2), int32] = %x121(%x118) /* ty=Tensor[(2), int32] */;
      let %x123: fn (Tensor[(2), bool], Tensor[(2), int32], Tensor[(2), int32]) -> Tensor[(2), int32] = fn (%p051: Tensor[(2), bool], %p127: Tensor[(2), int32], %p214: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
        %57 = cast_like(%p214, %p127) /* ty=Tensor[(2), int32] */;
        %58 = add(%p127, %57) /* ty=Tensor[(2), int32] */;
        where(%p051, %58, %p127) /* ty=Tensor[(2), int32] */
      };
      let %x124: Tensor[(2), int32] = %x123(%x119, %x120, %x122) /* ty=Tensor[(2), int32] */;
      let %x125: fn (Tensor[(2), int32]) -> Tensor[(2), int64] = fn (%p052: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p052, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      let %x126: Tensor[(2), int64] = %x125(%x122) /* ty=Tensor[(2), int64] */;
      let %x127: Tensor[(2), int32] = meta[relay.Constant][11] /* ty=Tensor[(2), int32] */;
      let %x128: fn (Tensor[(?, ?), float32], Tensor[(2), int32], Tensor[(2), int64], Tensor[(2), int32]) -> Tensor[(?, ?), float32] = fn (%p053: Tensor[(?, ?), float32], %p128: Tensor[(2), int32], %p215: Tensor[(2), int64], %p35: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p053, %p128, %p215, %p35, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      let %x129: Tensor[(?, ?), float32] = %x128(%x118, %x124, %x126, %x127) /* ty=Tensor[(?, ?), float32] */;
      let %x130: fn (Tensor[(?, ?), float32]) -> Tensor[(2), int32] = fn (%p054: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p054, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      let %x131: Tensor[(2), int32] = %x130(%x129) /* ty=Tensor[(2), int32] */;
      let %x132: fn (Tensor[(2), int32]) -> Tensor[(1), int64] = fn (%p055: Tensor[(2), int32], Primitive=1) -> Tensor[(1), int64] {
        %59 = take(%p055, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
        %60 = expand_dims(%59, axis=0) /* ty=Tensor[(1), int32] */;
        cast(%60, dtype="int64") /* ty=Tensor[(1), int64] */
      };
      let %x133: Tensor[(1), int64] = %x132(%x131) /* ty=Tensor[(1), int64] */;
      let %x134: fn (Tensor[(1), int64], int64) -> Tensor[(2), int64] = fn (%p056: Tensor[(1), int64], %p129: int64, Primitive=1) -> Tensor[(2), int64] {
        %61 = expand_dims(%p129, axis=0) /* ty=Tensor[(1), int64] */;
        %62 = cast(%61, dtype="int64") /* ty=Tensor[(1), int64] */;
        %63 = (%p056, %62);
        concatenate(%63) /* ty=Tensor[(2), int64] */
      };
      let %x135: Tensor[(2), int64] = %x134(%x133, %x72) /* ty=Tensor[(2), int64] */;
      let %x136: fn (int32, Tensor[(2), int64]) -> Tensor[(?, ?), float32] = fn (%p057: int32, %p130: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p057, %p130, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      let %x137: Tensor[(?, ?), float32] = %x136(%x9, %x135) /* ty=Tensor[(?, ?), float32] */;
      let %x138: int32 = 0 /* ty=int32 */;
      let %x139: fn (Tensor[(1), int64], int64) -> Tensor[(2), int64] = fn (%p058: Tensor[(1), int64], %p131: int64, Primitive=1) -> Tensor[(2), int64] {
        %64 = subtract(300 /* ty=int64 */, %p131) /* ty=int64 */;
        %65 = expand_dims(%64, axis=0) /* ty=Tensor[(1), int64] */;
        %66 = cast(%65, dtype="int64") /* ty=Tensor[(1), int64] */;
        %67 = (%p058, %66);
        concatenate(%67) /* ty=Tensor[(2), int64] */
      };
      let %x140: Tensor[(2), int64] = %x139(%x133, %x82) /* ty=Tensor[(2), int64] */;
      let %x141: fn (int32, Tensor[(2), int64]) -> Tensor[(?, ?), float32] = fn (%p059: int32, %p132: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p059, %p132, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      let %x142: Tensor[(?, ?), float32] = %x141(%x138, %x140) /* ty=Tensor[(?, ?), float32] */;
      let %x143: fn (Tensor[(?, ?), float32], Tensor[(?, ?), float32], Tensor[(?, ?), float32]) -> Tensor[(?, ?), float32] = fn (%p060: Tensor[(?, ?), float32], %p133: Tensor[(?, ?), float32], %p216: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
        %68 = reshape(%p060, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %69 = reshape(%p216, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %70 = (%68, %p133, %69);
        concatenate(%70, axis=1) /* ty=Tensor[(?, ?), float32] */
      };
      let %x144: Tensor[(?, ?), float32] = %x143(%x137, %x129, %x142) /* ty=Tensor[(?, ?), float32] */;
      let %x145: Tensor[(2), bool] = meta[relay.Constant][12] /* ty=Tensor[(2), bool] */;
      let %x146: Tensor[(2), int32] = meta[relay.Constant][13] /* ty=Tensor[(2), int32] */;
      let %x147: fn (Tensor[(?, ?), float32]) -> Tensor[(2), int32] = fn (%p061: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p061, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      let %x148: Tensor[(2), int32] = %x147(%x144) /* ty=Tensor[(2), int32] */;
      let %x149: fn (Tensor[(2), bool], Tensor[(2), int32], Tensor[(2), int32]) -> Tensor[(2), int32] = fn (%p062: Tensor[(2), bool], %p134: Tensor[(2), int32], %p217: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
        %71 = cast_like(%p217, %p134) /* ty=Tensor[(2), int32] */;
        %72 = add(%p134, %71) /* ty=Tensor[(2), int32] */;
        where(%p062, %72, %p134) /* ty=Tensor[(2), int32] */
      };
      let %x150: Tensor[(2), int32] = %x149(%x145, %x146, %x148) /* ty=Tensor[(2), int32] */;
      let %x151: fn (Tensor[(2), int32]) -> Tensor[(2), int64] = fn (%p063: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p063, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      let %x152: Tensor[(2), int64] = %x151(%x148) /* ty=Tensor[(2), int64] */;
      let %x153: Tensor[(2), int32] = meta[relay.Constant][14] /* ty=Tensor[(2), int32] */;
      let %x154: fn (Tensor[(?, ?), float32], Tensor[(2), int32], Tensor[(2), int64], Tensor[(2), int32]) -> Tensor[(?, ?), float32] = fn (%p064: Tensor[(?, ?), float32], %p135: Tensor[(2), int32], %p218: Tensor[(2), int64], %p36: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p064, %p135, %p218, %p36, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      let %x155: Tensor[(?, ?), float32] = %x154(%x144, %x150, %x152, %x153) /* ty=Tensor[(?, ?), float32] */;
      let %x156: Tensor[(2), bool] = meta[relay.Constant][15] /* ty=Tensor[(2), bool] */;
      let %x157: Tensor[(2), int32] = meta[relay.Constant][16] /* ty=Tensor[(2), int32] */;
      let %x158: fn (Tensor[(?, ?), float32]) -> Tensor[(2), int32] = fn (%p065: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p065, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      let %x159: Tensor[(2), int32] = %x158(%x155) /* ty=Tensor[(2), int32] */;
      let %x160: fn (Tensor[(2), bool], Tensor[(2), int32], Tensor[(2), int32]) -> Tensor[(2), int32] = fn (%p066: Tensor[(2), bool], %p136: Tensor[(2), int32], %p219: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
        %73 = cast_like(%p219, %p136) /* ty=Tensor[(2), int32] */;
        %74 = add(%p136, %73) /* ty=Tensor[(2), int32] */;
        where(%p066, %74, %p136) /* ty=Tensor[(2), int32] */
      };
      let %x161: Tensor[(2), int32] = %x160(%x156, %x157, %x159) /* ty=Tensor[(2), int32] */;
      let %x162: fn (Tensor[(2), int32], Tensor[(1), int32], Tensor[(1), int32]) -> Tensor[(2), int32] = fn (%p067: Tensor[(2), int32], %p137: Tensor[(1), int32], %p220: Tensor[(1), int32], Primitive=1) -> Tensor[(2), int32] {
        scatter(%p067, %p137, %p220, meta[relay.attrs.ScatterAttrs][3]) /* ty=Tensor[(2), int32] */
      };
      let %x163: Tensor[(2), int32] = %x162(%x159, %x1, %x111);
      let %x164: fn (Tensor[(2), int32]) -> Tensor[(2), int64] = fn (%p068: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p068, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      let %x165: Tensor[(2), int64] = %x164(%x163) /* ty=Tensor[(2), int64] */;
      let %x166: Tensor[(2), int32] = meta[relay.Constant][17] /* ty=Tensor[(2), int32] */;
      let %x167: fn (Tensor[(?, ?), float32], Tensor[(2), int32], Tensor[(2), int64], Tensor[(2), int32]) -> Tensor[(?, ?), float32] = fn (%p069: Tensor[(?, ?), float32], %p138: Tensor[(2), int32], %p221: Tensor[(2), int64], %p37: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p069, %p138, %p221, %p37, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      let %x168: Tensor[(?, ?), float32] = %x167(%x155, %x161, %x165, %x166) /* ty=Tensor[(?, ?), float32] */;
      let %x169: List[Tensor[(?, ?), float32]] = Nil /* ty=List[Tensor[(?, ?), float32]] */;
      let %x170: List[Tensor[(?, ?), float32]] = Cons(%x168, %x169) /* ty=List[Tensor[(?, ?), float32]] */;
      let %x171: List[Tensor[(?, ?), float32]] = @concat(%res.6, %x170) /* ty=List[Tensor[(?, ?), float32]] */;
      %75 = @lifted_name8408068344935463616(%x, %x1);
      let %x172: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = %75(%x8, %x171, %v7286, %v7394);
      %x172
    } else {
      let %x173: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = (%i.1, %res.6, %v7286, %v7394);
      %x173
    };
    %x6
  }
}
#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.attrs.ScatterAttrs", 
        "relay.Constant"
      ], 
      "data": [2, 11]
    }, 
    {
      "type_key": "Array", 
      "data": [3, 5, 7, 9]
    }, 
    {
      "type_key": "relay.attrs.ScatterAttrs", 
      "attrs": {"axis": "4"}
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "0"
      }
    }, 
    {
      "type_key": "relay.attrs.ScatterAttrs", 
      "attrs": {"axis": "6"}
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "0"
      }
    }, 
    {
      "type_key": "relay.attrs.ScatterAttrs", 
      "attrs": {"axis": "8"}
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "0"
      }
    }, 
    {
      "type_key": "relay.attrs.ScatterAttrs", 
      "attrs": {"axis": "10"}
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [
        12, 
        16, 
        20, 
        24, 
        28, 
        32, 
        36, 
        40, 
        44, 
        48, 
        52, 
        56, 
        60, 
        64, 
        68, 
        72, 
        76, 
        80
      ]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "13", 
        "data": "0", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "14", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [15]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "17", 
        "data": "1", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "18", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [19]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "21", 
        "data": "2", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "22", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [23]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "25", 
        "data": "3", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "26", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [27]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "29", 
        "data": "4", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "30", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [31]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "33", 
        "data": "5", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "bool", 
        "shape": "34", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [35]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "37", 
        "data": "6", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "38", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [39]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "41", 
        "data": "7", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "42", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [43]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "45", 
        "data": "8", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "46", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [47]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "49", 
        "data": "9", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "bool", 
        "shape": "50", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [51]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "53", 
        "data": "10", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "54", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [55]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "57", 
        "data": "11", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "58", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [59]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "61", 
        "data": "12", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "bool", 
        "shape": "62", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [63]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "65", 
        "data": "13", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "66", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [67]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "69", 
        "data": "14", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "70", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [71]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "73", 
        "data": "15", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "bool", 
        "shape": "74", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [75]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "77", 
        "data": "16", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "78", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [79]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "81", 
        "data": "17", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int32", 
        "shape": "82", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [83]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQABAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQABAAAAAAAAAAQAAAAAAAAAAAAAAA==", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQABAAAAAAAAAAgAAAAAAAAALAEAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQACAAAAAAAAAAgAAAAAAAAAAQAAAAEAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQACAAAAAAAAAAgAAAAAAAAAAQAAAAEAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAEBAQACAAAAAAAAAAIAAAAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQACAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQABAAAAAAAAAAQAAAAAAAAALAEAAA==", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQACAAAAAAAAAAgAAAAAAAAAAQAAAAEAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAEBAQACAAAAAAAAAAIAAAAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQACAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQACAAAAAAAAAAgAAAAAAAAAAQAAAAEAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAEBAQACAAAAAAAAAAIAAAAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQACAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQACAAAAAAAAAAgAAAAAAAAAAQAAAAEAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAEBAQACAAAAAAAAAAIAAAAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQACAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAA=", 
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAAAgAQACAAAAAAAAAAgAAAAAAAAAAQAAAAEAAAA="
  ], 
  "attrs": {"tvm_version": "0.8.dev0"}
}
File test_street_small.jpg exists, skip.
type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type Storage {
  
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type static_tensor_float32_any_any_any_t {
  tensor_nil_float32_any_any_any,
  tensor_constructor_float32_any_any_any(Tensor[(?, ?, ?), float32]),
}

type Option[A] {
  Some(A),
  None,
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type static_tensor_float32_any_any_any_any_t {
  tensor_nil_float32_any_any_any_any,
  tensor_constructor_float32_any_any_any_any(Tensor[(?, ?, ?, ?), float32]),
}

type static_tensor_float32_any_any_t {
  tensor_nil_float32_any_any,
  tensor_constructor_float32_any_any(Tensor[(?, ?), float32]),
}

type static_tensor_float32_any_t {
  tensor_nil_float32_any,
  tensor_constructor_float32_any(Tensor[(?), float32]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

def @lifted_name8408068344935463616(%x: Tensor[(?, 1, ?, ?), float32], %x1: Tensor[(1), int32], Closure=1) -> fn (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) {
  fn (%i.1: int32, %res.6: List[Tensor[(?, ?), float32]], %v7286: Tensor[(?, 1, ?, ?), float32], %v7394: Tensor[(?, 4), int64]) -> (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) {
    let %region1: Storage[] = memory.alloc_storage(64 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
    let %region11: Storage[] = memory.alloc_storage(64 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1]) /* ty=Storage[] */;
    let %storage_0: Storage[] = %region1;
    let %tensor_0: Tensor[(4), int32] = memory.alloc_tensor(%region1, 0 /* ty=int64 */, meta[relay.Constant][0] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=Tensor[(4), int32] */;
    %0 = fn (%p0: Tensor[(?, 1, ?, ?), float32], Primitive=1) -> Tensor[(4), int32] {
      shape_of(%p0, dtype="int32") /* ty=Tensor[(4), int32] */
    };
    %1 = (%x,);
    %2 = (%tensor_0,);
    let %v: () = vm.invoke_tvm_op(%0, %1, %2) /* ty=() */;
    let %x2: Tensor[(4), int32] = %tensor_0;
    let %storage_01: Storage[] = %region11;
    let %tensor_01: bool = memory.alloc_tensor(%region11, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1]) /* ty=bool */;
    %4 = fn (%p01: int32, %p1: Tensor[(4), int32], Primitive=1) -> bool {
      %3 = take(%p1, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
      less(%p01, %3) /* ty=bool */
    };
    %5 = (%i.1, %x2);
    %6 = (%tensor_01,);
    let %v1: () = vm.invoke_tvm_op(%4, %5, %6) /* ty=() */;
    let %x3: bool = %tensor_01;
    let %x4: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = if (%x3) {
      let %storage_02: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][2]) /* ty=Storage[] */;
      let %tensor_02: int32 = memory.alloc_tensor(%storage_02, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][2]) /* ty=int32 */;
      %7 = fn (%p02: int32, Primitive=1) -> int32 {
        add(%p02, 1 /* ty=int32 */) /* ty=int32 */
      };
      %8 = (%i.1,);
      %9 = (%tensor_02,);
      let %v2: () = vm.invoke_tvm_op(%7, %8, %9) /* ty=() */;
      let %x5: int32 = %tensor_02;
      let %storage_03: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][3]) /* ty=Storage[] */;
      let %tensor_03: Tensor[(4), int64] = memory.alloc_tensor(%storage_03, 0 /* ty=int64 */, meta[relay.Constant][1] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][3]) /* ty=Tensor[(4), int64] */;
      %10 = fn (%p03: Tensor[(?, 4), int64], %p11: int32, Primitive=1) -> Tensor[(4), int64] {
        take(%p03, %p11, axis=0) /* ty=Tensor[(4), int64] */
      };
      %11 = (%v7394, %i.1);
      %12 = (%tensor_03,);
      let %v3: () = vm.invoke_tvm_op(%10, %11, %12) /* ty=() */;
      let %x6: Tensor[(4), int64] = %tensor_03;
      let %storage_04: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][4]) /* ty=Storage[] */;
      let %tensor_04: int64 = memory.alloc_tensor(%storage_04, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][4]) /* ty=int64 */;
      %13 = fn (%p04: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p04, 1 /* ty=int32 */, axis=0) /* ty=int64 */
      };
      %14 = (%x6,);
      %15 = (%tensor_04,);
      let %v4: () = vm.invoke_tvm_op(%13, %14, %15) /* ty=() */;
      let %x7: int64 = %tensor_04;
      let %storage_05: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][5]) /* ty=Storage[] */;
      let %tensor_05: Tensor[(1), int64] = memory.alloc_tensor(%storage_05, 0 /* ty=int64 */, meta[relay.Constant][2] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][5]) /* ty=Tensor[(1), int64] */;
      %16 = fn (Primitive=1) -> Tensor[(1), int64] {
        full(0 /* ty=int32 */, shape=[1], dtype="int64") /* ty=Tensor[(1), int64] */
      };
      %17 = ();
      %18 = (%tensor_05,);
      let %v5: () = vm.invoke_tvm_op(%16, %17, %18) /* ty=() */;
      let %x8: Tensor[(1), int64] = %tensor_05;
      let %storage_06: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][6]) /* ty=Storage[] */;
      let %tensor_06: Tensor[(2), int64] = memory.alloc_tensor(%storage_06, 0 /* ty=int64 */, meta[relay.Constant][3] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][6]) /* ty=Tensor[(2), int64] */;
      %21 = fn (%p05: int64, %p12: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %19 = expand_dims(%p05, axis=0) /* ty=Tensor[(1), int64] */;
        %20 = (%19, %p12);
        concatenate(%20) /* ty=Tensor[(2), int64] */
      };
      %22 = (%x7, %x8);
      %23 = (%tensor_06,);
      let %v6: () = vm.invoke_tvm_op(%21, %22, %23) /* ty=() */;
      let %x9: Tensor[(2), int64] = %tensor_06;
      let %storage_07: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][7]) /* ty=Storage[] */;
      let %tensor_07: int64 = memory.alloc_tensor(%storage_07, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][7]) /* ty=int64 */;
      %24 = fn (%p06: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p06) /* ty=int64 */
      };
      %25 = (%x9,);
      %26 = (%tensor_07,);
      let %v7: () = vm.invoke_tvm_op(%24, %25, %26) /* ty=() */;
      let %x10: int64 = %tensor_07;
      let %in_shape_0: Tensor[(4), int64] = vm.shape_of(%v7286, meta[relay.attrs.ShapeOfAttrs][0]) /* ty=Tensor[(4), int64] */;
      let %storage_08: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][8]) /* ty=Storage[] */;
      let %tensor_08: Tensor[(3), int64] = memory.alloc_tensor(%storage_08, 0 /* ty=int64 */, meta[relay.Constant][4] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][8]) /* ty=Tensor[(3), int64] */;
      let %shape_func_out_0: Tensor[(3), int64] = %tensor_08;
      %27 = fn (%p07: Tensor[(?, 1, ?, ?), float32], %p13: int32, Primitive=1) -> Tensor[(1, ?, ?), float32] {
        take(%p07, %p13, axis=0) /* ty=Tensor[(1, ?, ?), float32] */
      };
      %28 = (%in_shape_0, -23110496 /* ty=int64 */);
      %29 = (%shape_func_out_0,);
      let %shape_func: () = vm.shape_func(%27, %28, %29, meta[relay.attrs.ShapeFuncAttrs][0]) /* ty=() */;
      let %storage_09: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][9]) /* ty=Storage[] */;
      let %tensor_09: int64 = memory.alloc_tensor(%storage_09, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][9]) /* ty=int64 */;
      %30 = fn (%p08: Tensor[(3), int64], Primitive=1) -> int64 {
        prod(%p08) /* ty=int64 */
      };
      %31 = (%shape_func_out_0,);
      %32 = (%tensor_09,);
      let %v8: () = vm.invoke_tvm_op(%30, %31, %32) /* ty=() */;
      let %storage_010: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][10]) /* ty=Storage[] */;
      let %tensor_010: int64 = memory.alloc_tensor(%storage_010, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][10]) /* ty=int64 */;
      %33 = fn (%p09: int64, Primitive=1) -> int64 {
        multiply(%p09, 4 /* ty=int64 */) /* ty=int64 */
      };
      %34 = (%tensor_09,);
      %35 = (%tensor_010,);
      let %v9: () = vm.invoke_tvm_op(%33, %34, %35) /* ty=() */;
      let %storage_011: Storage[] = memory.alloc_storage(%tensor_010, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][11]) /* ty=Storage[] */;
      let %out_0: Tensor[(1, ?, ?), float32] = memory.alloc_tensor(%storage_011, 0 /* ty=int64 */, %shape_func_out_0, meta[relay.attrs.AllocTensorAttrs][11]) /* ty=Tensor[(1, ?, ?), float32] */;
      %36 = (%v7286, %i.1);
      %37 = (%out_0,);
      let %v10: () = vm.invoke_tvm_op(%27, %36, %37) /* ty=() */;
      let %x11: Tensor[(1, ?, ?), float32] = %out_0;
      let %in_shape_01: Tensor[(3), int64] = vm.shape_of(%x11, meta[relay.attrs.ShapeOfAttrs][1]) /* ty=Tensor[(3), int64] */;
      let %storage_012: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][12]) /* ty=Storage[] */;
      let %tensor_011: Tensor[(4), int64] = memory.alloc_tensor(%storage_012, 0 /* ty=int64 */, meta[relay.Constant][5] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][12]) /* ty=Tensor[(4), int64] */;
      let %shape_func_out_01: Tensor[(4), int64] = %tensor_011;
      %41 = fn (%p010: Tensor[(1, ?, ?), float32], Primitive=1) -> Tensor[(1, 1, ?, ?), float32] {
        %38 = take(%p010, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(?, ?), float32] */;
        %39 = expand_dims(%38, axis=0, num_newaxis=2) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        %40 = repeat(%39, repeats=1, axis=0) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        repeat(%40, repeats=1, axis=1) /* ty=Tensor[(1, 1, ?, ?), float32] */
      };
      %42 = (%in_shape_01,);
      %43 = (%shape_func_out_01,);
      let %shape_func1: () = vm.shape_func(%41, %42, %43, meta[relay.attrs.ShapeFuncAttrs][1]) /* ty=() */;
      let %storage_013: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][13]) /* ty=Storage[] */;
      let %tensor_012: int64 = memory.alloc_tensor(%storage_013, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][13]) /* ty=int64 */;
      %44 = fn (%p011: Tensor[(4), int64], Primitive=1) -> int64 {
        prod(%p011) /* ty=int64 */
      };
      %45 = (%shape_func_out_01,);
      %46 = (%tensor_012,);
      let %v11: () = vm.invoke_tvm_op(%44, %45, %46) /* ty=() */;
      let %storage_014: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][14]) /* ty=Storage[] */;
      let %tensor_013: int64 = memory.alloc_tensor(%storage_014, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][14]) /* ty=int64 */;
      %47 = fn (%p012: int64, Primitive=1) -> int64 {
        multiply(%p012, 4 /* ty=int64 */) /* ty=int64 */
      };
      %48 = (%tensor_012,);
      %49 = (%tensor_013,);
      let %v12: () = vm.invoke_tvm_op(%47, %48, %49) /* ty=() */;
      let %storage_015: Storage[] = memory.alloc_storage(%tensor_013, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][15]) /* ty=Storage[] */;
      let %out_01: Tensor[(1, 1, ?, ?), float32] = memory.alloc_tensor(%storage_015, 0 /* ty=int64 */, %shape_func_out_01, meta[relay.attrs.AllocTensorAttrs][15]) /* ty=Tensor[(1, 1, ?, ?), float32] */;
      %50 = (%x11,);
      %51 = (%out_01,);
      let %v13: () = vm.invoke_tvm_op(%41, %50, %51) /* ty=() */;
      let %x12: Tensor[(1, 1, ?, ?), float32] = %out_01;
      let %storage_016: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][16]) /* ty=Storage[] */;
      let %tensor_014: int64 = memory.alloc_tensor(%storage_016, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][16]) /* ty=int64 */;
      %52 = fn (%p013: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p013, 3 /* ty=int32 */, axis=0) /* ty=int64 */
      };
      %53 = (%x6,);
      %54 = (%tensor_014,);
      let %v14: () = vm.invoke_tvm_op(%52, %53, %54) /* ty=() */;
      let %x13: int64 = %tensor_014;
      let %storage_017: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][17]) /* ty=Storage[] */;
      let %tensor_015: Tensor[(1), int64] = memory.alloc_tensor(%storage_017, 0 /* ty=int64 */, meta[relay.Constant][6] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][17]) /* ty=Tensor[(1), int64] */;
      %55 = fn (Primitive=1) -> Tensor[(1), int64] {
        full(1 /* ty=int32 */, shape=[1], dtype="int64") /* ty=Tensor[(1), int64] */
      };
      %56 = ();
      %57 = (%tensor_015,);
      let %v15: () = vm.invoke_tvm_op(%55, %56, %57) /* ty=() */;
      let %x14: Tensor[(1), int64] = %tensor_015;
      let %storage_018: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][18]) /* ty=Storage[] */;
      let %tensor_016: Tensor[(2), int64] = memory.alloc_tensor(%storage_018, 0 /* ty=int64 */, meta[relay.Constant][7] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][18]) /* ty=Tensor[(2), int64] */;
      %61 = fn (%p014: int64, %p14: int64, %p2: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %58 = subtract(%p014, %p14) /* ty=int64 */;
        %59 = add(%58, %p2) /* ty=Tensor[(1), int64] */;
        %60 = (%59, %p2);
        concatenate(%60) /* ty=Tensor[(2), int64] */
      };
      %62 = (%x13, %x7, %x14);
      %63 = (%tensor_016,);
      let %v16: () = vm.invoke_tvm_op(%61, %62, %63) /* ty=() */;
      let %x15: Tensor[(2), int64] = %tensor_016;
      let %storage_019: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][19]) /* ty=Storage[] */;
      let %tensor_017: int64 = memory.alloc_tensor(%storage_019, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][19]) /* ty=int64 */;
      %64 = fn (%p015: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p015) /* ty=int64 */
      };
      %65 = (%x15,);
      %66 = (%tensor_017,);
      let %v17: () = vm.invoke_tvm_op(%64, %65, %66) /* ty=() */;
      let %x16: int64 = %tensor_017;
      let %storage_020: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][20]) /* ty=Storage[] */;
      let %tensor_018: int64 = memory.alloc_tensor(%storage_020, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][20]) /* ty=int64 */;
      %67 = fn (%p016: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p016, 2 /* ty=int32 */, axis=0) /* ty=int64 */
      };
      %68 = (%x6,);
      %69 = (%tensor_018,);
      let %v18: () = vm.invoke_tvm_op(%67, %68, %69) /* ty=() */;
      let %x17: int64 = %tensor_018;
      let %storage_021: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][21]) /* ty=Storage[] */;
      let %tensor_019: int64 = memory.alloc_tensor(%storage_021, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][21]) /* ty=int64 */;
      %70 = fn (%p017: Tensor[(4), int64], Primitive=1) -> int64 {
        take(%p017, 0 /* ty=int32 */, axis=0) /* ty=int64 */
      };
      %71 = (%x6,);
      %72 = (%tensor_019,);
      let %v19: () = vm.invoke_tvm_op(%70, %71, %72) /* ty=() */;
      let %x18: int64 = %tensor_019;
      let %storage_022: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][22]) /* ty=Storage[] */;
      let %tensor_020: Tensor[(2), int64] = memory.alloc_tensor(%storage_022, 0 /* ty=int64 */, meta[relay.Constant][8] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][22]) /* ty=Tensor[(2), int64] */;
      %76 = fn (%p018: int64, %p15: int64, %p21: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %73 = subtract(%p018, %p15) /* ty=int64 */;
        %74 = add(%73, %p21) /* ty=Tensor[(1), int64] */;
        %75 = (%74, %p21);
        concatenate(%75) /* ty=Tensor[(2), int64] */
      };
      %77 = (%x17, %x18, %x14);
      %78 = (%tensor_020,);
      let %v20: () = vm.invoke_tvm_op(%76, %77, %78) /* ty=() */;
      let %x19: Tensor[(2), int64] = %tensor_020;
      let %storage_023: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][23]) /* ty=Storage[] */;
      let %tensor_021: int64 = memory.alloc_tensor(%storage_023, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][23]) /* ty=int64 */;
      %79 = fn (%p019: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p019) /* ty=int64 */
      };
      %80 = (%x19,);
      %81 = (%tensor_021,);
      let %v21: () = vm.invoke_tvm_op(%79, %80, %81) /* ty=() */;
      let %x20: int64 = %tensor_021;
      let %storage_024: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][24]) /* ty=Storage[] */;
      let %tensor_022: Tensor[(2), int64] = memory.alloc_tensor(%storage_024, 0 /* ty=int64 */, meta[relay.Constant][9] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][24]) /* ty=Tensor[(2), int64] */;
      %85 = fn (%p020: int64, %p16: int64, Primitive=1) -> Tensor[(2), int64] {
        %82 = expand_dims(%p020, axis=0) /* ty=Tensor[(1), int64] */;
        %83 = expand_dims(%p16, axis=0) /* ty=Tensor[(1), int64] */;
        %84 = (%82, %83);
        concatenate(%84) /* ty=Tensor[(2), int64] */
      };
      %86 = (%x16, %x20);
      %87 = (%tensor_022,);
      let %v22: () = vm.invoke_tvm_op(%85, %86, %87) /* ty=() */;
      let %x21: Tensor[(2), int64] = %tensor_022;
      let %in_shape_02: Tensor[(1, 1, ?, ?), float32] = device_copy(%x12, meta[relay.attrs.DeviceCopyAttrs][0]) /* ty=Tensor[(1, 1, ?, ?), float32] */;
      let %in_shape_1: Tensor[(2), int64] = device_copy(%x21, meta[relay.attrs.DeviceCopyAttrs][1]) /* ty=Tensor[(2), int64] */;
      let %storage_025: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][25]) /* ty=Storage[] */;
      let %tensor_023: Tensor[(4), int64] = memory.alloc_tensor(%storage_025, 0 /* ty=int64 */, meta[relay.Constant][10] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][25]) /* ty=Tensor[(4), int64] */;
      let %shape_func_out_02: Tensor[(4), int64] = %tensor_023;
      %88 = fn (%p021: Tensor[(1, 1, ?, ?), float32], %p17: Tensor[(2), int64], Primitive=1) -> Tensor[(1, 1, ?, ?), float32] {
        dyn.image.resize(%p021, %p17, size=[]) /* ty=Tensor[(1, 1, ?, ?), float32] */
      };
      %89 = (%in_shape_02, %in_shape_1);
      %90 = (%shape_func_out_02,);
      let %shape_func2: () = vm.shape_func(%88, %89, %90, meta[relay.attrs.ShapeFuncAttrs][2]) /* ty=() */;
      let %storage_026: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][26]) /* ty=Storage[] */;
      let %tensor_024: int64 = memory.alloc_tensor(%storage_026, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][26]) /* ty=int64 */;
      %91 = fn (%p022: Tensor[(4), int64], Primitive=1) -> int64 {
        prod(%p022) /* ty=int64 */
      };
      %92 = (%shape_func_out_02,);
      %93 = (%tensor_024,);
      let %v23: () = vm.invoke_tvm_op(%91, %92, %93) /* ty=() */;
      let %storage_027: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][27]) /* ty=Storage[] */;
      let %tensor_025: int64 = memory.alloc_tensor(%storage_027, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][27]) /* ty=int64 */;
      %94 = fn (%p023: int64, Primitive=1) -> int64 {
        multiply(%p023, 4 /* ty=int64 */) /* ty=int64 */
      };
      %95 = (%tensor_024,);
      %96 = (%tensor_025,);
      let %v24: () = vm.invoke_tvm_op(%94, %95, %96) /* ty=() */;
      let %storage_028: Storage[] = memory.alloc_storage(%tensor_025, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][28]) /* ty=Storage[] */;
      let %out_02: Tensor[(1, 1, ?, ?), float32] = memory.alloc_tensor(%storage_028, 0 /* ty=int64 */, %shape_func_out_02, meta[relay.attrs.AllocTensorAttrs][28]) /* ty=Tensor[(1, 1, ?, ?), float32] */;
      %97 = (%x12, %x21);
      %98 = (%out_02,);
      let %v25: () = vm.invoke_tvm_op(%88, %97, %98) /* ty=() */;
      let %x22: Tensor[(1, 1, ?, ?), float32] = %out_02;
      let %in_shape_03: Tensor[(4), int64] = vm.shape_of(%x22, meta[relay.attrs.ShapeOfAttrs][2]) /* ty=Tensor[(4), int64] */;
      let %storage_029: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][29]) /* ty=Storage[] */;
      let %tensor_026: Tensor[(3), int64] = memory.alloc_tensor(%storage_029, 0 /* ty=int64 */, meta[relay.Constant][11] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][29]) /* ty=Tensor[(3), int64] */;
      let %shape_func_out_03: Tensor[(3), int64] = %tensor_026;
      %99 = fn (%p024: Tensor[(1, 1, ?, ?), float32], Primitive=1) -> Tensor[(1, ?, ?), float32] {
        take(%p024, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, ?, ?), float32] */
      };
      %100 = (%in_shape_03,);
      %101 = (%shape_func_out_03,);
      let %shape_func3: () = vm.shape_func(%99, %100, %101, meta[relay.attrs.ShapeFuncAttrs][3]) /* ty=() */;
      let %storage_030: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][30]) /* ty=Storage[] */;
      let %tensor_027: int64 = memory.alloc_tensor(%storage_030, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][30]) /* ty=int64 */;
      %102 = fn (%p025: Tensor[(3), int64], Primitive=1) -> int64 {
        prod(%p025) /* ty=int64 */
      };
      %103 = (%shape_func_out_03,);
      %104 = (%tensor_027,);
      let %v26: () = vm.invoke_tvm_op(%102, %103, %104) /* ty=() */;
      let %storage_031: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][31]) /* ty=Storage[] */;
      let %tensor_028: int64 = memory.alloc_tensor(%storage_031, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][31]) /* ty=int64 */;
      %105 = fn (%p026: int64, Primitive=1) -> int64 {
        multiply(%p026, 4 /* ty=int64 */) /* ty=int64 */
      };
      %106 = (%tensor_027,);
      %107 = (%tensor_028,);
      let %v27: () = vm.invoke_tvm_op(%105, %106, %107) /* ty=() */;
      let %storage_032: Storage[] = memory.alloc_storage(%tensor_028, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][32]) /* ty=Storage[] */;
      let %out_03: Tensor[(1, ?, ?), float32] = memory.alloc_tensor(%storage_032, 0 /* ty=int64 */, %shape_func_out_03, meta[relay.attrs.AllocTensorAttrs][32]) /* ty=Tensor[(1, ?, ?), float32] */;
      %108 = (%x22,);
      %109 = (%out_03,);
      let %v28: () = vm.invoke_tvm_op(%99, %108, %109) /* ty=() */;
      let %x23: Tensor[(1, ?, ?), float32] = %out_03;
      let %in_shape_04: Tensor[(3), int64] = vm.shape_of(%x23, meta[relay.attrs.ShapeOfAttrs][3]) /* ty=Tensor[(3), int64] */;
      let %storage_033: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][33]) /* ty=Storage[] */;
      let %tensor_029: Tensor[(2), int64] = memory.alloc_tensor(%storage_033, 0 /* ty=int64 */, meta[relay.Constant][12] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][33]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_04: Tensor[(2), int64] = %tensor_029;
      %110 = fn (%p027: Tensor[(1, ?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
        take(%p027, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(?, ?), float32] */
      };
      %111 = (%in_shape_04,);
      %112 = (%shape_func_out_04,);
      let %shape_func4: () = vm.shape_func(%110, %111, %112, meta[relay.attrs.ShapeFuncAttrs][4]) /* ty=() */;
      let %storage_034: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][34]) /* ty=Storage[] */;
      let %tensor_030: int64 = memory.alloc_tensor(%storage_034, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][34]) /* ty=int64 */;
      %113 = fn (%p028: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p028) /* ty=int64 */
      };
      %114 = (%shape_func_out_04,);
      %115 = (%tensor_030,);
      let %v29: () = vm.invoke_tvm_op(%113, %114, %115) /* ty=() */;
      let %storage_035: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][35]) /* ty=Storage[] */;
      let %tensor_031: int64 = memory.alloc_tensor(%storage_035, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][35]) /* ty=int64 */;
      %116 = fn (%p029: int64, Primitive=1) -> int64 {
        multiply(%p029, 4 /* ty=int64 */) /* ty=int64 */
      };
      %117 = (%tensor_030,);
      %118 = (%tensor_031,);
      let %v30: () = vm.invoke_tvm_op(%116, %117, %118) /* ty=() */;
      let %storage_036: Storage[] = memory.alloc_storage(%tensor_031, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][36]) /* ty=Storage[] */;
      let %out_04: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_036, 0 /* ty=int64 */, %shape_func_out_04, meta[relay.attrs.AllocTensorAttrs][36]) /* ty=Tensor[(?, ?), float32] */;
      %119 = (%x23,);
      %120 = (%out_04,);
      let %v31: () = vm.invoke_tvm_op(%110, %119, %120) /* ty=() */;
      let %x24: Tensor[(?, ?), float32] = %out_04;
      let %storage_037: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][37]) /* ty=Storage[] */;
      let %tensor_032: Tensor[(2), int32] = memory.alloc_tensor(%storage_037, 0 /* ty=int64 */, meta[relay.Constant][13] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][37]) /* ty=Tensor[(2), int32] */;
      %121 = fn (%p030: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p030, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %122 = (%x24,);
      %123 = (%tensor_032,);
      let %v32: () = vm.invoke_tvm_op(%121, %122, %123) /* ty=() */;
      let %x25: Tensor[(2), int32] = %tensor_032;
      let %storage_038: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][38]) /* ty=Storage[] */;
      let %tensor_033: Tensor[(2), int64] = memory.alloc_tensor(%storage_038, 0 /* ty=int64 */, meta[relay.Constant][14] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][38]) /* ty=Tensor[(2), int64] */;
      %133 = fn (%p031: int64, %p18: int64, %p22: Tensor[(1), int64], %p3: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        %124 = subtract(%p031, %p18) /* ty=int64 */;
        %125 = expand_dims(%124, axis=0) /* ty=Tensor[(1), int64] */;
        %126 = cast(%125, dtype="int64") /* ty=Tensor[(1), int64] */;
        %127 = (%126, %p22);
        %128 = concatenate(%127) /* ty=Tensor[(2), int64] */;
        %129 = cast_like(0 /* ty=int32 */, %128) /* ty=int64 */;
        %130 = less(%128, %129) /* ty=Tensor[(2), bool] */;
        %131 = cast_like(%p3, %128) /* ty=Tensor[(2), int64] */;
        %132 = add(%128, %131) /* ty=Tensor[(2), int64] */;
        where(%130, %132, %128) /* ty=Tensor[(2), int64] */
      };
      %134 = (%x10, %x7, meta[relay.Constant][15] /* ty=Tensor[(1), int64] */, %x25);
      %135 = (%tensor_033,);
      let %v33: () = vm.invoke_tvm_op(%133, %134, %135) /* ty=() */;
      let %x26: Tensor[(2), int64] = %tensor_033;
      let %storage_039: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][39]) /* ty=Storage[] */;
      let %tensor_034: Tensor[(2), int64] = memory.alloc_tensor(%storage_039, 0 /* ty=int64 */, meta[relay.Constant][16] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][39]) /* ty=Tensor[(2), int64] */;
      %136 = fn (%p032: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p032, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %137 = (%x25,);
      %138 = (%tensor_034,);
      let %v34: () = vm.invoke_tvm_op(%136, %137, %138) /* ty=() */;
      let %x27: Tensor[(2), int64] = %tensor_034;
      let %storage_040: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][40]) /* ty=Storage[] */;
      let %tensor_035: Tensor[(2), int64] = memory.alloc_tensor(%storage_040, 0 /* ty=int64 */, meta[relay.Constant][17] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][40]) /* ty=Tensor[(2), int64] */;
      %142 = fn (%p033: int64, %p19: Tensor[(1), int64], %p23: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %139 = expand_dims(%p033, axis=0) /* ty=Tensor[(1), int64] */;
        %140 = add(%139, %p19) /* ty=Tensor[(1), int64] */;
        %141 = (%140, %p23);
        concatenate(%141) /* ty=Tensor[(2), int64] */
      };
      %143 = (%x13, %x14, meta[relay.Constant][18] /* ty=Tensor[(1), int64] */);
      %144 = (%tensor_035,);
      let %v35: () = vm.invoke_tvm_op(%142, %143, %144) /* ty=() */;
      let %x28: Tensor[(2), int64] = %tensor_035;
      let %storage_041: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][41]) /* ty=Storage[] */;
      let %tensor_036: int64 = memory.alloc_tensor(%storage_041, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][41]) /* ty=int64 */;
      %145 = fn (%p034: Tensor[(2), int64], Primitive=1) -> int64 {
        min(%p034) /* ty=int64 */
      };
      %146 = (%x28,);
      %147 = (%tensor_036,);
      let %v36: () = vm.invoke_tvm_op(%145, %146, %147) /* ty=() */;
      let %x29: int64 = %tensor_036;
      let %storage_042: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][42]) /* ty=Storage[] */;
      let %tensor_037: Tensor[(1), int64] = memory.alloc_tensor(%storage_042, 0 /* ty=int64 */, meta[relay.Constant][19] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][42]) /* ty=Tensor[(1), int64] */;
      %149 = fn (%p035: int64, %p110: int64, Primitive=1) -> Tensor[(1), int64] {
        %148 = subtract(%p035, %p110) /* ty=int64 */;
        expand_dims(%148, axis=0) /* ty=Tensor[(1), int64] */
      };
      %150 = (%x29, %x7);
      %151 = (%tensor_037,);
      let %v37: () = vm.invoke_tvm_op(%149, %150, %151) /* ty=() */;
      let %x30: Tensor[(1), int64] = %tensor_037;
      let %storage_043: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][43]) /* ty=Storage[] */;
      let %tensor_038: Tensor[(2), int64] = memory.alloc_tensor(%storage_043, 0 /* ty=int64 */, meta[relay.Constant][20] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][43]) /* ty=Tensor[(2), int64] */;
      %152 = fn (%p036: Tensor[(2), int64], %p111: Tensor[(1), int32], %p24: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        scatter(%p036, %p111, %p24, meta[relay.attrs.ScatterAttrs][0]) /* ty=Tensor[(2), int64] */
      };
      %153 = (%x27, meta[relay.Constant][21] /* ty=Tensor[(1), int32] */, %x30);
      %154 = (%tensor_038,);
      let %v38: () = vm.invoke_tvm_op(%152, %153, %154) /* ty=() */;
      let %x31: Tensor[(2), int64] = %tensor_038;
      let %in_shape_05: Tensor[(2), int64] = vm.shape_of(%x24, meta[relay.attrs.ShapeOfAttrs][4]) /* ty=Tensor[(2), int64] */;
      let %in_shape_11: Tensor[(2), int64] = device_copy(%x26, meta[relay.attrs.DeviceCopyAttrs][2]) /* ty=Tensor[(2), int64] */;
      let %in_shape_2: Tensor[(2), int64] = device_copy(%x31, meta[relay.attrs.DeviceCopyAttrs][3]) /* ty=Tensor[(2), int64] */;
      let %in_shape_3: Tensor[(2), int32] = device_copy(meta[relay.Constant][22] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][4]) /* ty=Tensor[(2), int32] */;
      let %storage_044: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][44]) /* ty=Storage[] */;
      let %tensor_039: Tensor[(2), int64] = memory.alloc_tensor(%storage_044, 0 /* ty=int64 */, meta[relay.Constant][23] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][44]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_05: Tensor[(2), int64] = %tensor_039;
      %155 = fn (%p037: Tensor[(?, ?), float32], %p112: Tensor[(2), int64], %p25: Tensor[(2), int64], %p31: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p037, %p112, %p25, %p31, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %156 = (%in_shape_05, %in_shape_11, %in_shape_2, %in_shape_3);
      %157 = (%shape_func_out_05,);
      let %shape_func5: () = vm.shape_func(%155, %156, %157, meta[relay.attrs.ShapeFuncAttrs][5]) /* ty=() */;
      let %storage_045: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][45]) /* ty=Storage[] */;
      let %tensor_040: int64 = memory.alloc_tensor(%storage_045, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][45]) /* ty=int64 */;
      %158 = fn (%p038: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p038) /* ty=int64 */
      };
      %159 = (%shape_func_out_05,);
      %160 = (%tensor_040,);
      let %v39: () = vm.invoke_tvm_op(%158, %159, %160) /* ty=() */;
      let %storage_046: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][46]) /* ty=Storage[] */;
      let %tensor_041: int64 = memory.alloc_tensor(%storage_046, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][46]) /* ty=int64 */;
      %161 = fn (%p039: int64, Primitive=1) -> int64 {
        multiply(%p039, 4 /* ty=int64 */) /* ty=int64 */
      };
      %162 = (%tensor_040,);
      %163 = (%tensor_041,);
      let %v40: () = vm.invoke_tvm_op(%161, %162, %163) /* ty=() */;
      let %storage_047: Storage[] = memory.alloc_storage(%tensor_041, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][47]) /* ty=Storage[] */;
      let %out_05: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_047, 0 /* ty=int64 */, %shape_func_out_05, meta[relay.attrs.AllocTensorAttrs][47]) /* ty=Tensor[(?, ?), float32] */;
      %164 = (%x24, %x26, %x31, meta[relay.Constant][22] /* ty=Tensor[(2), int32] */);
      %165 = (%out_05,);
      let %v41: () = vm.invoke_tvm_op(%155, %164, %165) /* ty=() */;
      let %x32: Tensor[(?, ?), float32] = %out_05;
      let %storage_048: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][48]) /* ty=Storage[] */;
      let %tensor_042: Tensor[(2), int64] = memory.alloc_tensor(%storage_048, 0 /* ty=int64 */, meta[relay.Constant][24] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][48]) /* ty=Tensor[(2), int64] */;
      %168 = fn (%p040: int64, %p113: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %166 = expand_dims(%p040, axis=0) /* ty=Tensor[(1), int64] */;
        %167 = (%166, %p113);
        concatenate(%167) /* ty=Tensor[(2), int64] */
      };
      %169 = (%x18, %x8);
      %170 = (%tensor_042,);
      let %v42: () = vm.invoke_tvm_op(%168, %169, %170) /* ty=() */;
      let %x33: Tensor[(2), int64] = %tensor_042;
      let %storage_049: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][49]) /* ty=Storage[] */;
      let %tensor_043: int64 = memory.alloc_tensor(%storage_049, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][49]) /* ty=int64 */;
      %171 = fn (%p041: Tensor[(2), int64], Primitive=1) -> int64 {
        max(%p041) /* ty=int64 */
      };
      %172 = (%x33,);
      %173 = (%tensor_043,);
      let %v43: () = vm.invoke_tvm_op(%171, %172, %173) /* ty=() */;
      let %x34: int64 = %tensor_043;
      let %storage_050: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][50]) /* ty=Storage[] */;
      let %tensor_044: Tensor[(2), int32] = memory.alloc_tensor(%storage_050, 0 /* ty=int64 */, meta[relay.Constant][25] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][50]) /* ty=Tensor[(2), int32] */;
      %174 = fn (%p042: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p042, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %175 = (%x32,);
      %176 = (%tensor_044,);
      let %v44: () = vm.invoke_tvm_op(%174, %175, %176) /* ty=() */;
      let %x35: Tensor[(2), int32] = %tensor_044;
      let %storage_051: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][51]) /* ty=Storage[] */;
      let %tensor_045: Tensor[(2), int64] = memory.alloc_tensor(%storage_051, 0 /* ty=int64 */, meta[relay.Constant][26] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][51]) /* ty=Tensor[(2), int64] */;
      %186 = fn (%p043: Tensor[(1), int64], %p114: int64, %p26: int64, %p32: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        %177 = subtract(%p114, %p26) /* ty=int64 */;
        %178 = expand_dims(%177, axis=0) /* ty=Tensor[(1), int64] */;
        %179 = cast(%178, dtype="int64") /* ty=Tensor[(1), int64] */;
        %180 = (%p043, %179);
        %181 = concatenate(%180) /* ty=Tensor[(2), int64] */;
        %182 = cast_like(0 /* ty=int32 */, %181) /* ty=int64 */;
        %183 = less(%181, %182) /* ty=Tensor[(2), bool] */;
        %184 = cast_like(%p32, %181) /* ty=Tensor[(2), int64] */;
        %185 = add(%181, %184) /* ty=Tensor[(2), int64] */;
        where(%183, %185, %181) /* ty=Tensor[(2), int64] */
      };
      %187 = (meta[relay.Constant][15] /* ty=Tensor[(1), int64] */, %x34, %x18, %x35);
      %188 = (%tensor_045,);
      let %v45: () = vm.invoke_tvm_op(%186, %187, %188) /* ty=() */;
      let %x36: Tensor[(2), int64] = %tensor_045;
      let %storage_052: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][52]) /* ty=Storage[] */;
      let %tensor_046: Tensor[(2), int64] = memory.alloc_tensor(%storage_052, 0 /* ty=int64 */, meta[relay.Constant][27] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][52]) /* ty=Tensor[(2), int64] */;
      %189 = fn (%p044: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p044, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %190 = (%x35,);
      %191 = (%tensor_046,);
      let %v46: () = vm.invoke_tvm_op(%189, %190, %191) /* ty=() */;
      let %x37: Tensor[(2), int64] = %tensor_046;
      let %storage_053: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][53]) /* ty=Storage[] */;
      let %tensor_047: Tensor[(2), int64] = memory.alloc_tensor(%storage_053, 0 /* ty=int64 */, meta[relay.Constant][28] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][53]) /* ty=Tensor[(2), int64] */;
      %195 = fn (%p045: int64, %p115: Tensor[(1), int64], %p27: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %192 = expand_dims(%p045, axis=0) /* ty=Tensor[(1), int64] */;
        %193 = add(%192, %p115) /* ty=Tensor[(1), int64] */;
        %194 = (%193, %p27);
        concatenate(%194) /* ty=Tensor[(2), int64] */
      };
      %196 = (%x17, %x14, meta[relay.Constant][18] /* ty=Tensor[(1), int64] */);
      %197 = (%tensor_047,);
      let %v47: () = vm.invoke_tvm_op(%195, %196, %197) /* ty=() */;
      let %x38: Tensor[(2), int64] = %tensor_047;
      let %storage_054: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][54]) /* ty=Storage[] */;
      let %tensor_048: int64 = memory.alloc_tensor(%storage_054, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][54]) /* ty=int64 */;
      %198 = fn (%p046: Tensor[(2), int64], Primitive=1) -> int64 {
        min(%p046) /* ty=int64 */
      };
      %199 = (%x38,);
      %200 = (%tensor_048,);
      let %v48: () = vm.invoke_tvm_op(%198, %199, %200) /* ty=() */;
      let %x39: int64 = %tensor_048;
      let %storage_055: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][55]) /* ty=Storage[] */;
      let %tensor_049: Tensor[(1), int64] = memory.alloc_tensor(%storage_055, 0 /* ty=int64 */, meta[relay.Constant][29] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][55]) /* ty=Tensor[(1), int64] */;
      %202 = fn (%p047: int64, %p116: int64, Primitive=1) -> Tensor[(1), int64] {
        %201 = subtract(%p047, %p116) /* ty=int64 */;
        expand_dims(%201, axis=0) /* ty=Tensor[(1), int64] */
      };
      %203 = (%x39, %x18);
      %204 = (%tensor_049,);
      let %v49: () = vm.invoke_tvm_op(%202, %203, %204) /* ty=() */;
      let %x40: Tensor[(1), int64] = %tensor_049;
      let %storage_056: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][56]) /* ty=Storage[] */;
      let %tensor_050: Tensor[(2), int64] = memory.alloc_tensor(%storage_056, 0 /* ty=int64 */, meta[relay.Constant][30] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][56]) /* ty=Tensor[(2), int64] */;
      %205 = fn (%p048: Tensor[(2), int64], %p117: Tensor[(1), int32], %p28: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        scatter(%p048, %p117, %p28, meta[relay.attrs.ScatterAttrs][1]) /* ty=Tensor[(2), int64] */
      };
      %206 = (%x37, %x1, %x40);
      %207 = (%tensor_050,);
      let %v50: () = vm.invoke_tvm_op(%205, %206, %207) /* ty=() */;
      let %x41: Tensor[(2), int64] = %tensor_050;
      let %in_shape_06: Tensor[(2), int64] = vm.shape_of(%x32, meta[relay.attrs.ShapeOfAttrs][5]) /* ty=Tensor[(2), int64] */;
      let %in_shape_12: Tensor[(2), int64] = device_copy(%x36, meta[relay.attrs.DeviceCopyAttrs][5]) /* ty=Tensor[(2), int64] */;
      let %in_shape_21: Tensor[(2), int64] = device_copy(%x41, meta[relay.attrs.DeviceCopyAttrs][6]) /* ty=Tensor[(2), int64] */;
      let %in_shape_31: Tensor[(2), int32] = device_copy(meta[relay.Constant][31] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][7]) /* ty=Tensor[(2), int32] */;
      let %storage_057: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][57]) /* ty=Storage[] */;
      let %tensor_051: Tensor[(2), int64] = memory.alloc_tensor(%storage_057, 0 /* ty=int64 */, meta[relay.Constant][32] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][57]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_06: Tensor[(2), int64] = %tensor_051;
      %208 = fn (%p049: Tensor[(?, ?), float32], %p118: Tensor[(2), int64], %p29: Tensor[(2), int64], %p33: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p049, %p118, %p29, %p33, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %209 = (%in_shape_06, %in_shape_12, %in_shape_21, %in_shape_31);
      %210 = (%shape_func_out_06,);
      let %shape_func6: () = vm.shape_func(%208, %209, %210, meta[relay.attrs.ShapeFuncAttrs][6]) /* ty=() */;
      let %storage_058: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][58]) /* ty=Storage[] */;
      let %tensor_052: int64 = memory.alloc_tensor(%storage_058, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][58]) /* ty=int64 */;
      %211 = fn (%p050: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p050) /* ty=int64 */
      };
      %212 = (%shape_func_out_06,);
      %213 = (%tensor_052,);
      let %v51: () = vm.invoke_tvm_op(%211, %212, %213) /* ty=() */;
      let %storage_059: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][59]) /* ty=Storage[] */;
      let %tensor_053: int64 = memory.alloc_tensor(%storage_059, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][59]) /* ty=int64 */;
      %214 = fn (%p051: int64, Primitive=1) -> int64 {
        multiply(%p051, 4 /* ty=int64 */) /* ty=int64 */
      };
      %215 = (%tensor_052,);
      %216 = (%tensor_053,);
      let %v52: () = vm.invoke_tvm_op(%214, %215, %216) /* ty=() */;
      let %storage_060: Storage[] = memory.alloc_storage(%tensor_053, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][60]) /* ty=Storage[] */;
      let %out_06: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_060, 0 /* ty=int64 */, %shape_func_out_06, meta[relay.attrs.AllocTensorAttrs][60]) /* ty=Tensor[(?, ?), float32] */;
      %217 = (%x32, %x36, %x41, meta[relay.Constant][31] /* ty=Tensor[(2), int32] */);
      %218 = (%out_06,);
      let %v53: () = vm.invoke_tvm_op(%208, %217, %218) /* ty=() */;
      let %x42: Tensor[(?, ?), float32] = %out_06;
      let %storage_061: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][61]) /* ty=Storage[] */;
      let %tensor_054: Tensor[(2), int32] = memory.alloc_tensor(%storage_061, 0 /* ty=int64 */, meta[relay.Constant][33] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][61]) /* ty=Tensor[(2), int32] */;
      %219 = fn (%p052: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p052, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %220 = (%x42,);
      %221 = (%tensor_054,);
      let %v54: () = vm.invoke_tvm_op(%219, %220, %221) /* ty=() */;
      let %x43: Tensor[(2), int32] = %tensor_054;
      let %storage_062: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][62]) /* ty=Storage[] */;
      let %tensor_055: Tensor[(1), int64] = memory.alloc_tensor(%storage_062, 0 /* ty=int64 */, meta[relay.Constant][34] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][62]) /* ty=Tensor[(1), int64] */;
      %224 = fn (%p053: Tensor[(2), int32], Primitive=1) -> Tensor[(1), int64] {
        %222 = take(%p053, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
        %223 = expand_dims(%222, axis=0) /* ty=Tensor[(1), int32] */;
        cast(%223, dtype="int64") /* ty=Tensor[(1), int64] */
      };
      %225 = (%x43,);
      %226 = (%tensor_055,);
      let %v55: () = vm.invoke_tvm_op(%224, %225, %226) /* ty=() */;
      let %x44: Tensor[(1), int64] = %tensor_055;
      let %storage_063: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][63]) /* ty=Storage[] */;
      let %tensor_056: Tensor[(2), int64] = memory.alloc_tensor(%storage_063, 0 /* ty=int64 */, meta[relay.Constant][35] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][63]) /* ty=Tensor[(2), int64] */;
      %230 = fn (%p054: int64, %p119: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %227 = expand_dims(%p054, axis=0) /* ty=Tensor[(1), int64] */;
        %228 = cast(%227, dtype="int64") /* ty=Tensor[(1), int64] */;
        %229 = (%228, %p119);
        concatenate(%229) /* ty=Tensor[(2), int64] */
      };
      %231 = (%x10, %x44);
      %232 = (%tensor_056,);
      let %v56: () = vm.invoke_tvm_op(%230, %231, %232) /* ty=() */;
      let %x45: Tensor[(2), int64] = %tensor_056;
      let %in_shape_07: int32 = device_copy(0 /* ty=int32 */, meta[relay.attrs.DeviceCopyAttrs][8]) /* ty=int32 */;
      let %in_shape_13: Tensor[(2), int64] = device_copy(%x45, meta[relay.attrs.DeviceCopyAttrs][9]) /* ty=Tensor[(2), int64] */;
      let %storage_064: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][64]) /* ty=Storage[] */;
      let %tensor_057: Tensor[(2), int64] = memory.alloc_tensor(%storage_064, 0 /* ty=int64 */, meta[relay.Constant][36] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][64]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_07: Tensor[(2), int64] = %tensor_057;
      %233 = fn (%p055: int32, %p120: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p055, %p120, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      %234 = (%in_shape_07, %in_shape_13);
      %235 = (%shape_func_out_07,);
      let %shape_func7: () = vm.shape_func(%233, %234, %235, meta[relay.attrs.ShapeFuncAttrs][7]) /* ty=() */;
      let %storage_065: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][65]) /* ty=Storage[] */;
      let %tensor_058: int64 = memory.alloc_tensor(%storage_065, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][65]) /* ty=int64 */;
      %236 = fn (%p056: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p056) /* ty=int64 */
      };
      %237 = (%shape_func_out_07,);
      %238 = (%tensor_058,);
      let %v57: () = vm.invoke_tvm_op(%236, %237, %238) /* ty=() */;
      let %storage_066: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][66]) /* ty=Storage[] */;
      let %tensor_059: int64 = memory.alloc_tensor(%storage_066, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][66]) /* ty=int64 */;
      %239 = fn (%p057: int64, Primitive=1) -> int64 {
        multiply(%p057, 4 /* ty=int64 */) /* ty=int64 */
      };
      %240 = (%tensor_058,);
      %241 = (%tensor_059,);
      let %v58: () = vm.invoke_tvm_op(%239, %240, %241) /* ty=() */;
      let %storage_067: Storage[] = memory.alloc_storage(%tensor_059, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][67]) /* ty=Storage[] */;
      let %out_07: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_067, 0 /* ty=int64 */, %shape_func_out_07, meta[relay.attrs.AllocTensorAttrs][67]) /* ty=Tensor[(?, ?), float32] */;
      %242 = (0 /* ty=int32 */, %x45);
      %243 = (%out_07,);
      let %v59: () = vm.invoke_tvm_op(%233, %242, %243) /* ty=() */;
      let %x46: Tensor[(?, ?), float32] = %out_07;
      let %storage_068: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][68]) /* ty=Storage[] */;
      let %tensor_060: Tensor[(2), int64] = memory.alloc_tensor(%storage_068, 0 /* ty=int64 */, meta[relay.Constant][37] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][68]) /* ty=Tensor[(2), int64] */;
      %248 = fn (%p058: int64, %p121: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
        %244 = subtract(300 /* ty=int64 */, %p058) /* ty=int64 */;
        %245 = expand_dims(%244, axis=0) /* ty=Tensor[(1), int64] */;
        %246 = cast(%245, dtype="int64") /* ty=Tensor[(1), int64] */;
        %247 = (%246, %p121);
        concatenate(%247) /* ty=Tensor[(2), int64] */
      };
      %249 = (%x29, %x44);
      %250 = (%tensor_060,);
      let %v60: () = vm.invoke_tvm_op(%248, %249, %250) /* ty=() */;
      let %x47: Tensor[(2), int64] = %tensor_060;
      let %in_shape_08: int32 = device_copy(0 /* ty=int32 */, meta[relay.attrs.DeviceCopyAttrs][10]) /* ty=int32 */;
      let %in_shape_14: Tensor[(2), int64] = device_copy(%x47, meta[relay.attrs.DeviceCopyAttrs][11]) /* ty=Tensor[(2), int64] */;
      let %storage_069: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][69]) /* ty=Storage[] */;
      let %tensor_061: Tensor[(2), int64] = memory.alloc_tensor(%storage_069, 0 /* ty=int64 */, meta[relay.Constant][38] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][69]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_08: Tensor[(2), int64] = %tensor_061;
      %251 = fn (%p059: int32, %p122: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p059, %p122, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      %252 = (%in_shape_08, %in_shape_14);
      %253 = (%shape_func_out_08,);
      let %shape_func8: () = vm.shape_func(%251, %252, %253, meta[relay.attrs.ShapeFuncAttrs][8]) /* ty=() */;
      let %storage_070: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][70]) /* ty=Storage[] */;
      let %tensor_062: int64 = memory.alloc_tensor(%storage_070, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][70]) /* ty=int64 */;
      %254 = fn (%p060: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p060) /* ty=int64 */
      };
      %255 = (%shape_func_out_08,);
      %256 = (%tensor_062,);
      let %v61: () = vm.invoke_tvm_op(%254, %255, %256) /* ty=() */;
      let %storage_071: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][71]) /* ty=Storage[] */;
      let %tensor_063: int64 = memory.alloc_tensor(%storage_071, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][71]) /* ty=int64 */;
      %257 = fn (%p061: int64, Primitive=1) -> int64 {
        multiply(%p061, 4 /* ty=int64 */) /* ty=int64 */
      };
      %258 = (%tensor_062,);
      %259 = (%tensor_063,);
      let %v62: () = vm.invoke_tvm_op(%257, %258, %259) /* ty=() */;
      let %storage_072: Storage[] = memory.alloc_storage(%tensor_063, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][72]) /* ty=Storage[] */;
      let %out_08: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_072, 0 /* ty=int64 */, %shape_func_out_08, meta[relay.attrs.AllocTensorAttrs][72]) /* ty=Tensor[(?, ?), float32] */;
      %260 = (0 /* ty=int32 */, %x47);
      %261 = (%out_08,);
      let %v63: () = vm.invoke_tvm_op(%251, %260, %261) /* ty=() */;
      let %x48: Tensor[(?, ?), float32] = %out_08;
      let %in_shape_09: Tensor[(2), int64] = vm.shape_of(%x46, meta[relay.attrs.ShapeOfAttrs][6]) /* ty=Tensor[(2), int64] */;
      let %in_shape_15: Tensor[(2), int64] = vm.shape_of(%x42, meta[relay.attrs.ShapeOfAttrs][7]) /* ty=Tensor[(2), int64] */;
      let %in_shape_22: Tensor[(2), int64] = vm.shape_of(%x48, meta[relay.attrs.ShapeOfAttrs][8]) /* ty=Tensor[(2), int64] */;
      let %storage_073: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][73]) /* ty=Storage[] */;
      let %tensor_064: Tensor[(2), int64] = memory.alloc_tensor(%storage_073, 0 /* ty=int64 */, meta[relay.Constant][39] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][73]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_09: Tensor[(2), int64] = %tensor_064;
      %265 = fn (%p062: Tensor[(?, ?), float32], %p123: Tensor[(?, ?), float32], %p210: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
        %262 = reshape(%p062, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %263 = reshape(%p210, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %264 = (%262, %p123, %263);
        concatenate(%264) /* ty=Tensor[(?, ?), float32] */
      };
      %266 = (%in_shape_09, %in_shape_15, %in_shape_22);
      %267 = (%shape_func_out_09,);
      let %shape_func9: () = vm.shape_func(%265, %266, %267, meta[relay.attrs.ShapeFuncAttrs][9]) /* ty=() */;
      let %storage_074: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][74]) /* ty=Storage[] */;
      let %tensor_065: int64 = memory.alloc_tensor(%storage_074, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][74]) /* ty=int64 */;
      %268 = fn (%p063: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p063) /* ty=int64 */
      };
      %269 = (%shape_func_out_09,);
      %270 = (%tensor_065,);
      let %v64: () = vm.invoke_tvm_op(%268, %269, %270) /* ty=() */;
      let %storage_075: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][75]) /* ty=Storage[] */;
      let %tensor_066: int64 = memory.alloc_tensor(%storage_075, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][75]) /* ty=int64 */;
      %271 = fn (%p064: int64, Primitive=1) -> int64 {
        multiply(%p064, 4 /* ty=int64 */) /* ty=int64 */
      };
      %272 = (%tensor_065,);
      %273 = (%tensor_066,);
      let %v65: () = vm.invoke_tvm_op(%271, %272, %273) /* ty=() */;
      let %storage_076: Storage[] = memory.alloc_storage(%tensor_066, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][76]) /* ty=Storage[] */;
      let %out_09: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_076, 0 /* ty=int64 */, %shape_func_out_09, meta[relay.attrs.AllocTensorAttrs][76]) /* ty=Tensor[(?, ?), float32] */;
      %274 = (%x46, %x42, %x48);
      %275 = (%out_09,);
      let %v66: () = vm.invoke_tvm_op(%265, %274, %275) /* ty=() */;
      let %x49: Tensor[(?, ?), float32] = %out_09;
      let %storage_077: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][77]) /* ty=Storage[] */;
      let %tensor_067: Tensor[(2), int32] = memory.alloc_tensor(%storage_077, 0 /* ty=int64 */, meta[relay.Constant][40] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][77]) /* ty=Tensor[(2), int32] */;
      %276 = fn (%p065: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p065, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %277 = (%x49,);
      %278 = (%tensor_067,);
      let %v67: () = vm.invoke_tvm_op(%276, %277, %278) /* ty=() */;
      let %x50: Tensor[(2), int32] = %tensor_067;
      let %storage_078: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][78]) /* ty=Storage[] */;
      let %tensor_068: Tensor[(2), int32] = memory.alloc_tensor(%storage_078, 0 /* ty=int64 */, meta[relay.Constant][41] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][78]) /* ty=Tensor[(2), int32] */;
      %281 = fn (%p066: Tensor[(2), bool], %p124: Tensor[(2), int32], %p211: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
        %279 = cast_like(%p211, %p124) /* ty=Tensor[(2), int32] */;
        %280 = add(%p124, %279) /* ty=Tensor[(2), int32] */;
        where(%p066, %280, %p124) /* ty=Tensor[(2), int32] */
      };
      %282 = (meta[relay.Constant][42] /* ty=Tensor[(2), bool] */, meta[relay.Constant][43] /* ty=Tensor[(2), int32] */, %x50);
      %283 = (%tensor_068,);
      let %v68: () = vm.invoke_tvm_op(%281, %282, %283) /* ty=() */;
      let %x51: Tensor[(2), int32] = %tensor_068;
      let %storage_079: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][79]) /* ty=Storage[] */;
      let %tensor_069: Tensor[(2), int32] = memory.alloc_tensor(%storage_079, 0 /* ty=int64 */, meta[relay.Constant][44] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][79]) /* ty=Tensor[(2), int32] */;
      %284 = fn (%p067: Tensor[(2), int32], %p125: Tensor[(1), int32], %p212: Tensor[(1), int32], Primitive=1) -> Tensor[(2), int32] {
        scatter(%p067, %p125, %p212, meta[relay.attrs.ScatterAttrs][2]) /* ty=Tensor[(2), int32] */
      };
      %285 = (%x50, meta[relay.Constant][21] /* ty=Tensor[(1), int32] */, meta[relay.Constant][45] /* ty=Tensor[(1), int32] */);
      %286 = (%tensor_069,);
      let %v69: () = vm.invoke_tvm_op(%284, %285, %286) /* ty=() */;
      let %x52: Tensor[(2), int32] = %tensor_069;
      let %storage_080: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][80]) /* ty=Storage[] */;
      let %tensor_070: Tensor[(2), int64] = memory.alloc_tensor(%storage_080, 0 /* ty=int64 */, meta[relay.Constant][46] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][80]) /* ty=Tensor[(2), int64] */;
      %287 = fn (%p068: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p068, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %288 = (%x52,);
      %289 = (%tensor_070,);
      let %v70: () = vm.invoke_tvm_op(%287, %288, %289) /* ty=() */;
      let %x53: Tensor[(2), int64] = %tensor_070;
      let %in_shape_010: Tensor[(2), int64] = vm.shape_of(%x49, meta[relay.attrs.ShapeOfAttrs][9]) /* ty=Tensor[(2), int64] */;
      let %in_shape_16: Tensor[(2), int32] = device_copy(%x51, meta[relay.attrs.DeviceCopyAttrs][12]) /* ty=Tensor[(2), int32] */;
      let %in_shape_23: Tensor[(2), int64] = device_copy(%x53, meta[relay.attrs.DeviceCopyAttrs][13]) /* ty=Tensor[(2), int64] */;
      let %in_shape_32: Tensor[(2), int32] = device_copy(meta[relay.Constant][47] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][14]) /* ty=Tensor[(2), int32] */;
      let %storage_081: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][81]) /* ty=Storage[] */;
      let %tensor_071: Tensor[(2), int64] = memory.alloc_tensor(%storage_081, 0 /* ty=int64 */, meta[relay.Constant][48] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][81]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_010: Tensor[(2), int64] = %tensor_071;
      %290 = fn (%p069: Tensor[(?, ?), float32], %p126: Tensor[(2), int32], %p213: Tensor[(2), int64], %p34: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p069, %p126, %p213, %p34, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %291 = (%in_shape_010, %in_shape_16, %in_shape_23, %in_shape_32);
      %292 = (%shape_func_out_010,);
      let %shape_func10: () = vm.shape_func(%290, %291, %292, meta[relay.attrs.ShapeFuncAttrs][10]) /* ty=() */;
      let %storage_082: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][82]) /* ty=Storage[] */;
      let %tensor_072: int64 = memory.alloc_tensor(%storage_082, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][82]) /* ty=int64 */;
      %293 = fn (%p070: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p070) /* ty=int64 */
      };
      %294 = (%shape_func_out_010,);
      %295 = (%tensor_072,);
      let %v71: () = vm.invoke_tvm_op(%293, %294, %295) /* ty=() */;
      let %storage_083: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][83]) /* ty=Storage[] */;
      let %tensor_073: int64 = memory.alloc_tensor(%storage_083, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][83]) /* ty=int64 */;
      %296 = fn (%p071: int64, Primitive=1) -> int64 {
        multiply(%p071, 4 /* ty=int64 */) /* ty=int64 */
      };
      %297 = (%tensor_072,);
      %298 = (%tensor_073,);
      let %v72: () = vm.invoke_tvm_op(%296, %297, %298) /* ty=() */;
      let %storage_084: Storage[] = memory.alloc_storage(%tensor_073, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][84]) /* ty=Storage[] */;
      let %out_010: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_084, 0 /* ty=int64 */, %shape_func_out_010, meta[relay.attrs.AllocTensorAttrs][84]) /* ty=Tensor[(?, ?), float32] */;
      %299 = (%x49, %x51, %x53, meta[relay.Constant][47] /* ty=Tensor[(2), int32] */);
      %300 = (%out_010,);
      let %v73: () = vm.invoke_tvm_op(%290, %299, %300) /* ty=() */;
      let %x54: Tensor[(?, ?), float32] = %out_010;
      let %storage_085: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][85]) /* ty=Storage[] */;
      let %tensor_074: Tensor[(2), int32] = memory.alloc_tensor(%storage_085, 0 /* ty=int64 */, meta[relay.Constant][49] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][85]) /* ty=Tensor[(2), int32] */;
      %301 = fn (%p072: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p072, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %302 = (%x54,);
      %303 = (%tensor_074,);
      let %v74: () = vm.invoke_tvm_op(%301, %302, %303) /* ty=() */;
      let %x55: Tensor[(2), int32] = %tensor_074;
      let %storage_086: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][86]) /* ty=Storage[] */;
      let %tensor_075: Tensor[(2), int32] = memory.alloc_tensor(%storage_086, 0 /* ty=int64 */, meta[relay.Constant][50] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][86]) /* ty=Tensor[(2), int32] */;
      %306 = fn (%p073: Tensor[(2), bool], %p127: Tensor[(2), int32], %p214: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
        %304 = cast_like(%p214, %p127) /* ty=Tensor[(2), int32] */;
        %305 = add(%p127, %304) /* ty=Tensor[(2), int32] */;
        where(%p073, %305, %p127) /* ty=Tensor[(2), int32] */
      };
      %307 = (meta[relay.Constant][51] /* ty=Tensor[(2), bool] */, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */, %x55);
      %308 = (%tensor_075,);
      let %v75: () = vm.invoke_tvm_op(%306, %307, %308) /* ty=() */;
      let %x56: Tensor[(2), int32] = %tensor_075;
      let %storage_087: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][87]) /* ty=Storage[] */;
      let %tensor_076: Tensor[(2), int64] = memory.alloc_tensor(%storage_087, 0 /* ty=int64 */, meta[relay.Constant][53] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][87]) /* ty=Tensor[(2), int64] */;
      %309 = fn (%p074: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p074, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %310 = (%x55,);
      %311 = (%tensor_076,);
      let %v76: () = vm.invoke_tvm_op(%309, %310, %311) /* ty=() */;
      let %x57: Tensor[(2), int64] = %tensor_076;
      let %in_shape_011: Tensor[(2), int64] = vm.shape_of(%x54, meta[relay.attrs.ShapeOfAttrs][10]) /* ty=Tensor[(2), int64] */;
      let %in_shape_17: Tensor[(2), int32] = device_copy(%x56, meta[relay.attrs.DeviceCopyAttrs][15]) /* ty=Tensor[(2), int32] */;
      let %in_shape_24: Tensor[(2), int64] = device_copy(%x57, meta[relay.attrs.DeviceCopyAttrs][16]) /* ty=Tensor[(2), int64] */;
      let %in_shape_33: Tensor[(2), int32] = device_copy(meta[relay.Constant][54] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][17]) /* ty=Tensor[(2), int32] */;
      let %storage_088: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][88]) /* ty=Storage[] */;
      let %tensor_077: Tensor[(2), int64] = memory.alloc_tensor(%storage_088, 0 /* ty=int64 */, meta[relay.Constant][55] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][88]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_011: Tensor[(2), int64] = %tensor_077;
      %312 = fn (%p075: Tensor[(?, ?), float32], %p128: Tensor[(2), int32], %p215: Tensor[(2), int64], %p35: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p075, %p128, %p215, %p35, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %313 = (%in_shape_011, %in_shape_17, %in_shape_24, %in_shape_33);
      %314 = (%shape_func_out_011,);
      let %shape_func11: () = vm.shape_func(%312, %313, %314, meta[relay.attrs.ShapeFuncAttrs][11]) /* ty=() */;
      let %storage_089: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][89]) /* ty=Storage[] */;
      let %tensor_078: int64 = memory.alloc_tensor(%storage_089, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][89]) /* ty=int64 */;
      %315 = fn (%p076: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p076) /* ty=int64 */
      };
      %316 = (%shape_func_out_011,);
      %317 = (%tensor_078,);
      let %v77: () = vm.invoke_tvm_op(%315, %316, %317) /* ty=() */;
      let %storage_090: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][90]) /* ty=Storage[] */;
      let %tensor_079: int64 = memory.alloc_tensor(%storage_090, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][90]) /* ty=int64 */;
      %318 = fn (%p077: int64, Primitive=1) -> int64 {
        multiply(%p077, 4 /* ty=int64 */) /* ty=int64 */
      };
      %319 = (%tensor_078,);
      %320 = (%tensor_079,);
      let %v78: () = vm.invoke_tvm_op(%318, %319, %320) /* ty=() */;
      let %storage_091: Storage[] = memory.alloc_storage(%tensor_079, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][91]) /* ty=Storage[] */;
      let %out_011: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_091, 0 /* ty=int64 */, %shape_func_out_011, meta[relay.attrs.AllocTensorAttrs][91]) /* ty=Tensor[(?, ?), float32] */;
      %321 = (%x54, %x56, %x57, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */);
      %322 = (%out_011,);
      let %v79: () = vm.invoke_tvm_op(%312, %321, %322) /* ty=() */;
      let %x58: Tensor[(?, ?), float32] = %out_011;
      let %storage_092: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][92]) /* ty=Storage[] */;
      let %tensor_080: Tensor[(2), int32] = memory.alloc_tensor(%storage_092, 0 /* ty=int64 */, meta[relay.Constant][56] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][92]) /* ty=Tensor[(2), int32] */;
      %323 = fn (%p078: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p078, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %324 = (%x58,);
      %325 = (%tensor_080,);
      let %v80: () = vm.invoke_tvm_op(%323, %324, %325) /* ty=() */;
      let %x59: Tensor[(2), int32] = %tensor_080;
      let %storage_093: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][93]) /* ty=Storage[] */;
      let %tensor_081: Tensor[(1), int64] = memory.alloc_tensor(%storage_093, 0 /* ty=int64 */, meta[relay.Constant][57] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][93]) /* ty=Tensor[(1), int64] */;
      %328 = fn (%p079: Tensor[(2), int32], Primitive=1) -> Tensor[(1), int64] {
        %326 = take(%p079, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
        %327 = expand_dims(%326, axis=0) /* ty=Tensor[(1), int32] */;
        cast(%327, dtype="int64") /* ty=Tensor[(1), int64] */
      };
      %329 = (%x59,);
      %330 = (%tensor_081,);
      let %v81: () = vm.invoke_tvm_op(%328, %329, %330) /* ty=() */;
      let %x60: Tensor[(1), int64] = %tensor_081;
      let %storage_094: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][94]) /* ty=Storage[] */;
      let %tensor_082: Tensor[(2), int64] = memory.alloc_tensor(%storage_094, 0 /* ty=int64 */, meta[relay.Constant][58] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][94]) /* ty=Tensor[(2), int64] */;
      %334 = fn (%p080: Tensor[(1), int64], %p129: int64, Primitive=1) -> Tensor[(2), int64] {
        %331 = expand_dims(%p129, axis=0) /* ty=Tensor[(1), int64] */;
        %332 = cast(%331, dtype="int64") /* ty=Tensor[(1), int64] */;
        %333 = (%p080, %332);
        concatenate(%333) /* ty=Tensor[(2), int64] */
      };
      %335 = (%x60, %x34);
      %336 = (%tensor_082,);
      let %v82: () = vm.invoke_tvm_op(%334, %335, %336) /* ty=() */;
      let %x61: Tensor[(2), int64] = %tensor_082;
      let %in_shape_012: int32 = device_copy(0 /* ty=int32 */, meta[relay.attrs.DeviceCopyAttrs][18]) /* ty=int32 */;
      let %in_shape_18: Tensor[(2), int64] = device_copy(%x61, meta[relay.attrs.DeviceCopyAttrs][19]) /* ty=Tensor[(2), int64] */;
      let %storage_095: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][95]) /* ty=Storage[] */;
      let %tensor_083: Tensor[(2), int64] = memory.alloc_tensor(%storage_095, 0 /* ty=int64 */, meta[relay.Constant][59] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][95]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_012: Tensor[(2), int64] = %tensor_083;
      %337 = fn (%p081: int32, %p130: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p081, %p130, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      %338 = (%in_shape_012, %in_shape_18);
      %339 = (%shape_func_out_012,);
      let %shape_func12: () = vm.shape_func(%337, %338, %339, meta[relay.attrs.ShapeFuncAttrs][12]) /* ty=() */;
      let %storage_096: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][96]) /* ty=Storage[] */;
      let %tensor_084: int64 = memory.alloc_tensor(%storage_096, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][96]) /* ty=int64 */;
      %340 = fn (%p082: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p082) /* ty=int64 */
      };
      %341 = (%shape_func_out_012,);
      %342 = (%tensor_084,);
      let %v83: () = vm.invoke_tvm_op(%340, %341, %342) /* ty=() */;
      let %storage_097: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][97]) /* ty=Storage[] */;
      let %tensor_085: int64 = memory.alloc_tensor(%storage_097, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][97]) /* ty=int64 */;
      %343 = fn (%p083: int64, Primitive=1) -> int64 {
        multiply(%p083, 4 /* ty=int64 */) /* ty=int64 */
      };
      %344 = (%tensor_084,);
      %345 = (%tensor_085,);
      let %v84: () = vm.invoke_tvm_op(%343, %344, %345) /* ty=() */;
      let %storage_098: Storage[] = memory.alloc_storage(%tensor_085, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][98]) /* ty=Storage[] */;
      let %out_012: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_098, 0 /* ty=int64 */, %shape_func_out_012, meta[relay.attrs.AllocTensorAttrs][98]) /* ty=Tensor[(?, ?), float32] */;
      %346 = (0 /* ty=int32 */, %x61);
      %347 = (%out_012,);
      let %v85: () = vm.invoke_tvm_op(%337, %346, %347) /* ty=() */;
      let %x62: Tensor[(?, ?), float32] = %out_012;
      let %storage_099: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][99]) /* ty=Storage[] */;
      let %tensor_086: Tensor[(2), int64] = memory.alloc_tensor(%storage_099, 0 /* ty=int64 */, meta[relay.Constant][60] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][99]) /* ty=Tensor[(2), int64] */;
      %352 = fn (%p084: Tensor[(1), int64], %p131: int64, Primitive=1) -> Tensor[(2), int64] {
        %348 = subtract(300 /* ty=int64 */, %p131) /* ty=int64 */;
        %349 = expand_dims(%348, axis=0) /* ty=Tensor[(1), int64] */;
        %350 = cast(%349, dtype="int64") /* ty=Tensor[(1), int64] */;
        %351 = (%p084, %350);
        concatenate(%351) /* ty=Tensor[(2), int64] */
      };
      %353 = (%x60, %x39);
      %354 = (%tensor_086,);
      let %v86: () = vm.invoke_tvm_op(%352, %353, %354) /* ty=() */;
      let %x63: Tensor[(2), int64] = %tensor_086;
      let %in_shape_013: int32 = device_copy(0 /* ty=int32 */, meta[relay.attrs.DeviceCopyAttrs][20]) /* ty=int32 */;
      let %in_shape_19: Tensor[(2), int64] = device_copy(%x63, meta[relay.attrs.DeviceCopyAttrs][21]) /* ty=Tensor[(2), int64] */;
      let %storage_0100: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][100]) /* ty=Storage[] */;
      let %tensor_087: Tensor[(2), int64] = memory.alloc_tensor(%storage_0100, 0 /* ty=int64 */, meta[relay.Constant][61] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][100]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_013: Tensor[(2), int64] = %tensor_087;
      %355 = fn (%p085: int32, %p132: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.full(%p085, %p132, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */
      };
      %356 = (%in_shape_013, %in_shape_19);
      %357 = (%shape_func_out_013,);
      let %shape_func13: () = vm.shape_func(%355, %356, %357, meta[relay.attrs.ShapeFuncAttrs][13]) /* ty=() */;
      let %storage_0101: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][101]) /* ty=Storage[] */;
      let %tensor_088: int64 = memory.alloc_tensor(%storage_0101, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][101]) /* ty=int64 */;
      %358 = fn (%p086: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p086) /* ty=int64 */
      };
      %359 = (%shape_func_out_013,);
      %360 = (%tensor_088,);
      let %v87: () = vm.invoke_tvm_op(%358, %359, %360) /* ty=() */;
      let %storage_0102: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][102]) /* ty=Storage[] */;
      let %tensor_089: int64 = memory.alloc_tensor(%storage_0102, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][102]) /* ty=int64 */;
      %361 = fn (%p087: int64, Primitive=1) -> int64 {
        multiply(%p087, 4 /* ty=int64 */) /* ty=int64 */
      };
      %362 = (%tensor_088,);
      %363 = (%tensor_089,);
      let %v88: () = vm.invoke_tvm_op(%361, %362, %363) /* ty=() */;
      let %storage_0103: Storage[] = memory.alloc_storage(%tensor_089, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][103]) /* ty=Storage[] */;
      let %out_013: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0103, 0 /* ty=int64 */, %shape_func_out_013, meta[relay.attrs.AllocTensorAttrs][103]) /* ty=Tensor[(?, ?), float32] */;
      %364 = (0 /* ty=int32 */, %x63);
      %365 = (%out_013,);
      let %v89: () = vm.invoke_tvm_op(%355, %364, %365) /* ty=() */;
      let %x64: Tensor[(?, ?), float32] = %out_013;
      let %in_shape_014: Tensor[(2), int64] = vm.shape_of(%x62, meta[relay.attrs.ShapeOfAttrs][11]) /* ty=Tensor[(2), int64] */;
      let %in_shape_110: Tensor[(2), int64] = vm.shape_of(%x58, meta[relay.attrs.ShapeOfAttrs][12]) /* ty=Tensor[(2), int64] */;
      let %in_shape_25: Tensor[(2), int64] = vm.shape_of(%x64, meta[relay.attrs.ShapeOfAttrs][13]) /* ty=Tensor[(2), int64] */;
      let %storage_0104: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][104]) /* ty=Storage[] */;
      let %tensor_090: Tensor[(2), int64] = memory.alloc_tensor(%storage_0104, 0 /* ty=int64 */, meta[relay.Constant][62] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][104]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_014: Tensor[(2), int64] = %tensor_090;
      %369 = fn (%p088: Tensor[(?, ?), float32], %p133: Tensor[(?, ?), float32], %p216: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
        %366 = reshape(%p088, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %367 = reshape(%p216, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %368 = (%366, %p133, %367);
        concatenate(%368, axis=1) /* ty=Tensor[(?, ?), float32] */
      };
      %370 = (%in_shape_014, %in_shape_110, %in_shape_25);
      %371 = (%shape_func_out_014,);
      let %shape_func14: () = vm.shape_func(%369, %370, %371, meta[relay.attrs.ShapeFuncAttrs][14]) /* ty=() */;
      let %storage_0105: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][105]) /* ty=Storage[] */;
      let %tensor_091: int64 = memory.alloc_tensor(%storage_0105, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][105]) /* ty=int64 */;
      %372 = fn (%p089: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p089) /* ty=int64 */
      };
      %373 = (%shape_func_out_014,);
      %374 = (%tensor_091,);
      let %v90: () = vm.invoke_tvm_op(%372, %373, %374) /* ty=() */;
      let %storage_0106: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][106]) /* ty=Storage[] */;
      let %tensor_092: int64 = memory.alloc_tensor(%storage_0106, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][106]) /* ty=int64 */;
      %375 = fn (%p090: int64, Primitive=1) -> int64 {
        multiply(%p090, 4 /* ty=int64 */) /* ty=int64 */
      };
      %376 = (%tensor_091,);
      %377 = (%tensor_092,);
      let %v91: () = vm.invoke_tvm_op(%375, %376, %377) /* ty=() */;
      let %storage_0107: Storage[] = memory.alloc_storage(%tensor_092, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][107]) /* ty=Storage[] */;
      let %out_014: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0107, 0 /* ty=int64 */, %shape_func_out_014, meta[relay.attrs.AllocTensorAttrs][107]) /* ty=Tensor[(?, ?), float32] */;
      %378 = (%x62, %x58, %x64);
      %379 = (%out_014,);
      let %v92: () = vm.invoke_tvm_op(%369, %378, %379) /* ty=() */;
      let %x65: Tensor[(?, ?), float32] = %out_014;
      let %storage_0108: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][108]) /* ty=Storage[] */;
      let %tensor_093: Tensor[(2), int32] = memory.alloc_tensor(%storage_0108, 0 /* ty=int64 */, meta[relay.Constant][63] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][108]) /* ty=Tensor[(2), int32] */;
      %380 = fn (%p091: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p091, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %381 = (%x65,);
      %382 = (%tensor_093,);
      let %v93: () = vm.invoke_tvm_op(%380, %381, %382) /* ty=() */;
      let %x66: Tensor[(2), int32] = %tensor_093;
      let %storage_0109: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][109]) /* ty=Storage[] */;
      let %tensor_094: Tensor[(2), int32] = memory.alloc_tensor(%storage_0109, 0 /* ty=int64 */, meta[relay.Constant][64] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][109]) /* ty=Tensor[(2), int32] */;
      %385 = fn (%p092: Tensor[(2), bool], %p134: Tensor[(2), int32], %p217: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
        %383 = cast_like(%p217, %p134) /* ty=Tensor[(2), int32] */;
        %384 = add(%p134, %383) /* ty=Tensor[(2), int32] */;
        where(%p092, %384, %p134) /* ty=Tensor[(2), int32] */
      };
      %386 = (meta[relay.Constant][65] /* ty=Tensor[(2), bool] */, meta[relay.Constant][66] /* ty=Tensor[(2), int32] */, %x66);
      %387 = (%tensor_094,);
      let %v94: () = vm.invoke_tvm_op(%385, %386, %387) /* ty=() */;
      let %x67: Tensor[(2), int32] = %tensor_094;
      let %storage_0110: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][110]) /* ty=Storage[] */;
      let %tensor_095: Tensor[(2), int64] = memory.alloc_tensor(%storage_0110, 0 /* ty=int64 */, meta[relay.Constant][67] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][110]) /* ty=Tensor[(2), int64] */;
      %388 = fn (%p093: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p093, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %389 = (%x66,);
      %390 = (%tensor_095,);
      let %v95: () = vm.invoke_tvm_op(%388, %389, %390) /* ty=() */;
      let %x68: Tensor[(2), int64] = %tensor_095;
      let %in_shape_015: Tensor[(2), int64] = vm.shape_of(%x65, meta[relay.attrs.ShapeOfAttrs][14]) /* ty=Tensor[(2), int64] */;
      let %in_shape_111: Tensor[(2), int32] = device_copy(%x67, meta[relay.attrs.DeviceCopyAttrs][22]) /* ty=Tensor[(2), int32] */;
      let %in_shape_26: Tensor[(2), int64] = device_copy(%x68, meta[relay.attrs.DeviceCopyAttrs][23]) /* ty=Tensor[(2), int64] */;
      let %in_shape_34: Tensor[(2), int32] = device_copy(meta[relay.Constant][68] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][24]) /* ty=Tensor[(2), int32] */;
      let %storage_0111: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][111]) /* ty=Storage[] */;
      let %tensor_096: Tensor[(2), int64] = memory.alloc_tensor(%storage_0111, 0 /* ty=int64 */, meta[relay.Constant][69] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][111]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_015: Tensor[(2), int64] = %tensor_096;
      %391 = fn (%p094: Tensor[(?, ?), float32], %p135: Tensor[(2), int32], %p218: Tensor[(2), int64], %p36: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p094, %p135, %p218, %p36, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %392 = (%in_shape_015, %in_shape_111, %in_shape_26, %in_shape_34);
      %393 = (%shape_func_out_015,);
      let %shape_func15: () = vm.shape_func(%391, %392, %393, meta[relay.attrs.ShapeFuncAttrs][15]) /* ty=() */;
      let %storage_0112: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][112]) /* ty=Storage[] */;
      let %tensor_097: int64 = memory.alloc_tensor(%storage_0112, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][112]) /* ty=int64 */;
      %394 = fn (%p095: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p095) /* ty=int64 */
      };
      %395 = (%shape_func_out_015,);
      %396 = (%tensor_097,);
      let %v96: () = vm.invoke_tvm_op(%394, %395, %396) /* ty=() */;
      let %storage_0113: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][113]) /* ty=Storage[] */;
      let %tensor_098: int64 = memory.alloc_tensor(%storage_0113, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][113]) /* ty=int64 */;
      %397 = fn (%p096: int64, Primitive=1) -> int64 {
        multiply(%p096, 4 /* ty=int64 */) /* ty=int64 */
      };
      %398 = (%tensor_097,);
      %399 = (%tensor_098,);
      let %v97: () = vm.invoke_tvm_op(%397, %398, %399) /* ty=() */;
      let %storage_0114: Storage[] = memory.alloc_storage(%tensor_098, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][114]) /* ty=Storage[] */;
      let %out_015: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0114, 0 /* ty=int64 */, %shape_func_out_015, meta[relay.attrs.AllocTensorAttrs][114]) /* ty=Tensor[(?, ?), float32] */;
      %400 = (%x65, %x67, %x68, meta[relay.Constant][68] /* ty=Tensor[(2), int32] */);
      %401 = (%out_015,);
      let %v98: () = vm.invoke_tvm_op(%391, %400, %401) /* ty=() */;
      let %x69: Tensor[(?, ?), float32] = %out_015;
      let %storage_0115: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][115]) /* ty=Storage[] */;
      let %tensor_099: Tensor[(2), int32] = memory.alloc_tensor(%storage_0115, 0 /* ty=int64 */, meta[relay.Constant][70] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][115]) /* ty=Tensor[(2), int32] */;
      %402 = fn (%p097: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
        shape_of(%p097, dtype="int32") /* ty=Tensor[(2), int32] */
      };
      %403 = (%x69,);
      %404 = (%tensor_099,);
      let %v99: () = vm.invoke_tvm_op(%402, %403, %404) /* ty=() */;
      let %x70: Tensor[(2), int32] = %tensor_099;
      let %storage_0116: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][116]) /* ty=Storage[] */;
      let %tensor_0100: Tensor[(2), int32] = memory.alloc_tensor(%storage_0116, 0 /* ty=int64 */, meta[relay.Constant][71] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][116]) /* ty=Tensor[(2), int32] */;
      %407 = fn (%p098: Tensor[(2), bool], %p136: Tensor[(2), int32], %p219: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
        %405 = cast_like(%p219, %p136) /* ty=Tensor[(2), int32] */;
        %406 = add(%p136, %405) /* ty=Tensor[(2), int32] */;
        where(%p098, %406, %p136) /* ty=Tensor[(2), int32] */
      };
      %408 = (meta[relay.Constant][72] /* ty=Tensor[(2), bool] */, meta[relay.Constant][73] /* ty=Tensor[(2), int32] */, %x70);
      %409 = (%tensor_0100,);
      let %v100: () = vm.invoke_tvm_op(%407, %408, %409) /* ty=() */;
      let %x71: Tensor[(2), int32] = %tensor_0100;
      let %storage_0117: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][117]) /* ty=Storage[] */;
      let %tensor_0101: Tensor[(2), int32] = memory.alloc_tensor(%storage_0117, 0 /* ty=int64 */, meta[relay.Constant][74] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][117]) /* ty=Tensor[(2), int32] */;
      %410 = fn (%p099: Tensor[(2), int32], %p137: Tensor[(1), int32], %p220: Tensor[(1), int32], Primitive=1) -> Tensor[(2), int32] {
        scatter(%p099, %p137, %p220, meta[relay.attrs.ScatterAttrs][3]) /* ty=Tensor[(2), int32] */
      };
      %411 = (%x70, %x1, meta[relay.Constant][45] /* ty=Tensor[(1), int32] */);
      %412 = (%tensor_0101,);
      let %v101: () = vm.invoke_tvm_op(%410, %411, %412) /* ty=() */;
      let %x72: Tensor[(2), int32] = %tensor_0101;
      let %storage_0118: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][118]) /* ty=Storage[] */;
      let %tensor_0102: Tensor[(2), int64] = memory.alloc_tensor(%storage_0118, 0 /* ty=int64 */, meta[relay.Constant][75] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][118]) /* ty=Tensor[(2), int64] */;
      %413 = fn (%p0100: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
        cast(%p0100, dtype="int64") /* ty=Tensor[(2), int64] */
      };
      %414 = (%x72,);
      %415 = (%tensor_0102,);
      let %v102: () = vm.invoke_tvm_op(%413, %414, %415) /* ty=() */;
      let %x73: Tensor[(2), int64] = %tensor_0102;
      let %in_shape_016: Tensor[(2), int64] = vm.shape_of(%x69, meta[relay.attrs.ShapeOfAttrs][15]) /* ty=Tensor[(2), int64] */;
      let %in_shape_112: Tensor[(2), int32] = device_copy(%x71, meta[relay.attrs.DeviceCopyAttrs][25]) /* ty=Tensor[(2), int32] */;
      let %in_shape_27: Tensor[(2), int64] = device_copy(%x73, meta[relay.attrs.DeviceCopyAttrs][26]) /* ty=Tensor[(2), int64] */;
      let %in_shape_35: Tensor[(2), int32] = device_copy(meta[relay.Constant][76] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][27]) /* ty=Tensor[(2), int32] */;
      let %storage_0119: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][119]) /* ty=Storage[] */;
      let %tensor_0103: Tensor[(2), int64] = memory.alloc_tensor(%storage_0119, 0 /* ty=int64 */, meta[relay.Constant][77] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][119]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_016: Tensor[(2), int64] = %tensor_0103;
      %416 = fn (%p0101: Tensor[(?, ?), float32], %p138: Tensor[(2), int32], %p221: Tensor[(2), int64], %p37: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
        dyn.strided_slice(%p0101, %p138, %p221, %p37, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
      };
      %417 = (%in_shape_016, %in_shape_112, %in_shape_27, %in_shape_35);
      %418 = (%shape_func_out_016,);
      let %shape_func16: () = vm.shape_func(%416, %417, %418, meta[relay.attrs.ShapeFuncAttrs][16]) /* ty=() */;
      let %storage_0120: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][120]) /* ty=Storage[] */;
      let %tensor_0104: int64 = memory.alloc_tensor(%storage_0120, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][120]) /* ty=int64 */;
      %419 = fn (%p0102: Tensor[(2), int64], Primitive=1) -> int64 {
        prod(%p0102) /* ty=int64 */
      };
      %420 = (%shape_func_out_016,);
      %421 = (%tensor_0104,);
      let %v103: () = vm.invoke_tvm_op(%419, %420, %421) /* ty=() */;
      let %storage_0121: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][121]) /* ty=Storage[] */;
      let %tensor_0105: int64 = memory.alloc_tensor(%storage_0121, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][121]) /* ty=int64 */;
      %422 = fn (%p0103: int64, Primitive=1) -> int64 {
        multiply(%p0103, 4 /* ty=int64 */) /* ty=int64 */
      };
      %423 = (%tensor_0104,);
      %424 = (%tensor_0105,);
      let %v104: () = vm.invoke_tvm_op(%422, %423, %424) /* ty=() */;
      let %storage_0122: Storage[] = memory.alloc_storage(%tensor_0105, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][122]) /* ty=Storage[] */;
      let %out_016: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0122, 0 /* ty=int64 */, %shape_func_out_016, meta[relay.attrs.AllocTensorAttrs][122]) /* ty=Tensor[(?, ?), float32] */;
      %425 = (%x69, %x71, %x73, meta[relay.Constant][76] /* ty=Tensor[(2), int32] */);
      %426 = (%out_016,);
      let %v105: () = vm.invoke_tvm_op(%416, %425, %426) /* ty=() */;
      let %x74: Tensor[(?, ?), float32] = %out_016;
      let %x75: List[Tensor[(?, ?), float32]] = Nil /* ty=List[Tensor[(?, ?), float32]] */;
      let %x76: List[Tensor[(?, ?), float32]] = Cons(%x74, %x75) /* ty=List[Tensor[(?, ?), float32]] */;
      let %x77: List[Tensor[(?, ?), float32]] = @concat(%res.6, %x76) /* ty=List[Tensor[(?, ?), float32]] */;
      %427 = @lifted_name8408068344935463616(%x, %x1) /* ty=fn (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) */;
      let %x78: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = %427(%x5, %x77, %v7286, %v7394) /* ty=(int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) */;
      %x78
    } else {
      let %x79: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = (%i.1, %res.6, %v7286, %v7394);
      %x79
    };
    %x4
  }
}

def @concat[A](%xs: List[A], %ys: List[A]) -> List[A] {
  let %x80: fn (A, List[A]) -> List[A] = @lifted_name4769082969410390021;
  let %x81: List[A] = @foldr(%x80, %ys, %xs) /* ty=List[A] */;
  %x81
}

def @map[A, B](%f: fn (A) -> B, %xs1: List[A]) -> List[B] {
  let %x82: List[B] = match (%xs1) {
    Cons(%x83: A, %rest: List[A]) => {
      let %x84: B = %f(%x83) /* ty=B */;
      let %x85: List[B] = @map(%f, %rest) /* ty=List[B] */;
      let %x86: List[B] = Cons(%x84, %x85) /* ty=List[B] */;
      %x86
    },
    Nil => {
      let %x87: List[B] = Nil /* ty=List[B] */;
      %x87
    },
  };
  %x82
}

def @tensor_array_stack_float32_any_any(%tensor_array: List[static_tensor_float32_any_any_t[]]) -> static_tensor_float32_any_any_any_t[] {
  let %x88: List[static_tensor_float32_any_any_any_t[]] = @map(@tensor_expand_dims_float32_any_any, %tensor_array) /* ty=List[static_tensor_float32_any_any_any_t[]] */;
  let %x89: static_tensor_float32_any_any_any_t[] = @hd(%x88) /* ty=static_tensor_float32_any_any_any_t[] */;
  let %x90: List[static_tensor_float32_any_any_any_t[]] = @tl(%x88) /* ty=List[static_tensor_float32_any_any_any_t[]] */;
  let %x91: static_tensor_float32_any_any_any_t[] = @foldl(@tensor_concatenate_float32_any_any_any, %x89, %x90) /* ty=static_tensor_float32_any_any_any_t[] */;
  %x91
}

def @tl[A](%xs2: List[A]) -> List[A] {
  let %x92: List[A] = match? (%xs2) {
    Cons(_, %rest1: List[A]) => {
      %rest1
    },
  };
  %x92
}

def @main(%input0: Tensor[(1, 3, 300, 300), float32], %model.backbone.body.conv1.weight: Tensor[(64, 3, 7, 7), float32], %model.backbone.body.bn1.weight: Tensor[(64), float32], %model.backbone.body.bn1.running_var: Tensor[(64), float32], %model.backbone.body.bn1.bias: Tensor[(64), float32], %model.backbone.body.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.0.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.downsample.1.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.1.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.1.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.1.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.2.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.2.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.2.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32], %model.backbone.body.layer2.0.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.0.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.0.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %model.backbone.body.layer2.0.downsample.1.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.1.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.1.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.1.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.2.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.2.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.2.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.3.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.3.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.3.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.body.layer3.0.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.0.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.0.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32], %model.backbone.body.layer3.0.downsample.1.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.1.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.1.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.1.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.2.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.2.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.2.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.3.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.3.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.3.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.4.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.4.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.4.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.5.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.5.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.5.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32], %model.backbone.body.layer4.0.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.0.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.0.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32], %model.backbone.body.layer4.0.downsample.1.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.1.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.1.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.1.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.2.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.2.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.2.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_mean: Tensor[(2048), float32], %model.backbone.fpn.inner_blocks.0.weight: Tensor[(256, 256, 1, 1), float32], %model.backbone.fpn.inner_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.fpn.inner_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.2.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.fpn.inner_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.3.weight: Tensor[(256, 2048, 1, 1), float32], %model.backbone.fpn.inner_blocks.3.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.0.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.1.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.3.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.3.bias: Tensor[(256), float32], %model.rpn.head.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.rpn.head.conv.bias: Tensor[(256), float32], %model.rpn.head.cls_logits.weight: Tensor[(3, 256, 1, 1), float32], %model.rpn.head.cls_logits.bias: Tensor[(3), float32], %model.rpn.head.bbox_pred.weight: Tensor[(12, 256, 1, 1), float32], %model.rpn.head.bbox_pred.bias: Tensor[(12), float32], %model.roi_heads.box_head.fc6.weight: Tensor[(1024, 12544), float32], %model.roi_heads.box_head.fc6.bias: Tensor[(1024), float32], %model.roi_heads.box_head.fc7.weight: Tensor[(1024, 1024), float32], %model.roi_heads.box_head.fc7.bias: Tensor[(1024), float32], %model.roi_heads.box_predictor.cls_score.weight: Tensor[(91, 1024), float32], %model.roi_heads.box_predictor.cls_score.bias: Tensor[(91), float32], %model.roi_heads.box_predictor.bbox_pred.weight: Tensor[(364, 1024), float32], %model.roi_heads.box_predictor.bbox_pred.bias: Tensor[(364), float32], %model.roi_heads.mask_head.mask_fcn1.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn1.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn2.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn2.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn3.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn3.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn4.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn4.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.conv5_mask.weight: Tensor[(256, 256, 2, 2), float32], %model.roi_heads.mask_predictor.conv5_mask.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.weight: Tensor[(91, 256, 1, 1), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.bias: Tensor[(91), float32]) -> (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) {
  let %x93: (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) = let %storage_0123: Storage[] = memory.alloc_storage(7680000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][123]) /* ty=Storage[] */;
  let %tensor_0106: Tensor[(1, 3, 800, 800), float32] = memory.alloc_tensor(%storage_0123, 0 /* ty=int64 */, meta[relay.Constant][78] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][123]) /* ty=Tensor[(1, 3, 800, 800), float32] */;
  %438 = fn (%p0104: Tensor[(1, 3, 300, 300), float32], %p139: Tensor[(3, 1, 1), float32], %p222: Tensor[(3, 1, 1), float32], Primitive=1) -> Tensor[(1, 3, 800, 800), float32] {
    %428 = split(%p0104, indices_or_sections=1) /* ty=(Tensor[(1, 3, 300, 300), float32],) */;
    %429 = %428.0;
    %430 = squeeze(%429, axis=[0]) /* ty=Tensor[(3, 300, 300), float32] */;
    %431 = subtract(%430, %p139) /* ty=Tensor[(3, 300, 300), float32] */;
    %432 = divide(%431, %p222) /* ty=Tensor[(3, 300, 300), float32] */;
    %433 = expand_dims(%432, axis=0) /* ty=Tensor[(1, 3, 300, 300), float32] */;
    %434 = image.resize(%433, size=[800, 800]) /* ty=Tensor[(1, 3, 800, 800), float32] */;
    %435 = take(%434, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(3, 800, 800), float32] */;
    %436 = nn.pad(%435, pad_width=[[0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(3, 800, 800), float32] */;
    %437 = (%436,);
    stack(%437) /* ty=Tensor[(1, 3, 800, 800), float32] */
  };
  %439 = (%input0, meta[relay.Constant][79] /* ty=Tensor[(3, 1, 1), float32] */, meta[relay.Constant][80] /* ty=Tensor[(3, 1, 1), float32] */);
  %440 = (%tensor_0106,);
  let %v106: () = vm.invoke_tvm_op(%438, %439, %440) /* ty=() */;
  let %x94: Tensor[(1, 3, 800, 800), float32] = %tensor_0106;
  let %storage_0124: Storage[] = memory.alloc_storage(256 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][124]) /* ty=Storage[] */;
  let %tensor_0107: Tensor[(1, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0124, 0 /* ty=int64 */, meta[relay.Constant][81] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][124]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %445 = fn (%p0105: Tensor[(64), float32], %p140: Tensor[(64), float32], Primitive=1) -> Tensor[(1, 64, 1, 1), float32] {
    %441 = reshape(%p0105, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %442 = reshape(%p140, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %443 = add(%442, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %444 = rsqrt(%443) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    multiply(%441, %444) /* ty=Tensor[(1, 64, 1, 1), float32] */
  };
  %446 = (%model.backbone.body.bn1.weight, %model.backbone.body.bn1.running_var);
  %447 = (%tensor_0107,);
  let %v107: () = vm.invoke_tvm_op(%445, %446, %447) /* ty=() */;
  let %x95: Tensor[(1, 64, 1, 1), float32] = %tensor_0107;
  let %storage_0125: Storage[] = memory.alloc_storage(37632 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][125]) /* ty=Storage[] */;
  let %tensor_0108: Tensor[(64, 3, 7, 7), float32] = memory.alloc_tensor(%storage_0125, 0 /* ty=int64 */, meta[relay.Constant][82] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][125]) /* ty=Tensor[(64, 3, 7, 7), float32] */;
  %450 = fn (%p0106: Tensor[(64, 3, 7, 7), float32], %p141: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(64, 3, 7, 7), float32] {
    %448 = squeeze(%p141, axis=[0, 2, 3]) /* ty=Tensor[(64), float32] */;
    %449 = expand_dims(%448, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
    multiply(%p0106, %449) /* ty=Tensor[(64, 3, 7, 7), float32] */
  };
  %451 = (%model.backbone.body.conv1.weight, %x95);
  %452 = (%tensor_0108,);
  let %v108: () = vm.invoke_tvm_op(%450, %451, %452) /* ty=() */;
  let %x96: Tensor[(64, 3, 7, 7), float32] = %tensor_0108;
  let %x97: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.bn1.bias, meta[relay.Constant][83] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][0]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %x98: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.bn1.running_mean, meta[relay.Constant][84] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %storage_0126: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][126]) /* ty=Storage[] */;
  let %tensor_0109: Tensor[(1, 64, 400, 400), float32] = memory.alloc_tensor(%storage_0126, 0 /* ty=int64 */, meta[relay.Constant][85] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][126]) /* ty=Tensor[(1, 64, 400, 400), float32] */;
  %457 = fn (%p0107: Tensor[(1, 3, 800, 800), float32], %p142: Tensor[(64, 3, 7, 7), float32], %p223: Tensor[(1, 64, 1, 1), float32], %p38: Tensor[(1, 64, 1, 1), float32], %p4: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(1, 64, 400, 400), float32] {
    %453 = nn.conv2d(%p0107, %p142, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 400, 400), float32] */;
    %454 = multiply(%p38, %p4) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %455 = subtract(%p223, %454) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %456 = add(%453, %455) /* ty=Tensor[(1, 64, 400, 400), float32] */;
    nn.relu(%456) /* ty=Tensor[(1, 64, 400, 400), float32] */
  };
  %458 = (%x94, %x96, %x97, %x98, %x95);
  %459 = (%tensor_0109,);
  let %v109: () = vm.invoke_tvm_op(%457, %458, %459) /* ty=() */;
  let %x99: Tensor[(1, 64, 400, 400), float32] = %tensor_0109;
  let %storage_0127: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][127]) /* ty=Storage[] */;
  let %tensor_0110: Tensor[(1, 64, 200, 200), float32] = memory.alloc_tensor(%storage_0127, 0 /* ty=int64 */, meta[relay.Constant][86] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][127]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %460 = fn (%p0108: Tensor[(1, 64, 400, 400), float32], Primitive=1) -> Tensor[(1, 64, 200, 200), float32] {
    nn.max_pool2d(%p0108, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 200, 200), float32] */
  };
  %461 = (%x99,);
  %462 = (%tensor_0110,);
  let %v110: () = vm.invoke_tvm_op(%460, %461, %462) /* ty=() */;
  let %x100: Tensor[(1, 64, 200, 200), float32] = %tensor_0110;
  let %storage_0128: Storage[] = memory.alloc_storage(256 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][128]) /* ty=Storage[] */;
  let %tensor_0111: Tensor[(1, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0128, 0 /* ty=int64 */, meta[relay.Constant][87] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][128]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %467 = fn (%p0109: Tensor[(64), float32], %p143: Tensor[(64), float32], Primitive=1) -> Tensor[(1, 64, 1, 1), float32] {
    %463 = reshape(%p0109, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %464 = reshape(%p143, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %465 = add(%464, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %466 = rsqrt(%465) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    multiply(%463, %466) /* ty=Tensor[(1, 64, 1, 1), float32] */
  };
  %468 = (%model.backbone.body.layer1.0.bn1.weight, %model.backbone.body.layer1.0.bn1.running_var);
  %469 = (%tensor_0111,);
  let %v111: () = vm.invoke_tvm_op(%467, %468, %469) /* ty=() */;
  let %x101: Tensor[(1, 64, 1, 1), float32] = %tensor_0111;
  let %storage_0129: Storage[] = memory.alloc_storage(16384 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][129]) /* ty=Storage[] */;
  let %tensor_0112: Tensor[(64, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0129, 0 /* ty=int64 */, meta[relay.Constant][88] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][129]) /* ty=Tensor[(64, 64, 1, 1), float32] */;
  %472 = fn (%p0110: Tensor[(64, 64, 1, 1), float32], %p144: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(64, 64, 1, 1), float32] {
    %470 = squeeze(%p144, axis=[0, 2, 3]) /* ty=Tensor[(64), float32] */;
    %471 = expand_dims(%470, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
    multiply(%p0110, %471) /* ty=Tensor[(64, 64, 1, 1), float32] */
  };
  %473 = (%model.backbone.body.layer1.0.conv1.weight, %x101);
  %474 = (%tensor_0112,);
  let %v112: () = vm.invoke_tvm_op(%472, %473, %474) /* ty=() */;
  let %x102: Tensor[(64, 64, 1, 1), float32] = %tensor_0112;
  let %x103: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.0.bn1.bias, meta[relay.Constant][89] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][2]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %x104: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.0.bn1.running_mean, meta[relay.Constant][90] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][3]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %storage_0130: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][130]) /* ty=Storage[] */;
  let %tensor_0113: Tensor[(1, 64, 200, 200), float32] = memory.alloc_tensor(%storage_0130, 0 /* ty=int64 */, meta[relay.Constant][91] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][130]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %479 = fn (%p0111: Tensor[(1, 64, 200, 200), float32], %p145: Tensor[(64, 64, 1, 1), float32], %p224: Tensor[(1, 64, 1, 1), float32], %p39: Tensor[(1, 64, 1, 1), float32], %p41: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(1, 64, 200, 200), float32] {
    %475 = nn.conv2d(%p0111, %p145, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    %476 = multiply(%p39, %p41) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %477 = subtract(%p224, %476) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %478 = add(%475, %477) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    nn.relu(%478) /* ty=Tensor[(1, 64, 200, 200), float32] */
  };
  %480 = (%x100, %x102, %x103, %x104, %x101);
  %481 = (%tensor_0113,);
  let %v113: () = vm.invoke_tvm_op(%479, %480, %481) /* ty=() */;
  let %x105: Tensor[(1, 64, 200, 200), float32] = %tensor_0113;
  let %storage_0131: Storage[] = memory.alloc_storage(256 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][131]) /* ty=Storage[] */;
  let %tensor_0114: Tensor[(1, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0131, 0 /* ty=int64 */, meta[relay.Constant][92] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][131]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %486 = fn (%p0112: Tensor[(64), float32], %p146: Tensor[(64), float32], Primitive=1) -> Tensor[(1, 64, 1, 1), float32] {
    %482 = reshape(%p0112, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %483 = reshape(%p146, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %484 = add(%483, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %485 = rsqrt(%484) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    multiply(%482, %485) /* ty=Tensor[(1, 64, 1, 1), float32] */
  };
  %487 = (%model.backbone.body.layer1.0.bn2.weight, %model.backbone.body.layer1.0.bn2.running_var);
  %488 = (%tensor_0114,);
  let %v114: () = vm.invoke_tvm_op(%486, %487, %488) /* ty=() */;
  let %x106: Tensor[(1, 64, 1, 1), float32] = %tensor_0114;
  let %storage_0132: Storage[] = memory.alloc_storage(147456 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][132]) /* ty=Storage[] */;
  let %tensor_0115: Tensor[(64, 64, 3, 3), float32] = memory.alloc_tensor(%storage_0132, 0 /* ty=int64 */, meta[relay.Constant][93] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][132]) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %491 = fn (%p0113: Tensor[(64, 64, 3, 3), float32], %p147: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(64, 64, 3, 3), float32] {
    %489 = squeeze(%p147, axis=[0, 2, 3]) /* ty=Tensor[(64), float32] */;
    %490 = expand_dims(%489, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
    multiply(%p0113, %490) /* ty=Tensor[(64, 64, 3, 3), float32] */
  };
  %492 = (%model.backbone.body.layer1.0.conv2.weight, %x106);
  %493 = (%tensor_0115,);
  let %v115: () = vm.invoke_tvm_op(%491, %492, %493) /* ty=() */;
  let %x107: Tensor[(64, 64, 3, 3), float32] = %tensor_0115;
  let %x108: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.0.bn2.bias, meta[relay.Constant][94] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][4]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %x109: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.0.bn2.running_mean, meta[relay.Constant][95] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][5]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %storage_0133: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][133]) /* ty=Storage[] */;
  let %tensor_0116: Tensor[(1, 64, 200, 200), float32] = memory.alloc_tensor(%storage_0133, 0 /* ty=int64 */, meta[relay.Constant][96] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][133]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %498 = fn (%p0114: Tensor[(1, 64, 200, 200), float32], %p148: Tensor[(64, 64, 3, 3), float32], %p225: Tensor[(1, 64, 1, 1), float32], %p310: Tensor[(1, 64, 1, 1), float32], %p42: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(1, 64, 200, 200), float32] {
    %494 = nn.conv2d(%p0114, %p148, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    %495 = multiply(%p310, %p42) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %496 = subtract(%p225, %495) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %497 = add(%494, %496) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    nn.relu(%497) /* ty=Tensor[(1, 64, 200, 200), float32] */
  };
  %499 = (%x105, %x107, %x108, %x109, %x106);
  %500 = (%tensor_0116,);
  let %v116: () = vm.invoke_tvm_op(%498, %499, %500) /* ty=() */;
  let %x110: Tensor[(1, 64, 200, 200), float32] = %tensor_0116;
  let %storage_0134: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][134]) /* ty=Storage[] */;
  let %tensor_0117: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0134, 0 /* ty=int64 */, meta[relay.Constant][97] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][134]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %505 = fn (%p0115: Tensor[(256), float32], %p149: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %501 = reshape(%p0115, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %502 = reshape(%p149, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %503 = add(%502, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %504 = rsqrt(%503) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%501, %504) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %506 = (%model.backbone.body.layer1.0.bn3.weight, %model.backbone.body.layer1.0.bn3.running_var);
  %507 = (%tensor_0117,);
  let %v117: () = vm.invoke_tvm_op(%505, %506, %507) /* ty=() */;
  let %x111: Tensor[(1, 256, 1, 1), float32] = %tensor_0117;
  let %storage_0135: Storage[] = memory.alloc_storage(65536 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][135]) /* ty=Storage[] */;
  let %tensor_0118: Tensor[(256, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0135, 0 /* ty=int64 */, meta[relay.Constant][98] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][135]) /* ty=Tensor[(256, 64, 1, 1), float32] */;
  %510 = fn (%p0116: Tensor[(256, 64, 1, 1), float32], %p150: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 64, 1, 1), float32] {
    %508 = squeeze(%p150, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %509 = expand_dims(%508, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0116, %509) /* ty=Tensor[(256, 64, 1, 1), float32] */
  };
  %511 = (%model.backbone.body.layer1.0.conv3.weight, %x111);
  %512 = (%tensor_0118,);
  let %v118: () = vm.invoke_tvm_op(%510, %511, %512) /* ty=() */;
  let %x112: Tensor[(256, 64, 1, 1), float32] = %tensor_0118;
  let %x113: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.0.bn3.bias, meta[relay.Constant][99] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][6]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x114: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.0.bn3.running_mean, meta[relay.Constant][100] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][7]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0136: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][136]) /* ty=Storage[] */;
  let %tensor_0119: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0136, 0 /* ty=int64 */, meta[relay.Constant][101] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][136]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %517 = fn (%p0117: Tensor[(256), float32], %p151: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %513 = reshape(%p0117, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %514 = reshape(%p151, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %515 = add(%514, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %516 = rsqrt(%515) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%513, %516) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %518 = (%model.backbone.body.layer1.0.downsample.1.weight, %model.backbone.body.layer1.0.downsample.1.running_var);
  %519 = (%tensor_0119,);
  let %v119: () = vm.invoke_tvm_op(%517, %518, %519) /* ty=() */;
  let %x115: Tensor[(1, 256, 1, 1), float32] = %tensor_0119;
  let %storage_0137: Storage[] = memory.alloc_storage(65536 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][137]) /* ty=Storage[] */;
  let %tensor_0120: Tensor[(256, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0137, 0 /* ty=int64 */, meta[relay.Constant][102] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][137]) /* ty=Tensor[(256, 64, 1, 1), float32] */;
  %522 = fn (%p0118: Tensor[(256, 64, 1, 1), float32], %p152: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 64, 1, 1), float32] {
    %520 = squeeze(%p152, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %521 = expand_dims(%520, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0118, %521) /* ty=Tensor[(256, 64, 1, 1), float32] */
  };
  %523 = (%model.backbone.body.layer1.0.downsample.0.weight, %x115);
  %524 = (%tensor_0120,);
  let %v120: () = vm.invoke_tvm_op(%522, %523, %524) /* ty=() */;
  let %x116: Tensor[(256, 64, 1, 1), float32] = %tensor_0120;
  let %x117: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.0.downsample.1.bias, meta[relay.Constant][103] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][8]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x118: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.0.downsample.1.running_mean, meta[relay.Constant][104] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][9]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0138: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][138]) /* ty=Storage[] */;
  let %tensor_0121: Tensor[(1, 256, 200, 200), float32] = memory.alloc_tensor(%storage_0138, 0 /* ty=int64 */, meta[relay.Constant][105] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][138]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %528 = fn (%p0119: Tensor[(1, 64, 200, 200), float32], %p153: Tensor[(256, 64, 1, 1), float32], %p226: Tensor[(1, 256, 1, 1), float32], %p311: Tensor[(1, 256, 1, 1), float32], %p43: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 200, 200), float32] {
    %525 = nn.conv2d(%p0119, %p153, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    %526 = multiply(%p311, %p43) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %527 = subtract(%p226, %526) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    add(%525, %527) /* ty=Tensor[(1, 256, 200, 200), float32] */
  };
  %529 = (%x100, %x116, %x117, %x118, %x115);
  %530 = (%tensor_0121,);
  let %v121: () = vm.invoke_tvm_op(%528, %529, %530) /* ty=() */;
  let %x119: Tensor[(1, 256, 200, 200), float32] = %tensor_0121;
  let %storage_0139: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][139]) /* ty=Storage[] */;
  let %tensor_0122: Tensor[(1, 256, 200, 200), float32] = memory.alloc_tensor(%storage_0139, 0 /* ty=int64 */, meta[relay.Constant][106] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][139]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %536 = fn (%p0120: Tensor[(1, 64, 200, 200), float32], %p154: Tensor[(256, 64, 1, 1), float32], %p227: Tensor[(1, 256, 1, 1), float32], %p312: Tensor[(1, 256, 1, 1), float32], %p44: Tensor[(1, 256, 1, 1), float32], %p5: Tensor[(1, 256, 200, 200), float32], Primitive=1) -> Tensor[(1, 256, 200, 200), float32] {
    %531 = nn.conv2d(%p0120, %p154, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    %532 = multiply(%p312, %p44) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %533 = subtract(%p227, %532) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %534 = add(%531, %533) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    %535 = add(%534, %p5) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    nn.relu(%535) /* ty=Tensor[(1, 256, 200, 200), float32] */
  };
  %537 = (%x110, %x112, %x113, %x114, %x111, %x119);
  %538 = (%tensor_0122,);
  let %v122: () = vm.invoke_tvm_op(%536, %537, %538) /* ty=() */;
  let %x120: Tensor[(1, 256, 200, 200), float32] = %tensor_0122;
  let %storage_0140: Storage[] = memory.alloc_storage(256 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][140]) /* ty=Storage[] */;
  let %tensor_0123: Tensor[(1, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0140, 0 /* ty=int64 */, meta[relay.Constant][107] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][140]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %543 = fn (%p0121: Tensor[(64), float32], %p155: Tensor[(64), float32], Primitive=1) -> Tensor[(1, 64, 1, 1), float32] {
    %539 = reshape(%p0121, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %540 = reshape(%p155, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %541 = add(%540, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %542 = rsqrt(%541) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    multiply(%539, %542) /* ty=Tensor[(1, 64, 1, 1), float32] */
  };
  %544 = (%model.backbone.body.layer1.1.bn1.weight, %model.backbone.body.layer1.1.bn1.running_var);
  %545 = (%tensor_0123,);
  let %v123: () = vm.invoke_tvm_op(%543, %544, %545) /* ty=() */;
  let %x121: Tensor[(1, 64, 1, 1), float32] = %tensor_0123;
  let %storage_0141: Storage[] = memory.alloc_storage(65536 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][141]) /* ty=Storage[] */;
  let %tensor_0124: Tensor[(64, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0141, 0 /* ty=int64 */, meta[relay.Constant][108] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][141]) /* ty=Tensor[(64, 256, 1, 1), float32] */;
  %548 = fn (%p0122: Tensor[(64, 256, 1, 1), float32], %p156: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(64, 256, 1, 1), float32] {
    %546 = squeeze(%p156, axis=[0, 2, 3]) /* ty=Tensor[(64), float32] */;
    %547 = expand_dims(%546, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
    multiply(%p0122, %547) /* ty=Tensor[(64, 256, 1, 1), float32] */
  };
  %549 = (%model.backbone.body.layer1.1.conv1.weight, %x121);
  %550 = (%tensor_0124,);
  let %v124: () = vm.invoke_tvm_op(%548, %549, %550) /* ty=() */;
  let %x122: Tensor[(64, 256, 1, 1), float32] = %tensor_0124;
  let %x123: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.1.bn1.bias, meta[relay.Constant][109] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][10]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %x124: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.1.bn1.running_mean, meta[relay.Constant][110] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][11]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %storage_0142: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][142]) /* ty=Storage[] */;
  let %tensor_0125: Tensor[(1, 64, 200, 200), float32] = memory.alloc_tensor(%storage_0142, 0 /* ty=int64 */, meta[relay.Constant][111] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][142]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %555 = fn (%p0123: Tensor[(1, 256, 200, 200), float32], %p157: Tensor[(64, 256, 1, 1), float32], %p228: Tensor[(1, 64, 1, 1), float32], %p313: Tensor[(1, 64, 1, 1), float32], %p45: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(1, 64, 200, 200), float32] {
    %551 = nn.conv2d(%p0123, %p157, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    %552 = multiply(%p313, %p45) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %553 = subtract(%p228, %552) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %554 = add(%551, %553) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    nn.relu(%554) /* ty=Tensor[(1, 64, 200, 200), float32] */
  };
  %556 = (%x120, %x122, %x123, %x124, %x121);
  %557 = (%tensor_0125,);
  let %v125: () = vm.invoke_tvm_op(%555, %556, %557) /* ty=() */;
  let %x125: Tensor[(1, 64, 200, 200), float32] = %tensor_0125;
  let %storage_0143: Storage[] = memory.alloc_storage(256 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][143]) /* ty=Storage[] */;
  let %tensor_0126: Tensor[(1, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0143, 0 /* ty=int64 */, meta[relay.Constant][112] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][143]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %562 = fn (%p0124: Tensor[(64), float32], %p158: Tensor[(64), float32], Primitive=1) -> Tensor[(1, 64, 1, 1), float32] {
    %558 = reshape(%p0124, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %559 = reshape(%p158, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %560 = add(%559, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %561 = rsqrt(%560) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    multiply(%558, %561) /* ty=Tensor[(1, 64, 1, 1), float32] */
  };
  %563 = (%model.backbone.body.layer1.1.bn2.weight, %model.backbone.body.layer1.1.bn2.running_var);
  %564 = (%tensor_0126,);
  let %v126: () = vm.invoke_tvm_op(%562, %563, %564) /* ty=() */;
  let %x126: Tensor[(1, 64, 1, 1), float32] = %tensor_0126;
  let %storage_0144: Storage[] = memory.alloc_storage(147456 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][144]) /* ty=Storage[] */;
  let %tensor_0127: Tensor[(64, 64, 3, 3), float32] = memory.alloc_tensor(%storage_0144, 0 /* ty=int64 */, meta[relay.Constant][113] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][144]) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %567 = fn (%p0125: Tensor[(64, 64, 3, 3), float32], %p159: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(64, 64, 3, 3), float32] {
    %565 = squeeze(%p159, axis=[0, 2, 3]) /* ty=Tensor[(64), float32] */;
    %566 = expand_dims(%565, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
    multiply(%p0125, %566) /* ty=Tensor[(64, 64, 3, 3), float32] */
  };
  %568 = (%model.backbone.body.layer1.1.conv2.weight, %x126);
  %569 = (%tensor_0127,);
  let %v127: () = vm.invoke_tvm_op(%567, %568, %569) /* ty=() */;
  let %x127: Tensor[(64, 64, 3, 3), float32] = %tensor_0127;
  let %x128: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.1.bn2.bias, meta[relay.Constant][114] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][12]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %x129: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.1.bn2.running_mean, meta[relay.Constant][115] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][13]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %storage_0145: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][145]) /* ty=Storage[] */;
  let %tensor_0128: Tensor[(1, 64, 200, 200), float32] = memory.alloc_tensor(%storage_0145, 0 /* ty=int64 */, meta[relay.Constant][116] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][145]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %574 = fn (%p0126: Tensor[(1, 64, 200, 200), float32], %p160: Tensor[(64, 64, 3, 3), float32], %p229: Tensor[(1, 64, 1, 1), float32], %p314: Tensor[(1, 64, 1, 1), float32], %p46: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(1, 64, 200, 200), float32] {
    %570 = nn.conv2d(%p0126, %p160, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    %571 = multiply(%p314, %p46) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %572 = subtract(%p229, %571) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %573 = add(%570, %572) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    nn.relu(%573) /* ty=Tensor[(1, 64, 200, 200), float32] */
  };
  %575 = (%x125, %x127, %x128, %x129, %x126);
  %576 = (%tensor_0128,);
  let %v128: () = vm.invoke_tvm_op(%574, %575, %576) /* ty=() */;
  let %x130: Tensor[(1, 64, 200, 200), float32] = %tensor_0128;
  let %storage_0146: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][146]) /* ty=Storage[] */;
  let %tensor_0129: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0146, 0 /* ty=int64 */, meta[relay.Constant][117] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][146]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %581 = fn (%p0127: Tensor[(256), float32], %p161: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %577 = reshape(%p0127, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %578 = reshape(%p161, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %579 = add(%578, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %580 = rsqrt(%579) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%577, %580) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %582 = (%model.backbone.body.layer1.1.bn3.weight, %model.backbone.body.layer1.1.bn3.running_var);
  %583 = (%tensor_0129,);
  let %v129: () = vm.invoke_tvm_op(%581, %582, %583) /* ty=() */;
  let %x131: Tensor[(1, 256, 1, 1), float32] = %tensor_0129;
  let %storage_0147: Storage[] = memory.alloc_storage(65536 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][147]) /* ty=Storage[] */;
  let %tensor_0130: Tensor[(256, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0147, 0 /* ty=int64 */, meta[relay.Constant][118] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][147]) /* ty=Tensor[(256, 64, 1, 1), float32] */;
  %586 = fn (%p0128: Tensor[(256, 64, 1, 1), float32], %p162: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 64, 1, 1), float32] {
    %584 = squeeze(%p162, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %585 = expand_dims(%584, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0128, %585) /* ty=Tensor[(256, 64, 1, 1), float32] */
  };
  %587 = (%model.backbone.body.layer1.1.conv3.weight, %x131);
  %588 = (%tensor_0130,);
  let %v130: () = vm.invoke_tvm_op(%586, %587, %588) /* ty=() */;
  let %x132: Tensor[(256, 64, 1, 1), float32] = %tensor_0130;
  let %x133: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.1.bn3.bias, meta[relay.Constant][119] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][14]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x134: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.1.bn3.running_mean, meta[relay.Constant][120] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][15]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0148: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][148]) /* ty=Storage[] */;
  let %tensor_0131: Tensor[(1, 256, 200, 200), float32] = memory.alloc_tensor(%storage_0148, 0 /* ty=int64 */, meta[relay.Constant][121] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][148]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %594 = fn (%p0129: Tensor[(1, 64, 200, 200), float32], %p163: Tensor[(256, 64, 1, 1), float32], %p230: Tensor[(1, 256, 1, 1), float32], %p315: Tensor[(1, 256, 1, 1), float32], %p47: Tensor[(1, 256, 1, 1), float32], %p51: Tensor[(1, 256, 200, 200), float32], Primitive=1) -> Tensor[(1, 256, 200, 200), float32] {
    %589 = nn.conv2d(%p0129, %p163, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    %590 = multiply(%p315, %p47) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %591 = subtract(%p230, %590) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %592 = add(%589, %591) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    %593 = add(%592, %p51) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    nn.relu(%593) /* ty=Tensor[(1, 256, 200, 200), float32] */
  };
  %595 = (%x130, %x132, %x133, %x134, %x131, %x120);
  %596 = (%tensor_0131,);
  let %v131: () = vm.invoke_tvm_op(%594, %595, %596) /* ty=() */;
  let %x135: Tensor[(1, 256, 200, 200), float32] = %tensor_0131;
  let %storage_0149: Storage[] = memory.alloc_storage(256 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][149]) /* ty=Storage[] */;
  let %tensor_0132: Tensor[(1, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0149, 0 /* ty=int64 */, meta[relay.Constant][122] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][149]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %601 = fn (%p0130: Tensor[(64), float32], %p164: Tensor[(64), float32], Primitive=1) -> Tensor[(1, 64, 1, 1), float32] {
    %597 = reshape(%p0130, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %598 = reshape(%p164, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %599 = add(%598, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %600 = rsqrt(%599) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    multiply(%597, %600) /* ty=Tensor[(1, 64, 1, 1), float32] */
  };
  %602 = (%model.backbone.body.layer1.2.bn1.weight, %model.backbone.body.layer1.2.bn1.running_var);
  %603 = (%tensor_0132,);
  let %v132: () = vm.invoke_tvm_op(%601, %602, %603) /* ty=() */;
  let %x136: Tensor[(1, 64, 1, 1), float32] = %tensor_0132;
  let %storage_0150: Storage[] = memory.alloc_storage(65536 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][150]) /* ty=Storage[] */;
  let %tensor_0133: Tensor[(64, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0150, 0 /* ty=int64 */, meta[relay.Constant][123] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][150]) /* ty=Tensor[(64, 256, 1, 1), float32] */;
  %606 = fn (%p0131: Tensor[(64, 256, 1, 1), float32], %p165: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(64, 256, 1, 1), float32] {
    %604 = squeeze(%p165, axis=[0, 2, 3]) /* ty=Tensor[(64), float32] */;
    %605 = expand_dims(%604, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
    multiply(%p0131, %605) /* ty=Tensor[(64, 256, 1, 1), float32] */
  };
  %607 = (%model.backbone.body.layer1.2.conv1.weight, %x136);
  %608 = (%tensor_0133,);
  let %v133: () = vm.invoke_tvm_op(%606, %607, %608) /* ty=() */;
  let %x137: Tensor[(64, 256, 1, 1), float32] = %tensor_0133;
  let %x138: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.2.bn1.bias, meta[relay.Constant][124] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][16]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %x139: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.2.bn1.running_mean, meta[relay.Constant][125] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][17]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %storage_0151: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][151]) /* ty=Storage[] */;
  let %tensor_0134: Tensor[(1, 64, 200, 200), float32] = memory.alloc_tensor(%storage_0151, 0 /* ty=int64 */, meta[relay.Constant][126] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][151]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %613 = fn (%p0132: Tensor[(1, 256, 200, 200), float32], %p166: Tensor[(64, 256, 1, 1), float32], %p231: Tensor[(1, 64, 1, 1), float32], %p316: Tensor[(1, 64, 1, 1), float32], %p48: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(1, 64, 200, 200), float32] {
    %609 = nn.conv2d(%p0132, %p166, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    %610 = multiply(%p316, %p48) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %611 = subtract(%p231, %610) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %612 = add(%609, %611) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    nn.relu(%612) /* ty=Tensor[(1, 64, 200, 200), float32] */
  };
  %614 = (%x135, %x137, %x138, %x139, %x136);
  %615 = (%tensor_0134,);
  let %v134: () = vm.invoke_tvm_op(%613, %614, %615) /* ty=() */;
  let %x140: Tensor[(1, 64, 200, 200), float32] = %tensor_0134;
  let %storage_0152: Storage[] = memory.alloc_storage(256 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][152]) /* ty=Storage[] */;
  let %tensor_0135: Tensor[(1, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0152, 0 /* ty=int64 */, meta[relay.Constant][127] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][152]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %620 = fn (%p0133: Tensor[(64), float32], %p167: Tensor[(64), float32], Primitive=1) -> Tensor[(1, 64, 1, 1), float32] {
    %616 = reshape(%p0133, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %617 = reshape(%p167, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %618 = add(%617, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %619 = rsqrt(%618) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    multiply(%616, %619) /* ty=Tensor[(1, 64, 1, 1), float32] */
  };
  %621 = (%model.backbone.body.layer1.2.bn2.weight, %model.backbone.body.layer1.2.bn2.running_var);
  %622 = (%tensor_0135,);
  let %v135: () = vm.invoke_tvm_op(%620, %621, %622) /* ty=() */;
  let %x141: Tensor[(1, 64, 1, 1), float32] = %tensor_0135;
  let %storage_0153: Storage[] = memory.alloc_storage(147456 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][153]) /* ty=Storage[] */;
  let %tensor_0136: Tensor[(64, 64, 3, 3), float32] = memory.alloc_tensor(%storage_0153, 0 /* ty=int64 */, meta[relay.Constant][128] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][153]) /* ty=Tensor[(64, 64, 3, 3), float32] */;
  %625 = fn (%p0134: Tensor[(64, 64, 3, 3), float32], %p168: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(64, 64, 3, 3), float32] {
    %623 = squeeze(%p168, axis=[0, 2, 3]) /* ty=Tensor[(64), float32] */;
    %624 = expand_dims(%623, axis=1, num_newaxis=3) /* ty=Tensor[(64, 1, 1, 1), float32] */;
    multiply(%p0134, %624) /* ty=Tensor[(64, 64, 3, 3), float32] */
  };
  %626 = (%model.backbone.body.layer1.2.conv2.weight, %x141);
  %627 = (%tensor_0136,);
  let %v136: () = vm.invoke_tvm_op(%625, %626, %627) /* ty=() */;
  let %x142: Tensor[(64, 64, 3, 3), float32] = %tensor_0136;
  let %x143: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.2.bn2.bias, meta[relay.Constant][129] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][18]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %x144: Tensor[(1, 64, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.2.bn2.running_mean, meta[relay.Constant][130] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][19]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  let %storage_0154: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][154]) /* ty=Storage[] */;
  let %tensor_0137: Tensor[(1, 64, 200, 200), float32] = memory.alloc_tensor(%storage_0154, 0 /* ty=int64 */, meta[relay.Constant][131] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][154]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
  %632 = fn (%p0135: Tensor[(1, 64, 200, 200), float32], %p169: Tensor[(64, 64, 3, 3), float32], %p232: Tensor[(1, 64, 1, 1), float32], %p317: Tensor[(1, 64, 1, 1), float32], %p49: Tensor[(1, 64, 1, 1), float32], Primitive=1) -> Tensor[(1, 64, 200, 200), float32] {
    %628 = nn.conv2d(%p0135, %p169, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    %629 = multiply(%p317, %p49) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %630 = subtract(%p232, %629) /* ty=Tensor[(1, 64, 1, 1), float32] */;
    %631 = add(%628, %630) /* ty=Tensor[(1, 64, 200, 200), float32] */;
    nn.relu(%631) /* ty=Tensor[(1, 64, 200, 200), float32] */
  };
  %633 = (%x140, %x142, %x143, %x144, %x141);
  %634 = (%tensor_0137,);
  let %v137: () = vm.invoke_tvm_op(%632, %633, %634) /* ty=() */;
  let %x145: Tensor[(1, 64, 200, 200), float32] = %tensor_0137;
  let %storage_0155: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][155]) /* ty=Storage[] */;
  let %tensor_0138: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0155, 0 /* ty=int64 */, meta[relay.Constant][132] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][155]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %639 = fn (%p0136: Tensor[(256), float32], %p170: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %635 = reshape(%p0136, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %636 = reshape(%p170, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %637 = add(%636, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %638 = rsqrt(%637) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%635, %638) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %640 = (%model.backbone.body.layer1.2.bn3.weight, %model.backbone.body.layer1.2.bn3.running_var);
  %641 = (%tensor_0138,);
  let %v138: () = vm.invoke_tvm_op(%639, %640, %641) /* ty=() */;
  let %x146: Tensor[(1, 256, 1, 1), float32] = %tensor_0138;
  let %storage_0156: Storage[] = memory.alloc_storage(65536 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][156]) /* ty=Storage[] */;
  let %tensor_0139: Tensor[(256, 64, 1, 1), float32] = memory.alloc_tensor(%storage_0156, 0 /* ty=int64 */, meta[relay.Constant][133] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][156]) /* ty=Tensor[(256, 64, 1, 1), float32] */;
  %644 = fn (%p0137: Tensor[(256, 64, 1, 1), float32], %p171: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 64, 1, 1), float32] {
    %642 = squeeze(%p171, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %643 = expand_dims(%642, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0137, %643) /* ty=Tensor[(256, 64, 1, 1), float32] */
  };
  %645 = (%model.backbone.body.layer1.2.conv3.weight, %x146);
  %646 = (%tensor_0139,);
  let %v139: () = vm.invoke_tvm_op(%644, %645, %646) /* ty=() */;
  let %x147: Tensor[(256, 64, 1, 1), float32] = %tensor_0139;
  let %x148: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.2.bn3.bias, meta[relay.Constant][134] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][20]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x149: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer1.2.bn3.running_mean, meta[relay.Constant][135] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][21]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0157: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][157]) /* ty=Storage[] */;
  let %tensor_0140: Tensor[(1, 256, 200, 200), float32] = memory.alloc_tensor(%storage_0157, 0 /* ty=int64 */, meta[relay.Constant][136] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][157]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %652 = fn (%p0138: Tensor[(1, 64, 200, 200), float32], %p172: Tensor[(256, 64, 1, 1), float32], %p233: Tensor[(1, 256, 1, 1), float32], %p318: Tensor[(1, 256, 1, 1), float32], %p410: Tensor[(1, 256, 1, 1), float32], %p52: Tensor[(1, 256, 200, 200), float32], Primitive=1) -> Tensor[(1, 256, 200, 200), float32] {
    %647 = nn.conv2d(%p0138, %p172, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    %648 = multiply(%p318, %p410) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %649 = subtract(%p233, %648) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %650 = add(%647, %649) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    %651 = add(%650, %p52) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    nn.relu(%651) /* ty=Tensor[(1, 256, 200, 200), float32] */
  };
  %653 = (%x145, %x147, %x148, %x149, %x146, %x135);
  %654 = (%tensor_0140,);
  let %v140: () = vm.invoke_tvm_op(%652, %653, %654) /* ty=() */;
  let %x150: Tensor[(1, 256, 200, 200), float32] = %tensor_0140;
  let %storage_0158: Storage[] = memory.alloc_storage(512 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][158]) /* ty=Storage[] */;
  let %tensor_0141: Tensor[(1, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0158, 0 /* ty=int64 */, meta[relay.Constant][137] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][158]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %659 = fn (%p0139: Tensor[(128), float32], %p173: Tensor[(128), float32], Primitive=1) -> Tensor[(1, 128, 1, 1), float32] {
    %655 = reshape(%p0139, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %656 = reshape(%p173, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %657 = add(%656, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %658 = rsqrt(%657) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    multiply(%655, %658) /* ty=Tensor[(1, 128, 1, 1), float32] */
  };
  %660 = (%model.backbone.body.layer2.0.bn1.weight, %model.backbone.body.layer2.0.bn1.running_var);
  %661 = (%tensor_0141,);
  let %v141: () = vm.invoke_tvm_op(%659, %660, %661) /* ty=() */;
  let %x151: Tensor[(1, 128, 1, 1), float32] = %tensor_0141;
  let %storage_0159: Storage[] = memory.alloc_storage(131072 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][159]) /* ty=Storage[] */;
  let %tensor_0142: Tensor[(128, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0159, 0 /* ty=int64 */, meta[relay.Constant][138] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][159]) /* ty=Tensor[(128, 256, 1, 1), float32] */;
  %664 = fn (%p0140: Tensor[(128, 256, 1, 1), float32], %p174: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(128, 256, 1, 1), float32] {
    %662 = squeeze(%p174, axis=[0, 2, 3]) /* ty=Tensor[(128), float32] */;
    %663 = expand_dims(%662, axis=1, num_newaxis=3) /* ty=Tensor[(128, 1, 1, 1), float32] */;
    multiply(%p0140, %663) /* ty=Tensor[(128, 256, 1, 1), float32] */
  };
  %665 = (%model.backbone.body.layer2.0.conv1.weight, %x151);
  %666 = (%tensor_0142,);
  let %v142: () = vm.invoke_tvm_op(%664, %665, %666) /* ty=() */;
  let %x152: Tensor[(128, 256, 1, 1), float32] = %tensor_0142;
  let %x153: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.0.bn1.bias, meta[relay.Constant][139] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][22]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %x154: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.0.bn1.running_mean, meta[relay.Constant][140] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][23]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %storage_0160: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][160]) /* ty=Storage[] */;
  let %tensor_0143: Tensor[(1, 128, 200, 200), float32] = memory.alloc_tensor(%storage_0160, 0 /* ty=int64 */, meta[relay.Constant][141] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][160]) /* ty=Tensor[(1, 128, 200, 200), float32] */;
  %671 = fn (%p0141: Tensor[(1, 256, 200, 200), float32], %p175: Tensor[(128, 256, 1, 1), float32], %p234: Tensor[(1, 128, 1, 1), float32], %p319: Tensor[(1, 128, 1, 1), float32], %p411: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(1, 128, 200, 200), float32] {
    %667 = nn.conv2d(%p0141, %p175, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 200, 200), float32] */;
    %668 = multiply(%p319, %p411) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %669 = subtract(%p234, %668) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %670 = add(%667, %669) /* ty=Tensor[(1, 128, 200, 200), float32] */;
    nn.relu(%670) /* ty=Tensor[(1, 128, 200, 200), float32] */
  };
  %672 = (%x150, %x152, %x153, %x154, %x151);
  %673 = (%tensor_0143,);
  let %v143: () = vm.invoke_tvm_op(%671, %672, %673) /* ty=() */;
  let %x155: Tensor[(1, 128, 200, 200), float32] = %tensor_0143;
  let %storage_0161: Storage[] = memory.alloc_storage(512 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][161]) /* ty=Storage[] */;
  let %tensor_0144: Tensor[(1, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0161, 0 /* ty=int64 */, meta[relay.Constant][142] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][161]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %678 = fn (%p0142: Tensor[(128), float32], %p176: Tensor[(128), float32], Primitive=1) -> Tensor[(1, 128, 1, 1), float32] {
    %674 = reshape(%p0142, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %675 = reshape(%p176, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %676 = add(%675, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %677 = rsqrt(%676) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    multiply(%674, %677) /* ty=Tensor[(1, 128, 1, 1), float32] */
  };
  %679 = (%model.backbone.body.layer2.0.bn2.weight, %model.backbone.body.layer2.0.bn2.running_var);
  %680 = (%tensor_0144,);
  let %v144: () = vm.invoke_tvm_op(%678, %679, %680) /* ty=() */;
  let %x156: Tensor[(1, 128, 1, 1), float32] = %tensor_0144;
  let %storage_0162: Storage[] = memory.alloc_storage(589824 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][162]) /* ty=Storage[] */;
  let %tensor_0145: Tensor[(128, 128, 3, 3), float32] = memory.alloc_tensor(%storage_0162, 0 /* ty=int64 */, meta[relay.Constant][143] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][162]) /* ty=Tensor[(128, 128, 3, 3), float32] */;
  %683 = fn (%p0143: Tensor[(128, 128, 3, 3), float32], %p177: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(128, 128, 3, 3), float32] {
    %681 = squeeze(%p177, axis=[0, 2, 3]) /* ty=Tensor[(128), float32] */;
    %682 = expand_dims(%681, axis=1, num_newaxis=3) /* ty=Tensor[(128, 1, 1, 1), float32] */;
    multiply(%p0143, %682) /* ty=Tensor[(128, 128, 3, 3), float32] */
  };
  %684 = (%model.backbone.body.layer2.0.conv2.weight, %x156);
  %685 = (%tensor_0145,);
  let %v145: () = vm.invoke_tvm_op(%683, %684, %685) /* ty=() */;
  let %x157: Tensor[(128, 128, 3, 3), float32] = %tensor_0145;
  let %x158: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.0.bn2.bias, meta[relay.Constant][144] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][24]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %x159: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.0.bn2.running_mean, meta[relay.Constant][145] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][25]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %storage_0163: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][163]) /* ty=Storage[] */;
  let %tensor_0146: Tensor[(1, 128, 100, 100), float32] = memory.alloc_tensor(%storage_0163, 0 /* ty=int64 */, meta[relay.Constant][146] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][163]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %690 = fn (%p0144: Tensor[(1, 128, 200, 200), float32], %p178: Tensor[(128, 128, 3, 3), float32], %p235: Tensor[(1, 128, 1, 1), float32], %p320: Tensor[(1, 128, 1, 1), float32], %p412: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(1, 128, 100, 100), float32] {
    %686 = nn.conv2d(%p0144, %p178, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    %687 = multiply(%p320, %p412) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %688 = subtract(%p235, %687) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %689 = add(%686, %688) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    nn.relu(%689) /* ty=Tensor[(1, 128, 100, 100), float32] */
  };
  %691 = (%x155, %x157, %x158, %x159, %x156);
  %692 = (%tensor_0146,);
  let %v146: () = vm.invoke_tvm_op(%690, %691, %692) /* ty=() */;
  let %x160: Tensor[(1, 128, 100, 100), float32] = %tensor_0146;
  let %storage_0164: Storage[] = memory.alloc_storage(2048 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][164]) /* ty=Storage[] */;
  let %tensor_0147: Tensor[(1, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0164, 0 /* ty=int64 */, meta[relay.Constant][147] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][164]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %697 = fn (%p0145: Tensor[(512), float32], %p179: Tensor[(512), float32], Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    %693 = reshape(%p0145, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %694 = reshape(%p179, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %695 = add(%694, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %696 = rsqrt(%695) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    multiply(%693, %696) /* ty=Tensor[(1, 512, 1, 1), float32] */
  };
  %698 = (%model.backbone.body.layer2.0.bn3.weight, %model.backbone.body.layer2.0.bn3.running_var);
  %699 = (%tensor_0147,);
  let %v147: () = vm.invoke_tvm_op(%697, %698, %699) /* ty=() */;
  let %x161: Tensor[(1, 512, 1, 1), float32] = %tensor_0147;
  let %storage_0165: Storage[] = memory.alloc_storage(262144 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][165]) /* ty=Storage[] */;
  let %tensor_0148: Tensor[(512, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0165, 0 /* ty=int64 */, meta[relay.Constant][148] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][165]) /* ty=Tensor[(512, 128, 1, 1), float32] */;
  %702 = fn (%p0146: Tensor[(512, 128, 1, 1), float32], %p180: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(512, 128, 1, 1), float32] {
    %700 = squeeze(%p180, axis=[0, 2, 3]) /* ty=Tensor[(512), float32] */;
    %701 = expand_dims(%700, axis=1, num_newaxis=3) /* ty=Tensor[(512, 1, 1, 1), float32] */;
    multiply(%p0146, %701) /* ty=Tensor[(512, 128, 1, 1), float32] */
  };
  %703 = (%model.backbone.body.layer2.0.conv3.weight, %x161);
  %704 = (%tensor_0148,);
  let %v148: () = vm.invoke_tvm_op(%702, %703, %704) /* ty=() */;
  let %x162: Tensor[(512, 128, 1, 1), float32] = %tensor_0148;
  let %x163: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.0.bn3.bias, meta[relay.Constant][149] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][26]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %x164: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.0.bn3.running_mean, meta[relay.Constant][150] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][27]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %storage_0166: Storage[] = memory.alloc_storage(2048 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][166]) /* ty=Storage[] */;
  let %tensor_0149: Tensor[(1, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0166, 0 /* ty=int64 */, meta[relay.Constant][151] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][166]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %709 = fn (%p0147: Tensor[(512), float32], %p181: Tensor[(512), float32], Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    %705 = reshape(%p0147, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %706 = reshape(%p181, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %707 = add(%706, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %708 = rsqrt(%707) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    multiply(%705, %708) /* ty=Tensor[(1, 512, 1, 1), float32] */
  };
  %710 = (%model.backbone.body.layer2.0.downsample.1.weight, %model.backbone.body.layer2.0.downsample.1.running_var);
  %711 = (%tensor_0149,);
  let %v149: () = vm.invoke_tvm_op(%709, %710, %711) /* ty=() */;
  let %x165: Tensor[(1, 512, 1, 1), float32] = %tensor_0149;
  let %storage_0167: Storage[] = memory.alloc_storage(524288 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][167]) /* ty=Storage[] */;
  let %tensor_0150: Tensor[(512, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0167, 0 /* ty=int64 */, meta[relay.Constant][152] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][167]) /* ty=Tensor[(512, 256, 1, 1), float32] */;
  %714 = fn (%p0148: Tensor[(512, 256, 1, 1), float32], %p182: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(512, 256, 1, 1), float32] {
    %712 = squeeze(%p182, axis=[0, 2, 3]) /* ty=Tensor[(512), float32] */;
    %713 = expand_dims(%712, axis=1, num_newaxis=3) /* ty=Tensor[(512, 1, 1, 1), float32] */;
    multiply(%p0148, %713) /* ty=Tensor[(512, 256, 1, 1), float32] */
  };
  %715 = (%model.backbone.body.layer2.0.downsample.0.weight, %x165);
  %716 = (%tensor_0150,);
  let %v150: () = vm.invoke_tvm_op(%714, %715, %716) /* ty=() */;
  let %x166: Tensor[(512, 256, 1, 1), float32] = %tensor_0150;
  let %x167: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.0.downsample.1.bias, meta[relay.Constant][153] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][28]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %x168: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.0.downsample.1.running_mean, meta[relay.Constant][154] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][29]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %storage_0168: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][168]) /* ty=Storage[] */;
  let %tensor_0151: Tensor[(1, 512, 100, 100), float32] = memory.alloc_tensor(%storage_0168, 0 /* ty=int64 */, meta[relay.Constant][155] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][168]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %720 = fn (%p0149: Tensor[(1, 256, 200, 200), float32], %p183: Tensor[(512, 256, 1, 1), float32], %p236: Tensor[(1, 512, 1, 1), float32], %p321: Tensor[(1, 512, 1, 1), float32], %p413: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(1, 512, 100, 100), float32] {
    %717 = nn.conv2d(%p0149, %p183, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    %718 = multiply(%p321, %p413) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %719 = subtract(%p236, %718) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    add(%717, %719) /* ty=Tensor[(1, 512, 100, 100), float32] */
  };
  %721 = (%x150, %x166, %x167, %x168, %x165);
  %722 = (%tensor_0151,);
  let %v151: () = vm.invoke_tvm_op(%720, %721, %722) /* ty=() */;
  let %x169: Tensor[(1, 512, 100, 100), float32] = %tensor_0151;
  let %storage_0169: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][169]) /* ty=Storage[] */;
  let %tensor_0152: Tensor[(1, 512, 100, 100), float32] = memory.alloc_tensor(%storage_0169, 0 /* ty=int64 */, meta[relay.Constant][156] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][169]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %728 = fn (%p0150: Tensor[(1, 128, 100, 100), float32], %p184: Tensor[(512, 128, 1, 1), float32], %p237: Tensor[(1, 512, 1, 1), float32], %p322: Tensor[(1, 512, 1, 1), float32], %p414: Tensor[(1, 512, 1, 1), float32], %p53: Tensor[(1, 512, 100, 100), float32], Primitive=1) -> Tensor[(1, 512, 100, 100), float32] {
    %723 = nn.conv2d(%p0150, %p184, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    %724 = multiply(%p322, %p414) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %725 = subtract(%p237, %724) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %726 = add(%723, %725) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    %727 = add(%726, %p53) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    nn.relu(%727) /* ty=Tensor[(1, 512, 100, 100), float32] */
  };
  %729 = (%x160, %x162, %x163, %x164, %x161, %x169);
  %730 = (%tensor_0152,);
  let %v152: () = vm.invoke_tvm_op(%728, %729, %730) /* ty=() */;
  let %x170: Tensor[(1, 512, 100, 100), float32] = %tensor_0152;
  let %storage_0170: Storage[] = memory.alloc_storage(512 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][170]) /* ty=Storage[] */;
  let %tensor_0153: Tensor[(1, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0170, 0 /* ty=int64 */, meta[relay.Constant][157] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][170]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %735 = fn (%p0151: Tensor[(128), float32], %p185: Tensor[(128), float32], Primitive=1) -> Tensor[(1, 128, 1, 1), float32] {
    %731 = reshape(%p0151, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %732 = reshape(%p185, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %733 = add(%732, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %734 = rsqrt(%733) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    multiply(%731, %734) /* ty=Tensor[(1, 128, 1, 1), float32] */
  };
  %736 = (%model.backbone.body.layer2.1.bn1.weight, %model.backbone.body.layer2.1.bn1.running_var);
  %737 = (%tensor_0153,);
  let %v153: () = vm.invoke_tvm_op(%735, %736, %737) /* ty=() */;
  let %x171: Tensor[(1, 128, 1, 1), float32] = %tensor_0153;
  let %storage_0171: Storage[] = memory.alloc_storage(262144 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][171]) /* ty=Storage[] */;
  let %tensor_0154: Tensor[(128, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0171, 0 /* ty=int64 */, meta[relay.Constant][158] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][171]) /* ty=Tensor[(128, 512, 1, 1), float32] */;
  %740 = fn (%p0152: Tensor[(128, 512, 1, 1), float32], %p186: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(128, 512, 1, 1), float32] {
    %738 = squeeze(%p186, axis=[0, 2, 3]) /* ty=Tensor[(128), float32] */;
    %739 = expand_dims(%738, axis=1, num_newaxis=3) /* ty=Tensor[(128, 1, 1, 1), float32] */;
    multiply(%p0152, %739) /* ty=Tensor[(128, 512, 1, 1), float32] */
  };
  %741 = (%model.backbone.body.layer2.1.conv1.weight, %x171);
  %742 = (%tensor_0154,);
  let %v154: () = vm.invoke_tvm_op(%740, %741, %742) /* ty=() */;
  let %x172: Tensor[(128, 512, 1, 1), float32] = %tensor_0154;
  let %x173: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.1.bn1.bias, meta[relay.Constant][159] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][30]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %x174: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.1.bn1.running_mean, meta[relay.Constant][160] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][31]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %storage_0172: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][172]) /* ty=Storage[] */;
  let %tensor_0155: Tensor[(1, 128, 100, 100), float32] = memory.alloc_tensor(%storage_0172, 0 /* ty=int64 */, meta[relay.Constant][161] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][172]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %747 = fn (%p0153: Tensor[(1, 512, 100, 100), float32], %p187: Tensor[(128, 512, 1, 1), float32], %p238: Tensor[(1, 128, 1, 1), float32], %p323: Tensor[(1, 128, 1, 1), float32], %p415: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(1, 128, 100, 100), float32] {
    %743 = nn.conv2d(%p0153, %p187, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    %744 = multiply(%p323, %p415) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %745 = subtract(%p238, %744) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %746 = add(%743, %745) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    nn.relu(%746) /* ty=Tensor[(1, 128, 100, 100), float32] */
  };
  %748 = (%x170, %x172, %x173, %x174, %x171);
  %749 = (%tensor_0155,);
  let %v155: () = vm.invoke_tvm_op(%747, %748, %749) /* ty=() */;
  let %x175: Tensor[(1, 128, 100, 100), float32] = %tensor_0155;
  let %storage_0173: Storage[] = memory.alloc_storage(512 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][173]) /* ty=Storage[] */;
  let %tensor_0156: Tensor[(1, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0173, 0 /* ty=int64 */, meta[relay.Constant][162] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][173]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %754 = fn (%p0154: Tensor[(128), float32], %p188: Tensor[(128), float32], Primitive=1) -> Tensor[(1, 128, 1, 1), float32] {
    %750 = reshape(%p0154, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %751 = reshape(%p188, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %752 = add(%751, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %753 = rsqrt(%752) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    multiply(%750, %753) /* ty=Tensor[(1, 128, 1, 1), float32] */
  };
  %755 = (%model.backbone.body.layer2.1.bn2.weight, %model.backbone.body.layer2.1.bn2.running_var);
  %756 = (%tensor_0156,);
  let %v156: () = vm.invoke_tvm_op(%754, %755, %756) /* ty=() */;
  let %x176: Tensor[(1, 128, 1, 1), float32] = %tensor_0156;
  let %storage_0174: Storage[] = memory.alloc_storage(589824 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][174]) /* ty=Storage[] */;
  let %tensor_0157: Tensor[(128, 128, 3, 3), float32] = memory.alloc_tensor(%storage_0174, 0 /* ty=int64 */, meta[relay.Constant][163] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][174]) /* ty=Tensor[(128, 128, 3, 3), float32] */;
  %759 = fn (%p0155: Tensor[(128, 128, 3, 3), float32], %p189: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(128, 128, 3, 3), float32] {
    %757 = squeeze(%p189, axis=[0, 2, 3]) /* ty=Tensor[(128), float32] */;
    %758 = expand_dims(%757, axis=1, num_newaxis=3) /* ty=Tensor[(128, 1, 1, 1), float32] */;
    multiply(%p0155, %758) /* ty=Tensor[(128, 128, 3, 3), float32] */
  };
  %760 = (%model.backbone.body.layer2.1.conv2.weight, %x176);
  %761 = (%tensor_0157,);
  let %v157: () = vm.invoke_tvm_op(%759, %760, %761) /* ty=() */;
  let %x177: Tensor[(128, 128, 3, 3), float32] = %tensor_0157;
  let %x178: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.1.bn2.bias, meta[relay.Constant][164] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][32]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %x179: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.1.bn2.running_mean, meta[relay.Constant][165] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][33]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %storage_0175: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][175]) /* ty=Storage[] */;
  let %tensor_0158: Tensor[(1, 128, 100, 100), float32] = memory.alloc_tensor(%storage_0175, 0 /* ty=int64 */, meta[relay.Constant][166] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][175]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %766 = fn (%p0156: Tensor[(1, 128, 100, 100), float32], %p190: Tensor[(128, 128, 3, 3), float32], %p239: Tensor[(1, 128, 1, 1), float32], %p324: Tensor[(1, 128, 1, 1), float32], %p416: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(1, 128, 100, 100), float32] {
    %762 = nn.conv2d(%p0156, %p190, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    %763 = multiply(%p324, %p416) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %764 = subtract(%p239, %763) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %765 = add(%762, %764) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    nn.relu(%765) /* ty=Tensor[(1, 128, 100, 100), float32] */
  };
  %767 = (%x175, %x177, %x178, %x179, %x176);
  %768 = (%tensor_0158,);
  let %v158: () = vm.invoke_tvm_op(%766, %767, %768) /* ty=() */;
  let %x180: Tensor[(1, 128, 100, 100), float32] = %tensor_0158;
  let %storage_0176: Storage[] = memory.alloc_storage(2048 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][176]) /* ty=Storage[] */;
  let %tensor_0159: Tensor[(1, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0176, 0 /* ty=int64 */, meta[relay.Constant][167] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][176]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %773 = fn (%p0157: Tensor[(512), float32], %p191: Tensor[(512), float32], Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    %769 = reshape(%p0157, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %770 = reshape(%p191, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %771 = add(%770, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %772 = rsqrt(%771) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    multiply(%769, %772) /* ty=Tensor[(1, 512, 1, 1), float32] */
  };
  %774 = (%model.backbone.body.layer2.1.bn3.weight, %model.backbone.body.layer2.1.bn3.running_var);
  %775 = (%tensor_0159,);
  let %v159: () = vm.invoke_tvm_op(%773, %774, %775) /* ty=() */;
  let %x181: Tensor[(1, 512, 1, 1), float32] = %tensor_0159;
  let %storage_0177: Storage[] = memory.alloc_storage(262144 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][177]) /* ty=Storage[] */;
  let %tensor_0160: Tensor[(512, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0177, 0 /* ty=int64 */, meta[relay.Constant][168] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][177]) /* ty=Tensor[(512, 128, 1, 1), float32] */;
  %778 = fn (%p0158: Tensor[(512, 128, 1, 1), float32], %p192: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(512, 128, 1, 1), float32] {
    %776 = squeeze(%p192, axis=[0, 2, 3]) /* ty=Tensor[(512), float32] */;
    %777 = expand_dims(%776, axis=1, num_newaxis=3) /* ty=Tensor[(512, 1, 1, 1), float32] */;
    multiply(%p0158, %777) /* ty=Tensor[(512, 128, 1, 1), float32] */
  };
  %779 = (%model.backbone.body.layer2.1.conv3.weight, %x181);
  %780 = (%tensor_0160,);
  let %v160: () = vm.invoke_tvm_op(%778, %779, %780) /* ty=() */;
  let %x182: Tensor[(512, 128, 1, 1), float32] = %tensor_0160;
  let %x183: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.1.bn3.bias, meta[relay.Constant][169] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][34]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %x184: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.1.bn3.running_mean, meta[relay.Constant][170] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][35]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %storage_0178: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][178]) /* ty=Storage[] */;
  let %tensor_0161: Tensor[(1, 512, 100, 100), float32] = memory.alloc_tensor(%storage_0178, 0 /* ty=int64 */, meta[relay.Constant][171] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][178]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %786 = fn (%p0159: Tensor[(1, 128, 100, 100), float32], %p193: Tensor[(512, 128, 1, 1), float32], %p240: Tensor[(1, 512, 1, 1), float32], %p325: Tensor[(1, 512, 1, 1), float32], %p417: Tensor[(1, 512, 1, 1), float32], %p54: Tensor[(1, 512, 100, 100), float32], Primitive=1) -> Tensor[(1, 512, 100, 100), float32] {
    %781 = nn.conv2d(%p0159, %p193, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    %782 = multiply(%p325, %p417) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %783 = subtract(%p240, %782) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %784 = add(%781, %783) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    %785 = add(%784, %p54) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    nn.relu(%785) /* ty=Tensor[(1, 512, 100, 100), float32] */
  };
  %787 = (%x180, %x182, %x183, %x184, %x181, %x170);
  %788 = (%tensor_0161,);
  let %v161: () = vm.invoke_tvm_op(%786, %787, %788) /* ty=() */;
  let %x185: Tensor[(1, 512, 100, 100), float32] = %tensor_0161;
  let %storage_0179: Storage[] = memory.alloc_storage(512 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][179]) /* ty=Storage[] */;
  let %tensor_0162: Tensor[(1, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0179, 0 /* ty=int64 */, meta[relay.Constant][172] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][179]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %793 = fn (%p0160: Tensor[(128), float32], %p194: Tensor[(128), float32], Primitive=1) -> Tensor[(1, 128, 1, 1), float32] {
    %789 = reshape(%p0160, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %790 = reshape(%p194, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %791 = add(%790, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %792 = rsqrt(%791) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    multiply(%789, %792) /* ty=Tensor[(1, 128, 1, 1), float32] */
  };
  %794 = (%model.backbone.body.layer2.2.bn1.weight, %model.backbone.body.layer2.2.bn1.running_var);
  %795 = (%tensor_0162,);
  let %v162: () = vm.invoke_tvm_op(%793, %794, %795) /* ty=() */;
  let %x186: Tensor[(1, 128, 1, 1), float32] = %tensor_0162;
  let %storage_0180: Storage[] = memory.alloc_storage(262144 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][180]) /* ty=Storage[] */;
  let %tensor_0163: Tensor[(128, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0180, 0 /* ty=int64 */, meta[relay.Constant][173] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][180]) /* ty=Tensor[(128, 512, 1, 1), float32] */;
  %798 = fn (%p0161: Tensor[(128, 512, 1, 1), float32], %p195: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(128, 512, 1, 1), float32] {
    %796 = squeeze(%p195, axis=[0, 2, 3]) /* ty=Tensor[(128), float32] */;
    %797 = expand_dims(%796, axis=1, num_newaxis=3) /* ty=Tensor[(128, 1, 1, 1), float32] */;
    multiply(%p0161, %797) /* ty=Tensor[(128, 512, 1, 1), float32] */
  };
  %799 = (%model.backbone.body.layer2.2.conv1.weight, %x186);
  %800 = (%tensor_0163,);
  let %v163: () = vm.invoke_tvm_op(%798, %799, %800) /* ty=() */;
  let %x187: Tensor[(128, 512, 1, 1), float32] = %tensor_0163;
  let %x188: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.2.bn1.bias, meta[relay.Constant][174] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][36]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %x189: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.2.bn1.running_mean, meta[relay.Constant][175] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][37]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %storage_0181: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][181]) /* ty=Storage[] */;
  let %tensor_0164: Tensor[(1, 128, 100, 100), float32] = memory.alloc_tensor(%storage_0181, 0 /* ty=int64 */, meta[relay.Constant][176] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][181]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %805 = fn (%p0162: Tensor[(1, 512, 100, 100), float32], %p196: Tensor[(128, 512, 1, 1), float32], %p241: Tensor[(1, 128, 1, 1), float32], %p326: Tensor[(1, 128, 1, 1), float32], %p418: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(1, 128, 100, 100), float32] {
    %801 = nn.conv2d(%p0162, %p196, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    %802 = multiply(%p326, %p418) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %803 = subtract(%p241, %802) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %804 = add(%801, %803) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    nn.relu(%804) /* ty=Tensor[(1, 128, 100, 100), float32] */
  };
  %806 = (%x185, %x187, %x188, %x189, %x186);
  %807 = (%tensor_0164,);
  let %v164: () = vm.invoke_tvm_op(%805, %806, %807) /* ty=() */;
  let %x190: Tensor[(1, 128, 100, 100), float32] = %tensor_0164;
  let %storage_0182: Storage[] = memory.alloc_storage(512 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][182]) /* ty=Storage[] */;
  let %tensor_0165: Tensor[(1, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0182, 0 /* ty=int64 */, meta[relay.Constant][177] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][182]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %812 = fn (%p0163: Tensor[(128), float32], %p197: Tensor[(128), float32], Primitive=1) -> Tensor[(1, 128, 1, 1), float32] {
    %808 = reshape(%p0163, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %809 = reshape(%p197, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %810 = add(%809, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %811 = rsqrt(%810) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    multiply(%808, %811) /* ty=Tensor[(1, 128, 1, 1), float32] */
  };
  %813 = (%model.backbone.body.layer2.2.bn2.weight, %model.backbone.body.layer2.2.bn2.running_var);
  %814 = (%tensor_0165,);
  let %v165: () = vm.invoke_tvm_op(%812, %813, %814) /* ty=() */;
  let %x191: Tensor[(1, 128, 1, 1), float32] = %tensor_0165;
  let %storage_0183: Storage[] = memory.alloc_storage(589824 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][183]) /* ty=Storage[] */;
  let %tensor_0166: Tensor[(128, 128, 3, 3), float32] = memory.alloc_tensor(%storage_0183, 0 /* ty=int64 */, meta[relay.Constant][178] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][183]) /* ty=Tensor[(128, 128, 3, 3), float32] */;
  %817 = fn (%p0164: Tensor[(128, 128, 3, 3), float32], %p198: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(128, 128, 3, 3), float32] {
    %815 = squeeze(%p198, axis=[0, 2, 3]) /* ty=Tensor[(128), float32] */;
    %816 = expand_dims(%815, axis=1, num_newaxis=3) /* ty=Tensor[(128, 1, 1, 1), float32] */;
    multiply(%p0164, %816) /* ty=Tensor[(128, 128, 3, 3), float32] */
  };
  %818 = (%model.backbone.body.layer2.2.conv2.weight, %x191);
  %819 = (%tensor_0166,);
  let %v166: () = vm.invoke_tvm_op(%817, %818, %819) /* ty=() */;
  let %x192: Tensor[(128, 128, 3, 3), float32] = %tensor_0166;
  let %x193: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.2.bn2.bias, meta[relay.Constant][179] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][38]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %x194: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.2.bn2.running_mean, meta[relay.Constant][180] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][39]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %storage_0184: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][184]) /* ty=Storage[] */;
  let %tensor_0167: Tensor[(1, 128, 100, 100), float32] = memory.alloc_tensor(%storage_0184, 0 /* ty=int64 */, meta[relay.Constant][181] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][184]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %824 = fn (%p0165: Tensor[(1, 128, 100, 100), float32], %p199: Tensor[(128, 128, 3, 3), float32], %p242: Tensor[(1, 128, 1, 1), float32], %p327: Tensor[(1, 128, 1, 1), float32], %p419: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(1, 128, 100, 100), float32] {
    %820 = nn.conv2d(%p0165, %p199, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    %821 = multiply(%p327, %p419) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %822 = subtract(%p242, %821) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %823 = add(%820, %822) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    nn.relu(%823) /* ty=Tensor[(1, 128, 100, 100), float32] */
  };
  %825 = (%x190, %x192, %x193, %x194, %x191);
  %826 = (%tensor_0167,);
  let %v167: () = vm.invoke_tvm_op(%824, %825, %826) /* ty=() */;
  let %x195: Tensor[(1, 128, 100, 100), float32] = %tensor_0167;
  let %storage_0185: Storage[] = memory.alloc_storage(2048 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][185]) /* ty=Storage[] */;
  let %tensor_0168: Tensor[(1, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0185, 0 /* ty=int64 */, meta[relay.Constant][182] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][185]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %831 = fn (%p0166: Tensor[(512), float32], %p1100: Tensor[(512), float32], Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    %827 = reshape(%p0166, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %828 = reshape(%p1100, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %829 = add(%828, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %830 = rsqrt(%829) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    multiply(%827, %830) /* ty=Tensor[(1, 512, 1, 1), float32] */
  };
  %832 = (%model.backbone.body.layer2.2.bn3.weight, %model.backbone.body.layer2.2.bn3.running_var);
  %833 = (%tensor_0168,);
  let %v168: () = vm.invoke_tvm_op(%831, %832, %833) /* ty=() */;
  let %x196: Tensor[(1, 512, 1, 1), float32] = %tensor_0168;
  let %storage_0186: Storage[] = memory.alloc_storage(262144 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][186]) /* ty=Storage[] */;
  let %tensor_0169: Tensor[(512, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0186, 0 /* ty=int64 */, meta[relay.Constant][183] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][186]) /* ty=Tensor[(512, 128, 1, 1), float32] */;
  %836 = fn (%p0167: Tensor[(512, 128, 1, 1), float32], %p1101: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(512, 128, 1, 1), float32] {
    %834 = squeeze(%p1101, axis=[0, 2, 3]) /* ty=Tensor[(512), float32] */;
    %835 = expand_dims(%834, axis=1, num_newaxis=3) /* ty=Tensor[(512, 1, 1, 1), float32] */;
    multiply(%p0167, %835) /* ty=Tensor[(512, 128, 1, 1), float32] */
  };
  %837 = (%model.backbone.body.layer2.2.conv3.weight, %x196);
  %838 = (%tensor_0169,);
  let %v169: () = vm.invoke_tvm_op(%836, %837, %838) /* ty=() */;
  let %x197: Tensor[(512, 128, 1, 1), float32] = %tensor_0169;
  let %x198: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.2.bn3.bias, meta[relay.Constant][184] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][40]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %x199: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.2.bn3.running_mean, meta[relay.Constant][185] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][41]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %storage_0187: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][187]) /* ty=Storage[] */;
  let %tensor_0170: Tensor[(1, 512, 100, 100), float32] = memory.alloc_tensor(%storage_0187, 0 /* ty=int64 */, meta[relay.Constant][186] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][187]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %844 = fn (%p0168: Tensor[(1, 128, 100, 100), float32], %p1102: Tensor[(512, 128, 1, 1), float32], %p243: Tensor[(1, 512, 1, 1), float32], %p328: Tensor[(1, 512, 1, 1), float32], %p420: Tensor[(1, 512, 1, 1), float32], %p55: Tensor[(1, 512, 100, 100), float32], Primitive=1) -> Tensor[(1, 512, 100, 100), float32] {
    %839 = nn.conv2d(%p0168, %p1102, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    %840 = multiply(%p328, %p420) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %841 = subtract(%p243, %840) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %842 = add(%839, %841) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    %843 = add(%842, %p55) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    nn.relu(%843) /* ty=Tensor[(1, 512, 100, 100), float32] */
  };
  %845 = (%x195, %x197, %x198, %x199, %x196, %x185);
  %846 = (%tensor_0170,);
  let %v170: () = vm.invoke_tvm_op(%844, %845, %846) /* ty=() */;
  let %x200: Tensor[(1, 512, 100, 100), float32] = %tensor_0170;
  let %storage_0188: Storage[] = memory.alloc_storage(512 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][188]) /* ty=Storage[] */;
  let %tensor_0171: Tensor[(1, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0188, 0 /* ty=int64 */, meta[relay.Constant][187] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][188]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %851 = fn (%p0169: Tensor[(128), float32], %p1103: Tensor[(128), float32], Primitive=1) -> Tensor[(1, 128, 1, 1), float32] {
    %847 = reshape(%p0169, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %848 = reshape(%p1103, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %849 = add(%848, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %850 = rsqrt(%849) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    multiply(%847, %850) /* ty=Tensor[(1, 128, 1, 1), float32] */
  };
  %852 = (%model.backbone.body.layer2.3.bn1.weight, %model.backbone.body.layer2.3.bn1.running_var);
  %853 = (%tensor_0171,);
  let %v171: () = vm.invoke_tvm_op(%851, %852, %853) /* ty=() */;
  let %x201: Tensor[(1, 128, 1, 1), float32] = %tensor_0171;
  let %storage_0189: Storage[] = memory.alloc_storage(262144 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][189]) /* ty=Storage[] */;
  let %tensor_0172: Tensor[(128, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0189, 0 /* ty=int64 */, meta[relay.Constant][188] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][189]) /* ty=Tensor[(128, 512, 1, 1), float32] */;
  %856 = fn (%p0170: Tensor[(128, 512, 1, 1), float32], %p1104: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(128, 512, 1, 1), float32] {
    %854 = squeeze(%p1104, axis=[0, 2, 3]) /* ty=Tensor[(128), float32] */;
    %855 = expand_dims(%854, axis=1, num_newaxis=3) /* ty=Tensor[(128, 1, 1, 1), float32] */;
    multiply(%p0170, %855) /* ty=Tensor[(128, 512, 1, 1), float32] */
  };
  %857 = (%model.backbone.body.layer2.3.conv1.weight, %x201);
  %858 = (%tensor_0172,);
  let %v172: () = vm.invoke_tvm_op(%856, %857, %858) /* ty=() */;
  let %x202: Tensor[(128, 512, 1, 1), float32] = %tensor_0172;
  let %x203: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.3.bn1.bias, meta[relay.Constant][189] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][42]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %x204: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.3.bn1.running_mean, meta[relay.Constant][190] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][43]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %storage_0190: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][190]) /* ty=Storage[] */;
  let %tensor_0173: Tensor[(1, 128, 100, 100), float32] = memory.alloc_tensor(%storage_0190, 0 /* ty=int64 */, meta[relay.Constant][191] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][190]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %863 = fn (%p0171: Tensor[(1, 512, 100, 100), float32], %p1105: Tensor[(128, 512, 1, 1), float32], %p244: Tensor[(1, 128, 1, 1), float32], %p329: Tensor[(1, 128, 1, 1), float32], %p421: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(1, 128, 100, 100), float32] {
    %859 = nn.conv2d(%p0171, %p1105, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    %860 = multiply(%p329, %p421) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %861 = subtract(%p244, %860) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %862 = add(%859, %861) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    nn.relu(%862) /* ty=Tensor[(1, 128, 100, 100), float32] */
  };
  %864 = (%x200, %x202, %x203, %x204, %x201);
  %865 = (%tensor_0173,);
  let %v173: () = vm.invoke_tvm_op(%863, %864, %865) /* ty=() */;
  let %x205: Tensor[(1, 128, 100, 100), float32] = %tensor_0173;
  let %storage_0191: Storage[] = memory.alloc_storage(512 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][191]) /* ty=Storage[] */;
  let %tensor_0174: Tensor[(1, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0191, 0 /* ty=int64 */, meta[relay.Constant][192] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][191]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %870 = fn (%p0172: Tensor[(128), float32], %p1106: Tensor[(128), float32], Primitive=1) -> Tensor[(1, 128, 1, 1), float32] {
    %866 = reshape(%p0172, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %867 = reshape(%p1106, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %868 = add(%867, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %869 = rsqrt(%868) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    multiply(%866, %869) /* ty=Tensor[(1, 128, 1, 1), float32] */
  };
  %871 = (%model.backbone.body.layer2.3.bn2.weight, %model.backbone.body.layer2.3.bn2.running_var);
  %872 = (%tensor_0174,);
  let %v174: () = vm.invoke_tvm_op(%870, %871, %872) /* ty=() */;
  let %x206: Tensor[(1, 128, 1, 1), float32] = %tensor_0174;
  let %storage_0192: Storage[] = memory.alloc_storage(589824 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][192]) /* ty=Storage[] */;
  let %tensor_0175: Tensor[(128, 128, 3, 3), float32] = memory.alloc_tensor(%storage_0192, 0 /* ty=int64 */, meta[relay.Constant][193] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][192]) /* ty=Tensor[(128, 128, 3, 3), float32] */;
  %875 = fn (%p0173: Tensor[(128, 128, 3, 3), float32], %p1107: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(128, 128, 3, 3), float32] {
    %873 = squeeze(%p1107, axis=[0, 2, 3]) /* ty=Tensor[(128), float32] */;
    %874 = expand_dims(%873, axis=1, num_newaxis=3) /* ty=Tensor[(128, 1, 1, 1), float32] */;
    multiply(%p0173, %874) /* ty=Tensor[(128, 128, 3, 3), float32] */
  };
  %876 = (%model.backbone.body.layer2.3.conv2.weight, %x206);
  %877 = (%tensor_0175,);
  let %v175: () = vm.invoke_tvm_op(%875, %876, %877) /* ty=() */;
  let %x207: Tensor[(128, 128, 3, 3), float32] = %tensor_0175;
  let %x208: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.3.bn2.bias, meta[relay.Constant][194] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][44]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %x209: Tensor[(1, 128, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.3.bn2.running_mean, meta[relay.Constant][195] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][45]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  let %storage_0193: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][193]) /* ty=Storage[] */;
  let %tensor_0176: Tensor[(1, 128, 100, 100), float32] = memory.alloc_tensor(%storage_0193, 0 /* ty=int64 */, meta[relay.Constant][196] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][193]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
  %882 = fn (%p0174: Tensor[(1, 128, 100, 100), float32], %p1108: Tensor[(128, 128, 3, 3), float32], %p245: Tensor[(1, 128, 1, 1), float32], %p330: Tensor[(1, 128, 1, 1), float32], %p422: Tensor[(1, 128, 1, 1), float32], Primitive=1) -> Tensor[(1, 128, 100, 100), float32] {
    %878 = nn.conv2d(%p0174, %p1108, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    %879 = multiply(%p330, %p422) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %880 = subtract(%p245, %879) /* ty=Tensor[(1, 128, 1, 1), float32] */;
    %881 = add(%878, %880) /* ty=Tensor[(1, 128, 100, 100), float32] */;
    nn.relu(%881) /* ty=Tensor[(1, 128, 100, 100), float32] */
  };
  %883 = (%x205, %x207, %x208, %x209, %x206);
  %884 = (%tensor_0176,);
  let %v176: () = vm.invoke_tvm_op(%882, %883, %884) /* ty=() */;
  let %x210: Tensor[(1, 128, 100, 100), float32] = %tensor_0176;
  let %storage_0194: Storage[] = memory.alloc_storage(2048 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][194]) /* ty=Storage[] */;
  let %tensor_0177: Tensor[(1, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0194, 0 /* ty=int64 */, meta[relay.Constant][197] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][194]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %889 = fn (%p0175: Tensor[(512), float32], %p1109: Tensor[(512), float32], Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    %885 = reshape(%p0175, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %886 = reshape(%p1109, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %887 = add(%886, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %888 = rsqrt(%887) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    multiply(%885, %888) /* ty=Tensor[(1, 512, 1, 1), float32] */
  };
  %890 = (%model.backbone.body.layer2.3.bn3.weight, %model.backbone.body.layer2.3.bn3.running_var);
  %891 = (%tensor_0177,);
  let %v177: () = vm.invoke_tvm_op(%889, %890, %891) /* ty=() */;
  let %x211: Tensor[(1, 512, 1, 1), float32] = %tensor_0177;
  let %storage_0195: Storage[] = memory.alloc_storage(262144 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][195]) /* ty=Storage[] */;
  let %tensor_0178: Tensor[(512, 128, 1, 1), float32] = memory.alloc_tensor(%storage_0195, 0 /* ty=int64 */, meta[relay.Constant][198] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][195]) /* ty=Tensor[(512, 128, 1, 1), float32] */;
  %894 = fn (%p0176: Tensor[(512, 128, 1, 1), float32], %p1110: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(512, 128, 1, 1), float32] {
    %892 = squeeze(%p1110, axis=[0, 2, 3]) /* ty=Tensor[(512), float32] */;
    %893 = expand_dims(%892, axis=1, num_newaxis=3) /* ty=Tensor[(512, 1, 1, 1), float32] */;
    multiply(%p0176, %893) /* ty=Tensor[(512, 128, 1, 1), float32] */
  };
  %895 = (%model.backbone.body.layer2.3.conv3.weight, %x211);
  %896 = (%tensor_0178,);
  let %v178: () = vm.invoke_tvm_op(%894, %895, %896) /* ty=() */;
  let %x212: Tensor[(512, 128, 1, 1), float32] = %tensor_0178;
  let %x213: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.3.bn3.bias, meta[relay.Constant][199] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][46]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %x214: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer2.3.bn3.running_mean, meta[relay.Constant][200] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][47]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %storage_0196: Storage[] = memory.alloc_storage(20480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][196]) /* ty=Storage[] */;
  let %tensor_0179: Tensor[(1, 512, 100, 100), float32] = memory.alloc_tensor(%storage_0196, 0 /* ty=int64 */, meta[relay.Constant][201] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][196]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
  %902 = fn (%p0177: Tensor[(1, 128, 100, 100), float32], %p1111: Tensor[(512, 128, 1, 1), float32], %p246: Tensor[(1, 512, 1, 1), float32], %p331: Tensor[(1, 512, 1, 1), float32], %p423: Tensor[(1, 512, 1, 1), float32], %p56: Tensor[(1, 512, 100, 100), float32], Primitive=1) -> Tensor[(1, 512, 100, 100), float32] {
    %897 = nn.conv2d(%p0177, %p1111, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    %898 = multiply(%p331, %p423) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %899 = subtract(%p246, %898) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %900 = add(%897, %899) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    %901 = add(%900, %p56) /* ty=Tensor[(1, 512, 100, 100), float32] */;
    nn.relu(%901) /* ty=Tensor[(1, 512, 100, 100), float32] */
  };
  %903 = (%x210, %x212, %x213, %x214, %x211, %x200);
  %904 = (%tensor_0179,);
  let %v179: () = vm.invoke_tvm_op(%902, %903, %904) /* ty=() */;
  let %x215: Tensor[(1, 512, 100, 100), float32] = %tensor_0179;
  let %storage_0197: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][197]) /* ty=Storage[] */;
  let %tensor_0180: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0197, 0 /* ty=int64 */, meta[relay.Constant][202] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][197]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %909 = fn (%p0178: Tensor[(256), float32], %p1112: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %905 = reshape(%p0178, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %906 = reshape(%p1112, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %907 = add(%906, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %908 = rsqrt(%907) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%905, %908) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %910 = (%model.backbone.body.layer3.0.bn1.weight, %model.backbone.body.layer3.0.bn1.running_var);
  %911 = (%tensor_0180,);
  let %v180: () = vm.invoke_tvm_op(%909, %910, %911) /* ty=() */;
  let %x216: Tensor[(1, 256, 1, 1), float32] = %tensor_0180;
  let %storage_0198: Storage[] = memory.alloc_storage(524288 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][198]) /* ty=Storage[] */;
  let %tensor_0181: Tensor[(256, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0198, 0 /* ty=int64 */, meta[relay.Constant][203] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][198]) /* ty=Tensor[(256, 512, 1, 1), float32] */;
  %914 = fn (%p0179: Tensor[(256, 512, 1, 1), float32], %p1113: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 512, 1, 1), float32] {
    %912 = squeeze(%p1113, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %913 = expand_dims(%912, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0179, %913) /* ty=Tensor[(256, 512, 1, 1), float32] */
  };
  %915 = (%model.backbone.body.layer3.0.conv1.weight, %x216);
  %916 = (%tensor_0181,);
  let %v181: () = vm.invoke_tvm_op(%914, %915, %916) /* ty=() */;
  let %x217: Tensor[(256, 512, 1, 1), float32] = %tensor_0181;
  let %x218: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.0.bn1.bias, meta[relay.Constant][204] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][48]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x219: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.0.bn1.running_mean, meta[relay.Constant][205] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][49]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0199: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][199]) /* ty=Storage[] */;
  let %tensor_0182: Tensor[(1, 256, 100, 100), float32] = memory.alloc_tensor(%storage_0199, 0 /* ty=int64 */, meta[relay.Constant][206] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][199]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %921 = fn (%p0180: Tensor[(1, 512, 100, 100), float32], %p1114: Tensor[(256, 512, 1, 1), float32], %p247: Tensor[(1, 256, 1, 1), float32], %p332: Tensor[(1, 256, 1, 1), float32], %p424: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 100, 100), float32] {
    %917 = nn.conv2d(%p0180, %p1114, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
    %918 = multiply(%p332, %p424) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %919 = subtract(%p247, %918) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %920 = add(%917, %919) /* ty=Tensor[(1, 256, 100, 100), float32] */;
    nn.relu(%920) /* ty=Tensor[(1, 256, 100, 100), float32] */
  };
  %922 = (%x215, %x217, %x218, %x219, %x216);
  %923 = (%tensor_0182,);
  let %v182: () = vm.invoke_tvm_op(%921, %922, %923) /* ty=() */;
  let %x220: Tensor[(1, 256, 100, 100), float32] = %tensor_0182;
  let %storage_0200: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][200]) /* ty=Storage[] */;
  let %tensor_0183: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0200, 0 /* ty=int64 */, meta[relay.Constant][207] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][200]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %928 = fn (%p0181: Tensor[(256), float32], %p1115: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %924 = reshape(%p0181, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %925 = reshape(%p1115, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %926 = add(%925, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %927 = rsqrt(%926) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%924, %927) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %929 = (%model.backbone.body.layer3.0.bn2.weight, %model.backbone.body.layer3.0.bn2.running_var);
  %930 = (%tensor_0183,);
  let %v183: () = vm.invoke_tvm_op(%928, %929, %930) /* ty=() */;
  let %x221: Tensor[(1, 256, 1, 1), float32] = %tensor_0183;
  let %storage_0201: Storage[] = memory.alloc_storage(2359296 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][201]) /* ty=Storage[] */;
  let %tensor_0184: Tensor[(256, 256, 3, 3), float32] = memory.alloc_tensor(%storage_0201, 0 /* ty=int64 */, meta[relay.Constant][208] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][201]) /* ty=Tensor[(256, 256, 3, 3), float32] */;
  %933 = fn (%p0182: Tensor[(256, 256, 3, 3), float32], %p1116: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 256, 3, 3), float32] {
    %931 = squeeze(%p1116, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %932 = expand_dims(%931, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0182, %932) /* ty=Tensor[(256, 256, 3, 3), float32] */
  };
  %934 = (%model.backbone.body.layer3.0.conv2.weight, %x221);
  %935 = (%tensor_0184,);
  let %v184: () = vm.invoke_tvm_op(%933, %934, %935) /* ty=() */;
  let %x222: Tensor[(256, 256, 3, 3), float32] = %tensor_0184;
  let %x223: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.0.bn2.bias, meta[relay.Constant][209] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][50]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x224: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.0.bn2.running_mean, meta[relay.Constant][210] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][51]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0202: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][202]) /* ty=Storage[] */;
  let %tensor_0185: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0202, 0 /* ty=int64 */, meta[relay.Constant][211] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][202]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %940 = fn (%p0183: Tensor[(1, 256, 100, 100), float32], %p1117: Tensor[(256, 256, 3, 3), float32], %p248: Tensor[(1, 256, 1, 1), float32], %p333: Tensor[(1, 256, 1, 1), float32], %p425: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %936 = nn.conv2d(%p0183, %p1117, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %937 = multiply(%p333, %p425) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %938 = subtract(%p248, %937) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %939 = add(%936, %938) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%939) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %941 = (%x220, %x222, %x223, %x224, %x221);
  %942 = (%tensor_0185,);
  let %v185: () = vm.invoke_tvm_op(%940, %941, %942) /* ty=() */;
  let %x225: Tensor[(1, 256, 50, 50), float32] = %tensor_0185;
  let %storage_0203: Storage[] = memory.alloc_storage(4096 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][203]) /* ty=Storage[] */;
  let %tensor_0186: Tensor[(1, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0203, 0 /* ty=int64 */, meta[relay.Constant][212] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][203]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %947 = fn (%p0184: Tensor[(1024), float32], %p1118: Tensor[(1024), float32], Primitive=1) -> Tensor[(1, 1024, 1, 1), float32] {
    %943 = reshape(%p0184, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %944 = reshape(%p1118, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %945 = add(%944, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %946 = rsqrt(%945) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    multiply(%943, %946) /* ty=Tensor[(1, 1024, 1, 1), float32] */
  };
  %948 = (%model.backbone.body.layer3.0.bn3.weight, %model.backbone.body.layer3.0.bn3.running_var);
  %949 = (%tensor_0186,);
  let %v186: () = vm.invoke_tvm_op(%947, %948, %949) /* ty=() */;
  let %x226: Tensor[(1, 1024, 1, 1), float32] = %tensor_0186;
  let %storage_0204: Storage[] = memory.alloc_storage(1048576 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][204]) /* ty=Storage[] */;
  let %tensor_0187: Tensor[(1024, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0204, 0 /* ty=int64 */, meta[relay.Constant][213] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][204]) /* ty=Tensor[(1024, 256, 1, 1), float32] */;
  %952 = fn (%p0185: Tensor[(1024, 256, 1, 1), float32], %p1119: Tensor[(1, 1024, 1, 1), float32], Primitive=1) -> Tensor[(1024, 256, 1, 1), float32] {
    %950 = squeeze(%p1119, axis=[0, 2, 3]) /* ty=Tensor[(1024), float32] */;
    %951 = expand_dims(%950, axis=1, num_newaxis=3) /* ty=Tensor[(1024, 1, 1, 1), float32] */;
    multiply(%p0185, %951) /* ty=Tensor[(1024, 256, 1, 1), float32] */
  };
  %953 = (%model.backbone.body.layer3.0.conv3.weight, %x226);
  %954 = (%tensor_0187,);
  let %v187: () = vm.invoke_tvm_op(%952, %953, %954) /* ty=() */;
  let %x227: Tensor[(1024, 256, 1, 1), float32] = %tensor_0187;
  let %x228: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.0.bn3.bias, meta[relay.Constant][214] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][52]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %x229: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.0.bn3.running_mean, meta[relay.Constant][215] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][53]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %storage_0205: Storage[] = memory.alloc_storage(4096 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][205]) /* ty=Storage[] */;
  let %tensor_0188: Tensor[(1, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0205, 0 /* ty=int64 */, meta[relay.Constant][216] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][205]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %959 = fn (%p0186: Tensor[(1024), float32], %p1120: Tensor[(1024), float32], Primitive=1) -> Tensor[(1, 1024, 1, 1), float32] {
    %955 = reshape(%p0186, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %956 = reshape(%p1120, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %957 = add(%956, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %958 = rsqrt(%957) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    multiply(%955, %958) /* ty=Tensor[(1, 1024, 1, 1), float32] */
  };
  %960 = (%model.backbone.body.layer3.0.downsample.1.weight, %model.backbone.body.layer3.0.downsample.1.running_var);
  %961 = (%tensor_0188,);
  let %v188: () = vm.invoke_tvm_op(%959, %960, %961) /* ty=() */;
  let %x230: Tensor[(1, 1024, 1, 1), float32] = %tensor_0188;
  let %storage_0206: Storage[] = memory.alloc_storage(2097152 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][206]) /* ty=Storage[] */;
  let %tensor_0189: Tensor[(1024, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0206, 0 /* ty=int64 */, meta[relay.Constant][217] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][206]) /* ty=Tensor[(1024, 512, 1, 1), float32] */;
  %964 = fn (%p0187: Tensor[(1024, 512, 1, 1), float32], %p1121: Tensor[(1, 1024, 1, 1), float32], Primitive=1) -> Tensor[(1024, 512, 1, 1), float32] {
    %962 = squeeze(%p1121, axis=[0, 2, 3]) /* ty=Tensor[(1024), float32] */;
    %963 = expand_dims(%962, axis=1, num_newaxis=3) /* ty=Tensor[(1024, 1, 1, 1), float32] */;
    multiply(%p0187, %963) /* ty=Tensor[(1024, 512, 1, 1), float32] */
  };
  %965 = (%model.backbone.body.layer3.0.downsample.0.weight, %x230);
  %966 = (%tensor_0189,);
  let %v189: () = vm.invoke_tvm_op(%964, %965, %966) /* ty=() */;
  let %x231: Tensor[(1024, 512, 1, 1), float32] = %tensor_0189;
  let %x232: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.0.downsample.1.bias, meta[relay.Constant][218] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][54]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %x233: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.0.downsample.1.running_mean, meta[relay.Constant][219] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][55]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %storage_0207: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][207]) /* ty=Storage[] */;
  let %tensor_0190: Tensor[(1, 1024, 50, 50), float32] = memory.alloc_tensor(%storage_0207, 0 /* ty=int64 */, meta[relay.Constant][220] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][207]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %970 = fn (%p0188: Tensor[(1, 512, 100, 100), float32], %p1122: Tensor[(1024, 512, 1, 1), float32], %p249: Tensor[(1, 1024, 1, 1), float32], %p334: Tensor[(1, 1024, 1, 1), float32], %p426: Tensor[(1, 1024, 1, 1), float32], Primitive=1) -> Tensor[(1, 1024, 50, 50), float32] {
    %967 = nn.conv2d(%p0188, %p1122, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %968 = multiply(%p334, %p426) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %969 = subtract(%p249, %968) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    add(%967, %969) /* ty=Tensor[(1, 1024, 50, 50), float32] */
  };
  %971 = (%x215, %x231, %x232, %x233, %x230);
  %972 = (%tensor_0190,);
  let %v190: () = vm.invoke_tvm_op(%970, %971, %972) /* ty=() */;
  let %x234: Tensor[(1, 1024, 50, 50), float32] = %tensor_0190;
  let %storage_0208: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][208]) /* ty=Storage[] */;
  let %tensor_0191: Tensor[(1, 1024, 50, 50), float32] = memory.alloc_tensor(%storage_0208, 0 /* ty=int64 */, meta[relay.Constant][221] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][208]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %978 = fn (%p0189: Tensor[(1, 256, 50, 50), float32], %p1123: Tensor[(1024, 256, 1, 1), float32], %p250: Tensor[(1, 1024, 1, 1), float32], %p335: Tensor[(1, 1024, 1, 1), float32], %p427: Tensor[(1, 1024, 1, 1), float32], %p57: Tensor[(1, 1024, 50, 50), float32], Primitive=1) -> Tensor[(1, 1024, 50, 50), float32] {
    %973 = nn.conv2d(%p0189, %p1123, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %974 = multiply(%p335, %p427) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %975 = subtract(%p250, %974) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %976 = add(%973, %975) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %977 = add(%976, %p57) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    nn.relu(%977) /* ty=Tensor[(1, 1024, 50, 50), float32] */
  };
  %979 = (%x225, %x227, %x228, %x229, %x226, %x234);
  %980 = (%tensor_0191,);
  let %v191: () = vm.invoke_tvm_op(%978, %979, %980) /* ty=() */;
  let %x235: Tensor[(1, 1024, 50, 50), float32] = %tensor_0191;
  let %storage_0209: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][209]) /* ty=Storage[] */;
  let %tensor_0192: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0209, 0 /* ty=int64 */, meta[relay.Constant][222] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][209]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %985 = fn (%p0190: Tensor[(256), float32], %p1124: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %981 = reshape(%p0190, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %982 = reshape(%p1124, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %983 = add(%982, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %984 = rsqrt(%983) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%981, %984) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %986 = (%model.backbone.body.layer3.1.bn1.weight, %model.backbone.body.layer3.1.bn1.running_var);
  %987 = (%tensor_0192,);
  let %v192: () = vm.invoke_tvm_op(%985, %986, %987) /* ty=() */;
  let %x236: Tensor[(1, 256, 1, 1), float32] = %tensor_0192;
  let %storage_0210: Storage[] = memory.alloc_storage(1048576 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][210]) /* ty=Storage[] */;
  let %tensor_0193: Tensor[(256, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0210, 0 /* ty=int64 */, meta[relay.Constant][223] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][210]) /* ty=Tensor[(256, 1024, 1, 1), float32] */;
  %990 = fn (%p0191: Tensor[(256, 1024, 1, 1), float32], %p1125: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 1024, 1, 1), float32] {
    %988 = squeeze(%p1125, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %989 = expand_dims(%988, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0191, %989) /* ty=Tensor[(256, 1024, 1, 1), float32] */
  };
  %991 = (%model.backbone.body.layer3.1.conv1.weight, %x236);
  %992 = (%tensor_0193,);
  let %v193: () = vm.invoke_tvm_op(%990, %991, %992) /* ty=() */;
  let %x237: Tensor[(256, 1024, 1, 1), float32] = %tensor_0193;
  let %x238: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.1.bn1.bias, meta[relay.Constant][224] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][56]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x239: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.1.bn1.running_mean, meta[relay.Constant][225] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][57]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0211: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][211]) /* ty=Storage[] */;
  let %tensor_0194: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0211, 0 /* ty=int64 */, meta[relay.Constant][226] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][211]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %997 = fn (%p0192: Tensor[(1, 1024, 50, 50), float32], %p1126: Tensor[(256, 1024, 1, 1), float32], %p251: Tensor[(1, 256, 1, 1), float32], %p336: Tensor[(1, 256, 1, 1), float32], %p428: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %993 = nn.conv2d(%p0192, %p1126, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %994 = multiply(%p336, %p428) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %995 = subtract(%p251, %994) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %996 = add(%993, %995) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%996) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %998 = (%x235, %x237, %x238, %x239, %x236);
  %999 = (%tensor_0194,);
  let %v194: () = vm.invoke_tvm_op(%997, %998, %999) /* ty=() */;
  let %x240: Tensor[(1, 256, 50, 50), float32] = %tensor_0194;
  let %storage_0212: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][212]) /* ty=Storage[] */;
  let %tensor_0195: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0212, 0 /* ty=int64 */, meta[relay.Constant][227] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][212]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1004 = fn (%p0193: Tensor[(256), float32], %p1127: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %1000 = reshape(%p0193, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1001 = reshape(%p1127, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1002 = add(%1001, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1003 = rsqrt(%1002) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%1000, %1003) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %1005 = (%model.backbone.body.layer3.1.bn2.weight, %model.backbone.body.layer3.1.bn2.running_var);
  %1006 = (%tensor_0195,);
  let %v195: () = vm.invoke_tvm_op(%1004, %1005, %1006) /* ty=() */;
  let %x241: Tensor[(1, 256, 1, 1), float32] = %tensor_0195;
  let %storage_0213: Storage[] = memory.alloc_storage(2359296 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][213]) /* ty=Storage[] */;
  let %tensor_0196: Tensor[(256, 256, 3, 3), float32] = memory.alloc_tensor(%storage_0213, 0 /* ty=int64 */, meta[relay.Constant][228] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][213]) /* ty=Tensor[(256, 256, 3, 3), float32] */;
  %1009 = fn (%p0194: Tensor[(256, 256, 3, 3), float32], %p1128: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 256, 3, 3), float32] {
    %1007 = squeeze(%p1128, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %1008 = expand_dims(%1007, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0194, %1008) /* ty=Tensor[(256, 256, 3, 3), float32] */
  };
  %1010 = (%model.backbone.body.layer3.1.conv2.weight, %x241);
  %1011 = (%tensor_0196,);
  let %v196: () = vm.invoke_tvm_op(%1009, %1010, %1011) /* ty=() */;
  let %x242: Tensor[(256, 256, 3, 3), float32] = %tensor_0196;
  let %x243: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.1.bn2.bias, meta[relay.Constant][229] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][58]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x244: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.1.bn2.running_mean, meta[relay.Constant][230] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][59]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0214: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][214]) /* ty=Storage[] */;
  let %tensor_0197: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0214, 0 /* ty=int64 */, meta[relay.Constant][231] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][214]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1016 = fn (%p0195: Tensor[(1, 256, 50, 50), float32], %p1129: Tensor[(256, 256, 3, 3), float32], %p252: Tensor[(1, 256, 1, 1), float32], %p337: Tensor[(1, 256, 1, 1), float32], %p429: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1012 = nn.conv2d(%p0195, %p1129, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1013 = multiply(%p337, %p429) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1014 = subtract(%p252, %1013) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1015 = add(%1012, %1014) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%1015) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1017 = (%x240, %x242, %x243, %x244, %x241);
  %1018 = (%tensor_0197,);
  let %v197: () = vm.invoke_tvm_op(%1016, %1017, %1018) /* ty=() */;
  let %x245: Tensor[(1, 256, 50, 50), float32] = %tensor_0197;
  let %storage_0215: Storage[] = memory.alloc_storage(4096 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][215]) /* ty=Storage[] */;
  let %tensor_0198: Tensor[(1, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0215, 0 /* ty=int64 */, meta[relay.Constant][232] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][215]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %1023 = fn (%p0196: Tensor[(1024), float32], %p1130: Tensor[(1024), float32], Primitive=1) -> Tensor[(1, 1024, 1, 1), float32] {
    %1019 = reshape(%p0196, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1020 = reshape(%p1130, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1021 = add(%1020, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1022 = rsqrt(%1021) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    multiply(%1019, %1022) /* ty=Tensor[(1, 1024, 1, 1), float32] */
  };
  %1024 = (%model.backbone.body.layer3.1.bn3.weight, %model.backbone.body.layer3.1.bn3.running_var);
  %1025 = (%tensor_0198,);
  let %v198: () = vm.invoke_tvm_op(%1023, %1024, %1025) /* ty=() */;
  let %x246: Tensor[(1, 1024, 1, 1), float32] = %tensor_0198;
  let %storage_0216: Storage[] = memory.alloc_storage(1048576 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][216]) /* ty=Storage[] */;
  let %tensor_0199: Tensor[(1024, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0216, 0 /* ty=int64 */, meta[relay.Constant][233] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][216]) /* ty=Tensor[(1024, 256, 1, 1), float32] */;
  %1028 = fn (%p0197: Tensor[(1024, 256, 1, 1), float32], %p1131: Tensor[(1, 1024, 1, 1), float32], Primitive=1) -> Tensor[(1024, 256, 1, 1), float32] {
    %1026 = squeeze(%p1131, axis=[0, 2, 3]) /* ty=Tensor[(1024), float32] */;
    %1027 = expand_dims(%1026, axis=1, num_newaxis=3) /* ty=Tensor[(1024, 1, 1, 1), float32] */;
    multiply(%p0197, %1027) /* ty=Tensor[(1024, 256, 1, 1), float32] */
  };
  %1029 = (%model.backbone.body.layer3.1.conv3.weight, %x246);
  %1030 = (%tensor_0199,);
  let %v199: () = vm.invoke_tvm_op(%1028, %1029, %1030) /* ty=() */;
  let %x247: Tensor[(1024, 256, 1, 1), float32] = %tensor_0199;
  let %x248: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.1.bn3.bias, meta[relay.Constant][234] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][60]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %x249: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.1.bn3.running_mean, meta[relay.Constant][235] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][61]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %storage_0217: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][217]) /* ty=Storage[] */;
  let %tensor_0200: Tensor[(1, 1024, 50, 50), float32] = memory.alloc_tensor(%storage_0217, 0 /* ty=int64 */, meta[relay.Constant][236] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][217]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %1036 = fn (%p0198: Tensor[(1, 256, 50, 50), float32], %p1132: Tensor[(1024, 256, 1, 1), float32], %p253: Tensor[(1, 1024, 1, 1), float32], %p338: Tensor[(1, 1024, 1, 1), float32], %p430: Tensor[(1, 1024, 1, 1), float32], %p58: Tensor[(1, 1024, 50, 50), float32], Primitive=1) -> Tensor[(1, 1024, 50, 50), float32] {
    %1031 = nn.conv2d(%p0198, %p1132, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %1032 = multiply(%p338, %p430) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1033 = subtract(%p253, %1032) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1034 = add(%1031, %1033) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %1035 = add(%1034, %p58) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    nn.relu(%1035) /* ty=Tensor[(1, 1024, 50, 50), float32] */
  };
  %1037 = (%x245, %x247, %x248, %x249, %x246, %x235);
  %1038 = (%tensor_0200,);
  let %v200: () = vm.invoke_tvm_op(%1036, %1037, %1038) /* ty=() */;
  let %x250: Tensor[(1, 1024, 50, 50), float32] = %tensor_0200;
  let %storage_0218: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][218]) /* ty=Storage[] */;
  let %tensor_0201: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0218, 0 /* ty=int64 */, meta[relay.Constant][237] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][218]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1043 = fn (%p0199: Tensor[(256), float32], %p1133: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %1039 = reshape(%p0199, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1040 = reshape(%p1133, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1041 = add(%1040, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1042 = rsqrt(%1041) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%1039, %1042) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %1044 = (%model.backbone.body.layer3.2.bn1.weight, %model.backbone.body.layer3.2.bn1.running_var);
  %1045 = (%tensor_0201,);
  let %v201: () = vm.invoke_tvm_op(%1043, %1044, %1045) /* ty=() */;
  let %x251: Tensor[(1, 256, 1, 1), float32] = %tensor_0201;
  let %storage_0219: Storage[] = memory.alloc_storage(1048576 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][219]) /* ty=Storage[] */;
  let %tensor_0202: Tensor[(256, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0219, 0 /* ty=int64 */, meta[relay.Constant][238] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][219]) /* ty=Tensor[(256, 1024, 1, 1), float32] */;
  %1048 = fn (%p0200: Tensor[(256, 1024, 1, 1), float32], %p1134: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 1024, 1, 1), float32] {
    %1046 = squeeze(%p1134, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %1047 = expand_dims(%1046, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0200, %1047) /* ty=Tensor[(256, 1024, 1, 1), float32] */
  };
  %1049 = (%model.backbone.body.layer3.2.conv1.weight, %x251);
  %1050 = (%tensor_0202,);
  let %v202: () = vm.invoke_tvm_op(%1048, %1049, %1050) /* ty=() */;
  let %x252: Tensor[(256, 1024, 1, 1), float32] = %tensor_0202;
  let %x253: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.2.bn1.bias, meta[relay.Constant][239] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][62]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x254: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.2.bn1.running_mean, meta[relay.Constant][240] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][63]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0220: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][220]) /* ty=Storage[] */;
  let %tensor_0203: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0220, 0 /* ty=int64 */, meta[relay.Constant][241] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][220]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1055 = fn (%p0201: Tensor[(1, 1024, 50, 50), float32], %p1135: Tensor[(256, 1024, 1, 1), float32], %p254: Tensor[(1, 256, 1, 1), float32], %p339: Tensor[(1, 256, 1, 1), float32], %p431: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1051 = nn.conv2d(%p0201, %p1135, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1052 = multiply(%p339, %p431) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1053 = subtract(%p254, %1052) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1054 = add(%1051, %1053) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%1054) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1056 = (%x250, %x252, %x253, %x254, %x251);
  %1057 = (%tensor_0203,);
  let %v203: () = vm.invoke_tvm_op(%1055, %1056, %1057) /* ty=() */;
  let %x255: Tensor[(1, 256, 50, 50), float32] = %tensor_0203;
  let %storage_0221: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][221]) /* ty=Storage[] */;
  let %tensor_0204: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0221, 0 /* ty=int64 */, meta[relay.Constant][242] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][221]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1062 = fn (%p0202: Tensor[(256), float32], %p1136: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %1058 = reshape(%p0202, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1059 = reshape(%p1136, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1060 = add(%1059, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1061 = rsqrt(%1060) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%1058, %1061) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %1063 = (%model.backbone.body.layer3.2.bn2.weight, %model.backbone.body.layer3.2.bn2.running_var);
  %1064 = (%tensor_0204,);
  let %v204: () = vm.invoke_tvm_op(%1062, %1063, %1064) /* ty=() */;
  let %x256: Tensor[(1, 256, 1, 1), float32] = %tensor_0204;
  let %storage_0222: Storage[] = memory.alloc_storage(2359296 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][222]) /* ty=Storage[] */;
  let %tensor_0205: Tensor[(256, 256, 3, 3), float32] = memory.alloc_tensor(%storage_0222, 0 /* ty=int64 */, meta[relay.Constant][243] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][222]) /* ty=Tensor[(256, 256, 3, 3), float32] */;
  %1067 = fn (%p0203: Tensor[(256, 256, 3, 3), float32], %p1137: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 256, 3, 3), float32] {
    %1065 = squeeze(%p1137, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %1066 = expand_dims(%1065, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0203, %1066) /* ty=Tensor[(256, 256, 3, 3), float32] */
  };
  %1068 = (%model.backbone.body.layer3.2.conv2.weight, %x256);
  %1069 = (%tensor_0205,);
  let %v205: () = vm.invoke_tvm_op(%1067, %1068, %1069) /* ty=() */;
  let %x257: Tensor[(256, 256, 3, 3), float32] = %tensor_0205;
  let %x258: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.2.bn2.bias, meta[relay.Constant][244] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][64]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x259: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.2.bn2.running_mean, meta[relay.Constant][245] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][65]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0223: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][223]) /* ty=Storage[] */;
  let %tensor_0206: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0223, 0 /* ty=int64 */, meta[relay.Constant][246] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][223]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1074 = fn (%p0204: Tensor[(1, 256, 50, 50), float32], %p1138: Tensor[(256, 256, 3, 3), float32], %p255: Tensor[(1, 256, 1, 1), float32], %p340: Tensor[(1, 256, 1, 1), float32], %p432: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1070 = nn.conv2d(%p0204, %p1138, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1071 = multiply(%p340, %p432) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1072 = subtract(%p255, %1071) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1073 = add(%1070, %1072) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%1073) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1075 = (%x255, %x257, %x258, %x259, %x256);
  %1076 = (%tensor_0206,);
  let %v206: () = vm.invoke_tvm_op(%1074, %1075, %1076) /* ty=() */;
  let %x260: Tensor[(1, 256, 50, 50), float32] = %tensor_0206;
  let %storage_0224: Storage[] = memory.alloc_storage(4096 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][224]) /* ty=Storage[] */;
  let %tensor_0207: Tensor[(1, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0224, 0 /* ty=int64 */, meta[relay.Constant][247] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][224]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %1081 = fn (%p0205: Tensor[(1024), float32], %p1139: Tensor[(1024), float32], Primitive=1) -> Tensor[(1, 1024, 1, 1), float32] {
    %1077 = reshape(%p0205, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1078 = reshape(%p1139, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1079 = add(%1078, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1080 = rsqrt(%1079) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    multiply(%1077, %1080) /* ty=Tensor[(1, 1024, 1, 1), float32] */
  };
  %1082 = (%model.backbone.body.layer3.2.bn3.weight, %model.backbone.body.layer3.2.bn3.running_var);
  %1083 = (%tensor_0207,);
  let %v207: () = vm.invoke_tvm_op(%1081, %1082, %1083) /* ty=() */;
  let %x261: Tensor[(1, 1024, 1, 1), float32] = %tensor_0207;
  let %storage_0225: Storage[] = memory.alloc_storage(1048576 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][225]) /* ty=Storage[] */;
  let %tensor_0208: Tensor[(1024, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0225, 0 /* ty=int64 */, meta[relay.Constant][248] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][225]) /* ty=Tensor[(1024, 256, 1, 1), float32] */;
  %1086 = fn (%p0206: Tensor[(1024, 256, 1, 1), float32], %p1140: Tensor[(1, 1024, 1, 1), float32], Primitive=1) -> Tensor[(1024, 256, 1, 1), float32] {
    %1084 = squeeze(%p1140, axis=[0, 2, 3]) /* ty=Tensor[(1024), float32] */;
    %1085 = expand_dims(%1084, axis=1, num_newaxis=3) /* ty=Tensor[(1024, 1, 1, 1), float32] */;
    multiply(%p0206, %1085) /* ty=Tensor[(1024, 256, 1, 1), float32] */
  };
  %1087 = (%model.backbone.body.layer3.2.conv3.weight, %x261);
  %1088 = (%tensor_0208,);
  let %v208: () = vm.invoke_tvm_op(%1086, %1087, %1088) /* ty=() */;
  let %x262: Tensor[(1024, 256, 1, 1), float32] = %tensor_0208;
  let %x263: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.2.bn3.bias, meta[relay.Constant][249] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][66]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %x264: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.2.bn3.running_mean, meta[relay.Constant][250] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][67]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %storage_0226: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][226]) /* ty=Storage[] */;
  let %tensor_0209: Tensor[(1, 1024, 50, 50), float32] = memory.alloc_tensor(%storage_0226, 0 /* ty=int64 */, meta[relay.Constant][251] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][226]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %1094 = fn (%p0207: Tensor[(1, 256, 50, 50), float32], %p1141: Tensor[(1024, 256, 1, 1), float32], %p256: Tensor[(1, 1024, 1, 1), float32], %p341: Tensor[(1, 1024, 1, 1), float32], %p433: Tensor[(1, 1024, 1, 1), float32], %p59: Tensor[(1, 1024, 50, 50), float32], Primitive=1) -> Tensor[(1, 1024, 50, 50), float32] {
    %1089 = nn.conv2d(%p0207, %p1141, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %1090 = multiply(%p341, %p433) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1091 = subtract(%p256, %1090) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1092 = add(%1089, %1091) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %1093 = add(%1092, %p59) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    nn.relu(%1093) /* ty=Tensor[(1, 1024, 50, 50), float32] */
  };
  %1095 = (%x260, %x262, %x263, %x264, %x261, %x250);
  %1096 = (%tensor_0209,);
  let %v209: () = vm.invoke_tvm_op(%1094, %1095, %1096) /* ty=() */;
  let %x265: Tensor[(1, 1024, 50, 50), float32] = %tensor_0209;
  let %storage_0227: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][227]) /* ty=Storage[] */;
  let %tensor_0210: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0227, 0 /* ty=int64 */, meta[relay.Constant][252] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][227]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1101 = fn (%p0208: Tensor[(256), float32], %p1142: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %1097 = reshape(%p0208, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1098 = reshape(%p1142, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1099 = add(%1098, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1100 = rsqrt(%1099) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%1097, %1100) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %1102 = (%model.backbone.body.layer3.3.bn1.weight, %model.backbone.body.layer3.3.bn1.running_var);
  %1103 = (%tensor_0210,);
  let %v210: () = vm.invoke_tvm_op(%1101, %1102, %1103) /* ty=() */;
  let %x266: Tensor[(1, 256, 1, 1), float32] = %tensor_0210;
  let %storage_0228: Storage[] = memory.alloc_storage(1048576 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][228]) /* ty=Storage[] */;
  let %tensor_0211: Tensor[(256, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0228, 0 /* ty=int64 */, meta[relay.Constant][253] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][228]) /* ty=Tensor[(256, 1024, 1, 1), float32] */;
  %1106 = fn (%p0209: Tensor[(256, 1024, 1, 1), float32], %p1143: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 1024, 1, 1), float32] {
    %1104 = squeeze(%p1143, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %1105 = expand_dims(%1104, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0209, %1105) /* ty=Tensor[(256, 1024, 1, 1), float32] */
  };
  %1107 = (%model.backbone.body.layer3.3.conv1.weight, %x266);
  %1108 = (%tensor_0211,);
  let %v211: () = vm.invoke_tvm_op(%1106, %1107, %1108) /* ty=() */;
  let %x267: Tensor[(256, 1024, 1, 1), float32] = %tensor_0211;
  let %x268: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.3.bn1.bias, meta[relay.Constant][254] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][68]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x269: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.3.bn1.running_mean, meta[relay.Constant][255] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][69]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0229: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][229]) /* ty=Storage[] */;
  let %tensor_0212: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0229, 0 /* ty=int64 */, meta[relay.Constant][256] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][229]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1113 = fn (%p0210: Tensor[(1, 1024, 50, 50), float32], %p1144: Tensor[(256, 1024, 1, 1), float32], %p257: Tensor[(1, 256, 1, 1), float32], %p342: Tensor[(1, 256, 1, 1), float32], %p434: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1109 = nn.conv2d(%p0210, %p1144, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1110 = multiply(%p342, %p434) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1111 = subtract(%p257, %1110) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1112 = add(%1109, %1111) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%1112) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1114 = (%x265, %x267, %x268, %x269, %x266);
  %1115 = (%tensor_0212,);
  let %v212: () = vm.invoke_tvm_op(%1113, %1114, %1115) /* ty=() */;
  let %x270: Tensor[(1, 256, 50, 50), float32] = %tensor_0212;
  let %storage_0230: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][230]) /* ty=Storage[] */;
  let %tensor_0213: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0230, 0 /* ty=int64 */, meta[relay.Constant][257] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][230]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1120 = fn (%p0211: Tensor[(256), float32], %p1145: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %1116 = reshape(%p0211, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1117 = reshape(%p1145, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1118 = add(%1117, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1119 = rsqrt(%1118) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%1116, %1119) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %1121 = (%model.backbone.body.layer3.3.bn2.weight, %model.backbone.body.layer3.3.bn2.running_var);
  %1122 = (%tensor_0213,);
  let %v213: () = vm.invoke_tvm_op(%1120, %1121, %1122) /* ty=() */;
  let %x271: Tensor[(1, 256, 1, 1), float32] = %tensor_0213;
  let %storage_0231: Storage[] = memory.alloc_storage(2359296 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][231]) /* ty=Storage[] */;
  let %tensor_0214: Tensor[(256, 256, 3, 3), float32] = memory.alloc_tensor(%storage_0231, 0 /* ty=int64 */, meta[relay.Constant][258] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][231]) /* ty=Tensor[(256, 256, 3, 3), float32] */;
  %1125 = fn (%p0212: Tensor[(256, 256, 3, 3), float32], %p1146: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 256, 3, 3), float32] {
    %1123 = squeeze(%p1146, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %1124 = expand_dims(%1123, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0212, %1124) /* ty=Tensor[(256, 256, 3, 3), float32] */
  };
  %1126 = (%model.backbone.body.layer3.3.conv2.weight, %x271);
  %1127 = (%tensor_0214,);
  let %v214: () = vm.invoke_tvm_op(%1125, %1126, %1127) /* ty=() */;
  let %x272: Tensor[(256, 256, 3, 3), float32] = %tensor_0214;
  let %x273: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.3.bn2.bias, meta[relay.Constant][259] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][70]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x274: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.3.bn2.running_mean, meta[relay.Constant][260] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][71]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0232: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][232]) /* ty=Storage[] */;
  let %tensor_0215: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0232, 0 /* ty=int64 */, meta[relay.Constant][261] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][232]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1132 = fn (%p0213: Tensor[(1, 256, 50, 50), float32], %p1147: Tensor[(256, 256, 3, 3), float32], %p258: Tensor[(1, 256, 1, 1), float32], %p343: Tensor[(1, 256, 1, 1), float32], %p435: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1128 = nn.conv2d(%p0213, %p1147, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1129 = multiply(%p343, %p435) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1130 = subtract(%p258, %1129) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1131 = add(%1128, %1130) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%1131) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1133 = (%x270, %x272, %x273, %x274, %x271);
  %1134 = (%tensor_0215,);
  let %v215: () = vm.invoke_tvm_op(%1132, %1133, %1134) /* ty=() */;
  let %x275: Tensor[(1, 256, 50, 50), float32] = %tensor_0215;
  let %storage_0233: Storage[] = memory.alloc_storage(4096 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][233]) /* ty=Storage[] */;
  let %tensor_0216: Tensor[(1, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0233, 0 /* ty=int64 */, meta[relay.Constant][262] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][233]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %1139 = fn (%p0214: Tensor[(1024), float32], %p1148: Tensor[(1024), float32], Primitive=1) -> Tensor[(1, 1024, 1, 1), float32] {
    %1135 = reshape(%p0214, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1136 = reshape(%p1148, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1137 = add(%1136, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1138 = rsqrt(%1137) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    multiply(%1135, %1138) /* ty=Tensor[(1, 1024, 1, 1), float32] */
  };
  %1140 = (%model.backbone.body.layer3.3.bn3.weight, %model.backbone.body.layer3.3.bn3.running_var);
  %1141 = (%tensor_0216,);
  let %v216: () = vm.invoke_tvm_op(%1139, %1140, %1141) /* ty=() */;
  let %x276: Tensor[(1, 1024, 1, 1), float32] = %tensor_0216;
  let %storage_0234: Storage[] = memory.alloc_storage(1048576 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][234]) /* ty=Storage[] */;
  let %tensor_0217: Tensor[(1024, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0234, 0 /* ty=int64 */, meta[relay.Constant][263] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][234]) /* ty=Tensor[(1024, 256, 1, 1), float32] */;
  %1144 = fn (%p0215: Tensor[(1024, 256, 1, 1), float32], %p1149: Tensor[(1, 1024, 1, 1), float32], Primitive=1) -> Tensor[(1024, 256, 1, 1), float32] {
    %1142 = squeeze(%p1149, axis=[0, 2, 3]) /* ty=Tensor[(1024), float32] */;
    %1143 = expand_dims(%1142, axis=1, num_newaxis=3) /* ty=Tensor[(1024, 1, 1, 1), float32] */;
    multiply(%p0215, %1143) /* ty=Tensor[(1024, 256, 1, 1), float32] */
  };
  %1145 = (%model.backbone.body.layer3.3.conv3.weight, %x276);
  %1146 = (%tensor_0217,);
  let %v217: () = vm.invoke_tvm_op(%1144, %1145, %1146) /* ty=() */;
  let %x277: Tensor[(1024, 256, 1, 1), float32] = %tensor_0217;
  let %x278: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.3.bn3.bias, meta[relay.Constant][264] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][72]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %x279: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.3.bn3.running_mean, meta[relay.Constant][265] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][73]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %storage_0235: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][235]) /* ty=Storage[] */;
  let %tensor_0218: Tensor[(1, 1024, 50, 50), float32] = memory.alloc_tensor(%storage_0235, 0 /* ty=int64 */, meta[relay.Constant][266] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][235]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %1152 = fn (%p0216: Tensor[(1, 256, 50, 50), float32], %p1150: Tensor[(1024, 256, 1, 1), float32], %p259: Tensor[(1, 1024, 1, 1), float32], %p344: Tensor[(1, 1024, 1, 1), float32], %p436: Tensor[(1, 1024, 1, 1), float32], %p510: Tensor[(1, 1024, 50, 50), float32], Primitive=1) -> Tensor[(1, 1024, 50, 50), float32] {
    %1147 = nn.conv2d(%p0216, %p1150, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %1148 = multiply(%p344, %p436) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1149 = subtract(%p259, %1148) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1150 = add(%1147, %1149) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %1151 = add(%1150, %p510) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    nn.relu(%1151) /* ty=Tensor[(1, 1024, 50, 50), float32] */
  };
  %1153 = (%x275, %x277, %x278, %x279, %x276, %x265);
  %1154 = (%tensor_0218,);
  let %v218: () = vm.invoke_tvm_op(%1152, %1153, %1154) /* ty=() */;
  let %x280: Tensor[(1, 1024, 50, 50), float32] = %tensor_0218;
  let %storage_0236: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][236]) /* ty=Storage[] */;
  let %tensor_0219: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0236, 0 /* ty=int64 */, meta[relay.Constant][267] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][236]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1159 = fn (%p0217: Tensor[(256), float32], %p1151: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %1155 = reshape(%p0217, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1156 = reshape(%p1151, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1157 = add(%1156, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1158 = rsqrt(%1157) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%1155, %1158) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %1160 = (%model.backbone.body.layer3.4.bn1.weight, %model.backbone.body.layer3.4.bn1.running_var);
  %1161 = (%tensor_0219,);
  let %v219: () = vm.invoke_tvm_op(%1159, %1160, %1161) /* ty=() */;
  let %x281: Tensor[(1, 256, 1, 1), float32] = %tensor_0219;
  let %storage_0237: Storage[] = memory.alloc_storage(1048576 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][237]) /* ty=Storage[] */;
  let %tensor_0220: Tensor[(256, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0237, 0 /* ty=int64 */, meta[relay.Constant][268] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][237]) /* ty=Tensor[(256, 1024, 1, 1), float32] */;
  %1164 = fn (%p0218: Tensor[(256, 1024, 1, 1), float32], %p1152: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 1024, 1, 1), float32] {
    %1162 = squeeze(%p1152, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %1163 = expand_dims(%1162, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0218, %1163) /* ty=Tensor[(256, 1024, 1, 1), float32] */
  };
  %1165 = (%model.backbone.body.layer3.4.conv1.weight, %x281);
  %1166 = (%tensor_0220,);
  let %v220: () = vm.invoke_tvm_op(%1164, %1165, %1166) /* ty=() */;
  let %x282: Tensor[(256, 1024, 1, 1), float32] = %tensor_0220;
  let %x283: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.4.bn1.bias, meta[relay.Constant][269] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][74]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x284: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.4.bn1.running_mean, meta[relay.Constant][270] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][75]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0238: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][238]) /* ty=Storage[] */;
  let %tensor_0221: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0238, 0 /* ty=int64 */, meta[relay.Constant][271] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][238]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1171 = fn (%p0219: Tensor[(1, 1024, 50, 50), float32], %p1153: Tensor[(256, 1024, 1, 1), float32], %p260: Tensor[(1, 256, 1, 1), float32], %p345: Tensor[(1, 256, 1, 1), float32], %p437: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1167 = nn.conv2d(%p0219, %p1153, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1168 = multiply(%p345, %p437) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1169 = subtract(%p260, %1168) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1170 = add(%1167, %1169) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%1170) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1172 = (%x280, %x282, %x283, %x284, %x281);
  %1173 = (%tensor_0221,);
  let %v221: () = vm.invoke_tvm_op(%1171, %1172, %1173) /* ty=() */;
  let %x285: Tensor[(1, 256, 50, 50), float32] = %tensor_0221;
  let %storage_0239: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][239]) /* ty=Storage[] */;
  let %tensor_0222: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0239, 0 /* ty=int64 */, meta[relay.Constant][272] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][239]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1178 = fn (%p0220: Tensor[(256), float32], %p1154: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %1174 = reshape(%p0220, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1175 = reshape(%p1154, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1176 = add(%1175, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1177 = rsqrt(%1176) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%1174, %1177) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %1179 = (%model.backbone.body.layer3.4.bn2.weight, %model.backbone.body.layer3.4.bn2.running_var);
  %1180 = (%tensor_0222,);
  let %v222: () = vm.invoke_tvm_op(%1178, %1179, %1180) /* ty=() */;
  let %x286: Tensor[(1, 256, 1, 1), float32] = %tensor_0222;
  let %storage_0240: Storage[] = memory.alloc_storage(2359296 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][240]) /* ty=Storage[] */;
  let %tensor_0223: Tensor[(256, 256, 3, 3), float32] = memory.alloc_tensor(%storage_0240, 0 /* ty=int64 */, meta[relay.Constant][273] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][240]) /* ty=Tensor[(256, 256, 3, 3), float32] */;
  %1183 = fn (%p0221: Tensor[(256, 256, 3, 3), float32], %p1155: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 256, 3, 3), float32] {
    %1181 = squeeze(%p1155, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %1182 = expand_dims(%1181, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0221, %1182) /* ty=Tensor[(256, 256, 3, 3), float32] */
  };
  %1184 = (%model.backbone.body.layer3.4.conv2.weight, %x286);
  %1185 = (%tensor_0223,);
  let %v223: () = vm.invoke_tvm_op(%1183, %1184, %1185) /* ty=() */;
  let %x287: Tensor[(256, 256, 3, 3), float32] = %tensor_0223;
  let %x288: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.4.bn2.bias, meta[relay.Constant][274] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][76]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x289: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.4.bn2.running_mean, meta[relay.Constant][275] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][77]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0241: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][241]) /* ty=Storage[] */;
  let %tensor_0224: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0241, 0 /* ty=int64 */, meta[relay.Constant][276] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][241]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1190 = fn (%p0222: Tensor[(1, 256, 50, 50), float32], %p1156: Tensor[(256, 256, 3, 3), float32], %p261: Tensor[(1, 256, 1, 1), float32], %p346: Tensor[(1, 256, 1, 1), float32], %p438: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1186 = nn.conv2d(%p0222, %p1156, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1187 = multiply(%p346, %p438) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1188 = subtract(%p261, %1187) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1189 = add(%1186, %1188) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%1189) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1191 = (%x285, %x287, %x288, %x289, %x286);
  %1192 = (%tensor_0224,);
  let %v224: () = vm.invoke_tvm_op(%1190, %1191, %1192) /* ty=() */;
  let %x290: Tensor[(1, 256, 50, 50), float32] = %tensor_0224;
  let %storage_0242: Storage[] = memory.alloc_storage(4096 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][242]) /* ty=Storage[] */;
  let %tensor_0225: Tensor[(1, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0242, 0 /* ty=int64 */, meta[relay.Constant][277] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][242]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %1197 = fn (%p0223: Tensor[(1024), float32], %p1157: Tensor[(1024), float32], Primitive=1) -> Tensor[(1, 1024, 1, 1), float32] {
    %1193 = reshape(%p0223, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1194 = reshape(%p1157, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1195 = add(%1194, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1196 = rsqrt(%1195) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    multiply(%1193, %1196) /* ty=Tensor[(1, 1024, 1, 1), float32] */
  };
  %1198 = (%model.backbone.body.layer3.4.bn3.weight, %model.backbone.body.layer3.4.bn3.running_var);
  %1199 = (%tensor_0225,);
  let %v225: () = vm.invoke_tvm_op(%1197, %1198, %1199) /* ty=() */;
  let %x291: Tensor[(1, 1024, 1, 1), float32] = %tensor_0225;
  let %storage_0243: Storage[] = memory.alloc_storage(1048576 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][243]) /* ty=Storage[] */;
  let %tensor_0226: Tensor[(1024, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0243, 0 /* ty=int64 */, meta[relay.Constant][278] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][243]) /* ty=Tensor[(1024, 256, 1, 1), float32] */;
  %1202 = fn (%p0224: Tensor[(1024, 256, 1, 1), float32], %p1158: Tensor[(1, 1024, 1, 1), float32], Primitive=1) -> Tensor[(1024, 256, 1, 1), float32] {
    %1200 = squeeze(%p1158, axis=[0, 2, 3]) /* ty=Tensor[(1024), float32] */;
    %1201 = expand_dims(%1200, axis=1, num_newaxis=3) /* ty=Tensor[(1024, 1, 1, 1), float32] */;
    multiply(%p0224, %1201) /* ty=Tensor[(1024, 256, 1, 1), float32] */
  };
  %1203 = (%model.backbone.body.layer3.4.conv3.weight, %x291);
  %1204 = (%tensor_0226,);
  let %v226: () = vm.invoke_tvm_op(%1202, %1203, %1204) /* ty=() */;
  let %x292: Tensor[(1024, 256, 1, 1), float32] = %tensor_0226;
  let %x293: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.4.bn3.bias, meta[relay.Constant][279] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][78]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %x294: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.4.bn3.running_mean, meta[relay.Constant][280] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][79]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %storage_0244: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][244]) /* ty=Storage[] */;
  let %tensor_0227: Tensor[(1, 1024, 50, 50), float32] = memory.alloc_tensor(%storage_0244, 0 /* ty=int64 */, meta[relay.Constant][281] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][244]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %1210 = fn (%p0225: Tensor[(1, 256, 50, 50), float32], %p1159: Tensor[(1024, 256, 1, 1), float32], %p262: Tensor[(1, 1024, 1, 1), float32], %p347: Tensor[(1, 1024, 1, 1), float32], %p439: Tensor[(1, 1024, 1, 1), float32], %p511: Tensor[(1, 1024, 50, 50), float32], Primitive=1) -> Tensor[(1, 1024, 50, 50), float32] {
    %1205 = nn.conv2d(%p0225, %p1159, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %1206 = multiply(%p347, %p439) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1207 = subtract(%p262, %1206) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1208 = add(%1205, %1207) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %1209 = add(%1208, %p511) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    nn.relu(%1209) /* ty=Tensor[(1, 1024, 50, 50), float32] */
  };
  %1211 = (%x290, %x292, %x293, %x294, %x291, %x280);
  %1212 = (%tensor_0227,);
  let %v227: () = vm.invoke_tvm_op(%1210, %1211, %1212) /* ty=() */;
  let %x295: Tensor[(1, 1024, 50, 50), float32] = %tensor_0227;
  let %storage_0245: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][245]) /* ty=Storage[] */;
  let %tensor_0228: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0245, 0 /* ty=int64 */, meta[relay.Constant][282] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][245]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1217 = fn (%p0226: Tensor[(256), float32], %p1160: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %1213 = reshape(%p0226, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1214 = reshape(%p1160, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1215 = add(%1214, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1216 = rsqrt(%1215) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%1213, %1216) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %1218 = (%model.backbone.body.layer3.5.bn1.weight, %model.backbone.body.layer3.5.bn1.running_var);
  %1219 = (%tensor_0228,);
  let %v228: () = vm.invoke_tvm_op(%1217, %1218, %1219) /* ty=() */;
  let %x296: Tensor[(1, 256, 1, 1), float32] = %tensor_0228;
  let %storage_0246: Storage[] = memory.alloc_storage(1048576 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][246]) /* ty=Storage[] */;
  let %tensor_0229: Tensor[(256, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0246, 0 /* ty=int64 */, meta[relay.Constant][283] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][246]) /* ty=Tensor[(256, 1024, 1, 1), float32] */;
  %1222 = fn (%p0227: Tensor[(256, 1024, 1, 1), float32], %p1161: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 1024, 1, 1), float32] {
    %1220 = squeeze(%p1161, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %1221 = expand_dims(%1220, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0227, %1221) /* ty=Tensor[(256, 1024, 1, 1), float32] */
  };
  %1223 = (%model.backbone.body.layer3.5.conv1.weight, %x296);
  %1224 = (%tensor_0229,);
  let %v229: () = vm.invoke_tvm_op(%1222, %1223, %1224) /* ty=() */;
  let %x297: Tensor[(256, 1024, 1, 1), float32] = %tensor_0229;
  let %x298: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.5.bn1.bias, meta[relay.Constant][284] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][80]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x299: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.5.bn1.running_mean, meta[relay.Constant][285] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][81]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0247: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][247]) /* ty=Storage[] */;
  let %tensor_0230: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0247, 0 /* ty=int64 */, meta[relay.Constant][286] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][247]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1229 = fn (%p0228: Tensor[(1, 1024, 50, 50), float32], %p1162: Tensor[(256, 1024, 1, 1), float32], %p263: Tensor[(1, 256, 1, 1), float32], %p348: Tensor[(1, 256, 1, 1), float32], %p440: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1225 = nn.conv2d(%p0228, %p1162, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1226 = multiply(%p348, %p440) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1227 = subtract(%p263, %1226) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1228 = add(%1225, %1227) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%1228) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1230 = (%x295, %x297, %x298, %x299, %x296);
  %1231 = (%tensor_0230,);
  let %v230: () = vm.invoke_tvm_op(%1229, %1230, %1231) /* ty=() */;
  let %x300: Tensor[(1, 256, 50, 50), float32] = %tensor_0230;
  let %storage_0248: Storage[] = memory.alloc_storage(1024 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][248]) /* ty=Storage[] */;
  let %tensor_0231: Tensor[(1, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0248, 0 /* ty=int64 */, meta[relay.Constant][287] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][248]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1236 = fn (%p0229: Tensor[(256), float32], %p1163: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 1, 1), float32] {
    %1232 = reshape(%p0229, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1233 = reshape(%p1163, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1234 = add(%1233, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1235 = rsqrt(%1234) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    multiply(%1232, %1235) /* ty=Tensor[(1, 256, 1, 1), float32] */
  };
  %1237 = (%model.backbone.body.layer3.5.bn2.weight, %model.backbone.body.layer3.5.bn2.running_var);
  %1238 = (%tensor_0231,);
  let %v231: () = vm.invoke_tvm_op(%1236, %1237, %1238) /* ty=() */;
  let %x301: Tensor[(1, 256, 1, 1), float32] = %tensor_0231;
  let %storage_0249: Storage[] = memory.alloc_storage(2359296 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][249]) /* ty=Storage[] */;
  let %tensor_0232: Tensor[(256, 256, 3, 3), float32] = memory.alloc_tensor(%storage_0249, 0 /* ty=int64 */, meta[relay.Constant][288] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][249]) /* ty=Tensor[(256, 256, 3, 3), float32] */;
  %1241 = fn (%p0230: Tensor[(256, 256, 3, 3), float32], %p1164: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(256, 256, 3, 3), float32] {
    %1239 = squeeze(%p1164, axis=[0, 2, 3]) /* ty=Tensor[(256), float32] */;
    %1240 = expand_dims(%1239, axis=1, num_newaxis=3) /* ty=Tensor[(256, 1, 1, 1), float32] */;
    multiply(%p0230, %1240) /* ty=Tensor[(256, 256, 3, 3), float32] */
  };
  %1242 = (%model.backbone.body.layer3.5.conv2.weight, %x301);
  %1243 = (%tensor_0232,);
  let %v232: () = vm.invoke_tvm_op(%1241, %1242, %1243) /* ty=() */;
  let %x302: Tensor[(256, 256, 3, 3), float32] = %tensor_0232;
  let %x303: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.5.bn2.bias, meta[relay.Constant][289] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][82]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %x304: Tensor[(1, 256, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.5.bn2.running_mean, meta[relay.Constant][290] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][83]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  let %storage_0250: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][250]) /* ty=Storage[] */;
  let %tensor_0233: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0250, 0 /* ty=int64 */, meta[relay.Constant][291] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][250]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1248 = fn (%p0231: Tensor[(1, 256, 50, 50), float32], %p1165: Tensor[(256, 256, 3, 3), float32], %p264: Tensor[(1, 256, 1, 1), float32], %p349: Tensor[(1, 256, 1, 1), float32], %p441: Tensor[(1, 256, 1, 1), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1244 = nn.conv2d(%p0231, %p1165, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1245 = multiply(%p349, %p441) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1246 = subtract(%p264, %1245) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1247 = add(%1244, %1246) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%1247) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1249 = (%x300, %x302, %x303, %x304, %x301);
  %1250 = (%tensor_0233,);
  let %v233: () = vm.invoke_tvm_op(%1248, %1249, %1250) /* ty=() */;
  let %x305: Tensor[(1, 256, 50, 50), float32] = %tensor_0233;
  let %storage_0251: Storage[] = memory.alloc_storage(4096 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][251]) /* ty=Storage[] */;
  let %tensor_0234: Tensor[(1, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0251, 0 /* ty=int64 */, meta[relay.Constant][292] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][251]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %1255 = fn (%p0232: Tensor[(1024), float32], %p1166: Tensor[(1024), float32], Primitive=1) -> Tensor[(1, 1024, 1, 1), float32] {
    %1251 = reshape(%p0232, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1252 = reshape(%p1166, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1253 = add(%1252, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1254 = rsqrt(%1253) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    multiply(%1251, %1254) /* ty=Tensor[(1, 1024, 1, 1), float32] */
  };
  %1256 = (%model.backbone.body.layer3.5.bn3.weight, %model.backbone.body.layer3.5.bn3.running_var);
  %1257 = (%tensor_0234,);
  let %v234: () = vm.invoke_tvm_op(%1255, %1256, %1257) /* ty=() */;
  let %x306: Tensor[(1, 1024, 1, 1), float32] = %tensor_0234;
  let %storage_0252: Storage[] = memory.alloc_storage(1048576 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][252]) /* ty=Storage[] */;
  let %tensor_0235: Tensor[(1024, 256, 1, 1), float32] = memory.alloc_tensor(%storage_0252, 0 /* ty=int64 */, meta[relay.Constant][293] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][252]) /* ty=Tensor[(1024, 256, 1, 1), float32] */;
  %1260 = fn (%p0233: Tensor[(1024, 256, 1, 1), float32], %p1167: Tensor[(1, 1024, 1, 1), float32], Primitive=1) -> Tensor[(1024, 256, 1, 1), float32] {
    %1258 = squeeze(%p1167, axis=[0, 2, 3]) /* ty=Tensor[(1024), float32] */;
    %1259 = expand_dims(%1258, axis=1, num_newaxis=3) /* ty=Tensor[(1024, 1, 1, 1), float32] */;
    multiply(%p0233, %1259) /* ty=Tensor[(1024, 256, 1, 1), float32] */
  };
  %1261 = (%model.backbone.body.layer3.5.conv3.weight, %x306);
  %1262 = (%tensor_0235,);
  let %v235: () = vm.invoke_tvm_op(%1260, %1261, %1262) /* ty=() */;
  let %x307: Tensor[(1024, 256, 1, 1), float32] = %tensor_0235;
  let %x308: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.5.bn3.bias, meta[relay.Constant][294] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][84]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %x309: Tensor[(1, 1024, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer3.5.bn3.running_mean, meta[relay.Constant][295] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][85]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  let %storage_0253: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][253]) /* ty=Storage[] */;
  let %tensor_0236: Tensor[(1, 1024, 50, 50), float32] = memory.alloc_tensor(%storage_0253, 0 /* ty=int64 */, meta[relay.Constant][296] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][253]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
  %1268 = fn (%p0234: Tensor[(1, 256, 50, 50), float32], %p1168: Tensor[(1024, 256, 1, 1), float32], %p265: Tensor[(1, 1024, 1, 1), float32], %p350: Tensor[(1, 1024, 1, 1), float32], %p442: Tensor[(1, 1024, 1, 1), float32], %p512: Tensor[(1, 1024, 50, 50), float32], Primitive=1) -> Tensor[(1, 1024, 50, 50), float32] {
    %1263 = nn.conv2d(%p0234, %p1168, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %1264 = multiply(%p350, %p442) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1265 = subtract(%p265, %1264) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
    %1266 = add(%1263, %1265) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    %1267 = add(%1266, %p512) /* ty=Tensor[(1, 1024, 50, 50), float32] */;
    nn.relu(%1267) /* ty=Tensor[(1, 1024, 50, 50), float32] */
  };
  %1269 = (%x305, %x307, %x308, %x309, %x306, %x295);
  %1270 = (%tensor_0236,);
  let %v236: () = vm.invoke_tvm_op(%1268, %1269, %1270) /* ty=() */;
  let %x310: Tensor[(1, 1024, 50, 50), float32] = %tensor_0236;
  let %storage_0254: Storage[] = memory.alloc_storage(2048 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][254]) /* ty=Storage[] */;
  let %tensor_0237: Tensor[(1, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0254, 0 /* ty=int64 */, meta[relay.Constant][297] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][254]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %1275 = fn (%p0235: Tensor[(512), float32], %p1169: Tensor[(512), float32], Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    %1271 = reshape(%p0235, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1272 = reshape(%p1169, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1273 = add(%1272, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1274 = rsqrt(%1273) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    multiply(%1271, %1274) /* ty=Tensor[(1, 512, 1, 1), float32] */
  };
  %1276 = (%model.backbone.body.layer4.0.bn1.weight, %model.backbone.body.layer4.0.bn1.running_var);
  %1277 = (%tensor_0237,);
  let %v237: () = vm.invoke_tvm_op(%1275, %1276, %1277) /* ty=() */;
  let %x311: Tensor[(1, 512, 1, 1), float32] = %tensor_0237;
  let %storage_0255: Storage[] = memory.alloc_storage(2097152 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][255]) /* ty=Storage[] */;
  let %tensor_0238: Tensor[(512, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0255, 0 /* ty=int64 */, meta[relay.Constant][298] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][255]) /* ty=Tensor[(512, 1024, 1, 1), float32] */;
  %1280 = fn (%p0236: Tensor[(512, 1024, 1, 1), float32], %p1170: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(512, 1024, 1, 1), float32] {
    %1278 = squeeze(%p1170, axis=[0, 2, 3]) /* ty=Tensor[(512), float32] */;
    %1279 = expand_dims(%1278, axis=1, num_newaxis=3) /* ty=Tensor[(512, 1, 1, 1), float32] */;
    multiply(%p0236, %1279) /* ty=Tensor[(512, 1024, 1, 1), float32] */
  };
  %1281 = (%model.backbone.body.layer4.0.conv1.weight, %x311);
  %1282 = (%tensor_0238,);
  let %v238: () = vm.invoke_tvm_op(%1280, %1281, %1282) /* ty=() */;
  let %x312: Tensor[(512, 1024, 1, 1), float32] = %tensor_0238;
  let %x313: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.0.bn1.bias, meta[relay.Constant][299] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][86]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %x314: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.0.bn1.running_mean, meta[relay.Constant][300] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][87]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %storage_0256: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][256]) /* ty=Storage[] */;
  let %tensor_0239: Tensor[(1, 512, 50, 50), float32] = memory.alloc_tensor(%storage_0256, 0 /* ty=int64 */, meta[relay.Constant][301] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][256]) /* ty=Tensor[(1, 512, 50, 50), float32] */;
  %1287 = fn (%p0237: Tensor[(1, 1024, 50, 50), float32], %p1171: Tensor[(512, 1024, 1, 1), float32], %p266: Tensor[(1, 512, 1, 1), float32], %p351: Tensor[(1, 512, 1, 1), float32], %p443: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(1, 512, 50, 50), float32] {
    %1283 = nn.conv2d(%p0237, %p1171, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 50, 50), float32] */;
    %1284 = multiply(%p351, %p443) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1285 = subtract(%p266, %1284) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1286 = add(%1283, %1285) /* ty=Tensor[(1, 512, 50, 50), float32] */;
    nn.relu(%1286) /* ty=Tensor[(1, 512, 50, 50), float32] */
  };
  %1288 = (%x310, %x312, %x313, %x314, %x311);
  %1289 = (%tensor_0239,);
  let %v239: () = vm.invoke_tvm_op(%1287, %1288, %1289) /* ty=() */;
  let %x315: Tensor[(1, 512, 50, 50), float32] = %tensor_0239;
  let %storage_0257: Storage[] = memory.alloc_storage(2048 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][257]) /* ty=Storage[] */;
  let %tensor_0240: Tensor[(1, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0257, 0 /* ty=int64 */, meta[relay.Constant][302] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][257]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %1294 = fn (%p0238: Tensor[(512), float32], %p1172: Tensor[(512), float32], Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    %1290 = reshape(%p0238, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1291 = reshape(%p1172, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1292 = add(%1291, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1293 = rsqrt(%1292) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    multiply(%1290, %1293) /* ty=Tensor[(1, 512, 1, 1), float32] */
  };
  %1295 = (%model.backbone.body.layer4.0.bn2.weight, %model.backbone.body.layer4.0.bn2.running_var);
  %1296 = (%tensor_0240,);
  let %v240: () = vm.invoke_tvm_op(%1294, %1295, %1296) /* ty=() */;
  let %x316: Tensor[(1, 512, 1, 1), float32] = %tensor_0240;
  let %storage_0258: Storage[] = memory.alloc_storage(9437184 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][258]) /* ty=Storage[] */;
  let %tensor_0241: Tensor[(512, 512, 3, 3), float32] = memory.alloc_tensor(%storage_0258, 0 /* ty=int64 */, meta[relay.Constant][303] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][258]) /* ty=Tensor[(512, 512, 3, 3), float32] */;
  %1299 = fn (%p0239: Tensor[(512, 512, 3, 3), float32], %p1173: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(512, 512, 3, 3), float32] {
    %1297 = squeeze(%p1173, axis=[0, 2, 3]) /* ty=Tensor[(512), float32] */;
    %1298 = expand_dims(%1297, axis=1, num_newaxis=3) /* ty=Tensor[(512, 1, 1, 1), float32] */;
    multiply(%p0239, %1298) /* ty=Tensor[(512, 512, 3, 3), float32] */
  };
  %1300 = (%model.backbone.body.layer4.0.conv2.weight, %x316);
  %1301 = (%tensor_0241,);
  let %v241: () = vm.invoke_tvm_op(%1299, %1300, %1301) /* ty=() */;
  let %x317: Tensor[(512, 512, 3, 3), float32] = %tensor_0241;
  let %x318: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.0.bn2.bias, meta[relay.Constant][304] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][88]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %x319: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.0.bn2.running_mean, meta[relay.Constant][305] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][89]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %storage_0259: Storage[] = memory.alloc_storage(1280000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][259]) /* ty=Storage[] */;
  let %tensor_0242: Tensor[(1, 512, 25, 25), float32] = memory.alloc_tensor(%storage_0259, 0 /* ty=int64 */, meta[relay.Constant][306] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][259]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %1306 = fn (%p0240: Tensor[(1, 512, 50, 50), float32], %p1174: Tensor[(512, 512, 3, 3), float32], %p267: Tensor[(1, 512, 1, 1), float32], %p352: Tensor[(1, 512, 1, 1), float32], %p444: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(1, 512, 25, 25), float32] {
    %1302 = nn.conv2d(%p0240, %p1174, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
    %1303 = multiply(%p352, %p444) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1304 = subtract(%p267, %1303) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1305 = add(%1302, %1304) /* ty=Tensor[(1, 512, 25, 25), float32] */;
    nn.relu(%1305) /* ty=Tensor[(1, 512, 25, 25), float32] */
  };
  %1307 = (%x315, %x317, %x318, %x319, %x316);
  %1308 = (%tensor_0242,);
  let %v242: () = vm.invoke_tvm_op(%1306, %1307, %1308) /* ty=() */;
  let %x320: Tensor[(1, 512, 25, 25), float32] = %tensor_0242;
  let %storage_0260: Storage[] = memory.alloc_storage(8192 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][260]) /* ty=Storage[] */;
  let %tensor_0243: Tensor[(1, 2048, 1, 1), float32] = memory.alloc_tensor(%storage_0260, 0 /* ty=int64 */, meta[relay.Constant][307] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][260]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %1313 = fn (%p0241: Tensor[(2048), float32], %p1175: Tensor[(2048), float32], Primitive=1) -> Tensor[(1, 2048, 1, 1), float32] {
    %1309 = reshape(%p0241, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1310 = reshape(%p1175, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1311 = add(%1310, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1312 = rsqrt(%1311) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    multiply(%1309, %1312) /* ty=Tensor[(1, 2048, 1, 1), float32] */
  };
  %1314 = (%model.backbone.body.layer4.0.bn3.weight, %model.backbone.body.layer4.0.bn3.running_var);
  %1315 = (%tensor_0243,);
  let %v243: () = vm.invoke_tvm_op(%1313, %1314, %1315) /* ty=() */;
  let %x321: Tensor[(1, 2048, 1, 1), float32] = %tensor_0243;
  let %storage_0261: Storage[] = memory.alloc_storage(4194304 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][261]) /* ty=Storage[] */;
  let %tensor_0244: Tensor[(2048, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0261, 0 /* ty=int64 */, meta[relay.Constant][308] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][261]) /* ty=Tensor[(2048, 512, 1, 1), float32] */;
  %1318 = fn (%p0242: Tensor[(2048, 512, 1, 1), float32], %p1176: Tensor[(1, 2048, 1, 1), float32], Primitive=1) -> Tensor[(2048, 512, 1, 1), float32] {
    %1316 = squeeze(%p1176, axis=[0, 2, 3]) /* ty=Tensor[(2048), float32] */;
    %1317 = expand_dims(%1316, axis=1, num_newaxis=3) /* ty=Tensor[(2048, 1, 1, 1), float32] */;
    multiply(%p0242, %1317) /* ty=Tensor[(2048, 512, 1, 1), float32] */
  };
  %1319 = (%model.backbone.body.layer4.0.conv3.weight, %x321);
  %1320 = (%tensor_0244,);
  let %v244: () = vm.invoke_tvm_op(%1318, %1319, %1320) /* ty=() */;
  let %x322: Tensor[(2048, 512, 1, 1), float32] = %tensor_0244;
  let %x323: Tensor[(1, 2048, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.0.bn3.bias, meta[relay.Constant][309] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][90]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  let %x324: Tensor[(1, 2048, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.0.bn3.running_mean, meta[relay.Constant][310] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][91]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  let %storage_0262: Storage[] = memory.alloc_storage(8192 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][262]) /* ty=Storage[] */;
  let %tensor_0245: Tensor[(1, 2048, 1, 1), float32] = memory.alloc_tensor(%storage_0262, 0 /* ty=int64 */, meta[relay.Constant][311] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][262]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %1325 = fn (%p0243: Tensor[(2048), float32], %p1177: Tensor[(2048), float32], Primitive=1) -> Tensor[(1, 2048, 1, 1), float32] {
    %1321 = reshape(%p0243, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1322 = reshape(%p1177, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1323 = add(%1322, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1324 = rsqrt(%1323) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    multiply(%1321, %1324) /* ty=Tensor[(1, 2048, 1, 1), float32] */
  };
  %1326 = (%model.backbone.body.layer4.0.downsample.1.weight, %model.backbone.body.layer4.0.downsample.1.running_var);
  %1327 = (%tensor_0245,);
  let %v245: () = vm.invoke_tvm_op(%1325, %1326, %1327) /* ty=() */;
  let %x325: Tensor[(1, 2048, 1, 1), float32] = %tensor_0245;
  let %storage_0263: Storage[] = memory.alloc_storage(8388608 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][263]) /* ty=Storage[] */;
  let %tensor_0246: Tensor[(2048, 1024, 1, 1), float32] = memory.alloc_tensor(%storage_0263, 0 /* ty=int64 */, meta[relay.Constant][312] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][263]) /* ty=Tensor[(2048, 1024, 1, 1), float32] */;
  %1330 = fn (%p0244: Tensor[(2048, 1024, 1, 1), float32], %p1178: Tensor[(1, 2048, 1, 1), float32], Primitive=1) -> Tensor[(2048, 1024, 1, 1), float32] {
    %1328 = squeeze(%p1178, axis=[0, 2, 3]) /* ty=Tensor[(2048), float32] */;
    %1329 = expand_dims(%1328, axis=1, num_newaxis=3) /* ty=Tensor[(2048, 1, 1, 1), float32] */;
    multiply(%p0244, %1329) /* ty=Tensor[(2048, 1024, 1, 1), float32] */
  };
  %1331 = (%model.backbone.body.layer4.0.downsample.0.weight, %x325);
  %1332 = (%tensor_0246,);
  let %v246: () = vm.invoke_tvm_op(%1330, %1331, %1332) /* ty=() */;
  let %x326: Tensor[(2048, 1024, 1, 1), float32] = %tensor_0246;
  let %x327: Tensor[(1, 2048, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.0.downsample.1.bias, meta[relay.Constant][313] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][92]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  let %x328: Tensor[(1, 2048, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.0.downsample.1.running_mean, meta[relay.Constant][314] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][93]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  let %storage_0264: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][264]) /* ty=Storage[] */;
  let %tensor_0247: Tensor[(1, 2048, 25, 25), float32] = memory.alloc_tensor(%storage_0264, 0 /* ty=int64 */, meta[relay.Constant][315] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][264]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %1336 = fn (%p0245: Tensor[(1, 1024, 50, 50), float32], %p1179: Tensor[(2048, 1024, 1, 1), float32], %p268: Tensor[(1, 2048, 1, 1), float32], %p353: Tensor[(1, 2048, 1, 1), float32], %p445: Tensor[(1, 2048, 1, 1), float32], Primitive=1) -> Tensor[(1, 2048, 25, 25), float32] {
    %1333 = nn.conv2d(%p0245, %p1179, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
    %1334 = multiply(%p353, %p445) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1335 = subtract(%p268, %1334) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    add(%1333, %1335) /* ty=Tensor[(1, 2048, 25, 25), float32] */
  };
  %1337 = (%x310, %x326, %x327, %x328, %x325);
  %1338 = (%tensor_0247,);
  let %v247: () = vm.invoke_tvm_op(%1336, %1337, %1338) /* ty=() */;
  let %x329: Tensor[(1, 2048, 25, 25), float32] = %tensor_0247;
  let %storage_0265: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][265]) /* ty=Storage[] */;
  let %tensor_0248: Tensor[(1, 2048, 25, 25), float32] = memory.alloc_tensor(%storage_0265, 0 /* ty=int64 */, meta[relay.Constant][316] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][265]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %1344 = fn (%p0246: Tensor[(1, 512, 25, 25), float32], %p1180: Tensor[(2048, 512, 1, 1), float32], %p269: Tensor[(1, 2048, 1, 1), float32], %p354: Tensor[(1, 2048, 1, 1), float32], %p446: Tensor[(1, 2048, 1, 1), float32], %p513: Tensor[(1, 2048, 25, 25), float32], Primitive=1) -> Tensor[(1, 2048, 25, 25), float32] {
    %1339 = nn.conv2d(%p0246, %p1180, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
    %1340 = multiply(%p354, %p446) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1341 = subtract(%p269, %1340) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1342 = add(%1339, %1341) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
    %1343 = add(%1342, %p513) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
    nn.relu(%1343) /* ty=Tensor[(1, 2048, 25, 25), float32] */
  };
  %1345 = (%x320, %x322, %x323, %x324, %x321, %x329);
  %1346 = (%tensor_0248,);
  let %v248: () = vm.invoke_tvm_op(%1344, %1345, %1346) /* ty=() */;
  let %x330: Tensor[(1, 2048, 25, 25), float32] = %tensor_0248;
  let %storage_0266: Storage[] = memory.alloc_storage(2048 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][266]) /* ty=Storage[] */;
  let %tensor_0249: Tensor[(1, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0266, 0 /* ty=int64 */, meta[relay.Constant][317] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][266]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %1351 = fn (%p0247: Tensor[(512), float32], %p1181: Tensor[(512), float32], Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    %1347 = reshape(%p0247, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1348 = reshape(%p1181, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1349 = add(%1348, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1350 = rsqrt(%1349) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    multiply(%1347, %1350) /* ty=Tensor[(1, 512, 1, 1), float32] */
  };
  %1352 = (%model.backbone.body.layer4.1.bn1.weight, %model.backbone.body.layer4.1.bn1.running_var);
  %1353 = (%tensor_0249,);
  let %v249: () = vm.invoke_tvm_op(%1351, %1352, %1353) /* ty=() */;
  let %x331: Tensor[(1, 512, 1, 1), float32] = %tensor_0249;
  let %storage_0267: Storage[] = memory.alloc_storage(4194304 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][267]) /* ty=Storage[] */;
  let %tensor_0250: Tensor[(512, 2048, 1, 1), float32] = memory.alloc_tensor(%storage_0267, 0 /* ty=int64 */, meta[relay.Constant][318] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][267]) /* ty=Tensor[(512, 2048, 1, 1), float32] */;
  %1356 = fn (%p0248: Tensor[(512, 2048, 1, 1), float32], %p1182: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(512, 2048, 1, 1), float32] {
    %1354 = squeeze(%p1182, axis=[0, 2, 3]) /* ty=Tensor[(512), float32] */;
    %1355 = expand_dims(%1354, axis=1, num_newaxis=3) /* ty=Tensor[(512, 1, 1, 1), float32] */;
    multiply(%p0248, %1355) /* ty=Tensor[(512, 2048, 1, 1), float32] */
  };
  %1357 = (%model.backbone.body.layer4.1.conv1.weight, %x331);
  %1358 = (%tensor_0250,);
  let %v250: () = vm.invoke_tvm_op(%1356, %1357, %1358) /* ty=() */;
  let %x332: Tensor[(512, 2048, 1, 1), float32] = %tensor_0250;
  let %x333: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.1.bn1.bias, meta[relay.Constant][319] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][94]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %x334: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.1.bn1.running_mean, meta[relay.Constant][320] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][95]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %storage_0268: Storage[] = memory.alloc_storage(1280000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][268]) /* ty=Storage[] */;
  let %tensor_0251: Tensor[(1, 512, 25, 25), float32] = memory.alloc_tensor(%storage_0268, 0 /* ty=int64 */, meta[relay.Constant][321] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][268]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %1363 = fn (%p0249: Tensor[(1, 2048, 25, 25), float32], %p1183: Tensor[(512, 2048, 1, 1), float32], %p270: Tensor[(1, 512, 1, 1), float32], %p355: Tensor[(1, 512, 1, 1), float32], %p447: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(1, 512, 25, 25), float32] {
    %1359 = nn.conv2d(%p0249, %p1183, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
    %1360 = multiply(%p355, %p447) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1361 = subtract(%p270, %1360) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1362 = add(%1359, %1361) /* ty=Tensor[(1, 512, 25, 25), float32] */;
    nn.relu(%1362) /* ty=Tensor[(1, 512, 25, 25), float32] */
  };
  %1364 = (%x330, %x332, %x333, %x334, %x331);
  %1365 = (%tensor_0251,);
  let %v251: () = vm.invoke_tvm_op(%1363, %1364, %1365) /* ty=() */;
  let %x335: Tensor[(1, 512, 25, 25), float32] = %tensor_0251;
  let %storage_0269: Storage[] = memory.alloc_storage(2048 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][269]) /* ty=Storage[] */;
  let %tensor_0252: Tensor[(1, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0269, 0 /* ty=int64 */, meta[relay.Constant][322] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][269]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %1370 = fn (%p0250: Tensor[(512), float32], %p1184: Tensor[(512), float32], Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    %1366 = reshape(%p0250, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1367 = reshape(%p1184, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1368 = add(%1367, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1369 = rsqrt(%1368) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    multiply(%1366, %1369) /* ty=Tensor[(1, 512, 1, 1), float32] */
  };
  %1371 = (%model.backbone.body.layer4.1.bn2.weight, %model.backbone.body.layer4.1.bn2.running_var);
  %1372 = (%tensor_0252,);
  let %v252: () = vm.invoke_tvm_op(%1370, %1371, %1372) /* ty=() */;
  let %x336: Tensor[(1, 512, 1, 1), float32] = %tensor_0252;
  let %storage_0270: Storage[] = memory.alloc_storage(9437184 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][270]) /* ty=Storage[] */;
  let %tensor_0253: Tensor[(512, 512, 3, 3), float32] = memory.alloc_tensor(%storage_0270, 0 /* ty=int64 */, meta[relay.Constant][323] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][270]) /* ty=Tensor[(512, 512, 3, 3), float32] */;
  %1375 = fn (%p0251: Tensor[(512, 512, 3, 3), float32], %p1185: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(512, 512, 3, 3), float32] {
    %1373 = squeeze(%p1185, axis=[0, 2, 3]) /* ty=Tensor[(512), float32] */;
    %1374 = expand_dims(%1373, axis=1, num_newaxis=3) /* ty=Tensor[(512, 1, 1, 1), float32] */;
    multiply(%p0251, %1374) /* ty=Tensor[(512, 512, 3, 3), float32] */
  };
  %1376 = (%model.backbone.body.layer4.1.conv2.weight, %x336);
  %1377 = (%tensor_0253,);
  let %v253: () = vm.invoke_tvm_op(%1375, %1376, %1377) /* ty=() */;
  let %x337: Tensor[(512, 512, 3, 3), float32] = %tensor_0253;
  let %x338: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.1.bn2.bias, meta[relay.Constant][324] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][96]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %x339: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.1.bn2.running_mean, meta[relay.Constant][325] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][97]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %storage_0271: Storage[] = memory.alloc_storage(1280000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][271]) /* ty=Storage[] */;
  let %tensor_0254: Tensor[(1, 512, 25, 25), float32] = memory.alloc_tensor(%storage_0271, 0 /* ty=int64 */, meta[relay.Constant][326] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][271]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %1382 = fn (%p0252: Tensor[(1, 512, 25, 25), float32], %p1186: Tensor[(512, 512, 3, 3), float32], %p271: Tensor[(1, 512, 1, 1), float32], %p356: Tensor[(1, 512, 1, 1), float32], %p448: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(1, 512, 25, 25), float32] {
    %1378 = nn.conv2d(%p0252, %p1186, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
    %1379 = multiply(%p356, %p448) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1380 = subtract(%p271, %1379) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1381 = add(%1378, %1380) /* ty=Tensor[(1, 512, 25, 25), float32] */;
    nn.relu(%1381) /* ty=Tensor[(1, 512, 25, 25), float32] */
  };
  %1383 = (%x335, %x337, %x338, %x339, %x336);
  %1384 = (%tensor_0254,);
  let %v254: () = vm.invoke_tvm_op(%1382, %1383, %1384) /* ty=() */;
  let %x340: Tensor[(1, 512, 25, 25), float32] = %tensor_0254;
  let %storage_0272: Storage[] = memory.alloc_storage(8192 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][272]) /* ty=Storage[] */;
  let %tensor_0255: Tensor[(1, 2048, 1, 1), float32] = memory.alloc_tensor(%storage_0272, 0 /* ty=int64 */, meta[relay.Constant][327] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][272]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %1389 = fn (%p0253: Tensor[(2048), float32], %p1187: Tensor[(2048), float32], Primitive=1) -> Tensor[(1, 2048, 1, 1), float32] {
    %1385 = reshape(%p0253, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1386 = reshape(%p1187, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1387 = add(%1386, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1388 = rsqrt(%1387) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    multiply(%1385, %1388) /* ty=Tensor[(1, 2048, 1, 1), float32] */
  };
  %1390 = (%model.backbone.body.layer4.1.bn3.weight, %model.backbone.body.layer4.1.bn3.running_var);
  %1391 = (%tensor_0255,);
  let %v255: () = vm.invoke_tvm_op(%1389, %1390, %1391) /* ty=() */;
  let %x341: Tensor[(1, 2048, 1, 1), float32] = %tensor_0255;
  let %storage_0273: Storage[] = memory.alloc_storage(4194304 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][273]) /* ty=Storage[] */;
  let %tensor_0256: Tensor[(2048, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0273, 0 /* ty=int64 */, meta[relay.Constant][328] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][273]) /* ty=Tensor[(2048, 512, 1, 1), float32] */;
  %1394 = fn (%p0254: Tensor[(2048, 512, 1, 1), float32], %p1188: Tensor[(1, 2048, 1, 1), float32], Primitive=1) -> Tensor[(2048, 512, 1, 1), float32] {
    %1392 = squeeze(%p1188, axis=[0, 2, 3]) /* ty=Tensor[(2048), float32] */;
    %1393 = expand_dims(%1392, axis=1, num_newaxis=3) /* ty=Tensor[(2048, 1, 1, 1), float32] */;
    multiply(%p0254, %1393) /* ty=Tensor[(2048, 512, 1, 1), float32] */
  };
  %1395 = (%model.backbone.body.layer4.1.conv3.weight, %x341);
  %1396 = (%tensor_0256,);
  let %v256: () = vm.invoke_tvm_op(%1394, %1395, %1396) /* ty=() */;
  let %x342: Tensor[(2048, 512, 1, 1), float32] = %tensor_0256;
  let %x343: Tensor[(1, 2048, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.1.bn3.bias, meta[relay.Constant][329] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][98]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  let %x344: Tensor[(1, 2048, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.1.bn3.running_mean, meta[relay.Constant][330] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][99]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  let %storage_0274: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][274]) /* ty=Storage[] */;
  let %tensor_0257: Tensor[(1, 2048, 25, 25), float32] = memory.alloc_tensor(%storage_0274, 0 /* ty=int64 */, meta[relay.Constant][331] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][274]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %1402 = fn (%p0255: Tensor[(1, 512, 25, 25), float32], %p1189: Tensor[(2048, 512, 1, 1), float32], %p272: Tensor[(1, 2048, 1, 1), float32], %p357: Tensor[(1, 2048, 1, 1), float32], %p449: Tensor[(1, 2048, 1, 1), float32], %p514: Tensor[(1, 2048, 25, 25), float32], Primitive=1) -> Tensor[(1, 2048, 25, 25), float32] {
    %1397 = nn.conv2d(%p0255, %p1189, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
    %1398 = multiply(%p357, %p449) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1399 = subtract(%p272, %1398) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1400 = add(%1397, %1399) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
    %1401 = add(%1400, %p514) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
    nn.relu(%1401) /* ty=Tensor[(1, 2048, 25, 25), float32] */
  };
  %1403 = (%x340, %x342, %x343, %x344, %x341, %x330);
  %1404 = (%tensor_0257,);
  let %v257: () = vm.invoke_tvm_op(%1402, %1403, %1404) /* ty=() */;
  let %x345: Tensor[(1, 2048, 25, 25), float32] = %tensor_0257;
  let %storage_0275: Storage[] = memory.alloc_storage(2048 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][275]) /* ty=Storage[] */;
  let %tensor_0258: Tensor[(1, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0275, 0 /* ty=int64 */, meta[relay.Constant][332] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][275]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %1409 = fn (%p0256: Tensor[(512), float32], %p1190: Tensor[(512), float32], Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    %1405 = reshape(%p0256, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1406 = reshape(%p1190, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1407 = add(%1406, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1408 = rsqrt(%1407) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    multiply(%1405, %1408) /* ty=Tensor[(1, 512, 1, 1), float32] */
  };
  %1410 = (%model.backbone.body.layer4.2.bn1.weight, %model.backbone.body.layer4.2.bn1.running_var);
  %1411 = (%tensor_0258,);
  let %v258: () = vm.invoke_tvm_op(%1409, %1410, %1411) /* ty=() */;
  let %x346: Tensor[(1, 512, 1, 1), float32] = %tensor_0258;
  let %storage_0276: Storage[] = memory.alloc_storage(4194304 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][276]) /* ty=Storage[] */;
  let %tensor_0259: Tensor[(512, 2048, 1, 1), float32] = memory.alloc_tensor(%storage_0276, 0 /* ty=int64 */, meta[relay.Constant][333] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][276]) /* ty=Tensor[(512, 2048, 1, 1), float32] */;
  %1414 = fn (%p0257: Tensor[(512, 2048, 1, 1), float32], %p1191: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(512, 2048, 1, 1), float32] {
    %1412 = squeeze(%p1191, axis=[0, 2, 3]) /* ty=Tensor[(512), float32] */;
    %1413 = expand_dims(%1412, axis=1, num_newaxis=3) /* ty=Tensor[(512, 1, 1, 1), float32] */;
    multiply(%p0257, %1413) /* ty=Tensor[(512, 2048, 1, 1), float32] */
  };
  %1415 = (%model.backbone.body.layer4.2.conv1.weight, %x346);
  %1416 = (%tensor_0259,);
  let %v259: () = vm.invoke_tvm_op(%1414, %1415, %1416) /* ty=() */;
  let %x347: Tensor[(512, 2048, 1, 1), float32] = %tensor_0259;
  let %x348: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.2.bn1.bias, meta[relay.Constant][334] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][100]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %x349: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.2.bn1.running_mean, meta[relay.Constant][335] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][101]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %storage_0277: Storage[] = memory.alloc_storage(1280000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][277]) /* ty=Storage[] */;
  let %tensor_0260: Tensor[(1, 512, 25, 25), float32] = memory.alloc_tensor(%storage_0277, 0 /* ty=int64 */, meta[relay.Constant][336] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][277]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %1421 = fn (%p0258: Tensor[(1, 2048, 25, 25), float32], %p1192: Tensor[(512, 2048, 1, 1), float32], %p273: Tensor[(1, 512, 1, 1), float32], %p358: Tensor[(1, 512, 1, 1), float32], %p450: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(1, 512, 25, 25), float32] {
    %1417 = nn.conv2d(%p0258, %p1192, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
    %1418 = multiply(%p358, %p450) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1419 = subtract(%p273, %1418) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1420 = add(%1417, %1419) /* ty=Tensor[(1, 512, 25, 25), float32] */;
    nn.relu(%1420) /* ty=Tensor[(1, 512, 25, 25), float32] */
  };
  %1422 = (%x345, %x347, %x348, %x349, %x346);
  %1423 = (%tensor_0260,);
  let %v260: () = vm.invoke_tvm_op(%1421, %1422, %1423) /* ty=() */;
  let %x350: Tensor[(1, 512, 25, 25), float32] = %tensor_0260;
  let %storage_0278: Storage[] = memory.alloc_storage(2048 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][278]) /* ty=Storage[] */;
  let %tensor_0261: Tensor[(1, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0278, 0 /* ty=int64 */, meta[relay.Constant][337] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][278]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %1428 = fn (%p0259: Tensor[(512), float32], %p1193: Tensor[(512), float32], Primitive=1) -> Tensor[(1, 512, 1, 1), float32] {
    %1424 = reshape(%p0259, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1425 = reshape(%p1193, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1426 = add(%1425, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1427 = rsqrt(%1426) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    multiply(%1424, %1427) /* ty=Tensor[(1, 512, 1, 1), float32] */
  };
  %1429 = (%model.backbone.body.layer4.2.bn2.weight, %model.backbone.body.layer4.2.bn2.running_var);
  %1430 = (%tensor_0261,);
  let %v261: () = vm.invoke_tvm_op(%1428, %1429, %1430) /* ty=() */;
  let %x351: Tensor[(1, 512, 1, 1), float32] = %tensor_0261;
  let %storage_0279: Storage[] = memory.alloc_storage(9437184 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][279]) /* ty=Storage[] */;
  let %tensor_0262: Tensor[(512, 512, 3, 3), float32] = memory.alloc_tensor(%storage_0279, 0 /* ty=int64 */, meta[relay.Constant][338] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][279]) /* ty=Tensor[(512, 512, 3, 3), float32] */;
  %1433 = fn (%p0260: Tensor[(512, 512, 3, 3), float32], %p1194: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(512, 512, 3, 3), float32] {
    %1431 = squeeze(%p1194, axis=[0, 2, 3]) /* ty=Tensor[(512), float32] */;
    %1432 = expand_dims(%1431, axis=1, num_newaxis=3) /* ty=Tensor[(512, 1, 1, 1), float32] */;
    multiply(%p0260, %1432) /* ty=Tensor[(512, 512, 3, 3), float32] */
  };
  %1434 = (%model.backbone.body.layer4.2.conv2.weight, %x351);
  %1435 = (%tensor_0262,);
  let %v262: () = vm.invoke_tvm_op(%1433, %1434, %1435) /* ty=() */;
  let %x352: Tensor[(512, 512, 3, 3), float32] = %tensor_0262;
  let %x353: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.2.bn2.bias, meta[relay.Constant][339] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][102]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %x354: Tensor[(1, 512, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.2.bn2.running_mean, meta[relay.Constant][340] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][103]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  let %storage_0280: Storage[] = memory.alloc_storage(1280000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][280]) /* ty=Storage[] */;
  let %tensor_0263: Tensor[(1, 512, 25, 25), float32] = memory.alloc_tensor(%storage_0280, 0 /* ty=int64 */, meta[relay.Constant][341] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][280]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
  %1440 = fn (%p0261: Tensor[(1, 512, 25, 25), float32], %p1195: Tensor[(512, 512, 3, 3), float32], %p274: Tensor[(1, 512, 1, 1), float32], %p359: Tensor[(1, 512, 1, 1), float32], %p451: Tensor[(1, 512, 1, 1), float32], Primitive=1) -> Tensor[(1, 512, 25, 25), float32] {
    %1436 = nn.conv2d(%p0261, %p1195, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 25, 25), float32] */;
    %1437 = multiply(%p359, %p451) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1438 = subtract(%p274, %1437) /* ty=Tensor[(1, 512, 1, 1), float32] */;
    %1439 = add(%1436, %1438) /* ty=Tensor[(1, 512, 25, 25), float32] */;
    nn.relu(%1439) /* ty=Tensor[(1, 512, 25, 25), float32] */
  };
  %1441 = (%x350, %x352, %x353, %x354, %x351);
  %1442 = (%tensor_0263,);
  let %v263: () = vm.invoke_tvm_op(%1440, %1441, %1442) /* ty=() */;
  let %x355: Tensor[(1, 512, 25, 25), float32] = %tensor_0263;
  let %storage_0281: Storage[] = memory.alloc_storage(8192 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][281]) /* ty=Storage[] */;
  let %tensor_0264: Tensor[(1, 2048, 1, 1), float32] = memory.alloc_tensor(%storage_0281, 0 /* ty=int64 */, meta[relay.Constant][342] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][281]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %1447 = fn (%p0262: Tensor[(2048), float32], %p1196: Tensor[(2048), float32], Primitive=1) -> Tensor[(1, 2048, 1, 1), float32] {
    %1443 = reshape(%p0262, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1444 = reshape(%p1196, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1445 = add(%1444, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1446 = rsqrt(%1445) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    multiply(%1443, %1446) /* ty=Tensor[(1, 2048, 1, 1), float32] */
  };
  %1448 = (%model.backbone.body.layer4.2.bn3.weight, %model.backbone.body.layer4.2.bn3.running_var);
  %1449 = (%tensor_0264,);
  let %v264: () = vm.invoke_tvm_op(%1447, %1448, %1449) /* ty=() */;
  let %x356: Tensor[(1, 2048, 1, 1), float32] = %tensor_0264;
  let %storage_0282: Storage[] = memory.alloc_storage(4194304 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][282]) /* ty=Storage[] */;
  let %tensor_0265: Tensor[(2048, 512, 1, 1), float32] = memory.alloc_tensor(%storage_0282, 0 /* ty=int64 */, meta[relay.Constant][343] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][282]) /* ty=Tensor[(2048, 512, 1, 1), float32] */;
  %1452 = fn (%p0263: Tensor[(2048, 512, 1, 1), float32], %p1197: Tensor[(1, 2048, 1, 1), float32], Primitive=1) -> Tensor[(2048, 512, 1, 1), float32] {
    %1450 = squeeze(%p1197, axis=[0, 2, 3]) /* ty=Tensor[(2048), float32] */;
    %1451 = expand_dims(%1450, axis=1, num_newaxis=3) /* ty=Tensor[(2048, 1, 1, 1), float32] */;
    multiply(%p0263, %1451) /* ty=Tensor[(2048, 512, 1, 1), float32] */
  };
  %1453 = (%model.backbone.body.layer4.2.conv3.weight, %x356);
  %1454 = (%tensor_0265,);
  let %v265: () = vm.invoke_tvm_op(%1452, %1453, %1454) /* ty=() */;
  let %x357: Tensor[(2048, 512, 1, 1), float32] = %tensor_0265;
  let %x358: Tensor[(1, 2048, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.2.bn3.bias, meta[relay.Constant][344] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][104]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  let %x359: Tensor[(1, 2048, 1, 1), float32] = vm.reshape_tensor(%model.backbone.body.layer4.2.bn3.running_mean, meta[relay.Constant][345] /* ty=Tensor[(4), int64] */, meta[relay.attrs.ReshapeTensorAttrs][105]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  let %storage_0283: Storage[] = memory.alloc_storage(5120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][283]) /* ty=Storage[] */;
  let %tensor_0266: Tensor[(1, 2048, 25, 25), float32] = memory.alloc_tensor(%storage_0283, 0 /* ty=int64 */, meta[relay.Constant][346] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][283]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
  %1460 = fn (%p0264: Tensor[(1, 512, 25, 25), float32], %p1198: Tensor[(2048, 512, 1, 1), float32], %p275: Tensor[(1, 2048, 1, 1), float32], %p360: Tensor[(1, 2048, 1, 1), float32], %p452: Tensor[(1, 2048, 1, 1), float32], %p515: Tensor[(1, 2048, 25, 25), float32], Primitive=1) -> Tensor[(1, 2048, 25, 25), float32] {
    %1455 = nn.conv2d(%p0264, %p1198, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
    %1456 = multiply(%p360, %p452) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1457 = subtract(%p275, %1456) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
    %1458 = add(%1455, %1457) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
    %1459 = add(%1458, %p515) /* ty=Tensor[(1, 2048, 25, 25), float32] */;
    nn.relu(%1459) /* ty=Tensor[(1, 2048, 25, 25), float32] */
  };
  %1461 = (%x355, %x357, %x358, %x359, %x356, %x345);
  %1462 = (%tensor_0266,);
  let %v266: () = vm.invoke_tvm_op(%1460, %1461, %1462) /* ty=() */;
  let %x360: Tensor[(1, 2048, 25, 25), float32] = %tensor_0266;
  let %storage_0284: Storage[] = memory.alloc_storage(640000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][284]) /* ty=Storage[] */;
  let %tensor_0267: Tensor[(1, 256, 25, 25), float32] = memory.alloc_tensor(%storage_0284, 0 /* ty=int64 */, meta[relay.Constant][347] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][284]) /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %1466 = fn (%p0265: Tensor[(1, 2048, 25, 25), float32], %p1199: Tensor[(256, 2048, 1, 1), float32], %p276: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 25, 25), float32] {
    %1463 = nn.conv2d(%p0265, %p1199, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 25, 25), float32] */;
    %1464 = expand_dims(%p276, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1465 = expand_dims(%1464, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    add(%1463, %1465) /* ty=Tensor[(1, 256, 25, 25), float32] */
  };
  %1467 = (%x360, %model.backbone.fpn.inner_blocks.3.weight, %model.backbone.fpn.inner_blocks.3.bias);
  %1468 = (%tensor_0267,);
  let %v267: () = vm.invoke_tvm_op(%1466, %1467, %1468) /* ty=() */;
  let %x361: Tensor[(1, 256, 25, 25), float32] = %tensor_0267;
  let %storage_0285: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][285]) /* ty=Storage[] */;
  let %tensor_0268: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0285, 0 /* ty=int64 */, meta[relay.Constant][348] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][285]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1469 = fn (%p0266: Tensor[(1, 256, 25, 25), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    image.resize(%p0266, size=[50, 50], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1470 = (%x361,);
  %1471 = (%tensor_0268,);
  let %v268: () = vm.invoke_tvm_op(%1469, %1470, %1471) /* ty=() */;
  let %x362: Tensor[(1, 256, 50, 50), float32] = %tensor_0268;
  let %storage_0286: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][286]) /* ty=Storage[] */;
  let %tensor_0269: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0286, 0 /* ty=int64 */, meta[relay.Constant][349] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][286]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1476 = fn (%p0267: Tensor[(1, 1024, 50, 50), float32], %p1200: Tensor[(256, 1024, 1, 1), float32], %p277: Tensor[(256), float32], %p361: Tensor[(1, 256, 50, 50), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1472 = nn.conv2d(%p0267, %p1200, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1473 = expand_dims(%p277, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1474 = expand_dims(%1473, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1475 = add(%1472, %1474) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    add(%1475, %p361) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1477 = (%x310, %model.backbone.fpn.inner_blocks.2.weight, %model.backbone.fpn.inner_blocks.2.bias, %x362);
  %1478 = (%tensor_0269,);
  let %v269: () = vm.invoke_tvm_op(%1476, %1477, %1478) /* ty=() */;
  let %x363: Tensor[(1, 256, 50, 50), float32] = %tensor_0269;
  let %storage_0287: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][287]) /* ty=Storage[] */;
  let %tensor_0270: Tensor[(1, 256, 100, 100), float32] = memory.alloc_tensor(%storage_0287, 0 /* ty=int64 */, meta[relay.Constant][350] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][287]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %1479 = fn (%p0268: Tensor[(1, 256, 50, 50), float32], Primitive=1) -> Tensor[(1, 256, 100, 100), float32] {
    image.resize(%p0268, size=[100, 100], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 100, 100), float32] */
  };
  %1480 = (%x363,);
  %1481 = (%tensor_0270,);
  let %v270: () = vm.invoke_tvm_op(%1479, %1480, %1481) /* ty=() */;
  let %x364: Tensor[(1, 256, 100, 100), float32] = %tensor_0270;
  let %storage_0288: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][288]) /* ty=Storage[] */;
  let %tensor_0271: Tensor[(1, 256, 100, 100), float32] = memory.alloc_tensor(%storage_0288, 0 /* ty=int64 */, meta[relay.Constant][351] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][288]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %1486 = fn (%p0269: Tensor[(1, 512, 100, 100), float32], %p1201: Tensor[(256, 512, 1, 1), float32], %p278: Tensor[(256), float32], %p362: Tensor[(1, 256, 100, 100), float32], Primitive=1) -> Tensor[(1, 256, 100, 100), float32] {
    %1482 = nn.conv2d(%p0269, %p1201, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
    %1483 = expand_dims(%p278, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1484 = expand_dims(%1483, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1485 = add(%1482, %1484) /* ty=Tensor[(1, 256, 100, 100), float32] */;
    add(%1485, %p362) /* ty=Tensor[(1, 256, 100, 100), float32] */
  };
  %1487 = (%x215, %model.backbone.fpn.inner_blocks.1.weight, %model.backbone.fpn.inner_blocks.1.bias, %x364);
  %1488 = (%tensor_0271,);
  let %v271: () = vm.invoke_tvm_op(%1486, %1487, %1488) /* ty=() */;
  let %x365: Tensor[(1, 256, 100, 100), float32] = %tensor_0271;
  let %storage_0289: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][289]) /* ty=Storage[] */;
  let %tensor_0272: Tensor[(1, 256, 200, 200), float32] = memory.alloc_tensor(%storage_0289, 0 /* ty=int64 */, meta[relay.Constant][352] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][289]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %1489 = fn (%p0270: Tensor[(1, 256, 100, 100), float32], Primitive=1) -> Tensor[(1, 256, 200, 200), float32] {
    image.resize(%p0270, size=[200, 200], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 200, 200), float32] */
  };
  %1490 = (%x365,);
  %1491 = (%tensor_0272,);
  let %v272: () = vm.invoke_tvm_op(%1489, %1490, %1491) /* ty=() */;
  let %x366: Tensor[(1, 256, 200, 200), float32] = %tensor_0272;
  let %storage_0290: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][290]) /* ty=Storage[] */;
  let %tensor_0273: Tensor[(1, 256, 200, 200), float32] = memory.alloc_tensor(%storage_0290, 0 /* ty=int64 */, meta[relay.Constant][353] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][290]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %1496 = fn (%p0271: Tensor[(1, 256, 200, 200), float32], %p1202: Tensor[(256, 256, 1, 1), float32], %p279: Tensor[(256), float32], %p363: Tensor[(1, 256, 200, 200), float32], Primitive=1) -> Tensor[(1, 256, 200, 200), float32] {
    %1492 = nn.conv2d(%p0271, %p1202, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    %1493 = expand_dims(%p279, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1494 = expand_dims(%1493, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1495 = add(%1492, %1494) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    add(%1495, %p363) /* ty=Tensor[(1, 256, 200, 200), float32] */
  };
  %1497 = (%x150, %model.backbone.fpn.inner_blocks.0.weight, %model.backbone.fpn.inner_blocks.0.bias, %x366);
  %1498 = (%tensor_0273,);
  let %v273: () = vm.invoke_tvm_op(%1496, %1497, %1498) /* ty=() */;
  let %x367: Tensor[(1, 256, 200, 200), float32] = %tensor_0273;
  let %storage_0291: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][291]) /* ty=Storage[] */;
  let %tensor_0274: Tensor[(1, 256, 200, 200), float32] = memory.alloc_tensor(%storage_0291, 0 /* ty=int64 */, meta[relay.Constant][354] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][291]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %1502 = fn (%p0272: Tensor[(1, 256, 200, 200), float32], %p1203: Tensor[(256, 256, 3, 3), float32], %p280: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 200, 200), float32] {
    %1499 = nn.conv2d(%p0272, %p1203, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    %1500 = expand_dims(%p280, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1501 = expand_dims(%1500, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    add(%1499, %1501) /* ty=Tensor[(1, 256, 200, 200), float32] */
  };
  %1503 = (%x367, %model.backbone.fpn.layer_blocks.0.weight, %model.backbone.fpn.layer_blocks.0.bias);
  %1504 = (%tensor_0274,);
  let %v274: () = vm.invoke_tvm_op(%1502, %1503, %1504) /* ty=() */;
  let %x368: Tensor[(1, 256, 200, 200), float32] = %tensor_0274;
  let %storage_0292: Storage[] = memory.alloc_storage(40960000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][292]) /* ty=Storage[] */;
  let %tensor_0275: Tensor[(1, 256, 200, 200), float32] = memory.alloc_tensor(%storage_0292, 0 /* ty=int64 */, meta[relay.Constant][355] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][292]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %1509 = fn (%p0273: Tensor[(1, 256, 200, 200), float32], %p1204: Tensor[(256, 256, 3, 3), float32], %p281: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 200, 200), float32] {
    %1505 = nn.conv2d(%p0273, %p1204, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    %1506 = expand_dims(%p281, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1507 = expand_dims(%1506, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1508 = add(%1505, %1507) /* ty=Tensor[(1, 256, 200, 200), float32] */;
    nn.relu(%1508) /* ty=Tensor[(1, 256, 200, 200), float32] */
  };
  %1510 = (%x368, %model.rpn.head.conv.weight, %model.rpn.head.conv.bias);
  %1511 = (%tensor_0275,);
  let %v275: () = vm.invoke_tvm_op(%1509, %1510, %1511) /* ty=() */;
  let %x369: Tensor[(1, 256, 200, 200), float32] = %tensor_0275;
  let %storage_0293: Storage[] = memory.alloc_storage(1920000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][293]) /* ty=Storage[] */;
  let %tensor_0276: Tensor[(1, 12, 200, 200), float32] = memory.alloc_tensor(%storage_0293, 0 /* ty=int64 */, meta[relay.Constant][356] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][293]) /* ty=Tensor[(1, 12, 200, 200), float32] */;
  %1515 = fn (%p0274: Tensor[(1, 256, 200, 200), float32], %p1205: Tensor[(12, 256, 1, 1), float32], %p282: Tensor[(12), float32], Primitive=1) -> Tensor[(1, 12, 200, 200), float32] {
    %1512 = nn.conv2d(%p0274, %p1205, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 200, 200), float32] */;
    %1513 = expand_dims(%p282, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
    %1514 = expand_dims(%1513, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
    add(%1512, %1514) /* ty=Tensor[(1, 12, 200, 200), float32] */
  };
  %1516 = (%x369, %model.rpn.head.bbox_pred.weight, %model.rpn.head.bbox_pred.bias);
  %1517 = (%tensor_0276,);
  let %v276: () = vm.invoke_tvm_op(%1515, %1516, %1517) /* ty=() */;
  let %x370: Tensor[(1, 12, 200, 200), float32] = %tensor_0276;
  let %storage_0294: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][294]) /* ty=Storage[] */;
  let %tensor_0277: Tensor[(1, 256, 100, 100), float32] = memory.alloc_tensor(%storage_0294, 0 /* ty=int64 */, meta[relay.Constant][357] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][294]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %1521 = fn (%p0275: Tensor[(1, 256, 100, 100), float32], %p1206: Tensor[(256, 256, 3, 3), float32], %p283: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 100, 100), float32] {
    %1518 = nn.conv2d(%p0275, %p1206, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
    %1519 = expand_dims(%p283, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1520 = expand_dims(%1519, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    add(%1518, %1520) /* ty=Tensor[(1, 256, 100, 100), float32] */
  };
  %1522 = (%x365, %model.backbone.fpn.layer_blocks.1.weight, %model.backbone.fpn.layer_blocks.1.bias);
  %1523 = (%tensor_0277,);
  let %v277: () = vm.invoke_tvm_op(%1521, %1522, %1523) /* ty=() */;
  let %x371: Tensor[(1, 256, 100, 100), float32] = %tensor_0277;
  let %storage_0295: Storage[] = memory.alloc_storage(10240000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][295]) /* ty=Storage[] */;
  let %tensor_0278: Tensor[(1, 256, 100, 100), float32] = memory.alloc_tensor(%storage_0295, 0 /* ty=int64 */, meta[relay.Constant][358] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][295]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %1528 = fn (%p0276: Tensor[(1, 256, 100, 100), float32], %p1207: Tensor[(256, 256, 3, 3), float32], %p284: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 100, 100), float32] {
    %1524 = nn.conv2d(%p0276, %p1207, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 100, 100), float32] */;
    %1525 = expand_dims(%p284, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1526 = expand_dims(%1525, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1527 = add(%1524, %1526) /* ty=Tensor[(1, 256, 100, 100), float32] */;
    nn.relu(%1527) /* ty=Tensor[(1, 256, 100, 100), float32] */
  };
  %1529 = (%x371, %model.rpn.head.conv.weight, %model.rpn.head.conv.bias);
  %1530 = (%tensor_0278,);
  let %v278: () = vm.invoke_tvm_op(%1528, %1529, %1530) /* ty=() */;
  let %x372: Tensor[(1, 256, 100, 100), float32] = %tensor_0278;
  let %storage_0296: Storage[] = memory.alloc_storage(480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][296]) /* ty=Storage[] */;
  let %tensor_0279: Tensor[(1, 12, 100, 100), float32] = memory.alloc_tensor(%storage_0296, 0 /* ty=int64 */, meta[relay.Constant][359] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][296]) /* ty=Tensor[(1, 12, 100, 100), float32] */;
  %1534 = fn (%p0277: Tensor[(1, 256, 100, 100), float32], %p1208: Tensor[(12, 256, 1, 1), float32], %p285: Tensor[(12), float32], Primitive=1) -> Tensor[(1, 12, 100, 100), float32] {
    %1531 = nn.conv2d(%p0277, %p1208, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 100, 100), float32] */;
    %1532 = expand_dims(%p285, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
    %1533 = expand_dims(%1532, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
    add(%1531, %1533) /* ty=Tensor[(1, 12, 100, 100), float32] */
  };
  %1535 = (%x372, %model.rpn.head.bbox_pred.weight, %model.rpn.head.bbox_pred.bias);
  %1536 = (%tensor_0279,);
  let %v279: () = vm.invoke_tvm_op(%1534, %1535, %1536) /* ty=() */;
  let %x373: Tensor[(1, 12, 100, 100), float32] = %tensor_0279;
  let %storage_0297: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][297]) /* ty=Storage[] */;
  let %tensor_0280: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0297, 0 /* ty=int64 */, meta[relay.Constant][360] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][297]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1540 = fn (%p0278: Tensor[(1, 256, 50, 50), float32], %p1209: Tensor[(256, 256, 3, 3), float32], %p286: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1537 = nn.conv2d(%p0278, %p1209, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1538 = expand_dims(%p286, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1539 = expand_dims(%1538, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    add(%1537, %1539) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1541 = (%x363, %model.backbone.fpn.layer_blocks.2.weight, %model.backbone.fpn.layer_blocks.2.bias);
  %1542 = (%tensor_0280,);
  let %v280: () = vm.invoke_tvm_op(%1540, %1541, %1542) /* ty=() */;
  let %x374: Tensor[(1, 256, 50, 50), float32] = %tensor_0280;
  let %storage_0298: Storage[] = memory.alloc_storage(2560000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][298]) /* ty=Storage[] */;
  let %tensor_0281: Tensor[(1, 256, 50, 50), float32] = memory.alloc_tensor(%storage_0298, 0 /* ty=int64 */, meta[relay.Constant][361] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][298]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1547 = fn (%p0279: Tensor[(1, 256, 50, 50), float32], %p1210: Tensor[(256, 256, 3, 3), float32], %p287: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 50, 50), float32] {
    %1543 = nn.conv2d(%p0279, %p1210, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    %1544 = expand_dims(%p287, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1545 = expand_dims(%1544, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1546 = add(%1543, %1545) /* ty=Tensor[(1, 256, 50, 50), float32] */;
    nn.relu(%1546) /* ty=Tensor[(1, 256, 50, 50), float32] */
  };
  %1548 = (%x374, %model.rpn.head.conv.weight, %model.rpn.head.conv.bias);
  %1549 = (%tensor_0281,);
  let %v281: () = vm.invoke_tvm_op(%1547, %1548, %1549) /* ty=() */;
  let %x375: Tensor[(1, 256, 50, 50), float32] = %tensor_0281;
  let %storage_0299: Storage[] = memory.alloc_storage(120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][299]) /* ty=Storage[] */;
  let %tensor_0282: Tensor[(1, 12, 50, 50), float32] = memory.alloc_tensor(%storage_0299, 0 /* ty=int64 */, meta[relay.Constant][362] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][299]) /* ty=Tensor[(1, 12, 50, 50), float32] */;
  %1553 = fn (%p0280: Tensor[(1, 256, 50, 50), float32], %p1211: Tensor[(12, 256, 1, 1), float32], %p288: Tensor[(12), float32], Primitive=1) -> Tensor[(1, 12, 50, 50), float32] {
    %1550 = nn.conv2d(%p0280, %p1211, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 50, 50), float32] */;
    %1551 = expand_dims(%p288, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
    %1552 = expand_dims(%1551, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
    add(%1550, %1552) /* ty=Tensor[(1, 12, 50, 50), float32] */
  };
  %1554 = (%x375, %model.rpn.head.bbox_pred.weight, %model.rpn.head.bbox_pred.bias);
  %1555 = (%tensor_0282,);
  let %v282: () = vm.invoke_tvm_op(%1553, %1554, %1555) /* ty=() */;
  let %x376: Tensor[(1, 12, 50, 50), float32] = %tensor_0282;
  let %storage_0300: Storage[] = memory.alloc_storage(640000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][300]) /* ty=Storage[] */;
  let %tensor_0283: Tensor[(1, 256, 25, 25), float32] = memory.alloc_tensor(%storage_0300, 0 /* ty=int64 */, meta[relay.Constant][363] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][300]) /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %1559 = fn (%p0281: Tensor[(1, 256, 25, 25), float32], %p1212: Tensor[(256, 256, 3, 3), float32], %p289: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 25, 25), float32] {
    %1556 = nn.conv2d(%p0281, %p1212, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 25, 25), float32] */;
    %1557 = expand_dims(%p289, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1558 = expand_dims(%1557, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    add(%1556, %1558) /* ty=Tensor[(1, 256, 25, 25), float32] */
  };
  %1560 = (%x361, %model.backbone.fpn.layer_blocks.3.weight, %model.backbone.fpn.layer_blocks.3.bias);
  %1561 = (%tensor_0283,);
  let %v283: () = vm.invoke_tvm_op(%1559, %1560, %1561) /* ty=() */;
  let %x377: Tensor[(1, 256, 25, 25), float32] = %tensor_0283;
  let %storage_0301: Storage[] = memory.alloc_storage(640000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][301]) /* ty=Storage[] */;
  let %tensor_0284: Tensor[(1, 256, 25, 25), float32] = memory.alloc_tensor(%storage_0301, 0 /* ty=int64 */, meta[relay.Constant][364] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][301]) /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %1566 = fn (%p0282: Tensor[(1, 256, 25, 25), float32], %p1213: Tensor[(256, 256, 3, 3), float32], %p290: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 25, 25), float32] {
    %1562 = nn.conv2d(%p0282, %p1213, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 25, 25), float32] */;
    %1563 = expand_dims(%p290, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1564 = expand_dims(%1563, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1565 = add(%1562, %1564) /* ty=Tensor[(1, 256, 25, 25), float32] */;
    nn.relu(%1565) /* ty=Tensor[(1, 256, 25, 25), float32] */
  };
  %1567 = (%x377, %model.rpn.head.conv.weight, %model.rpn.head.conv.bias);
  %1568 = (%tensor_0284,);
  let %v284: () = vm.invoke_tvm_op(%1566, %1567, %1568) /* ty=() */;
  let %x378: Tensor[(1, 256, 25, 25), float32] = %tensor_0284;
  let %storage_0302: Storage[] = memory.alloc_storage(30000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][302]) /* ty=Storage[] */;
  let %tensor_0285: Tensor[(1, 12, 25, 25), float32] = memory.alloc_tensor(%storage_0302, 0 /* ty=int64 */, meta[relay.Constant][365] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][302]) /* ty=Tensor[(1, 12, 25, 25), float32] */;
  %1572 = fn (%p0283: Tensor[(1, 256, 25, 25), float32], %p1214: Tensor[(12, 256, 1, 1), float32], %p291: Tensor[(12), float32], Primitive=1) -> Tensor[(1, 12, 25, 25), float32] {
    %1569 = nn.conv2d(%p0283, %p1214, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 25, 25), float32] */;
    %1570 = expand_dims(%p291, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
    %1571 = expand_dims(%1570, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
    add(%1569, %1571) /* ty=Tensor[(1, 12, 25, 25), float32] */
  };
  %1573 = (%x378, %model.rpn.head.bbox_pred.weight, %model.rpn.head.bbox_pred.bias);
  %1574 = (%tensor_0285,);
  let %v285: () = vm.invoke_tvm_op(%1572, %1573, %1574) /* ty=() */;
  let %x379: Tensor[(1, 12, 25, 25), float32] = %tensor_0285;
  let %storage_0303: Storage[] = memory.alloc_storage(173056 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][303]) /* ty=Storage[] */;
  let %tensor_0286: Tensor[(1, 256, 13, 13), float32] = memory.alloc_tensor(%storage_0303, 0 /* ty=int64 */, meta[relay.Constant][366] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][303]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  %1575 = fn (%p0284: Tensor[(1, 256, 25, 25), float32], Primitive=1) -> Tensor[(1, 256, 13, 13), float32] {
    nn.max_pool2d(%p0284, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 256, 13, 13), float32] */
  };
  %1576 = (%x377,);
  %1577 = (%tensor_0286,);
  let %v286: () = vm.invoke_tvm_op(%1575, %1576, %1577) /* ty=() */;
  let %x380: Tensor[(1, 256, 13, 13), float32] = %tensor_0286;
  let %storage_0304: Storage[] = memory.alloc_storage(173056 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][304]) /* ty=Storage[] */;
  let %tensor_0287: Tensor[(1, 256, 13, 13), float32] = memory.alloc_tensor(%storage_0304, 0 /* ty=int64 */, meta[relay.Constant][367] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][304]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  %1582 = fn (%p0285: Tensor[(1, 256, 13, 13), float32], %p1215: Tensor[(256, 256, 3, 3), float32], %p292: Tensor[(256), float32], Primitive=1) -> Tensor[(1, 256, 13, 13), float32] {
    %1578 = nn.conv2d(%p0285, %p1215, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
    %1579 = expand_dims(%p292, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %1580 = expand_dims(%1579, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %1581 = add(%1578, %1580) /* ty=Tensor[(1, 256, 13, 13), float32] */;
    nn.relu(%1581) /* ty=Tensor[(1, 256, 13, 13), float32] */
  };
  %1583 = (%x380, %model.rpn.head.conv.weight, %model.rpn.head.conv.bias);
  %1584 = (%tensor_0287,);
  let %v287: () = vm.invoke_tvm_op(%1582, %1583, %1584) /* ty=() */;
  let %x381: Tensor[(1, 256, 13, 13), float32] = %tensor_0287;
  let %storage_0305: Storage[] = memory.alloc_storage(8112 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][305]) /* ty=Storage[] */;
  let %tensor_0288: Tensor[(1, 12, 13, 13), float32] = memory.alloc_tensor(%storage_0305, 0 /* ty=int64 */, meta[relay.Constant][368] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][305]) /* ty=Tensor[(1, 12, 13, 13), float32] */;
  %1588 = fn (%p0286: Tensor[(1, 256, 13, 13), float32], %p1216: Tensor[(12, 256, 1, 1), float32], %p293: Tensor[(12), float32], Primitive=1) -> Tensor[(1, 12, 13, 13), float32] {
    %1585 = nn.conv2d(%p0286, %p1216, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]) /* ty=Tensor[(1, 12, 13, 13), float32] */;
    %1586 = expand_dims(%p293, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
    %1587 = expand_dims(%1586, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
    add(%1585, %1587) /* ty=Tensor[(1, 12, 13, 13), float32] */
  };
  %1589 = (%x381, %model.rpn.head.bbox_pred.weight, %model.rpn.head.bbox_pred.bias);
  %1590 = (%tensor_0288,);
  let %v288: () = vm.invoke_tvm_op(%1588, %1589, %1590) /* ty=() */;
  let %x382: Tensor[(1, 12, 13, 13), float32] = %tensor_0288;
  let %storage_0306: Storage[] = memory.alloc_storage(480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][306]) /* ty=Storage[] */;
  let %tensor_0289: Tensor[(1, 3, 200, 200), float32] = memory.alloc_tensor(%storage_0306, 0 /* ty=int64 */, meta[relay.Constant][369] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][306]) /* ty=Tensor[(1, 3, 200, 200), float32] */;
  %1594 = fn (%p0287: Tensor[(1, 256, 200, 200), float32], %p1217: Tensor[(3, 256, 1, 1), float32], %p294: Tensor[(3), float32], Primitive=1) -> Tensor[(1, 3, 200, 200), float32] {
    %1591 = nn.conv2d(%p0287, %p1217, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]) /* ty=Tensor[(1, 3, 200, 200), float32] */;
    %1592 = expand_dims(%p294, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
    %1593 = expand_dims(%1592, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
    add(%1591, %1593) /* ty=Tensor[(1, 3, 200, 200), float32] */
  };
  %1595 = (%x369, %model.rpn.head.cls_logits.weight, %model.rpn.head.cls_logits.bias);
  %1596 = (%tensor_0289,);
  let %v289: () = vm.invoke_tvm_op(%1594, %1595, %1596) /* ty=() */;
  let %x383: Tensor[(1, 3, 200, 200), float32] = %tensor_0289;
  let %storage_0307: Storage[] = memory.alloc_storage(120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][307]) /* ty=Storage[] */;
  let %tensor_0290: Tensor[(1, 3, 100, 100), float32] = memory.alloc_tensor(%storage_0307, 0 /* ty=int64 */, meta[relay.Constant][370] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][307]) /* ty=Tensor[(1, 3, 100, 100), float32] */;
  %1600 = fn (%p0288: Tensor[(1, 256, 100, 100), float32], %p1218: Tensor[(3, 256, 1, 1), float32], %p295: Tensor[(3), float32], Primitive=1) -> Tensor[(1, 3, 100, 100), float32] {
    %1597 = nn.conv2d(%p0288, %p1218, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]) /* ty=Tensor[(1, 3, 100, 100), float32] */;
    %1598 = expand_dims(%p295, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
    %1599 = expand_dims(%1598, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
    add(%1597, %1599) /* ty=Tensor[(1, 3, 100, 100), float32] */
  };
  %1601 = (%x372, %model.rpn.head.cls_logits.weight, %model.rpn.head.cls_logits.bias);
  %1602 = (%tensor_0290,);
  let %v290: () = vm.invoke_tvm_op(%1600, %1601, %1602) /* ty=() */;
  let %x384: Tensor[(1, 3, 100, 100), float32] = %tensor_0290;
  let %storage_0308: Storage[] = memory.alloc_storage(30000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][308]) /* ty=Storage[] */;
  let %tensor_0291: Tensor[(1, 3, 50, 50), float32] = memory.alloc_tensor(%storage_0308, 0 /* ty=int64 */, meta[relay.Constant][371] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][308]) /* ty=Tensor[(1, 3, 50, 50), float32] */;
  %1606 = fn (%p0289: Tensor[(1, 256, 50, 50), float32], %p1219: Tensor[(3, 256, 1, 1), float32], %p296: Tensor[(3), float32], Primitive=1) -> Tensor[(1, 3, 50, 50), float32] {
    %1603 = nn.conv2d(%p0289, %p1219, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]) /* ty=Tensor[(1, 3, 50, 50), float32] */;
    %1604 = expand_dims(%p296, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
    %1605 = expand_dims(%1604, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
    add(%1603, %1605) /* ty=Tensor[(1, 3, 50, 50), float32] */
  };
  %1607 = (%x375, %model.rpn.head.cls_logits.weight, %model.rpn.head.cls_logits.bias);
  %1608 = (%tensor_0291,);
  let %v291: () = vm.invoke_tvm_op(%1606, %1607, %1608) /* ty=() */;
  let %x385: Tensor[(1, 3, 50, 50), float32] = %tensor_0291;
  let %storage_0309: Storage[] = memory.alloc_storage(7500 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][309]) /* ty=Storage[] */;
  let %tensor_0292: Tensor[(1, 3, 25, 25), float32] = memory.alloc_tensor(%storage_0309, 0 /* ty=int64 */, meta[relay.Constant][372] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][309]) /* ty=Tensor[(1, 3, 25, 25), float32] */;
  %1612 = fn (%p0290: Tensor[(1, 256, 25, 25), float32], %p1220: Tensor[(3, 256, 1, 1), float32], %p297: Tensor[(3), float32], Primitive=1) -> Tensor[(1, 3, 25, 25), float32] {
    %1609 = nn.conv2d(%p0290, %p1220, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]) /* ty=Tensor[(1, 3, 25, 25), float32] */;
    %1610 = expand_dims(%p297, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
    %1611 = expand_dims(%1610, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
    add(%1609, %1611) /* ty=Tensor[(1, 3, 25, 25), float32] */
  };
  %1613 = (%x378, %model.rpn.head.cls_logits.weight, %model.rpn.head.cls_logits.bias);
  %1614 = (%tensor_0292,);
  let %v292: () = vm.invoke_tvm_op(%1612, %1613, %1614) /* ty=() */;
  let %x386: Tensor[(1, 3, 25, 25), float32] = %tensor_0292;
  let %storage_0310: Storage[] = memory.alloc_storage(2028 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][310]) /* ty=Storage[] */;
  let %tensor_0293: Tensor[(1, 3, 13, 13), float32] = memory.alloc_tensor(%storage_0310, 0 /* ty=int64 */, meta[relay.Constant][373] /* ty=Tensor[(4), int64] */, meta[relay.attrs.AllocTensorAttrs][310]) /* ty=Tensor[(1, 3, 13, 13), float32] */;
  %1618 = fn (%p0291: Tensor[(1, 256, 13, 13), float32], %p1221: Tensor[(3, 256, 1, 1), float32], %p298: Tensor[(3), float32], Primitive=1) -> Tensor[(1, 3, 13, 13), float32] {
    %1615 = nn.conv2d(%p0291, %p1221, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]) /* ty=Tensor[(1, 3, 13, 13), float32] */;
    %1616 = expand_dims(%p298, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
    %1617 = expand_dims(%1616, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
    add(%1615, %1617) /* ty=Tensor[(1, 3, 13, 13), float32] */
  };
  %1619 = (%x381, %model.rpn.head.cls_logits.weight, %model.rpn.head.cls_logits.bias);
  %1620 = (%tensor_0293,);
  let %v293: () = vm.invoke_tvm_op(%1618, %1619, %1620) /* ty=() */;
  let %x387: Tensor[(1, 3, 13, 13), float32] = %tensor_0293;
  let %storage_0311: Storage[] = memory.alloc_storage(639528 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][311]) /* ty=Storage[] */;
  let %tensor_0294: Tensor[(1, 159882), float32] = memory.alloc_tensor(%storage_0311, 0 /* ty=int64 */, meta[relay.Constant][374] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][311]) /* ty=Tensor[(1, 159882), float32] */;
  %1640 = fn (%p0292: Tensor[(1, 3, 200, 200), float32], %p1222: Tensor[(1, 3, 100, 100), float32], %p299: Tensor[(1, 3, 50, 50), float32], %p364: Tensor[(1, 3, 25, 25), float32], %p453: Tensor[(1, 3, 13, 13), float32], Primitive=1) -> Tensor[(1, 159882), float32] {
    %1621 = reshape(%p0292, newshape=[1, -1, 1, 200, 200]) /* ty=Tensor[(1, 3, 1, 200, 200), float32] */;
    %1622 = transpose(%1621, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 1), float32] */;
    %1623 = reshape(%1622, newshape=[1, -1, 1]) /* ty=Tensor[(1, 120000, 1), float32] */;
    %1624 = reshape(%p1222, newshape=[1, -1, 1, 100, 100]) /* ty=Tensor[(1, 3, 1, 100, 100), float32] */;
    %1625 = transpose(%1624, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 1), float32] */;
    %1626 = reshape(%1625, newshape=[1, -1, 1]) /* ty=Tensor[(1, 30000, 1), float32] */;
    %1627 = reshape(%p299, newshape=[1, -1, 1, 50, 50]) /* ty=Tensor[(1, 3, 1, 50, 50), float32] */;
    %1628 = transpose(%1627, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 1), float32] */;
    %1629 = reshape(%1628, newshape=[1, -1, 1]) /* ty=Tensor[(1, 7500, 1), float32] */;
    %1630 = reshape(%p364, newshape=[1, -1, 1, 25, 25]) /* ty=Tensor[(1, 3, 1, 25, 25), float32] */;
    %1631 = transpose(%1630, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 1), float32] */;
    %1632 = reshape(%1631, newshape=[1, -1, 1]) /* ty=Tensor[(1, 1875, 1), float32] */;
    %1633 = reshape(%p453, newshape=[1, -1, 1, 13, 13]) /* ty=Tensor[(1, 3, 1, 13, 13), float32] */;
    %1634 = transpose(%1633, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 1), float32] */;
    %1635 = reshape(%1634, newshape=[1, -1, 1]) /* ty=Tensor[(1, 507, 1), float32] */;
    %1636 = (%1623, %1626, %1629, %1632, %1635);
    %1637 = concatenate(%1636, axis=1) /* ty=Tensor[(1, 159882, 1), float32] */;
    %1638 = reshape(%1637, newshape=[-1, 1, 0]) /* ty=Tensor[(159882, 1, 1), float32] */;
    %1639 = squeeze(%1638, axis=[1]) /* ty=Tensor[(159882, 1), float32] */;
    reshape(%1639, newshape=[1, -1]) /* ty=Tensor[(1, 159882), float32] */
  };
  %1641 = (%x383, %x384, %x385, %x386, %x387);
  %1642 = (%tensor_0294,);
  let %v294: () = vm.invoke_tvm_op(%1640, %1641, %1642) /* ty=() */;
  let %x388: Tensor[(1, 159882), float32] = %tensor_0294;
  let %storage_0312: Storage[] = memory.alloc_storage(480000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][312]) /* ty=Storage[] */;
  let %tensor_0295: Tensor[(1, 120000), float32] = memory.alloc_tensor(%storage_0312, 0 /* ty=int64 */, meta[relay.Constant][375] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][312]) /* ty=Tensor[(1, 120000), float32] */;
  let %storage_1: Storage[] = memory.alloc_storage(120000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][313]) /* ty=Storage[] */;
  let %tensor_1: Tensor[(1, 30000), float32] = memory.alloc_tensor(%storage_1, 0 /* ty=int64 */, meta[relay.Constant][376] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][313]) /* ty=Tensor[(1, 30000), float32] */;
  let %storage_2: Storage[] = memory.alloc_storage(30000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][314]) /* ty=Storage[] */;
  let %tensor_2: Tensor[(1, 7500), float32] = memory.alloc_tensor(%storage_2, 0 /* ty=int64 */, meta[relay.Constant][377] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][314]) /* ty=Tensor[(1, 7500), float32] */;
  let %storage_3: Storage[] = memory.alloc_storage(7500 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][315]) /* ty=Storage[] */;
  let %tensor_3: Tensor[(1, 1875), float32] = memory.alloc_tensor(%storage_3, 0 /* ty=int64 */, meta[relay.Constant][378] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][315]) /* ty=Tensor[(1, 1875), float32] */;
  let %storage_4: Storage[] = memory.alloc_storage(2028 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][316]) /* ty=Storage[] */;
  let %tensor_4: Tensor[(1, 507), float32] = memory.alloc_tensor(%storage_4, 0 /* ty=int64 */, meta[relay.Constant][379] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][316]) /* ty=Tensor[(1, 507), float32] */;
  %1643 = fn (%p0293: Tensor[(1, 159882), float32], Primitive=1) -> (Tensor[(1, 120000), float32], Tensor[(1, 30000), float32], Tensor[(1, 7500), float32], Tensor[(1, 1875), float32], Tensor[(1, 507), float32]) {
    split(%p0293, indices_or_sections=[120000, 150000, 157500, 159375], axis=1) /* ty=(Tensor[(1, 120000), float32], Tensor[(1, 30000), float32], Tensor[(1, 7500), float32], Tensor[(1, 1875), float32], Tensor[(1, 507), float32]) */
  };
  %1644 = (%x388,);
  %1645 = (%tensor_0295, %tensor_1, %tensor_2, %tensor_3, %tensor_4);
  let %v295: () = vm.invoke_tvm_op(%1643, %1644, %1645) /* ty=() */;
  let %x389: (Tensor[(1, 120000), float32], Tensor[(1, 30000), float32], Tensor[(1, 7500), float32], Tensor[(1, 1875), float32], Tensor[(1, 507), float32]) = (%tensor_0295, %tensor_1, %tensor_2, %tensor_3, %tensor_4);
  let %x390: Tensor[(1, 120000), float32] = %x389.0;
  let %storage_0313: Storage[] = memory.alloc_storage(4000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][317]) /* ty=Storage[] */;
  let %tensor_0296: Tensor[(1, 1000), float32] = memory.alloc_tensor(%storage_0313, 0 /* ty=int64 */, meta[relay.Constant][380] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][317]) /* ty=Tensor[(1, 1000), float32] */;
  let %storage_11: Storage[] = memory.alloc_storage(8000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][318]) /* ty=Storage[] */;
  let %tensor_11: Tensor[(1, 1000), int64] = memory.alloc_tensor(%storage_11, 0 /* ty=int64 */, meta[relay.Constant][381] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][318]) /* ty=Tensor[(1, 1000), int64] */;
  %1646 = fn (%p0294: Tensor[(1, 120000), float32], Primitive=1) -> (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) {
    topk(%p0294, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */
  };
  %1647 = (%x390,);
  %1648 = (%tensor_0296, %tensor_11);
  let %v296: () = vm.invoke_tvm_op(%1646, %1647, %1648) /* ty=() */;
  let %x391: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) = (%tensor_0296, %tensor_11);
  let %x392: Tensor[(1, 30000), float32] = %x389.1;
  let %storage_0314: Storage[] = memory.alloc_storage(4000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][319]) /* ty=Storage[] */;
  let %tensor_0297: Tensor[(1, 1000), float32] = memory.alloc_tensor(%storage_0314, 0 /* ty=int64 */, meta[relay.Constant][382] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][319]) /* ty=Tensor[(1, 1000), float32] */;
  let %storage_12: Storage[] = memory.alloc_storage(8000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][320]) /* ty=Storage[] */;
  let %tensor_12: Tensor[(1, 1000), int64] = memory.alloc_tensor(%storage_12, 0 /* ty=int64 */, meta[relay.Constant][383] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][320]) /* ty=Tensor[(1, 1000), int64] */;
  %1649 = fn (%p0295: Tensor[(1, 30000), float32], Primitive=1) -> (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) {
    topk(%p0295, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */
  };
  %1650 = (%x392,);
  %1651 = (%tensor_0297, %tensor_12);
  let %v297: () = vm.invoke_tvm_op(%1649, %1650, %1651) /* ty=() */;
  let %x393: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) = (%tensor_0297, %tensor_12);
  let %x394: Tensor[(1, 7500), float32] = %x389.2;
  let %storage_0315: Storage[] = memory.alloc_storage(4000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][321]) /* ty=Storage[] */;
  let %tensor_0298: Tensor[(1, 1000), float32] = memory.alloc_tensor(%storage_0315, 0 /* ty=int64 */, meta[relay.Constant][384] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][321]) /* ty=Tensor[(1, 1000), float32] */;
  let %storage_13: Storage[] = memory.alloc_storage(8000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][322]) /* ty=Storage[] */;
  let %tensor_13: Tensor[(1, 1000), int64] = memory.alloc_tensor(%storage_13, 0 /* ty=int64 */, meta[relay.Constant][385] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][322]) /* ty=Tensor[(1, 1000), int64] */;
  %1652 = fn (%p0296: Tensor[(1, 7500), float32], Primitive=1) -> (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) {
    topk(%p0296, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */
  };
  %1653 = (%x394,);
  %1654 = (%tensor_0298, %tensor_13);
  let %v298: () = vm.invoke_tvm_op(%1652, %1653, %1654) /* ty=() */;
  let %x395: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) = (%tensor_0298, %tensor_13);
  let %x396: Tensor[(1, 1875), float32] = %x389.3;
  let %storage_0316: Storage[] = memory.alloc_storage(4000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][323]) /* ty=Storage[] */;
  let %tensor_0299: Tensor[(1, 1000), float32] = memory.alloc_tensor(%storage_0316, 0 /* ty=int64 */, meta[relay.Constant][386] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][323]) /* ty=Tensor[(1, 1000), float32] */;
  let %storage_14: Storage[] = memory.alloc_storage(8000 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][324]) /* ty=Storage[] */;
  let %tensor_14: Tensor[(1, 1000), int64] = memory.alloc_tensor(%storage_14, 0 /* ty=int64 */, meta[relay.Constant][387] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][324]) /* ty=Tensor[(1, 1000), int64] */;
  %1655 = fn (%p0297: Tensor[(1, 1875), float32], Primitive=1) -> (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) {
    topk(%p0297, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */
  };
  %1656 = (%x396,);
  %1657 = (%tensor_0299, %tensor_14);
  let %v299: () = vm.invoke_tvm_op(%1655, %1656, %1657) /* ty=() */;
  let %x397: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) = (%tensor_0299, %tensor_14);
  let %x398: Tensor[(1, 507), float32] = %x389.4;
  let %storage_0317: Storage[] = memory.alloc_storage(2028 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][325]) /* ty=Storage[] */;
  let %tensor_0300: Tensor[(1, 507), float32] = memory.alloc_tensor(%storage_0317, 0 /* ty=int64 */, meta[relay.Constant][388] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][325]) /* ty=Tensor[(1, 507), float32] */;
  let %storage_15: Storage[] = memory.alloc_storage(4056 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][326]) /* ty=Storage[] */;
  let %tensor_15: Tensor[(1, 507), int64] = memory.alloc_tensor(%storage_15, 0 /* ty=int64 */, meta[relay.Constant][389] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][326]) /* ty=Tensor[(1, 507), int64] */;
  %1658 = fn (%p0298: Tensor[(1, 507), float32], Primitive=1) -> (Tensor[(1, 507), float32], Tensor[(1, 507), int64]) {
    topk(%p0298, k=507, axis=1, dtype="int64") /* ty=(Tensor[(1, 507), float32], Tensor[(1, 507), int64]) */
  };
  %1659 = (%x398,);
  %1660 = (%tensor_0300, %tensor_15);
  let %v300: () = vm.invoke_tvm_op(%1658, %1659, %1660) /* ty=() */;
  let %x399: (Tensor[(1, 507), float32], Tensor[(1, 507), int64]) = (%tensor_0300, %tensor_15);
  let %storage_0318: Storage[] = memory.alloc_storage(36056 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][327]) /* ty=Storage[] */;
  let %tensor_0301: Tensor[(1, 4507), int64] = memory.alloc_tensor(%storage_0318, 0 /* ty=int64 */, meta[relay.Constant][390] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][327]) /* ty=Tensor[(1, 4507), int64] */;
  %1672 = fn (%p0299: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]), %p1223: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]), %p2100: Tensor[(1), int64], %p365: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]), %p454: Tensor[(1), int64], %p516: (Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]), %p6: Tensor[(1), int64], %p7: (Tensor[(1, 507), float32], Tensor[(1, 507), int64]), %p8: Tensor[(1), int64], Primitive=1) -> Tensor[(1, 4507), int64] {
    %1661 = %p0299.1;
    %1662 = add(%1661, 0 /* ty=int64 */) /* ty=Tensor[(1, 1000), int64] */;
    %1663 = %p1223.1;
    %1664 = add(%1663, %p2100) /* ty=Tensor[(1, 1000), int64] */;
    %1665 = %p365.1;
    %1666 = add(%1665, %p454) /* ty=Tensor[(1, 1000), int64] */;
    %1667 = %p516.1;
    %1668 = add(%1667, %p6) /* ty=Tensor[(1, 1000), int64] */;
    %1669 = %p7.1;
    %1670 = add(%1669, %p8) /* ty=Tensor[(1, 507), int64] */;
    %1671 = (%1662, %1664, %1666, %1668, %1670);
    concatenate(%1671, axis=1) /* ty=Tensor[(1, 4507), int64] */
  };
  %1673 = (%x391, %x393, meta[relay.Constant][391] /* ty=Tensor[(1), int64] */, %x395, meta[relay.Constant][392] /* ty=Tensor[(1), int64] */, %x397, meta[relay.Constant][393] /* ty=Tensor[(1), int64] */, %x399, meta[relay.Constant][394] /* ty=Tensor[(1), int64] */);
  %1674 = (%tensor_0301,);
  let %v301: () = vm.invoke_tvm_op(%1672, %1673, %1674) /* ty=() */;
  let %x400: Tensor[(1, 4507), int64] = %tensor_0301;
  let %storage_0319: Storage[] = memory.alloc_storage(72112 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][328]) /* ty=Storage[] */;
  let %tensor_0302: Tensor[(4507, 4), float32] = memory.alloc_tensor(%storage_0319, 0 /* ty=int64 */, meta[relay.Constant][395] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][328]) /* ty=Tensor[(4507, 4), float32] */;
  %1736 = fn (%p0300: Tensor[(1, 12, 200, 200), float32], %p1224: Tensor[(1, 12, 100, 100), float32], %p2101: Tensor[(1, 12, 50, 50), float32], %p366: Tensor[(1, 12, 25, 25), float32], %p455: Tensor[(1, 12, 13, 13), float32], %p517: Tensor[(159882, 1), float32], %p61: Tensor[(159882, 1), float32], %p71: Tensor[(159882, 1), float32], %p81: Tensor[(159882, 1), float32], %p9: Tensor[(1, 1), int64], %p10: Tensor[(1, 4507), int64], %p11100: float32, %p1225: float32, Primitive=1) -> Tensor[(4507, 4), float32] {
    %1675 = reshape(%p0300, newshape=[1, -1, 4, 200, 200]) /* ty=Tensor[(1, 3, 4, 200, 200), float32] */;
    %1676 = transpose(%1675, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 4), float32] */;
    %1677 = reshape(%1676, newshape=[1, -1, 4]) /* ty=Tensor[(1, 120000, 4), float32] */;
    %1678 = reshape(%p1224, newshape=[1, -1, 4, 100, 100]) /* ty=Tensor[(1, 3, 4, 100, 100), float32] */;
    %1679 = transpose(%1678, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 4), float32] */;
    %1680 = reshape(%1679, newshape=[1, -1, 4]) /* ty=Tensor[(1, 30000, 4), float32] */;
    %1681 = reshape(%p2101, newshape=[1, -1, 4, 50, 50]) /* ty=Tensor[(1, 3, 4, 50, 50), float32] */;
    %1682 = transpose(%1681, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 4), float32] */;
    %1683 = reshape(%1682, newshape=[1, -1, 4]) /* ty=Tensor[(1, 7500, 4), float32] */;
    %1684 = reshape(%p366, newshape=[1, -1, 4, 25, 25]) /* ty=Tensor[(1, 3, 4, 25, 25), float32] */;
    %1685 = transpose(%1684, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 4), float32] */;
    %1686 = reshape(%1685, newshape=[1, -1, 4]) /* ty=Tensor[(1, 1875, 4), float32] */;
    %1687 = reshape(%p455, newshape=[1, -1, 4, 13, 13]) /* ty=Tensor[(1, 3, 4, 13, 13), float32] */;
    %1688 = transpose(%1687, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 4), float32] */;
    %1689 = reshape(%1688, newshape=[1, -1, 4]) /* ty=Tensor[(1, 507, 4), float32] */;
    %1690 = (%1677, %1680, %1683, %1686, %1689);
    %1691 = concatenate(%1690, axis=1) /* ty=Tensor[(1, 159882, 4), float32] */;
    %1692 = reshape(%1691, newshape=[159882, 4]) /* ty=Tensor[(159882, 4), float32] */;
    %1693 = strided_slice(%1692, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
    %1694 = strided_slice(%1693, begin=[0, 0], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
    %1695 = divide(%1694, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
    %1696 = multiply(%1695, %p517) /* ty=Tensor[(159882, 1), float32] */;
    %1697 = add(%1696, %p61) /* ty=Tensor[(159882, 1), float32] */;
    %1698 = strided_slice(%1693, begin=[0, 2], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
    %1699 = divide(%1698, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
    %1700 = clip(%1699, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float32] */;
    %1701 = exp(%1700) /* ty=Tensor[(159882, 1), float32] */;
    %1702 = multiply(%1701, %p517) /* ty=Tensor[(159882, 1), float32] */;
    %1703 = multiply(0.5f /* ty=float32 */, %1702) /* ty=Tensor[(159882, 1), float32] */;
    %1704 = subtract(%1697, %1703) /* ty=Tensor[(159882, 1), float32] */;
    %1705 = strided_slice(%1693, begin=[0, 1], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
    %1706 = divide(%1705, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
    %1707 = multiply(%1706, %p71) /* ty=Tensor[(159882, 1), float32] */;
    %1708 = add(%1707, %p81) /* ty=Tensor[(159882, 1), float32] */;
    %1709 = strided_slice(%1693, begin=[0, 3], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
    %1710 = divide(%1709, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
    %1711 = clip(%1710, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float32] */;
    %1712 = exp(%1711) /* ty=Tensor[(159882, 1), float32] */;
    %1713 = multiply(%1712, %p71) /* ty=Tensor[(159882, 1), float32] */;
    %1714 = multiply(0.5f /* ty=float32 */, %1713) /* ty=Tensor[(159882, 1), float32] */;
    %1715 = subtract(%1708, %1714) /* ty=Tensor[(159882, 1), float32] */;
    %1716 = add(%1697, %1703) /* ty=Tensor[(159882, 1), float32] */;
    %1717 = add(%1708, %1714) /* ty=Tensor[(159882, 1), float32] */;
    %1718 = (%1704, %1715, %1716, %1717);
    %1719 = stack(%1718, axis=2) /* ty=Tensor[(159882, 1, 4), float32] */;
    %1720 = reshape(%1719, newshape=[0, -1, 1]) /* ty=Tensor[(159882, 4, 1), float32] */;
    %1721 = squeeze(%1720, axis=[2]) /* ty=Tensor[(159882, 4), float32] */;
    %1722 = reshape(%1721, newshape=[1, 159882, 4]) /* ty=Tensor[(1, 159882, 4), float32] */;
    %1723 = (%1722, %p9, %p10);
    %1724 = adv_index(%1723) /* ty=Tensor[(1, 4507, 4), float32] */;
    %1725 = split(%1724, indices_or_sections=1) /* ty=(Tensor[(1, 4507, 4), float32],) */;
    %1726 = %1725.0;
    %1727 = squeeze(%1726, axis=[0]) /* ty=Tensor[(4507, 4), float32] */;
    %1728 = strided_slice(%1727, begin=[0, 0], end=[4507, 4], strides=[1, 2]) /* ty=Tensor[(4507, 2), float32] */;
    %1729 = maximum(%1728, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
    %1730 = minimum(%1729, %p11100) /* ty=Tensor[(4507, 2), float32] */;
    %1731 = strided_slice(%1727, begin=[0, 1], end=[4507, 4], strides=[1, 2]) /* ty=Tensor[(4507, 2), float32] */;
    %1732 = maximum(%1731, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
    %1733 = minimum(%1732, %p1225) /* ty=Tensor[(4507, 2), float32] */;
    %1734 = (%1730, %1733);
    %1735 = stack(%1734, axis=2) /* ty=Tensor[(4507, 2, 2), float32] */;
    reshape(%1735, newshape=[4507, 4]) /* ty=Tensor[(4507, 4), float32] */
  };
  %1737 = (%x370, %x373, %x376, %x379, %x382, meta[relay.Constant][396] /* ty=Tensor[(159882, 1), float32] */, meta[relay.Constant][397] /* ty=Tensor[(159882, 1), float32] */, meta[relay.Constant][398] /* ty=Tensor[(159882, 1), float32] */, meta[relay.Constant][399] /* ty=Tensor[(159882, 1), float32] */, meta[relay.Constant][400] /* ty=Tensor[(1, 1), int64] */, %x400, 800f /* ty=float32 */, 800f /* ty=float32 */);
  %1738 = (%tensor_0302,);
  let %v302: () = vm.invoke_tvm_op(%1736, %1737, %1738) /* ty=() */;
  let %x401: Tensor[(4507, 4), float32] = %tensor_0302;
  let %storage_0320: Storage[] = memory.alloc_storage(4507 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][329]) /* ty=Storage[] */;
  let %tensor_0303: Tensor[(4507), bool] = memory.alloc_tensor(%storage_0320, 0 /* ty=int64 */, meta[relay.Constant][401] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][329]) /* ty=Tensor[(4507), bool] */;
  %1750 = fn (%p0301: Tensor[(4507, 4), float32], Primitive=1) -> Tensor[(4507), bool] {
    %1739 = strided_slice(%p0301, begin=[0, 0], end=[4507, 4], strides=[1, 1]) /* ty=Tensor[(4507, 4), float32] */;
    %1740 = take(%1739, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(4507), float32] */;
    %1741 = take(%1739, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(4507), float32] */;
    %1742 = subtract(%1740, %1741) /* ty=Tensor[(4507), float32] */;
    %1743 = greater_equal(%1742, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
    %1744 = cast(%1743, dtype="bool") /* ty=Tensor[(4507), bool] */;
    %1745 = take(%1739, 3 /* ty=int32 */, axis=1) /* ty=Tensor[(4507), float32] */;
    %1746 = take(%1739, 1 /* ty=int32 */, axis=1) /* ty=Tensor[(4507), float32] */;
    %1747 = subtract(%1745, %1746) /* ty=Tensor[(4507), float32] */;
    %1748 = greater_equal(%1747, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
    %1749 = cast(%1748, dtype="bool") /* ty=Tensor[(4507), bool] */;
    logical_and(%1744, %1749) /* ty=Tensor[(4507), bool] */
  };
  %1751 = (%x401,);
  %1752 = (%tensor_0303,);
  let %v303: () = vm.invoke_tvm_op(%1750, %1751, %1752) /* ty=() */;
  let %x402: Tensor[(4507), bool] = %tensor_0303;
  let %in_shape_017: Tensor[(4507), bool] = device_copy(%x402, meta[relay.attrs.DeviceCopyAttrs][28]) /* ty=Tensor[(4507), bool] */;
  let %storage_0321: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][330]) /* ty=Storage[] */;
  let %tensor_0304: Tensor[(2), int64] = memory.alloc_tensor(%storage_0321, 0 /* ty=int64 */, meta[relay.Constant][402] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][330]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_017: Tensor[(2), int64] = %tensor_0304;
  %1753 = fn (%p0302: Tensor[(4507), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0302) /* ty=Tensor[(?, 1), int32] */
  };
  %1754 = (%in_shape_017,);
  %1755 = (%shape_func_out_017,);
  let %shape_func17: () = vm.shape_func(%1753, %1754, %1755, meta[relay.attrs.ShapeFuncAttrs][17]) /* ty=() */;
  let %storage_0322: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][331]) /* ty=Storage[] */;
  let %tensor_0305: int64 = memory.alloc_tensor(%storage_0322, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][331]) /* ty=int64 */;
  %1756 = fn (%p0303: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0303) /* ty=int64 */
  };
  %1757 = (%shape_func_out_017,);
  %1758 = (%tensor_0305,);
  let %v304: () = vm.invoke_tvm_op(%1756, %1757, %1758) /* ty=() */;
  let %storage_0323: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][332]) /* ty=Storage[] */;
  let %tensor_0306: int64 = memory.alloc_tensor(%storage_0323, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][332]) /* ty=int64 */;
  %1759 = fn (%p0304: int64, Primitive=1) -> int64 {
    multiply(%p0304, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1760 = (%tensor_0305,);
  %1761 = (%tensor_0306,);
  let %v305: () = vm.invoke_tvm_op(%1759, %1760, %1761) /* ty=() */;
  let %storage_0324: Storage[] = memory.alloc_storage(%tensor_0306, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][333]) /* ty=Storage[] */;
  let %out_017: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0324, 0 /* ty=int64 */, %shape_func_out_017, meta[relay.attrs.AllocTensorAttrs][333]) /* ty=Tensor[(?, 1), int32] */;
  %1762 = (%x402,);
  %1763 = (%out_017,);
  let %v306: () = vm.invoke_tvm_op(%1753, %1762, %1763) /* ty=() */;
  let %x403: Tensor[(?, 1), int32] = %out_017;
  let %in_shape_018: Tensor[(2), int64] = vm.shape_of(%x403, meta[relay.attrs.ShapeOfAttrs][16]) /* ty=Tensor[(2), int64] */;
  let %storage_0325: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][334]) /* ty=Storage[] */;
  let %tensor_0307: Tensor[(1), int64] = memory.alloc_tensor(%storage_0325, 0 /* ty=int64 */, meta[relay.Constant][403] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][334]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_018: Tensor[(1), int64] = %tensor_0307;
  %1767 = fn (%p0305: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int64] {
    %1764 = split(%p0305, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %1765 = %1764.0;
    %1766 = squeeze(%1765, axis=[1]) /* ty=Tensor[(?), int32] */;
    cast(%1766, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %1768 = (%in_shape_018,);
  %1769 = (%shape_func_out_018,);
  let %shape_func18: () = vm.shape_func(%1767, %1768, %1769, meta[relay.attrs.ShapeFuncAttrs][18]) /* ty=() */;
  let %storage_0326: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][335]) /* ty=Storage[] */;
  let %tensor_0308: int64 = memory.alloc_tensor(%storage_0326, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][335]) /* ty=int64 */;
  %1770 = fn (%p0306: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0306) /* ty=int64 */
  };
  %1771 = (%shape_func_out_018,);
  %1772 = (%tensor_0308,);
  let %v307: () = vm.invoke_tvm_op(%1770, %1771, %1772) /* ty=() */;
  let %storage_0327: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][336]) /* ty=Storage[] */;
  let %tensor_0309: int64 = memory.alloc_tensor(%storage_0327, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][336]) /* ty=int64 */;
  %1773 = fn (%p0307: int64, Primitive=1) -> int64 {
    multiply(%p0307, 8 /* ty=int64 */) /* ty=int64 */
  };
  %1774 = (%tensor_0308,);
  %1775 = (%tensor_0309,);
  let %v308: () = vm.invoke_tvm_op(%1773, %1774, %1775) /* ty=() */;
  let %storage_0328: Storage[] = memory.alloc_storage(%tensor_0309, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][337]) /* ty=Storage[] */;
  let %out_018: Tensor[(?), int64] = memory.alloc_tensor(%storage_0328, 0 /* ty=int64 */, %shape_func_out_018, meta[relay.attrs.AllocTensorAttrs][337]) /* ty=Tensor[(?), int64] */;
  %1776 = (%x403,);
  %1777 = (%out_018,);
  let %v309: () = vm.invoke_tvm_op(%1767, %1776, %1777) /* ty=() */;
  let %x404: Tensor[(?), int64] = %out_018;
  let %in_shape_113: Tensor[(1), int64] = vm.shape_of(%x404, meta[relay.attrs.ShapeOfAttrs][17]) /* ty=Tensor[(1), int64] */;
  let %storage_0329: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][338]) /* ty=Storage[] */;
  let %tensor_0310: Tensor[(2), int64] = memory.alloc_tensor(%storage_0329, 0 /* ty=int64 */, meta[relay.Constant][404] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][338]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_019: Tensor[(2), int64] = %tensor_0310;
  %1779 = fn (%p0308: Tensor[(4507, 4), float32], %p1226: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 4), float32] {
    %1778 = (%p0308, %p1226);
    adv_index(%1778) /* ty=Tensor[(?, 4), float32] */
  };
  %1780 = (meta[relay.Constant][405] /* ty=Tensor[(2), int64] */, %in_shape_113);
  %1781 = (%shape_func_out_019,);
  let %shape_func19: () = vm.shape_func(%1779, %1780, %1781, meta[relay.attrs.ShapeFuncAttrs][19]) /* ty=() */;
  let %storage_0330: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][339]) /* ty=Storage[] */;
  let %tensor_0311: int64 = memory.alloc_tensor(%storage_0330, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][339]) /* ty=int64 */;
  %1782 = fn (%p0309: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0309) /* ty=int64 */
  };
  %1783 = (%shape_func_out_019,);
  %1784 = (%tensor_0311,);
  let %v310: () = vm.invoke_tvm_op(%1782, %1783, %1784) /* ty=() */;
  let %storage_0331: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][340]) /* ty=Storage[] */;
  let %tensor_0312: int64 = memory.alloc_tensor(%storage_0331, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][340]) /* ty=int64 */;
  %1785 = fn (%p0310: int64, Primitive=1) -> int64 {
    multiply(%p0310, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1786 = (%tensor_0311,);
  %1787 = (%tensor_0312,);
  let %v311: () = vm.invoke_tvm_op(%1785, %1786, %1787) /* ty=() */;
  let %storage_0332: Storage[] = memory.alloc_storage(%tensor_0312, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][341]) /* ty=Storage[] */;
  let %out_019: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0332, 0 /* ty=int64 */, %shape_func_out_019, meta[relay.attrs.AllocTensorAttrs][341]) /* ty=Tensor[(?, 4), float32] */;
  %1788 = (%x401, %x404);
  %1789 = (%out_019,);
  let %v312: () = vm.invoke_tvm_op(%1779, %1788, %1789) /* ty=() */;
  let %x405: Tensor[(?, 4), float32] = %out_019;
  let %storage_0333: Storage[] = memory.alloc_storage(1 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][342]) /* ty=Storage[] */;
  let %tensor_0313: bool = memory.alloc_tensor(%storage_0333, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][342]) /* ty=bool */;
  %1791 = fn (%p0311: Tensor[(?, 4), float32], Primitive=1) -> bool {
    %1790 = ndarray_size(%p0311, dtype="int32") /* ty=int32 */;
    equal(%1790, 0 /* ty=int32 */) /* ty=bool */
  };
  %1792 = (%x405,);
  %1793 = (%tensor_0313,);
  let %v313: () = vm.invoke_tvm_op(%1791, %1792, %1793) /* ty=() */;
  let %x406: bool = %tensor_0313;
  let %x407: Tensor[(?), int64] = if (%x406) {
    let %storage_0334: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][343]) /* ty=Storage[] */;
    let %tensor_0314: Tensor[(1), int64] = memory.alloc_tensor(%storage_0334, 0 /* ty=int64 */, meta[relay.Constant][406] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][343]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_020: Tensor[(1), int64] = %tensor_0314;
    %1794 = fn (Primitive=1) -> Tensor[(?), int64] {
      zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
    };
    %1795 = ();
    %1796 = (%shape_func_out_020,);
    let %shape_func20: () = vm.shape_func(%1794, %1795, %1796, meta[relay.attrs.ShapeFuncAttrs][20]) /* ty=() */;
    let %storage_0335: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][344]) /* ty=Storage[] */;
    let %tensor_0315: int64 = memory.alloc_tensor(%storage_0335, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][344]) /* ty=int64 */;
    %1797 = fn (%p0312: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0312) /* ty=int64 */
    };
    %1798 = (%shape_func_out_020,);
    %1799 = (%tensor_0315,);
    let %v314: () = vm.invoke_tvm_op(%1797, %1798, %1799) /* ty=() */;
    let %storage_0336: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][345]) /* ty=Storage[] */;
    let %tensor_0316: int64 = memory.alloc_tensor(%storage_0336, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][345]) /* ty=int64 */;
    %1800 = fn (%p0313: int64, Primitive=1) -> int64 {
      multiply(%p0313, 8 /* ty=int64 */) /* ty=int64 */
    };
    %1801 = (%tensor_0315,);
    %1802 = (%tensor_0316,);
    let %v315: () = vm.invoke_tvm_op(%1800, %1801, %1802) /* ty=() */;
    let %storage_0337: Storage[] = memory.alloc_storage(%tensor_0316, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][346]) /* ty=Storage[] */;
    let %out_020: Tensor[(?), int64] = memory.alloc_tensor(%storage_0337, 0 /* ty=int64 */, %shape_func_out_020, meta[relay.attrs.AllocTensorAttrs][346]) /* ty=Tensor[(?), int64] */;
    %1803 = ();
    %1804 = (%out_020,);
    let %v316: () = vm.invoke_tvm_op(%1794, %1803, %1804) /* ty=() */;
    let %x408: Tensor[(?), int64] = %out_020;
    %x408
  } else {
    let %in_shape_36: Tensor[(1), int64] = vm.shape_of(%x404, meta[relay.attrs.ShapeOfAttrs][18]) /* ty=Tensor[(1), int64] */;
    let %storage_0338: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][347]) /* ty=Storage[] */;
    let %tensor_0317: Tensor[(1), int64] = memory.alloc_tensor(%storage_0338, 0 /* ty=int64 */, meta[relay.Constant][407] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][347]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_021: Tensor[(1), int64] = %tensor_0317;
    %1811 = fn (%p0314: Tensor[(1, 159882), float32], %p1227: Tensor[(1, 1), int64], %p2102: Tensor[(1, 4507), int64], %p367: Tensor[(?), int64], Primitive=1) -> Tensor[(?), float32] {
      %1805 = (%p0314, %p1227, %p2102);
      %1806 = adv_index(%1805) /* ty=Tensor[(1, 4507), float32] */;
      %1807 = split(%1806, indices_or_sections=1) /* ty=(Tensor[(1, 4507), float32],) */;
      %1808 = %1807.0;
      %1809 = squeeze(%1808, axis=[0]) /* ty=Tensor[(4507), float32] */;
      %1810 = (%1809, %p367);
      adv_index(%1810) /* ty=Tensor[(?), float32] */
    };
    %1812 = (meta[relay.Constant][408] /* ty=Tensor[(2), int64] */, meta[relay.Constant][409] /* ty=Tensor[(2), int64] */, meta[relay.Constant][410] /* ty=Tensor[(2), int64] */, %in_shape_36);
    %1813 = (%shape_func_out_021,);
    let %shape_func21: () = vm.shape_func(%1811, %1812, %1813, meta[relay.attrs.ShapeFuncAttrs][21]) /* ty=() */;
    let %storage_0339: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][348]) /* ty=Storage[] */;
    let %tensor_0318: int64 = memory.alloc_tensor(%storage_0339, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][348]) /* ty=int64 */;
    %1814 = fn (%p0315: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0315) /* ty=int64 */
    };
    %1815 = (%shape_func_out_021,);
    %1816 = (%tensor_0318,);
    let %v317: () = vm.invoke_tvm_op(%1814, %1815, %1816) /* ty=() */;
    let %storage_0340: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][349]) /* ty=Storage[] */;
    let %tensor_0319: int64 = memory.alloc_tensor(%storage_0340, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][349]) /* ty=int64 */;
    %1817 = fn (%p0316: int64, Primitive=1) -> int64 {
      multiply(%p0316, 4 /* ty=int64 */) /* ty=int64 */
    };
    %1818 = (%tensor_0318,);
    %1819 = (%tensor_0319,);
    let %v318: () = vm.invoke_tvm_op(%1817, %1818, %1819) /* ty=() */;
    let %storage_0341: Storage[] = memory.alloc_storage(%tensor_0319, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][350]) /* ty=Storage[] */;
    let %out_021: Tensor[(?), float32] = memory.alloc_tensor(%storage_0341, 0 /* ty=int64 */, %shape_func_out_021, meta[relay.attrs.AllocTensorAttrs][350]) /* ty=Tensor[(?), float32] */;
    %1820 = (%x388, meta[relay.Constant][400] /* ty=Tensor[(1, 1), int64] */, %x400, %x404);
    %1821 = (%out_021,);
    let %v319: () = vm.invoke_tvm_op(%1811, %1820, %1821) /* ty=() */;
    let %x409: Tensor[(?), float32] = %out_021;
    let %storage_0342: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][351]) /* ty=Storage[] */;
    let %tensor_0320: float32 = memory.alloc_tensor(%storage_0342, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][351]) /* ty=float32 */;
    %1822 = fn (%p0317: Tensor[(?), float32], Primitive=1) -> float32 {
      min(%p0317) /* ty=float32 */
    };
    %1823 = (%x409,);
    %1824 = (%tensor_0320,);
    let %v320: () = vm.invoke_tvm_op(%1822, %1823, %1824) /* ty=() */;
    let %x410: float32 = %tensor_0320;
    let %in_shape_019: Tensor[(1), int64] = vm.shape_of(%x409, meta[relay.attrs.ShapeOfAttrs][19]) /* ty=Tensor[(1), int64] */;
    let %storage_0343: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][352]) /* ty=Storage[] */;
    let %tensor_0321: Tensor[(1), int64] = memory.alloc_tensor(%storage_0343, 0 /* ty=int64 */, meta[relay.Constant][411] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][352]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_022: Tensor[(1), int64] = %tensor_0321;
    %1826 = fn (%p0318: Tensor[(?), float32], %p1228: float32, Primitive=1) -> Tensor[(?), float32] {
      %1825 = subtract(%p0318, %p1228) /* ty=Tensor[(?), float32] */;
      add(%1825, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */
    };
    %1827 = (%in_shape_019, 1554978544 /* ty=int64 */);
    %1828 = (%shape_func_out_022,);
    let %shape_func22: () = vm.shape_func(%1826, %1827, %1828, meta[relay.attrs.ShapeFuncAttrs][22]) /* ty=() */;
    let %storage_0344: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][353]) /* ty=Storage[] */;
    let %tensor_0322: int64 = memory.alloc_tensor(%storage_0344, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][353]) /* ty=int64 */;
    %1829 = fn (%p0319: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0319) /* ty=int64 */
    };
    %1830 = (%shape_func_out_022,);
    %1831 = (%tensor_0322,);
    let %v321: () = vm.invoke_tvm_op(%1829, %1830, %1831) /* ty=() */;
    let %storage_0345: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][354]) /* ty=Storage[] */;
    let %tensor_0323: int64 = memory.alloc_tensor(%storage_0345, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][354]) /* ty=int64 */;
    %1832 = fn (%p0320: int64, Primitive=1) -> int64 {
      multiply(%p0320, 4 /* ty=int64 */) /* ty=int64 */
    };
    %1833 = (%tensor_0322,);
    %1834 = (%tensor_0323,);
    let %v322: () = vm.invoke_tvm_op(%1832, %1833, %1834) /* ty=() */;
    let %storage_0346: Storage[] = memory.alloc_storage(%tensor_0323, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][355]) /* ty=Storage[] */;
    let %out_022: Tensor[(?), float32] = memory.alloc_tensor(%storage_0346, 0 /* ty=int64 */, %shape_func_out_022, meta[relay.attrs.AllocTensorAttrs][355]) /* ty=Tensor[(?), float32] */;
    %1835 = (%x409, %x410);
    %1836 = (%out_022,);
    let %v323: () = vm.invoke_tvm_op(%1826, %1835, %1836) /* ty=() */;
    let %x411: Tensor[(?), float32] = %out_022;
    let %in_shape_37: Tensor[(1), int64] = vm.shape_of(%x404, meta[relay.attrs.ShapeOfAttrs][20]) /* ty=Tensor[(1), int64] */;
    let %in_shape_4: Tensor[(1), int64] = vm.shape_of(%x411, meta[relay.attrs.ShapeOfAttrs][21]) /* ty=Tensor[(1), int64] */;
    let %in_shape_5: Tensor[(2), int64] = vm.shape_of(%x405, meta[relay.attrs.ShapeOfAttrs][22]) /* ty=Tensor[(2), int64] */;
    let %storage_0347: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][356]) /* ty=Storage[] */;
    let %tensor_0324: Tensor[(3), int64] = memory.alloc_tensor(%storage_0347, 0 /* ty=int64 */, meta[relay.Constant][412] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][356]) /* ty=Tensor[(3), int64] */;
    let %shape_func_out_023: Tensor[(3), int64] = %tensor_0324;
    %1859 = fn (%p0321: Tensor[(1, 159882), float32], %p1229: Tensor[(1, 1), int64], %p2103: Tensor[(1, 4507), int64], %p368: Tensor[(?), int64], %p456: Tensor[(?), float32], %p518: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(1, ?, 6), float32] {
      %1837 = full(0 /* ty=int32 */, shape=[120000], dtype="int64") /* ty=Tensor[(120000), int64] */;
      %1838 = full(1 /* ty=int32 */, shape=[30000], dtype="int64") /* ty=Tensor[(30000), int64] */;
      %1839 = full(2 /* ty=int32 */, shape=[7500], dtype="int64") /* ty=Tensor[(7500), int64] */;
      %1840 = full(3 /* ty=int32 */, shape=[1875], dtype="int64") /* ty=Tensor[(1875), int64] */;
      %1841 = full(4 /* ty=int32 */, shape=[507], dtype="int64") /* ty=Tensor[(507), int64] */;
      %1842 = (%1837, %1838, %1839, %1840, %1841);
      %1843 = concatenate(%1842) /* ty=Tensor[(159882), int64] */;
      %1844 = reshape(%1843, newshape=[1, -1]) /* ty=Tensor[(1, 159882), int64] */;
      %1845 = cast(%p0321, dtype="int64") /* ty=Tensor[(1, 159882), int64] */;
      %1846 = broadcast_to_like(%1844, %1845) /* ty=Tensor[(1, 159882), int64] */;
      %1847 = (%1846, %p1229, %p2103);
      %1848 = adv_index(%1847) /* ty=Tensor[(1, 4507), int64] */;
      %1849 = split(%1848, indices_or_sections=1) /* ty=(Tensor[(1, 4507), int64],) */;
      %1850 = %1849.0;
      %1851 = squeeze(%1850, axis=[0]) /* ty=Tensor[(4507), int64] */;
      %1852 = (%1851, %p368);
      %1853 = adv_index(%1852) /* ty=Tensor[(?), int64] */;
      %1854 = expand_dims(%1853, axis=-1) /* ty=Tensor[(?, 1), int64] */;
      %1855 = cast(%1854, dtype="float32") /* ty=Tensor[(?, 1), float32] */;
      %1856 = expand_dims(%p456, axis=-1) /* ty=Tensor[(?, 1), float32] */;
      %1857 = (%1855, %1856, %p518);
      %1858 = concatenate(%1857, axis=-1) /* ty=Tensor[(?, 6), float32] */;
      expand_dims(%1858, axis=0) /* ty=Tensor[(1, ?, 6), float32] */
    };
    %1860 = (meta[relay.Constant][413] /* ty=Tensor[(2), int64] */, meta[relay.Constant][414] /* ty=Tensor[(2), int64] */, meta[relay.Constant][415] /* ty=Tensor[(2), int64] */, %in_shape_37, %in_shape_4, %in_shape_5);
    %1861 = (%shape_func_out_023,);
    let %shape_func23: () = vm.shape_func(%1859, %1860, %1861, meta[relay.attrs.ShapeFuncAttrs][23]) /* ty=() */;
    let %storage_0348: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][357]) /* ty=Storage[] */;
    let %tensor_0325: int64 = memory.alloc_tensor(%storage_0348, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][357]) /* ty=int64 */;
    %1862 = fn (%p0322: Tensor[(3), int64], Primitive=1) -> int64 {
      prod(%p0322) /* ty=int64 */
    };
    %1863 = (%shape_func_out_023,);
    %1864 = (%tensor_0325,);
    let %v324: () = vm.invoke_tvm_op(%1862, %1863, %1864) /* ty=() */;
    let %storage_0349: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][358]) /* ty=Storage[] */;
    let %tensor_0326: int64 = memory.alloc_tensor(%storage_0349, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][358]) /* ty=int64 */;
    %1865 = fn (%p0323: int64, Primitive=1) -> int64 {
      multiply(%p0323, 4 /* ty=int64 */) /* ty=int64 */
    };
    %1866 = (%tensor_0325,);
    %1867 = (%tensor_0326,);
    let %v325: () = vm.invoke_tvm_op(%1865, %1866, %1867) /* ty=() */;
    let %storage_0350: Storage[] = memory.alloc_storage(%tensor_0326, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][359]) /* ty=Storage[] */;
    let %out_023: Tensor[(1, ?, 6), float32] = memory.alloc_tensor(%storage_0350, 0 /* ty=int64 */, %shape_func_out_023, meta[relay.attrs.AllocTensorAttrs][359]) /* ty=Tensor[(1, ?, 6), float32] */;
    %1868 = (%x388, meta[relay.Constant][400] /* ty=Tensor[(1, 1), int64] */, %x400, %x404, %x411, %x405);
    %1869 = (%out_023,);
    let %v326: () = vm.invoke_tvm_op(%1859, %1868, %1869) /* ty=() */;
    let %x412: Tensor[(1, ?, 6), float32] = %out_023;
    let %storage_0351: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][360]) /* ty=Storage[] */;
    let %tensor_0327: Tensor[(1), int32] = memory.alloc_tensor(%storage_0351, 0 /* ty=int64 */, meta[relay.Constant][416] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][360]) /* ty=Tensor[(1), int32] */;
    %1870 = fn (%p0324: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
      shape_of(%p0324, dtype="int32") /* ty=Tensor[(1), int32] */
    };
    %1871 = (%x411,);
    %1872 = (%tensor_0327,);
    let %v327: () = vm.invoke_tvm_op(%1870, %1871, %1872) /* ty=() */;
    let %x413: Tensor[(1), int32] = %tensor_0327;
    let %storage_0352: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][361]) /* ty=Storage[] */;
    let %tensor_0328: int32 = memory.alloc_tensor(%storage_0352, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][361]) /* ty=int32 */;
    %1873 = fn (%p0325: Tensor[(1), int32], Primitive=1) -> int32 {
      squeeze(%p0325) /* ty=int32 */
    };
    %1874 = (%x413,);
    %1875 = (%tensor_0328,);
    let %v328: () = vm.invoke_tvm_op(%1873, %1874, %1875) /* ty=() */;
    let %x414: int32 = %tensor_0328;
    let %in_shape_020: int32 = device_copy(0 /* ty=int32 */, meta[relay.attrs.DeviceCopyAttrs][29]) /* ty=int32 */;
    let %in_shape_114: int32 = device_copy(%x414, meta[relay.attrs.DeviceCopyAttrs][30]) /* ty=int32 */;
    let %in_shape_28: int32 = device_copy(1 /* ty=int32 */, meta[relay.attrs.DeviceCopyAttrs][31]) /* ty=int32 */;
    let %storage_0353: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][362]) /* ty=Storage[] */;
    let %tensor_0329: Tensor[(1), int64] = memory.alloc_tensor(%storage_0353, 0 /* ty=int64 */, meta[relay.Constant][417] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][362]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_024: Tensor[(1), int64] = %tensor_0329;
    %1876 = fn (%p0326: int32, %p1230: int32, %p2104: int32, Primitive=1) -> Tensor[(?), int32] {
      arange(%p0326, %p1230, %p2104, start=meta[relay.Constant][418], stop=meta[relay.Call][0], step=meta[relay.Constant][419], dtype="int32") /* ty=Tensor[(?), int32] */
    };
    %1877 = (%in_shape_020, %in_shape_114, %in_shape_28);
    %1878 = (%shape_func_out_024,);
    let %shape_func24: () = vm.shape_func(%1876, %1877, %1878, meta[relay.attrs.ShapeFuncAttrs][24]) /* ty=() */;
    let %storage_0354: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][363]) /* ty=Storage[] */;
    let %tensor_0330: int64 = memory.alloc_tensor(%storage_0354, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][363]) /* ty=int64 */;
    %1879 = fn (%p0327: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0327) /* ty=int64 */
    };
    %1880 = (%shape_func_out_024,);
    %1881 = (%tensor_0330,);
    let %v329: () = vm.invoke_tvm_op(%1879, %1880, %1881) /* ty=() */;
    let %storage_0355: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][364]) /* ty=Storage[] */;
    let %tensor_0331: int64 = memory.alloc_tensor(%storage_0355, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][364]) /* ty=int64 */;
    %1882 = fn (%p0328: int64, Primitive=1) -> int64 {
      multiply(%p0328, 4 /* ty=int64 */) /* ty=int64 */
    };
    %1883 = (%tensor_0330,);
    %1884 = (%tensor_0331,);
    let %v330: () = vm.invoke_tvm_op(%1882, %1883, %1884) /* ty=() */;
    let %storage_0356: Storage[] = memory.alloc_storage(%tensor_0331, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][365]) /* ty=Storage[] */;
    let %out_024: Tensor[(?), int32] = memory.alloc_tensor(%storage_0356, 0 /* ty=int64 */, %shape_func_out_024, meta[relay.attrs.AllocTensorAttrs][365]) /* ty=Tensor[(?), int32] */;
    %1885 = (0 /* ty=int32 */, %x414, 1 /* ty=int32 */);
    %1886 = (%out_024,);
    let %v331: () = vm.invoke_tvm_op(%1876, %1885, %1886) /* ty=() */;
    let %x415: Tensor[(?), int32] = %out_024;
    let %in_shape_021: Tensor[(1), int64] = vm.shape_of(%x415, meta[relay.attrs.ShapeOfAttrs][23]) /* ty=Tensor[(1), int64] */;
    let %storage_0357: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][366]) /* ty=Storage[] */;
    let %tensor_0332: Tensor[(2), int64] = memory.alloc_tensor(%storage_0357, 0 /* ty=int64 */, meta[relay.Constant][420] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][366]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_025: Tensor[(2), int64] = %tensor_0332;
    %1887 = fn (%p0329: Tensor[(?), int32], Primitive=1) -> Tensor[(1, ?), int32] {
      expand_dims(%p0329, axis=0) /* ty=Tensor[(1, ?), int32] */
    };
    %1888 = (%in_shape_021,);
    %1889 = (%shape_func_out_025,);
    let %shape_func25: () = vm.shape_func(%1887, %1888, %1889, meta[relay.attrs.ShapeFuncAttrs][25]) /* ty=() */;
    let %storage_0358: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][367]) /* ty=Storage[] */;
    let %tensor_0333: int64 = memory.alloc_tensor(%storage_0358, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][367]) /* ty=int64 */;
    %1890 = fn (%p0330: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0330) /* ty=int64 */
    };
    %1891 = (%shape_func_out_025,);
    %1892 = (%tensor_0333,);
    let %v332: () = vm.invoke_tvm_op(%1890, %1891, %1892) /* ty=() */;
    let %storage_0359: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][368]) /* ty=Storage[] */;
    let %tensor_0334: int64 = memory.alloc_tensor(%storage_0359, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][368]) /* ty=int64 */;
    %1893 = fn (%p0331: int64, Primitive=1) -> int64 {
      multiply(%p0331, 4 /* ty=int64 */) /* ty=int64 */
    };
    %1894 = (%tensor_0333,);
    %1895 = (%tensor_0334,);
    let %v333: () = vm.invoke_tvm_op(%1893, %1894, %1895) /* ty=() */;
    let %storage_0360: Storage[] = memory.alloc_storage(%tensor_0334, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][369]) /* ty=Storage[] */;
    let %out_025: Tensor[(1, ?), int32] = memory.alloc_tensor(%storage_0360, 0 /* ty=int64 */, %shape_func_out_025, meta[relay.attrs.AllocTensorAttrs][369]) /* ty=Tensor[(1, ?), int32] */;
    %1896 = (%x415,);
    %1897 = (%out_025,);
    let %v334: () = vm.invoke_tvm_op(%1887, %1896, %1897) /* ty=() */;
    let %x416: Tensor[(1, ?), int32] = %out_025;
    let %in_shape_022: Tensor[(3), int64] = vm.shape_of(%x412, meta[relay.attrs.ShapeOfAttrs][24]) /* ty=Tensor[(3), int64] */;
    let %in_shape_29: Tensor[(2), int64] = vm.shape_of(%x416, meta[relay.attrs.ShapeOfAttrs][25]) /* ty=Tensor[(2), int64] */;
    let %storage_0361: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][370]) /* ty=Storage[] */;
    let %tensor_0335: Tensor[(2), int64] = memory.alloc_tensor(%storage_0361, 0 /* ty=int64 */, meta[relay.Constant][421] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][370]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_026: Tensor[(2), int64] = %tensor_0335;
    let %storage_16: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][371]) /* ty=Storage[] */;
    let %tensor_16: Tensor[(2), int64] = memory.alloc_tensor(%storage_16, 0 /* ty=int64 */, meta[relay.Constant][422] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][371]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_1: Tensor[(2), int64] = %tensor_16;
    %1898 = fn (%p0332: Tensor[(1, ?, 6), float32], %p1231: Tensor[(1), int32], %p2105: Tensor[(1, ?), int32], %p369: int32, %p457: float32, Primitive=1) -> (Tensor[(1, ?), int32], Tensor[(1, 1), int32]) {
      vision.non_max_suppression(%p0332, %p1231, %p2105, %p369, %p457, meta[relay.attrs.NonMaximumSuppressionAttrs][0]) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */
    };
    %1899 = (%in_shape_022, meta[relay.Constant][423] /* ty=Tensor[(1), int64] */, %in_shape_29, 1065353216 /* ty=int64 */, 1 /* ty=int64 */);
    %1900 = (%shape_func_out_026, %shape_func_out_1);
    let %shape_func26: () = vm.shape_func(%1898, %1899, %1900, meta[relay.attrs.ShapeFuncAttrs][26]) /* ty=() */;
    let %storage_0362: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][372]) /* ty=Storage[] */;
    let %tensor_0336: int64 = memory.alloc_tensor(%storage_0362, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][372]) /* ty=int64 */;
    %1901 = fn (%p0333: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0333) /* ty=int64 */
    };
    %1902 = (%shape_func_out_026,);
    %1903 = (%tensor_0336,);
    let %v335: () = vm.invoke_tvm_op(%1901, %1902, %1903) /* ty=() */;
    let %storage_0363: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][373]) /* ty=Storage[] */;
    let %tensor_0337: int64 = memory.alloc_tensor(%storage_0363, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][373]) /* ty=int64 */;
    %1904 = fn (%p0334: int64, Primitive=1) -> int64 {
      multiply(%p0334, 4 /* ty=int64 */) /* ty=int64 */
    };
    %1905 = (%tensor_0336,);
    %1906 = (%tensor_0337,);
    let %v336: () = vm.invoke_tvm_op(%1904, %1905, %1906) /* ty=() */;
    let %storage_0364: Storage[] = memory.alloc_storage(%tensor_0337, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][374]) /* ty=Storage[] */;
    let %storage_0365: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][375]) /* ty=Storage[] */;
    let %tensor_0338: int64 = memory.alloc_tensor(%storage_0365, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][374]) /* ty=int64 */;
    %1907 = fn (%p0335: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0335) /* ty=int64 */
    };
    %1908 = (%shape_func_out_1,);
    %1909 = (%tensor_0338,);
    let %v337: () = vm.invoke_tvm_op(%1907, %1908, %1909) /* ty=() */;
    let %storage_0366: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][376]) /* ty=Storage[] */;
    let %tensor_0339: int64 = memory.alloc_tensor(%storage_0366, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][375]) /* ty=int64 */;
    %1910 = fn (%p0336: int64, Primitive=1) -> int64 {
      multiply(%p0336, 4 /* ty=int64 */) /* ty=int64 */
    };
    %1911 = (%tensor_0338,);
    %1912 = (%tensor_0339,);
    let %v338: () = vm.invoke_tvm_op(%1910, %1911, %1912) /* ty=() */;
    let %storage_17: Storage[] = memory.alloc_storage(%tensor_0339, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][377]) /* ty=Storage[] */;
    let %out_026: Tensor[(1, ?), int32] = memory.alloc_tensor(%storage_0364, 0 /* ty=int64 */, %shape_func_out_026, meta[relay.attrs.AllocTensorAttrs][376]) /* ty=Tensor[(1, ?), int32] */;
    let %out_1: Tensor[(1, 1), int32] = memory.alloc_tensor(%storage_17, 0 /* ty=int64 */, %shape_func_out_1, meta[relay.attrs.AllocTensorAttrs][377]) /* ty=Tensor[(1, 1), int32] */;
    %1913 = (%x412, %x413, %x416, 1000 /* ty=int32 */, 0.7f /* ty=float32 */);
    %1914 = (%out_026, %out_1);
    let %v339: () = vm.invoke_tvm_op(%1898, %1913, %1914) /* ty=() */;
    let %x417: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]) = (%out_026, %out_1);
    %1915 = %x417.0;
    let %in_shape_023: Tensor[(2), int64] = vm.shape_of(%1915, meta[relay.attrs.ShapeOfAttrs][26]) /* ty=Tensor[(2), int64] */;
    let %storage_0367: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][378]) /* ty=Storage[] */;
    let %tensor_0340: Tensor[(1), int64] = memory.alloc_tensor(%storage_0367, 0 /* ty=int64 */, meta[relay.Constant][424] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][378]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_027: Tensor[(1), int64] = %tensor_0340;
    %1917 = fn (%p0337: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]), Primitive=1) -> Tensor[(?), int32] {
      %1916 = %p0337.0;
      squeeze(%1916, axis=[0]) /* ty=Tensor[(?), int32] */
    };
    %1918 = (%in_shape_023, meta[relay.Constant][425] /* ty=Tensor[(2), int64] */);
    %1919 = (%shape_func_out_027,);
    let %shape_func27: () = vm.shape_func(%1917, %1918, %1919, meta[relay.attrs.ShapeFuncAttrs][27]) /* ty=() */;
    let %storage_0368: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][379]) /* ty=Storage[] */;
    let %tensor_0341: int64 = memory.alloc_tensor(%storage_0368, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][379]) /* ty=int64 */;
    %1920 = fn (%p0338: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0338) /* ty=int64 */
    };
    %1921 = (%shape_func_out_027,);
    %1922 = (%tensor_0341,);
    let %v340: () = vm.invoke_tvm_op(%1920, %1921, %1922) /* ty=() */;
    let %storage_0369: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][380]) /* ty=Storage[] */;
    let %tensor_0342: int64 = memory.alloc_tensor(%storage_0369, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][380]) /* ty=int64 */;
    %1923 = fn (%p0339: int64, Primitive=1) -> int64 {
      multiply(%p0339, 4 /* ty=int64 */) /* ty=int64 */
    };
    %1924 = (%tensor_0341,);
    %1925 = (%tensor_0342,);
    let %v341: () = vm.invoke_tvm_op(%1923, %1924, %1925) /* ty=() */;
    let %storage_0370: Storage[] = memory.alloc_storage(%tensor_0342, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][381]) /* ty=Storage[] */;
    let %out_027: Tensor[(?), int32] = memory.alloc_tensor(%storage_0370, 0 /* ty=int64 */, %shape_func_out_027, meta[relay.attrs.AllocTensorAttrs][381]) /* ty=Tensor[(?), int32] */;
    %1926 = (%x417,);
    %1927 = (%out_027,);
    let %v342: () = vm.invoke_tvm_op(%1917, %1926, %1927) /* ty=() */;
    let %x418: Tensor[(?), int32] = %out_027;
    let %storage_0371: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][382]) /* ty=Storage[] */;
    let %tensor_0343: Tensor[(1), int32] = memory.alloc_tensor(%storage_0371, 0 /* ty=int64 */, meta[relay.Constant][426] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][382]) /* ty=Tensor[(1), int32] */;
    %1928 = fn (%p0340: Tensor[(?), int32], Primitive=1) -> Tensor[(1), int32] {
      shape_of(%p0340, dtype="int32") /* ty=Tensor[(1), int32] */
    };
    %1929 = (%x418,);
    %1930 = (%tensor_0343,);
    let %v343: () = vm.invoke_tvm_op(%1928, %1929, %1930) /* ty=() */;
    let %x419: Tensor[(1), int32] = %tensor_0343;
    let %storage_0372: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][383]) /* ty=Storage[] */;
    let %tensor_0344: Tensor[(1), int32] = memory.alloc_tensor(%storage_0372, 0 /* ty=int64 */, meta[relay.Constant][427] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][383]) /* ty=Tensor[(1), int32] */;
    %1933 = fn (%p0341: Tensor[(1), bool], %p1232: Tensor[(1), int32], %p2106: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int32] {
      %1931 = cast_like(%p2106, %p1232) /* ty=Tensor[(1), int32] */;
      %1932 = add(%p1232, %1931) /* ty=Tensor[(1), int32] */;
      where(%p0341, %1932, %p1232) /* ty=Tensor[(1), int32] */
    };
    %1934 = (meta[relay.Constant][428] /* ty=Tensor[(1), bool] */, meta[relay.Constant][429] /* ty=Tensor[(1), int32] */, %x419);
    %1935 = (%tensor_0344,);
    let %v344: () = vm.invoke_tvm_op(%1933, %1934, %1935) /* ty=() */;
    let %x420: Tensor[(1), int32] = %tensor_0344;
    let %storage_0373: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][384]) /* ty=Storage[] */;
    let %tensor_0345: Tensor[(1), int32] = memory.alloc_tensor(%storage_0373, 0 /* ty=int64 */, meta[relay.Constant][430] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][384]) /* ty=Tensor[(1), int32] */;
    %1937 = fn (%p0342: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]), Primitive=1) -> Tensor[(1), int32] {
      %1936 = %p0342.1;
      squeeze(%1936, axis=[1]) /* ty=Tensor[(1), int32] */
    };
    %1938 = (%x417,);
    %1939 = (%tensor_0345,);
    let %v345: () = vm.invoke_tvm_op(%1937, %1938, %1939) /* ty=() */;
    let %x421: Tensor[(1), int32] = %tensor_0345;
    let %in_shape_024: Tensor[(1), int64] = vm.shape_of(%x418, meta[relay.attrs.ShapeOfAttrs][27]) /* ty=Tensor[(1), int64] */;
    let %in_shape_115: Tensor[(1), int32] = device_copy(%x420, meta[relay.attrs.DeviceCopyAttrs][32]) /* ty=Tensor[(1), int32] */;
    let %in_shape_210: Tensor[(1), int32] = device_copy(%x421, meta[relay.attrs.DeviceCopyAttrs][33]) /* ty=Tensor[(1), int32] */;
    let %in_shape_38: Tensor[(1), int32] = device_copy(meta[relay.Constant][431] /* ty=Tensor[(1), int32] */, meta[relay.attrs.DeviceCopyAttrs][34]) /* ty=Tensor[(1), int32] */;
    let %storage_0374: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][385]) /* ty=Storage[] */;
    let %tensor_0346: Tensor[(1), int64] = memory.alloc_tensor(%storage_0374, 0 /* ty=int64 */, meta[relay.Constant][432] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][385]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_028: Tensor[(1), int64] = %tensor_0346;
    %1940 = fn (%p0343: Tensor[(?), int32], %p1233: Tensor[(1), int32], %p2107: Tensor[(1), int32], %p370: Tensor[(1), int32], Primitive=1) -> Tensor[(?), int32] {
      dyn.strided_slice(%p0343, %p1233, %p2107, %p370, begin=None, end=None, strides=None, slice_mode="size") /* ty=Tensor[(?), int32] */
    };
    %1941 = (%in_shape_024, %in_shape_115, %in_shape_210, %in_shape_38);
    %1942 = (%shape_func_out_028,);
    let %shape_func28: () = vm.shape_func(%1940, %1941, %1942, meta[relay.attrs.ShapeFuncAttrs][28]) /* ty=() */;
    let %storage_0375: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][386]) /* ty=Storage[] */;
    let %tensor_0347: int64 = memory.alloc_tensor(%storage_0375, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][386]) /* ty=int64 */;
    %1943 = fn (%p0344: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0344) /* ty=int64 */
    };
    %1944 = (%shape_func_out_028,);
    %1945 = (%tensor_0347,);
    let %v346: () = vm.invoke_tvm_op(%1943, %1944, %1945) /* ty=() */;
    let %storage_0376: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][387]) /* ty=Storage[] */;
    let %tensor_0348: int64 = memory.alloc_tensor(%storage_0376, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][387]) /* ty=int64 */;
    %1946 = fn (%p0345: int64, Primitive=1) -> int64 {
      multiply(%p0345, 4 /* ty=int64 */) /* ty=int64 */
    };
    %1947 = (%tensor_0347,);
    %1948 = (%tensor_0348,);
    let %v347: () = vm.invoke_tvm_op(%1946, %1947, %1948) /* ty=() */;
    let %storage_0377: Storage[] = memory.alloc_storage(%tensor_0348, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][388]) /* ty=Storage[] */;
    let %out_028: Tensor[(?), int32] = memory.alloc_tensor(%storage_0377, 0 /* ty=int64 */, %shape_func_out_028, meta[relay.attrs.AllocTensorAttrs][388]) /* ty=Tensor[(?), int32] */;
    %1949 = (%x418, %x420, %x421, meta[relay.Constant][431] /* ty=Tensor[(1), int32] */);
    %1950 = (%out_028,);
    let %v348: () = vm.invoke_tvm_op(%1940, %1949, %1950) /* ty=() */;
    let %x422: Tensor[(?), int32] = %out_028;
    let %in_shape_025: Tensor[(1), int64] = vm.shape_of(%x422, meta[relay.attrs.ShapeOfAttrs][28]) /* ty=Tensor[(1), int64] */;
    let %storage_0378: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][389]) /* ty=Storage[] */;
    let %tensor_0349: Tensor[(1), int64] = memory.alloc_tensor(%storage_0378, 0 /* ty=int64 */, meta[relay.Constant][433] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][389]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_029: Tensor[(1), int64] = %tensor_0349;
    %1951 = fn (%p0346: Tensor[(?), int32], Primitive=1) -> Tensor[(?), int64] {
      cast(%p0346, dtype="int64") /* ty=Tensor[(?), int64] */
    };
    %1952 = (%in_shape_025,);
    %1953 = (%shape_func_out_029,);
    let %shape_func29: () = vm.shape_func(%1951, %1952, %1953, meta[relay.attrs.ShapeFuncAttrs][29]) /* ty=() */;
    let %storage_0379: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][390]) /* ty=Storage[] */;
    let %tensor_0350: int64 = memory.alloc_tensor(%storage_0379, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][390]) /* ty=int64 */;
    %1954 = fn (%p0347: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0347) /* ty=int64 */
    };
    %1955 = (%shape_func_out_029,);
    %1956 = (%tensor_0350,);
    let %v349: () = vm.invoke_tvm_op(%1954, %1955, %1956) /* ty=() */;
    let %storage_0380: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][391]) /* ty=Storage[] */;
    let %tensor_0351: int64 = memory.alloc_tensor(%storage_0380, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][391]) /* ty=int64 */;
    %1957 = fn (%p0348: int64, Primitive=1) -> int64 {
      multiply(%p0348, 8 /* ty=int64 */) /* ty=int64 */
    };
    %1958 = (%tensor_0350,);
    %1959 = (%tensor_0351,);
    let %v350: () = vm.invoke_tvm_op(%1957, %1958, %1959) /* ty=() */;
    let %storage_0381: Storage[] = memory.alloc_storage(%tensor_0351, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][392]) /* ty=Storage[] */;
    let %out_029: Tensor[(?), int64] = memory.alloc_tensor(%storage_0381, 0 /* ty=int64 */, %shape_func_out_029, meta[relay.attrs.AllocTensorAttrs][392]) /* ty=Tensor[(?), int64] */;
    %1960 = (%x422,);
    %1961 = (%out_029,);
    let %v351: () = vm.invoke_tvm_op(%1951, %1960, %1961) /* ty=() */;
    let %x423: Tensor[(?), int64] = %out_029;
    %x423
  };
  let %in_shape_026: Tensor[(2), int64] = vm.shape_of(%x405, meta[relay.attrs.ShapeOfAttrs][29]) /* ty=Tensor[(2), int64] */;
  let %in_shape_116: Tensor[(1), int64] = vm.shape_of(%x407, meta[relay.attrs.ShapeOfAttrs][30]) /* ty=Tensor[(1), int64] */;
  let %storage_0382: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][393]) /* ty=Storage[] */;
  let %tensor_0352: Tensor[(2), int64] = memory.alloc_tensor(%storage_0382, 0 /* ty=int64 */, meta[relay.Constant][434] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][393]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_030: Tensor[(2), int64] = %tensor_0352;
  %1963 = fn (%p0349: Tensor[(?, 4), float32], %p1234: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 4), float32] {
    %1962 = (%p0349, %p1234);
    adv_index(%1962) /* ty=Tensor[(?, 4), float32] */
  };
  %1964 = (%in_shape_026, %in_shape_116);
  %1965 = (%shape_func_out_030,);
  let %shape_func30: () = vm.shape_func(%1963, %1964, %1965, meta[relay.attrs.ShapeFuncAttrs][30]) /* ty=() */;
  let %storage_0383: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][394]) /* ty=Storage[] */;
  let %tensor_0353: int64 = memory.alloc_tensor(%storage_0383, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][394]) /* ty=int64 */;
  %1966 = fn (%p0350: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0350) /* ty=int64 */
  };
  %1967 = (%shape_func_out_030,);
  %1968 = (%tensor_0353,);
  let %v352: () = vm.invoke_tvm_op(%1966, %1967, %1968) /* ty=() */;
  let %storage_0384: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][395]) /* ty=Storage[] */;
  let %tensor_0354: int64 = memory.alloc_tensor(%storage_0384, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][395]) /* ty=int64 */;
  %1969 = fn (%p0351: int64, Primitive=1) -> int64 {
    multiply(%p0351, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1970 = (%tensor_0353,);
  %1971 = (%tensor_0354,);
  let %v353: () = vm.invoke_tvm_op(%1969, %1970, %1971) /* ty=() */;
  let %storage_0385: Storage[] = memory.alloc_storage(%tensor_0354, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][396]) /* ty=Storage[] */;
  let %out_030: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0385, 0 /* ty=int64 */, %shape_func_out_030, meta[relay.attrs.AllocTensorAttrs][396]) /* ty=Tensor[(?, 4), float32] */;
  %1972 = (%x405, %x407);
  %1973 = (%out_030,);
  let %v354: () = vm.invoke_tvm_op(%1963, %1972, %1973) /* ty=() */;
  let %x424: Tensor[(?, 4), float32] = %out_030;
  let %storage_0386: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][397]) /* ty=Storage[] */;
  let %tensor_0355: Tensor[(2), int32] = memory.alloc_tensor(%storage_0386, 0 /* ty=int64 */, meta[relay.Constant][435] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][397]) /* ty=Tensor[(2), int32] */;
  %1974 = fn (%p0352: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0352, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %1975 = (%x424,);
  %1976 = (%tensor_0355,);
  let %v355: () = vm.invoke_tvm_op(%1974, %1975, %1976) /* ty=() */;
  let %x425: Tensor[(2), int32] = %tensor_0355;
  let %storage_0387: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][398]) /* ty=Storage[] */;
  let %tensor_0356: Tensor[(2), int32] = memory.alloc_tensor(%storage_0387, 0 /* ty=int64 */, meta[relay.Constant][436] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][398]) /* ty=Tensor[(2), int32] */;
  %1979 = fn (%p0353: Tensor[(2), bool], %p1235: Tensor[(2), int32], %p2108: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %1977 = cast_like(%p2108, %p1235) /* ty=Tensor[(2), int32] */;
    %1978 = add(%p1235, %1977) /* ty=Tensor[(2), int32] */;
    where(%p0353, %1978, %p1235) /* ty=Tensor[(2), int32] */
  };
  %1980 = (meta[relay.Constant][437] /* ty=Tensor[(2), bool] */, meta[relay.Constant][438] /* ty=Tensor[(2), int32] */, %x425);
  %1981 = (%tensor_0356,);
  let %v356: () = vm.invoke_tvm_op(%1979, %1980, %1981) /* ty=() */;
  let %x426: Tensor[(2), int32] = %tensor_0356;
  let %storage_0388: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][399]) /* ty=Storage[] */;
  let %tensor_0357: Tensor[(2), int64] = memory.alloc_tensor(%storage_0388, 0 /* ty=int64 */, meta[relay.Constant][439] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][399]) /* ty=Tensor[(2), int64] */;
  %1982 = fn (%p0354: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0354, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %1983 = (%x425,);
  %1984 = (%tensor_0357,);
  let %v357: () = vm.invoke_tvm_op(%1982, %1983, %1984) /* ty=() */;
  let %x427: Tensor[(2), int64] = %tensor_0357;
  let %in_shape_027: Tensor[(2), int64] = vm.shape_of(%x424, meta[relay.attrs.ShapeOfAttrs][31]) /* ty=Tensor[(2), int64] */;
  let %in_shape_117: Tensor[(2), int32] = device_copy(%x426, meta[relay.attrs.DeviceCopyAttrs][35]) /* ty=Tensor[(2), int32] */;
  let %in_shape_211: Tensor[(2), int64] = device_copy(%x427, meta[relay.attrs.DeviceCopyAttrs][36]) /* ty=Tensor[(2), int64] */;
  let %in_shape_39: Tensor[(2), int32] = device_copy(meta[relay.Constant][440] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][37]) /* ty=Tensor[(2), int32] */;
  let %storage_0389: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][400]) /* ty=Storage[] */;
  let %tensor_0358: Tensor[(2), int64] = memory.alloc_tensor(%storage_0389, 0 /* ty=int64 */, meta[relay.Constant][441] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][400]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_031: Tensor[(2), int64] = %tensor_0358;
  %1985 = fn (%p0355: Tensor[(?, 4), float32], %p1236: Tensor[(2), int32], %p2109: Tensor[(2), int64], %p371: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0355, %p1236, %p2109, %p371, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %1986 = (%in_shape_027, %in_shape_117, %in_shape_211, %in_shape_39);
  %1987 = (%shape_func_out_031,);
  let %shape_func31: () = vm.shape_func(%1985, %1986, %1987, meta[relay.attrs.ShapeFuncAttrs][31]) /* ty=() */;
  let %storage_0390: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][401]) /* ty=Storage[] */;
  let %tensor_0359: int64 = memory.alloc_tensor(%storage_0390, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][401]) /* ty=int64 */;
  %1988 = fn (%p0356: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0356) /* ty=int64 */
  };
  %1989 = (%shape_func_out_031,);
  %1990 = (%tensor_0359,);
  let %v358: () = vm.invoke_tvm_op(%1988, %1989, %1990) /* ty=() */;
  let %storage_0391: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][402]) /* ty=Storage[] */;
  let %tensor_0360: int64 = memory.alloc_tensor(%storage_0391, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][402]) /* ty=int64 */;
  %1991 = fn (%p0357: int64, Primitive=1) -> int64 {
    multiply(%p0357, 4 /* ty=int64 */) /* ty=int64 */
  };
  %1992 = (%tensor_0359,);
  %1993 = (%tensor_0360,);
  let %v359: () = vm.invoke_tvm_op(%1991, %1992, %1993) /* ty=() */;
  let %storage_0392: Storage[] = memory.alloc_storage(%tensor_0360, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][403]) /* ty=Storage[] */;
  let %out_031: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0392, 0 /* ty=int64 */, %shape_func_out_031, meta[relay.attrs.AllocTensorAttrs][403]) /* ty=Tensor[(?, ?), float32] */;
  %1994 = (%x424, %x426, %x427, meta[relay.Constant][440] /* ty=Tensor[(2), int32] */);
  %1995 = (%out_031,);
  let %v360: () = vm.invoke_tvm_op(%1985, %1994, %1995) /* ty=() */;
  let %x428: Tensor[(?, ?), float32] = %out_031;
  let %storage_0393: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][404]) /* ty=Storage[] */;
  let %tensor_0361: Tensor[(2), int32] = memory.alloc_tensor(%storage_0393, 0 /* ty=int64 */, meta[relay.Constant][442] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][404]) /* ty=Tensor[(2), int32] */;
  %1998 = fn (%p0358: Tensor[(2), bool], %p1237: Tensor[(2), int32], %p2110: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %1996 = cast_like(%p2110, %p1237) /* ty=Tensor[(2), int32] */;
    %1997 = add(%p1237, %1996) /* ty=Tensor[(2), int32] */;
    where(%p0358, %1997, %p1237) /* ty=Tensor[(2), int32] */
  };
  %1999 = (meta[relay.Constant][443] /* ty=Tensor[(2), bool] */, meta[relay.Constant][444] /* ty=Tensor[(2), int32] */, %x425);
  %2000 = (%tensor_0361,);
  let %v361: () = vm.invoke_tvm_op(%1998, %1999, %2000) /* ty=() */;
  let %x429: Tensor[(2), int32] = %tensor_0361;
  let %in_shape_028: Tensor[(2), int64] = vm.shape_of(%x424, meta[relay.attrs.ShapeOfAttrs][32]) /* ty=Tensor[(2), int64] */;
  let %in_shape_118: Tensor[(2), int32] = device_copy(%x429, meta[relay.attrs.DeviceCopyAttrs][38]) /* ty=Tensor[(2), int32] */;
  let %in_shape_212: Tensor[(2), int64] = device_copy(%x427, meta[relay.attrs.DeviceCopyAttrs][39]) /* ty=Tensor[(2), int64] */;
  let %in_shape_310: Tensor[(2), int32] = device_copy(meta[relay.Constant][445] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][40]) /* ty=Tensor[(2), int32] */;
  let %storage_0394: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][405]) /* ty=Storage[] */;
  let %tensor_0362: Tensor[(2), int64] = memory.alloc_tensor(%storage_0394, 0 /* ty=int64 */, meta[relay.Constant][446] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][405]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_032: Tensor[(2), int64] = %tensor_0362;
  %2001 = fn (%p0359: Tensor[(?, 4), float32], %p1238: Tensor[(2), int32], %p2111: Tensor[(2), int64], %p372: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0359, %p1238, %p2111, %p372, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2002 = (%in_shape_028, %in_shape_118, %in_shape_212, %in_shape_310);
  %2003 = (%shape_func_out_032,);
  let %shape_func32: () = vm.shape_func(%2001, %2002, %2003, meta[relay.attrs.ShapeFuncAttrs][32]) /* ty=() */;
  let %storage_0395: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][406]) /* ty=Storage[] */;
  let %tensor_0363: int64 = memory.alloc_tensor(%storage_0395, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][406]) /* ty=int64 */;
  %2004 = fn (%p0360: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0360) /* ty=int64 */
  };
  %2005 = (%shape_func_out_032,);
  %2006 = (%tensor_0363,);
  let %v362: () = vm.invoke_tvm_op(%2004, %2005, %2006) /* ty=() */;
  let %storage_0396: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][407]) /* ty=Storage[] */;
  let %tensor_0364: int64 = memory.alloc_tensor(%storage_0396, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][407]) /* ty=int64 */;
  %2007 = fn (%p0361: int64, Primitive=1) -> int64 {
    multiply(%p0361, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2008 = (%tensor_0363,);
  %2009 = (%tensor_0364,);
  let %v363: () = vm.invoke_tvm_op(%2007, %2008, %2009) /* ty=() */;
  let %storage_0397: Storage[] = memory.alloc_storage(%tensor_0364, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][408]) /* ty=Storage[] */;
  let %out_032: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0397, 0 /* ty=int64 */, %shape_func_out_032, meta[relay.attrs.AllocTensorAttrs][408]) /* ty=Tensor[(?, ?), float32] */;
  %2010 = (%x424, %x429, %x427, meta[relay.Constant][445] /* ty=Tensor[(2), int32] */);
  %2011 = (%out_032,);
  let %v364: () = vm.invoke_tvm_op(%2001, %2010, %2011) /* ty=() */;
  let %x430: Tensor[(?, ?), float32] = %out_032;
  let %storage_0398: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][409]) /* ty=Storage[] */;
  let %tensor_0365: Tensor[(2), int32] = memory.alloc_tensor(%storage_0398, 0 /* ty=int64 */, meta[relay.Constant][447] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][409]) /* ty=Tensor[(2), int32] */;
  %2014 = fn (%p0362: Tensor[(2), bool], %p1239: Tensor[(2), int32], %p2112: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2012 = cast_like(%p2112, %p1239) /* ty=Tensor[(2), int32] */;
    %2013 = add(%p1239, %2012) /* ty=Tensor[(2), int32] */;
    where(%p0362, %2013, %p1239) /* ty=Tensor[(2), int32] */
  };
  %2015 = (meta[relay.Constant][448] /* ty=Tensor[(2), bool] */, meta[relay.Constant][449] /* ty=Tensor[(2), int32] */, %x425);
  %2016 = (%tensor_0365,);
  let %v365: () = vm.invoke_tvm_op(%2014, %2015, %2016) /* ty=() */;
  let %x431: Tensor[(2), int32] = %tensor_0365;
  let %in_shape_029: Tensor[(2), int64] = vm.shape_of(%x424, meta[relay.attrs.ShapeOfAttrs][33]) /* ty=Tensor[(2), int64] */;
  let %in_shape_119: Tensor[(2), int32] = device_copy(%x431, meta[relay.attrs.DeviceCopyAttrs][41]) /* ty=Tensor[(2), int32] */;
  let %in_shape_213: Tensor[(2), int64] = device_copy(%x427, meta[relay.attrs.DeviceCopyAttrs][42]) /* ty=Tensor[(2), int64] */;
  let %in_shape_311: Tensor[(2), int32] = device_copy(meta[relay.Constant][450] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][43]) /* ty=Tensor[(2), int32] */;
  let %storage_0399: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][410]) /* ty=Storage[] */;
  let %tensor_0366: Tensor[(2), int64] = memory.alloc_tensor(%storage_0399, 0 /* ty=int64 */, meta[relay.Constant][451] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][410]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_033: Tensor[(2), int64] = %tensor_0366;
  %2017 = fn (%p0363: Tensor[(?, 4), float32], %p1240: Tensor[(2), int32], %p2113: Tensor[(2), int64], %p373: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0363, %p1240, %p2113, %p373, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2018 = (%in_shape_029, %in_shape_119, %in_shape_213, %in_shape_311);
  %2019 = (%shape_func_out_033,);
  let %shape_func33: () = vm.shape_func(%2017, %2018, %2019, meta[relay.attrs.ShapeFuncAttrs][33]) /* ty=() */;
  let %storage_0400: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][411]) /* ty=Storage[] */;
  let %tensor_0367: int64 = memory.alloc_tensor(%storage_0400, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][411]) /* ty=int64 */;
  %2020 = fn (%p0364: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0364) /* ty=int64 */
  };
  %2021 = (%shape_func_out_033,);
  %2022 = (%tensor_0367,);
  let %v366: () = vm.invoke_tvm_op(%2020, %2021, %2022) /* ty=() */;
  let %storage_0401: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][412]) /* ty=Storage[] */;
  let %tensor_0368: int64 = memory.alloc_tensor(%storage_0401, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][412]) /* ty=int64 */;
  %2023 = fn (%p0365: int64, Primitive=1) -> int64 {
    multiply(%p0365, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2024 = (%tensor_0367,);
  %2025 = (%tensor_0368,);
  let %v367: () = vm.invoke_tvm_op(%2023, %2024, %2025) /* ty=() */;
  let %storage_0402: Storage[] = memory.alloc_storage(%tensor_0368, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][413]) /* ty=Storage[] */;
  let %out_033: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0402, 0 /* ty=int64 */, %shape_func_out_033, meta[relay.attrs.AllocTensorAttrs][413]) /* ty=Tensor[(?, ?), float32] */;
  %2026 = (%x424, %x431, %x427, meta[relay.Constant][450] /* ty=Tensor[(2), int32] */);
  %2027 = (%out_033,);
  let %v368: () = vm.invoke_tvm_op(%2017, %2026, %2027) /* ty=() */;
  let %x432: Tensor[(?, ?), float32] = %out_033;
  let %storage_0403: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][414]) /* ty=Storage[] */;
  let %tensor_0369: Tensor[(2), int32] = memory.alloc_tensor(%storage_0403, 0 /* ty=int64 */, meta[relay.Constant][452] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][414]) /* ty=Tensor[(2), int32] */;
  %2030 = fn (%p0366: Tensor[(2), bool], %p1241: Tensor[(2), int32], %p2114: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2028 = cast_like(%p2114, %p1241) /* ty=Tensor[(2), int32] */;
    %2029 = add(%p1241, %2028) /* ty=Tensor[(2), int32] */;
    where(%p0366, %2029, %p1241) /* ty=Tensor[(2), int32] */
  };
  %2031 = (meta[relay.Constant][453] /* ty=Tensor[(2), bool] */, meta[relay.Constant][454] /* ty=Tensor[(2), int32] */, %x425);
  %2032 = (%tensor_0369,);
  let %v369: () = vm.invoke_tvm_op(%2030, %2031, %2032) /* ty=() */;
  let %x433: Tensor[(2), int32] = %tensor_0369;
  let %in_shape_030: Tensor[(2), int64] = vm.shape_of(%x424, meta[relay.attrs.ShapeOfAttrs][34]) /* ty=Tensor[(2), int64] */;
  let %in_shape_120: Tensor[(2), int32] = device_copy(%x433, meta[relay.attrs.DeviceCopyAttrs][44]) /* ty=Tensor[(2), int32] */;
  let %in_shape_214: Tensor[(2), int64] = device_copy(%x427, meta[relay.attrs.DeviceCopyAttrs][45]) /* ty=Tensor[(2), int64] */;
  let %in_shape_312: Tensor[(2), int32] = device_copy(meta[relay.Constant][455] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][46]) /* ty=Tensor[(2), int32] */;
  let %storage_0404: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][415]) /* ty=Storage[] */;
  let %tensor_0370: Tensor[(2), int64] = memory.alloc_tensor(%storage_0404, 0 /* ty=int64 */, meta[relay.Constant][456] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][415]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_034: Tensor[(2), int64] = %tensor_0370;
  %2033 = fn (%p0367: Tensor[(?, 4), float32], %p1242: Tensor[(2), int32], %p2115: Tensor[(2), int64], %p374: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0367, %p1242, %p2115, %p374, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2034 = (%in_shape_030, %in_shape_120, %in_shape_214, %in_shape_312);
  %2035 = (%shape_func_out_034,);
  let %shape_func34: () = vm.shape_func(%2033, %2034, %2035, meta[relay.attrs.ShapeFuncAttrs][34]) /* ty=() */;
  let %storage_0405: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][416]) /* ty=Storage[] */;
  let %tensor_0371: int64 = memory.alloc_tensor(%storage_0405, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][416]) /* ty=int64 */;
  %2036 = fn (%p0368: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0368) /* ty=int64 */
  };
  %2037 = (%shape_func_out_034,);
  %2038 = (%tensor_0371,);
  let %v370: () = vm.invoke_tvm_op(%2036, %2037, %2038) /* ty=() */;
  let %storage_0406: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][417]) /* ty=Storage[] */;
  let %tensor_0372: int64 = memory.alloc_tensor(%storage_0406, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][417]) /* ty=int64 */;
  %2039 = fn (%p0369: int64, Primitive=1) -> int64 {
    multiply(%p0369, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2040 = (%tensor_0371,);
  %2041 = (%tensor_0372,);
  let %v371: () = vm.invoke_tvm_op(%2039, %2040, %2041) /* ty=() */;
  let %storage_0407: Storage[] = memory.alloc_storage(%tensor_0372, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][418]) /* ty=Storage[] */;
  let %out_034: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0407, 0 /* ty=int64 */, %shape_func_out_034, meta[relay.attrs.AllocTensorAttrs][418]) /* ty=Tensor[(?, ?), float32] */;
  %2042 = (%x424, %x433, %x427, meta[relay.Constant][455] /* ty=Tensor[(2), int32] */);
  %2043 = (%out_034,);
  let %v372: () = vm.invoke_tvm_op(%2033, %2042, %2043) /* ty=() */;
  let %x434: Tensor[(?, ?), float32] = %out_034;
  let %in_shape_031: Tensor[(2), int64] = vm.shape_of(%x428, meta[relay.attrs.ShapeOfAttrs][35]) /* ty=Tensor[(2), int64] */;
  let %in_shape_121: Tensor[(2), int64] = vm.shape_of(%x430, meta[relay.attrs.ShapeOfAttrs][36]) /* ty=Tensor[(2), int64] */;
  let %in_shape_215: Tensor[(2), int64] = vm.shape_of(%x432, meta[relay.attrs.ShapeOfAttrs][37]) /* ty=Tensor[(2), int64] */;
  let %in_shape_313: Tensor[(2), int64] = vm.shape_of(%x434, meta[relay.attrs.ShapeOfAttrs][38]) /* ty=Tensor[(2), int64] */;
  let %storage_0408: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][419]) /* ty=Storage[] */;
  let %tensor_0373: Tensor[(1), int64] = memory.alloc_tensor(%storage_0408, 0 /* ty=int64 */, meta[relay.Constant][457] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][419]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_035: Tensor[(1), int64] = %tensor_0373;
  %2061 = fn (%p0370: Tensor[(?, ?), float32], %p1243: Tensor[(?, ?), float32], %p2116: Tensor[(?, ?), float32], %p375: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), int64] {
    %2044 = take(%p0370, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %2045 = take(%p1243, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %2046 = subtract(%2044, %2045) /* ty=Tensor[(?), float32] */;
    %2047 = take(%p2116, 3 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %2048 = take(%p375, 1 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %2049 = subtract(%2047, %2048) /* ty=Tensor[(?), float32] */;
    %2050 = multiply(%2046, %2049) /* ty=Tensor[(?), float32] */;
    %2051 = (%2050,);
    %2052 = concatenate(%2051) /* ty=Tensor[(?), float32] */;
    %2053 = sqrt(%2052) /* ty=Tensor[(?), float32] */;
    %2054 = divide(%2053, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %2055 = log2(%2054) /* ty=Tensor[(?), float32] */;
    %2056 = add(%2055, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %2057 = add(%2056, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %2058 = floor(%2057) /* ty=Tensor[(?), float32] */;
    %2059 = clip(%2058, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
    %2060 = cast(%2059, dtype="int64") /* ty=Tensor[(?), int64] */;
    subtract(%2060, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */
  };
  %2062 = (%in_shape_031, %in_shape_121, %in_shape_215, %in_shape_313);
  %2063 = (%shape_func_out_035,);
  let %shape_func35: () = vm.shape_func(%2061, %2062, %2063, meta[relay.attrs.ShapeFuncAttrs][35]) /* ty=() */;
  let %storage_0409: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][420]) /* ty=Storage[] */;
  let %tensor_0374: int64 = memory.alloc_tensor(%storage_0409, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][420]) /* ty=int64 */;
  %2064 = fn (%p0371: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0371) /* ty=int64 */
  };
  %2065 = (%shape_func_out_035,);
  %2066 = (%tensor_0374,);
  let %v373: () = vm.invoke_tvm_op(%2064, %2065, %2066) /* ty=() */;
  let %storage_0410: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][421]) /* ty=Storage[] */;
  let %tensor_0375: int64 = memory.alloc_tensor(%storage_0410, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][421]) /* ty=int64 */;
  %2067 = fn (%p0372: int64, Primitive=1) -> int64 {
    multiply(%p0372, 8 /* ty=int64 */) /* ty=int64 */
  };
  %2068 = (%tensor_0374,);
  %2069 = (%tensor_0375,);
  let %v374: () = vm.invoke_tvm_op(%2067, %2068, %2069) /* ty=() */;
  let %storage_0411: Storage[] = memory.alloc_storage(%tensor_0375, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][422]) /* ty=Storage[] */;
  let %out_035: Tensor[(?), int64] = memory.alloc_tensor(%storage_0411, 0 /* ty=int64 */, %shape_func_out_035, meta[relay.attrs.AllocTensorAttrs][422]) /* ty=Tensor[(?), int64] */;
  %2070 = (%x428, %x430, %x432, %x434);
  %2071 = (%out_035,);
  let %v375: () = vm.invoke_tvm_op(%2061, %2070, %2071) /* ty=() */;
  let %x435: Tensor[(?), int64] = %out_035;
  let %storage_0412: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][423]) /* ty=Storage[] */;
  let %tensor_0376: Tensor[(1), int32] = memory.alloc_tensor(%storage_0412, 0 /* ty=int64 */, meta[relay.Constant][458] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][423]) /* ty=Tensor[(1), int32] */;
  %2072 = fn (%p0373: Tensor[(?), int64], Primitive=1) -> Tensor[(1), int32] {
    shape_of(%p0373, dtype="int32") /* ty=Tensor[(1), int32] */
  };
  %2073 = (%x435,);
  %2074 = (%tensor_0376,);
  let %v376: () = vm.invoke_tvm_op(%2072, %2073, %2074) /* ty=() */;
  let %x436: Tensor[(1), int32] = %tensor_0376;
  let %storage_0413: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][424]) /* ty=Storage[] */;
  let %tensor_0377: Tensor[(4), int64] = memory.alloc_tensor(%storage_0413, 0 /* ty=int64 */, meta[relay.Constant][459] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][424]) /* ty=Tensor[(4), int64] */;
  %2079 = fn (%p0374: Tensor[(1), int32], %p1244: Tensor[(1), int64], %p2117: Tensor[(1), int64], Primitive=1) -> Tensor[(4), int64] {
    %2075 = take(%p0374, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
    %2076 = expand_dims(%2075, axis=0) /* ty=Tensor[(1), int32] */;
    %2077 = cast(%2076, dtype="int64") /* ty=Tensor[(1), int64] */;
    %2078 = (%2077, %p1244, %p2117, %p2117);
    concatenate(%2078) /* ty=Tensor[(4), int64] */
  };
  %2080 = (%x436, meta[relay.Constant][460] /* ty=Tensor[(1), int64] */, meta[relay.Constant][461] /* ty=Tensor[(1), int64] */);
  %2081 = (%tensor_0377,);
  let %v377: () = vm.invoke_tvm_op(%2079, %2080, %2081) /* ty=() */;
  let %x437: Tensor[(4), int64] = %tensor_0377;
  let %in_shape_032: int32 = device_copy(0 /* ty=int32 */, meta[relay.attrs.DeviceCopyAttrs][47]) /* ty=int32 */;
  let %in_shape_122: Tensor[(4), int64] = device_copy(%x437, meta[relay.attrs.DeviceCopyAttrs][48]) /* ty=Tensor[(4), int64] */;
  let %storage_0414: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][425]) /* ty=Storage[] */;
  let %tensor_0378: Tensor[(4), int64] = memory.alloc_tensor(%storage_0414, 0 /* ty=int64 */, meta[relay.Constant][462] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][425]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_036: Tensor[(4), int64] = %tensor_0378;
  %2082 = fn (%p0375: int32, %p1245: Tensor[(4), int64], Primitive=1) -> Tensor[(?, ?, ?, ?), float32] {
    dyn.full(%p0375, %p1245, shape=None, dtype="float32") /* ty=Tensor[(?, ?, ?, ?), float32] */
  };
  %2083 = (%in_shape_032, %in_shape_122);
  %2084 = (%shape_func_out_036,);
  let %shape_func36: () = vm.shape_func(%2082, %2083, %2084, meta[relay.attrs.ShapeFuncAttrs][36]) /* ty=() */;
  let %storage_0415: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][426]) /* ty=Storage[] */;
  let %tensor_0379: int64 = memory.alloc_tensor(%storage_0415, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][426]) /* ty=int64 */;
  %2085 = fn (%p0376: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0376) /* ty=int64 */
  };
  %2086 = (%shape_func_out_036,);
  %2087 = (%tensor_0379,);
  let %v378: () = vm.invoke_tvm_op(%2085, %2086, %2087) /* ty=() */;
  let %storage_0416: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][427]) /* ty=Storage[] */;
  let %tensor_0380: int64 = memory.alloc_tensor(%storage_0416, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][427]) /* ty=int64 */;
  %2088 = fn (%p0377: int64, Primitive=1) -> int64 {
    multiply(%p0377, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2089 = (%tensor_0379,);
  %2090 = (%tensor_0380,);
  let %v379: () = vm.invoke_tvm_op(%2088, %2089, %2090) /* ty=() */;
  let %storage_0417: Storage[] = memory.alloc_storage(%tensor_0380, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][428]) /* ty=Storage[] */;
  let %out_036: Tensor[(?, ?, ?, ?), float32] = memory.alloc_tensor(%storage_0417, 0 /* ty=int64 */, %shape_func_out_036, meta[relay.attrs.AllocTensorAttrs][428]) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %2091 = (0 /* ty=int32 */, %x437);
  %2092 = (%out_036,);
  let %v380: () = vm.invoke_tvm_op(%2082, %2091, %2092) /* ty=() */;
  let %x438: Tensor[(?, ?, ?, ?), float32] = %out_036;
  let %in_shape_033: Tensor[(4), int64] = vm.shape_of(%x438, meta[relay.attrs.ShapeOfAttrs][39]) /* ty=Tensor[(4), int64] */;
  let %storage_0418: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][429]) /* ty=Storage[] */;
  let %tensor_0381: Tensor[(4), int64] = memory.alloc_tensor(%storage_0418, 0 /* ty=int64 */, meta[relay.Constant][463] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][429]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_037: Tensor[(4), int64] = %tensor_0381;
  %2093 = fn (%p0378: Tensor[(?, ?, ?, ?), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    reshape(%p0378, newshape=[0, 256, 7, 7]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %2094 = (%in_shape_033,);
  %2095 = (%shape_func_out_037,);
  let %shape_func37: () = vm.shape_func(%2093, %2094, %2095, meta[relay.attrs.ShapeFuncAttrs][37]) /* ty=() */;
  let %x439: Tensor[(?, 256, 7, 7), float32] = vm.reshape_tensor(%x438, %shape_func_out_037, meta[relay.attrs.ReshapeTensorAttrs][106]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  let %in_shape_034: Tensor[(1), int64] = vm.shape_of(%x435, meta[relay.attrs.ShapeOfAttrs][40]) /* ty=Tensor[(1), int64] */;
  let %storage_0419: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][430]) /* ty=Storage[] */;
  let %tensor_0382: Tensor[(1), int64] = memory.alloc_tensor(%storage_0419, 0 /* ty=int64 */, meta[relay.Constant][464] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][430]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_038: Tensor[(1), int64] = %tensor_0382;
  %2096 = fn (%p0379: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0379, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %2097 = (%in_shape_034,);
  %2098 = (%shape_func_out_038,);
  let %shape_func38: () = vm.shape_func(%2096, %2097, %2098, meta[relay.attrs.ShapeFuncAttrs][38]) /* ty=() */;
  let %storage_0420: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][431]) /* ty=Storage[] */;
  let %tensor_0383: int64 = memory.alloc_tensor(%storage_0420, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][431]) /* ty=int64 */;
  %2099 = fn (%p0380: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0380) /* ty=int64 */
  };
  %2100 = (%shape_func_out_038,);
  %2101 = (%tensor_0383,);
  let %v381: () = vm.invoke_tvm_op(%2099, %2100, %2101) /* ty=() */;
  let %storage_0421: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][432]) /* ty=Storage[] */;
  let %tensor_0384: int64 = memory.alloc_tensor(%storage_0421, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][432]) /* ty=int64 */;
  %2102 = fn (%p0381: int64, Primitive=1) -> int64 {
    multiply(%p0381, 1 /* ty=int64 */) /* ty=int64 */
  };
  %2103 = (%tensor_0383,);
  %2104 = (%tensor_0384,);
  let %v382: () = vm.invoke_tvm_op(%2102, %2103, %2104) /* ty=() */;
  let %storage_0422: Storage[] = memory.alloc_storage(%tensor_0384, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][433]) /* ty=Storage[] */;
  let %out_037: Tensor[(?), bool] = memory.alloc_tensor(%storage_0422, 0 /* ty=int64 */, %shape_func_out_038, meta[relay.attrs.AllocTensorAttrs][433]) /* ty=Tensor[(?), bool] */;
  %2105 = (%x435,);
  %2106 = (%out_037,);
  let %v383: () = vm.invoke_tvm_op(%2096, %2105, %2106) /* ty=() */;
  let %x440: Tensor[(?), bool] = %out_037;
  let %in_shape_035: Tensor[(?), bool] = device_copy(%x440, meta[relay.attrs.DeviceCopyAttrs][49]) /* ty=Tensor[(?), bool] */;
  let %storage_0423: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][434]) /* ty=Storage[] */;
  let %tensor_0385: Tensor[(2), int64] = memory.alloc_tensor(%storage_0423, 0 /* ty=int64 */, meta[relay.Constant][465] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][434]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_039: Tensor[(2), int64] = %tensor_0385;
  %2107 = fn (%p0382: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0382) /* ty=Tensor[(?, 1), int32] */
  };
  %2108 = (%in_shape_035,);
  %2109 = (%shape_func_out_039,);
  let %shape_func39: () = vm.shape_func(%2107, %2108, %2109, meta[relay.attrs.ShapeFuncAttrs][39]) /* ty=() */;
  let %storage_0424: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][435]) /* ty=Storage[] */;
  let %tensor_0386: int64 = memory.alloc_tensor(%storage_0424, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][435]) /* ty=int64 */;
  %2110 = fn (%p0383: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0383) /* ty=int64 */
  };
  %2111 = (%shape_func_out_039,);
  %2112 = (%tensor_0386,);
  let %v384: () = vm.invoke_tvm_op(%2110, %2111, %2112) /* ty=() */;
  let %storage_0425: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][436]) /* ty=Storage[] */;
  let %tensor_0387: int64 = memory.alloc_tensor(%storage_0425, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][436]) /* ty=int64 */;
  %2113 = fn (%p0384: int64, Primitive=1) -> int64 {
    multiply(%p0384, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2114 = (%tensor_0386,);
  %2115 = (%tensor_0387,);
  let %v385: () = vm.invoke_tvm_op(%2113, %2114, %2115) /* ty=() */;
  let %storage_0426: Storage[] = memory.alloc_storage(%tensor_0387, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][437]) /* ty=Storage[] */;
  let %out_038: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0426, 0 /* ty=int64 */, %shape_func_out_039, meta[relay.attrs.AllocTensorAttrs][437]) /* ty=Tensor[(?, 1), int32] */;
  %2116 = (%x440,);
  %2117 = (%out_038,);
  let %v386: () = vm.invoke_tvm_op(%2107, %2116, %2117) /* ty=() */;
  let %x441: Tensor[(?, 1), int32] = %out_038;
  let %in_shape_036: Tensor[(2), int64] = vm.shape_of(%x441, meta[relay.attrs.ShapeOfAttrs][41]) /* ty=Tensor[(2), int64] */;
  let %storage_0427: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][438]) /* ty=Storage[] */;
  let %tensor_0388: Tensor[(1), int64] = memory.alloc_tensor(%storage_0427, 0 /* ty=int64 */, meta[relay.Constant][466] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][438]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_040: Tensor[(1), int64] = %tensor_0388;
  %2120 = fn (%p0385: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %2118 = split(%p0385, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %2119 = %2118.0;
    squeeze(%2119, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %2121 = (%in_shape_036,);
  %2122 = (%shape_func_out_040,);
  let %shape_func40: () = vm.shape_func(%2120, %2121, %2122, meta[relay.attrs.ShapeFuncAttrs][40]) /* ty=() */;
  let %storage_0428: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][439]) /* ty=Storage[] */;
  let %tensor_0389: int64 = memory.alloc_tensor(%storage_0428, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][439]) /* ty=int64 */;
  %2123 = fn (%p0386: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0386) /* ty=int64 */
  };
  %2124 = (%shape_func_out_040,);
  %2125 = (%tensor_0389,);
  let %v387: () = vm.invoke_tvm_op(%2123, %2124, %2125) /* ty=() */;
  let %storage_0429: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][440]) /* ty=Storage[] */;
  let %tensor_0390: int64 = memory.alloc_tensor(%storage_0429, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][440]) /* ty=int64 */;
  %2126 = fn (%p0387: int64, Primitive=1) -> int64 {
    multiply(%p0387, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2127 = (%tensor_0389,);
  %2128 = (%tensor_0390,);
  let %v388: () = vm.invoke_tvm_op(%2126, %2127, %2128) /* ty=() */;
  let %storage_0430: Storage[] = memory.alloc_storage(%tensor_0390, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][441]) /* ty=Storage[] */;
  let %out_039: Tensor[(?), int32] = memory.alloc_tensor(%storage_0430, 0 /* ty=int64 */, %shape_func_out_040, meta[relay.attrs.AllocTensorAttrs][441]) /* ty=Tensor[(?), int32] */;
  %2129 = (%x441,);
  %2130 = (%out_039,);
  let %v389: () = vm.invoke_tvm_op(%2120, %2129, %2130) /* ty=() */;
  let %x442: Tensor[(?), int32] = %out_039;
  let %in_shape_037: Tensor[(1), int64] = vm.shape_of(%x442, meta[relay.attrs.ShapeOfAttrs][42]) /* ty=Tensor[(1), int64] */;
  let %storage_0431: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][442]) /* ty=Storage[] */;
  let %tensor_0391: Tensor[(4), int64] = memory.alloc_tensor(%storage_0431, 0 /* ty=int64 */, meta[relay.Constant][467] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][442]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_041: Tensor[(4), int64] = %tensor_0391;
  %2134 = fn (%p0388: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 7, 7), int32] {
    %2131 = reshape(%p0388, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %2132 = repeat(%2131, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %2133 = repeat(%2132, repeats=7, axis=2) /* ty=Tensor[(?, 256, 7, 1), int32] */;
    repeat(%2133, repeats=7, axis=3) /* ty=Tensor[(?, 256, 7, 7), int32] */
  };
  %2135 = (%in_shape_037,);
  %2136 = (%shape_func_out_041,);
  let %shape_func41: () = vm.shape_func(%2134, %2135, %2136, meta[relay.attrs.ShapeFuncAttrs][41]) /* ty=() */;
  let %storage_0432: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][443]) /* ty=Storage[] */;
  let %tensor_0392: int64 = memory.alloc_tensor(%storage_0432, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][443]) /* ty=int64 */;
  %2137 = fn (%p0389: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0389) /* ty=int64 */
  };
  %2138 = (%shape_func_out_041,);
  %2139 = (%tensor_0392,);
  let %v390: () = vm.invoke_tvm_op(%2137, %2138, %2139) /* ty=() */;
  let %storage_0433: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][444]) /* ty=Storage[] */;
  let %tensor_0393: int64 = memory.alloc_tensor(%storage_0433, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][444]) /* ty=int64 */;
  %2140 = fn (%p0390: int64, Primitive=1) -> int64 {
    multiply(%p0390, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2141 = (%tensor_0392,);
  %2142 = (%tensor_0393,);
  let %v391: () = vm.invoke_tvm_op(%2140, %2141, %2142) /* ty=() */;
  let %storage_0434: Storage[] = memory.alloc_storage(%tensor_0393, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][445]) /* ty=Storage[] */;
  let %out_040: Tensor[(?, 256, 7, 7), int32] = memory.alloc_tensor(%storage_0434, 0 /* ty=int64 */, %shape_func_out_041, meta[relay.attrs.AllocTensorAttrs][445]) /* ty=Tensor[(?, 256, 7, 7), int32] */;
  %2143 = (%x442,);
  %2144 = (%out_040,);
  let %v392: () = vm.invoke_tvm_op(%2134, %2143, %2144) /* ty=() */;
  let %x443: Tensor[(?, 256, 7, 7), int32] = %out_040;
  let %storage_0435: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][446]) /* ty=Storage[] */;
  let %tensor_0394: Tensor[(2), int32] = memory.alloc_tensor(%storage_0435, 0 /* ty=int64 */, meta[relay.Constant][468] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][446]) /* ty=Tensor[(2), int32] */;
  %2147 = fn (%p0391: Tensor[(2), bool], %p1246: Tensor[(2), int32], %p2118: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2145 = cast_like(%p2118, %p1246) /* ty=Tensor[(2), int32] */;
    %2146 = add(%p1246, %2145) /* ty=Tensor[(2), int32] */;
    where(%p0391, %2146, %p1246) /* ty=Tensor[(2), int32] */
  };
  %2148 = (meta[relay.Constant][469] /* ty=Tensor[(2), bool] */, meta[relay.Constant][470] /* ty=Tensor[(2), int32] */, %x425);
  %2149 = (%tensor_0394,);
  let %v393: () = vm.invoke_tvm_op(%2147, %2148, %2149) /* ty=() */;
  let %x444: Tensor[(2), int32] = %tensor_0394;
  let %in_shape_038: Tensor[(2), int64] = vm.shape_of(%x424, meta[relay.attrs.ShapeOfAttrs][43]) /* ty=Tensor[(2), int64] */;
  let %in_shape_123: Tensor[(2), int32] = device_copy(%x444, meta[relay.attrs.DeviceCopyAttrs][50]) /* ty=Tensor[(2), int32] */;
  let %in_shape_216: Tensor[(2), int64] = device_copy(%x427, meta[relay.attrs.DeviceCopyAttrs][51]) /* ty=Tensor[(2), int64] */;
  let %in_shape_314: Tensor[(2), int32] = device_copy(meta[relay.Constant][471] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][52]) /* ty=Tensor[(2), int32] */;
  let %storage_0436: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][447]) /* ty=Storage[] */;
  let %tensor_0395: Tensor[(2), int64] = memory.alloc_tensor(%storage_0436, 0 /* ty=int64 */, meta[relay.Constant][472] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][447]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_042: Tensor[(2), int64] = %tensor_0395;
  %2150 = fn (%p0392: Tensor[(?, 4), float32], %p1247: Tensor[(2), int32], %p2119: Tensor[(2), int64], %p376: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0392, %p1247, %p2119, %p376, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2151 = (%in_shape_038, %in_shape_123, %in_shape_216, %in_shape_314);
  %2152 = (%shape_func_out_042,);
  let %shape_func42: () = vm.shape_func(%2150, %2151, %2152, meta[relay.attrs.ShapeFuncAttrs][42]) /* ty=() */;
  let %storage_0437: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][448]) /* ty=Storage[] */;
  let %tensor_0396: int64 = memory.alloc_tensor(%storage_0437, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][448]) /* ty=int64 */;
  %2153 = fn (%p0393: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0393) /* ty=int64 */
  };
  %2154 = (%shape_func_out_042,);
  %2155 = (%tensor_0396,);
  let %v394: () = vm.invoke_tvm_op(%2153, %2154, %2155) /* ty=() */;
  let %storage_0438: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][449]) /* ty=Storage[] */;
  let %tensor_0397: int64 = memory.alloc_tensor(%storage_0438, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][449]) /* ty=int64 */;
  %2156 = fn (%p0394: int64, Primitive=1) -> int64 {
    multiply(%p0394, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2157 = (%tensor_0396,);
  %2158 = (%tensor_0397,);
  let %v395: () = vm.invoke_tvm_op(%2156, %2157, %2158) /* ty=() */;
  let %storage_0439: Storage[] = memory.alloc_storage(%tensor_0397, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][450]) /* ty=Storage[] */;
  let %out_041: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0439, 0 /* ty=int64 */, %shape_func_out_042, meta[relay.attrs.AllocTensorAttrs][450]) /* ty=Tensor[(?, ?), float32] */;
  %2159 = (%x424, %x444, %x427, meta[relay.Constant][471] /* ty=Tensor[(2), int32] */);
  %2160 = (%out_041,);
  let %v396: () = vm.invoke_tvm_op(%2150, %2159, %2160) /* ty=() */;
  let %x445: Tensor[(?, ?), float32] = %out_041;
  let %storage_0440: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][451]) /* ty=Storage[] */;
  let %tensor_0398: Tensor[(2), int32] = memory.alloc_tensor(%storage_0440, 0 /* ty=int64 */, meta[relay.Constant][473] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][451]) /* ty=Tensor[(2), int32] */;
  %2161 = fn (%p0395: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0395, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2162 = (%x445,);
  %2163 = (%tensor_0398,);
  let %v397: () = vm.invoke_tvm_op(%2161, %2162, %2163) /* ty=() */;
  let %x446: Tensor[(2), int32] = %tensor_0398;
  let %storage_0441: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][452]) /* ty=Storage[] */;
  let %tensor_0399: Tensor[(2), int32] = memory.alloc_tensor(%storage_0441, 0 /* ty=int64 */, meta[relay.Constant][474] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][452]) /* ty=Tensor[(2), int32] */;
  %2166 = fn (%p0396: Tensor[(2), bool], %p1248: Tensor[(2), int32], %p2120: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2164 = cast_like(%p2120, %p1248) /* ty=Tensor[(2), int32] */;
    %2165 = add(%p1248, %2164) /* ty=Tensor[(2), int32] */;
    where(%p0396, %2165, %p1248) /* ty=Tensor[(2), int32] */
  };
  %2167 = (meta[relay.Constant][475] /* ty=Tensor[(2), bool] */, meta[relay.Constant][476] /* ty=Tensor[(2), int32] */, %x446);
  %2168 = (%tensor_0399,);
  let %v398: () = vm.invoke_tvm_op(%2166, %2167, %2168) /* ty=() */;
  let %x447: Tensor[(2), int32] = %tensor_0399;
  let %storage_0442: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][453]) /* ty=Storage[] */;
  let %tensor_0400: Tensor[(2), int32] = memory.alloc_tensor(%storage_0442, 0 /* ty=int64 */, meta[relay.Constant][477] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][453]) /* ty=Tensor[(2), int32] */;
  %2169 = fn (%p0397: Tensor[(2), int32], %p1249: Tensor[(1), int32], Primitive=1) -> Tensor[(2), int32] {
    scatter(%p0397, %p1249, %p1249, meta[relay.attrs.ScatterAttrs][4]) /* ty=Tensor[(2), int32] */
  };
  %2170 = (%x446, meta[relay.Constant][478] /* ty=Tensor[(1), int32] */);
  %2171 = (%tensor_0400,);
  let %v399: () = vm.invoke_tvm_op(%2169, %2170, %2171) /* ty=() */;
  let %x448: Tensor[(2), int32] = %tensor_0400;
  let %storage_0443: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][454]) /* ty=Storage[] */;
  let %tensor_0401: Tensor[(2), int64] = memory.alloc_tensor(%storage_0443, 0 /* ty=int64 */, meta[relay.Constant][479] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][454]) /* ty=Tensor[(2), int64] */;
  %2172 = fn (%p0398: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0398, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2173 = (%x448,);
  %2174 = (%tensor_0401,);
  let %v400: () = vm.invoke_tvm_op(%2172, %2173, %2174) /* ty=() */;
  let %x449: Tensor[(2), int64] = %tensor_0401;
  let %in_shape_039: Tensor[(2), int64] = vm.shape_of(%x445, meta[relay.attrs.ShapeOfAttrs][44]) /* ty=Tensor[(2), int64] */;
  let %in_shape_124: Tensor[(2), int32] = device_copy(%x447, meta[relay.attrs.DeviceCopyAttrs][53]) /* ty=Tensor[(2), int32] */;
  let %in_shape_217: Tensor[(2), int64] = device_copy(%x449, meta[relay.attrs.DeviceCopyAttrs][54]) /* ty=Tensor[(2), int64] */;
  let %in_shape_315: Tensor[(2), int32] = device_copy(meta[relay.Constant][480] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][55]) /* ty=Tensor[(2), int32] */;
  let %storage_0444: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][455]) /* ty=Storage[] */;
  let %tensor_0402: Tensor[(2), int64] = memory.alloc_tensor(%storage_0444, 0 /* ty=int64 */, meta[relay.Constant][481] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][455]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_043: Tensor[(2), int64] = %tensor_0402;
  %2175 = fn (%p0399: Tensor[(?, ?), float32], %p1250: Tensor[(2), int32], %p2121: Tensor[(2), int64], %p377: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0399, %p1250, %p2121, %p377, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2176 = (%in_shape_039, %in_shape_124, %in_shape_217, %in_shape_315);
  %2177 = (%shape_func_out_043,);
  let %shape_func43: () = vm.shape_func(%2175, %2176, %2177, meta[relay.attrs.ShapeFuncAttrs][43]) /* ty=() */;
  let %storage_0445: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][456]) /* ty=Storage[] */;
  let %tensor_0403: int64 = memory.alloc_tensor(%storage_0445, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][456]) /* ty=int64 */;
  %2178 = fn (%p0400: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0400) /* ty=int64 */
  };
  %2179 = (%shape_func_out_043,);
  %2180 = (%tensor_0403,);
  let %v401: () = vm.invoke_tvm_op(%2178, %2179, %2180) /* ty=() */;
  let %storage_0446: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][457]) /* ty=Storage[] */;
  let %tensor_0404: int64 = memory.alloc_tensor(%storage_0446, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][457]) /* ty=int64 */;
  %2181 = fn (%p0401: int64, Primitive=1) -> int64 {
    multiply(%p0401, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2182 = (%tensor_0403,);
  %2183 = (%tensor_0404,);
  let %v402: () = vm.invoke_tvm_op(%2181, %2182, %2183) /* ty=() */;
  let %storage_0447: Storage[] = memory.alloc_storage(%tensor_0404, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][458]) /* ty=Storage[] */;
  let %out_042: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0447, 0 /* ty=int64 */, %shape_func_out_043, meta[relay.attrs.AllocTensorAttrs][458]) /* ty=Tensor[(?, ?), float32] */;
  %2184 = (%x445, %x447, %x449, meta[relay.Constant][480] /* ty=Tensor[(2), int32] */);
  %2185 = (%out_042,);
  let %v403: () = vm.invoke_tvm_op(%2175, %2184, %2185) /* ty=() */;
  let %x450: Tensor[(?, ?), float32] = %out_042;
  let %in_shape_040: Tensor[(2), int64] = vm.shape_of(%x450, meta[relay.attrs.ShapeOfAttrs][45]) /* ty=Tensor[(2), int64] */;
  let %in_shape_125: Tensor[(2), int64] = vm.shape_of(%x424, meta[relay.attrs.ShapeOfAttrs][46]) /* ty=Tensor[(2), int64] */;
  let %storage_0448: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][459]) /* ty=Storage[] */;
  let %tensor_0405: Tensor[(2), int64] = memory.alloc_tensor(%storage_0448, 0 /* ty=int64 */, meta[relay.Constant][482] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][459]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_044: Tensor[(2), int64] = %tensor_0405;
  %2192 = fn (%p0402: Tensor[(?, ?), float32], %p1251: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(?, ?), float32] {
    %2186 = full_like(%p0402, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
    %2187 = (%2186,);
    %2188 = concatenate(%2187) /* ty=Tensor[(?, ?), float32] */;
    %2189 = (%p1251,);
    %2190 = concatenate(%2189) /* ty=Tensor[(?, 4), float32] */;
    %2191 = (%2188, %2190);
    concatenate(%2191, axis=1) /* ty=Tensor[(?, ?), float32] */
  };
  %2193 = (%in_shape_040, %in_shape_125);
  %2194 = (%shape_func_out_044,);
  let %shape_func44: () = vm.shape_func(%2192, %2193, %2194, meta[relay.attrs.ShapeFuncAttrs][44]) /* ty=() */;
  let %storage_0449: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][460]) /* ty=Storage[] */;
  let %tensor_0406: int64 = memory.alloc_tensor(%storage_0449, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][460]) /* ty=int64 */;
  %2195 = fn (%p0403: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0403) /* ty=int64 */
  };
  %2196 = (%shape_func_out_044,);
  %2197 = (%tensor_0406,);
  let %v404: () = vm.invoke_tvm_op(%2195, %2196, %2197) /* ty=() */;
  let %storage_0450: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][461]) /* ty=Storage[] */;
  let %tensor_0407: int64 = memory.alloc_tensor(%storage_0450, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][461]) /* ty=int64 */;
  %2198 = fn (%p0404: int64, Primitive=1) -> int64 {
    multiply(%p0404, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2199 = (%tensor_0406,);
  %2200 = (%tensor_0407,);
  let %v405: () = vm.invoke_tvm_op(%2198, %2199, %2200) /* ty=() */;
  let %storage_0451: Storage[] = memory.alloc_storage(%tensor_0407, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][462]) /* ty=Storage[] */;
  let %out_043: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0451, 0 /* ty=int64 */, %shape_func_out_044, meta[relay.attrs.AllocTensorAttrs][462]) /* ty=Tensor[(?, ?), float32] */;
  %2201 = (%x450, %x424);
  %2202 = (%out_043,);
  let %v406: () = vm.invoke_tvm_op(%2192, %2201, %2202) /* ty=() */;
  let %x451: Tensor[(?, ?), float32] = %out_043;
  let %in_shape_041: Tensor[(2), int64] = vm.shape_of(%x451, meta[relay.attrs.ShapeOfAttrs][47]) /* ty=Tensor[(2), int64] */;
  let %in_shape_126: Tensor[(1), int64] = vm.shape_of(%x442, meta[relay.attrs.ShapeOfAttrs][48]) /* ty=Tensor[(1), int64] */;
  let %storage_0452: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][463]) /* ty=Storage[] */;
  let %tensor_0408: Tensor[(2), int64] = memory.alloc_tensor(%storage_0452, 0 /* ty=int64 */, meta[relay.Constant][483] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][463]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_045: Tensor[(2), int64] = %tensor_0408;
  %2205 = fn (%p0405: Tensor[(?, ?), float32], %p1252: Tensor[(?), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    %2203 = cast(%p1252, dtype="int64") /* ty=Tensor[(?), int64] */;
    %2204 = (%p0405, %2203);
    adv_index(%2204) /* ty=Tensor[(?, ?), float32] */
  };
  %2206 = (%in_shape_041, %in_shape_126);
  %2207 = (%shape_func_out_045,);
  let %shape_func45: () = vm.shape_func(%2205, %2206, %2207, meta[relay.attrs.ShapeFuncAttrs][45]) /* ty=() */;
  let %storage_0453: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][464]) /* ty=Storage[] */;
  let %tensor_0409: int64 = memory.alloc_tensor(%storage_0453, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][464]) /* ty=int64 */;
  %2208 = fn (%p0406: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0406) /* ty=int64 */
  };
  %2209 = (%shape_func_out_045,);
  %2210 = (%tensor_0409,);
  let %v407: () = vm.invoke_tvm_op(%2208, %2209, %2210) /* ty=() */;
  let %storage_0454: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][465]) /* ty=Storage[] */;
  let %tensor_0410: int64 = memory.alloc_tensor(%storage_0454, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][465]) /* ty=int64 */;
  %2211 = fn (%p0407: int64, Primitive=1) -> int64 {
    multiply(%p0407, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2212 = (%tensor_0409,);
  %2213 = (%tensor_0410,);
  let %v408: () = vm.invoke_tvm_op(%2211, %2212, %2213) /* ty=() */;
  let %storage_0455: Storage[] = memory.alloc_storage(%tensor_0410, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][466]) /* ty=Storage[] */;
  let %out_044: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0455, 0 /* ty=int64 */, %shape_func_out_045, meta[relay.attrs.AllocTensorAttrs][466]) /* ty=Tensor[(?, ?), float32] */;
  %2214 = (%x451, %x442);
  %2215 = (%out_044,);
  let %v409: () = vm.invoke_tvm_op(%2205, %2214, %2215) /* ty=() */;
  let %x452: Tensor[(?, ?), float32] = %out_044;
  let %in_shape_127: Tensor[(2), int64] = vm.shape_of(%x452, meta[relay.attrs.ShapeOfAttrs][49]) /* ty=Tensor[(2), int64] */;
  let %storage_0456: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][467]) /* ty=Storage[] */;
  let %tensor_0411: Tensor[(4), int64] = memory.alloc_tensor(%storage_0456, 0 /* ty=int64 */, meta[relay.Constant][484] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][467]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_046: Tensor[(4), int64] = %tensor_0411;
  %2216 = fn (%p0408: Tensor[(1, 256, 200, 200), float32], %p1253: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    vision.roi_align(%p0408, %p1253, meta[relay.attrs.ROIAlignAttrs][0]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %2217 = (meta[relay.Constant][485] /* ty=Tensor[(4), int64] */, %in_shape_127);
  %2218 = (%shape_func_out_046,);
  let %shape_func46: () = vm.shape_func(%2216, %2217, %2218, meta[relay.attrs.ShapeFuncAttrs][46]) /* ty=() */;
  let %storage_0457: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][468]) /* ty=Storage[] */;
  let %tensor_0412: int64 = memory.alloc_tensor(%storage_0457, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][468]) /* ty=int64 */;
  %2219 = fn (%p0409: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0409) /* ty=int64 */
  };
  %2220 = (%shape_func_out_046,);
  %2221 = (%tensor_0412,);
  let %v410: () = vm.invoke_tvm_op(%2219, %2220, %2221) /* ty=() */;
  let %storage_0458: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][469]) /* ty=Storage[] */;
  let %tensor_0413: int64 = memory.alloc_tensor(%storage_0458, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][469]) /* ty=int64 */;
  %2222 = fn (%p0410: int64, Primitive=1) -> int64 {
    multiply(%p0410, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2223 = (%tensor_0412,);
  %2224 = (%tensor_0413,);
  let %v411: () = vm.invoke_tvm_op(%2222, %2223, %2224) /* ty=() */;
  let %storage_0459: Storage[] = memory.alloc_storage(%tensor_0413, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][470]) /* ty=Storage[] */;
  let %out_045: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0459, 0 /* ty=int64 */, %shape_func_out_046, meta[relay.attrs.AllocTensorAttrs][470]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %2225 = (%x368, %x452);
  %2226 = (%out_045,);
  let %v412: () = vm.invoke_tvm_op(%2216, %2225, %2226) /* ty=() */;
  let %x453: Tensor[(?, 256, 7, 7), float32] = %out_045;
  let %in_shape_042: Tensor[(4), int64] = vm.shape_of(%x439, meta[relay.attrs.ShapeOfAttrs][50]) /* ty=Tensor[(4), int64] */;
  let %in_shape_128: Tensor[(4), int64] = vm.shape_of(%x443, meta[relay.attrs.ShapeOfAttrs][51]) /* ty=Tensor[(4), int64] */;
  let %in_shape_218: Tensor[(4), int64] = vm.shape_of(%x453, meta[relay.attrs.ShapeOfAttrs][52]) /* ty=Tensor[(4), int64] */;
  let %storage_0460: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][471]) /* ty=Storage[] */;
  let %tensor_0414: Tensor[(4), int64] = memory.alloc_tensor(%storage_0460, 0 /* ty=int64 */, meta[relay.Constant][486] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][471]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_047: Tensor[(4), int64] = %tensor_0414;
  %2227 = fn (%p0411: Tensor[(?, 256, 7, 7), float32], %p1254: Tensor[(?, 256, 7, 7), int32], %p2122: Tensor[(?, 256, 7, 7), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    scatter(%p0411, %p1254, %p2122, meta[relay.attrs.ScatterAttrs][5]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %2228 = (%in_shape_042, %in_shape_128, %in_shape_218);
  %2229 = (%shape_func_out_047,);
  let %shape_func47: () = vm.shape_func(%2227, %2228, %2229, meta[relay.attrs.ShapeFuncAttrs][47]) /* ty=() */;
  let %storage_0461: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][472]) /* ty=Storage[] */;
  let %tensor_0415: int64 = memory.alloc_tensor(%storage_0461, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][472]) /* ty=int64 */;
  %2230 = fn (%p0412: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0412) /* ty=int64 */
  };
  %2231 = (%shape_func_out_047,);
  %2232 = (%tensor_0415,);
  let %v413: () = vm.invoke_tvm_op(%2230, %2231, %2232) /* ty=() */;
  let %storage_0462: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][473]) /* ty=Storage[] */;
  let %tensor_0416: int64 = memory.alloc_tensor(%storage_0462, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][473]) /* ty=int64 */;
  %2233 = fn (%p0413: int64, Primitive=1) -> int64 {
    multiply(%p0413, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2234 = (%tensor_0415,);
  %2235 = (%tensor_0416,);
  let %v414: () = vm.invoke_tvm_op(%2233, %2234, %2235) /* ty=() */;
  let %storage_0463: Storage[] = memory.alloc_storage(%tensor_0416, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][474]) /* ty=Storage[] */;
  let %out_046: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0463, 0 /* ty=int64 */, %shape_func_out_047, meta[relay.attrs.AllocTensorAttrs][474]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %2236 = (%x439, %x443, %x453);
  %2237 = (%out_046,);
  let %v415: () = vm.invoke_tvm_op(%2227, %2236, %2237) /* ty=() */;
  let %x454: Tensor[(?, 256, 7, 7), float32] = %out_046;
  let %in_shape_043: Tensor[(1), int64] = vm.shape_of(%x435, meta[relay.attrs.ShapeOfAttrs][53]) /* ty=Tensor[(1), int64] */;
  let %storage_0464: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][475]) /* ty=Storage[] */;
  let %tensor_0417: Tensor[(1), int64] = memory.alloc_tensor(%storage_0464, 0 /* ty=int64 */, meta[relay.Constant][487] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][475]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_048: Tensor[(1), int64] = %tensor_0417;
  %2238 = fn (%p0414: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0414, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %2239 = (%in_shape_043,);
  %2240 = (%shape_func_out_048,);
  let %shape_func48: () = vm.shape_func(%2238, %2239, %2240, meta[relay.attrs.ShapeFuncAttrs][48]) /* ty=() */;
  let %storage_0465: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][476]) /* ty=Storage[] */;
  let %tensor_0418: int64 = memory.alloc_tensor(%storage_0465, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][476]) /* ty=int64 */;
  %2241 = fn (%p0415: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0415) /* ty=int64 */
  };
  %2242 = (%shape_func_out_048,);
  %2243 = (%tensor_0418,);
  let %v416: () = vm.invoke_tvm_op(%2241, %2242, %2243) /* ty=() */;
  let %storage_0466: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][477]) /* ty=Storage[] */;
  let %tensor_0419: int64 = memory.alloc_tensor(%storage_0466, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][477]) /* ty=int64 */;
  %2244 = fn (%p0416: int64, Primitive=1) -> int64 {
    multiply(%p0416, 1 /* ty=int64 */) /* ty=int64 */
  };
  %2245 = (%tensor_0418,);
  %2246 = (%tensor_0419,);
  let %v417: () = vm.invoke_tvm_op(%2244, %2245, %2246) /* ty=() */;
  let %storage_0467: Storage[] = memory.alloc_storage(%tensor_0419, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][478]) /* ty=Storage[] */;
  let %out_047: Tensor[(?), bool] = memory.alloc_tensor(%storage_0467, 0 /* ty=int64 */, %shape_func_out_048, meta[relay.attrs.AllocTensorAttrs][478]) /* ty=Tensor[(?), bool] */;
  %2247 = (%x435,);
  %2248 = (%out_047,);
  let %v418: () = vm.invoke_tvm_op(%2238, %2247, %2248) /* ty=() */;
  let %x455: Tensor[(?), bool] = %out_047;
  let %in_shape_044: Tensor[(?), bool] = device_copy(%x455, meta[relay.attrs.DeviceCopyAttrs][56]) /* ty=Tensor[(?), bool] */;
  let %storage_0468: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][479]) /* ty=Storage[] */;
  let %tensor_0420: Tensor[(2), int64] = memory.alloc_tensor(%storage_0468, 0 /* ty=int64 */, meta[relay.Constant][488] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][479]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_049: Tensor[(2), int64] = %tensor_0420;
  %2249 = fn (%p0417: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0417) /* ty=Tensor[(?, 1), int32] */
  };
  %2250 = (%in_shape_044,);
  %2251 = (%shape_func_out_049,);
  let %shape_func49: () = vm.shape_func(%2249, %2250, %2251, meta[relay.attrs.ShapeFuncAttrs][49]) /* ty=() */;
  let %storage_0469: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][480]) /* ty=Storage[] */;
  let %tensor_0421: int64 = memory.alloc_tensor(%storage_0469, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][480]) /* ty=int64 */;
  %2252 = fn (%p0418: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0418) /* ty=int64 */
  };
  %2253 = (%shape_func_out_049,);
  %2254 = (%tensor_0421,);
  let %v419: () = vm.invoke_tvm_op(%2252, %2253, %2254) /* ty=() */;
  let %storage_0470: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][481]) /* ty=Storage[] */;
  let %tensor_0422: int64 = memory.alloc_tensor(%storage_0470, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][481]) /* ty=int64 */;
  %2255 = fn (%p0419: int64, Primitive=1) -> int64 {
    multiply(%p0419, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2256 = (%tensor_0421,);
  %2257 = (%tensor_0422,);
  let %v420: () = vm.invoke_tvm_op(%2255, %2256, %2257) /* ty=() */;
  let %storage_0471: Storage[] = memory.alloc_storage(%tensor_0422, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][482]) /* ty=Storage[] */;
  let %out_048: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0471, 0 /* ty=int64 */, %shape_func_out_049, meta[relay.attrs.AllocTensorAttrs][482]) /* ty=Tensor[(?, 1), int32] */;
  %2258 = (%x455,);
  %2259 = (%out_048,);
  let %v421: () = vm.invoke_tvm_op(%2249, %2258, %2259) /* ty=() */;
  let %x456: Tensor[(?, 1), int32] = %out_048;
  let %in_shape_045: Tensor[(2), int64] = vm.shape_of(%x456, meta[relay.attrs.ShapeOfAttrs][54]) /* ty=Tensor[(2), int64] */;
  let %storage_0472: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][483]) /* ty=Storage[] */;
  let %tensor_0423: Tensor[(1), int64] = memory.alloc_tensor(%storage_0472, 0 /* ty=int64 */, meta[relay.Constant][489] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][483]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_050: Tensor[(1), int64] = %tensor_0423;
  %2262 = fn (%p0420: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %2260 = split(%p0420, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %2261 = %2260.0;
    squeeze(%2261, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %2263 = (%in_shape_045,);
  %2264 = (%shape_func_out_050,);
  let %shape_func50: () = vm.shape_func(%2262, %2263, %2264, meta[relay.attrs.ShapeFuncAttrs][50]) /* ty=() */;
  let %storage_0473: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][484]) /* ty=Storage[] */;
  let %tensor_0424: int64 = memory.alloc_tensor(%storage_0473, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][484]) /* ty=int64 */;
  %2265 = fn (%p0421: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0421) /* ty=int64 */
  };
  %2266 = (%shape_func_out_050,);
  %2267 = (%tensor_0424,);
  let %v422: () = vm.invoke_tvm_op(%2265, %2266, %2267) /* ty=() */;
  let %storage_0474: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][485]) /* ty=Storage[] */;
  let %tensor_0425: int64 = memory.alloc_tensor(%storage_0474, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][485]) /* ty=int64 */;
  %2268 = fn (%p0422: int64, Primitive=1) -> int64 {
    multiply(%p0422, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2269 = (%tensor_0424,);
  %2270 = (%tensor_0425,);
  let %v423: () = vm.invoke_tvm_op(%2268, %2269, %2270) /* ty=() */;
  let %storage_0475: Storage[] = memory.alloc_storage(%tensor_0425, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][486]) /* ty=Storage[] */;
  let %out_049: Tensor[(?), int32] = memory.alloc_tensor(%storage_0475, 0 /* ty=int64 */, %shape_func_out_050, meta[relay.attrs.AllocTensorAttrs][486]) /* ty=Tensor[(?), int32] */;
  %2271 = (%x456,);
  %2272 = (%out_049,);
  let %v424: () = vm.invoke_tvm_op(%2262, %2271, %2272) /* ty=() */;
  let %x457: Tensor[(?), int32] = %out_049;
  let %in_shape_046: Tensor[(1), int64] = vm.shape_of(%x457, meta[relay.attrs.ShapeOfAttrs][55]) /* ty=Tensor[(1), int64] */;
  let %storage_0476: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][487]) /* ty=Storage[] */;
  let %tensor_0426: Tensor[(4), int64] = memory.alloc_tensor(%storage_0476, 0 /* ty=int64 */, meta[relay.Constant][490] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][487]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_051: Tensor[(4), int64] = %tensor_0426;
  %2276 = fn (%p0423: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 7, 7), int32] {
    %2273 = reshape(%p0423, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %2274 = repeat(%2273, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %2275 = repeat(%2274, repeats=7, axis=2) /* ty=Tensor[(?, 256, 7, 1), int32] */;
    repeat(%2275, repeats=7, axis=3) /* ty=Tensor[(?, 256, 7, 7), int32] */
  };
  %2277 = (%in_shape_046,);
  %2278 = (%shape_func_out_051,);
  let %shape_func51: () = vm.shape_func(%2276, %2277, %2278, meta[relay.attrs.ShapeFuncAttrs][51]) /* ty=() */;
  let %storage_0477: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][488]) /* ty=Storage[] */;
  let %tensor_0427: int64 = memory.alloc_tensor(%storage_0477, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][488]) /* ty=int64 */;
  %2279 = fn (%p0424: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0424) /* ty=int64 */
  };
  %2280 = (%shape_func_out_051,);
  %2281 = (%tensor_0427,);
  let %v425: () = vm.invoke_tvm_op(%2279, %2280, %2281) /* ty=() */;
  let %storage_0478: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][489]) /* ty=Storage[] */;
  let %tensor_0428: int64 = memory.alloc_tensor(%storage_0478, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][489]) /* ty=int64 */;
  %2282 = fn (%p0425: int64, Primitive=1) -> int64 {
    multiply(%p0425, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2283 = (%tensor_0427,);
  %2284 = (%tensor_0428,);
  let %v426: () = vm.invoke_tvm_op(%2282, %2283, %2284) /* ty=() */;
  let %storage_0479: Storage[] = memory.alloc_storage(%tensor_0428, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][490]) /* ty=Storage[] */;
  let %out_050: Tensor[(?, 256, 7, 7), int32] = memory.alloc_tensor(%storage_0479, 0 /* ty=int64 */, %shape_func_out_051, meta[relay.attrs.AllocTensorAttrs][490]) /* ty=Tensor[(?, 256, 7, 7), int32] */;
  %2285 = (%x457,);
  %2286 = (%out_050,);
  let %v427: () = vm.invoke_tvm_op(%2276, %2285, %2286) /* ty=() */;
  let %x458: Tensor[(?, 256, 7, 7), int32] = %out_050;
  let %in_shape_047: Tensor[(2), int64] = vm.shape_of(%x451, meta[relay.attrs.ShapeOfAttrs][56]) /* ty=Tensor[(2), int64] */;
  let %in_shape_129: Tensor[(1), int64] = vm.shape_of(%x457, meta[relay.attrs.ShapeOfAttrs][57]) /* ty=Tensor[(1), int64] */;
  let %storage_0480: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][491]) /* ty=Storage[] */;
  let %tensor_0429: Tensor[(2), int64] = memory.alloc_tensor(%storage_0480, 0 /* ty=int64 */, meta[relay.Constant][491] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][491]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_052: Tensor[(2), int64] = %tensor_0429;
  %2289 = fn (%p0426: Tensor[(?, ?), float32], %p1255: Tensor[(?), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    %2287 = cast(%p1255, dtype="int64") /* ty=Tensor[(?), int64] */;
    %2288 = (%p0426, %2287);
    adv_index(%2288) /* ty=Tensor[(?, ?), float32] */
  };
  %2290 = (%in_shape_047, %in_shape_129);
  %2291 = (%shape_func_out_052,);
  let %shape_func52: () = vm.shape_func(%2289, %2290, %2291, meta[relay.attrs.ShapeFuncAttrs][52]) /* ty=() */;
  let %storage_0481: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][492]) /* ty=Storage[] */;
  let %tensor_0430: int64 = memory.alloc_tensor(%storage_0481, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][492]) /* ty=int64 */;
  %2292 = fn (%p0427: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0427) /* ty=int64 */
  };
  %2293 = (%shape_func_out_052,);
  %2294 = (%tensor_0430,);
  let %v428: () = vm.invoke_tvm_op(%2292, %2293, %2294) /* ty=() */;
  let %storage_0482: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][493]) /* ty=Storage[] */;
  let %tensor_0431: int64 = memory.alloc_tensor(%storage_0482, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][493]) /* ty=int64 */;
  %2295 = fn (%p0428: int64, Primitive=1) -> int64 {
    multiply(%p0428, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2296 = (%tensor_0430,);
  %2297 = (%tensor_0431,);
  let %v429: () = vm.invoke_tvm_op(%2295, %2296, %2297) /* ty=() */;
  let %storage_0483: Storage[] = memory.alloc_storage(%tensor_0431, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][494]) /* ty=Storage[] */;
  let %out_051: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0483, 0 /* ty=int64 */, %shape_func_out_052, meta[relay.attrs.AllocTensorAttrs][494]) /* ty=Tensor[(?, ?), float32] */;
  %2298 = (%x451, %x457);
  %2299 = (%out_051,);
  let %v430: () = vm.invoke_tvm_op(%2289, %2298, %2299) /* ty=() */;
  let %x459: Tensor[(?, ?), float32] = %out_051;
  let %in_shape_130: Tensor[(2), int64] = vm.shape_of(%x459, meta[relay.attrs.ShapeOfAttrs][58]) /* ty=Tensor[(2), int64] */;
  let %storage_0484: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][495]) /* ty=Storage[] */;
  let %tensor_0432: Tensor[(4), int64] = memory.alloc_tensor(%storage_0484, 0 /* ty=int64 */, meta[relay.Constant][492] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][495]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_053: Tensor[(4), int64] = %tensor_0432;
  %2300 = fn (%p0429: Tensor[(1, 256, 100, 100), float32], %p1256: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    vision.roi_align(%p0429, %p1256, meta[relay.attrs.ROIAlignAttrs][1]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %2301 = (meta[relay.Constant][493] /* ty=Tensor[(4), int64] */, %in_shape_130);
  %2302 = (%shape_func_out_053,);
  let %shape_func53: () = vm.shape_func(%2300, %2301, %2302, meta[relay.attrs.ShapeFuncAttrs][53]) /* ty=() */;
  let %storage_0485: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][496]) /* ty=Storage[] */;
  let %tensor_0433: int64 = memory.alloc_tensor(%storage_0485, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][496]) /* ty=int64 */;
  %2303 = fn (%p0430: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0430) /* ty=int64 */
  };
  %2304 = (%shape_func_out_053,);
  %2305 = (%tensor_0433,);
  let %v431: () = vm.invoke_tvm_op(%2303, %2304, %2305) /* ty=() */;
  let %storage_0486: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][497]) /* ty=Storage[] */;
  let %tensor_0434: int64 = memory.alloc_tensor(%storage_0486, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][497]) /* ty=int64 */;
  %2306 = fn (%p0431: int64, Primitive=1) -> int64 {
    multiply(%p0431, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2307 = (%tensor_0433,);
  %2308 = (%tensor_0434,);
  let %v432: () = vm.invoke_tvm_op(%2306, %2307, %2308) /* ty=() */;
  let %storage_0487: Storage[] = memory.alloc_storage(%tensor_0434, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][498]) /* ty=Storage[] */;
  let %out_052: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0487, 0 /* ty=int64 */, %shape_func_out_053, meta[relay.attrs.AllocTensorAttrs][498]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %2309 = (%x371, %x459);
  %2310 = (%out_052,);
  let %v433: () = vm.invoke_tvm_op(%2300, %2309, %2310) /* ty=() */;
  let %x460: Tensor[(?, 256, 7, 7), float32] = %out_052;
  let %in_shape_048: Tensor[(4), int64] = vm.shape_of(%x454, meta[relay.attrs.ShapeOfAttrs][59]) /* ty=Tensor[(4), int64] */;
  let %in_shape_131: Tensor[(4), int64] = vm.shape_of(%x458, meta[relay.attrs.ShapeOfAttrs][60]) /* ty=Tensor[(4), int64] */;
  let %in_shape_219: Tensor[(4), int64] = vm.shape_of(%x460, meta[relay.attrs.ShapeOfAttrs][61]) /* ty=Tensor[(4), int64] */;
  let %storage_0488: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][499]) /* ty=Storage[] */;
  let %tensor_0435: Tensor[(4), int64] = memory.alloc_tensor(%storage_0488, 0 /* ty=int64 */, meta[relay.Constant][494] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][499]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_054: Tensor[(4), int64] = %tensor_0435;
  %2311 = fn (%p0432: Tensor[(?, 256, 7, 7), float32], %p1257: Tensor[(?, 256, 7, 7), int32], %p2123: Tensor[(?, 256, 7, 7), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    scatter(%p0432, %p1257, %p2123, meta[relay.attrs.ScatterAttrs][6]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %2312 = (%in_shape_048, %in_shape_131, %in_shape_219);
  %2313 = (%shape_func_out_054,);
  let %shape_func54: () = vm.shape_func(%2311, %2312, %2313, meta[relay.attrs.ShapeFuncAttrs][54]) /* ty=() */;
  let %storage_0489: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][500]) /* ty=Storage[] */;
  let %tensor_0436: int64 = memory.alloc_tensor(%storage_0489, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][500]) /* ty=int64 */;
  %2314 = fn (%p0433: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0433) /* ty=int64 */
  };
  %2315 = (%shape_func_out_054,);
  %2316 = (%tensor_0436,);
  let %v434: () = vm.invoke_tvm_op(%2314, %2315, %2316) /* ty=() */;
  let %storage_0490: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][501]) /* ty=Storage[] */;
  let %tensor_0437: int64 = memory.alloc_tensor(%storage_0490, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][501]) /* ty=int64 */;
  %2317 = fn (%p0434: int64, Primitive=1) -> int64 {
    multiply(%p0434, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2318 = (%tensor_0436,);
  %2319 = (%tensor_0437,);
  let %v435: () = vm.invoke_tvm_op(%2317, %2318, %2319) /* ty=() */;
  let %storage_0491: Storage[] = memory.alloc_storage(%tensor_0437, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][502]) /* ty=Storage[] */;
  let %out_053: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0491, 0 /* ty=int64 */, %shape_func_out_054, meta[relay.attrs.AllocTensorAttrs][502]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %2320 = (%x454, %x458, %x460);
  %2321 = (%out_053,);
  let %v436: () = vm.invoke_tvm_op(%2311, %2320, %2321) /* ty=() */;
  let %x461: Tensor[(?, 256, 7, 7), float32] = %out_053;
  let %in_shape_049: Tensor[(1), int64] = vm.shape_of(%x435, meta[relay.attrs.ShapeOfAttrs][62]) /* ty=Tensor[(1), int64] */;
  let %storage_0492: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][503]) /* ty=Storage[] */;
  let %tensor_0438: Tensor[(1), int64] = memory.alloc_tensor(%storage_0492, 0 /* ty=int64 */, meta[relay.Constant][495] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][503]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_055: Tensor[(1), int64] = %tensor_0438;
  %2322 = fn (%p0435: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0435, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %2323 = (%in_shape_049,);
  %2324 = (%shape_func_out_055,);
  let %shape_func55: () = vm.shape_func(%2322, %2323, %2324, meta[relay.attrs.ShapeFuncAttrs][55]) /* ty=() */;
  let %storage_0493: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][504]) /* ty=Storage[] */;
  let %tensor_0439: int64 = memory.alloc_tensor(%storage_0493, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][504]) /* ty=int64 */;
  %2325 = fn (%p0436: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0436) /* ty=int64 */
  };
  %2326 = (%shape_func_out_055,);
  %2327 = (%tensor_0439,);
  let %v437: () = vm.invoke_tvm_op(%2325, %2326, %2327) /* ty=() */;
  let %storage_0494: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][505]) /* ty=Storage[] */;
  let %tensor_0440: int64 = memory.alloc_tensor(%storage_0494, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][505]) /* ty=int64 */;
  %2328 = fn (%p0437: int64, Primitive=1) -> int64 {
    multiply(%p0437, 1 /* ty=int64 */) /* ty=int64 */
  };
  %2329 = (%tensor_0439,);
  %2330 = (%tensor_0440,);
  let %v438: () = vm.invoke_tvm_op(%2328, %2329, %2330) /* ty=() */;
  let %storage_0495: Storage[] = memory.alloc_storage(%tensor_0440, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][506]) /* ty=Storage[] */;
  let %out_054: Tensor[(?), bool] = memory.alloc_tensor(%storage_0495, 0 /* ty=int64 */, %shape_func_out_055, meta[relay.attrs.AllocTensorAttrs][506]) /* ty=Tensor[(?), bool] */;
  %2331 = (%x435,);
  %2332 = (%out_054,);
  let %v439: () = vm.invoke_tvm_op(%2322, %2331, %2332) /* ty=() */;
  let %x462: Tensor[(?), bool] = %out_054;
  let %in_shape_050: Tensor[(?), bool] = device_copy(%x462, meta[relay.attrs.DeviceCopyAttrs][57]) /* ty=Tensor[(?), bool] */;
  let %storage_0496: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][507]) /* ty=Storage[] */;
  let %tensor_0441: Tensor[(2), int64] = memory.alloc_tensor(%storage_0496, 0 /* ty=int64 */, meta[relay.Constant][496] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][507]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_056: Tensor[(2), int64] = %tensor_0441;
  %2333 = fn (%p0438: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0438) /* ty=Tensor[(?, 1), int32] */
  };
  %2334 = (%in_shape_050,);
  %2335 = (%shape_func_out_056,);
  let %shape_func56: () = vm.shape_func(%2333, %2334, %2335, meta[relay.attrs.ShapeFuncAttrs][56]) /* ty=() */;
  let %storage_0497: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][508]) /* ty=Storage[] */;
  let %tensor_0442: int64 = memory.alloc_tensor(%storage_0497, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][508]) /* ty=int64 */;
  %2336 = fn (%p0439: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0439) /* ty=int64 */
  };
  %2337 = (%shape_func_out_056,);
  %2338 = (%tensor_0442,);
  let %v440: () = vm.invoke_tvm_op(%2336, %2337, %2338) /* ty=() */;
  let %storage_0498: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][509]) /* ty=Storage[] */;
  let %tensor_0443: int64 = memory.alloc_tensor(%storage_0498, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][509]) /* ty=int64 */;
  %2339 = fn (%p0440: int64, Primitive=1) -> int64 {
    multiply(%p0440, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2340 = (%tensor_0442,);
  %2341 = (%tensor_0443,);
  let %v441: () = vm.invoke_tvm_op(%2339, %2340, %2341) /* ty=() */;
  let %storage_0499: Storage[] = memory.alloc_storage(%tensor_0443, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][510]) /* ty=Storage[] */;
  let %out_055: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0499, 0 /* ty=int64 */, %shape_func_out_056, meta[relay.attrs.AllocTensorAttrs][510]) /* ty=Tensor[(?, 1), int32] */;
  %2342 = (%x462,);
  %2343 = (%out_055,);
  let %v442: () = vm.invoke_tvm_op(%2333, %2342, %2343) /* ty=() */;
  let %x463: Tensor[(?, 1), int32] = %out_055;
  let %in_shape_051: Tensor[(2), int64] = vm.shape_of(%x463, meta[relay.attrs.ShapeOfAttrs][63]) /* ty=Tensor[(2), int64] */;
  let %storage_0500: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][511]) /* ty=Storage[] */;
  let %tensor_0444: Tensor[(1), int64] = memory.alloc_tensor(%storage_0500, 0 /* ty=int64 */, meta[relay.Constant][497] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][511]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_057: Tensor[(1), int64] = %tensor_0444;
  %2346 = fn (%p0441: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %2344 = split(%p0441, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %2345 = %2344.0;
    squeeze(%2345, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %2347 = (%in_shape_051,);
  %2348 = (%shape_func_out_057,);
  let %shape_func57: () = vm.shape_func(%2346, %2347, %2348, meta[relay.attrs.ShapeFuncAttrs][57]) /* ty=() */;
  let %storage_0501: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][512]) /* ty=Storage[] */;
  let %tensor_0445: int64 = memory.alloc_tensor(%storage_0501, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][512]) /* ty=int64 */;
  %2349 = fn (%p0442: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0442) /* ty=int64 */
  };
  %2350 = (%shape_func_out_057,);
  %2351 = (%tensor_0445,);
  let %v443: () = vm.invoke_tvm_op(%2349, %2350, %2351) /* ty=() */;
  let %storage_0502: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][513]) /* ty=Storage[] */;
  let %tensor_0446: int64 = memory.alloc_tensor(%storage_0502, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][513]) /* ty=int64 */;
  %2352 = fn (%p0443: int64, Primitive=1) -> int64 {
    multiply(%p0443, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2353 = (%tensor_0445,);
  %2354 = (%tensor_0446,);
  let %v444: () = vm.invoke_tvm_op(%2352, %2353, %2354) /* ty=() */;
  let %storage_0503: Storage[] = memory.alloc_storage(%tensor_0446, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][514]) /* ty=Storage[] */;
  let %out_056: Tensor[(?), int32] = memory.alloc_tensor(%storage_0503, 0 /* ty=int64 */, %shape_func_out_057, meta[relay.attrs.AllocTensorAttrs][514]) /* ty=Tensor[(?), int32] */;
  %2355 = (%x463,);
  %2356 = (%out_056,);
  let %v445: () = vm.invoke_tvm_op(%2346, %2355, %2356) /* ty=() */;
  let %x464: Tensor[(?), int32] = %out_056;
  let %in_shape_052: Tensor[(1), int64] = vm.shape_of(%x464, meta[relay.attrs.ShapeOfAttrs][64]) /* ty=Tensor[(1), int64] */;
  let %storage_0504: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][515]) /* ty=Storage[] */;
  let %tensor_0447: Tensor[(4), int64] = memory.alloc_tensor(%storage_0504, 0 /* ty=int64 */, meta[relay.Constant][498] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][515]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_058: Tensor[(4), int64] = %tensor_0447;
  %2360 = fn (%p0444: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 7, 7), int32] {
    %2357 = reshape(%p0444, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %2358 = repeat(%2357, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %2359 = repeat(%2358, repeats=7, axis=2) /* ty=Tensor[(?, 256, 7, 1), int32] */;
    repeat(%2359, repeats=7, axis=3) /* ty=Tensor[(?, 256, 7, 7), int32] */
  };
  %2361 = (%in_shape_052,);
  %2362 = (%shape_func_out_058,);
  let %shape_func58: () = vm.shape_func(%2360, %2361, %2362, meta[relay.attrs.ShapeFuncAttrs][58]) /* ty=() */;
  let %storage_0505: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][516]) /* ty=Storage[] */;
  let %tensor_0448: int64 = memory.alloc_tensor(%storage_0505, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][516]) /* ty=int64 */;
  %2363 = fn (%p0445: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0445) /* ty=int64 */
  };
  %2364 = (%shape_func_out_058,);
  %2365 = (%tensor_0448,);
  let %v446: () = vm.invoke_tvm_op(%2363, %2364, %2365) /* ty=() */;
  let %storage_0506: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][517]) /* ty=Storage[] */;
  let %tensor_0449: int64 = memory.alloc_tensor(%storage_0506, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][517]) /* ty=int64 */;
  %2366 = fn (%p0446: int64, Primitive=1) -> int64 {
    multiply(%p0446, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2367 = (%tensor_0448,);
  %2368 = (%tensor_0449,);
  let %v447: () = vm.invoke_tvm_op(%2366, %2367, %2368) /* ty=() */;
  let %storage_0507: Storage[] = memory.alloc_storage(%tensor_0449, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][518]) /* ty=Storage[] */;
  let %out_057: Tensor[(?, 256, 7, 7), int32] = memory.alloc_tensor(%storage_0507, 0 /* ty=int64 */, %shape_func_out_058, meta[relay.attrs.AllocTensorAttrs][518]) /* ty=Tensor[(?, 256, 7, 7), int32] */;
  %2369 = (%x464,);
  %2370 = (%out_057,);
  let %v448: () = vm.invoke_tvm_op(%2360, %2369, %2370) /* ty=() */;
  let %x465: Tensor[(?, 256, 7, 7), int32] = %out_057;
  let %in_shape_053: Tensor[(2), int64] = vm.shape_of(%x451, meta[relay.attrs.ShapeOfAttrs][65]) /* ty=Tensor[(2), int64] */;
  let %in_shape_132: Tensor[(1), int64] = vm.shape_of(%x464, meta[relay.attrs.ShapeOfAttrs][66]) /* ty=Tensor[(1), int64] */;
  let %storage_0508: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][519]) /* ty=Storage[] */;
  let %tensor_0450: Tensor[(2), int64] = memory.alloc_tensor(%storage_0508, 0 /* ty=int64 */, meta[relay.Constant][499] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][519]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_059: Tensor[(2), int64] = %tensor_0450;
  %2373 = fn (%p0447: Tensor[(?, ?), float32], %p1258: Tensor[(?), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    %2371 = cast(%p1258, dtype="int64") /* ty=Tensor[(?), int64] */;
    %2372 = (%p0447, %2371);
    adv_index(%2372) /* ty=Tensor[(?, ?), float32] */
  };
  %2374 = (%in_shape_053, %in_shape_132);
  %2375 = (%shape_func_out_059,);
  let %shape_func59: () = vm.shape_func(%2373, %2374, %2375, meta[relay.attrs.ShapeFuncAttrs][59]) /* ty=() */;
  let %storage_0509: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][520]) /* ty=Storage[] */;
  let %tensor_0451: int64 = memory.alloc_tensor(%storage_0509, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][520]) /* ty=int64 */;
  %2376 = fn (%p0448: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0448) /* ty=int64 */
  };
  %2377 = (%shape_func_out_059,);
  %2378 = (%tensor_0451,);
  let %v449: () = vm.invoke_tvm_op(%2376, %2377, %2378) /* ty=() */;
  let %storage_0510: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][521]) /* ty=Storage[] */;
  let %tensor_0452: int64 = memory.alloc_tensor(%storage_0510, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][521]) /* ty=int64 */;
  %2379 = fn (%p0449: int64, Primitive=1) -> int64 {
    multiply(%p0449, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2380 = (%tensor_0451,);
  %2381 = (%tensor_0452,);
  let %v450: () = vm.invoke_tvm_op(%2379, %2380, %2381) /* ty=() */;
  let %storage_0511: Storage[] = memory.alloc_storage(%tensor_0452, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][522]) /* ty=Storage[] */;
  let %out_058: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0511, 0 /* ty=int64 */, %shape_func_out_059, meta[relay.attrs.AllocTensorAttrs][522]) /* ty=Tensor[(?, ?), float32] */;
  %2382 = (%x451, %x464);
  %2383 = (%out_058,);
  let %v451: () = vm.invoke_tvm_op(%2373, %2382, %2383) /* ty=() */;
  let %x466: Tensor[(?, ?), float32] = %out_058;
  let %in_shape_133: Tensor[(2), int64] = vm.shape_of(%x466, meta[relay.attrs.ShapeOfAttrs][67]) /* ty=Tensor[(2), int64] */;
  let %storage_0512: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][523]) /* ty=Storage[] */;
  let %tensor_0453: Tensor[(4), int64] = memory.alloc_tensor(%storage_0512, 0 /* ty=int64 */, meta[relay.Constant][500] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][523]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_060: Tensor[(4), int64] = %tensor_0453;
  %2384 = fn (%p0450: Tensor[(1, 256, 50, 50), float32], %p1259: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    vision.roi_align(%p0450, %p1259, meta[relay.attrs.ROIAlignAttrs][2]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %2385 = (meta[relay.Constant][501] /* ty=Tensor[(4), int64] */, %in_shape_133);
  %2386 = (%shape_func_out_060,);
  let %shape_func60: () = vm.shape_func(%2384, %2385, %2386, meta[relay.attrs.ShapeFuncAttrs][60]) /* ty=() */;
  let %storage_0513: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][524]) /* ty=Storage[] */;
  let %tensor_0454: int64 = memory.alloc_tensor(%storage_0513, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][524]) /* ty=int64 */;
  %2387 = fn (%p0451: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0451) /* ty=int64 */
  };
  %2388 = (%shape_func_out_060,);
  %2389 = (%tensor_0454,);
  let %v452: () = vm.invoke_tvm_op(%2387, %2388, %2389) /* ty=() */;
  let %storage_0514: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][525]) /* ty=Storage[] */;
  let %tensor_0455: int64 = memory.alloc_tensor(%storage_0514, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][525]) /* ty=int64 */;
  %2390 = fn (%p0452: int64, Primitive=1) -> int64 {
    multiply(%p0452, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2391 = (%tensor_0454,);
  %2392 = (%tensor_0455,);
  let %v453: () = vm.invoke_tvm_op(%2390, %2391, %2392) /* ty=() */;
  let %storage_0515: Storage[] = memory.alloc_storage(%tensor_0455, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][526]) /* ty=Storage[] */;
  let %out_059: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0515, 0 /* ty=int64 */, %shape_func_out_060, meta[relay.attrs.AllocTensorAttrs][526]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %2393 = (%x374, %x466);
  %2394 = (%out_059,);
  let %v454: () = vm.invoke_tvm_op(%2384, %2393, %2394) /* ty=() */;
  let %x467: Tensor[(?, 256, 7, 7), float32] = %out_059;
  let %in_shape_054: Tensor[(4), int64] = vm.shape_of(%x461, meta[relay.attrs.ShapeOfAttrs][68]) /* ty=Tensor[(4), int64] */;
  let %in_shape_134: Tensor[(4), int64] = vm.shape_of(%x465, meta[relay.attrs.ShapeOfAttrs][69]) /* ty=Tensor[(4), int64] */;
  let %in_shape_220: Tensor[(4), int64] = vm.shape_of(%x467, meta[relay.attrs.ShapeOfAttrs][70]) /* ty=Tensor[(4), int64] */;
  let %storage_0516: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][527]) /* ty=Storage[] */;
  let %tensor_0456: Tensor[(4), int64] = memory.alloc_tensor(%storage_0516, 0 /* ty=int64 */, meta[relay.Constant][502] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][527]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_061: Tensor[(4), int64] = %tensor_0456;
  %2395 = fn (%p0453: Tensor[(?, 256, 7, 7), float32], %p1260: Tensor[(?, 256, 7, 7), int32], %p2124: Tensor[(?, 256, 7, 7), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    scatter(%p0453, %p1260, %p2124, meta[relay.attrs.ScatterAttrs][7]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %2396 = (%in_shape_054, %in_shape_134, %in_shape_220);
  %2397 = (%shape_func_out_061,);
  let %shape_func61: () = vm.shape_func(%2395, %2396, %2397, meta[relay.attrs.ShapeFuncAttrs][61]) /* ty=() */;
  let %storage_0517: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][528]) /* ty=Storage[] */;
  let %tensor_0457: int64 = memory.alloc_tensor(%storage_0517, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][528]) /* ty=int64 */;
  %2398 = fn (%p0454: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0454) /* ty=int64 */
  };
  %2399 = (%shape_func_out_061,);
  %2400 = (%tensor_0457,);
  let %v455: () = vm.invoke_tvm_op(%2398, %2399, %2400) /* ty=() */;
  let %storage_0518: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][529]) /* ty=Storage[] */;
  let %tensor_0458: int64 = memory.alloc_tensor(%storage_0518, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][529]) /* ty=int64 */;
  %2401 = fn (%p0455: int64, Primitive=1) -> int64 {
    multiply(%p0455, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2402 = (%tensor_0457,);
  %2403 = (%tensor_0458,);
  let %v456: () = vm.invoke_tvm_op(%2401, %2402, %2403) /* ty=() */;
  let %storage_0519: Storage[] = memory.alloc_storage(%tensor_0458, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][530]) /* ty=Storage[] */;
  let %out_060: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0519, 0 /* ty=int64 */, %shape_func_out_061, meta[relay.attrs.AllocTensorAttrs][530]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %2404 = (%x461, %x465, %x467);
  %2405 = (%out_060,);
  let %v457: () = vm.invoke_tvm_op(%2395, %2404, %2405) /* ty=() */;
  let %x468: Tensor[(?, 256, 7, 7), float32] = %out_060;
  let %in_shape_055: Tensor[(1), int64] = vm.shape_of(%x435, meta[relay.attrs.ShapeOfAttrs][71]) /* ty=Tensor[(1), int64] */;
  let %storage_0520: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][531]) /* ty=Storage[] */;
  let %tensor_0459: Tensor[(1), int64] = memory.alloc_tensor(%storage_0520, 0 /* ty=int64 */, meta[relay.Constant][503] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][531]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_062: Tensor[(1), int64] = %tensor_0459;
  %2406 = fn (%p0456: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0456, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %2407 = (%in_shape_055,);
  %2408 = (%shape_func_out_062,);
  let %shape_func62: () = vm.shape_func(%2406, %2407, %2408, meta[relay.attrs.ShapeFuncAttrs][62]) /* ty=() */;
  let %storage_0521: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][532]) /* ty=Storage[] */;
  let %tensor_0460: int64 = memory.alloc_tensor(%storage_0521, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][532]) /* ty=int64 */;
  %2409 = fn (%p0457: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0457) /* ty=int64 */
  };
  %2410 = (%shape_func_out_062,);
  %2411 = (%tensor_0460,);
  let %v458: () = vm.invoke_tvm_op(%2409, %2410, %2411) /* ty=() */;
  let %storage_0522: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][533]) /* ty=Storage[] */;
  let %tensor_0461: int64 = memory.alloc_tensor(%storage_0522, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][533]) /* ty=int64 */;
  %2412 = fn (%p0458: int64, Primitive=1) -> int64 {
    multiply(%p0458, 1 /* ty=int64 */) /* ty=int64 */
  };
  %2413 = (%tensor_0460,);
  %2414 = (%tensor_0461,);
  let %v459: () = vm.invoke_tvm_op(%2412, %2413, %2414) /* ty=() */;
  let %storage_0523: Storage[] = memory.alloc_storage(%tensor_0461, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][534]) /* ty=Storage[] */;
  let %out_061: Tensor[(?), bool] = memory.alloc_tensor(%storage_0523, 0 /* ty=int64 */, %shape_func_out_062, meta[relay.attrs.AllocTensorAttrs][534]) /* ty=Tensor[(?), bool] */;
  %2415 = (%x435,);
  %2416 = (%out_061,);
  let %v460: () = vm.invoke_tvm_op(%2406, %2415, %2416) /* ty=() */;
  let %x469: Tensor[(?), bool] = %out_061;
  let %in_shape_056: Tensor[(?), bool] = device_copy(%x469, meta[relay.attrs.DeviceCopyAttrs][58]) /* ty=Tensor[(?), bool] */;
  let %storage_0524: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][535]) /* ty=Storage[] */;
  let %tensor_0462: Tensor[(2), int64] = memory.alloc_tensor(%storage_0524, 0 /* ty=int64 */, meta[relay.Constant][504] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][535]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_063: Tensor[(2), int64] = %tensor_0462;
  %2417 = fn (%p0459: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0459) /* ty=Tensor[(?, 1), int32] */
  };
  %2418 = (%in_shape_056,);
  %2419 = (%shape_func_out_063,);
  let %shape_func63: () = vm.shape_func(%2417, %2418, %2419, meta[relay.attrs.ShapeFuncAttrs][63]) /* ty=() */;
  let %storage_0525: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][536]) /* ty=Storage[] */;
  let %tensor_0463: int64 = memory.alloc_tensor(%storage_0525, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][536]) /* ty=int64 */;
  %2420 = fn (%p0460: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0460) /* ty=int64 */
  };
  %2421 = (%shape_func_out_063,);
  %2422 = (%tensor_0463,);
  let %v461: () = vm.invoke_tvm_op(%2420, %2421, %2422) /* ty=() */;
  let %storage_0526: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][537]) /* ty=Storage[] */;
  let %tensor_0464: int64 = memory.alloc_tensor(%storage_0526, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][537]) /* ty=int64 */;
  %2423 = fn (%p0461: int64, Primitive=1) -> int64 {
    multiply(%p0461, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2424 = (%tensor_0463,);
  %2425 = (%tensor_0464,);
  let %v462: () = vm.invoke_tvm_op(%2423, %2424, %2425) /* ty=() */;
  let %storage_0527: Storage[] = memory.alloc_storage(%tensor_0464, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][538]) /* ty=Storage[] */;
  let %out_062: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0527, 0 /* ty=int64 */, %shape_func_out_063, meta[relay.attrs.AllocTensorAttrs][538]) /* ty=Tensor[(?, 1), int32] */;
  %2426 = (%x469,);
  %2427 = (%out_062,);
  let %v463: () = vm.invoke_tvm_op(%2417, %2426, %2427) /* ty=() */;
  let %x470: Tensor[(?, 1), int32] = %out_062;
  let %in_shape_057: Tensor[(2), int64] = vm.shape_of(%x470, meta[relay.attrs.ShapeOfAttrs][72]) /* ty=Tensor[(2), int64] */;
  let %storage_0528: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][539]) /* ty=Storage[] */;
  let %tensor_0465: Tensor[(1), int64] = memory.alloc_tensor(%storage_0528, 0 /* ty=int64 */, meta[relay.Constant][505] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][539]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_064: Tensor[(1), int64] = %tensor_0465;
  %2430 = fn (%p0462: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %2428 = split(%p0462, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %2429 = %2428.0;
    squeeze(%2429, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %2431 = (%in_shape_057,);
  %2432 = (%shape_func_out_064,);
  let %shape_func64: () = vm.shape_func(%2430, %2431, %2432, meta[relay.attrs.ShapeFuncAttrs][64]) /* ty=() */;
  let %storage_0529: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][540]) /* ty=Storage[] */;
  let %tensor_0466: int64 = memory.alloc_tensor(%storage_0529, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][540]) /* ty=int64 */;
  %2433 = fn (%p0463: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0463) /* ty=int64 */
  };
  %2434 = (%shape_func_out_064,);
  %2435 = (%tensor_0466,);
  let %v464: () = vm.invoke_tvm_op(%2433, %2434, %2435) /* ty=() */;
  let %storage_0530: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][541]) /* ty=Storage[] */;
  let %tensor_0467: int64 = memory.alloc_tensor(%storage_0530, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][541]) /* ty=int64 */;
  %2436 = fn (%p0464: int64, Primitive=1) -> int64 {
    multiply(%p0464, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2437 = (%tensor_0466,);
  %2438 = (%tensor_0467,);
  let %v465: () = vm.invoke_tvm_op(%2436, %2437, %2438) /* ty=() */;
  let %storage_0531: Storage[] = memory.alloc_storage(%tensor_0467, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][542]) /* ty=Storage[] */;
  let %out_063: Tensor[(?), int32] = memory.alloc_tensor(%storage_0531, 0 /* ty=int64 */, %shape_func_out_064, meta[relay.attrs.AllocTensorAttrs][542]) /* ty=Tensor[(?), int32] */;
  %2439 = (%x470,);
  %2440 = (%out_063,);
  let %v466: () = vm.invoke_tvm_op(%2430, %2439, %2440) /* ty=() */;
  let %x471: Tensor[(?), int32] = %out_063;
  let %in_shape_058: Tensor[(1), int64] = vm.shape_of(%x471, meta[relay.attrs.ShapeOfAttrs][73]) /* ty=Tensor[(1), int64] */;
  let %storage_0532: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][543]) /* ty=Storage[] */;
  let %tensor_0468: Tensor[(4), int64] = memory.alloc_tensor(%storage_0532, 0 /* ty=int64 */, meta[relay.Constant][506] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][543]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_065: Tensor[(4), int64] = %tensor_0468;
  %2444 = fn (%p0465: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 7, 7), int32] {
    %2441 = reshape(%p0465, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %2442 = repeat(%2441, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %2443 = repeat(%2442, repeats=7, axis=2) /* ty=Tensor[(?, 256, 7, 1), int32] */;
    repeat(%2443, repeats=7, axis=3) /* ty=Tensor[(?, 256, 7, 7), int32] */
  };
  %2445 = (%in_shape_058,);
  %2446 = (%shape_func_out_065,);
  let %shape_func65: () = vm.shape_func(%2444, %2445, %2446, meta[relay.attrs.ShapeFuncAttrs][65]) /* ty=() */;
  let %storage_0533: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][544]) /* ty=Storage[] */;
  let %tensor_0469: int64 = memory.alloc_tensor(%storage_0533, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][544]) /* ty=int64 */;
  %2447 = fn (%p0466: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0466) /* ty=int64 */
  };
  %2448 = (%shape_func_out_065,);
  %2449 = (%tensor_0469,);
  let %v467: () = vm.invoke_tvm_op(%2447, %2448, %2449) /* ty=() */;
  let %storage_0534: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][545]) /* ty=Storage[] */;
  let %tensor_0470: int64 = memory.alloc_tensor(%storage_0534, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][545]) /* ty=int64 */;
  %2450 = fn (%p0467: int64, Primitive=1) -> int64 {
    multiply(%p0467, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2451 = (%tensor_0469,);
  %2452 = (%tensor_0470,);
  let %v468: () = vm.invoke_tvm_op(%2450, %2451, %2452) /* ty=() */;
  let %storage_0535: Storage[] = memory.alloc_storage(%tensor_0470, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][546]) /* ty=Storage[] */;
  let %out_064: Tensor[(?, 256, 7, 7), int32] = memory.alloc_tensor(%storage_0535, 0 /* ty=int64 */, %shape_func_out_065, meta[relay.attrs.AllocTensorAttrs][546]) /* ty=Tensor[(?, 256, 7, 7), int32] */;
  %2453 = (%x471,);
  %2454 = (%out_064,);
  let %v469: () = vm.invoke_tvm_op(%2444, %2453, %2454) /* ty=() */;
  let %x472: Tensor[(?, 256, 7, 7), int32] = %out_064;
  let %in_shape_059: Tensor[(2), int64] = vm.shape_of(%x451, meta[relay.attrs.ShapeOfAttrs][74]) /* ty=Tensor[(2), int64] */;
  let %in_shape_135: Tensor[(1), int64] = vm.shape_of(%x471, meta[relay.attrs.ShapeOfAttrs][75]) /* ty=Tensor[(1), int64] */;
  let %storage_0536: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][547]) /* ty=Storage[] */;
  let %tensor_0471: Tensor[(2), int64] = memory.alloc_tensor(%storage_0536, 0 /* ty=int64 */, meta[relay.Constant][507] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][547]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_066: Tensor[(2), int64] = %tensor_0471;
  %2457 = fn (%p0468: Tensor[(?, ?), float32], %p1261: Tensor[(?), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    %2455 = cast(%p1261, dtype="int64") /* ty=Tensor[(?), int64] */;
    %2456 = (%p0468, %2455);
    adv_index(%2456) /* ty=Tensor[(?, ?), float32] */
  };
  %2458 = (%in_shape_059, %in_shape_135);
  %2459 = (%shape_func_out_066,);
  let %shape_func66: () = vm.shape_func(%2457, %2458, %2459, meta[relay.attrs.ShapeFuncAttrs][66]) /* ty=() */;
  let %storage_0537: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][548]) /* ty=Storage[] */;
  let %tensor_0472: int64 = memory.alloc_tensor(%storage_0537, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][548]) /* ty=int64 */;
  %2460 = fn (%p0469: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0469) /* ty=int64 */
  };
  %2461 = (%shape_func_out_066,);
  %2462 = (%tensor_0472,);
  let %v470: () = vm.invoke_tvm_op(%2460, %2461, %2462) /* ty=() */;
  let %storage_0538: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][549]) /* ty=Storage[] */;
  let %tensor_0473: int64 = memory.alloc_tensor(%storage_0538, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][549]) /* ty=int64 */;
  %2463 = fn (%p0470: int64, Primitive=1) -> int64 {
    multiply(%p0470, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2464 = (%tensor_0472,);
  %2465 = (%tensor_0473,);
  let %v471: () = vm.invoke_tvm_op(%2463, %2464, %2465) /* ty=() */;
  let %storage_0539: Storage[] = memory.alloc_storage(%tensor_0473, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][550]) /* ty=Storage[] */;
  let %out_065: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0539, 0 /* ty=int64 */, %shape_func_out_066, meta[relay.attrs.AllocTensorAttrs][550]) /* ty=Tensor[(?, ?), float32] */;
  %2466 = (%x451, %x471);
  %2467 = (%out_065,);
  let %v472: () = vm.invoke_tvm_op(%2457, %2466, %2467) /* ty=() */;
  let %x473: Tensor[(?, ?), float32] = %out_065;
  let %in_shape_136: Tensor[(2), int64] = vm.shape_of(%x473, meta[relay.attrs.ShapeOfAttrs][76]) /* ty=Tensor[(2), int64] */;
  let %storage_0540: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][551]) /* ty=Storage[] */;
  let %tensor_0474: Tensor[(4), int64] = memory.alloc_tensor(%storage_0540, 0 /* ty=int64 */, meta[relay.Constant][508] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][551]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_067: Tensor[(4), int64] = %tensor_0474;
  %2468 = fn (%p0471: Tensor[(1, 256, 25, 25), float32], %p1262: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    vision.roi_align(%p0471, %p1262, meta[relay.attrs.ROIAlignAttrs][3]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %2469 = (meta[relay.Constant][509] /* ty=Tensor[(4), int64] */, %in_shape_136);
  %2470 = (%shape_func_out_067,);
  let %shape_func67: () = vm.shape_func(%2468, %2469, %2470, meta[relay.attrs.ShapeFuncAttrs][67]) /* ty=() */;
  let %storage_0541: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][552]) /* ty=Storage[] */;
  let %tensor_0475: int64 = memory.alloc_tensor(%storage_0541, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][552]) /* ty=int64 */;
  %2471 = fn (%p0472: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0472) /* ty=int64 */
  };
  %2472 = (%shape_func_out_067,);
  %2473 = (%tensor_0475,);
  let %v473: () = vm.invoke_tvm_op(%2471, %2472, %2473) /* ty=() */;
  let %storage_0542: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][553]) /* ty=Storage[] */;
  let %tensor_0476: int64 = memory.alloc_tensor(%storage_0542, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][553]) /* ty=int64 */;
  %2474 = fn (%p0473: int64, Primitive=1) -> int64 {
    multiply(%p0473, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2475 = (%tensor_0475,);
  %2476 = (%tensor_0476,);
  let %v474: () = vm.invoke_tvm_op(%2474, %2475, %2476) /* ty=() */;
  let %storage_0543: Storage[] = memory.alloc_storage(%tensor_0476, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][554]) /* ty=Storage[] */;
  let %out_066: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0543, 0 /* ty=int64 */, %shape_func_out_067, meta[relay.attrs.AllocTensorAttrs][554]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %2477 = (%x377, %x473);
  %2478 = (%out_066,);
  let %v475: () = vm.invoke_tvm_op(%2468, %2477, %2478) /* ty=() */;
  let %x474: Tensor[(?, 256, 7, 7), float32] = %out_066;
  let %in_shape_060: Tensor[(4), int64] = vm.shape_of(%x468, meta[relay.attrs.ShapeOfAttrs][77]) /* ty=Tensor[(4), int64] */;
  let %in_shape_137: Tensor[(4), int64] = vm.shape_of(%x472, meta[relay.attrs.ShapeOfAttrs][78]) /* ty=Tensor[(4), int64] */;
  let %in_shape_221: Tensor[(4), int64] = vm.shape_of(%x474, meta[relay.attrs.ShapeOfAttrs][79]) /* ty=Tensor[(4), int64] */;
  let %storage_0544: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][555]) /* ty=Storage[] */;
  let %tensor_0477: Tensor[(4), int64] = memory.alloc_tensor(%storage_0544, 0 /* ty=int64 */, meta[relay.Constant][510] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][555]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_068: Tensor[(4), int64] = %tensor_0477;
  %2479 = fn (%p0474: Tensor[(?, 256, 7, 7), float32], %p1263: Tensor[(?, 256, 7, 7), int32], %p2125: Tensor[(?, 256, 7, 7), float32], Primitive=1) -> Tensor[(?, 256, 7, 7), float32] {
    scatter(%p0474, %p1263, %p2125, meta[relay.attrs.ScatterAttrs][8]) /* ty=Tensor[(?, 256, 7, 7), float32] */
  };
  %2480 = (%in_shape_060, %in_shape_137, %in_shape_221);
  %2481 = (%shape_func_out_068,);
  let %shape_func68: () = vm.shape_func(%2479, %2480, %2481, meta[relay.attrs.ShapeFuncAttrs][68]) /* ty=() */;
  let %storage_0545: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][556]) /* ty=Storage[] */;
  let %tensor_0478: int64 = memory.alloc_tensor(%storage_0545, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][556]) /* ty=int64 */;
  %2482 = fn (%p0475: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0475) /* ty=int64 */
  };
  %2483 = (%shape_func_out_068,);
  %2484 = (%tensor_0478,);
  let %v476: () = vm.invoke_tvm_op(%2482, %2483, %2484) /* ty=() */;
  let %storage_0546: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][557]) /* ty=Storage[] */;
  let %tensor_0479: int64 = memory.alloc_tensor(%storage_0546, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][557]) /* ty=int64 */;
  %2485 = fn (%p0476: int64, Primitive=1) -> int64 {
    multiply(%p0476, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2486 = (%tensor_0478,);
  %2487 = (%tensor_0479,);
  let %v477: () = vm.invoke_tvm_op(%2485, %2486, %2487) /* ty=() */;
  let %storage_0547: Storage[] = memory.alloc_storage(%tensor_0479, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][558]) /* ty=Storage[] */;
  let %out_067: Tensor[(?, 256, 7, 7), float32] = memory.alloc_tensor(%storage_0547, 0 /* ty=int64 */, %shape_func_out_068, meta[relay.attrs.AllocTensorAttrs][558]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %2488 = (%x468, %x472, %x474);
  %2489 = (%out_067,);
  let %v478: () = vm.invoke_tvm_op(%2479, %2488, %2489) /* ty=() */;
  let %x475: Tensor[(?, 256, 7, 7), float32] = %out_067;
  let %in_shape_061: Tensor[(4), int64] = vm.shape_of(%x475, meta[relay.attrs.ShapeOfAttrs][80]) /* ty=Tensor[(4), int64] */;
  let %storage_0548: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][559]) /* ty=Storage[] */;
  let %tensor_0480: Tensor[(2), int64] = memory.alloc_tensor(%storage_0548, 0 /* ty=int64 */, meta[relay.Constant][511] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][559]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_069: Tensor[(2), int64] = %tensor_0480;
  %2491 = fn (%p0477: Tensor[(?, 256, 7, 7), float32], Primitive=1) -> Tensor[(?, 12544), float32] {
    %2490 = reshape(%p0477, newshape=[0, -1, 1, 1]) /* ty=Tensor[(?, 12544, 1, 1), float32] */;
    squeeze(%2490, axis=[2, 3]) /* ty=Tensor[(?, 12544), float32] */
  };
  %2492 = (%in_shape_061,);
  %2493 = (%shape_func_out_069,);
  let %shape_func69: () = vm.shape_func(%2491, %2492, %2493, meta[relay.attrs.ShapeFuncAttrs][69]) /* ty=() */;
  let %storage_0549: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][560]) /* ty=Storage[] */;
  let %tensor_0481: int64 = memory.alloc_tensor(%storage_0549, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][560]) /* ty=int64 */;
  %2494 = fn (%p0478: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0478) /* ty=int64 */
  };
  %2495 = (%shape_func_out_069,);
  %2496 = (%tensor_0481,);
  let %v479: () = vm.invoke_tvm_op(%2494, %2495, %2496) /* ty=() */;
  let %storage_0550: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][561]) /* ty=Storage[] */;
  let %tensor_0482: int64 = memory.alloc_tensor(%storage_0550, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][561]) /* ty=int64 */;
  %2497 = fn (%p0479: int64, Primitive=1) -> int64 {
    multiply(%p0479, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2498 = (%tensor_0481,);
  %2499 = (%tensor_0482,);
  let %v480: () = vm.invoke_tvm_op(%2497, %2498, %2499) /* ty=() */;
  let %storage_0551: Storage[] = memory.alloc_storage(%tensor_0482, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][562]) /* ty=Storage[] */;
  let %out_068: Tensor[(?, 12544), float32] = memory.alloc_tensor(%storage_0551, 0 /* ty=int64 */, %shape_func_out_069, meta[relay.attrs.AllocTensorAttrs][562]) /* ty=Tensor[(?, 12544), float32] */;
  %2500 = (%x475,);
  %2501 = (%out_068,);
  let %v481: () = vm.invoke_tvm_op(%2491, %2500, %2501) /* ty=() */;
  let %x476: Tensor[(?, 12544), float32] = %out_068;
  let %storage_0552: Storage[] = memory.alloc_storage(51380224 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][563]) /* ty=Storage[] */;
  let %tensor_0483: Tensor[(1024, 12544), float32] = memory.alloc_tensor(%storage_0552, 0 /* ty=int64 */, meta[relay.Constant][512] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][563]) /* ty=Tensor[(1024, 12544), float32] */;
  %2503 = fn (%p0480: Tensor[(1024, 12544), float32], Primitive=1) -> Tensor[(1024, 12544), float32] {
    %2502 = transpose(%p0480, axes=[1, 0]) /* ty=Tensor[(12544, 1024), float32] */;
    transpose(%2502, axes=[1, 0]) /* ty=Tensor[(1024, 12544), float32] */
  };
  %2504 = (%model.roi_heads.box_head.fc6.weight,);
  %2505 = (%tensor_0483,);
  let %v482: () = vm.invoke_tvm_op(%2503, %2504, %2505) /* ty=() */;
  let %x477: Tensor[(1024, 12544), float32] = %tensor_0483;
  let %in_shape_062: Tensor[(2), int64] = vm.shape_of(%x476, meta[relay.attrs.ShapeOfAttrs][81]) /* ty=Tensor[(2), int64] */;
  let %storage_0553: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][564]) /* ty=Storage[] */;
  let %tensor_0484: Tensor[(2), int64] = memory.alloc_tensor(%storage_0553, 0 /* ty=int64 */, meta[relay.Constant][513] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][564]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_070: Tensor[(2), int64] = %tensor_0484;
  %2508 = fn (%p0481: Tensor[(?, 12544), float32], %p1264: Tensor[(1024, 12544), float32], %p2126: Tensor[(1024), float32], Primitive=1) -> Tensor[(?, 1024), float32] {
    %2506 = nn.dense(%p0481, %p1264, units=1024) /* ty=Tensor[(?, 1024), float32] */;
    %2507 = add(%2506, %p2126) /* ty=Tensor[(?, 1024), float32] */;
    nn.relu(%2507) /* ty=Tensor[(?, 1024), float32] */
  };
  %2509 = (%in_shape_062, meta[relay.Constant][514] /* ty=Tensor[(2), int64] */, meta[relay.Constant][515] /* ty=Tensor[(1), int64] */);
  %2510 = (%shape_func_out_070,);
  let %shape_func70: () = vm.shape_func(%2508, %2509, %2510, meta[relay.attrs.ShapeFuncAttrs][70]) /* ty=() */;
  let %storage_0554: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][565]) /* ty=Storage[] */;
  let %tensor_0485: int64 = memory.alloc_tensor(%storage_0554, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][565]) /* ty=int64 */;
  %2511 = fn (%p0482: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0482) /* ty=int64 */
  };
  %2512 = (%shape_func_out_070,);
  %2513 = (%tensor_0485,);
  let %v483: () = vm.invoke_tvm_op(%2511, %2512, %2513) /* ty=() */;
  let %storage_0555: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][566]) /* ty=Storage[] */;
  let %tensor_0486: int64 = memory.alloc_tensor(%storage_0555, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][566]) /* ty=int64 */;
  %2514 = fn (%p0483: int64, Primitive=1) -> int64 {
    multiply(%p0483, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2515 = (%tensor_0485,);
  %2516 = (%tensor_0486,);
  let %v484: () = vm.invoke_tvm_op(%2514, %2515, %2516) /* ty=() */;
  let %storage_0556: Storage[] = memory.alloc_storage(%tensor_0486, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][567]) /* ty=Storage[] */;
  let %out_069: Tensor[(?, 1024), float32] = memory.alloc_tensor(%storage_0556, 0 /* ty=int64 */, %shape_func_out_070, meta[relay.attrs.AllocTensorAttrs][567]) /* ty=Tensor[(?, 1024), float32] */;
  %2517 = (%x476, %x477, %model.roi_heads.box_head.fc6.bias);
  %2518 = (%out_069,);
  let %v485: () = vm.invoke_tvm_op(%2508, %2517, %2518) /* ty=() */;
  let %x478: Tensor[(?, 1024), float32] = %out_069;
  let %storage_0557: Storage[] = memory.alloc_storage(4194304 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][568]) /* ty=Storage[] */;
  let %tensor_0487: Tensor[(1024, 1024), float32] = memory.alloc_tensor(%storage_0557, 0 /* ty=int64 */, meta[relay.Constant][516] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][568]) /* ty=Tensor[(1024, 1024), float32] */;
  %2520 = fn (%p0484: Tensor[(1024, 1024), float32], Primitive=1) -> Tensor[(1024, 1024), float32] {
    %2519 = transpose(%p0484, axes=[1, 0]) /* ty=Tensor[(1024, 1024), float32] */;
    transpose(%2519, axes=[1, 0]) /* ty=Tensor[(1024, 1024), float32] */
  };
  %2521 = (%model.roi_heads.box_head.fc7.weight,);
  %2522 = (%tensor_0487,);
  let %v486: () = vm.invoke_tvm_op(%2520, %2521, %2522) /* ty=() */;
  let %x479: Tensor[(1024, 1024), float32] = %tensor_0487;
  let %in_shape_063: Tensor[(2), int64] = vm.shape_of(%x478, meta[relay.attrs.ShapeOfAttrs][82]) /* ty=Tensor[(2), int64] */;
  let %storage_0558: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][569]) /* ty=Storage[] */;
  let %tensor_0488: Tensor[(2), int64] = memory.alloc_tensor(%storage_0558, 0 /* ty=int64 */, meta[relay.Constant][517] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][569]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_071: Tensor[(2), int64] = %tensor_0488;
  %2525 = fn (%p0485: Tensor[(?, 1024), float32], %p1265: Tensor[(1024, 1024), float32], %p2127: Tensor[(1024), float32], Primitive=1) -> Tensor[(?, 1024), float32] {
    %2523 = nn.dense(%p0485, %p1265, units=1024) /* ty=Tensor[(?, 1024), float32] */;
    %2524 = add(%2523, %p2127) /* ty=Tensor[(?, 1024), float32] */;
    nn.relu(%2524) /* ty=Tensor[(?, 1024), float32] */
  };
  %2526 = (%in_shape_063, meta[relay.Constant][518] /* ty=Tensor[(2), int64] */, meta[relay.Constant][519] /* ty=Tensor[(1), int64] */);
  %2527 = (%shape_func_out_071,);
  let %shape_func71: () = vm.shape_func(%2525, %2526, %2527, meta[relay.attrs.ShapeFuncAttrs][71]) /* ty=() */;
  let %storage_0559: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][570]) /* ty=Storage[] */;
  let %tensor_0489: int64 = memory.alloc_tensor(%storage_0559, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][570]) /* ty=int64 */;
  %2528 = fn (%p0486: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0486) /* ty=int64 */
  };
  %2529 = (%shape_func_out_071,);
  %2530 = (%tensor_0489,);
  let %v487: () = vm.invoke_tvm_op(%2528, %2529, %2530) /* ty=() */;
  let %storage_0560: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][571]) /* ty=Storage[] */;
  let %tensor_0490: int64 = memory.alloc_tensor(%storage_0560, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][571]) /* ty=int64 */;
  %2531 = fn (%p0487: int64, Primitive=1) -> int64 {
    multiply(%p0487, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2532 = (%tensor_0489,);
  %2533 = (%tensor_0490,);
  let %v488: () = vm.invoke_tvm_op(%2531, %2532, %2533) /* ty=() */;
  let %storage_0561: Storage[] = memory.alloc_storage(%tensor_0490, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][572]) /* ty=Storage[] */;
  let %out_070: Tensor[(?, 1024), float32] = memory.alloc_tensor(%storage_0561, 0 /* ty=int64 */, %shape_func_out_071, meta[relay.attrs.AllocTensorAttrs][572]) /* ty=Tensor[(?, 1024), float32] */;
  %2534 = (%x478, %x479, %model.roi_heads.box_head.fc7.bias);
  %2535 = (%out_070,);
  let %v489: () = vm.invoke_tvm_op(%2525, %2534, %2535) /* ty=() */;
  let %x480: Tensor[(?, 1024), float32] = %out_070;
  let %in_shape_064: Tensor[(2), int64] = vm.shape_of(%x480, meta[relay.attrs.ShapeOfAttrs][83]) /* ty=Tensor[(2), int64] */;
  let %storage_0562: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][573]) /* ty=Storage[] */;
  let %tensor_0491: Tensor[(2), int64] = memory.alloc_tensor(%storage_0562, 0 /* ty=int64 */, meta[relay.Constant][520] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][573]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_072: Tensor[(2), int64] = %tensor_0491;
  %2536 = fn (%p0488: Tensor[(?, 1024), float32], Primitive=1) -> Tensor[(?, 1024), float32] {
    reshape(%p0488, newshape=[0, -1]) /* ty=Tensor[(?, 1024), float32] */
  };
  %2537 = (%in_shape_064,);
  %2538 = (%shape_func_out_072,);
  let %shape_func72: () = vm.shape_func(%2536, %2537, %2538, meta[relay.attrs.ShapeFuncAttrs][72]) /* ty=() */;
  let %x481: Tensor[(?, 1024), float32] = vm.reshape_tensor(%x480, %shape_func_out_072, meta[relay.attrs.ReshapeTensorAttrs][107]) /* ty=Tensor[(?, 1024), float32] */;
  let %storage_0563: Storage[] = memory.alloc_storage(372736 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][574]) /* ty=Storage[] */;
  let %tensor_0492: Tensor[(91, 1024), float32] = memory.alloc_tensor(%storage_0563, 0 /* ty=int64 */, meta[relay.Constant][521] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][574]) /* ty=Tensor[(91, 1024), float32] */;
  %2540 = fn (%p0489: Tensor[(91, 1024), float32], Primitive=1) -> Tensor[(91, 1024), float32] {
    %2539 = transpose(%p0489, axes=[1, 0]) /* ty=Tensor[(1024, 91), float32] */;
    transpose(%2539, axes=[1, 0]) /* ty=Tensor[(91, 1024), float32] */
  };
  %2541 = (%model.roi_heads.box_predictor.cls_score.weight,);
  %2542 = (%tensor_0492,);
  let %v490: () = vm.invoke_tvm_op(%2540, %2541, %2542) /* ty=() */;
  let %x482: Tensor[(91, 1024), float32] = %tensor_0492;
  let %in_shape_065: Tensor[(2), int64] = vm.shape_of(%x481, meta[relay.attrs.ShapeOfAttrs][84]) /* ty=Tensor[(2), int64] */;
  let %storage_0564: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][575]) /* ty=Storage[] */;
  let %tensor_0493: Tensor[(2), int64] = memory.alloc_tensor(%storage_0564, 0 /* ty=int64 */, meta[relay.Constant][522] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][575]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_073: Tensor[(2), int64] = %tensor_0493;
  %2544 = fn (%p0490: Tensor[(?, 1024), float32], %p1266: Tensor[(91, 1024), float32], %p2128: Tensor[(91), float32], Primitive=1) -> Tensor[(?, 91), float32] {
    %2543 = nn.dense(%p0490, %p1266, units=91) /* ty=Tensor[(?, 91), float32] */;
    add(%2543, %p2128) /* ty=Tensor[(?, 91), float32] */
  };
  %2545 = (%in_shape_065, meta[relay.Constant][523] /* ty=Tensor[(2), int64] */, meta[relay.Constant][524] /* ty=Tensor[(1), int64] */);
  %2546 = (%shape_func_out_073,);
  let %shape_func73: () = vm.shape_func(%2544, %2545, %2546, meta[relay.attrs.ShapeFuncAttrs][73]) /* ty=() */;
  let %storage_0565: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][576]) /* ty=Storage[] */;
  let %tensor_0494: int64 = memory.alloc_tensor(%storage_0565, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][576]) /* ty=int64 */;
  %2547 = fn (%p0491: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0491) /* ty=int64 */
  };
  %2548 = (%shape_func_out_073,);
  %2549 = (%tensor_0494,);
  let %v491: () = vm.invoke_tvm_op(%2547, %2548, %2549) /* ty=() */;
  let %storage_0566: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][577]) /* ty=Storage[] */;
  let %tensor_0495: int64 = memory.alloc_tensor(%storage_0566, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][577]) /* ty=int64 */;
  %2550 = fn (%p0492: int64, Primitive=1) -> int64 {
    multiply(%p0492, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2551 = (%tensor_0494,);
  %2552 = (%tensor_0495,);
  let %v492: () = vm.invoke_tvm_op(%2550, %2551, %2552) /* ty=() */;
  let %storage_0567: Storage[] = memory.alloc_storage(%tensor_0495, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][578]) /* ty=Storage[] */;
  let %out_071: Tensor[(?, 91), float32] = memory.alloc_tensor(%storage_0567, 0 /* ty=int64 */, %shape_func_out_073, meta[relay.attrs.AllocTensorAttrs][578]) /* ty=Tensor[(?, 91), float32] */;
  %2553 = (%x481, %x482, %model.roi_heads.box_predictor.cls_score.bias);
  %2554 = (%out_071,);
  let %v493: () = vm.invoke_tvm_op(%2544, %2553, %2554) /* ty=() */;
  let %x483: Tensor[(?, 91), float32] = %out_071;
  let %in_shape_066: Tensor[(2), int64] = vm.shape_of(%x483, meta[relay.attrs.ShapeOfAttrs][85]) /* ty=Tensor[(2), int64] */;
  let %storage_0568: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][579]) /* ty=Storage[] */;
  let %tensor_0496: Tensor[(2), int64] = memory.alloc_tensor(%storage_0568, 0 /* ty=int64 */, meta[relay.Constant][525] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][579]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_074: Tensor[(2), int64] = %tensor_0496;
  %2555 = fn (%p0493: Tensor[(?, 91), float32], Primitive=1) -> Tensor[(?, 91), float32] {
    nn.softmax(%p0493) /* ty=Tensor[(?, 91), float32] */
  };
  %2556 = (%in_shape_066,);
  %2557 = (%shape_func_out_074,);
  let %shape_func74: () = vm.shape_func(%2555, %2556, %2557, meta[relay.attrs.ShapeFuncAttrs][74]) /* ty=() */;
  let %storage_0569: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][580]) /* ty=Storage[] */;
  let %tensor_0497: int64 = memory.alloc_tensor(%storage_0569, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][580]) /* ty=int64 */;
  %2558 = fn (%p0494: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0494) /* ty=int64 */
  };
  %2559 = (%shape_func_out_074,);
  %2560 = (%tensor_0497,);
  let %v494: () = vm.invoke_tvm_op(%2558, %2559, %2560) /* ty=() */;
  let %storage_0570: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][581]) /* ty=Storage[] */;
  let %tensor_0498: int64 = memory.alloc_tensor(%storage_0570, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][581]) /* ty=int64 */;
  %2561 = fn (%p0495: int64, Primitive=1) -> int64 {
    multiply(%p0495, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2562 = (%tensor_0497,);
  %2563 = (%tensor_0498,);
  let %v495: () = vm.invoke_tvm_op(%2561, %2562, %2563) /* ty=() */;
  let %storage_0571: Storage[] = memory.alloc_storage(%tensor_0498, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][582]) /* ty=Storage[] */;
  let %out_072: Tensor[(?, 91), float32] = memory.alloc_tensor(%storage_0571, 0 /* ty=int64 */, %shape_func_out_074, meta[relay.attrs.AllocTensorAttrs][582]) /* ty=Tensor[(?, 91), float32] */;
  %2564 = (%x483,);
  %2565 = (%out_072,);
  let %v496: () = vm.invoke_tvm_op(%2555, %2564, %2565) /* ty=() */;
  let %x484: Tensor[(?, 91), float32] = %out_072;
  let %in_shape_138: Tensor[(2), int64] = vm.shape_of(%x484, meta[relay.attrs.ShapeOfAttrs][86]) /* ty=Tensor[(2), int64] */;
  let %storage_0572: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][583]) /* ty=Storage[] */;
  let %tensor_0499: Tensor[(2), int64] = memory.alloc_tensor(%storage_0572, 0 /* ty=int64 */, meta[relay.Constant][526] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][583]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_075: Tensor[(2), int64] = %tensor_0499;
  %2567 = fn (%p0496: Tensor[(1, 91), int64], %p1267: Tensor[(?, 91), float32], Primitive=1) -> Tensor[(?, 91), int64] {
    %2566 = cast(%p1267, dtype="int64") /* ty=Tensor[(?, 91), int64] */;
    broadcast_to_like(%p0496, %2566) /* ty=Tensor[(?, 91), int64] */
  };
  %2568 = (meta[relay.Constant][527] /* ty=Tensor[(2), int64] */, %in_shape_138);
  %2569 = (%shape_func_out_075,);
  let %shape_func75: () = vm.shape_func(%2567, %2568, %2569, meta[relay.attrs.ShapeFuncAttrs][75]) /* ty=() */;
  let %storage_0573: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][584]) /* ty=Storage[] */;
  let %tensor_0500: int64 = memory.alloc_tensor(%storage_0573, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][584]) /* ty=int64 */;
  %2570 = fn (%p0497: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0497) /* ty=int64 */
  };
  %2571 = (%shape_func_out_075,);
  %2572 = (%tensor_0500,);
  let %v497: () = vm.invoke_tvm_op(%2570, %2571, %2572) /* ty=() */;
  let %storage_0574: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][585]) /* ty=Storage[] */;
  let %tensor_0501: int64 = memory.alloc_tensor(%storage_0574, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][585]) /* ty=int64 */;
  %2573 = fn (%p0498: int64, Primitive=1) -> int64 {
    multiply(%p0498, 8 /* ty=int64 */) /* ty=int64 */
  };
  %2574 = (%tensor_0500,);
  %2575 = (%tensor_0501,);
  let %v498: () = vm.invoke_tvm_op(%2573, %2574, %2575) /* ty=() */;
  let %storage_0575: Storage[] = memory.alloc_storage(%tensor_0501, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][586]) /* ty=Storage[] */;
  let %out_073: Tensor[(?, 91), int64] = memory.alloc_tensor(%storage_0575, 0 /* ty=int64 */, %shape_func_out_075, meta[relay.attrs.AllocTensorAttrs][586]) /* ty=Tensor[(?, 91), int64] */;
  %2576 = (meta[relay.Constant][528] /* ty=Tensor[(1, 91), int64] */, %x484);
  %2577 = (%out_073,);
  let %v499: () = vm.invoke_tvm_op(%2567, %2576, %2577) /* ty=() */;
  let %x485: Tensor[(?, 91), int64] = %out_073;
  let %storage_0576: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][587]) /* ty=Storage[] */;
  let %tensor_0502: Tensor[(2), int32] = memory.alloc_tensor(%storage_0576, 0 /* ty=int64 */, meta[relay.Constant][529] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][587]) /* ty=Tensor[(2), int32] */;
  %2578 = fn (%p0499: Tensor[(?, 91), int64], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0499, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2579 = (%x485,);
  %2580 = (%tensor_0502,);
  let %v500: () = vm.invoke_tvm_op(%2578, %2579, %2580) /* ty=() */;
  let %x486: Tensor[(2), int32] = %tensor_0502;
  let %storage_0577: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][588]) /* ty=Storage[] */;
  let %tensor_0503: Tensor[(2), int32] = memory.alloc_tensor(%storage_0577, 0 /* ty=int64 */, meta[relay.Constant][530] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][588]) /* ty=Tensor[(2), int32] */;
  %2583 = fn (%p0500: Tensor[(2), bool], %p1268: Tensor[(2), int32], %p2129: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2581 = cast_like(%p2129, %p1268) /* ty=Tensor[(2), int32] */;
    %2582 = add(%p1268, %2581) /* ty=Tensor[(2), int32] */;
    where(%p0500, %2582, %p1268) /* ty=Tensor[(2), int32] */
  };
  %2584 = (meta[relay.Constant][531] /* ty=Tensor[(2), bool] */, meta[relay.Constant][532] /* ty=Tensor[(2), int32] */, %x486);
  %2585 = (%tensor_0503,);
  let %v501: () = vm.invoke_tvm_op(%2583, %2584, %2585) /* ty=() */;
  let %x487: Tensor[(2), int32] = %tensor_0503;
  let %storage_0578: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][589]) /* ty=Storage[] */;
  let %tensor_0504: Tensor[(2), int64] = memory.alloc_tensor(%storage_0578, 0 /* ty=int64 */, meta[relay.Constant][533] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][589]) /* ty=Tensor[(2), int64] */;
  %2586 = fn (%p0501: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0501, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2587 = (%x486,);
  %2588 = (%tensor_0504,);
  let %v502: () = vm.invoke_tvm_op(%2586, %2587, %2588) /* ty=() */;
  let %x488: Tensor[(2), int64] = %tensor_0504;
  let %in_shape_067: Tensor[(2), int64] = vm.shape_of(%x485, meta[relay.attrs.ShapeOfAttrs][87]) /* ty=Tensor[(2), int64] */;
  let %in_shape_139: Tensor[(2), int32] = device_copy(%x487, meta[relay.attrs.DeviceCopyAttrs][59]) /* ty=Tensor[(2), int32] */;
  let %in_shape_222: Tensor[(2), int64] = device_copy(%x488, meta[relay.attrs.DeviceCopyAttrs][60]) /* ty=Tensor[(2), int64] */;
  let %in_shape_316: Tensor[(2), int32] = device_copy(meta[relay.Constant][534] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][61]) /* ty=Tensor[(2), int32] */;
  let %storage_0579: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][590]) /* ty=Storage[] */;
  let %tensor_0505: Tensor[(2), int64] = memory.alloc_tensor(%storage_0579, 0 /* ty=int64 */, meta[relay.Constant][535] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][590]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_076: Tensor[(2), int64] = %tensor_0505;
  %2589 = fn (%p0502: Tensor[(?, 91), int64], %p1269: Tensor[(2), int32], %p2130: Tensor[(2), int64], %p378: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), int64] {
    dyn.strided_slice(%p0502, %p1269, %p2130, %p378, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), int64] */
  };
  %2590 = (%in_shape_067, %in_shape_139, %in_shape_222, %in_shape_316);
  %2591 = (%shape_func_out_076,);
  let %shape_func76: () = vm.shape_func(%2589, %2590, %2591, meta[relay.attrs.ShapeFuncAttrs][76]) /* ty=() */;
  let %storage_0580: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][591]) /* ty=Storage[] */;
  let %tensor_0506: int64 = memory.alloc_tensor(%storage_0580, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][591]) /* ty=int64 */;
  %2592 = fn (%p0503: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0503) /* ty=int64 */
  };
  %2593 = (%shape_func_out_076,);
  %2594 = (%tensor_0506,);
  let %v503: () = vm.invoke_tvm_op(%2592, %2593, %2594) /* ty=() */;
  let %storage_0581: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][592]) /* ty=Storage[] */;
  let %tensor_0507: int64 = memory.alloc_tensor(%storage_0581, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][592]) /* ty=int64 */;
  %2595 = fn (%p0504: int64, Primitive=1) -> int64 {
    multiply(%p0504, 8 /* ty=int64 */) /* ty=int64 */
  };
  %2596 = (%tensor_0506,);
  %2597 = (%tensor_0507,);
  let %v504: () = vm.invoke_tvm_op(%2595, %2596, %2597) /* ty=() */;
  let %storage_0582: Storage[] = memory.alloc_storage(%tensor_0507, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][593]) /* ty=Storage[] */;
  let %out_074: Tensor[(?, ?), int64] = memory.alloc_tensor(%storage_0582, 0 /* ty=int64 */, %shape_func_out_076, meta[relay.attrs.AllocTensorAttrs][593]) /* ty=Tensor[(?, ?), int64] */;
  %2598 = (%x485, %x487, %x488, meta[relay.Constant][534] /* ty=Tensor[(2), int32] */);
  %2599 = (%out_074,);
  let %v505: () = vm.invoke_tvm_op(%2589, %2598, %2599) /* ty=() */;
  let %x489: Tensor[(?, ?), int64] = %out_074;
  let %storage_0583: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][594]) /* ty=Storage[] */;
  let %tensor_0508: Tensor[(2), int32] = memory.alloc_tensor(%storage_0583, 0 /* ty=int64 */, meta[relay.Constant][536] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][594]) /* ty=Tensor[(2), int32] */;
  %2600 = fn (%p0505: Tensor[(?, ?), int64], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0505, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2601 = (%x489,);
  %2602 = (%tensor_0508,);
  let %v506: () = vm.invoke_tvm_op(%2600, %2601, %2602) /* ty=() */;
  let %x490: Tensor[(2), int32] = %tensor_0508;
  let %storage_0584: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][595]) /* ty=Storage[] */;
  let %tensor_0509: Tensor[(2), int32] = memory.alloc_tensor(%storage_0584, 0 /* ty=int64 */, meta[relay.Constant][537] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][595]) /* ty=Tensor[(2), int32] */;
  %2605 = fn (%p0506: Tensor[(2), bool], %p1270: Tensor[(2), int32], %p2131: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2603 = cast_like(%p2131, %p1270) /* ty=Tensor[(2), int32] */;
    %2604 = add(%p1270, %2603) /* ty=Tensor[(2), int32] */;
    where(%p0506, %2604, %p1270) /* ty=Tensor[(2), int32] */
  };
  %2606 = (meta[relay.Constant][538] /* ty=Tensor[(2), bool] */, meta[relay.Constant][539] /* ty=Tensor[(2), int32] */, %x490);
  %2607 = (%tensor_0509,);
  let %v507: () = vm.invoke_tvm_op(%2605, %2606, %2607) /* ty=() */;
  let %x491: Tensor[(2), int32] = %tensor_0509;
  let %storage_0585: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][596]) /* ty=Storage[] */;
  let %tensor_0510: Tensor[(2), int64] = memory.alloc_tensor(%storage_0585, 0 /* ty=int64 */, meta[relay.Constant][540] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][596]) /* ty=Tensor[(2), int64] */;
  %2608 = fn (%p0507: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0507, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2609 = (%x490,);
  %2610 = (%tensor_0510,);
  let %v508: () = vm.invoke_tvm_op(%2608, %2609, %2610) /* ty=() */;
  let %x492: Tensor[(2), int64] = %tensor_0510;
  let %in_shape_068: Tensor[(2), int64] = vm.shape_of(%x489, meta[relay.attrs.ShapeOfAttrs][88]) /* ty=Tensor[(2), int64] */;
  let %in_shape_140: Tensor[(2), int32] = device_copy(%x491, meta[relay.attrs.DeviceCopyAttrs][62]) /* ty=Tensor[(2), int32] */;
  let %in_shape_223: Tensor[(2), int64] = device_copy(%x492, meta[relay.attrs.DeviceCopyAttrs][63]) /* ty=Tensor[(2), int64] */;
  let %in_shape_317: Tensor[(2), int32] = device_copy(meta[relay.Constant][541] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][64]) /* ty=Tensor[(2), int32] */;
  let %storage_0586: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][597]) /* ty=Storage[] */;
  let %tensor_0511: Tensor[(2), int64] = memory.alloc_tensor(%storage_0586, 0 /* ty=int64 */, meta[relay.Constant][542] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][597]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_077: Tensor[(2), int64] = %tensor_0511;
  %2611 = fn (%p0508: Tensor[(?, ?), int64], %p1271: Tensor[(2), int32], %p2132: Tensor[(2), int64], %p379: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), int64] {
    dyn.strided_slice(%p0508, %p1271, %p2132, %p379, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), int64] */
  };
  %2612 = (%in_shape_068, %in_shape_140, %in_shape_223, %in_shape_317);
  %2613 = (%shape_func_out_077,);
  let %shape_func77: () = vm.shape_func(%2611, %2612, %2613, meta[relay.attrs.ShapeFuncAttrs][77]) /* ty=() */;
  let %storage_0587: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][598]) /* ty=Storage[] */;
  let %tensor_0512: int64 = memory.alloc_tensor(%storage_0587, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][598]) /* ty=int64 */;
  %2614 = fn (%p0509: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0509) /* ty=int64 */
  };
  %2615 = (%shape_func_out_077,);
  %2616 = (%tensor_0512,);
  let %v509: () = vm.invoke_tvm_op(%2614, %2615, %2616) /* ty=() */;
  let %storage_0588: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][599]) /* ty=Storage[] */;
  let %tensor_0513: int64 = memory.alloc_tensor(%storage_0588, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][599]) /* ty=int64 */;
  %2617 = fn (%p0510: int64, Primitive=1) -> int64 {
    multiply(%p0510, 8 /* ty=int64 */) /* ty=int64 */
  };
  %2618 = (%tensor_0512,);
  %2619 = (%tensor_0513,);
  let %v510: () = vm.invoke_tvm_op(%2617, %2618, %2619) /* ty=() */;
  let %storage_0589: Storage[] = memory.alloc_storage(%tensor_0513, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][600]) /* ty=Storage[] */;
  let %out_075: Tensor[(?, ?), int64] = memory.alloc_tensor(%storage_0589, 0 /* ty=int64 */, %shape_func_out_077, meta[relay.attrs.AllocTensorAttrs][600]) /* ty=Tensor[(?, ?), int64] */;
  %2620 = (%x489, %x491, %x492, meta[relay.Constant][541] /* ty=Tensor[(2), int32] */);
  %2621 = (%out_075,);
  let %v511: () = vm.invoke_tvm_op(%2611, %2620, %2621) /* ty=() */;
  let %x493: Tensor[(?, ?), int64] = %out_075;
  let %storage_0590: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][601]) /* ty=Storage[] */;
  let %tensor_0514: Tensor[(2), int32] = memory.alloc_tensor(%storage_0590, 0 /* ty=int64 */, meta[relay.Constant][543] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][601]) /* ty=Tensor[(2), int32] */;
  %2622 = fn (%p0511: Tensor[(?, 91), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0511, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2623 = (%x484,);
  %2624 = (%tensor_0514,);
  let %v512: () = vm.invoke_tvm_op(%2622, %2623, %2624) /* ty=() */;
  let %x494: Tensor[(2), int32] = %tensor_0514;
  let %storage_0591: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][602]) /* ty=Storage[] */;
  let %tensor_0515: Tensor[(2), int32] = memory.alloc_tensor(%storage_0591, 0 /* ty=int64 */, meta[relay.Constant][544] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][602]) /* ty=Tensor[(2), int32] */;
  %2627 = fn (%p0512: Tensor[(2), bool], %p1272: Tensor[(2), int32], %p2133: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2625 = cast_like(%p2133, %p1272) /* ty=Tensor[(2), int32] */;
    %2626 = add(%p1272, %2625) /* ty=Tensor[(2), int32] */;
    where(%p0512, %2626, %p1272) /* ty=Tensor[(2), int32] */
  };
  %2628 = (meta[relay.Constant][545] /* ty=Tensor[(2), bool] */, meta[relay.Constant][546] /* ty=Tensor[(2), int32] */, %x494);
  %2629 = (%tensor_0515,);
  let %v513: () = vm.invoke_tvm_op(%2627, %2628, %2629) /* ty=() */;
  let %x495: Tensor[(2), int32] = %tensor_0515;
  let %storage_0592: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][603]) /* ty=Storage[] */;
  let %tensor_0516: Tensor[(2), int64] = memory.alloc_tensor(%storage_0592, 0 /* ty=int64 */, meta[relay.Constant][547] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][603]) /* ty=Tensor[(2), int64] */;
  %2630 = fn (%p0513: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0513, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2631 = (%x494,);
  %2632 = (%tensor_0516,);
  let %v514: () = vm.invoke_tvm_op(%2630, %2631, %2632) /* ty=() */;
  let %x496: Tensor[(2), int64] = %tensor_0516;
  let %in_shape_069: Tensor[(2), int64] = vm.shape_of(%x484, meta[relay.attrs.ShapeOfAttrs][89]) /* ty=Tensor[(2), int64] */;
  let %in_shape_141: Tensor[(2), int32] = device_copy(%x495, meta[relay.attrs.DeviceCopyAttrs][65]) /* ty=Tensor[(2), int32] */;
  let %in_shape_224: Tensor[(2), int64] = device_copy(%x496, meta[relay.attrs.DeviceCopyAttrs][66]) /* ty=Tensor[(2), int64] */;
  let %in_shape_318: Tensor[(2), int32] = device_copy(meta[relay.Constant][548] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][67]) /* ty=Tensor[(2), int32] */;
  let %storage_0593: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][604]) /* ty=Storage[] */;
  let %tensor_0517: Tensor[(2), int64] = memory.alloc_tensor(%storage_0593, 0 /* ty=int64 */, meta[relay.Constant][549] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][604]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_078: Tensor[(2), int64] = %tensor_0517;
  %2633 = fn (%p0514: Tensor[(?, 91), float32], %p1273: Tensor[(2), int32], %p2134: Tensor[(2), int64], %p380: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0514, %p1273, %p2134, %p380, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2634 = (%in_shape_069, %in_shape_141, %in_shape_224, %in_shape_318);
  %2635 = (%shape_func_out_078,);
  let %shape_func78: () = vm.shape_func(%2633, %2634, %2635, meta[relay.attrs.ShapeFuncAttrs][78]) /* ty=() */;
  let %storage_0594: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][605]) /* ty=Storage[] */;
  let %tensor_0518: int64 = memory.alloc_tensor(%storage_0594, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][605]) /* ty=int64 */;
  %2636 = fn (%p0515: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0515) /* ty=int64 */
  };
  %2637 = (%shape_func_out_078,);
  %2638 = (%tensor_0518,);
  let %v515: () = vm.invoke_tvm_op(%2636, %2637, %2638) /* ty=() */;
  let %storage_0595: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][606]) /* ty=Storage[] */;
  let %tensor_0519: int64 = memory.alloc_tensor(%storage_0595, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][606]) /* ty=int64 */;
  %2639 = fn (%p0516: int64, Primitive=1) -> int64 {
    multiply(%p0516, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2640 = (%tensor_0518,);
  %2641 = (%tensor_0519,);
  let %v516: () = vm.invoke_tvm_op(%2639, %2640, %2641) /* ty=() */;
  let %storage_0596: Storage[] = memory.alloc_storage(%tensor_0519, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][607]) /* ty=Storage[] */;
  let %out_076: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0596, 0 /* ty=int64 */, %shape_func_out_078, meta[relay.attrs.AllocTensorAttrs][607]) /* ty=Tensor[(?, ?), float32] */;
  %2642 = (%x484, %x495, %x496, meta[relay.Constant][548] /* ty=Tensor[(2), int32] */);
  %2643 = (%out_076,);
  let %v517: () = vm.invoke_tvm_op(%2633, %2642, %2643) /* ty=() */;
  let %x497: Tensor[(?, ?), float32] = %out_076;
  let %storage_0597: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][608]) /* ty=Storage[] */;
  let %tensor_0520: Tensor[(2), int32] = memory.alloc_tensor(%storage_0597, 0 /* ty=int64 */, meta[relay.Constant][550] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][608]) /* ty=Tensor[(2), int32] */;
  %2644 = fn (%p0517: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0517, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2645 = (%x497,);
  %2646 = (%tensor_0520,);
  let %v518: () = vm.invoke_tvm_op(%2644, %2645, %2646) /* ty=() */;
  let %x498: Tensor[(2), int32] = %tensor_0520;
  let %storage_0598: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][609]) /* ty=Storage[] */;
  let %tensor_0521: Tensor[(2), int32] = memory.alloc_tensor(%storage_0598, 0 /* ty=int64 */, meta[relay.Constant][551] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][609]) /* ty=Tensor[(2), int32] */;
  %2649 = fn (%p0518: Tensor[(2), bool], %p1274: Tensor[(2), int32], %p2135: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2647 = cast_like(%p2135, %p1274) /* ty=Tensor[(2), int32] */;
    %2648 = add(%p1274, %2647) /* ty=Tensor[(2), int32] */;
    where(%p0518, %2648, %p1274) /* ty=Tensor[(2), int32] */
  };
  %2650 = (meta[relay.Constant][552] /* ty=Tensor[(2), bool] */, meta[relay.Constant][553] /* ty=Tensor[(2), int32] */, %x498);
  %2651 = (%tensor_0521,);
  let %v519: () = vm.invoke_tvm_op(%2649, %2650, %2651) /* ty=() */;
  let %x499: Tensor[(2), int32] = %tensor_0521;
  let %storage_0599: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][610]) /* ty=Storage[] */;
  let %tensor_0522: Tensor[(2), int64] = memory.alloc_tensor(%storage_0599, 0 /* ty=int64 */, meta[relay.Constant][554] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][610]) /* ty=Tensor[(2), int64] */;
  %2652 = fn (%p0519: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0519, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2653 = (%x498,);
  %2654 = (%tensor_0522,);
  let %v520: () = vm.invoke_tvm_op(%2652, %2653, %2654) /* ty=() */;
  let %x500: Tensor[(2), int64] = %tensor_0522;
  let %in_shape_070: Tensor[(2), int64] = vm.shape_of(%x497, meta[relay.attrs.ShapeOfAttrs][90]) /* ty=Tensor[(2), int64] */;
  let %in_shape_142: Tensor[(2), int32] = device_copy(%x499, meta[relay.attrs.DeviceCopyAttrs][68]) /* ty=Tensor[(2), int32] */;
  let %in_shape_225: Tensor[(2), int64] = device_copy(%x500, meta[relay.attrs.DeviceCopyAttrs][69]) /* ty=Tensor[(2), int64] */;
  let %in_shape_319: Tensor[(2), int32] = device_copy(meta[relay.Constant][555] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][70]) /* ty=Tensor[(2), int32] */;
  let %storage_0600: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][611]) /* ty=Storage[] */;
  let %tensor_0523: Tensor[(2), int64] = memory.alloc_tensor(%storage_0600, 0 /* ty=int64 */, meta[relay.Constant][556] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][611]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_079: Tensor[(2), int64] = %tensor_0523;
  %2655 = fn (%p0520: Tensor[(?, ?), float32], %p1275: Tensor[(2), int32], %p2136: Tensor[(2), int64], %p381: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0520, %p1275, %p2136, %p381, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2656 = (%in_shape_070, %in_shape_142, %in_shape_225, %in_shape_319);
  %2657 = (%shape_func_out_079,);
  let %shape_func79: () = vm.shape_func(%2655, %2656, %2657, meta[relay.attrs.ShapeFuncAttrs][79]) /* ty=() */;
  let %storage_0601: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][612]) /* ty=Storage[] */;
  let %tensor_0524: int64 = memory.alloc_tensor(%storage_0601, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][612]) /* ty=int64 */;
  %2658 = fn (%p0521: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0521) /* ty=int64 */
  };
  %2659 = (%shape_func_out_079,);
  %2660 = (%tensor_0524,);
  let %v521: () = vm.invoke_tvm_op(%2658, %2659, %2660) /* ty=() */;
  let %storage_0602: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][613]) /* ty=Storage[] */;
  let %tensor_0525: int64 = memory.alloc_tensor(%storage_0602, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][613]) /* ty=int64 */;
  %2661 = fn (%p0522: int64, Primitive=1) -> int64 {
    multiply(%p0522, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2662 = (%tensor_0524,);
  %2663 = (%tensor_0525,);
  let %v522: () = vm.invoke_tvm_op(%2661, %2662, %2663) /* ty=() */;
  let %storage_0603: Storage[] = memory.alloc_storage(%tensor_0525, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][614]) /* ty=Storage[] */;
  let %out_077: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0603, 0 /* ty=int64 */, %shape_func_out_079, meta[relay.attrs.AllocTensorAttrs][614]) /* ty=Tensor[(?, ?), float32] */;
  %2664 = (%x497, %x499, %x500, meta[relay.Constant][555] /* ty=Tensor[(2), int32] */);
  %2665 = (%out_077,);
  let %v523: () = vm.invoke_tvm_op(%2655, %2664, %2665) /* ty=() */;
  let %x501: Tensor[(?, ?), float32] = %out_077;
  let %in_shape_071: Tensor[(2), int64] = vm.shape_of(%x501, meta[relay.attrs.ShapeOfAttrs][91]) /* ty=Tensor[(2), int64] */;
  let %storage_0604: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][615]) /* ty=Storage[] */;
  let %tensor_0526: Tensor[(1), int64] = memory.alloc_tensor(%storage_0604, 0 /* ty=int64 */, meta[relay.Constant][557] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][615]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_080: Tensor[(1), int64] = %tensor_0526;
  %2666 = fn (%p0523: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), float32] {
    reshape(%p0523, newshape=[-1]) /* ty=Tensor[(?), float32] */
  };
  %2667 = (%in_shape_071,);
  %2668 = (%shape_func_out_080,);
  let %shape_func80: () = vm.shape_func(%2666, %2667, %2668, meta[relay.attrs.ShapeFuncAttrs][80]) /* ty=() */;
  let %x502: Tensor[(?), float32] = vm.reshape_tensor(%x501, %shape_func_out_080, meta[relay.attrs.ReshapeTensorAttrs][108]) /* ty=Tensor[(?), float32] */;
  let %in_shape_072: Tensor[(1), int64] = vm.shape_of(%x502, meta[relay.attrs.ShapeOfAttrs][92]) /* ty=Tensor[(1), int64] */;
  let %storage_0605: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][616]) /* ty=Storage[] */;
  let %tensor_0527: Tensor[(1), int64] = memory.alloc_tensor(%storage_0605, 0 /* ty=int64 */, meta[relay.Constant][558] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][616]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_081: Tensor[(1), int64] = %tensor_0527;
  %2669 = fn (%p0524: Tensor[(?), float32], Primitive=1) -> Tensor[(?), bool] {
    greater(%p0524, 0.05f /* ty=float32 */) /* ty=Tensor[(?), bool] */
  };
  %2670 = (%in_shape_072,);
  %2671 = (%shape_func_out_081,);
  let %shape_func81: () = vm.shape_func(%2669, %2670, %2671, meta[relay.attrs.ShapeFuncAttrs][81]) /* ty=() */;
  let %storage_0606: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][617]) /* ty=Storage[] */;
  let %tensor_0528: int64 = memory.alloc_tensor(%storage_0606, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][617]) /* ty=int64 */;
  %2672 = fn (%p0525: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0525) /* ty=int64 */
  };
  %2673 = (%shape_func_out_081,);
  %2674 = (%tensor_0528,);
  let %v524: () = vm.invoke_tvm_op(%2672, %2673, %2674) /* ty=() */;
  let %storage_0607: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][618]) /* ty=Storage[] */;
  let %tensor_0529: int64 = memory.alloc_tensor(%storage_0607, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][618]) /* ty=int64 */;
  %2675 = fn (%p0526: int64, Primitive=1) -> int64 {
    multiply(%p0526, 1 /* ty=int64 */) /* ty=int64 */
  };
  %2676 = (%tensor_0528,);
  %2677 = (%tensor_0529,);
  let %v525: () = vm.invoke_tvm_op(%2675, %2676, %2677) /* ty=() */;
  let %storage_0608: Storage[] = memory.alloc_storage(%tensor_0529, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][619]) /* ty=Storage[] */;
  let %out_078: Tensor[(?), bool] = memory.alloc_tensor(%storage_0608, 0 /* ty=int64 */, %shape_func_out_081, meta[relay.attrs.AllocTensorAttrs][619]) /* ty=Tensor[(?), bool] */;
  %2678 = (%x502,);
  %2679 = (%out_078,);
  let %v526: () = vm.invoke_tvm_op(%2669, %2678, %2679) /* ty=() */;
  let %x503: Tensor[(?), bool] = %out_078;
  let %in_shape_073: Tensor[(?), bool] = device_copy(%x503, meta[relay.attrs.DeviceCopyAttrs][71]) /* ty=Tensor[(?), bool] */;
  let %storage_0609: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][620]) /* ty=Storage[] */;
  let %tensor_0530: Tensor[(2), int64] = memory.alloc_tensor(%storage_0609, 0 /* ty=int64 */, meta[relay.Constant][559] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][620]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_082: Tensor[(2), int64] = %tensor_0530;
  %2680 = fn (%p0527: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0527) /* ty=Tensor[(?, 1), int32] */
  };
  %2681 = (%in_shape_073,);
  %2682 = (%shape_func_out_082,);
  let %shape_func82: () = vm.shape_func(%2680, %2681, %2682, meta[relay.attrs.ShapeFuncAttrs][82]) /* ty=() */;
  let %storage_0610: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][621]) /* ty=Storage[] */;
  let %tensor_0531: int64 = memory.alloc_tensor(%storage_0610, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][621]) /* ty=int64 */;
  %2683 = fn (%p0528: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0528) /* ty=int64 */
  };
  %2684 = (%shape_func_out_082,);
  %2685 = (%tensor_0531,);
  let %v527: () = vm.invoke_tvm_op(%2683, %2684, %2685) /* ty=() */;
  let %storage_0611: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][622]) /* ty=Storage[] */;
  let %tensor_0532: int64 = memory.alloc_tensor(%storage_0611, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][622]) /* ty=int64 */;
  %2686 = fn (%p0529: int64, Primitive=1) -> int64 {
    multiply(%p0529, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2687 = (%tensor_0531,);
  %2688 = (%tensor_0532,);
  let %v528: () = vm.invoke_tvm_op(%2686, %2687, %2688) /* ty=() */;
  let %storage_0612: Storage[] = memory.alloc_storage(%tensor_0532, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][623]) /* ty=Storage[] */;
  let %out_079: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0612, 0 /* ty=int64 */, %shape_func_out_082, meta[relay.attrs.AllocTensorAttrs][623]) /* ty=Tensor[(?, 1), int32] */;
  %2689 = (%x503,);
  %2690 = (%out_079,);
  let %v529: () = vm.invoke_tvm_op(%2680, %2689, %2690) /* ty=() */;
  let %x504: Tensor[(?, 1), int32] = %out_079;
  let %in_shape_074: Tensor[(2), int64] = vm.shape_of(%x504, meta[relay.attrs.ShapeOfAttrs][93]) /* ty=Tensor[(2), int64] */;
  let %storage_0613: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][624]) /* ty=Storage[] */;
  let %tensor_0533: Tensor[(1), int64] = memory.alloc_tensor(%storage_0613, 0 /* ty=int64 */, meta[relay.Constant][560] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][624]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_083: Tensor[(1), int64] = %tensor_0533;
  %2694 = fn (%p0530: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int64] {
    %2691 = split(%p0530, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %2692 = %2691.0;
    %2693 = squeeze(%2692, axis=[1]) /* ty=Tensor[(?), int32] */;
    cast(%2693, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %2695 = (%in_shape_074,);
  %2696 = (%shape_func_out_083,);
  let %shape_func83: () = vm.shape_func(%2694, %2695, %2696, meta[relay.attrs.ShapeFuncAttrs][83]) /* ty=() */;
  let %storage_0614: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][625]) /* ty=Storage[] */;
  let %tensor_0534: int64 = memory.alloc_tensor(%storage_0614, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][625]) /* ty=int64 */;
  %2697 = fn (%p0531: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0531) /* ty=int64 */
  };
  %2698 = (%shape_func_out_083,);
  %2699 = (%tensor_0534,);
  let %v530: () = vm.invoke_tvm_op(%2697, %2698, %2699) /* ty=() */;
  let %storage_0615: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][626]) /* ty=Storage[] */;
  let %tensor_0535: int64 = memory.alloc_tensor(%storage_0615, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][626]) /* ty=int64 */;
  %2700 = fn (%p0532: int64, Primitive=1) -> int64 {
    multiply(%p0532, 8 /* ty=int64 */) /* ty=int64 */
  };
  %2701 = (%tensor_0534,);
  %2702 = (%tensor_0535,);
  let %v531: () = vm.invoke_tvm_op(%2700, %2701, %2702) /* ty=() */;
  let %storage_0616: Storage[] = memory.alloc_storage(%tensor_0535, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][627]) /* ty=Storage[] */;
  let %out_080: Tensor[(?), int64] = memory.alloc_tensor(%storage_0616, 0 /* ty=int64 */, %shape_func_out_083, meta[relay.attrs.AllocTensorAttrs][627]) /* ty=Tensor[(?), int64] */;
  %2703 = (%x504,);
  %2704 = (%out_080,);
  let %v532: () = vm.invoke_tvm_op(%2694, %2703, %2704) /* ty=() */;
  let %x505: Tensor[(?), int64] = %out_080;
  let %storage_0617: Storage[] = memory.alloc_storage(1490944 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][628]) /* ty=Storage[] */;
  let %tensor_0536: Tensor[(364, 1024), float32] = memory.alloc_tensor(%storage_0617, 0 /* ty=int64 */, meta[relay.Constant][561] /* ty=Tensor[(2), int64] */, meta[relay.attrs.AllocTensorAttrs][628]) /* ty=Tensor[(364, 1024), float32] */;
  %2706 = fn (%p0533: Tensor[(364, 1024), float32], Primitive=1) -> Tensor[(364, 1024), float32] {
    %2705 = transpose(%p0533, axes=[1, 0]) /* ty=Tensor[(1024, 364), float32] */;
    transpose(%2705, axes=[1, 0]) /* ty=Tensor[(364, 1024), float32] */
  };
  %2707 = (%model.roi_heads.box_predictor.bbox_pred.weight,);
  %2708 = (%tensor_0536,);
  let %v533: () = vm.invoke_tvm_op(%2706, %2707, %2708) /* ty=() */;
  let %x506: Tensor[(364, 1024), float32] = %tensor_0536;
  let %in_shape_075: Tensor[(2), int64] = vm.shape_of(%x481, meta[relay.attrs.ShapeOfAttrs][94]) /* ty=Tensor[(2), int64] */;
  let %storage_0618: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][629]) /* ty=Storage[] */;
  let %tensor_0537: Tensor[(2), int64] = memory.alloc_tensor(%storage_0618, 0 /* ty=int64 */, meta[relay.Constant][562] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][629]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_084: Tensor[(2), int64] = %tensor_0537;
  %2710 = fn (%p0534: Tensor[(?, 1024), float32], %p1276: Tensor[(364, 1024), float32], %p2137: Tensor[(364), float32], Primitive=1) -> Tensor[(?, 364), float32] {
    %2709 = nn.dense(%p0534, %p1276, units=364) /* ty=Tensor[(?, 364), float32] */;
    add(%2709, %p2137) /* ty=Tensor[(?, 364), float32] */
  };
  %2711 = (%in_shape_075, meta[relay.Constant][563] /* ty=Tensor[(2), int64] */, meta[relay.Constant][564] /* ty=Tensor[(1), int64] */);
  %2712 = (%shape_func_out_084,);
  let %shape_func84: () = vm.shape_func(%2710, %2711, %2712, meta[relay.attrs.ShapeFuncAttrs][84]) /* ty=() */;
  let %storage_0619: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][630]) /* ty=Storage[] */;
  let %tensor_0538: int64 = memory.alloc_tensor(%storage_0619, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][630]) /* ty=int64 */;
  %2713 = fn (%p0535: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0535) /* ty=int64 */
  };
  %2714 = (%shape_func_out_084,);
  %2715 = (%tensor_0538,);
  let %v534: () = vm.invoke_tvm_op(%2713, %2714, %2715) /* ty=() */;
  let %storage_0620: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][631]) /* ty=Storage[] */;
  let %tensor_0539: int64 = memory.alloc_tensor(%storage_0620, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][631]) /* ty=int64 */;
  %2716 = fn (%p0536: int64, Primitive=1) -> int64 {
    multiply(%p0536, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2717 = (%tensor_0538,);
  %2718 = (%tensor_0539,);
  let %v535: () = vm.invoke_tvm_op(%2716, %2717, %2718) /* ty=() */;
  let %storage_0621: Storage[] = memory.alloc_storage(%tensor_0539, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][632]) /* ty=Storage[] */;
  let %out_081: Tensor[(?, 364), float32] = memory.alloc_tensor(%storage_0621, 0 /* ty=int64 */, %shape_func_out_084, meta[relay.attrs.AllocTensorAttrs][632]) /* ty=Tensor[(?, 364), float32] */;
  %2719 = (%x481, %x506, %model.roi_heads.box_predictor.bbox_pred.bias);
  %2720 = (%out_081,);
  let %v536: () = vm.invoke_tvm_op(%2710, %2719, %2720) /* ty=() */;
  let %x507: Tensor[(?, 364), float32] = %out_081;
  let %storage_0622: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][633]) /* ty=Storage[] */;
  let %tensor_0540: Tensor[(1), int64] = memory.alloc_tensor(%storage_0622, 0 /* ty=int64 */, meta[relay.Constant][565] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][633]) /* ty=Tensor[(1), int64] */;
  %2724 = fn (%p0537: Tensor[(2), int32], Primitive=1) -> Tensor[(1), int64] {
    %2721 = take(%p0537, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
    %2722 = add(%2721, 0 /* ty=int32 */) /* ty=int32 */;
    %2723 = cast(%2722, dtype="int64") /* ty=int64 */;
    expand_dims(%2723, axis=0) /* ty=Tensor[(1), int64] */
  };
  %2725 = (%x425,);
  %2726 = (%tensor_0540,);
  let %v537: () = vm.invoke_tvm_op(%2724, %2725, %2726) /* ty=() */;
  let %x508: Tensor[(1), int64] = %tensor_0540;
  let %storage_0623: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][634]) /* ty=Storage[] */;
  let %tensor_0541: Tensor[(2), int64] = memory.alloc_tensor(%storage_0623, 0 /* ty=int64 */, meta[relay.Constant][566] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][634]) /* ty=Tensor[(2), int64] */;
  %2728 = fn (%p0538: Tensor[(1), int64], %p1277: Tensor[(1), int64], Primitive=1) -> Tensor[(2), int64] {
    %2727 = (%p0538, %p1277);
    concatenate(%2727) /* ty=Tensor[(2), int64] */
  };
  %2729 = (%x508, meta[relay.Constant][567] /* ty=Tensor[(1), int64] */);
  %2730 = (%tensor_0541,);
  let %v538: () = vm.invoke_tvm_op(%2728, %2729, %2730) /* ty=() */;
  let %x509: Tensor[(2), int64] = %tensor_0541;
  let %in_shape_076: Tensor[(2), int64] = vm.shape_of(%x507, meta[relay.attrs.ShapeOfAttrs][95]) /* ty=Tensor[(2), int64] */;
  let %in_shape_143: Tensor[(2), int64] = device_copy(%x509, meta[relay.attrs.DeviceCopyAttrs][72]) /* ty=Tensor[(2), int64] */;
  let %storage_0624: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][635]) /* ty=Storage[] */;
  let %tensor_0542: Tensor[(2), int64] = memory.alloc_tensor(%storage_0624, 0 /* ty=int64 */, meta[relay.Constant][568] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][635]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_085: Tensor[(2), int64] = %tensor_0542;
  %2731 = fn (%p0539: Tensor[(?, 364), float32], %p1278: Tensor[(2), int64], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.reshape(%p0539, %p1278, newshape=[]) /* ty=Tensor[(?, ?), float32] */
  };
  %2732 = (%in_shape_076, %in_shape_143);
  %2733 = (%shape_func_out_085,);
  let %shape_func85: () = vm.shape_func(%2731, %2732, %2733, meta[relay.attrs.ShapeFuncAttrs][85]) /* ty=() */;
  let %x510: Tensor[(?, ?), float32] = vm.reshape_tensor(%x507, %shape_func_out_085, meta[relay.attrs.ReshapeTensorAttrs][109]) /* ty=Tensor[(?, ?), float32] */;
  let %storage_0625: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][636]) /* ty=Storage[] */;
  let %tensor_0543: Tensor[(2), int32] = memory.alloc_tensor(%storage_0625, 0 /* ty=int64 */, meta[relay.Constant][569] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][636]) /* ty=Tensor[(2), int32] */;
  %2734 = fn (%p0540: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0540, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2735 = (%x510,);
  %2736 = (%tensor_0543,);
  let %v539: () = vm.invoke_tvm_op(%2734, %2735, %2736) /* ty=() */;
  let %x511: Tensor[(2), int32] = %tensor_0543;
  let %storage_0626: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][637]) /* ty=Storage[] */;
  let %tensor_0544: Tensor[(2), int32] = memory.alloc_tensor(%storage_0626, 0 /* ty=int64 */, meta[relay.Constant][570] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][637]) /* ty=Tensor[(2), int32] */;
  %2739 = fn (%p0541: Tensor[(2), bool], %p1279: Tensor[(2), int32], %p2138: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2737 = cast_like(%p2138, %p1279) /* ty=Tensor[(2), int32] */;
    %2738 = add(%p1279, %2737) /* ty=Tensor[(2), int32] */;
    where(%p0541, %2738, %p1279) /* ty=Tensor[(2), int32] */
  };
  %2740 = (meta[relay.Constant][571] /* ty=Tensor[(2), bool] */, meta[relay.Constant][572] /* ty=Tensor[(2), int32] */, %x511);
  %2741 = (%tensor_0544,);
  let %v540: () = vm.invoke_tvm_op(%2739, %2740, %2741) /* ty=() */;
  let %x512: Tensor[(2), int32] = %tensor_0544;
  let %storage_0627: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][638]) /* ty=Storage[] */;
  let %tensor_0545: Tensor[(2), int64] = memory.alloc_tensor(%storage_0627, 0 /* ty=int64 */, meta[relay.Constant][573] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][638]) /* ty=Tensor[(2), int64] */;
  %2742 = fn (%p0542: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0542, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2743 = (%x511,);
  %2744 = (%tensor_0545,);
  let %v541: () = vm.invoke_tvm_op(%2742, %2743, %2744) /* ty=() */;
  let %x513: Tensor[(2), int64] = %tensor_0545;
  let %in_shape_077: Tensor[(2), int64] = vm.shape_of(%x510, meta[relay.attrs.ShapeOfAttrs][96]) /* ty=Tensor[(2), int64] */;
  let %in_shape_144: Tensor[(2), int32] = device_copy(%x512, meta[relay.attrs.DeviceCopyAttrs][73]) /* ty=Tensor[(2), int32] */;
  let %in_shape_226: Tensor[(2), int64] = device_copy(%x513, meta[relay.attrs.DeviceCopyAttrs][74]) /* ty=Tensor[(2), int64] */;
  let %in_shape_320: Tensor[(2), int32] = device_copy(meta[relay.Constant][574] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][75]) /* ty=Tensor[(2), int32] */;
  let %storage_0628: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][639]) /* ty=Storage[] */;
  let %tensor_0546: Tensor[(2), int64] = memory.alloc_tensor(%storage_0628, 0 /* ty=int64 */, meta[relay.Constant][575] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][639]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_086: Tensor[(2), int64] = %tensor_0546;
  %2745 = fn (%p0543: Tensor[(?, ?), float32], %p1280: Tensor[(2), int32], %p2139: Tensor[(2), int64], %p382: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0543, %p1280, %p2139, %p382, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2746 = (%in_shape_077, %in_shape_144, %in_shape_226, %in_shape_320);
  %2747 = (%shape_func_out_086,);
  let %shape_func86: () = vm.shape_func(%2745, %2746, %2747, meta[relay.attrs.ShapeFuncAttrs][86]) /* ty=() */;
  let %storage_0629: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][640]) /* ty=Storage[] */;
  let %tensor_0547: int64 = memory.alloc_tensor(%storage_0629, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][640]) /* ty=int64 */;
  %2748 = fn (%p0544: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0544) /* ty=int64 */
  };
  %2749 = (%shape_func_out_086,);
  %2750 = (%tensor_0547,);
  let %v542: () = vm.invoke_tvm_op(%2748, %2749, %2750) /* ty=() */;
  let %storage_0630: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][641]) /* ty=Storage[] */;
  let %tensor_0548: int64 = memory.alloc_tensor(%storage_0630, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][641]) /* ty=int64 */;
  %2751 = fn (%p0545: int64, Primitive=1) -> int64 {
    multiply(%p0545, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2752 = (%tensor_0547,);
  %2753 = (%tensor_0548,);
  let %v543: () = vm.invoke_tvm_op(%2751, %2752, %2753) /* ty=() */;
  let %storage_0631: Storage[] = memory.alloc_storage(%tensor_0548, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][642]) /* ty=Storage[] */;
  let %out_082: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0631, 0 /* ty=int64 */, %shape_func_out_086, meta[relay.attrs.AllocTensorAttrs][642]) /* ty=Tensor[(?, ?), float32] */;
  %2754 = (%x510, %x512, %x513, meta[relay.Constant][574] /* ty=Tensor[(2), int32] */);
  %2755 = (%out_082,);
  let %v544: () = vm.invoke_tvm_op(%2745, %2754, %2755) /* ty=() */;
  let %x514: Tensor[(?, ?), float32] = %out_082;
  let %storage_0632: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][643]) /* ty=Storage[] */;
  let %tensor_0549: Tensor[(2), int32] = memory.alloc_tensor(%storage_0632, 0 /* ty=int64 */, meta[relay.Constant][576] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][643]) /* ty=Tensor[(2), int32] */;
  %2756 = fn (%p0546: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0546, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2757 = (%x514,);
  %2758 = (%tensor_0549,);
  let %v545: () = vm.invoke_tvm_op(%2756, %2757, %2758) /* ty=() */;
  let %x515: Tensor[(2), int32] = %tensor_0549;
  let %storage_0633: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][644]) /* ty=Storage[] */;
  let %tensor_0550: Tensor[(2), int32] = memory.alloc_tensor(%storage_0633, 0 /* ty=int64 */, meta[relay.Constant][577] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][644]) /* ty=Tensor[(2), int32] */;
  %2761 = fn (%p0547: Tensor[(2), bool], %p1281: Tensor[(2), int32], %p2140: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2759 = cast_like(%p2140, %p1281) /* ty=Tensor[(2), int32] */;
    %2760 = add(%p1281, %2759) /* ty=Tensor[(2), int32] */;
    where(%p0547, %2760, %p1281) /* ty=Tensor[(2), int32] */
  };
  %2762 = (meta[relay.Constant][578] /* ty=Tensor[(2), bool] */, meta[relay.Constant][579] /* ty=Tensor[(2), int32] */, %x515);
  %2763 = (%tensor_0550,);
  let %v546: () = vm.invoke_tvm_op(%2761, %2762, %2763) /* ty=() */;
  let %x516: Tensor[(2), int32] = %tensor_0550;
  let %storage_0634: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][645]) /* ty=Storage[] */;
  let %tensor_0551: Tensor[(2), int64] = memory.alloc_tensor(%storage_0634, 0 /* ty=int64 */, meta[relay.Constant][580] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][645]) /* ty=Tensor[(2), int64] */;
  %2764 = fn (%p0548: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0548, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2765 = (%x515,);
  %2766 = (%tensor_0551,);
  let %v547: () = vm.invoke_tvm_op(%2764, %2765, %2766) /* ty=() */;
  let %x517: Tensor[(2), int64] = %tensor_0551;
  let %in_shape_078: Tensor[(2), int64] = vm.shape_of(%x514, meta[relay.attrs.ShapeOfAttrs][97]) /* ty=Tensor[(2), int64] */;
  let %in_shape_145: Tensor[(2), int32] = device_copy(%x516, meta[relay.attrs.DeviceCopyAttrs][76]) /* ty=Tensor[(2), int32] */;
  let %in_shape_227: Tensor[(2), int64] = device_copy(%x517, meta[relay.attrs.DeviceCopyAttrs][77]) /* ty=Tensor[(2), int64] */;
  let %in_shape_321: Tensor[(2), int32] = device_copy(meta[relay.Constant][581] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][78]) /* ty=Tensor[(2), int32] */;
  let %storage_0635: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][646]) /* ty=Storage[] */;
  let %tensor_0552: Tensor[(2), int64] = memory.alloc_tensor(%storage_0635, 0 /* ty=int64 */, meta[relay.Constant][582] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][646]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_087: Tensor[(2), int64] = %tensor_0552;
  %2767 = fn (%p0549: Tensor[(?, ?), float32], %p1282: Tensor[(2), int32], %p2141: Tensor[(2), int64], %p383: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0549, %p1282, %p2141, %p383, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2768 = (%in_shape_078, %in_shape_145, %in_shape_227, %in_shape_321);
  %2769 = (%shape_func_out_087,);
  let %shape_func87: () = vm.shape_func(%2767, %2768, %2769, meta[relay.attrs.ShapeFuncAttrs][87]) /* ty=() */;
  let %storage_0636: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][647]) /* ty=Storage[] */;
  let %tensor_0553: int64 = memory.alloc_tensor(%storage_0636, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][647]) /* ty=int64 */;
  %2770 = fn (%p0550: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0550) /* ty=int64 */
  };
  %2771 = (%shape_func_out_087,);
  %2772 = (%tensor_0553,);
  let %v548: () = vm.invoke_tvm_op(%2770, %2771, %2772) /* ty=() */;
  let %storage_0637: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][648]) /* ty=Storage[] */;
  let %tensor_0554: int64 = memory.alloc_tensor(%storage_0637, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][648]) /* ty=int64 */;
  %2773 = fn (%p0551: int64, Primitive=1) -> int64 {
    multiply(%p0551, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2774 = (%tensor_0553,);
  %2775 = (%tensor_0554,);
  let %v549: () = vm.invoke_tvm_op(%2773, %2774, %2775) /* ty=() */;
  let %storage_0638: Storage[] = memory.alloc_storage(%tensor_0554, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][649]) /* ty=Storage[] */;
  let %out_083: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0638, 0 /* ty=int64 */, %shape_func_out_087, meta[relay.attrs.AllocTensorAttrs][649]) /* ty=Tensor[(?, ?), float32] */;
  %2776 = (%x514, %x516, %x517, meta[relay.Constant][581] /* ty=Tensor[(2), int32] */);
  %2777 = (%out_083,);
  let %v550: () = vm.invoke_tvm_op(%2767, %2776, %2777) /* ty=() */;
  let %x518: Tensor[(?, ?), float32] = %out_083;
  let %in_shape_079: Tensor[(2), int64] = vm.shape_of(%x424, meta[relay.attrs.ShapeOfAttrs][98]) /* ty=Tensor[(2), int64] */;
  let %storage_0639: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][650]) /* ty=Storage[] */;
  let %tensor_0555: Tensor[(2), int64] = memory.alloc_tensor(%storage_0639, 0 /* ty=int64 */, meta[relay.Constant][583] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][650]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_088: Tensor[(2), int64] = %tensor_0555;
  %2779 = fn (%p0552: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(?, 4), float32] {
    %2778 = (%p0552,);
    concatenate(%2778) /* ty=Tensor[(?, 4), float32] */
  };
  %2780 = (%in_shape_079,);
  %2781 = (%shape_func_out_088,);
  let %shape_func88: () = vm.shape_func(%2779, %2780, %2781, meta[relay.attrs.ShapeFuncAttrs][88]) /* ty=() */;
  let %storage_0640: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][651]) /* ty=Storage[] */;
  let %tensor_0556: int64 = memory.alloc_tensor(%storage_0640, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][651]) /* ty=int64 */;
  %2782 = fn (%p0553: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0553) /* ty=int64 */
  };
  %2783 = (%shape_func_out_088,);
  %2784 = (%tensor_0556,);
  let %v551: () = vm.invoke_tvm_op(%2782, %2783, %2784) /* ty=() */;
  let %storage_0641: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][652]) /* ty=Storage[] */;
  let %tensor_0557: int64 = memory.alloc_tensor(%storage_0641, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][652]) /* ty=int64 */;
  %2785 = fn (%p0554: int64, Primitive=1) -> int64 {
    multiply(%p0554, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2786 = (%tensor_0556,);
  %2787 = (%tensor_0557,);
  let %v552: () = vm.invoke_tvm_op(%2785, %2786, %2787) /* ty=() */;
  let %storage_0642: Storage[] = memory.alloc_storage(%tensor_0557, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][653]) /* ty=Storage[] */;
  let %out_084: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0642, 0 /* ty=int64 */, %shape_func_out_088, meta[relay.attrs.AllocTensorAttrs][653]) /* ty=Tensor[(?, 4), float32] */;
  %2788 = (%x424,);
  %2789 = (%out_084,);
  let %v553: () = vm.invoke_tvm_op(%2779, %2788, %2789) /* ty=() */;
  let %x519: Tensor[(?, 4), float32] = %out_084;
  let %storage_0643: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][654]) /* ty=Storage[] */;
  let %tensor_0558: Tensor[(2), int32] = memory.alloc_tensor(%storage_0643, 0 /* ty=int64 */, meta[relay.Constant][584] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][654]) /* ty=Tensor[(2), int32] */;
  %2790 = fn (%p0555: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0555, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2791 = (%x519,);
  %2792 = (%tensor_0558,);
  let %v554: () = vm.invoke_tvm_op(%2790, %2791, %2792) /* ty=() */;
  let %x520: Tensor[(2), int32] = %tensor_0558;
  let %storage_0644: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][655]) /* ty=Storage[] */;
  let %tensor_0559: Tensor[(2), int32] = memory.alloc_tensor(%storage_0644, 0 /* ty=int64 */, meta[relay.Constant][585] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][655]) /* ty=Tensor[(2), int32] */;
  %2795 = fn (%p0556: Tensor[(2), bool], %p1283: Tensor[(2), int32], %p2142: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2793 = cast_like(%p2142, %p1283) /* ty=Tensor[(2), int32] */;
    %2794 = add(%p1283, %2793) /* ty=Tensor[(2), int32] */;
    where(%p0556, %2794, %p1283) /* ty=Tensor[(2), int32] */
  };
  %2796 = (meta[relay.Constant][586] /* ty=Tensor[(2), bool] */, meta[relay.Constant][587] /* ty=Tensor[(2), int32] */, %x520);
  %2797 = (%tensor_0559,);
  let %v555: () = vm.invoke_tvm_op(%2795, %2796, %2797) /* ty=() */;
  let %x521: Tensor[(2), int32] = %tensor_0559;
  let %storage_0645: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][656]) /* ty=Storage[] */;
  let %tensor_0560: Tensor[(2), int64] = memory.alloc_tensor(%storage_0645, 0 /* ty=int64 */, meta[relay.Constant][588] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][656]) /* ty=Tensor[(2), int64] */;
  %2798 = fn (%p0557: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0557, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2799 = (%x520,);
  %2800 = (%tensor_0560,);
  let %v556: () = vm.invoke_tvm_op(%2798, %2799, %2800) /* ty=() */;
  let %x522: Tensor[(2), int64] = %tensor_0560;
  let %in_shape_080: Tensor[(2), int64] = vm.shape_of(%x519, meta[relay.attrs.ShapeOfAttrs][99]) /* ty=Tensor[(2), int64] */;
  let %in_shape_146: Tensor[(2), int32] = device_copy(%x521, meta[relay.attrs.DeviceCopyAttrs][79]) /* ty=Tensor[(2), int32] */;
  let %in_shape_228: Tensor[(2), int64] = device_copy(%x522, meta[relay.attrs.DeviceCopyAttrs][80]) /* ty=Tensor[(2), int64] */;
  let %in_shape_322: Tensor[(2), int32] = device_copy(meta[relay.Constant][589] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][81]) /* ty=Tensor[(2), int32] */;
  let %storage_0646: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][657]) /* ty=Storage[] */;
  let %tensor_0561: Tensor[(2), int64] = memory.alloc_tensor(%storage_0646, 0 /* ty=int64 */, meta[relay.Constant][590] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][657]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_089: Tensor[(2), int64] = %tensor_0561;
  %2801 = fn (%p0558: Tensor[(?, 4), float32], %p1284: Tensor[(2), int32], %p2143: Tensor[(2), int64], %p384: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0558, %p1284, %p2143, %p384, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2802 = (%in_shape_080, %in_shape_146, %in_shape_228, %in_shape_322);
  %2803 = (%shape_func_out_089,);
  let %shape_func89: () = vm.shape_func(%2801, %2802, %2803, meta[relay.attrs.ShapeFuncAttrs][89]) /* ty=() */;
  let %storage_0647: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][658]) /* ty=Storage[] */;
  let %tensor_0562: int64 = memory.alloc_tensor(%storage_0647, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][658]) /* ty=int64 */;
  %2804 = fn (%p0559: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0559) /* ty=int64 */
  };
  %2805 = (%shape_func_out_089,);
  %2806 = (%tensor_0562,);
  let %v557: () = vm.invoke_tvm_op(%2804, %2805, %2806) /* ty=() */;
  let %storage_0648: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][659]) /* ty=Storage[] */;
  let %tensor_0563: int64 = memory.alloc_tensor(%storage_0648, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][659]) /* ty=int64 */;
  %2807 = fn (%p0560: int64, Primitive=1) -> int64 {
    multiply(%p0560, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2808 = (%tensor_0562,);
  %2809 = (%tensor_0563,);
  let %v558: () = vm.invoke_tvm_op(%2807, %2808, %2809) /* ty=() */;
  let %storage_0649: Storage[] = memory.alloc_storage(%tensor_0563, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][660]) /* ty=Storage[] */;
  let %out_085: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0649, 0 /* ty=int64 */, %shape_func_out_089, meta[relay.attrs.AllocTensorAttrs][660]) /* ty=Tensor[(?, ?), float32] */;
  %2810 = (%x519, %x521, %x522, meta[relay.Constant][589] /* ty=Tensor[(2), int32] */);
  %2811 = (%out_085,);
  let %v559: () = vm.invoke_tvm_op(%2801, %2810, %2811) /* ty=() */;
  let %x523: Tensor[(?, ?), float32] = %out_085;
  let %storage_0650: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][661]) /* ty=Storage[] */;
  let %tensor_0564: Tensor[(2), int32] = memory.alloc_tensor(%storage_0650, 0 /* ty=int64 */, meta[relay.Constant][591] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][661]) /* ty=Tensor[(2), int32] */;
  %2814 = fn (%p0561: Tensor[(2), bool], %p1285: Tensor[(2), int32], %p2144: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2812 = cast_like(%p2144, %p1285) /* ty=Tensor[(2), int32] */;
    %2813 = add(%p1285, %2812) /* ty=Tensor[(2), int32] */;
    where(%p0561, %2813, %p1285) /* ty=Tensor[(2), int32] */
  };
  %2815 = (meta[relay.Constant][592] /* ty=Tensor[(2), bool] */, meta[relay.Constant][593] /* ty=Tensor[(2), int32] */, %x520);
  %2816 = (%tensor_0564,);
  let %v560: () = vm.invoke_tvm_op(%2814, %2815, %2816) /* ty=() */;
  let %x524: Tensor[(2), int32] = %tensor_0564;
  let %in_shape_081: Tensor[(2), int64] = vm.shape_of(%x519, meta[relay.attrs.ShapeOfAttrs][100]) /* ty=Tensor[(2), int64] */;
  let %in_shape_147: Tensor[(2), int32] = device_copy(%x524, meta[relay.attrs.DeviceCopyAttrs][82]) /* ty=Tensor[(2), int32] */;
  let %in_shape_229: Tensor[(2), int64] = device_copy(%x522, meta[relay.attrs.DeviceCopyAttrs][83]) /* ty=Tensor[(2), int64] */;
  let %in_shape_323: Tensor[(2), int32] = device_copy(meta[relay.Constant][594] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][84]) /* ty=Tensor[(2), int32] */;
  let %storage_0651: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][662]) /* ty=Storage[] */;
  let %tensor_0565: Tensor[(2), int64] = memory.alloc_tensor(%storage_0651, 0 /* ty=int64 */, meta[relay.Constant][595] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][662]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_090: Tensor[(2), int64] = %tensor_0565;
  %2817 = fn (%p0562: Tensor[(?, 4), float32], %p1286: Tensor[(2), int32], %p2145: Tensor[(2), int64], %p385: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0562, %p1286, %p2145, %p385, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2818 = (%in_shape_081, %in_shape_147, %in_shape_229, %in_shape_323);
  %2819 = (%shape_func_out_090,);
  let %shape_func90: () = vm.shape_func(%2817, %2818, %2819, meta[relay.attrs.ShapeFuncAttrs][90]) /* ty=() */;
  let %storage_0652: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][663]) /* ty=Storage[] */;
  let %tensor_0566: int64 = memory.alloc_tensor(%storage_0652, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][663]) /* ty=int64 */;
  %2820 = fn (%p0563: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0563) /* ty=int64 */
  };
  %2821 = (%shape_func_out_090,);
  %2822 = (%tensor_0566,);
  let %v561: () = vm.invoke_tvm_op(%2820, %2821, %2822) /* ty=() */;
  let %storage_0653: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][664]) /* ty=Storage[] */;
  let %tensor_0567: int64 = memory.alloc_tensor(%storage_0653, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][664]) /* ty=int64 */;
  %2823 = fn (%p0564: int64, Primitive=1) -> int64 {
    multiply(%p0564, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2824 = (%tensor_0566,);
  %2825 = (%tensor_0567,);
  let %v562: () = vm.invoke_tvm_op(%2823, %2824, %2825) /* ty=() */;
  let %storage_0654: Storage[] = memory.alloc_storage(%tensor_0567, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][665]) /* ty=Storage[] */;
  let %out_086: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0654, 0 /* ty=int64 */, %shape_func_out_090, meta[relay.attrs.AllocTensorAttrs][665]) /* ty=Tensor[(?, ?), float32] */;
  %2826 = (%x519, %x524, %x522, meta[relay.Constant][594] /* ty=Tensor[(2), int32] */);
  %2827 = (%out_086,);
  let %v563: () = vm.invoke_tvm_op(%2817, %2826, %2827) /* ty=() */;
  let %x525: Tensor[(?, ?), float32] = %out_086;
  let %in_shape_082: Tensor[(2), int64] = vm.shape_of(%x523, meta[relay.attrs.ShapeOfAttrs][101]) /* ty=Tensor[(2), int64] */;
  let %in_shape_148: Tensor[(2), int64] = vm.shape_of(%x525, meta[relay.attrs.ShapeOfAttrs][102]) /* ty=Tensor[(2), int64] */;
  let %storage_0655: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][666]) /* ty=Storage[] */;
  let %tensor_0568: Tensor[(1), int64] = memory.alloc_tensor(%storage_0655, 0 /* ty=int64 */, meta[relay.Constant][596] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][666]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_091: Tensor[(1), int64] = %tensor_0568;
  %2830 = fn (%p0565: Tensor[(?, ?), float32], %p1287: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), float32] {
    %2828 = take(%p0565, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %2829 = take(%p1287, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    subtract(%2828, %2829) /* ty=Tensor[(?), float32] */
  };
  %2831 = (%in_shape_082, %in_shape_148);
  %2832 = (%shape_func_out_091,);
  let %shape_func91: () = vm.shape_func(%2830, %2831, %2832, meta[relay.attrs.ShapeFuncAttrs][91]) /* ty=() */;
  let %storage_0656: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][667]) /* ty=Storage[] */;
  let %tensor_0569: int64 = memory.alloc_tensor(%storage_0656, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][667]) /* ty=int64 */;
  %2833 = fn (%p0566: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0566) /* ty=int64 */
  };
  %2834 = (%shape_func_out_091,);
  %2835 = (%tensor_0569,);
  let %v564: () = vm.invoke_tvm_op(%2833, %2834, %2835) /* ty=() */;
  let %storage_0657: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][668]) /* ty=Storage[] */;
  let %tensor_0570: int64 = memory.alloc_tensor(%storage_0657, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][668]) /* ty=int64 */;
  %2836 = fn (%p0567: int64, Primitive=1) -> int64 {
    multiply(%p0567, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2837 = (%tensor_0569,);
  %2838 = (%tensor_0570,);
  let %v565: () = vm.invoke_tvm_op(%2836, %2837, %2838) /* ty=() */;
  let %storage_0658: Storage[] = memory.alloc_storage(%tensor_0570, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][669]) /* ty=Storage[] */;
  let %out_087: Tensor[(?), float32] = memory.alloc_tensor(%storage_0658, 0 /* ty=int64 */, %shape_func_out_091, meta[relay.attrs.AllocTensorAttrs][669]) /* ty=Tensor[(?), float32] */;
  %2839 = (%x523, %x525);
  %2840 = (%out_087,);
  let %v566: () = vm.invoke_tvm_op(%2830, %2839, %2840) /* ty=() */;
  let %x526: Tensor[(?), float32] = %out_087;
  let %storage_0659: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][670]) /* ty=Storage[] */;
  let %tensor_0571: Tensor[(1), int32] = memory.alloc_tensor(%storage_0659, 0 /* ty=int64 */, meta[relay.Constant][597] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][670]) /* ty=Tensor[(1), int32] */;
  %2841 = fn (%p0568: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
    shape_of(%p0568, dtype="int32") /* ty=Tensor[(1), int32] */
  };
  %2842 = (%x526,);
  %2843 = (%tensor_0571,);
  let %v567: () = vm.invoke_tvm_op(%2841, %2842, %2843) /* ty=() */;
  let %x527: Tensor[(1), int32] = %tensor_0571;
  let %storage_0660: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][671]) /* ty=Storage[] */;
  let %tensor_0572: Tensor[(1), int32] = memory.alloc_tensor(%storage_0660, 0 /* ty=int64 */, meta[relay.Constant][598] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][671]) /* ty=Tensor[(1), int32] */;
  %2846 = fn (%p0569: Tensor[(1), bool], %p1288: Tensor[(1), int32], %p2146: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int32] {
    %2844 = cast_like(%p2146, %p1288) /* ty=Tensor[(1), int32] */;
    %2845 = add(%p1288, %2844) /* ty=Tensor[(1), int32] */;
    where(%p0569, %2845, %p1288) /* ty=Tensor[(1), int32] */
  };
  %2847 = (meta[relay.Constant][599] /* ty=Tensor[(1), bool] */, meta[relay.Constant][600] /* ty=Tensor[(1), int32] */, %x527);
  %2848 = (%tensor_0572,);
  let %v568: () = vm.invoke_tvm_op(%2846, %2847, %2848) /* ty=() */;
  let %x528: Tensor[(1), int32] = %tensor_0572;
  let %storage_0661: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][672]) /* ty=Storage[] */;
  let %tensor_0573: Tensor[(1), int64] = memory.alloc_tensor(%storage_0661, 0 /* ty=int64 */, meta[relay.Constant][601] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][672]) /* ty=Tensor[(1), int64] */;
  %2849 = fn (%p0570: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int64] {
    cast(%p0570, dtype="int64") /* ty=Tensor[(1), int64] */
  };
  %2850 = (%x527,);
  %2851 = (%tensor_0573,);
  let %v569: () = vm.invoke_tvm_op(%2849, %2850, %2851) /* ty=() */;
  let %x529: Tensor[(1), int64] = %tensor_0573;
  let %in_shape_083: Tensor[(1), int64] = vm.shape_of(%x526, meta[relay.attrs.ShapeOfAttrs][103]) /* ty=Tensor[(1), int64] */;
  let %in_shape_149: Tensor[(1), int32] = device_copy(%x528, meta[relay.attrs.DeviceCopyAttrs][85]) /* ty=Tensor[(1), int32] */;
  let %in_shape_230: Tensor[(1), int64] = device_copy(%x529, meta[relay.attrs.DeviceCopyAttrs][86]) /* ty=Tensor[(1), int64] */;
  let %in_shape_324: Tensor[(1), int32] = device_copy(meta[relay.Constant][602] /* ty=Tensor[(1), int32] */, meta[relay.attrs.DeviceCopyAttrs][87]) /* ty=Tensor[(1), int32] */;
  let %storage_0662: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][673]) /* ty=Storage[] */;
  let %tensor_0574: Tensor[(1), int64] = memory.alloc_tensor(%storage_0662, 0 /* ty=int64 */, meta[relay.Constant][603] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][673]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_092: Tensor[(1), int64] = %tensor_0574;
  %2852 = fn (%p0571: Tensor[(?), float32], %p1289: Tensor[(1), int32], %p2147: Tensor[(1), int64], %p386: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0571, %p1289, %p2147, %p386, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %2853 = (%in_shape_083, %in_shape_149, %in_shape_230, %in_shape_324);
  %2854 = (%shape_func_out_092,);
  let %shape_func92: () = vm.shape_func(%2852, %2853, %2854, meta[relay.attrs.ShapeFuncAttrs][92]) /* ty=() */;
  let %storage_0663: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][674]) /* ty=Storage[] */;
  let %tensor_0575: int64 = memory.alloc_tensor(%storage_0663, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][674]) /* ty=int64 */;
  %2855 = fn (%p0572: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0572) /* ty=int64 */
  };
  %2856 = (%shape_func_out_092,);
  %2857 = (%tensor_0575,);
  let %v570: () = vm.invoke_tvm_op(%2855, %2856, %2857) /* ty=() */;
  let %storage_0664: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][675]) /* ty=Storage[] */;
  let %tensor_0576: int64 = memory.alloc_tensor(%storage_0664, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][675]) /* ty=int64 */;
  %2858 = fn (%p0573: int64, Primitive=1) -> int64 {
    multiply(%p0573, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2859 = (%tensor_0575,);
  %2860 = (%tensor_0576,);
  let %v571: () = vm.invoke_tvm_op(%2858, %2859, %2860) /* ty=() */;
  let %storage_0665: Storage[] = memory.alloc_storage(%tensor_0576, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][676]) /* ty=Storage[] */;
  let %out_088: Tensor[(?), float32] = memory.alloc_tensor(%storage_0665, 0 /* ty=int64 */, %shape_func_out_092, meta[relay.attrs.AllocTensorAttrs][676]) /* ty=Tensor[(?), float32] */;
  %2861 = (%x526, %x528, %x529, meta[relay.Constant][602] /* ty=Tensor[(1), int32] */);
  %2862 = (%out_088,);
  let %v572: () = vm.invoke_tvm_op(%2852, %2861, %2862) /* ty=() */;
  let %x530: Tensor[(?), float32] = %out_088;
  let %storage_0666: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][677]) /* ty=Storage[] */;
  let %tensor_0577: Tensor[(2), int32] = memory.alloc_tensor(%storage_0666, 0 /* ty=int64 */, meta[relay.Constant][604] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][677]) /* ty=Tensor[(2), int32] */;
  %2865 = fn (%p0574: Tensor[(2), bool], %p1290: Tensor[(2), int32], %p2148: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2863 = cast_like(%p2148, %p1290) /* ty=Tensor[(2), int32] */;
    %2864 = add(%p1290, %2863) /* ty=Tensor[(2), int32] */;
    where(%p0574, %2864, %p1290) /* ty=Tensor[(2), int32] */
  };
  %2866 = (meta[relay.Constant][605] /* ty=Tensor[(2), bool] */, meta[relay.Constant][606] /* ty=Tensor[(2), int32] */, %x520);
  %2867 = (%tensor_0577,);
  let %v573: () = vm.invoke_tvm_op(%2865, %2866, %2867) /* ty=() */;
  let %x531: Tensor[(2), int32] = %tensor_0577;
  let %in_shape_084: Tensor[(2), int64] = vm.shape_of(%x519, meta[relay.attrs.ShapeOfAttrs][104]) /* ty=Tensor[(2), int64] */;
  let %in_shape_150: Tensor[(2), int32] = device_copy(%x531, meta[relay.attrs.DeviceCopyAttrs][88]) /* ty=Tensor[(2), int32] */;
  let %in_shape_231: Tensor[(2), int64] = device_copy(%x522, meta[relay.attrs.DeviceCopyAttrs][89]) /* ty=Tensor[(2), int64] */;
  let %in_shape_325: Tensor[(2), int32] = device_copy(meta[relay.Constant][607] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][90]) /* ty=Tensor[(2), int32] */;
  let %storage_0667: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][678]) /* ty=Storage[] */;
  let %tensor_0578: Tensor[(2), int64] = memory.alloc_tensor(%storage_0667, 0 /* ty=int64 */, meta[relay.Constant][608] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][678]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_093: Tensor[(2), int64] = %tensor_0578;
  %2868 = fn (%p0575: Tensor[(?, 4), float32], %p1291: Tensor[(2), int32], %p2149: Tensor[(2), int64], %p387: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0575, %p1291, %p2149, %p387, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2869 = (%in_shape_084, %in_shape_150, %in_shape_231, %in_shape_325);
  %2870 = (%shape_func_out_093,);
  let %shape_func93: () = vm.shape_func(%2868, %2869, %2870, meta[relay.attrs.ShapeFuncAttrs][93]) /* ty=() */;
  let %storage_0668: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][679]) /* ty=Storage[] */;
  let %tensor_0579: int64 = memory.alloc_tensor(%storage_0668, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][679]) /* ty=int64 */;
  %2871 = fn (%p0576: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0576) /* ty=int64 */
  };
  %2872 = (%shape_func_out_093,);
  %2873 = (%tensor_0579,);
  let %v574: () = vm.invoke_tvm_op(%2871, %2872, %2873) /* ty=() */;
  let %storage_0669: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][680]) /* ty=Storage[] */;
  let %tensor_0580: int64 = memory.alloc_tensor(%storage_0669, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][680]) /* ty=int64 */;
  %2874 = fn (%p0577: int64, Primitive=1) -> int64 {
    multiply(%p0577, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2875 = (%tensor_0579,);
  %2876 = (%tensor_0580,);
  let %v575: () = vm.invoke_tvm_op(%2874, %2875, %2876) /* ty=() */;
  let %storage_0670: Storage[] = memory.alloc_storage(%tensor_0580, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][681]) /* ty=Storage[] */;
  let %out_089: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0670, 0 /* ty=int64 */, %shape_func_out_093, meta[relay.attrs.AllocTensorAttrs][681]) /* ty=Tensor[(?, ?), float32] */;
  %2877 = (%x519, %x531, %x522, meta[relay.Constant][607] /* ty=Tensor[(2), int32] */);
  %2878 = (%out_089,);
  let %v576: () = vm.invoke_tvm_op(%2868, %2877, %2878) /* ty=() */;
  let %x532: Tensor[(?, ?), float32] = %out_089;
  let %in_shape_085: Tensor[(2), int64] = vm.shape_of(%x532, meta[relay.attrs.ShapeOfAttrs][105]) /* ty=Tensor[(2), int64] */;
  let %in_shape_151: Tensor[(1), int64] = vm.shape_of(%x526, meta[relay.attrs.ShapeOfAttrs][106]) /* ty=Tensor[(1), int64] */;
  let %storage_0671: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][682]) /* ty=Storage[] */;
  let %tensor_0581: Tensor[(1), int64] = memory.alloc_tensor(%storage_0671, 0 /* ty=int64 */, meta[relay.Constant][609] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][682]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_094: Tensor[(1), int64] = %tensor_0581;
  %2881 = fn (%p0578: Tensor[(?, ?), float32], %p1292: Tensor[(?), float32], Primitive=1) -> Tensor[(?), float32] {
    %2879 = take(%p0578, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %2880 = multiply(%p1292, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    add(%2879, %2880) /* ty=Tensor[(?), float32] */
  };
  %2882 = (%in_shape_085, %in_shape_151);
  %2883 = (%shape_func_out_094,);
  let %shape_func94: () = vm.shape_func(%2881, %2882, %2883, meta[relay.attrs.ShapeFuncAttrs][94]) /* ty=() */;
  let %storage_0672: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][683]) /* ty=Storage[] */;
  let %tensor_0582: int64 = memory.alloc_tensor(%storage_0672, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][683]) /* ty=int64 */;
  %2884 = fn (%p0579: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0579) /* ty=int64 */
  };
  %2885 = (%shape_func_out_094,);
  %2886 = (%tensor_0582,);
  let %v577: () = vm.invoke_tvm_op(%2884, %2885, %2886) /* ty=() */;
  let %storage_0673: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][684]) /* ty=Storage[] */;
  let %tensor_0583: int64 = memory.alloc_tensor(%storage_0673, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][684]) /* ty=int64 */;
  %2887 = fn (%p0580: int64, Primitive=1) -> int64 {
    multiply(%p0580, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2888 = (%tensor_0582,);
  %2889 = (%tensor_0583,);
  let %v578: () = vm.invoke_tvm_op(%2887, %2888, %2889) /* ty=() */;
  let %storage_0674: Storage[] = memory.alloc_storage(%tensor_0583, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][685]) /* ty=Storage[] */;
  let %out_090: Tensor[(?), float32] = memory.alloc_tensor(%storage_0674, 0 /* ty=int64 */, %shape_func_out_094, meta[relay.attrs.AllocTensorAttrs][685]) /* ty=Tensor[(?), float32] */;
  %2890 = (%x532, %x526);
  %2891 = (%out_090,);
  let %v579: () = vm.invoke_tvm_op(%2881, %2890, %2891) /* ty=() */;
  let %x533: Tensor[(?), float32] = %out_090;
  let %storage_0675: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][686]) /* ty=Storage[] */;
  let %tensor_0584: Tensor[(1), int32] = memory.alloc_tensor(%storage_0675, 0 /* ty=int64 */, meta[relay.Constant][610] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][686]) /* ty=Tensor[(1), int32] */;
  %2892 = fn (%p0581: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
    shape_of(%p0581, dtype="int32") /* ty=Tensor[(1), int32] */
  };
  %2893 = (%x533,);
  %2894 = (%tensor_0584,);
  let %v580: () = vm.invoke_tvm_op(%2892, %2893, %2894) /* ty=() */;
  let %x534: Tensor[(1), int32] = %tensor_0584;
  let %storage_0676: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][687]) /* ty=Storage[] */;
  let %tensor_0585: Tensor[(1), int32] = memory.alloc_tensor(%storage_0676, 0 /* ty=int64 */, meta[relay.Constant][611] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][687]) /* ty=Tensor[(1), int32] */;
  %2897 = fn (%p0582: Tensor[(1), bool], %p1293: Tensor[(1), int32], %p2150: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int32] {
    %2895 = cast_like(%p2150, %p1293) /* ty=Tensor[(1), int32] */;
    %2896 = add(%p1293, %2895) /* ty=Tensor[(1), int32] */;
    where(%p0582, %2896, %p1293) /* ty=Tensor[(1), int32] */
  };
  %2898 = (meta[relay.Constant][612] /* ty=Tensor[(1), bool] */, meta[relay.Constant][613] /* ty=Tensor[(1), int32] */, %x534);
  %2899 = (%tensor_0585,);
  let %v581: () = vm.invoke_tvm_op(%2897, %2898, %2899) /* ty=() */;
  let %x535: Tensor[(1), int32] = %tensor_0585;
  let %storage_0677: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][688]) /* ty=Storage[] */;
  let %tensor_0586: Tensor[(1), int64] = memory.alloc_tensor(%storage_0677, 0 /* ty=int64 */, meta[relay.Constant][614] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][688]) /* ty=Tensor[(1), int64] */;
  %2900 = fn (%p0583: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int64] {
    cast(%p0583, dtype="int64") /* ty=Tensor[(1), int64] */
  };
  %2901 = (%x534,);
  %2902 = (%tensor_0586,);
  let %v582: () = vm.invoke_tvm_op(%2900, %2901, %2902) /* ty=() */;
  let %x536: Tensor[(1), int64] = %tensor_0586;
  let %in_shape_086: Tensor[(1), int64] = vm.shape_of(%x533, meta[relay.attrs.ShapeOfAttrs][107]) /* ty=Tensor[(1), int64] */;
  let %in_shape_152: Tensor[(1), int32] = device_copy(%x535, meta[relay.attrs.DeviceCopyAttrs][91]) /* ty=Tensor[(1), int32] */;
  let %in_shape_232: Tensor[(1), int64] = device_copy(%x536, meta[relay.attrs.DeviceCopyAttrs][92]) /* ty=Tensor[(1), int64] */;
  let %in_shape_326: Tensor[(1), int32] = device_copy(meta[relay.Constant][615] /* ty=Tensor[(1), int32] */, meta[relay.attrs.DeviceCopyAttrs][93]) /* ty=Tensor[(1), int32] */;
  let %storage_0678: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][689]) /* ty=Storage[] */;
  let %tensor_0587: Tensor[(1), int64] = memory.alloc_tensor(%storage_0678, 0 /* ty=int64 */, meta[relay.Constant][616] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][689]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_095: Tensor[(1), int64] = %tensor_0587;
  %2903 = fn (%p0584: Tensor[(?), float32], %p1294: Tensor[(1), int32], %p2151: Tensor[(1), int64], %p388: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0584, %p1294, %p2151, %p388, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %2904 = (%in_shape_086, %in_shape_152, %in_shape_232, %in_shape_326);
  %2905 = (%shape_func_out_095,);
  let %shape_func95: () = vm.shape_func(%2903, %2904, %2905, meta[relay.attrs.ShapeFuncAttrs][95]) /* ty=() */;
  let %storage_0679: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][690]) /* ty=Storage[] */;
  let %tensor_0588: int64 = memory.alloc_tensor(%storage_0679, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][690]) /* ty=int64 */;
  %2906 = fn (%p0585: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0585) /* ty=int64 */
  };
  %2907 = (%shape_func_out_095,);
  %2908 = (%tensor_0588,);
  let %v583: () = vm.invoke_tvm_op(%2906, %2907, %2908) /* ty=() */;
  let %storage_0680: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][691]) /* ty=Storage[] */;
  let %tensor_0589: int64 = memory.alloc_tensor(%storage_0680, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][691]) /* ty=int64 */;
  %2909 = fn (%p0586: int64, Primitive=1) -> int64 {
    multiply(%p0586, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2910 = (%tensor_0588,);
  %2911 = (%tensor_0589,);
  let %v584: () = vm.invoke_tvm_op(%2909, %2910, %2911) /* ty=() */;
  let %storage_0681: Storage[] = memory.alloc_storage(%tensor_0589, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][692]) /* ty=Storage[] */;
  let %out_091: Tensor[(?), float32] = memory.alloc_tensor(%storage_0681, 0 /* ty=int64 */, %shape_func_out_095, meta[relay.attrs.AllocTensorAttrs][692]) /* ty=Tensor[(?), float32] */;
  %2912 = (%x533, %x535, %x536, meta[relay.Constant][615] /* ty=Tensor[(1), int32] */);
  %2913 = (%out_091,);
  let %v585: () = vm.invoke_tvm_op(%2903, %2912, %2913) /* ty=() */;
  let %x537: Tensor[(?), float32] = %out_091;
  let %storage_0682: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][693]) /* ty=Storage[] */;
  let %tensor_0590: Tensor[(2), int32] = memory.alloc_tensor(%storage_0682, 0 /* ty=int64 */, meta[relay.Constant][617] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][693]) /* ty=Tensor[(2), int32] */;
  %2916 = fn (%p0587: Tensor[(2), bool], %p1295: Tensor[(2), int32], %p2152: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2914 = cast_like(%p2152, %p1295) /* ty=Tensor[(2), int32] */;
    %2915 = add(%p1295, %2914) /* ty=Tensor[(2), int32] */;
    where(%p0587, %2915, %p1295) /* ty=Tensor[(2), int32] */
  };
  %2917 = (meta[relay.Constant][618] /* ty=Tensor[(2), bool] */, meta[relay.Constant][619] /* ty=Tensor[(2), int32] */, %x511);
  %2918 = (%tensor_0590,);
  let %v586: () = vm.invoke_tvm_op(%2916, %2917, %2918) /* ty=() */;
  let %x538: Tensor[(2), int32] = %tensor_0590;
  let %in_shape_087: Tensor[(2), int64] = vm.shape_of(%x510, meta[relay.attrs.ShapeOfAttrs][108]) /* ty=Tensor[(2), int64] */;
  let %in_shape_153: Tensor[(2), int32] = device_copy(%x538, meta[relay.attrs.DeviceCopyAttrs][94]) /* ty=Tensor[(2), int32] */;
  let %in_shape_233: Tensor[(2), int64] = device_copy(%x513, meta[relay.attrs.DeviceCopyAttrs][95]) /* ty=Tensor[(2), int64] */;
  let %in_shape_327: Tensor[(2), int32] = device_copy(meta[relay.Constant][620] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][96]) /* ty=Tensor[(2), int32] */;
  let %storage_0683: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][694]) /* ty=Storage[] */;
  let %tensor_0591: Tensor[(2), int64] = memory.alloc_tensor(%storage_0683, 0 /* ty=int64 */, meta[relay.Constant][621] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][694]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_096: Tensor[(2), int64] = %tensor_0591;
  %2919 = fn (%p0588: Tensor[(?, ?), float32], %p1296: Tensor[(2), int32], %p2153: Tensor[(2), int64], %p389: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0588, %p1296, %p2153, %p389, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2920 = (%in_shape_087, %in_shape_153, %in_shape_233, %in_shape_327);
  %2921 = (%shape_func_out_096,);
  let %shape_func96: () = vm.shape_func(%2919, %2920, %2921, meta[relay.attrs.ShapeFuncAttrs][96]) /* ty=() */;
  let %storage_0684: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][695]) /* ty=Storage[] */;
  let %tensor_0592: int64 = memory.alloc_tensor(%storage_0684, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][695]) /* ty=int64 */;
  %2922 = fn (%p0589: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0589) /* ty=int64 */
  };
  %2923 = (%shape_func_out_096,);
  %2924 = (%tensor_0592,);
  let %v587: () = vm.invoke_tvm_op(%2922, %2923, %2924) /* ty=() */;
  let %storage_0685: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][696]) /* ty=Storage[] */;
  let %tensor_0593: int64 = memory.alloc_tensor(%storage_0685, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][696]) /* ty=int64 */;
  %2925 = fn (%p0590: int64, Primitive=1) -> int64 {
    multiply(%p0590, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2926 = (%tensor_0592,);
  %2927 = (%tensor_0593,);
  let %v588: () = vm.invoke_tvm_op(%2925, %2926, %2927) /* ty=() */;
  let %storage_0686: Storage[] = memory.alloc_storage(%tensor_0593, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][697]) /* ty=Storage[] */;
  let %out_092: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0686, 0 /* ty=int64 */, %shape_func_out_096, meta[relay.attrs.AllocTensorAttrs][697]) /* ty=Tensor[(?, ?), float32] */;
  %2928 = (%x510, %x538, %x513, meta[relay.Constant][620] /* ty=Tensor[(2), int32] */);
  %2929 = (%out_092,);
  let %v589: () = vm.invoke_tvm_op(%2919, %2928, %2929) /* ty=() */;
  let %x539: Tensor[(?, ?), float32] = %out_092;
  let %storage_0687: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][698]) /* ty=Storage[] */;
  let %tensor_0594: Tensor[(2), int32] = memory.alloc_tensor(%storage_0687, 0 /* ty=int64 */, meta[relay.Constant][622] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][698]) /* ty=Tensor[(2), int32] */;
  %2930 = fn (%p0591: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0591, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2931 = (%x539,);
  %2932 = (%tensor_0594,);
  let %v590: () = vm.invoke_tvm_op(%2930, %2931, %2932) /* ty=() */;
  let %x540: Tensor[(2), int32] = %tensor_0594;
  let %storage_0688: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][699]) /* ty=Storage[] */;
  let %tensor_0595: Tensor[(2), int32] = memory.alloc_tensor(%storage_0688, 0 /* ty=int64 */, meta[relay.Constant][623] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][699]) /* ty=Tensor[(2), int32] */;
  %2935 = fn (%p0592: Tensor[(2), bool], %p1297: Tensor[(2), int32], %p2154: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2933 = cast_like(%p2154, %p1297) /* ty=Tensor[(2), int32] */;
    %2934 = add(%p1297, %2933) /* ty=Tensor[(2), int32] */;
    where(%p0592, %2934, %p1297) /* ty=Tensor[(2), int32] */
  };
  %2936 = (meta[relay.Constant][624] /* ty=Tensor[(2), bool] */, meta[relay.Constant][625] /* ty=Tensor[(2), int32] */, %x540);
  %2937 = (%tensor_0595,);
  let %v591: () = vm.invoke_tvm_op(%2935, %2936, %2937) /* ty=() */;
  let %x541: Tensor[(2), int32] = %tensor_0595;
  let %storage_0689: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][700]) /* ty=Storage[] */;
  let %tensor_0596: Tensor[(2), int64] = memory.alloc_tensor(%storage_0689, 0 /* ty=int64 */, meta[relay.Constant][626] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][700]) /* ty=Tensor[(2), int64] */;
  %2938 = fn (%p0593: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0593, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2939 = (%x540,);
  %2940 = (%tensor_0596,);
  let %v592: () = vm.invoke_tvm_op(%2938, %2939, %2940) /* ty=() */;
  let %x542: Tensor[(2), int64] = %tensor_0596;
  let %in_shape_088: Tensor[(2), int64] = vm.shape_of(%x539, meta[relay.attrs.ShapeOfAttrs][109]) /* ty=Tensor[(2), int64] */;
  let %in_shape_154: Tensor[(2), int32] = device_copy(%x541, meta[relay.attrs.DeviceCopyAttrs][97]) /* ty=Tensor[(2), int32] */;
  let %in_shape_234: Tensor[(2), int64] = device_copy(%x542, meta[relay.attrs.DeviceCopyAttrs][98]) /* ty=Tensor[(2), int64] */;
  let %in_shape_328: Tensor[(2), int32] = device_copy(meta[relay.Constant][627] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][99]) /* ty=Tensor[(2), int32] */;
  let %storage_0690: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][701]) /* ty=Storage[] */;
  let %tensor_0597: Tensor[(2), int64] = memory.alloc_tensor(%storage_0690, 0 /* ty=int64 */, meta[relay.Constant][628] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][701]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_097: Tensor[(2), int64] = %tensor_0597;
  %2941 = fn (%p0594: Tensor[(?, ?), float32], %p1298: Tensor[(2), int32], %p2155: Tensor[(2), int64], %p390: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0594, %p1298, %p2155, %p390, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2942 = (%in_shape_088, %in_shape_154, %in_shape_234, %in_shape_328);
  %2943 = (%shape_func_out_097,);
  let %shape_func97: () = vm.shape_func(%2941, %2942, %2943, meta[relay.attrs.ShapeFuncAttrs][97]) /* ty=() */;
  let %storage_0691: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][702]) /* ty=Storage[] */;
  let %tensor_0598: int64 = memory.alloc_tensor(%storage_0691, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][702]) /* ty=int64 */;
  %2944 = fn (%p0595: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0595) /* ty=int64 */
  };
  %2945 = (%shape_func_out_097,);
  %2946 = (%tensor_0598,);
  let %v593: () = vm.invoke_tvm_op(%2944, %2945, %2946) /* ty=() */;
  let %storage_0692: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][703]) /* ty=Storage[] */;
  let %tensor_0599: int64 = memory.alloc_tensor(%storage_0692, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][703]) /* ty=int64 */;
  %2947 = fn (%p0596: int64, Primitive=1) -> int64 {
    multiply(%p0596, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2948 = (%tensor_0598,);
  %2949 = (%tensor_0599,);
  let %v594: () = vm.invoke_tvm_op(%2947, %2948, %2949) /* ty=() */;
  let %storage_0693: Storage[] = memory.alloc_storage(%tensor_0599, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][704]) /* ty=Storage[] */;
  let %out_093: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0693, 0 /* ty=int64 */, %shape_func_out_097, meta[relay.attrs.AllocTensorAttrs][704]) /* ty=Tensor[(?, ?), float32] */;
  %2950 = (%x539, %x541, %x542, meta[relay.Constant][627] /* ty=Tensor[(2), int32] */);
  %2951 = (%out_093,);
  let %v595: () = vm.invoke_tvm_op(%2941, %2950, %2951) /* ty=() */;
  let %x543: Tensor[(?, ?), float32] = %out_093;
  let %storage_0694: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][705]) /* ty=Storage[] */;
  let %tensor_0600: Tensor[(1), int32] = memory.alloc_tensor(%storage_0694, 0 /* ty=int64 */, meta[relay.Constant][629] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][705]) /* ty=Tensor[(1), int32] */;
  %2954 = fn (%p0597: Tensor[(1), bool], %p1299: Tensor[(1), int32], %p2156: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int32] {
    %2952 = cast_like(%p2156, %p1299) /* ty=Tensor[(1), int32] */;
    %2953 = add(%p1299, %2952) /* ty=Tensor[(1), int32] */;
    where(%p0597, %2953, %p1299) /* ty=Tensor[(1), int32] */
  };
  %2955 = (meta[relay.Constant][630] /* ty=Tensor[(1), bool] */, meta[relay.Constant][631] /* ty=Tensor[(1), int32] */, %x527);
  %2956 = (%tensor_0600,);
  let %v596: () = vm.invoke_tvm_op(%2954, %2955, %2956) /* ty=() */;
  let %x544: Tensor[(1), int32] = %tensor_0600;
  let %in_shape_089: Tensor[(1), int64] = vm.shape_of(%x526, meta[relay.attrs.ShapeOfAttrs][110]) /* ty=Tensor[(1), int64] */;
  let %in_shape_155: Tensor[(1), int32] = device_copy(%x544, meta[relay.attrs.DeviceCopyAttrs][100]) /* ty=Tensor[(1), int32] */;
  let %in_shape_235: Tensor[(1), int64] = device_copy(%x529, meta[relay.attrs.DeviceCopyAttrs][101]) /* ty=Tensor[(1), int64] */;
  let %in_shape_329: Tensor[(1), int32] = device_copy(meta[relay.Constant][632] /* ty=Tensor[(1), int32] */, meta[relay.attrs.DeviceCopyAttrs][102]) /* ty=Tensor[(1), int32] */;
  let %storage_0695: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][706]) /* ty=Storage[] */;
  let %tensor_0601: Tensor[(1), int64] = memory.alloc_tensor(%storage_0695, 0 /* ty=int64 */, meta[relay.Constant][633] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][706]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_098: Tensor[(1), int64] = %tensor_0601;
  %2957 = fn (%p0598: Tensor[(?), float32], %p1300: Tensor[(1), int32], %p2157: Tensor[(1), int64], %p391: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0598, %p1300, %p2157, %p391, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %2958 = (%in_shape_089, %in_shape_155, %in_shape_235, %in_shape_329);
  %2959 = (%shape_func_out_098,);
  let %shape_func98: () = vm.shape_func(%2957, %2958, %2959, meta[relay.attrs.ShapeFuncAttrs][98]) /* ty=() */;
  let %storage_0696: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][707]) /* ty=Storage[] */;
  let %tensor_0602: int64 = memory.alloc_tensor(%storage_0696, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][707]) /* ty=int64 */;
  %2960 = fn (%p0599: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0599) /* ty=int64 */
  };
  %2961 = (%shape_func_out_098,);
  %2962 = (%tensor_0602,);
  let %v597: () = vm.invoke_tvm_op(%2960, %2961, %2962) /* ty=() */;
  let %storage_0697: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][708]) /* ty=Storage[] */;
  let %tensor_0603: int64 = memory.alloc_tensor(%storage_0697, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][708]) /* ty=int64 */;
  %2963 = fn (%p0600: int64, Primitive=1) -> int64 {
    multiply(%p0600, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2964 = (%tensor_0602,);
  %2965 = (%tensor_0603,);
  let %v598: () = vm.invoke_tvm_op(%2963, %2964, %2965) /* ty=() */;
  let %storage_0698: Storage[] = memory.alloc_storage(%tensor_0603, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][709]) /* ty=Storage[] */;
  let %out_094: Tensor[(?), float32] = memory.alloc_tensor(%storage_0698, 0 /* ty=int64 */, %shape_func_out_098, meta[relay.attrs.AllocTensorAttrs][709]) /* ty=Tensor[(?), float32] */;
  %2966 = (%x526, %x544, %x529, meta[relay.Constant][632] /* ty=Tensor[(1), int32] */);
  %2967 = (%out_094,);
  let %v599: () = vm.invoke_tvm_op(%2957, %2966, %2967) /* ty=() */;
  let %x545: Tensor[(?), float32] = %out_094;
  let %storage_0699: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][710]) /* ty=Storage[] */;
  let %tensor_0604: Tensor[(2), int32] = memory.alloc_tensor(%storage_0699, 0 /* ty=int64 */, meta[relay.Constant][634] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][710]) /* ty=Tensor[(2), int32] */;
  %2970 = fn (%p0601: Tensor[(2), bool], %p1301: Tensor[(2), int32], %p2158: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2968 = cast_like(%p2158, %p1301) /* ty=Tensor[(2), int32] */;
    %2969 = add(%p1301, %2968) /* ty=Tensor[(2), int32] */;
    where(%p0601, %2969, %p1301) /* ty=Tensor[(2), int32] */
  };
  %2971 = (meta[relay.Constant][635] /* ty=Tensor[(2), bool] */, meta[relay.Constant][636] /* ty=Tensor[(2), int32] */, %x511);
  %2972 = (%tensor_0604,);
  let %v600: () = vm.invoke_tvm_op(%2970, %2971, %2972) /* ty=() */;
  let %x546: Tensor[(2), int32] = %tensor_0604;
  let %in_shape_090: Tensor[(2), int64] = vm.shape_of(%x510, meta[relay.attrs.ShapeOfAttrs][111]) /* ty=Tensor[(2), int64] */;
  let %in_shape_156: Tensor[(2), int32] = device_copy(%x546, meta[relay.attrs.DeviceCopyAttrs][103]) /* ty=Tensor[(2), int32] */;
  let %in_shape_236: Tensor[(2), int64] = device_copy(%x513, meta[relay.attrs.DeviceCopyAttrs][104]) /* ty=Tensor[(2), int64] */;
  let %in_shape_330: Tensor[(2), int32] = device_copy(meta[relay.Constant][637] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][105]) /* ty=Tensor[(2), int32] */;
  let %storage_0700: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][711]) /* ty=Storage[] */;
  let %tensor_0605: Tensor[(2), int64] = memory.alloc_tensor(%storage_0700, 0 /* ty=int64 */, meta[relay.Constant][638] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][711]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_099: Tensor[(2), int64] = %tensor_0605;
  %2973 = fn (%p0602: Tensor[(?, ?), float32], %p1302: Tensor[(2), int32], %p2159: Tensor[(2), int64], %p392: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0602, %p1302, %p2159, %p392, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2974 = (%in_shape_090, %in_shape_156, %in_shape_236, %in_shape_330);
  %2975 = (%shape_func_out_099,);
  let %shape_func99: () = vm.shape_func(%2973, %2974, %2975, meta[relay.attrs.ShapeFuncAttrs][99]) /* ty=() */;
  let %storage_0701: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][712]) /* ty=Storage[] */;
  let %tensor_0606: int64 = memory.alloc_tensor(%storage_0701, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][712]) /* ty=int64 */;
  %2976 = fn (%p0603: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0603) /* ty=int64 */
  };
  %2977 = (%shape_func_out_099,);
  %2978 = (%tensor_0606,);
  let %v601: () = vm.invoke_tvm_op(%2976, %2977, %2978) /* ty=() */;
  let %storage_0702: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][713]) /* ty=Storage[] */;
  let %tensor_0607: int64 = memory.alloc_tensor(%storage_0702, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][713]) /* ty=int64 */;
  %2979 = fn (%p0604: int64, Primitive=1) -> int64 {
    multiply(%p0604, 4 /* ty=int64 */) /* ty=int64 */
  };
  %2980 = (%tensor_0606,);
  %2981 = (%tensor_0607,);
  let %v602: () = vm.invoke_tvm_op(%2979, %2980, %2981) /* ty=() */;
  let %storage_0703: Storage[] = memory.alloc_storage(%tensor_0607, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][714]) /* ty=Storage[] */;
  let %out_095: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0703, 0 /* ty=int64 */, %shape_func_out_099, meta[relay.attrs.AllocTensorAttrs][714]) /* ty=Tensor[(?, ?), float32] */;
  %2982 = (%x510, %x546, %x513, meta[relay.Constant][637] /* ty=Tensor[(2), int32] */);
  %2983 = (%out_095,);
  let %v603: () = vm.invoke_tvm_op(%2973, %2982, %2983) /* ty=() */;
  let %x547: Tensor[(?, ?), float32] = %out_095;
  let %storage_0704: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][715]) /* ty=Storage[] */;
  let %tensor_0608: Tensor[(2), int32] = memory.alloc_tensor(%storage_0704, 0 /* ty=int64 */, meta[relay.Constant][639] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][715]) /* ty=Tensor[(2), int32] */;
  %2984 = fn (%p0605: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0605, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %2985 = (%x547,);
  %2986 = (%tensor_0608,);
  let %v604: () = vm.invoke_tvm_op(%2984, %2985, %2986) /* ty=() */;
  let %x548: Tensor[(2), int32] = %tensor_0608;
  let %storage_0705: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][716]) /* ty=Storage[] */;
  let %tensor_0609: Tensor[(2), int32] = memory.alloc_tensor(%storage_0705, 0 /* ty=int64 */, meta[relay.Constant][640] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][716]) /* ty=Tensor[(2), int32] */;
  %2989 = fn (%p0606: Tensor[(2), bool], %p1303: Tensor[(2), int32], %p2160: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %2987 = cast_like(%p2160, %p1303) /* ty=Tensor[(2), int32] */;
    %2988 = add(%p1303, %2987) /* ty=Tensor[(2), int32] */;
    where(%p0606, %2988, %p1303) /* ty=Tensor[(2), int32] */
  };
  %2990 = (meta[relay.Constant][641] /* ty=Tensor[(2), bool] */, meta[relay.Constant][642] /* ty=Tensor[(2), int32] */, %x548);
  %2991 = (%tensor_0609,);
  let %v605: () = vm.invoke_tvm_op(%2989, %2990, %2991) /* ty=() */;
  let %x549: Tensor[(2), int32] = %tensor_0609;
  let %storage_0706: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][717]) /* ty=Storage[] */;
  let %tensor_0610: Tensor[(2), int64] = memory.alloc_tensor(%storage_0706, 0 /* ty=int64 */, meta[relay.Constant][643] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][717]) /* ty=Tensor[(2), int64] */;
  %2992 = fn (%p0607: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0607, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %2993 = (%x548,);
  %2994 = (%tensor_0610,);
  let %v606: () = vm.invoke_tvm_op(%2992, %2993, %2994) /* ty=() */;
  let %x550: Tensor[(2), int64] = %tensor_0610;
  let %in_shape_091: Tensor[(2), int64] = vm.shape_of(%x547, meta[relay.attrs.ShapeOfAttrs][112]) /* ty=Tensor[(2), int64] */;
  let %in_shape_157: Tensor[(2), int32] = device_copy(%x549, meta[relay.attrs.DeviceCopyAttrs][106]) /* ty=Tensor[(2), int32] */;
  let %in_shape_237: Tensor[(2), int64] = device_copy(%x550, meta[relay.attrs.DeviceCopyAttrs][107]) /* ty=Tensor[(2), int64] */;
  let %in_shape_331: Tensor[(2), int32] = device_copy(meta[relay.Constant][644] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][108]) /* ty=Tensor[(2), int32] */;
  let %storage_0707: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][718]) /* ty=Storage[] */;
  let %tensor_0611: Tensor[(2), int64] = memory.alloc_tensor(%storage_0707, 0 /* ty=int64 */, meta[relay.Constant][645] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][718]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0100: Tensor[(2), int64] = %tensor_0611;
  %2995 = fn (%p0608: Tensor[(?, ?), float32], %p1304: Tensor[(2), int32], %p2161: Tensor[(2), int64], %p393: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0608, %p1304, %p2161, %p393, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %2996 = (%in_shape_091, %in_shape_157, %in_shape_237, %in_shape_331);
  %2997 = (%shape_func_out_0100,);
  let %shape_func100: () = vm.shape_func(%2995, %2996, %2997, meta[relay.attrs.ShapeFuncAttrs][100]) /* ty=() */;
  let %storage_0708: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][719]) /* ty=Storage[] */;
  let %tensor_0612: int64 = memory.alloc_tensor(%storage_0708, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][719]) /* ty=int64 */;
  %2998 = fn (%p0609: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0609) /* ty=int64 */
  };
  %2999 = (%shape_func_out_0100,);
  %3000 = (%tensor_0612,);
  let %v607: () = vm.invoke_tvm_op(%2998, %2999, %3000) /* ty=() */;
  let %storage_0709: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][720]) /* ty=Storage[] */;
  let %tensor_0613: int64 = memory.alloc_tensor(%storage_0709, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][720]) /* ty=int64 */;
  %3001 = fn (%p0610: int64, Primitive=1) -> int64 {
    multiply(%p0610, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3002 = (%tensor_0612,);
  %3003 = (%tensor_0613,);
  let %v608: () = vm.invoke_tvm_op(%3001, %3002, %3003) /* ty=() */;
  let %storage_0710: Storage[] = memory.alloc_storage(%tensor_0613, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][721]) /* ty=Storage[] */;
  let %out_096: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0710, 0 /* ty=int64 */, %shape_func_out_0100, meta[relay.attrs.AllocTensorAttrs][721]) /* ty=Tensor[(?, ?), float32] */;
  %3004 = (%x547, %x549, %x550, meta[relay.Constant][644] /* ty=Tensor[(2), int32] */);
  %3005 = (%out_096,);
  let %v609: () = vm.invoke_tvm_op(%2995, %3004, %3005) /* ty=() */;
  let %x551: Tensor[(?, ?), float32] = %out_096;
  let %storage_0711: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][722]) /* ty=Storage[] */;
  let %tensor_0614: Tensor[(2), int32] = memory.alloc_tensor(%storage_0711, 0 /* ty=int64 */, meta[relay.Constant][646] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][722]) /* ty=Tensor[(2), int32] */;
  %3008 = fn (%p0611: Tensor[(2), bool], %p1305: Tensor[(2), int32], %p2162: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3006 = cast_like(%p2162, %p1305) /* ty=Tensor[(2), int32] */;
    %3007 = add(%p1305, %3006) /* ty=Tensor[(2), int32] */;
    where(%p0611, %3007, %p1305) /* ty=Tensor[(2), int32] */
  };
  %3009 = (meta[relay.Constant][647] /* ty=Tensor[(2), bool] */, meta[relay.Constant][648] /* ty=Tensor[(2), int32] */, %x520);
  %3010 = (%tensor_0614,);
  let %v610: () = vm.invoke_tvm_op(%3008, %3009, %3010) /* ty=() */;
  let %x552: Tensor[(2), int32] = %tensor_0614;
  let %in_shape_092: Tensor[(2), int64] = vm.shape_of(%x519, meta[relay.attrs.ShapeOfAttrs][113]) /* ty=Tensor[(2), int64] */;
  let %in_shape_158: Tensor[(2), int32] = device_copy(%x552, meta[relay.attrs.DeviceCopyAttrs][109]) /* ty=Tensor[(2), int32] */;
  let %in_shape_238: Tensor[(2), int64] = device_copy(%x522, meta[relay.attrs.DeviceCopyAttrs][110]) /* ty=Tensor[(2), int64] */;
  let %in_shape_332: Tensor[(2), int32] = device_copy(meta[relay.Constant][649] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][111]) /* ty=Tensor[(2), int32] */;
  let %storage_0712: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][723]) /* ty=Storage[] */;
  let %tensor_0615: Tensor[(2), int64] = memory.alloc_tensor(%storage_0712, 0 /* ty=int64 */, meta[relay.Constant][650] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][723]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0101: Tensor[(2), int64] = %tensor_0615;
  %3011 = fn (%p0612: Tensor[(?, 4), float32], %p1306: Tensor[(2), int32], %p2163: Tensor[(2), int64], %p394: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0612, %p1306, %p2163, %p394, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3012 = (%in_shape_092, %in_shape_158, %in_shape_238, %in_shape_332);
  %3013 = (%shape_func_out_0101,);
  let %shape_func101: () = vm.shape_func(%3011, %3012, %3013, meta[relay.attrs.ShapeFuncAttrs][101]) /* ty=() */;
  let %storage_0713: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][724]) /* ty=Storage[] */;
  let %tensor_0616: int64 = memory.alloc_tensor(%storage_0713, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][724]) /* ty=int64 */;
  %3014 = fn (%p0613: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0613) /* ty=int64 */
  };
  %3015 = (%shape_func_out_0101,);
  %3016 = (%tensor_0616,);
  let %v611: () = vm.invoke_tvm_op(%3014, %3015, %3016) /* ty=() */;
  let %storage_0714: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][725]) /* ty=Storage[] */;
  let %tensor_0617: int64 = memory.alloc_tensor(%storage_0714, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][725]) /* ty=int64 */;
  %3017 = fn (%p0614: int64, Primitive=1) -> int64 {
    multiply(%p0614, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3018 = (%tensor_0616,);
  %3019 = (%tensor_0617,);
  let %v612: () = vm.invoke_tvm_op(%3017, %3018, %3019) /* ty=() */;
  let %storage_0715: Storage[] = memory.alloc_storage(%tensor_0617, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][726]) /* ty=Storage[] */;
  let %out_097: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0715, 0 /* ty=int64 */, %shape_func_out_0101, meta[relay.attrs.AllocTensorAttrs][726]) /* ty=Tensor[(?, ?), float32] */;
  %3020 = (%x519, %x552, %x522, meta[relay.Constant][649] /* ty=Tensor[(2), int32] */);
  %3021 = (%out_097,);
  let %v613: () = vm.invoke_tvm_op(%3011, %3020, %3021) /* ty=() */;
  let %x553: Tensor[(?, ?), float32] = %out_097;
  let %storage_0716: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][727]) /* ty=Storage[] */;
  let %tensor_0618: Tensor[(2), int32] = memory.alloc_tensor(%storage_0716, 0 /* ty=int64 */, meta[relay.Constant][651] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][727]) /* ty=Tensor[(2), int32] */;
  %3024 = fn (%p0615: Tensor[(2), bool], %p1307: Tensor[(2), int32], %p2164: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3022 = cast_like(%p2164, %p1307) /* ty=Tensor[(2), int32] */;
    %3023 = add(%p1307, %3022) /* ty=Tensor[(2), int32] */;
    where(%p0615, %3023, %p1307) /* ty=Tensor[(2), int32] */
  };
  %3025 = (meta[relay.Constant][652] /* ty=Tensor[(2), bool] */, meta[relay.Constant][653] /* ty=Tensor[(2), int32] */, %x520);
  %3026 = (%tensor_0618,);
  let %v614: () = vm.invoke_tvm_op(%3024, %3025, %3026) /* ty=() */;
  let %x554: Tensor[(2), int32] = %tensor_0618;
  let %in_shape_093: Tensor[(2), int64] = vm.shape_of(%x519, meta[relay.attrs.ShapeOfAttrs][114]) /* ty=Tensor[(2), int64] */;
  let %in_shape_159: Tensor[(2), int32] = device_copy(%x554, meta[relay.attrs.DeviceCopyAttrs][112]) /* ty=Tensor[(2), int32] */;
  let %in_shape_239: Tensor[(2), int64] = device_copy(%x522, meta[relay.attrs.DeviceCopyAttrs][113]) /* ty=Tensor[(2), int64] */;
  let %in_shape_333: Tensor[(2), int32] = device_copy(meta[relay.Constant][654] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][114]) /* ty=Tensor[(2), int32] */;
  let %storage_0717: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][728]) /* ty=Storage[] */;
  let %tensor_0619: Tensor[(2), int64] = memory.alloc_tensor(%storage_0717, 0 /* ty=int64 */, meta[relay.Constant][655] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][728]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0102: Tensor[(2), int64] = %tensor_0619;
  %3027 = fn (%p0616: Tensor[(?, 4), float32], %p1308: Tensor[(2), int32], %p2165: Tensor[(2), int64], %p395: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0616, %p1308, %p2165, %p395, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3028 = (%in_shape_093, %in_shape_159, %in_shape_239, %in_shape_333);
  %3029 = (%shape_func_out_0102,);
  let %shape_func102: () = vm.shape_func(%3027, %3028, %3029, meta[relay.attrs.ShapeFuncAttrs][102]) /* ty=() */;
  let %storage_0718: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][729]) /* ty=Storage[] */;
  let %tensor_0620: int64 = memory.alloc_tensor(%storage_0718, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][729]) /* ty=int64 */;
  %3030 = fn (%p0617: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0617) /* ty=int64 */
  };
  %3031 = (%shape_func_out_0102,);
  %3032 = (%tensor_0620,);
  let %v615: () = vm.invoke_tvm_op(%3030, %3031, %3032) /* ty=() */;
  let %storage_0719: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][730]) /* ty=Storage[] */;
  let %tensor_0621: int64 = memory.alloc_tensor(%storage_0719, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][730]) /* ty=int64 */;
  %3033 = fn (%p0618: int64, Primitive=1) -> int64 {
    multiply(%p0618, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3034 = (%tensor_0620,);
  %3035 = (%tensor_0621,);
  let %v616: () = vm.invoke_tvm_op(%3033, %3034, %3035) /* ty=() */;
  let %storage_0720: Storage[] = memory.alloc_storage(%tensor_0621, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][731]) /* ty=Storage[] */;
  let %out_098: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0720, 0 /* ty=int64 */, %shape_func_out_0102, meta[relay.attrs.AllocTensorAttrs][731]) /* ty=Tensor[(?, ?), float32] */;
  %3036 = (%x519, %x554, %x522, meta[relay.Constant][654] /* ty=Tensor[(2), int32] */);
  %3037 = (%out_098,);
  let %v617: () = vm.invoke_tvm_op(%3027, %3036, %3037) /* ty=() */;
  let %x555: Tensor[(?, ?), float32] = %out_098;
  let %in_shape_094: Tensor[(2), int64] = vm.shape_of(%x553, meta[relay.attrs.ShapeOfAttrs][115]) /* ty=Tensor[(2), int64] */;
  let %in_shape_160: Tensor[(2), int64] = vm.shape_of(%x555, meta[relay.attrs.ShapeOfAttrs][116]) /* ty=Tensor[(2), int64] */;
  let %storage_0721: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][732]) /* ty=Storage[] */;
  let %tensor_0622: Tensor[(1), int64] = memory.alloc_tensor(%storage_0721, 0 /* ty=int64 */, meta[relay.Constant][656] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][732]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0103: Tensor[(1), int64] = %tensor_0622;
  %3040 = fn (%p0619: Tensor[(?, ?), float32], %p1309: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), float32] {
    %3038 = take(%p0619, 3 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %3039 = take(%p1309, 1 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    subtract(%3038, %3039) /* ty=Tensor[(?), float32] */
  };
  %3041 = (%in_shape_094, %in_shape_160);
  %3042 = (%shape_func_out_0103,);
  let %shape_func103: () = vm.shape_func(%3040, %3041, %3042, meta[relay.attrs.ShapeFuncAttrs][103]) /* ty=() */;
  let %storage_0722: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][733]) /* ty=Storage[] */;
  let %tensor_0623: int64 = memory.alloc_tensor(%storage_0722, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][733]) /* ty=int64 */;
  %3043 = fn (%p0620: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0620) /* ty=int64 */
  };
  %3044 = (%shape_func_out_0103,);
  %3045 = (%tensor_0623,);
  let %v618: () = vm.invoke_tvm_op(%3043, %3044, %3045) /* ty=() */;
  let %storage_0723: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][734]) /* ty=Storage[] */;
  let %tensor_0624: int64 = memory.alloc_tensor(%storage_0723, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][734]) /* ty=int64 */;
  %3046 = fn (%p0621: int64, Primitive=1) -> int64 {
    multiply(%p0621, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3047 = (%tensor_0623,);
  %3048 = (%tensor_0624,);
  let %v619: () = vm.invoke_tvm_op(%3046, %3047, %3048) /* ty=() */;
  let %storage_0724: Storage[] = memory.alloc_storage(%tensor_0624, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][735]) /* ty=Storage[] */;
  let %out_099: Tensor[(?), float32] = memory.alloc_tensor(%storage_0724, 0 /* ty=int64 */, %shape_func_out_0103, meta[relay.attrs.AllocTensorAttrs][735]) /* ty=Tensor[(?), float32] */;
  %3049 = (%x553, %x555);
  %3050 = (%out_099,);
  let %v620: () = vm.invoke_tvm_op(%3040, %3049, %3050) /* ty=() */;
  let %x556: Tensor[(?), float32] = %out_099;
  let %storage_0725: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][736]) /* ty=Storage[] */;
  let %tensor_0625: Tensor[(1), int32] = memory.alloc_tensor(%storage_0725, 0 /* ty=int64 */, meta[relay.Constant][657] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][736]) /* ty=Tensor[(1), int32] */;
  %3051 = fn (%p0622: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
    shape_of(%p0622, dtype="int32") /* ty=Tensor[(1), int32] */
  };
  %3052 = (%x556,);
  %3053 = (%tensor_0625,);
  let %v621: () = vm.invoke_tvm_op(%3051, %3052, %3053) /* ty=() */;
  let %x557: Tensor[(1), int32] = %tensor_0625;
  let %storage_0726: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][737]) /* ty=Storage[] */;
  let %tensor_0626: Tensor[(1), int32] = memory.alloc_tensor(%storage_0726, 0 /* ty=int64 */, meta[relay.Constant][658] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][737]) /* ty=Tensor[(1), int32] */;
  %3056 = fn (%p0623: Tensor[(1), bool], %p1310: Tensor[(1), int32], %p2166: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int32] {
    %3054 = cast_like(%p2166, %p1310) /* ty=Tensor[(1), int32] */;
    %3055 = add(%p1310, %3054) /* ty=Tensor[(1), int32] */;
    where(%p0623, %3055, %p1310) /* ty=Tensor[(1), int32] */
  };
  %3057 = (meta[relay.Constant][659] /* ty=Tensor[(1), bool] */, meta[relay.Constant][660] /* ty=Tensor[(1), int32] */, %x557);
  %3058 = (%tensor_0626,);
  let %v622: () = vm.invoke_tvm_op(%3056, %3057, %3058) /* ty=() */;
  let %x558: Tensor[(1), int32] = %tensor_0626;
  let %storage_0727: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][738]) /* ty=Storage[] */;
  let %tensor_0627: Tensor[(1), int64] = memory.alloc_tensor(%storage_0727, 0 /* ty=int64 */, meta[relay.Constant][661] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][738]) /* ty=Tensor[(1), int64] */;
  %3059 = fn (%p0624: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int64] {
    cast(%p0624, dtype="int64") /* ty=Tensor[(1), int64] */
  };
  %3060 = (%x557,);
  %3061 = (%tensor_0627,);
  let %v623: () = vm.invoke_tvm_op(%3059, %3060, %3061) /* ty=() */;
  let %x559: Tensor[(1), int64] = %tensor_0627;
  let %in_shape_095: Tensor[(1), int64] = vm.shape_of(%x556, meta[relay.attrs.ShapeOfAttrs][117]) /* ty=Tensor[(1), int64] */;
  let %in_shape_161: Tensor[(1), int32] = device_copy(%x558, meta[relay.attrs.DeviceCopyAttrs][115]) /* ty=Tensor[(1), int32] */;
  let %in_shape_240: Tensor[(1), int64] = device_copy(%x559, meta[relay.attrs.DeviceCopyAttrs][116]) /* ty=Tensor[(1), int64] */;
  let %in_shape_334: Tensor[(1), int32] = device_copy(meta[relay.Constant][662] /* ty=Tensor[(1), int32] */, meta[relay.attrs.DeviceCopyAttrs][117]) /* ty=Tensor[(1), int32] */;
  let %storage_0728: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][739]) /* ty=Storage[] */;
  let %tensor_0628: Tensor[(1), int64] = memory.alloc_tensor(%storage_0728, 0 /* ty=int64 */, meta[relay.Constant][663] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][739]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0104: Tensor[(1), int64] = %tensor_0628;
  %3062 = fn (%p0625: Tensor[(?), float32], %p1311: Tensor[(1), int32], %p2167: Tensor[(1), int64], %p396: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0625, %p1311, %p2167, %p396, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %3063 = (%in_shape_095, %in_shape_161, %in_shape_240, %in_shape_334);
  %3064 = (%shape_func_out_0104,);
  let %shape_func104: () = vm.shape_func(%3062, %3063, %3064, meta[relay.attrs.ShapeFuncAttrs][104]) /* ty=() */;
  let %storage_0729: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][740]) /* ty=Storage[] */;
  let %tensor_0629: int64 = memory.alloc_tensor(%storage_0729, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][740]) /* ty=int64 */;
  %3065 = fn (%p0626: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0626) /* ty=int64 */
  };
  %3066 = (%shape_func_out_0104,);
  %3067 = (%tensor_0629,);
  let %v624: () = vm.invoke_tvm_op(%3065, %3066, %3067) /* ty=() */;
  let %storage_0730: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][741]) /* ty=Storage[] */;
  let %tensor_0630: int64 = memory.alloc_tensor(%storage_0730, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][741]) /* ty=int64 */;
  %3068 = fn (%p0627: int64, Primitive=1) -> int64 {
    multiply(%p0627, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3069 = (%tensor_0629,);
  %3070 = (%tensor_0630,);
  let %v625: () = vm.invoke_tvm_op(%3068, %3069, %3070) /* ty=() */;
  let %storage_0731: Storage[] = memory.alloc_storage(%tensor_0630, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][742]) /* ty=Storage[] */;
  let %out_0100: Tensor[(?), float32] = memory.alloc_tensor(%storage_0731, 0 /* ty=int64 */, %shape_func_out_0104, meta[relay.attrs.AllocTensorAttrs][742]) /* ty=Tensor[(?), float32] */;
  %3071 = (%x556, %x558, %x559, meta[relay.Constant][662] /* ty=Tensor[(1), int32] */);
  %3072 = (%out_0100,);
  let %v626: () = vm.invoke_tvm_op(%3062, %3071, %3072) /* ty=() */;
  let %x560: Tensor[(?), float32] = %out_0100;
  let %storage_0732: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][743]) /* ty=Storage[] */;
  let %tensor_0631: Tensor[(2), int32] = memory.alloc_tensor(%storage_0732, 0 /* ty=int64 */, meta[relay.Constant][664] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][743]) /* ty=Tensor[(2), int32] */;
  %3075 = fn (%p0628: Tensor[(2), bool], %p1312: Tensor[(2), int32], %p2168: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3073 = cast_like(%p2168, %p1312) /* ty=Tensor[(2), int32] */;
    %3074 = add(%p1312, %3073) /* ty=Tensor[(2), int32] */;
    where(%p0628, %3074, %p1312) /* ty=Tensor[(2), int32] */
  };
  %3076 = (meta[relay.Constant][665] /* ty=Tensor[(2), bool] */, meta[relay.Constant][666] /* ty=Tensor[(2), int32] */, %x520);
  %3077 = (%tensor_0631,);
  let %v627: () = vm.invoke_tvm_op(%3075, %3076, %3077) /* ty=() */;
  let %x561: Tensor[(2), int32] = %tensor_0631;
  let %in_shape_096: Tensor[(2), int64] = vm.shape_of(%x519, meta[relay.attrs.ShapeOfAttrs][118]) /* ty=Tensor[(2), int64] */;
  let %in_shape_162: Tensor[(2), int32] = device_copy(%x561, meta[relay.attrs.DeviceCopyAttrs][118]) /* ty=Tensor[(2), int32] */;
  let %in_shape_241: Tensor[(2), int64] = device_copy(%x522, meta[relay.attrs.DeviceCopyAttrs][119]) /* ty=Tensor[(2), int64] */;
  let %in_shape_335: Tensor[(2), int32] = device_copy(meta[relay.Constant][667] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][120]) /* ty=Tensor[(2), int32] */;
  let %storage_0733: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][744]) /* ty=Storage[] */;
  let %tensor_0632: Tensor[(2), int64] = memory.alloc_tensor(%storage_0733, 0 /* ty=int64 */, meta[relay.Constant][668] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][744]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0105: Tensor[(2), int64] = %tensor_0632;
  %3078 = fn (%p0629: Tensor[(?, 4), float32], %p1313: Tensor[(2), int32], %p2169: Tensor[(2), int64], %p397: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0629, %p1313, %p2169, %p397, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3079 = (%in_shape_096, %in_shape_162, %in_shape_241, %in_shape_335);
  %3080 = (%shape_func_out_0105,);
  let %shape_func105: () = vm.shape_func(%3078, %3079, %3080, meta[relay.attrs.ShapeFuncAttrs][105]) /* ty=() */;
  let %storage_0734: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][745]) /* ty=Storage[] */;
  let %tensor_0633: int64 = memory.alloc_tensor(%storage_0734, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][745]) /* ty=int64 */;
  %3081 = fn (%p0630: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0630) /* ty=int64 */
  };
  %3082 = (%shape_func_out_0105,);
  %3083 = (%tensor_0633,);
  let %v628: () = vm.invoke_tvm_op(%3081, %3082, %3083) /* ty=() */;
  let %storage_0735: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][746]) /* ty=Storage[] */;
  let %tensor_0634: int64 = memory.alloc_tensor(%storage_0735, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][746]) /* ty=int64 */;
  %3084 = fn (%p0631: int64, Primitive=1) -> int64 {
    multiply(%p0631, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3085 = (%tensor_0633,);
  %3086 = (%tensor_0634,);
  let %v629: () = vm.invoke_tvm_op(%3084, %3085, %3086) /* ty=() */;
  let %storage_0736: Storage[] = memory.alloc_storage(%tensor_0634, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][747]) /* ty=Storage[] */;
  let %out_0101: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0736, 0 /* ty=int64 */, %shape_func_out_0105, meta[relay.attrs.AllocTensorAttrs][747]) /* ty=Tensor[(?, ?), float32] */;
  %3087 = (%x519, %x561, %x522, meta[relay.Constant][667] /* ty=Tensor[(2), int32] */);
  %3088 = (%out_0101,);
  let %v630: () = vm.invoke_tvm_op(%3078, %3087, %3088) /* ty=() */;
  let %x562: Tensor[(?, ?), float32] = %out_0101;
  let %in_shape_097: Tensor[(2), int64] = vm.shape_of(%x562, meta[relay.attrs.ShapeOfAttrs][119]) /* ty=Tensor[(2), int64] */;
  let %in_shape_163: Tensor[(1), int64] = vm.shape_of(%x556, meta[relay.attrs.ShapeOfAttrs][120]) /* ty=Tensor[(1), int64] */;
  let %storage_0737: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][748]) /* ty=Storage[] */;
  let %tensor_0635: Tensor[(1), int64] = memory.alloc_tensor(%storage_0737, 0 /* ty=int64 */, meta[relay.Constant][669] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][748]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0106: Tensor[(1), int64] = %tensor_0635;
  %3091 = fn (%p0632: Tensor[(?, ?), float32], %p1314: Tensor[(?), float32], Primitive=1) -> Tensor[(?), float32] {
    %3089 = take(%p0632, 1 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %3090 = multiply(%p1314, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    add(%3089, %3090) /* ty=Tensor[(?), float32] */
  };
  %3092 = (%in_shape_097, %in_shape_163);
  %3093 = (%shape_func_out_0106,);
  let %shape_func106: () = vm.shape_func(%3091, %3092, %3093, meta[relay.attrs.ShapeFuncAttrs][106]) /* ty=() */;
  let %storage_0738: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][749]) /* ty=Storage[] */;
  let %tensor_0636: int64 = memory.alloc_tensor(%storage_0738, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][749]) /* ty=int64 */;
  %3094 = fn (%p0633: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0633) /* ty=int64 */
  };
  %3095 = (%shape_func_out_0106,);
  %3096 = (%tensor_0636,);
  let %v631: () = vm.invoke_tvm_op(%3094, %3095, %3096) /* ty=() */;
  let %storage_0739: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][750]) /* ty=Storage[] */;
  let %tensor_0637: int64 = memory.alloc_tensor(%storage_0739, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][750]) /* ty=int64 */;
  %3097 = fn (%p0634: int64, Primitive=1) -> int64 {
    multiply(%p0634, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3098 = (%tensor_0636,);
  %3099 = (%tensor_0637,);
  let %v632: () = vm.invoke_tvm_op(%3097, %3098, %3099) /* ty=() */;
  let %storage_0740: Storage[] = memory.alloc_storage(%tensor_0637, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][751]) /* ty=Storage[] */;
  let %out_0102: Tensor[(?), float32] = memory.alloc_tensor(%storage_0740, 0 /* ty=int64 */, %shape_func_out_0106, meta[relay.attrs.AllocTensorAttrs][751]) /* ty=Tensor[(?), float32] */;
  %3100 = (%x562, %x556);
  %3101 = (%out_0102,);
  let %v633: () = vm.invoke_tvm_op(%3091, %3100, %3101) /* ty=() */;
  let %x563: Tensor[(?), float32] = %out_0102;
  let %storage_0741: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][752]) /* ty=Storage[] */;
  let %tensor_0638: Tensor[(1), int32] = memory.alloc_tensor(%storage_0741, 0 /* ty=int64 */, meta[relay.Constant][670] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][752]) /* ty=Tensor[(1), int32] */;
  %3102 = fn (%p0635: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
    shape_of(%p0635, dtype="int32") /* ty=Tensor[(1), int32] */
  };
  %3103 = (%x563,);
  %3104 = (%tensor_0638,);
  let %v634: () = vm.invoke_tvm_op(%3102, %3103, %3104) /* ty=() */;
  let %x564: Tensor[(1), int32] = %tensor_0638;
  let %storage_0742: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][753]) /* ty=Storage[] */;
  let %tensor_0639: Tensor[(1), int32] = memory.alloc_tensor(%storage_0742, 0 /* ty=int64 */, meta[relay.Constant][671] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][753]) /* ty=Tensor[(1), int32] */;
  %3107 = fn (%p0636: Tensor[(1), bool], %p1315: Tensor[(1), int32], %p2170: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int32] {
    %3105 = cast_like(%p2170, %p1315) /* ty=Tensor[(1), int32] */;
    %3106 = add(%p1315, %3105) /* ty=Tensor[(1), int32] */;
    where(%p0636, %3106, %p1315) /* ty=Tensor[(1), int32] */
  };
  %3108 = (meta[relay.Constant][672] /* ty=Tensor[(1), bool] */, meta[relay.Constant][673] /* ty=Tensor[(1), int32] */, %x564);
  %3109 = (%tensor_0639,);
  let %v635: () = vm.invoke_tvm_op(%3107, %3108, %3109) /* ty=() */;
  let %x565: Tensor[(1), int32] = %tensor_0639;
  let %storage_0743: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][754]) /* ty=Storage[] */;
  let %tensor_0640: Tensor[(1), int64] = memory.alloc_tensor(%storage_0743, 0 /* ty=int64 */, meta[relay.Constant][674] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][754]) /* ty=Tensor[(1), int64] */;
  %3110 = fn (%p0637: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int64] {
    cast(%p0637, dtype="int64") /* ty=Tensor[(1), int64] */
  };
  %3111 = (%x564,);
  %3112 = (%tensor_0640,);
  let %v636: () = vm.invoke_tvm_op(%3110, %3111, %3112) /* ty=() */;
  let %x566: Tensor[(1), int64] = %tensor_0640;
  let %in_shape_098: Tensor[(1), int64] = vm.shape_of(%x563, meta[relay.attrs.ShapeOfAttrs][121]) /* ty=Tensor[(1), int64] */;
  let %in_shape_164: Tensor[(1), int32] = device_copy(%x565, meta[relay.attrs.DeviceCopyAttrs][121]) /* ty=Tensor[(1), int32] */;
  let %in_shape_242: Tensor[(1), int64] = device_copy(%x566, meta[relay.attrs.DeviceCopyAttrs][122]) /* ty=Tensor[(1), int64] */;
  let %in_shape_336: Tensor[(1), int32] = device_copy(meta[relay.Constant][675] /* ty=Tensor[(1), int32] */, meta[relay.attrs.DeviceCopyAttrs][123]) /* ty=Tensor[(1), int32] */;
  let %storage_0744: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][755]) /* ty=Storage[] */;
  let %tensor_0641: Tensor[(1), int64] = memory.alloc_tensor(%storage_0744, 0 /* ty=int64 */, meta[relay.Constant][676] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][755]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0107: Tensor[(1), int64] = %tensor_0641;
  %3113 = fn (%p0638: Tensor[(?), float32], %p1316: Tensor[(1), int32], %p2171: Tensor[(1), int64], %p398: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0638, %p1316, %p2171, %p398, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %3114 = (%in_shape_098, %in_shape_164, %in_shape_242, %in_shape_336);
  %3115 = (%shape_func_out_0107,);
  let %shape_func107: () = vm.shape_func(%3113, %3114, %3115, meta[relay.attrs.ShapeFuncAttrs][107]) /* ty=() */;
  let %storage_0745: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][756]) /* ty=Storage[] */;
  let %tensor_0642: int64 = memory.alloc_tensor(%storage_0745, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][756]) /* ty=int64 */;
  %3116 = fn (%p0639: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0639) /* ty=int64 */
  };
  %3117 = (%shape_func_out_0107,);
  %3118 = (%tensor_0642,);
  let %v637: () = vm.invoke_tvm_op(%3116, %3117, %3118) /* ty=() */;
  let %storage_0746: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][757]) /* ty=Storage[] */;
  let %tensor_0643: int64 = memory.alloc_tensor(%storage_0746, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][757]) /* ty=int64 */;
  %3119 = fn (%p0640: int64, Primitive=1) -> int64 {
    multiply(%p0640, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3120 = (%tensor_0642,);
  %3121 = (%tensor_0643,);
  let %v638: () = vm.invoke_tvm_op(%3119, %3120, %3121) /* ty=() */;
  let %storage_0747: Storage[] = memory.alloc_storage(%tensor_0643, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][758]) /* ty=Storage[] */;
  let %out_0103: Tensor[(?), float32] = memory.alloc_tensor(%storage_0747, 0 /* ty=int64 */, %shape_func_out_0107, meta[relay.attrs.AllocTensorAttrs][758]) /* ty=Tensor[(?), float32] */;
  %3122 = (%x563, %x565, %x566, meta[relay.Constant][675] /* ty=Tensor[(1), int32] */);
  %3123 = (%out_0103,);
  let %v639: () = vm.invoke_tvm_op(%3113, %3122, %3123) /* ty=() */;
  let %x567: Tensor[(?), float32] = %out_0103;
  let %storage_0748: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][759]) /* ty=Storage[] */;
  let %tensor_0644: Tensor[(2), int32] = memory.alloc_tensor(%storage_0748, 0 /* ty=int64 */, meta[relay.Constant][677] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][759]) /* ty=Tensor[(2), int32] */;
  %3126 = fn (%p0641: Tensor[(2), bool], %p1317: Tensor[(2), int32], %p2172: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3124 = cast_like(%p2172, %p1317) /* ty=Tensor[(2), int32] */;
    %3125 = add(%p1317, %3124) /* ty=Tensor[(2), int32] */;
    where(%p0641, %3125, %p1317) /* ty=Tensor[(2), int32] */
  };
  %3127 = (meta[relay.Constant][678] /* ty=Tensor[(2), bool] */, meta[relay.Constant][679] /* ty=Tensor[(2), int32] */, %x511);
  %3128 = (%tensor_0644,);
  let %v640: () = vm.invoke_tvm_op(%3126, %3127, %3128) /* ty=() */;
  let %x568: Tensor[(2), int32] = %tensor_0644;
  let %in_shape_099: Tensor[(2), int64] = vm.shape_of(%x510, meta[relay.attrs.ShapeOfAttrs][122]) /* ty=Tensor[(2), int64] */;
  let %in_shape_165: Tensor[(2), int32] = device_copy(%x568, meta[relay.attrs.DeviceCopyAttrs][124]) /* ty=Tensor[(2), int32] */;
  let %in_shape_243: Tensor[(2), int64] = device_copy(%x513, meta[relay.attrs.DeviceCopyAttrs][125]) /* ty=Tensor[(2), int64] */;
  let %in_shape_337: Tensor[(2), int32] = device_copy(meta[relay.Constant][680] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][126]) /* ty=Tensor[(2), int32] */;
  let %storage_0749: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][760]) /* ty=Storage[] */;
  let %tensor_0645: Tensor[(2), int64] = memory.alloc_tensor(%storage_0749, 0 /* ty=int64 */, meta[relay.Constant][681] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][760]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0108: Tensor[(2), int64] = %tensor_0645;
  %3129 = fn (%p0642: Tensor[(?, ?), float32], %p1318: Tensor[(2), int32], %p2173: Tensor[(2), int64], %p399: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0642, %p1318, %p2173, %p399, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3130 = (%in_shape_099, %in_shape_165, %in_shape_243, %in_shape_337);
  %3131 = (%shape_func_out_0108,);
  let %shape_func108: () = vm.shape_func(%3129, %3130, %3131, meta[relay.attrs.ShapeFuncAttrs][108]) /* ty=() */;
  let %storage_0750: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][761]) /* ty=Storage[] */;
  let %tensor_0646: int64 = memory.alloc_tensor(%storage_0750, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][761]) /* ty=int64 */;
  %3132 = fn (%p0643: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0643) /* ty=int64 */
  };
  %3133 = (%shape_func_out_0108,);
  %3134 = (%tensor_0646,);
  let %v641: () = vm.invoke_tvm_op(%3132, %3133, %3134) /* ty=() */;
  let %storage_0751: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][762]) /* ty=Storage[] */;
  let %tensor_0647: int64 = memory.alloc_tensor(%storage_0751, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][762]) /* ty=int64 */;
  %3135 = fn (%p0644: int64, Primitive=1) -> int64 {
    multiply(%p0644, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3136 = (%tensor_0646,);
  %3137 = (%tensor_0647,);
  let %v642: () = vm.invoke_tvm_op(%3135, %3136, %3137) /* ty=() */;
  let %storage_0752: Storage[] = memory.alloc_storage(%tensor_0647, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][763]) /* ty=Storage[] */;
  let %out_0104: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0752, 0 /* ty=int64 */, %shape_func_out_0108, meta[relay.attrs.AllocTensorAttrs][763]) /* ty=Tensor[(?, ?), float32] */;
  %3138 = (%x510, %x568, %x513, meta[relay.Constant][680] /* ty=Tensor[(2), int32] */);
  %3139 = (%out_0104,);
  let %v643: () = vm.invoke_tvm_op(%3129, %3138, %3139) /* ty=() */;
  let %x569: Tensor[(?, ?), float32] = %out_0104;
  let %storage_0753: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][764]) /* ty=Storage[] */;
  let %tensor_0648: Tensor[(2), int32] = memory.alloc_tensor(%storage_0753, 0 /* ty=int64 */, meta[relay.Constant][682] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][764]) /* ty=Tensor[(2), int32] */;
  %3140 = fn (%p0645: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0645, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %3141 = (%x569,);
  %3142 = (%tensor_0648,);
  let %v644: () = vm.invoke_tvm_op(%3140, %3141, %3142) /* ty=() */;
  let %x570: Tensor[(2), int32] = %tensor_0648;
  let %storage_0754: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][765]) /* ty=Storage[] */;
  let %tensor_0649: Tensor[(2), int32] = memory.alloc_tensor(%storage_0754, 0 /* ty=int64 */, meta[relay.Constant][683] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][765]) /* ty=Tensor[(2), int32] */;
  %3145 = fn (%p0646: Tensor[(2), bool], %p1319: Tensor[(2), int32], %p2174: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3143 = cast_like(%p2174, %p1319) /* ty=Tensor[(2), int32] */;
    %3144 = add(%p1319, %3143) /* ty=Tensor[(2), int32] */;
    where(%p0646, %3144, %p1319) /* ty=Tensor[(2), int32] */
  };
  %3146 = (meta[relay.Constant][684] /* ty=Tensor[(2), bool] */, meta[relay.Constant][685] /* ty=Tensor[(2), int32] */, %x570);
  %3147 = (%tensor_0649,);
  let %v645: () = vm.invoke_tvm_op(%3145, %3146, %3147) /* ty=() */;
  let %x571: Tensor[(2), int32] = %tensor_0649;
  let %storage_0755: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][766]) /* ty=Storage[] */;
  let %tensor_0650: Tensor[(2), int64] = memory.alloc_tensor(%storage_0755, 0 /* ty=int64 */, meta[relay.Constant][686] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][766]) /* ty=Tensor[(2), int64] */;
  %3148 = fn (%p0647: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0647, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %3149 = (%x570,);
  %3150 = (%tensor_0650,);
  let %v646: () = vm.invoke_tvm_op(%3148, %3149, %3150) /* ty=() */;
  let %x572: Tensor[(2), int64] = %tensor_0650;
  let %in_shape_0100: Tensor[(2), int64] = vm.shape_of(%x569, meta[relay.attrs.ShapeOfAttrs][123]) /* ty=Tensor[(2), int64] */;
  let %in_shape_166: Tensor[(2), int32] = device_copy(%x571, meta[relay.attrs.DeviceCopyAttrs][127]) /* ty=Tensor[(2), int32] */;
  let %in_shape_244: Tensor[(2), int64] = device_copy(%x572, meta[relay.attrs.DeviceCopyAttrs][128]) /* ty=Tensor[(2), int64] */;
  let %in_shape_338: Tensor[(2), int32] = device_copy(meta[relay.Constant][687] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][129]) /* ty=Tensor[(2), int32] */;
  let %storage_0756: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][767]) /* ty=Storage[] */;
  let %tensor_0651: Tensor[(2), int64] = memory.alloc_tensor(%storage_0756, 0 /* ty=int64 */, meta[relay.Constant][688] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][767]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0109: Tensor[(2), int64] = %tensor_0651;
  %3151 = fn (%p0648: Tensor[(?, ?), float32], %p1320: Tensor[(2), int32], %p2175: Tensor[(2), int64], %p3100: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0648, %p1320, %p2175, %p3100, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3152 = (%in_shape_0100, %in_shape_166, %in_shape_244, %in_shape_338);
  %3153 = (%shape_func_out_0109,);
  let %shape_func109: () = vm.shape_func(%3151, %3152, %3153, meta[relay.attrs.ShapeFuncAttrs][109]) /* ty=() */;
  let %storage_0757: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][768]) /* ty=Storage[] */;
  let %tensor_0652: int64 = memory.alloc_tensor(%storage_0757, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][768]) /* ty=int64 */;
  %3154 = fn (%p0649: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0649) /* ty=int64 */
  };
  %3155 = (%shape_func_out_0109,);
  %3156 = (%tensor_0652,);
  let %v647: () = vm.invoke_tvm_op(%3154, %3155, %3156) /* ty=() */;
  let %storage_0758: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][769]) /* ty=Storage[] */;
  let %tensor_0653: int64 = memory.alloc_tensor(%storage_0758, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][769]) /* ty=int64 */;
  %3157 = fn (%p0650: int64, Primitive=1) -> int64 {
    multiply(%p0650, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3158 = (%tensor_0652,);
  %3159 = (%tensor_0653,);
  let %v648: () = vm.invoke_tvm_op(%3157, %3158, %3159) /* ty=() */;
  let %storage_0759: Storage[] = memory.alloc_storage(%tensor_0653, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][770]) /* ty=Storage[] */;
  let %out_0105: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0759, 0 /* ty=int64 */, %shape_func_out_0109, meta[relay.attrs.AllocTensorAttrs][770]) /* ty=Tensor[(?, ?), float32] */;
  %3160 = (%x569, %x571, %x572, meta[relay.Constant][687] /* ty=Tensor[(2), int32] */);
  %3161 = (%out_0105,);
  let %v649: () = vm.invoke_tvm_op(%3151, %3160, %3161) /* ty=() */;
  let %x573: Tensor[(?, ?), float32] = %out_0105;
  let %storage_0760: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][771]) /* ty=Storage[] */;
  let %tensor_0654: Tensor[(1), int32] = memory.alloc_tensor(%storage_0760, 0 /* ty=int64 */, meta[relay.Constant][689] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][771]) /* ty=Tensor[(1), int32] */;
  %3164 = fn (%p0651: Tensor[(1), bool], %p1321: Tensor[(1), int32], %p2176: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int32] {
    %3162 = cast_like(%p2176, %p1321) /* ty=Tensor[(1), int32] */;
    %3163 = add(%p1321, %3162) /* ty=Tensor[(1), int32] */;
    where(%p0651, %3163, %p1321) /* ty=Tensor[(1), int32] */
  };
  %3165 = (meta[relay.Constant][690] /* ty=Tensor[(1), bool] */, meta[relay.Constant][691] /* ty=Tensor[(1), int32] */, %x557);
  %3166 = (%tensor_0654,);
  let %v650: () = vm.invoke_tvm_op(%3164, %3165, %3166) /* ty=() */;
  let %x574: Tensor[(1), int32] = %tensor_0654;
  let %in_shape_0101: Tensor[(1), int64] = vm.shape_of(%x556, meta[relay.attrs.ShapeOfAttrs][124]) /* ty=Tensor[(1), int64] */;
  let %in_shape_167: Tensor[(1), int32] = device_copy(%x574, meta[relay.attrs.DeviceCopyAttrs][130]) /* ty=Tensor[(1), int32] */;
  let %in_shape_245: Tensor[(1), int64] = device_copy(%x559, meta[relay.attrs.DeviceCopyAttrs][131]) /* ty=Tensor[(1), int64] */;
  let %in_shape_339: Tensor[(1), int32] = device_copy(meta[relay.Constant][692] /* ty=Tensor[(1), int32] */, meta[relay.attrs.DeviceCopyAttrs][132]) /* ty=Tensor[(1), int32] */;
  let %storage_0761: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][772]) /* ty=Storage[] */;
  let %tensor_0655: Tensor[(1), int64] = memory.alloc_tensor(%storage_0761, 0 /* ty=int64 */, meta[relay.Constant][693] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][772]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0110: Tensor[(1), int64] = %tensor_0655;
  %3167 = fn (%p0652: Tensor[(?), float32], %p1322: Tensor[(1), int32], %p2177: Tensor[(1), int64], %p3101: Tensor[(1), int32], Primitive=1) -> Tensor[(?), float32] {
    dyn.strided_slice(%p0652, %p1322, %p2177, %p3101, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */
  };
  %3168 = (%in_shape_0101, %in_shape_167, %in_shape_245, %in_shape_339);
  %3169 = (%shape_func_out_0110,);
  let %shape_func110: () = vm.shape_func(%3167, %3168, %3169, meta[relay.attrs.ShapeFuncAttrs][110]) /* ty=() */;
  let %storage_0762: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][773]) /* ty=Storage[] */;
  let %tensor_0656: int64 = memory.alloc_tensor(%storage_0762, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][773]) /* ty=int64 */;
  %3170 = fn (%p0653: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0653) /* ty=int64 */
  };
  %3171 = (%shape_func_out_0110,);
  %3172 = (%tensor_0656,);
  let %v651: () = vm.invoke_tvm_op(%3170, %3171, %3172) /* ty=() */;
  let %storage_0763: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][774]) /* ty=Storage[] */;
  let %tensor_0657: int64 = memory.alloc_tensor(%storage_0763, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][774]) /* ty=int64 */;
  %3173 = fn (%p0654: int64, Primitive=1) -> int64 {
    multiply(%p0654, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3174 = (%tensor_0656,);
  %3175 = (%tensor_0657,);
  let %v652: () = vm.invoke_tvm_op(%3173, %3174, %3175) /* ty=() */;
  let %storage_0764: Storage[] = memory.alloc_storage(%tensor_0657, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][775]) /* ty=Storage[] */;
  let %out_0106: Tensor[(?), float32] = memory.alloc_tensor(%storage_0764, 0 /* ty=int64 */, %shape_func_out_0110, meta[relay.attrs.AllocTensorAttrs][775]) /* ty=Tensor[(?), float32] */;
  %3176 = (%x556, %x574, %x559, meta[relay.Constant][692] /* ty=Tensor[(1), int32] */);
  %3177 = (%out_0106,);
  let %v653: () = vm.invoke_tvm_op(%3167, %3176, %3177) /* ty=() */;
  let %x575: Tensor[(?), float32] = %out_0106;
  let %in_shape_0102: Tensor[(2), int64] = vm.shape_of(%x518, meta[relay.attrs.ShapeOfAttrs][125]) /* ty=Tensor[(2), int64] */;
  let %in_shape_168: Tensor[(1), int64] = vm.shape_of(%x530, meta[relay.attrs.ShapeOfAttrs][126]) /* ty=Tensor[(1), int64] */;
  let %in_shape_246: Tensor[(1), int64] = vm.shape_of(%x537, meta[relay.attrs.ShapeOfAttrs][127]) /* ty=Tensor[(1), int64] */;
  let %in_shape_340: Tensor[(2), int64] = vm.shape_of(%x543, meta[relay.attrs.ShapeOfAttrs][128]) /* ty=Tensor[(2), int64] */;
  let %in_shape_41: Tensor[(1), int64] = vm.shape_of(%x545, meta[relay.attrs.ShapeOfAttrs][129]) /* ty=Tensor[(1), int64] */;
  let %in_shape_51: Tensor[(2), int64] = vm.shape_of(%x551, meta[relay.attrs.ShapeOfAttrs][130]) /* ty=Tensor[(2), int64] */;
  let %in_shape_6: Tensor[(1), int64] = vm.shape_of(%x560, meta[relay.attrs.ShapeOfAttrs][131]) /* ty=Tensor[(1), int64] */;
  let %in_shape_7: Tensor[(1), int64] = vm.shape_of(%x567, meta[relay.attrs.ShapeOfAttrs][132]) /* ty=Tensor[(1), int64] */;
  let %in_shape_8: Tensor[(2), int64] = vm.shape_of(%x573, meta[relay.attrs.ShapeOfAttrs][133]) /* ty=Tensor[(2), int64] */;
  let %in_shape_9: Tensor[(1), int64] = vm.shape_of(%x575, meta[relay.attrs.ShapeOfAttrs][134]) /* ty=Tensor[(1), int64] */;
  let %storage_0765: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][776]) /* ty=Storage[] */;
  let %tensor_0658: Tensor[(2), int64] = memory.alloc_tensor(%storage_0765, 0 /* ty=int64 */, meta[relay.Constant][694] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][776]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0111: Tensor[(2), int64] = %tensor_0658;
  %3207 = fn (%p0655: Tensor[(?, ?), float32], %p1323: Tensor[(?), float32], %p2178: Tensor[(?), float32], %p3102: Tensor[(?, ?), float32], %p458: Tensor[(?), float32], %p519: Tensor[(?, ?), float32], %p62: Tensor[(?), float32], %p72: Tensor[(?), float32], %p82: Tensor[(?, ?), float32], %p91: Tensor[(?), float32], Primitive=1) -> Tensor[(?, ?), float32] {
    %3178 = divide(%p0655, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
    %3179 = expand_dims(%p1323, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %3180 = multiply(%3178, %3179) /* ty=Tensor[(?, ?), float32] */;
    %3181 = expand_dims(%p2178, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %3182 = add(%3180, %3181) /* ty=Tensor[(?, ?), float32] */;
    %3183 = divide(%p3102, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
    %3184 = clip(%3183, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
    %3185 = exp(%3184) /* ty=Tensor[(?, ?), float32] */;
    %3186 = expand_dims(%p458, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %3187 = multiply(%3185, %3186) /* ty=Tensor[(?, ?), float32] */;
    %3188 = multiply(0.5f /* ty=float32 */, %3187) /* ty=Tensor[(?, ?), float32] */;
    %3189 = subtract(%3182, %3188) /* ty=Tensor[(?, ?), float32] */;
    %3190 = divide(%p519, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
    %3191 = expand_dims(%p62, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %3192 = multiply(%3190, %3191) /* ty=Tensor[(?, ?), float32] */;
    %3193 = expand_dims(%p72, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %3194 = add(%3192, %3193) /* ty=Tensor[(?, ?), float32] */;
    %3195 = divide(%p82, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
    %3196 = clip(%3195, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
    %3197 = exp(%3196) /* ty=Tensor[(?, ?), float32] */;
    %3198 = expand_dims(%p91, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %3199 = multiply(%3197, %3198) /* ty=Tensor[(?, ?), float32] */;
    %3200 = multiply(0.5f /* ty=float32 */, %3199) /* ty=Tensor[(?, ?), float32] */;
    %3201 = subtract(%3194, %3200) /* ty=Tensor[(?, ?), float32] */;
    %3202 = add(%3182, %3188) /* ty=Tensor[(?, ?), float32] */;
    %3203 = add(%3194, %3200) /* ty=Tensor[(?, ?), float32] */;
    %3204 = (%3189, %3201, %3202, %3203);
    %3205 = stack(%3204, axis=2) /* ty=Tensor[(?, ?, 4), float32] */;
    %3206 = reshape(%3205, newshape=[0, -1, 1]) /* ty=Tensor[(?, ?, 1), float32] */;
    squeeze(%3206, axis=[2]) /* ty=Tensor[(?, ?), float32] */
  };
  %3208 = (%in_shape_0102, %in_shape_168, %in_shape_246, %in_shape_340, %in_shape_41, %in_shape_51, %in_shape_6, %in_shape_7, %in_shape_8, %in_shape_9);
  %3209 = (%shape_func_out_0111,);
  let %shape_func111: () = vm.shape_func(%3207, %3208, %3209, meta[relay.attrs.ShapeFuncAttrs][111]) /* ty=() */;
  let %storage_0766: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][777]) /* ty=Storage[] */;
  let %tensor_0659: int64 = memory.alloc_tensor(%storage_0766, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][777]) /* ty=int64 */;
  %3210 = fn (%p0656: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0656) /* ty=int64 */
  };
  %3211 = (%shape_func_out_0111,);
  %3212 = (%tensor_0659,);
  let %v654: () = vm.invoke_tvm_op(%3210, %3211, %3212) /* ty=() */;
  let %storage_0767: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][778]) /* ty=Storage[] */;
  let %tensor_0660: int64 = memory.alloc_tensor(%storage_0767, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][778]) /* ty=int64 */;
  %3213 = fn (%p0657: int64, Primitive=1) -> int64 {
    multiply(%p0657, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3214 = (%tensor_0659,);
  %3215 = (%tensor_0660,);
  let %v655: () = vm.invoke_tvm_op(%3213, %3214, %3215) /* ty=() */;
  let %storage_0768: Storage[] = memory.alloc_storage(%tensor_0660, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][779]) /* ty=Storage[] */;
  let %out_0107: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0768, 0 /* ty=int64 */, %shape_func_out_0111, meta[relay.attrs.AllocTensorAttrs][779]) /* ty=Tensor[(?, ?), float32] */;
  %3216 = (%x518, %x530, %x537, %x543, %x545, %x551, %x560, %x567, %x573, %x575);
  %3217 = (%out_0107,);
  let %v656: () = vm.invoke_tvm_op(%3207, %3216, %3217) /* ty=() */;
  let %x576: Tensor[(?, ?), float32] = %out_0107;
  let %storage_0769: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][780]) /* ty=Storage[] */;
  let %tensor_0661: Tensor[(3), int64] = memory.alloc_tensor(%storage_0769, 0 /* ty=int64 */, meta[relay.Constant][695] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][780]) /* ty=Tensor[(3), int64] */;
  %3219 = fn (%p0658: Tensor[(1), int64], %p1324: Tensor[(1), int64], %p2179: Tensor[(1), int64], Primitive=1) -> Tensor[(3), int64] {
    %3218 = (%p0658, %p1324, %p2179);
    concatenate(%3218) /* ty=Tensor[(3), int64] */
  };
  %3220 = (%x508, meta[relay.Constant][567] /* ty=Tensor[(1), int64] */, meta[relay.Constant][696] /* ty=Tensor[(1), int64] */);
  %3221 = (%tensor_0661,);
  let %v657: () = vm.invoke_tvm_op(%3219, %3220, %3221) /* ty=() */;
  let %x577: Tensor[(3), int64] = %tensor_0661;
  let %in_shape_0103: Tensor[(2), int64] = vm.shape_of(%x576, meta[relay.attrs.ShapeOfAttrs][135]) /* ty=Tensor[(2), int64] */;
  let %in_shape_169: Tensor[(3), int64] = device_copy(%x577, meta[relay.attrs.DeviceCopyAttrs][133]) /* ty=Tensor[(3), int64] */;
  let %storage_0770: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][781]) /* ty=Storage[] */;
  let %tensor_0662: Tensor[(3), int64] = memory.alloc_tensor(%storage_0770, 0 /* ty=int64 */, meta[relay.Constant][697] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][781]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0112: Tensor[(3), int64] = %tensor_0662;
  %3222 = fn (%p0659: Tensor[(?, ?), float32], %p1325: Tensor[(3), int64], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.reshape(%p0659, %p1325, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %3223 = (%in_shape_0103, %in_shape_169);
  %3224 = (%shape_func_out_0112,);
  let %shape_func112: () = vm.shape_func(%3222, %3223, %3224, meta[relay.attrs.ShapeFuncAttrs][112]) /* ty=() */;
  let %x578: Tensor[(?, ?, ?), float32] = vm.reshape_tensor(%x576, %shape_func_out_0112, meta[relay.attrs.ReshapeTensorAttrs][110]) /* ty=Tensor[(?, ?, ?), float32] */;
  let %storage_0771: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][782]) /* ty=Storage[] */;
  let %tensor_0663: Tensor[(3), int32] = memory.alloc_tensor(%storage_0771, 0 /* ty=int64 */, meta[relay.Constant][698] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][782]) /* ty=Tensor[(3), int32] */;
  %3225 = fn (%p0660: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(3), int32] {
    shape_of(%p0660, dtype="int32") /* ty=Tensor[(3), int32] */
  };
  %3226 = (%x578,);
  %3227 = (%tensor_0663,);
  let %v658: () = vm.invoke_tvm_op(%3225, %3226, %3227) /* ty=() */;
  let %x579: Tensor[(3), int32] = %tensor_0663;
  let %storage_0772: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][783]) /* ty=Storage[] */;
  let %tensor_0664: Tensor[(3), int32] = memory.alloc_tensor(%storage_0772, 0 /* ty=int64 */, meta[relay.Constant][699] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][783]) /* ty=Tensor[(3), int32] */;
  %3230 = fn (%p0661: Tensor[(3), bool], %p1326: Tensor[(3), int32], %p2180: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int32] {
    %3228 = cast_like(%p2180, %p1326) /* ty=Tensor[(3), int32] */;
    %3229 = add(%p1326, %3228) /* ty=Tensor[(3), int32] */;
    where(%p0661, %3229, %p1326) /* ty=Tensor[(3), int32] */
  };
  %3231 = (meta[relay.Constant][700] /* ty=Tensor[(3), bool] */, meta[relay.Constant][701] /* ty=Tensor[(3), int32] */, %x579);
  %3232 = (%tensor_0664,);
  let %v659: () = vm.invoke_tvm_op(%3230, %3231, %3232) /* ty=() */;
  let %x580: Tensor[(3), int32] = %tensor_0664;
  let %storage_0773: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][784]) /* ty=Storage[] */;
  let %tensor_0665: Tensor[(3), int64] = memory.alloc_tensor(%storage_0773, 0 /* ty=int64 */, meta[relay.Constant][702] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][784]) /* ty=Tensor[(3), int64] */;
  %3233 = fn (%p0662: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    cast(%p0662, dtype="int64") /* ty=Tensor[(3), int64] */
  };
  %3234 = (%x579,);
  %3235 = (%tensor_0665,);
  let %v660: () = vm.invoke_tvm_op(%3233, %3234, %3235) /* ty=() */;
  let %x581: Tensor[(3), int64] = %tensor_0665;
  let %in_shape_0104: Tensor[(3), int64] = vm.shape_of(%x578, meta[relay.attrs.ShapeOfAttrs][136]) /* ty=Tensor[(3), int64] */;
  let %in_shape_170: Tensor[(3), int32] = device_copy(%x580, meta[relay.attrs.DeviceCopyAttrs][134]) /* ty=Tensor[(3), int32] */;
  let %in_shape_247: Tensor[(3), int64] = device_copy(%x581, meta[relay.attrs.DeviceCopyAttrs][135]) /* ty=Tensor[(3), int64] */;
  let %in_shape_341: Tensor[(3), int32] = device_copy(meta[relay.Constant][703] /* ty=Tensor[(3), int32] */, meta[relay.attrs.DeviceCopyAttrs][136]) /* ty=Tensor[(3), int32] */;
  let %storage_0774: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][785]) /* ty=Storage[] */;
  let %tensor_0666: Tensor[(3), int64] = memory.alloc_tensor(%storage_0774, 0 /* ty=int64 */, meta[relay.Constant][704] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][785]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0113: Tensor[(3), int64] = %tensor_0666;
  %3236 = fn (%p0663: Tensor[(?, ?, ?), float32], %p1327: Tensor[(3), int32], %p2181: Tensor[(3), int64], %p3103: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0663, %p1327, %p2181, %p3103, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %3237 = (%in_shape_0104, %in_shape_170, %in_shape_247, %in_shape_341);
  %3238 = (%shape_func_out_0113,);
  let %shape_func113: () = vm.shape_func(%3236, %3237, %3238, meta[relay.attrs.ShapeFuncAttrs][113]) /* ty=() */;
  let %storage_0775: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][786]) /* ty=Storage[] */;
  let %tensor_0667: int64 = memory.alloc_tensor(%storage_0775, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][786]) /* ty=int64 */;
  %3239 = fn (%p0664: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0664) /* ty=int64 */
  };
  %3240 = (%shape_func_out_0113,);
  %3241 = (%tensor_0667,);
  let %v661: () = vm.invoke_tvm_op(%3239, %3240, %3241) /* ty=() */;
  let %storage_0776: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][787]) /* ty=Storage[] */;
  let %tensor_0668: int64 = memory.alloc_tensor(%storage_0776, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][787]) /* ty=int64 */;
  %3242 = fn (%p0665: int64, Primitive=1) -> int64 {
    multiply(%p0665, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3243 = (%tensor_0667,);
  %3244 = (%tensor_0668,);
  let %v662: () = vm.invoke_tvm_op(%3242, %3243, %3244) /* ty=() */;
  let %storage_0777: Storage[] = memory.alloc_storage(%tensor_0668, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][788]) /* ty=Storage[] */;
  let %out_0108: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_0777, 0 /* ty=int64 */, %shape_func_out_0113, meta[relay.attrs.AllocTensorAttrs][788]) /* ty=Tensor[(?, ?, ?), float32] */;
  %3245 = (%x578, %x580, %x581, meta[relay.Constant][703] /* ty=Tensor[(3), int32] */);
  %3246 = (%out_0108,);
  let %v663: () = vm.invoke_tvm_op(%3236, %3245, %3246) /* ty=() */;
  let %x582: Tensor[(?, ?, ?), float32] = %out_0108;
  let %storage_0778: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][789]) /* ty=Storage[] */;
  let %tensor_0669: Tensor[(3), int32] = memory.alloc_tensor(%storage_0778, 0 /* ty=int64 */, meta[relay.Constant][705] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][789]) /* ty=Tensor[(3), int32] */;
  %3249 = fn (%p0666: Tensor[(3), bool], %p1328: Tensor[(3), int32], %p2182: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int32] {
    %3247 = cast_like(%p2182, %p1328) /* ty=Tensor[(3), int32] */;
    %3248 = add(%p1328, %3247) /* ty=Tensor[(3), int32] */;
    where(%p0666, %3248, %p1328) /* ty=Tensor[(3), int32] */
  };
  %3250 = (meta[relay.Constant][706] /* ty=Tensor[(3), bool] */, meta[relay.Constant][707] /* ty=Tensor[(3), int32] */, %x579);
  %3251 = (%tensor_0669,);
  let %v664: () = vm.invoke_tvm_op(%3249, %3250, %3251) /* ty=() */;
  let %x583: Tensor[(3), int32] = %tensor_0669;
  let %in_shape_0105: Tensor[(3), int64] = vm.shape_of(%x578, meta[relay.attrs.ShapeOfAttrs][137]) /* ty=Tensor[(3), int64] */;
  let %in_shape_171: Tensor[(3), int32] = device_copy(%x583, meta[relay.attrs.DeviceCopyAttrs][137]) /* ty=Tensor[(3), int32] */;
  let %in_shape_248: Tensor[(3), int64] = device_copy(%x581, meta[relay.attrs.DeviceCopyAttrs][138]) /* ty=Tensor[(3), int64] */;
  let %in_shape_342: Tensor[(3), int32] = device_copy(meta[relay.Constant][708] /* ty=Tensor[(3), int32] */, meta[relay.attrs.DeviceCopyAttrs][139]) /* ty=Tensor[(3), int32] */;
  let %storage_0779: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][790]) /* ty=Storage[] */;
  let %tensor_0670: Tensor[(3), int64] = memory.alloc_tensor(%storage_0779, 0 /* ty=int64 */, meta[relay.Constant][709] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][790]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0114: Tensor[(3), int64] = %tensor_0670;
  %3252 = fn (%p0667: Tensor[(?, ?, ?), float32], %p1329: Tensor[(3), int32], %p2183: Tensor[(3), int64], %p3104: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0667, %p1329, %p2183, %p3104, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %3253 = (%in_shape_0105, %in_shape_171, %in_shape_248, %in_shape_342);
  %3254 = (%shape_func_out_0114,);
  let %shape_func114: () = vm.shape_func(%3252, %3253, %3254, meta[relay.attrs.ShapeFuncAttrs][114]) /* ty=() */;
  let %storage_0780: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][791]) /* ty=Storage[] */;
  let %tensor_0671: int64 = memory.alloc_tensor(%storage_0780, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][791]) /* ty=int64 */;
  %3255 = fn (%p0668: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0668) /* ty=int64 */
  };
  %3256 = (%shape_func_out_0114,);
  %3257 = (%tensor_0671,);
  let %v665: () = vm.invoke_tvm_op(%3255, %3256, %3257) /* ty=() */;
  let %storage_0781: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][792]) /* ty=Storage[] */;
  let %tensor_0672: int64 = memory.alloc_tensor(%storage_0781, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][792]) /* ty=int64 */;
  %3258 = fn (%p0669: int64, Primitive=1) -> int64 {
    multiply(%p0669, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3259 = (%tensor_0671,);
  %3260 = (%tensor_0672,);
  let %v666: () = vm.invoke_tvm_op(%3258, %3259, %3260) /* ty=() */;
  let %storage_0782: Storage[] = memory.alloc_storage(%tensor_0672, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][793]) /* ty=Storage[] */;
  let %out_0109: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_0782, 0 /* ty=int64 */, %shape_func_out_0114, meta[relay.attrs.AllocTensorAttrs][793]) /* ty=Tensor[(?, ?, ?), float32] */;
  %3261 = (%x578, %x583, %x581, meta[relay.Constant][708] /* ty=Tensor[(3), int32] */);
  %3262 = (%out_0109,);
  let %v667: () = vm.invoke_tvm_op(%3252, %3261, %3262) /* ty=() */;
  let %x584: Tensor[(?, ?, ?), float32] = %out_0109;
  let %in_shape_0106: Tensor[(3), int64] = vm.shape_of(%x582, meta[relay.attrs.ShapeOfAttrs][138]) /* ty=Tensor[(3), int64] */;
  let %in_shape_249: Tensor[(3), int64] = vm.shape_of(%x584, meta[relay.attrs.ShapeOfAttrs][139]) /* ty=Tensor[(3), int64] */;
  let %storage_0783: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][794]) /* ty=Storage[] */;
  let %tensor_0673: Tensor[(4), int64] = memory.alloc_tensor(%storage_0783, 0 /* ty=int64 */, meta[relay.Constant][710] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][794]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0115: Tensor[(4), int64] = %tensor_0673;
  %3268 = fn (%p0670: Tensor[(?, ?, ?), float32], %p1330: float32, %p2184: Tensor[(?, ?, ?), float32], %p3105: float32, Primitive=1) -> Tensor[(?, ?, ?, 2), float32] {
    %3263 = maximum(%p0670, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
    %3264 = minimum(%3263, %p1330) /* ty=Tensor[(?, ?, ?), float32] */;
    %3265 = maximum(%p2184, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
    %3266 = minimum(%3265, %p3105) /* ty=Tensor[(?, ?, ?), float32] */;
    %3267 = (%3264, %3266);
    stack(%3267, axis=3) /* ty=Tensor[(?, ?, ?, 2), float32] */
  };
  %3269 = (%in_shape_0106, 1555776736 /* ty=int64 */, %in_shape_249, -23110496 /* ty=int64 */);
  %3270 = (%shape_func_out_0115,);
  let %shape_func115: () = vm.shape_func(%3268, %3269, %3270, meta[relay.attrs.ShapeFuncAttrs][115]) /* ty=() */;
  let %storage_0784: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][795]) /* ty=Storage[] */;
  let %tensor_0674: int64 = memory.alloc_tensor(%storage_0784, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][795]) /* ty=int64 */;
  %3271 = fn (%p0671: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0671) /* ty=int64 */
  };
  %3272 = (%shape_func_out_0115,);
  %3273 = (%tensor_0674,);
  let %v668: () = vm.invoke_tvm_op(%3271, %3272, %3273) /* ty=() */;
  let %storage_0785: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][796]) /* ty=Storage[] */;
  let %tensor_0675: int64 = memory.alloc_tensor(%storage_0785, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][796]) /* ty=int64 */;
  %3274 = fn (%p0672: int64, Primitive=1) -> int64 {
    multiply(%p0672, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3275 = (%tensor_0674,);
  %3276 = (%tensor_0675,);
  let %v669: () = vm.invoke_tvm_op(%3274, %3275, %3276) /* ty=() */;
  let %storage_0786: Storage[] = memory.alloc_storage(%tensor_0675, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][797]) /* ty=Storage[] */;
  let %out_0110: Tensor[(?, ?, ?, 2), float32] = memory.alloc_tensor(%storage_0786, 0 /* ty=int64 */, %shape_func_out_0115, meta[relay.attrs.AllocTensorAttrs][797]) /* ty=Tensor[(?, ?, ?, 2), float32] */;
  %3277 = (%x582, 800f /* ty=float32 */, %x584, 800f /* ty=float32 */);
  %3278 = (%out_0110,);
  let %v670: () = vm.invoke_tvm_op(%3268, %3277, %3278) /* ty=() */;
  let %x585: Tensor[(?, ?, ?, 2), float32] = %out_0110;
  let %storage_0787: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][798]) /* ty=Storage[] */;
  let %tensor_0676: Tensor[(3), int64] = memory.alloc_tensor(%storage_0787, 0 /* ty=int64 */, meta[relay.Constant][711] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][798]) /* ty=Tensor[(3), int64] */;
  %3289 = fn (%p0673: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    %3279 = take(%p0673, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
    %3280 = cast(%3279, dtype="int64") /* ty=int64 */;
    %3281 = expand_dims(%3280, axis=0) /* ty=Tensor[(1), int64] */;
    %3282 = take(%p0673, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
    %3283 = cast(%3282, dtype="int64") /* ty=int64 */;
    %3284 = expand_dims(%3283, axis=0) /* ty=Tensor[(1), int64] */;
    %3285 = take(%p0673, 2 /* ty=int32 */, axis=0) /* ty=int32 */;
    %3286 = cast(%3285, dtype="int64") /* ty=int64 */;
    %3287 = expand_dims(%3286, axis=0) /* ty=Tensor[(1), int64] */;
    %3288 = (%3281, %3284, %3287);
    concatenate(%3288) /* ty=Tensor[(3), int64] */
  };
  %3290 = (%x579,);
  %3291 = (%tensor_0676,);
  let %v671: () = vm.invoke_tvm_op(%3289, %3290, %3291) /* ty=() */;
  let %x586: Tensor[(3), int64] = %tensor_0676;
  let %in_shape_0107: Tensor[(4), int64] = vm.shape_of(%x585, meta[relay.attrs.ShapeOfAttrs][140]) /* ty=Tensor[(4), int64] */;
  let %in_shape_172: Tensor[(3), int64] = device_copy(%x586, meta[relay.attrs.DeviceCopyAttrs][140]) /* ty=Tensor[(3), int64] */;
  let %storage_0788: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][799]) /* ty=Storage[] */;
  let %tensor_0677: Tensor[(3), int64] = memory.alloc_tensor(%storage_0788, 0 /* ty=int64 */, meta[relay.Constant][712] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][799]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0116: Tensor[(3), int64] = %tensor_0677;
  %3292 = fn (%p0674: Tensor[(?, ?, ?, 2), float32], %p1331: Tensor[(3), int64], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.reshape(%p0674, %p1331, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %3293 = (%in_shape_0107, %in_shape_172);
  %3294 = (%shape_func_out_0116,);
  let %shape_func116: () = vm.shape_func(%3292, %3293, %3294, meta[relay.attrs.ShapeFuncAttrs][116]) /* ty=() */;
  let %x587: Tensor[(?, ?, ?), float32] = vm.reshape_tensor(%x585, %shape_func_out_0116, meta[relay.attrs.ReshapeTensorAttrs][111]) /* ty=Tensor[(?, ?, ?), float32] */;
  let %storage_0789: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][800]) /* ty=Storage[] */;
  let %tensor_0678: Tensor[(3), int32] = memory.alloc_tensor(%storage_0789, 0 /* ty=int64 */, meta[relay.Constant][713] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][800]) /* ty=Tensor[(3), int32] */;
  %3295 = fn (%p0675: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(3), int32] {
    shape_of(%p0675, dtype="int32") /* ty=Tensor[(3), int32] */
  };
  %3296 = (%x587,);
  %3297 = (%tensor_0678,);
  let %v672: () = vm.invoke_tvm_op(%3295, %3296, %3297) /* ty=() */;
  let %x588: Tensor[(3), int32] = %tensor_0678;
  let %storage_0790: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][801]) /* ty=Storage[] */;
  let %tensor_0679: Tensor[(3), int32] = memory.alloc_tensor(%storage_0790, 0 /* ty=int64 */, meta[relay.Constant][714] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][801]) /* ty=Tensor[(3), int32] */;
  %3300 = fn (%p0676: Tensor[(3), bool], %p1332: Tensor[(3), int32], %p2185: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int32] {
    %3298 = cast_like(%p2185, %p1332) /* ty=Tensor[(3), int32] */;
    %3299 = add(%p1332, %3298) /* ty=Tensor[(3), int32] */;
    where(%p0676, %3299, %p1332) /* ty=Tensor[(3), int32] */
  };
  %3301 = (meta[relay.Constant][715] /* ty=Tensor[(3), bool] */, meta[relay.Constant][716] /* ty=Tensor[(3), int32] */, %x588);
  %3302 = (%tensor_0679,);
  let %v673: () = vm.invoke_tvm_op(%3300, %3301, %3302) /* ty=() */;
  let %x589: Tensor[(3), int32] = %tensor_0679;
  let %storage_0791: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][802]) /* ty=Storage[] */;
  let %tensor_0680: Tensor[(3), int64] = memory.alloc_tensor(%storage_0791, 0 /* ty=int64 */, meta[relay.Constant][717] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][802]) /* ty=Tensor[(3), int64] */;
  %3303 = fn (%p0677: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    cast(%p0677, dtype="int64") /* ty=Tensor[(3), int64] */
  };
  %3304 = (%x588,);
  %3305 = (%tensor_0680,);
  let %v674: () = vm.invoke_tvm_op(%3303, %3304, %3305) /* ty=() */;
  let %x590: Tensor[(3), int64] = %tensor_0680;
  let %in_shape_0108: Tensor[(3), int64] = vm.shape_of(%x587, meta[relay.attrs.ShapeOfAttrs][141]) /* ty=Tensor[(3), int64] */;
  let %in_shape_173: Tensor[(3), int32] = device_copy(%x589, meta[relay.attrs.DeviceCopyAttrs][141]) /* ty=Tensor[(3), int32] */;
  let %in_shape_250: Tensor[(3), int64] = device_copy(%x590, meta[relay.attrs.DeviceCopyAttrs][142]) /* ty=Tensor[(3), int64] */;
  let %in_shape_343: Tensor[(3), int32] = device_copy(meta[relay.Constant][718] /* ty=Tensor[(3), int32] */, meta[relay.attrs.DeviceCopyAttrs][143]) /* ty=Tensor[(3), int32] */;
  let %storage_0792: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][803]) /* ty=Storage[] */;
  let %tensor_0681: Tensor[(3), int64] = memory.alloc_tensor(%storage_0792, 0 /* ty=int64 */, meta[relay.Constant][719] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][803]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0117: Tensor[(3), int64] = %tensor_0681;
  %3306 = fn (%p0678: Tensor[(?, ?, ?), float32], %p1333: Tensor[(3), int32], %p2186: Tensor[(3), int64], %p3106: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0678, %p1333, %p2186, %p3106, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %3307 = (%in_shape_0108, %in_shape_173, %in_shape_250, %in_shape_343);
  %3308 = (%shape_func_out_0117,);
  let %shape_func117: () = vm.shape_func(%3306, %3307, %3308, meta[relay.attrs.ShapeFuncAttrs][117]) /* ty=() */;
  let %storage_0793: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][804]) /* ty=Storage[] */;
  let %tensor_0682: int64 = memory.alloc_tensor(%storage_0793, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][804]) /* ty=int64 */;
  %3309 = fn (%p0679: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0679) /* ty=int64 */
  };
  %3310 = (%shape_func_out_0117,);
  %3311 = (%tensor_0682,);
  let %v675: () = vm.invoke_tvm_op(%3309, %3310, %3311) /* ty=() */;
  let %storage_0794: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][805]) /* ty=Storage[] */;
  let %tensor_0683: int64 = memory.alloc_tensor(%storage_0794, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][805]) /* ty=int64 */;
  %3312 = fn (%p0680: int64, Primitive=1) -> int64 {
    multiply(%p0680, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3313 = (%tensor_0682,);
  %3314 = (%tensor_0683,);
  let %v676: () = vm.invoke_tvm_op(%3312, %3313, %3314) /* ty=() */;
  let %storage_0795: Storage[] = memory.alloc_storage(%tensor_0683, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][806]) /* ty=Storage[] */;
  let %out_0111: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_0795, 0 /* ty=int64 */, %shape_func_out_0117, meta[relay.attrs.AllocTensorAttrs][806]) /* ty=Tensor[(?, ?, ?), float32] */;
  %3315 = (%x587, %x589, %x590, meta[relay.Constant][718] /* ty=Tensor[(3), int32] */);
  %3316 = (%out_0111,);
  let %v677: () = vm.invoke_tvm_op(%3306, %3315, %3316) /* ty=() */;
  let %x591: Tensor[(?, ?, ?), float32] = %out_0111;
  let %storage_0796: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][807]) /* ty=Storage[] */;
  let %tensor_0684: Tensor[(3), int32] = memory.alloc_tensor(%storage_0796, 0 /* ty=int64 */, meta[relay.Constant][720] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][807]) /* ty=Tensor[(3), int32] */;
  %3317 = fn (%p0681: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(3), int32] {
    shape_of(%p0681, dtype="int32") /* ty=Tensor[(3), int32] */
  };
  %3318 = (%x591,);
  %3319 = (%tensor_0684,);
  let %v678: () = vm.invoke_tvm_op(%3317, %3318, %3319) /* ty=() */;
  let %x592: Tensor[(3), int32] = %tensor_0684;
  let %storage_0797: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][808]) /* ty=Storage[] */;
  let %tensor_0685: Tensor[(3), int32] = memory.alloc_tensor(%storage_0797, 0 /* ty=int64 */, meta[relay.Constant][721] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][808]) /* ty=Tensor[(3), int32] */;
  %3322 = fn (%p0682: Tensor[(3), bool], %p1334: Tensor[(3), int32], %p2187: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int32] {
    %3320 = cast_like(%p2187, %p1334) /* ty=Tensor[(3), int32] */;
    %3321 = add(%p1334, %3320) /* ty=Tensor[(3), int32] */;
    where(%p0682, %3321, %p1334) /* ty=Tensor[(3), int32] */
  };
  %3323 = (meta[relay.Constant][722] /* ty=Tensor[(3), bool] */, meta[relay.Constant][723] /* ty=Tensor[(3), int32] */, %x592);
  %3324 = (%tensor_0685,);
  let %v679: () = vm.invoke_tvm_op(%3322, %3323, %3324) /* ty=() */;
  let %x593: Tensor[(3), int32] = %tensor_0685;
  let %storage_0798: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][809]) /* ty=Storage[] */;
  let %tensor_0686: Tensor[(3), int64] = memory.alloc_tensor(%storage_0798, 0 /* ty=int64 */, meta[relay.Constant][724] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][809]) /* ty=Tensor[(3), int64] */;
  %3325 = fn (%p0683: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    cast(%p0683, dtype="int64") /* ty=Tensor[(3), int64] */
  };
  %3326 = (%x592,);
  %3327 = (%tensor_0686,);
  let %v680: () = vm.invoke_tvm_op(%3325, %3326, %3327) /* ty=() */;
  let %x594: Tensor[(3), int64] = %tensor_0686;
  let %in_shape_0109: Tensor[(3), int64] = vm.shape_of(%x591, meta[relay.attrs.ShapeOfAttrs][142]) /* ty=Tensor[(3), int64] */;
  let %in_shape_174: Tensor[(3), int32] = device_copy(%x593, meta[relay.attrs.DeviceCopyAttrs][144]) /* ty=Tensor[(3), int32] */;
  let %in_shape_251: Tensor[(3), int64] = device_copy(%x594, meta[relay.attrs.DeviceCopyAttrs][145]) /* ty=Tensor[(3), int64] */;
  let %in_shape_344: Tensor[(3), int32] = device_copy(meta[relay.Constant][725] /* ty=Tensor[(3), int32] */, meta[relay.attrs.DeviceCopyAttrs][146]) /* ty=Tensor[(3), int32] */;
  let %storage_0799: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][810]) /* ty=Storage[] */;
  let %tensor_0687: Tensor[(3), int64] = memory.alloc_tensor(%storage_0799, 0 /* ty=int64 */, meta[relay.Constant][726] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][810]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0118: Tensor[(3), int64] = %tensor_0687;
  %3328 = fn (%p0684: Tensor[(?, ?, ?), float32], %p1335: Tensor[(3), int32], %p2188: Tensor[(3), int64], %p3107: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0684, %p1335, %p2188, %p3107, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %3329 = (%in_shape_0109, %in_shape_174, %in_shape_251, %in_shape_344);
  %3330 = (%shape_func_out_0118,);
  let %shape_func118: () = vm.shape_func(%3328, %3329, %3330, meta[relay.attrs.ShapeFuncAttrs][118]) /* ty=() */;
  let %storage_0800: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][811]) /* ty=Storage[] */;
  let %tensor_0688: int64 = memory.alloc_tensor(%storage_0800, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][811]) /* ty=int64 */;
  %3331 = fn (%p0685: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0685) /* ty=int64 */
  };
  %3332 = (%shape_func_out_0118,);
  %3333 = (%tensor_0688,);
  let %v681: () = vm.invoke_tvm_op(%3331, %3332, %3333) /* ty=() */;
  let %storage_0801: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][812]) /* ty=Storage[] */;
  let %tensor_0689: int64 = memory.alloc_tensor(%storage_0801, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][812]) /* ty=int64 */;
  %3334 = fn (%p0686: int64, Primitive=1) -> int64 {
    multiply(%p0686, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3335 = (%tensor_0688,);
  %3336 = (%tensor_0689,);
  let %v682: () = vm.invoke_tvm_op(%3334, %3335, %3336) /* ty=() */;
  let %storage_0802: Storage[] = memory.alloc_storage(%tensor_0689, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][813]) /* ty=Storage[] */;
  let %out_0112: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_0802, 0 /* ty=int64 */, %shape_func_out_0118, meta[relay.attrs.AllocTensorAttrs][813]) /* ty=Tensor[(?, ?, ?), float32] */;
  %3337 = (%x591, %x593, %x594, meta[relay.Constant][725] /* ty=Tensor[(3), int32] */);
  %3338 = (%out_0112,);
  let %v683: () = vm.invoke_tvm_op(%3328, %3337, %3338) /* ty=() */;
  let %x595: Tensor[(?, ?, ?), float32] = %out_0112;
  let %in_shape_0110: Tensor[(3), int64] = vm.shape_of(%x595, meta[relay.attrs.ShapeOfAttrs][143]) /* ty=Tensor[(3), int64] */;
  let %in_shape_175: Tensor[(1), int64] = vm.shape_of(%x505, meta[relay.attrs.ShapeOfAttrs][144]) /* ty=Tensor[(1), int64] */;
  let %storage_0803: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][814]) /* ty=Storage[] */;
  let %tensor_0690: Tensor[(2), int64] = memory.alloc_tensor(%storage_0803, 0 /* ty=int64 */, meta[relay.Constant][727] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][814]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0119: Tensor[(2), int64] = %tensor_0690;
  %3341 = fn (%p0687: Tensor[(?, ?, ?), float32], %p1336: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 4), float32] {
    %3339 = reshape(%p0687, newshape=[-1, 4]) /* ty=Tensor[(?, 4), float32] */;
    %3340 = (%3339, %p1336);
    adv_index(%3340) /* ty=Tensor[(?, 4), float32] */
  };
  %3342 = (%in_shape_0110, %in_shape_175);
  %3343 = (%shape_func_out_0119,);
  let %shape_func119: () = vm.shape_func(%3341, %3342, %3343, meta[relay.attrs.ShapeFuncAttrs][119]) /* ty=() */;
  let %storage_0804: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][815]) /* ty=Storage[] */;
  let %tensor_0691: int64 = memory.alloc_tensor(%storage_0804, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][815]) /* ty=int64 */;
  %3344 = fn (%p0688: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0688) /* ty=int64 */
  };
  %3345 = (%shape_func_out_0119,);
  %3346 = (%tensor_0691,);
  let %v684: () = vm.invoke_tvm_op(%3344, %3345, %3346) /* ty=() */;
  let %storage_0805: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][816]) /* ty=Storage[] */;
  let %tensor_0692: int64 = memory.alloc_tensor(%storage_0805, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][816]) /* ty=int64 */;
  %3347 = fn (%p0689: int64, Primitive=1) -> int64 {
    multiply(%p0689, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3348 = (%tensor_0691,);
  %3349 = (%tensor_0692,);
  let %v685: () = vm.invoke_tvm_op(%3347, %3348, %3349) /* ty=() */;
  let %storage_0806: Storage[] = memory.alloc_storage(%tensor_0692, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][817]) /* ty=Storage[] */;
  let %out_0113: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0806, 0 /* ty=int64 */, %shape_func_out_0119, meta[relay.attrs.AllocTensorAttrs][817]) /* ty=Tensor[(?, 4), float32] */;
  %3350 = (%x595, %x505);
  %3351 = (%out_0113,);
  let %v686: () = vm.invoke_tvm_op(%3341, %3350, %3351) /* ty=() */;
  let %x596: Tensor[(?, 4), float32] = %out_0113;
  let %storage_0807: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][818]) /* ty=Storage[] */;
  let %tensor_0693: Tensor[(2), int32] = memory.alloc_tensor(%storage_0807, 0 /* ty=int64 */, meta[relay.Constant][728] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][818]) /* ty=Tensor[(2), int32] */;
  %3352 = fn (%p0690: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0690, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %3353 = (%x596,);
  %3354 = (%tensor_0693,);
  let %v687: () = vm.invoke_tvm_op(%3352, %3353, %3354) /* ty=() */;
  let %x597: Tensor[(2), int32] = %tensor_0693;
  let %storage_0808: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][819]) /* ty=Storage[] */;
  let %tensor_0694: Tensor[(2), int32] = memory.alloc_tensor(%storage_0808, 0 /* ty=int64 */, meta[relay.Constant][729] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][819]) /* ty=Tensor[(2), int32] */;
  %3357 = fn (%p0691: Tensor[(2), bool], %p1337: Tensor[(2), int32], %p2189: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3355 = cast_like(%p2189, %p1337) /* ty=Tensor[(2), int32] */;
    %3356 = add(%p1337, %3355) /* ty=Tensor[(2), int32] */;
    where(%p0691, %3356, %p1337) /* ty=Tensor[(2), int32] */
  };
  %3358 = (meta[relay.Constant][730] /* ty=Tensor[(2), bool] */, meta[relay.Constant][731] /* ty=Tensor[(2), int32] */, %x597);
  %3359 = (%tensor_0694,);
  let %v688: () = vm.invoke_tvm_op(%3357, %3358, %3359) /* ty=() */;
  let %x598: Tensor[(2), int32] = %tensor_0694;
  let %storage_0809: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][820]) /* ty=Storage[] */;
  let %tensor_0695: Tensor[(2), int64] = memory.alloc_tensor(%storage_0809, 0 /* ty=int64 */, meta[relay.Constant][732] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][820]) /* ty=Tensor[(2), int64] */;
  %3360 = fn (%p0692: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0692, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %3361 = (%x597,);
  %3362 = (%tensor_0695,);
  let %v689: () = vm.invoke_tvm_op(%3360, %3361, %3362) /* ty=() */;
  let %x599: Tensor[(2), int64] = %tensor_0695;
  let %in_shape_0111: Tensor[(2), int64] = vm.shape_of(%x596, meta[relay.attrs.ShapeOfAttrs][145]) /* ty=Tensor[(2), int64] */;
  let %in_shape_176: Tensor[(2), int32] = device_copy(%x598, meta[relay.attrs.DeviceCopyAttrs][147]) /* ty=Tensor[(2), int32] */;
  let %in_shape_252: Tensor[(2), int64] = device_copy(%x599, meta[relay.attrs.DeviceCopyAttrs][148]) /* ty=Tensor[(2), int64] */;
  let %in_shape_345: Tensor[(2), int32] = device_copy(meta[relay.Constant][733] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][149]) /* ty=Tensor[(2), int32] */;
  let %storage_0810: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][821]) /* ty=Storage[] */;
  let %tensor_0696: Tensor[(2), int64] = memory.alloc_tensor(%storage_0810, 0 /* ty=int64 */, meta[relay.Constant][734] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][821]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0120: Tensor[(2), int64] = %tensor_0696;
  %3363 = fn (%p0693: Tensor[(?, 4), float32], %p1338: Tensor[(2), int32], %p2190: Tensor[(2), int64], %p3108: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0693, %p1338, %p2190, %p3108, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3364 = (%in_shape_0111, %in_shape_176, %in_shape_252, %in_shape_345);
  %3365 = (%shape_func_out_0120,);
  let %shape_func120: () = vm.shape_func(%3363, %3364, %3365, meta[relay.attrs.ShapeFuncAttrs][120]) /* ty=() */;
  let %storage_0811: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][822]) /* ty=Storage[] */;
  let %tensor_0697: int64 = memory.alloc_tensor(%storage_0811, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][822]) /* ty=int64 */;
  %3366 = fn (%p0694: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0694) /* ty=int64 */
  };
  %3367 = (%shape_func_out_0120,);
  %3368 = (%tensor_0697,);
  let %v690: () = vm.invoke_tvm_op(%3366, %3367, %3368) /* ty=() */;
  let %storage_0812: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][823]) /* ty=Storage[] */;
  let %tensor_0698: int64 = memory.alloc_tensor(%storage_0812, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][823]) /* ty=int64 */;
  %3369 = fn (%p0695: int64, Primitive=1) -> int64 {
    multiply(%p0695, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3370 = (%tensor_0697,);
  %3371 = (%tensor_0698,);
  let %v691: () = vm.invoke_tvm_op(%3369, %3370, %3371) /* ty=() */;
  let %storage_0813: Storage[] = memory.alloc_storage(%tensor_0698, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][824]) /* ty=Storage[] */;
  let %out_0114: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0813, 0 /* ty=int64 */, %shape_func_out_0120, meta[relay.attrs.AllocTensorAttrs][824]) /* ty=Tensor[(?, ?), float32] */;
  %3372 = (%x596, %x598, %x599, meta[relay.Constant][733] /* ty=Tensor[(2), int32] */);
  %3373 = (%out_0114,);
  let %v692: () = vm.invoke_tvm_op(%3363, %3372, %3373) /* ty=() */;
  let %x600: Tensor[(?, ?), float32] = %out_0114;
  let %storage_0814: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][825]) /* ty=Storage[] */;
  let %tensor_0699: Tensor[(2), int32] = memory.alloc_tensor(%storage_0814, 0 /* ty=int64 */, meta[relay.Constant][735] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][825]) /* ty=Tensor[(2), int32] */;
  %3376 = fn (%p0696: Tensor[(2), bool], %p1339: Tensor[(2), int32], %p2191: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3374 = cast_like(%p2191, %p1339) /* ty=Tensor[(2), int32] */;
    %3375 = add(%p1339, %3374) /* ty=Tensor[(2), int32] */;
    where(%p0696, %3375, %p1339) /* ty=Tensor[(2), int32] */
  };
  %3377 = (meta[relay.Constant][736] /* ty=Tensor[(2), bool] */, meta[relay.Constant][737] /* ty=Tensor[(2), int32] */, %x597);
  %3378 = (%tensor_0699,);
  let %v693: () = vm.invoke_tvm_op(%3376, %3377, %3378) /* ty=() */;
  let %x601: Tensor[(2), int32] = %tensor_0699;
  let %in_shape_0112: Tensor[(2), int64] = vm.shape_of(%x596, meta[relay.attrs.ShapeOfAttrs][146]) /* ty=Tensor[(2), int64] */;
  let %in_shape_177: Tensor[(2), int32] = device_copy(%x601, meta[relay.attrs.DeviceCopyAttrs][150]) /* ty=Tensor[(2), int32] */;
  let %in_shape_253: Tensor[(2), int64] = device_copy(%x599, meta[relay.attrs.DeviceCopyAttrs][151]) /* ty=Tensor[(2), int64] */;
  let %in_shape_346: Tensor[(2), int32] = device_copy(meta[relay.Constant][738] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][152]) /* ty=Tensor[(2), int32] */;
  let %storage_0815: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][826]) /* ty=Storage[] */;
  let %tensor_0700: Tensor[(2), int64] = memory.alloc_tensor(%storage_0815, 0 /* ty=int64 */, meta[relay.Constant][739] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][826]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0121: Tensor[(2), int64] = %tensor_0700;
  %3379 = fn (%p0697: Tensor[(?, 4), float32], %p1340: Tensor[(2), int32], %p2192: Tensor[(2), int64], %p3109: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0697, %p1340, %p2192, %p3109, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3380 = (%in_shape_0112, %in_shape_177, %in_shape_253, %in_shape_346);
  %3381 = (%shape_func_out_0121,);
  let %shape_func121: () = vm.shape_func(%3379, %3380, %3381, meta[relay.attrs.ShapeFuncAttrs][121]) /* ty=() */;
  let %storage_0816: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][827]) /* ty=Storage[] */;
  let %tensor_0701: int64 = memory.alloc_tensor(%storage_0816, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][827]) /* ty=int64 */;
  %3382 = fn (%p0698: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0698) /* ty=int64 */
  };
  %3383 = (%shape_func_out_0121,);
  %3384 = (%tensor_0701,);
  let %v694: () = vm.invoke_tvm_op(%3382, %3383, %3384) /* ty=() */;
  let %storage_0817: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][828]) /* ty=Storage[] */;
  let %tensor_0702: int64 = memory.alloc_tensor(%storage_0817, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][828]) /* ty=int64 */;
  %3385 = fn (%p0699: int64, Primitive=1) -> int64 {
    multiply(%p0699, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3386 = (%tensor_0701,);
  %3387 = (%tensor_0702,);
  let %v695: () = vm.invoke_tvm_op(%3385, %3386, %3387) /* ty=() */;
  let %storage_0818: Storage[] = memory.alloc_storage(%tensor_0702, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][829]) /* ty=Storage[] */;
  let %out_0115: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0818, 0 /* ty=int64 */, %shape_func_out_0121, meta[relay.attrs.AllocTensorAttrs][829]) /* ty=Tensor[(?, ?), float32] */;
  %3388 = (%x596, %x601, %x599, meta[relay.Constant][738] /* ty=Tensor[(2), int32] */);
  %3389 = (%out_0115,);
  let %v696: () = vm.invoke_tvm_op(%3379, %3388, %3389) /* ty=() */;
  let %x602: Tensor[(?, ?), float32] = %out_0115;
  let %storage_0819: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][830]) /* ty=Storage[] */;
  let %tensor_0703: Tensor[(2), int32] = memory.alloc_tensor(%storage_0819, 0 /* ty=int64 */, meta[relay.Constant][740] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][830]) /* ty=Tensor[(2), int32] */;
  %3392 = fn (%p0700: Tensor[(2), bool], %p1341: Tensor[(2), int32], %p2193: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3390 = cast_like(%p2193, %p1341) /* ty=Tensor[(2), int32] */;
    %3391 = add(%p1341, %3390) /* ty=Tensor[(2), int32] */;
    where(%p0700, %3391, %p1341) /* ty=Tensor[(2), int32] */
  };
  %3393 = (meta[relay.Constant][741] /* ty=Tensor[(2), bool] */, meta[relay.Constant][742] /* ty=Tensor[(2), int32] */, %x597);
  %3394 = (%tensor_0703,);
  let %v697: () = vm.invoke_tvm_op(%3392, %3393, %3394) /* ty=() */;
  let %x603: Tensor[(2), int32] = %tensor_0703;
  let %in_shape_0113: Tensor[(2), int64] = vm.shape_of(%x596, meta[relay.attrs.ShapeOfAttrs][147]) /* ty=Tensor[(2), int64] */;
  let %in_shape_178: Tensor[(2), int32] = device_copy(%x603, meta[relay.attrs.DeviceCopyAttrs][153]) /* ty=Tensor[(2), int32] */;
  let %in_shape_254: Tensor[(2), int64] = device_copy(%x599, meta[relay.attrs.DeviceCopyAttrs][154]) /* ty=Tensor[(2), int64] */;
  let %in_shape_347: Tensor[(2), int32] = device_copy(meta[relay.Constant][743] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][155]) /* ty=Tensor[(2), int32] */;
  let %storage_0820: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][831]) /* ty=Storage[] */;
  let %tensor_0704: Tensor[(2), int64] = memory.alloc_tensor(%storage_0820, 0 /* ty=int64 */, meta[relay.Constant][744] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][831]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0122: Tensor[(2), int64] = %tensor_0704;
  %3395 = fn (%p0701: Tensor[(?, 4), float32], %p1342: Tensor[(2), int32], %p2194: Tensor[(2), int64], %p3110: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0701, %p1342, %p2194, %p3110, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3396 = (%in_shape_0113, %in_shape_178, %in_shape_254, %in_shape_347);
  %3397 = (%shape_func_out_0122,);
  let %shape_func122: () = vm.shape_func(%3395, %3396, %3397, meta[relay.attrs.ShapeFuncAttrs][122]) /* ty=() */;
  let %storage_0821: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][832]) /* ty=Storage[] */;
  let %tensor_0705: int64 = memory.alloc_tensor(%storage_0821, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][832]) /* ty=int64 */;
  %3398 = fn (%p0702: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0702) /* ty=int64 */
  };
  %3399 = (%shape_func_out_0122,);
  %3400 = (%tensor_0705,);
  let %v698: () = vm.invoke_tvm_op(%3398, %3399, %3400) /* ty=() */;
  let %storage_0822: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][833]) /* ty=Storage[] */;
  let %tensor_0706: int64 = memory.alloc_tensor(%storage_0822, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][833]) /* ty=int64 */;
  %3401 = fn (%p0703: int64, Primitive=1) -> int64 {
    multiply(%p0703, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3402 = (%tensor_0705,);
  %3403 = (%tensor_0706,);
  let %v699: () = vm.invoke_tvm_op(%3401, %3402, %3403) /* ty=() */;
  let %storage_0823: Storage[] = memory.alloc_storage(%tensor_0706, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][834]) /* ty=Storage[] */;
  let %out_0116: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0823, 0 /* ty=int64 */, %shape_func_out_0122, meta[relay.attrs.AllocTensorAttrs][834]) /* ty=Tensor[(?, ?), float32] */;
  %3404 = (%x596, %x603, %x599, meta[relay.Constant][743] /* ty=Tensor[(2), int32] */);
  %3405 = (%out_0116,);
  let %v700: () = vm.invoke_tvm_op(%3395, %3404, %3405) /* ty=() */;
  let %x604: Tensor[(?, ?), float32] = %out_0116;
  let %storage_0824: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][835]) /* ty=Storage[] */;
  let %tensor_0707: Tensor[(2), int32] = memory.alloc_tensor(%storage_0824, 0 /* ty=int64 */, meta[relay.Constant][745] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][835]) /* ty=Tensor[(2), int32] */;
  %3408 = fn (%p0704: Tensor[(2), bool], %p1343: Tensor[(2), int32], %p2195: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3406 = cast_like(%p2195, %p1343) /* ty=Tensor[(2), int32] */;
    %3407 = add(%p1343, %3406) /* ty=Tensor[(2), int32] */;
    where(%p0704, %3407, %p1343) /* ty=Tensor[(2), int32] */
  };
  %3409 = (meta[relay.Constant][746] /* ty=Tensor[(2), bool] */, meta[relay.Constant][747] /* ty=Tensor[(2), int32] */, %x597);
  %3410 = (%tensor_0707,);
  let %v701: () = vm.invoke_tvm_op(%3408, %3409, %3410) /* ty=() */;
  let %x605: Tensor[(2), int32] = %tensor_0707;
  let %in_shape_0114: Tensor[(2), int64] = vm.shape_of(%x596, meta[relay.attrs.ShapeOfAttrs][148]) /* ty=Tensor[(2), int64] */;
  let %in_shape_179: Tensor[(2), int32] = device_copy(%x605, meta[relay.attrs.DeviceCopyAttrs][156]) /* ty=Tensor[(2), int32] */;
  let %in_shape_255: Tensor[(2), int64] = device_copy(%x599, meta[relay.attrs.DeviceCopyAttrs][157]) /* ty=Tensor[(2), int64] */;
  let %in_shape_348: Tensor[(2), int32] = device_copy(meta[relay.Constant][748] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][158]) /* ty=Tensor[(2), int32] */;
  let %storage_0825: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][836]) /* ty=Storage[] */;
  let %tensor_0708: Tensor[(2), int64] = memory.alloc_tensor(%storage_0825, 0 /* ty=int64 */, meta[relay.Constant][749] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][836]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0123: Tensor[(2), int64] = %tensor_0708;
  %3411 = fn (%p0705: Tensor[(?, 4), float32], %p1344: Tensor[(2), int32], %p2196: Tensor[(2), int64], %p3111: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0705, %p1344, %p2196, %p3111, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3412 = (%in_shape_0114, %in_shape_179, %in_shape_255, %in_shape_348);
  %3413 = (%shape_func_out_0123,);
  let %shape_func123: () = vm.shape_func(%3411, %3412, %3413, meta[relay.attrs.ShapeFuncAttrs][123]) /* ty=() */;
  let %storage_0826: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][837]) /* ty=Storage[] */;
  let %tensor_0709: int64 = memory.alloc_tensor(%storage_0826, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][837]) /* ty=int64 */;
  %3414 = fn (%p0706: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0706) /* ty=int64 */
  };
  %3415 = (%shape_func_out_0123,);
  %3416 = (%tensor_0709,);
  let %v702: () = vm.invoke_tvm_op(%3414, %3415, %3416) /* ty=() */;
  let %storage_0827: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][838]) /* ty=Storage[] */;
  let %tensor_0710: int64 = memory.alloc_tensor(%storage_0827, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][838]) /* ty=int64 */;
  %3417 = fn (%p0707: int64, Primitive=1) -> int64 {
    multiply(%p0707, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3418 = (%tensor_0709,);
  %3419 = (%tensor_0710,);
  let %v703: () = vm.invoke_tvm_op(%3417, %3418, %3419) /* ty=() */;
  let %storage_0828: Storage[] = memory.alloc_storage(%tensor_0710, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][839]) /* ty=Storage[] */;
  let %out_0117: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0828, 0 /* ty=int64 */, %shape_func_out_0123, meta[relay.attrs.AllocTensorAttrs][839]) /* ty=Tensor[(?, ?), float32] */;
  %3420 = (%x596, %x605, %x599, meta[relay.Constant][748] /* ty=Tensor[(2), int32] */);
  %3421 = (%out_0117,);
  let %v704: () = vm.invoke_tvm_op(%3411, %3420, %3421) /* ty=() */;
  let %x606: Tensor[(?, ?), float32] = %out_0117;
  let %in_shape_0115: Tensor[(2), int64] = vm.shape_of(%x600, meta[relay.attrs.ShapeOfAttrs][149]) /* ty=Tensor[(2), int64] */;
  let %in_shape_180: Tensor[(2), int64] = vm.shape_of(%x602, meta[relay.attrs.ShapeOfAttrs][150]) /* ty=Tensor[(2), int64] */;
  let %in_shape_256: Tensor[(2), int64] = vm.shape_of(%x604, meta[relay.attrs.ShapeOfAttrs][151]) /* ty=Tensor[(2), int64] */;
  let %in_shape_349: Tensor[(2), int64] = vm.shape_of(%x606, meta[relay.attrs.ShapeOfAttrs][152]) /* ty=Tensor[(2), int64] */;
  let %storage_0829: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][840]) /* ty=Storage[] */;
  let %tensor_0711: Tensor[(1), int64] = memory.alloc_tensor(%storage_0829, 0 /* ty=int64 */, meta[relay.Constant][750] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][840]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0124: Tensor[(1), int64] = %tensor_0711;
  %3432 = fn (%p0708: Tensor[(?, ?), float32], %p1345: Tensor[(?, ?), float32], %p2197: Tensor[(?, ?), float32], %p3112: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), bool] {
    %3422 = take(%p0708, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %3423 = take(%p1345, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %3424 = subtract(%3422, %3423) /* ty=Tensor[(?), float32] */;
    %3425 = greater_equal(%3424, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
    %3426 = cast(%3425, dtype="bool") /* ty=Tensor[(?), bool] */;
    %3427 = take(%p2197, 3 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %3428 = take(%p3112, 1 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %3429 = subtract(%3427, %3428) /* ty=Tensor[(?), float32] */;
    %3430 = greater_equal(%3429, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
    %3431 = cast(%3430, dtype="bool") /* ty=Tensor[(?), bool] */;
    logical_and(%3426, %3431) /* ty=Tensor[(?), bool] */
  };
  %3433 = (%in_shape_0115, %in_shape_180, %in_shape_256, %in_shape_349);
  %3434 = (%shape_func_out_0124,);
  let %shape_func124: () = vm.shape_func(%3432, %3433, %3434, meta[relay.attrs.ShapeFuncAttrs][124]) /* ty=() */;
  let %storage_0830: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][841]) /* ty=Storage[] */;
  let %tensor_0712: int64 = memory.alloc_tensor(%storage_0830, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][841]) /* ty=int64 */;
  %3435 = fn (%p0709: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0709) /* ty=int64 */
  };
  %3436 = (%shape_func_out_0124,);
  %3437 = (%tensor_0712,);
  let %v705: () = vm.invoke_tvm_op(%3435, %3436, %3437) /* ty=() */;
  let %storage_0831: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][842]) /* ty=Storage[] */;
  let %tensor_0713: int64 = memory.alloc_tensor(%storage_0831, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][842]) /* ty=int64 */;
  %3438 = fn (%p0710: int64, Primitive=1) -> int64 {
    multiply(%p0710, 1 /* ty=int64 */) /* ty=int64 */
  };
  %3439 = (%tensor_0712,);
  %3440 = (%tensor_0713,);
  let %v706: () = vm.invoke_tvm_op(%3438, %3439, %3440) /* ty=() */;
  let %storage_0832: Storage[] = memory.alloc_storage(%tensor_0713, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][843]) /* ty=Storage[] */;
  let %out_0118: Tensor[(?), bool] = memory.alloc_tensor(%storage_0832, 0 /* ty=int64 */, %shape_func_out_0124, meta[relay.attrs.AllocTensorAttrs][843]) /* ty=Tensor[(?), bool] */;
  %3441 = (%x600, %x602, %x604, %x606);
  %3442 = (%out_0118,);
  let %v707: () = vm.invoke_tvm_op(%3432, %3441, %3442) /* ty=() */;
  let %x607: Tensor[(?), bool] = %out_0118;
  let %in_shape_0116: Tensor[(?), bool] = device_copy(%x607, meta[relay.attrs.DeviceCopyAttrs][159]) /* ty=Tensor[(?), bool] */;
  let %storage_0833: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][844]) /* ty=Storage[] */;
  let %tensor_0714: Tensor[(2), int64] = memory.alloc_tensor(%storage_0833, 0 /* ty=int64 */, meta[relay.Constant][751] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][844]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0125: Tensor[(2), int64] = %tensor_0714;
  %3443 = fn (%p0711: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0711) /* ty=Tensor[(?, 1), int32] */
  };
  %3444 = (%in_shape_0116,);
  %3445 = (%shape_func_out_0125,);
  let %shape_func125: () = vm.shape_func(%3443, %3444, %3445, meta[relay.attrs.ShapeFuncAttrs][125]) /* ty=() */;
  let %storage_0834: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][845]) /* ty=Storage[] */;
  let %tensor_0715: int64 = memory.alloc_tensor(%storage_0834, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][845]) /* ty=int64 */;
  %3446 = fn (%p0712: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0712) /* ty=int64 */
  };
  %3447 = (%shape_func_out_0125,);
  %3448 = (%tensor_0715,);
  let %v708: () = vm.invoke_tvm_op(%3446, %3447, %3448) /* ty=() */;
  let %storage_0835: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][846]) /* ty=Storage[] */;
  let %tensor_0716: int64 = memory.alloc_tensor(%storage_0835, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][846]) /* ty=int64 */;
  %3449 = fn (%p0713: int64, Primitive=1) -> int64 {
    multiply(%p0713, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3450 = (%tensor_0715,);
  %3451 = (%tensor_0716,);
  let %v709: () = vm.invoke_tvm_op(%3449, %3450, %3451) /* ty=() */;
  let %storage_0836: Storage[] = memory.alloc_storage(%tensor_0716, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][847]) /* ty=Storage[] */;
  let %out_0119: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0836, 0 /* ty=int64 */, %shape_func_out_0125, meta[relay.attrs.AllocTensorAttrs][847]) /* ty=Tensor[(?, 1), int32] */;
  %3452 = (%x607,);
  %3453 = (%out_0119,);
  let %v710: () = vm.invoke_tvm_op(%3443, %3452, %3453) /* ty=() */;
  let %x608: Tensor[(?, 1), int32] = %out_0119;
  let %in_shape_0117: Tensor[(2), int64] = vm.shape_of(%x608, meta[relay.attrs.ShapeOfAttrs][153]) /* ty=Tensor[(2), int64] */;
  let %storage_0837: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][848]) /* ty=Storage[] */;
  let %tensor_0717: Tensor[(1), int64] = memory.alloc_tensor(%storage_0837, 0 /* ty=int64 */, meta[relay.Constant][752] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][848]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0126: Tensor[(1), int64] = %tensor_0717;
  %3457 = fn (%p0714: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int64] {
    %3454 = split(%p0714, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %3455 = %3454.0;
    %3456 = squeeze(%3455, axis=[1]) /* ty=Tensor[(?), int32] */;
    cast(%3456, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %3458 = (%in_shape_0117,);
  %3459 = (%shape_func_out_0126,);
  let %shape_func126: () = vm.shape_func(%3457, %3458, %3459, meta[relay.attrs.ShapeFuncAttrs][126]) /* ty=() */;
  let %storage_0838: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][849]) /* ty=Storage[] */;
  let %tensor_0718: int64 = memory.alloc_tensor(%storage_0838, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][849]) /* ty=int64 */;
  %3460 = fn (%p0715: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0715) /* ty=int64 */
  };
  %3461 = (%shape_func_out_0126,);
  %3462 = (%tensor_0718,);
  let %v711: () = vm.invoke_tvm_op(%3460, %3461, %3462) /* ty=() */;
  let %storage_0839: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][850]) /* ty=Storage[] */;
  let %tensor_0719: int64 = memory.alloc_tensor(%storage_0839, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][850]) /* ty=int64 */;
  %3463 = fn (%p0716: int64, Primitive=1) -> int64 {
    multiply(%p0716, 8 /* ty=int64 */) /* ty=int64 */
  };
  %3464 = (%tensor_0718,);
  %3465 = (%tensor_0719,);
  let %v712: () = vm.invoke_tvm_op(%3463, %3464, %3465) /* ty=() */;
  let %storage_0840: Storage[] = memory.alloc_storage(%tensor_0719, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][851]) /* ty=Storage[] */;
  let %out_0120: Tensor[(?), int64] = memory.alloc_tensor(%storage_0840, 0 /* ty=int64 */, %shape_func_out_0126, meta[relay.attrs.AllocTensorAttrs][851]) /* ty=Tensor[(?), int64] */;
  %3466 = (%x608,);
  %3467 = (%out_0120,);
  let %v713: () = vm.invoke_tvm_op(%3457, %3466, %3467) /* ty=() */;
  let %x609: Tensor[(?), int64] = %out_0120;
  let %in_shape_0118: Tensor[(2), int64] = vm.shape_of(%x493, meta[relay.attrs.ShapeOfAttrs][154]) /* ty=Tensor[(2), int64] */;
  let %in_shape_181: Tensor[(1), int64] = vm.shape_of(%x505, meta[relay.attrs.ShapeOfAttrs][155]) /* ty=Tensor[(1), int64] */;
  let %in_shape_257: Tensor[(1), int64] = vm.shape_of(%x609, meta[relay.attrs.ShapeOfAttrs][156]) /* ty=Tensor[(1), int64] */;
  let %storage_0841: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][852]) /* ty=Storage[] */;
  let %tensor_0720: Tensor[(1), int64] = memory.alloc_tensor(%storage_0841, 0 /* ty=int64 */, meta[relay.Constant][753] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][852]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0127: Tensor[(1), int64] = %tensor_0720;
  %3472 = fn (%p0717: Tensor[(?, ?), int64], %p1346: Tensor[(?), int64], %p2198: Tensor[(?), int64], Primitive=1) -> Tensor[(?), int64] {
    %3468 = reshape(%p0717, newshape=[-1]) /* ty=Tensor[(?), int64] */;
    %3469 = (%3468, %p1346);
    %3470 = adv_index(%3469) /* ty=Tensor[(?), int64] */;
    %3471 = (%3470, %p2198);
    adv_index(%3471) /* ty=Tensor[(?), int64] */
  };
  %3473 = (%in_shape_0118, %in_shape_181, %in_shape_257);
  %3474 = (%shape_func_out_0127,);
  let %shape_func127: () = vm.shape_func(%3472, %3473, %3474, meta[relay.attrs.ShapeFuncAttrs][127]) /* ty=() */;
  let %storage_0842: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][853]) /* ty=Storage[] */;
  let %tensor_0721: int64 = memory.alloc_tensor(%storage_0842, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][853]) /* ty=int64 */;
  %3475 = fn (%p0718: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0718) /* ty=int64 */
  };
  %3476 = (%shape_func_out_0127,);
  %3477 = (%tensor_0721,);
  let %v714: () = vm.invoke_tvm_op(%3475, %3476, %3477) /* ty=() */;
  let %storage_0843: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][854]) /* ty=Storage[] */;
  let %tensor_0722: int64 = memory.alloc_tensor(%storage_0843, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][854]) /* ty=int64 */;
  %3478 = fn (%p0719: int64, Primitive=1) -> int64 {
    multiply(%p0719, 8 /* ty=int64 */) /* ty=int64 */
  };
  %3479 = (%tensor_0721,);
  %3480 = (%tensor_0722,);
  let %v715: () = vm.invoke_tvm_op(%3478, %3479, %3480) /* ty=() */;
  let %storage_0844: Storage[] = memory.alloc_storage(%tensor_0722, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][855]) /* ty=Storage[] */;
  let %out_0121: Tensor[(?), int64] = memory.alloc_tensor(%storage_0844, 0 /* ty=int64 */, %shape_func_out_0127, meta[relay.attrs.AllocTensorAttrs][855]) /* ty=Tensor[(?), int64] */;
  %3481 = (%x493, %x505, %x609);
  %3482 = (%out_0121,);
  let %v716: () = vm.invoke_tvm_op(%3472, %3481, %3482) /* ty=() */;
  let %x610: Tensor[(?), int64] = %out_0121;
  let %x611: (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) = let %in_shape_0119: Tensor[(1), int64] = vm.shape_of(%x502, meta[relay.attrs.ShapeOfAttrs][157]) /* ty=Tensor[(1), int64] */;
  let %in_shape_182: Tensor[(1), int64] = vm.shape_of(%x505, meta[relay.attrs.ShapeOfAttrs][158]) /* ty=Tensor[(1), int64] */;
  let %in_shape_258: Tensor[(1), int64] = vm.shape_of(%x609, meta[relay.attrs.ShapeOfAttrs][159]) /* ty=Tensor[(1), int64] */;
  let %storage_0845: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][856]) /* ty=Storage[] */;
  let %tensor_0723: Tensor[(1), int64] = memory.alloc_tensor(%storage_0845, 0 /* ty=int64 */, meta[relay.Constant][754] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][856]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0128: Tensor[(1), int64] = %tensor_0723;
  %3486 = fn (%p0720: Tensor[(?), float32], %p1347: Tensor[(?), int64], %p2199: Tensor[(?), int64], Primitive=1) -> Tensor[(?), float32] {
    %3483 = (%p0720, %p1347);
    %3484 = adv_index(%3483) /* ty=Tensor[(?), float32] */;
    %3485 = (%3484, %p2199);
    adv_index(%3485) /* ty=Tensor[(?), float32] */
  };
  %3487 = (%in_shape_0119, %in_shape_182, %in_shape_258);
  %3488 = (%shape_func_out_0128,);
  let %shape_func128: () = vm.shape_func(%3486, %3487, %3488, meta[relay.attrs.ShapeFuncAttrs][128]) /* ty=() */;
  let %storage_0846: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][857]) /* ty=Storage[] */;
  let %tensor_0724: int64 = memory.alloc_tensor(%storage_0846, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][857]) /* ty=int64 */;
  %3489 = fn (%p0721: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0721) /* ty=int64 */
  };
  %3490 = (%shape_func_out_0128,);
  %3491 = (%tensor_0724,);
  let %v717: () = vm.invoke_tvm_op(%3489, %3490, %3491) /* ty=() */;
  let %storage_0847: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][858]) /* ty=Storage[] */;
  let %tensor_0725: int64 = memory.alloc_tensor(%storage_0847, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][858]) /* ty=int64 */;
  %3492 = fn (%p0722: int64, Primitive=1) -> int64 {
    multiply(%p0722, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3493 = (%tensor_0724,);
  %3494 = (%tensor_0725,);
  let %v718: () = vm.invoke_tvm_op(%3492, %3493, %3494) /* ty=() */;
  let %storage_0848: Storage[] = memory.alloc_storage(%tensor_0725, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][859]) /* ty=Storage[] */;
  let %out_0122: Tensor[(?), float32] = memory.alloc_tensor(%storage_0848, 0 /* ty=int64 */, %shape_func_out_0128, meta[relay.attrs.AllocTensorAttrs][859]) /* ty=Tensor[(?), float32] */;
  %3495 = (%x502, %x505, %x609);
  %3496 = (%out_0122,);
  let %v719: () = vm.invoke_tvm_op(%3486, %3495, %3496) /* ty=() */;
  let %x612: Tensor[(?), float32] = %out_0122;
  let %x613: (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) = let %in_shape_0120: Tensor[(2), int64] = vm.shape_of(%x596, meta[relay.attrs.ShapeOfAttrs][160]) /* ty=Tensor[(2), int64] */;
  let %in_shape_183: Tensor[(1), int64] = vm.shape_of(%x609, meta[relay.attrs.ShapeOfAttrs][161]) /* ty=Tensor[(1), int64] */;
  let %storage_0849: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][860]) /* ty=Storage[] */;
  let %tensor_0726: Tensor[(2), int64] = memory.alloc_tensor(%storage_0849, 0 /* ty=int64 */, meta[relay.Constant][755] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][860]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0129: Tensor[(2), int64] = %tensor_0726;
  %3498 = fn (%p0723: Tensor[(?, 4), float32], %p1348: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 4), float32] {
    %3497 = (%p0723, %p1348);
    adv_index(%3497) /* ty=Tensor[(?, 4), float32] */
  };
  %3499 = (%in_shape_0120, %in_shape_183);
  %3500 = (%shape_func_out_0129,);
  let %shape_func129: () = vm.shape_func(%3498, %3499, %3500, meta[relay.attrs.ShapeFuncAttrs][129]) /* ty=() */;
  let %storage_0850: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][861]) /* ty=Storage[] */;
  let %tensor_0727: int64 = memory.alloc_tensor(%storage_0850, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][861]) /* ty=int64 */;
  %3501 = fn (%p0724: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0724) /* ty=int64 */
  };
  %3502 = (%shape_func_out_0129,);
  %3503 = (%tensor_0727,);
  let %v720: () = vm.invoke_tvm_op(%3501, %3502, %3503) /* ty=() */;
  let %storage_0851: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][862]) /* ty=Storage[] */;
  let %tensor_0728: int64 = memory.alloc_tensor(%storage_0851, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][862]) /* ty=int64 */;
  %3504 = fn (%p0725: int64, Primitive=1) -> int64 {
    multiply(%p0725, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3505 = (%tensor_0727,);
  %3506 = (%tensor_0728,);
  let %v721: () = vm.invoke_tvm_op(%3504, %3505, %3506) /* ty=() */;
  let %storage_0852: Storage[] = memory.alloc_storage(%tensor_0728, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][863]) /* ty=Storage[] */;
  let %out_0123: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0852, 0 /* ty=int64 */, %shape_func_out_0129, meta[relay.attrs.AllocTensorAttrs][863]) /* ty=Tensor[(?, 4), float32] */;
  %3507 = (%x596, %x609);
  %3508 = (%out_0123,);
  let %v722: () = vm.invoke_tvm_op(%3498, %3507, %3508) /* ty=() */;
  let %x614: Tensor[(?, 4), float32] = %out_0123;
  let %storage_0853: Storage[] = memory.alloc_storage(1 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][864]) /* ty=Storage[] */;
  let %tensor_0729: bool = memory.alloc_tensor(%storage_0853, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][864]) /* ty=bool */;
  %3510 = fn (%p0726: Tensor[(?, 4), float32], Primitive=1) -> bool {
    %3509 = ndarray_size(%p0726, dtype="int32") /* ty=int32 */;
    equal(%3509, 0 /* ty=int32 */) /* ty=bool */
  };
  %3511 = (%x614,);
  %3512 = (%tensor_0729,);
  let %v723: () = vm.invoke_tvm_op(%3510, %3511, %3512) /* ty=() */;
  let %x615: bool = %tensor_0729;
  let %x616: Tensor[(?), int64] = if (%x615) {
    let %storage_0854: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][865]) /* ty=Storage[] */;
    let %tensor_0730: Tensor[(1), int64] = memory.alloc_tensor(%storage_0854, 0 /* ty=int64 */, meta[relay.Constant][756] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][865]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0130: Tensor[(1), int64] = %tensor_0730;
    %3513 = fn (Primitive=1) -> Tensor[(?), int64] {
      zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
    };
    %3514 = ();
    %3515 = (%shape_func_out_0130,);
    let %shape_func130: () = vm.shape_func(%3513, %3514, %3515, meta[relay.attrs.ShapeFuncAttrs][130]) /* ty=() */;
    let %storage_0855: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][866]) /* ty=Storage[] */;
    let %tensor_0731: int64 = memory.alloc_tensor(%storage_0855, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][866]) /* ty=int64 */;
    %3516 = fn (%p0727: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0727) /* ty=int64 */
    };
    %3517 = (%shape_func_out_0130,);
    %3518 = (%tensor_0731,);
    let %v724: () = vm.invoke_tvm_op(%3516, %3517, %3518) /* ty=() */;
    let %storage_0856: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][867]) /* ty=Storage[] */;
    let %tensor_0732: int64 = memory.alloc_tensor(%storage_0856, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][867]) /* ty=int64 */;
    %3519 = fn (%p0728: int64, Primitive=1) -> int64 {
      multiply(%p0728, 8 /* ty=int64 */) /* ty=int64 */
    };
    %3520 = (%tensor_0731,);
    %3521 = (%tensor_0732,);
    let %v725: () = vm.invoke_tvm_op(%3519, %3520, %3521) /* ty=() */;
    let %storage_0857: Storage[] = memory.alloc_storage(%tensor_0732, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][868]) /* ty=Storage[] */;
    let %out_0124: Tensor[(?), int64] = memory.alloc_tensor(%storage_0857, 0 /* ty=int64 */, %shape_func_out_0130, meta[relay.attrs.AllocTensorAttrs][868]) /* ty=Tensor[(?), int64] */;
    %3522 = ();
    %3523 = (%out_0124,);
    let %v726: () = vm.invoke_tvm_op(%3513, %3522, %3523) /* ty=() */;
    let %x617: Tensor[(?), int64] = %out_0124;
    %x617
  } else {
    let %storage_0858: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][869]) /* ty=Storage[] */;
    let %tensor_0733: float32 = memory.alloc_tensor(%storage_0858, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][869]) /* ty=float32 */;
    %3524 = fn (%p0729: Tensor[(?), float32], Primitive=1) -> float32 {
      min(%p0729) /* ty=float32 */
    };
    %3525 = (%x612,);
    %3526 = (%tensor_0733,);
    let %v727: () = vm.invoke_tvm_op(%3524, %3525, %3526) /* ty=() */;
    let %x618: float32 = %tensor_0733;
    let %in_shape_0121: Tensor[(1), int64] = vm.shape_of(%x612, meta[relay.attrs.ShapeOfAttrs][162]) /* ty=Tensor[(1), int64] */;
    let %storage_0859: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][870]) /* ty=Storage[] */;
    let %tensor_0734: Tensor[(1), int64] = memory.alloc_tensor(%storage_0859, 0 /* ty=int64 */, meta[relay.Constant][757] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][870]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0131: Tensor[(1), int64] = %tensor_0734;
    %3528 = fn (%p0730: Tensor[(?), float32], %p1349: float32, Primitive=1) -> Tensor[(?), float32] {
      %3527 = subtract(%p0730, %p1349) /* ty=Tensor[(?), float32] */;
      add(%3527, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */
    };
    %3529 = (%in_shape_0121, 1598176912 /* ty=int64 */);
    %3530 = (%shape_func_out_0131,);
    let %shape_func131: () = vm.shape_func(%3528, %3529, %3530, meta[relay.attrs.ShapeFuncAttrs][131]) /* ty=() */;
    let %storage_0860: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][871]) /* ty=Storage[] */;
    let %tensor_0735: int64 = memory.alloc_tensor(%storage_0860, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][871]) /* ty=int64 */;
    %3531 = fn (%p0731: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0731) /* ty=int64 */
    };
    %3532 = (%shape_func_out_0131,);
    %3533 = (%tensor_0735,);
    let %v728: () = vm.invoke_tvm_op(%3531, %3532, %3533) /* ty=() */;
    let %storage_0861: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][872]) /* ty=Storage[] */;
    let %tensor_0736: int64 = memory.alloc_tensor(%storage_0861, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][872]) /* ty=int64 */;
    %3534 = fn (%p0732: int64, Primitive=1) -> int64 {
      multiply(%p0732, 4 /* ty=int64 */) /* ty=int64 */
    };
    %3535 = (%tensor_0735,);
    %3536 = (%tensor_0736,);
    let %v729: () = vm.invoke_tvm_op(%3534, %3535, %3536) /* ty=() */;
    let %storage_0862: Storage[] = memory.alloc_storage(%tensor_0736, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][873]) /* ty=Storage[] */;
    let %out_0125: Tensor[(?), float32] = memory.alloc_tensor(%storage_0862, 0 /* ty=int64 */, %shape_func_out_0131, meta[relay.attrs.AllocTensorAttrs][873]) /* ty=Tensor[(?), float32] */;
    %3537 = (%x612, %x618);
    %3538 = (%out_0125,);
    let %v730: () = vm.invoke_tvm_op(%3528, %3537, %3538) /* ty=() */;
    let %x619: Tensor[(?), float32] = %out_0125;
    let %in_shape_0122: Tensor[(1), int64] = vm.shape_of(%x610, meta[relay.attrs.ShapeOfAttrs][163]) /* ty=Tensor[(1), int64] */;
    let %in_shape_184: Tensor[(1), int64] = vm.shape_of(%x619, meta[relay.attrs.ShapeOfAttrs][164]) /* ty=Tensor[(1), int64] */;
    let %in_shape_259: Tensor[(2), int64] = vm.shape_of(%x614, meta[relay.attrs.ShapeOfAttrs][165]) /* ty=Tensor[(2), int64] */;
    let %storage_0863: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][874]) /* ty=Storage[] */;
    let %tensor_0737: Tensor[(3), int64] = memory.alloc_tensor(%storage_0863, 0 /* ty=int64 */, meta[relay.Constant][758] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][874]) /* ty=Tensor[(3), int64] */;
    let %shape_func_out_0132: Tensor[(3), int64] = %tensor_0737;
    %3544 = fn (%p0733: Tensor[(?), int64], %p1350: Tensor[(?), float32], %p2200: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(1, ?, 6), float32] {
      %3539 = expand_dims(%p0733, axis=-1) /* ty=Tensor[(?, 1), int64] */;
      %3540 = cast(%3539, dtype="float32") /* ty=Tensor[(?, 1), float32] */;
      %3541 = expand_dims(%p1350, axis=-1) /* ty=Tensor[(?, 1), float32] */;
      %3542 = (%3540, %3541, %p2200);
      %3543 = concatenate(%3542, axis=-1) /* ty=Tensor[(?, 6), float32] */;
      expand_dims(%3543, axis=0) /* ty=Tensor[(1, ?, 6), float32] */
    };
    %3545 = (%in_shape_0122, %in_shape_184, %in_shape_259);
    %3546 = (%shape_func_out_0132,);
    let %shape_func132: () = vm.shape_func(%3544, %3545, %3546, meta[relay.attrs.ShapeFuncAttrs][132]) /* ty=() */;
    let %storage_0864: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][875]) /* ty=Storage[] */;
    let %tensor_0738: int64 = memory.alloc_tensor(%storage_0864, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][875]) /* ty=int64 */;
    %3547 = fn (%p0734: Tensor[(3), int64], Primitive=1) -> int64 {
      prod(%p0734) /* ty=int64 */
    };
    %3548 = (%shape_func_out_0132,);
    %3549 = (%tensor_0738,);
    let %v731: () = vm.invoke_tvm_op(%3547, %3548, %3549) /* ty=() */;
    let %storage_0865: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][876]) /* ty=Storage[] */;
    let %tensor_0739: int64 = memory.alloc_tensor(%storage_0865, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][876]) /* ty=int64 */;
    %3550 = fn (%p0735: int64, Primitive=1) -> int64 {
      multiply(%p0735, 4 /* ty=int64 */) /* ty=int64 */
    };
    %3551 = (%tensor_0738,);
    %3552 = (%tensor_0739,);
    let %v732: () = vm.invoke_tvm_op(%3550, %3551, %3552) /* ty=() */;
    let %storage_0866: Storage[] = memory.alloc_storage(%tensor_0739, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][877]) /* ty=Storage[] */;
    let %out_0126: Tensor[(1, ?, 6), float32] = memory.alloc_tensor(%storage_0866, 0 /* ty=int64 */, %shape_func_out_0132, meta[relay.attrs.AllocTensorAttrs][877]) /* ty=Tensor[(1, ?, 6), float32] */;
    %3553 = (%x610, %x619, %x614);
    %3554 = (%out_0126,);
    let %v733: () = vm.invoke_tvm_op(%3544, %3553, %3554) /* ty=() */;
    let %x620: Tensor[(1, ?, 6), float32] = %out_0126;
    let %storage_0867: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][878]) /* ty=Storage[] */;
    let %tensor_0740: Tensor[(1), int32] = memory.alloc_tensor(%storage_0867, 0 /* ty=int64 */, meta[relay.Constant][759] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][878]) /* ty=Tensor[(1), int32] */;
    %3555 = fn (%p0736: Tensor[(?), float32], Primitive=1) -> Tensor[(1), int32] {
      shape_of(%p0736, dtype="int32") /* ty=Tensor[(1), int32] */
    };
    %3556 = (%x619,);
    %3557 = (%tensor_0740,);
    let %v734: () = vm.invoke_tvm_op(%3555, %3556, %3557) /* ty=() */;
    let %x621: Tensor[(1), int32] = %tensor_0740;
    let %storage_0868: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][879]) /* ty=Storage[] */;
    let %tensor_0741: int32 = memory.alloc_tensor(%storage_0868, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][879]) /* ty=int32 */;
    %3558 = fn (%p0737: Tensor[(1), int32], Primitive=1) -> int32 {
      squeeze(%p0737) /* ty=int32 */
    };
    %3559 = (%x621,);
    %3560 = (%tensor_0741,);
    let %v735: () = vm.invoke_tvm_op(%3558, %3559, %3560) /* ty=() */;
    let %x622: int32 = %tensor_0741;
    let %in_shape_0123: int32 = device_copy(0 /* ty=int32 */, meta[relay.attrs.DeviceCopyAttrs][160]) /* ty=int32 */;
    let %in_shape_185: int32 = device_copy(%x622, meta[relay.attrs.DeviceCopyAttrs][161]) /* ty=int32 */;
    let %in_shape_260: int32 = device_copy(1 /* ty=int32 */, meta[relay.attrs.DeviceCopyAttrs][162]) /* ty=int32 */;
    let %storage_0869: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][880]) /* ty=Storage[] */;
    let %tensor_0742: Tensor[(1), int64] = memory.alloc_tensor(%storage_0869, 0 /* ty=int64 */, meta[relay.Constant][760] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][880]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0133: Tensor[(1), int64] = %tensor_0742;
    %3561 = fn (%p0738: int32, %p1351: int32, %p2201: int32, Primitive=1) -> Tensor[(?), int32] {
      arange(%p0738, %p1351, %p2201, start=meta[relay.Constant][761], stop=meta[relay.Call][1], step=meta[relay.Constant][762], dtype="int32") /* ty=Tensor[(?), int32] */
    };
    %3562 = (%in_shape_0123, %in_shape_185, %in_shape_260);
    %3563 = (%shape_func_out_0133,);
    let %shape_func133: () = vm.shape_func(%3561, %3562, %3563, meta[relay.attrs.ShapeFuncAttrs][133]) /* ty=() */;
    let %storage_0870: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][881]) /* ty=Storage[] */;
    let %tensor_0743: int64 = memory.alloc_tensor(%storage_0870, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][881]) /* ty=int64 */;
    %3564 = fn (%p0739: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0739) /* ty=int64 */
    };
    %3565 = (%shape_func_out_0133,);
    %3566 = (%tensor_0743,);
    let %v736: () = vm.invoke_tvm_op(%3564, %3565, %3566) /* ty=() */;
    let %storage_0871: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][882]) /* ty=Storage[] */;
    let %tensor_0744: int64 = memory.alloc_tensor(%storage_0871, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][882]) /* ty=int64 */;
    %3567 = fn (%p0740: int64, Primitive=1) -> int64 {
      multiply(%p0740, 4 /* ty=int64 */) /* ty=int64 */
    };
    %3568 = (%tensor_0743,);
    %3569 = (%tensor_0744,);
    let %v737: () = vm.invoke_tvm_op(%3567, %3568, %3569) /* ty=() */;
    let %storage_0872: Storage[] = memory.alloc_storage(%tensor_0744, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][883]) /* ty=Storage[] */;
    let %out_0127: Tensor[(?), int32] = memory.alloc_tensor(%storage_0872, 0 /* ty=int64 */, %shape_func_out_0133, meta[relay.attrs.AllocTensorAttrs][883]) /* ty=Tensor[(?), int32] */;
    %3570 = (0 /* ty=int32 */, %x622, 1 /* ty=int32 */);
    %3571 = (%out_0127,);
    let %v738: () = vm.invoke_tvm_op(%3561, %3570, %3571) /* ty=() */;
    let %x623: Tensor[(?), int32] = %out_0127;
    let %in_shape_0124: Tensor[(1), int64] = vm.shape_of(%x623, meta[relay.attrs.ShapeOfAttrs][166]) /* ty=Tensor[(1), int64] */;
    let %storage_0873: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][884]) /* ty=Storage[] */;
    let %tensor_0745: Tensor[(2), int64] = memory.alloc_tensor(%storage_0873, 0 /* ty=int64 */, meta[relay.Constant][763] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][884]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_0134: Tensor[(2), int64] = %tensor_0745;
    %3572 = fn (%p0741: Tensor[(?), int32], Primitive=1) -> Tensor[(1, ?), int32] {
      expand_dims(%p0741, axis=0) /* ty=Tensor[(1, ?), int32] */
    };
    %3573 = (%in_shape_0124,);
    %3574 = (%shape_func_out_0134,);
    let %shape_func134: () = vm.shape_func(%3572, %3573, %3574, meta[relay.attrs.ShapeFuncAttrs][134]) /* ty=() */;
    let %storage_0874: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][885]) /* ty=Storage[] */;
    let %tensor_0746: int64 = memory.alloc_tensor(%storage_0874, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][885]) /* ty=int64 */;
    %3575 = fn (%p0742: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0742) /* ty=int64 */
    };
    %3576 = (%shape_func_out_0134,);
    %3577 = (%tensor_0746,);
    let %v739: () = vm.invoke_tvm_op(%3575, %3576, %3577) /* ty=() */;
    let %storage_0875: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][886]) /* ty=Storage[] */;
    let %tensor_0747: int64 = memory.alloc_tensor(%storage_0875, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][886]) /* ty=int64 */;
    %3578 = fn (%p0743: int64, Primitive=1) -> int64 {
      multiply(%p0743, 4 /* ty=int64 */) /* ty=int64 */
    };
    %3579 = (%tensor_0746,);
    %3580 = (%tensor_0747,);
    let %v740: () = vm.invoke_tvm_op(%3578, %3579, %3580) /* ty=() */;
    let %storage_0876: Storage[] = memory.alloc_storage(%tensor_0747, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][887]) /* ty=Storage[] */;
    let %out_0128: Tensor[(1, ?), int32] = memory.alloc_tensor(%storage_0876, 0 /* ty=int64 */, %shape_func_out_0134, meta[relay.attrs.AllocTensorAttrs][887]) /* ty=Tensor[(1, ?), int32] */;
    %3581 = (%x623,);
    %3582 = (%out_0128,);
    let %v741: () = vm.invoke_tvm_op(%3572, %3581, %3582) /* ty=() */;
    let %x624: Tensor[(1, ?), int32] = %out_0128;
    let %in_shape_0125: Tensor[(3), int64] = vm.shape_of(%x620, meta[relay.attrs.ShapeOfAttrs][167]) /* ty=Tensor[(3), int64] */;
    let %in_shape_261: Tensor[(2), int64] = vm.shape_of(%x624, meta[relay.attrs.ShapeOfAttrs][168]) /* ty=Tensor[(2), int64] */;
    let %storage_0877: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][888]) /* ty=Storage[] */;
    let %tensor_0748: Tensor[(2), int64] = memory.alloc_tensor(%storage_0877, 0 /* ty=int64 */, meta[relay.Constant][764] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][888]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_0135: Tensor[(2), int64] = %tensor_0748;
    let %storage_18: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][889]) /* ty=Storage[] */;
    let %tensor_17: Tensor[(2), int64] = memory.alloc_tensor(%storage_18, 0 /* ty=int64 */, meta[relay.Constant][765] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][889]) /* ty=Tensor[(2), int64] */;
    let %shape_func_out_11: Tensor[(2), int64] = %tensor_17;
    %3583 = fn (%p0744: Tensor[(1, ?, 6), float32], %p1352: Tensor[(1), int32], %p2202: Tensor[(1, ?), int32], %p3113: int32, %p459: float32, Primitive=1) -> (Tensor[(1, ?), int32], Tensor[(1, 1), int32]) {
      vision.non_max_suppression(%p0744, %p1352, %p2202, %p3113, %p459, meta[relay.attrs.NonMaximumSuppressionAttrs][1]) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */
    };
    %3584 = (%in_shape_0125, meta[relay.Constant][766] /* ty=Tensor[(1), int64] */, %in_shape_261, 1395303216 /* ty=int64 */, -23110496 /* ty=int64 */);
    %3585 = (%shape_func_out_0135, %shape_func_out_11);
    let %shape_func135: () = vm.shape_func(%3583, %3584, %3585, meta[relay.attrs.ShapeFuncAttrs][135]) /* ty=() */;
    let %storage_0878: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][890]) /* ty=Storage[] */;
    let %tensor_0749: int64 = memory.alloc_tensor(%storage_0878, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][890]) /* ty=int64 */;
    %3586 = fn (%p0745: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0745) /* ty=int64 */
    };
    %3587 = (%shape_func_out_0135,);
    %3588 = (%tensor_0749,);
    let %v742: () = vm.invoke_tvm_op(%3586, %3587, %3588) /* ty=() */;
    let %storage_0879: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][891]) /* ty=Storage[] */;
    let %tensor_0750: int64 = memory.alloc_tensor(%storage_0879, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][891]) /* ty=int64 */;
    %3589 = fn (%p0746: int64, Primitive=1) -> int64 {
      multiply(%p0746, 4 /* ty=int64 */) /* ty=int64 */
    };
    %3590 = (%tensor_0749,);
    %3591 = (%tensor_0750,);
    let %v743: () = vm.invoke_tvm_op(%3589, %3590, %3591) /* ty=() */;
    let %storage_0880: Storage[] = memory.alloc_storage(%tensor_0750, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][892]) /* ty=Storage[] */;
    let %storage_0881: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][893]) /* ty=Storage[] */;
    let %tensor_0751: int64 = memory.alloc_tensor(%storage_0881, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][892]) /* ty=int64 */;
    %3592 = fn (%p0747: Tensor[(2), int64], Primitive=1) -> int64 {
      prod(%p0747) /* ty=int64 */
    };
    %3593 = (%shape_func_out_11,);
    %3594 = (%tensor_0751,);
    let %v744: () = vm.invoke_tvm_op(%3592, %3593, %3594) /* ty=() */;
    let %storage_0882: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][894]) /* ty=Storage[] */;
    let %tensor_0752: int64 = memory.alloc_tensor(%storage_0882, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][893]) /* ty=int64 */;
    %3595 = fn (%p0748: int64, Primitive=1) -> int64 {
      multiply(%p0748, 4 /* ty=int64 */) /* ty=int64 */
    };
    %3596 = (%tensor_0751,);
    %3597 = (%tensor_0752,);
    let %v745: () = vm.invoke_tvm_op(%3595, %3596, %3597) /* ty=() */;
    let %storage_19: Storage[] = memory.alloc_storage(%tensor_0752, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][895]) /* ty=Storage[] */;
    let %out_0129: Tensor[(1, ?), int32] = memory.alloc_tensor(%storage_0880, 0 /* ty=int64 */, %shape_func_out_0135, meta[relay.attrs.AllocTensorAttrs][894]) /* ty=Tensor[(1, ?), int32] */;
    let %out_11: Tensor[(1, 1), int32] = memory.alloc_tensor(%storage_19, 0 /* ty=int64 */, %shape_func_out_11, meta[relay.attrs.AllocTensorAttrs][895]) /* ty=Tensor[(1, 1), int32] */;
    %3598 = (%x620, %x621, %x624, 100 /* ty=int32 */, 0.5f /* ty=float32 */);
    %3599 = (%out_0129, %out_11);
    let %v746: () = vm.invoke_tvm_op(%3583, %3598, %3599) /* ty=() */;
    let %x625: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]) = (%out_0129, %out_11);
    %3600 = %x625.0;
    let %in_shape_0126: Tensor[(2), int64] = vm.shape_of(%3600, meta[relay.attrs.ShapeOfAttrs][169]) /* ty=Tensor[(2), int64] */;
    let %storage_0883: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][896]) /* ty=Storage[] */;
    let %tensor_0753: Tensor[(1), int64] = memory.alloc_tensor(%storage_0883, 0 /* ty=int64 */, meta[relay.Constant][767] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][896]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0136: Tensor[(1), int64] = %tensor_0753;
    %3602 = fn (%p0749: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]), Primitive=1) -> Tensor[(?), int32] {
      %3601 = %p0749.0;
      squeeze(%3601, axis=[0]) /* ty=Tensor[(?), int32] */
    };
    %3603 = (%in_shape_0126, meta[relay.Constant][768] /* ty=Tensor[(2), int64] */);
    %3604 = (%shape_func_out_0136,);
    let %shape_func136: () = vm.shape_func(%3602, %3603, %3604, meta[relay.attrs.ShapeFuncAttrs][136]) /* ty=() */;
    let %storage_0884: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][897]) /* ty=Storage[] */;
    let %tensor_0754: int64 = memory.alloc_tensor(%storage_0884, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][897]) /* ty=int64 */;
    %3605 = fn (%p0750: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0750) /* ty=int64 */
    };
    %3606 = (%shape_func_out_0136,);
    %3607 = (%tensor_0754,);
    let %v747: () = vm.invoke_tvm_op(%3605, %3606, %3607) /* ty=() */;
    let %storage_0885: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][898]) /* ty=Storage[] */;
    let %tensor_0755: int64 = memory.alloc_tensor(%storage_0885, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][898]) /* ty=int64 */;
    %3608 = fn (%p0751: int64, Primitive=1) -> int64 {
      multiply(%p0751, 4 /* ty=int64 */) /* ty=int64 */
    };
    %3609 = (%tensor_0754,);
    %3610 = (%tensor_0755,);
    let %v748: () = vm.invoke_tvm_op(%3608, %3609, %3610) /* ty=() */;
    let %storage_0886: Storage[] = memory.alloc_storage(%tensor_0755, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][899]) /* ty=Storage[] */;
    let %out_0130: Tensor[(?), int32] = memory.alloc_tensor(%storage_0886, 0 /* ty=int64 */, %shape_func_out_0136, meta[relay.attrs.AllocTensorAttrs][899]) /* ty=Tensor[(?), int32] */;
    %3611 = (%x625,);
    %3612 = (%out_0130,);
    let %v749: () = vm.invoke_tvm_op(%3602, %3611, %3612) /* ty=() */;
    let %x626: Tensor[(?), int32] = %out_0130;
    let %storage_0887: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][900]) /* ty=Storage[] */;
    let %tensor_0756: Tensor[(1), int32] = memory.alloc_tensor(%storage_0887, 0 /* ty=int64 */, meta[relay.Constant][769] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][900]) /* ty=Tensor[(1), int32] */;
    %3613 = fn (%p0752: Tensor[(?), int32], Primitive=1) -> Tensor[(1), int32] {
      shape_of(%p0752, dtype="int32") /* ty=Tensor[(1), int32] */
    };
    %3614 = (%x626,);
    %3615 = (%tensor_0756,);
    let %v750: () = vm.invoke_tvm_op(%3613, %3614, %3615) /* ty=() */;
    let %x627: Tensor[(1), int32] = %tensor_0756;
    let %storage_0888: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][901]) /* ty=Storage[] */;
    let %tensor_0757: Tensor[(1), int32] = memory.alloc_tensor(%storage_0888, 0 /* ty=int64 */, meta[relay.Constant][770] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][901]) /* ty=Tensor[(1), int32] */;
    %3618 = fn (%p0753: Tensor[(1), bool], %p1353: Tensor[(1), int32], %p2203: Tensor[(1), int32], Primitive=1) -> Tensor[(1), int32] {
      %3616 = cast_like(%p2203, %p1353) /* ty=Tensor[(1), int32] */;
      %3617 = add(%p1353, %3616) /* ty=Tensor[(1), int32] */;
      where(%p0753, %3617, %p1353) /* ty=Tensor[(1), int32] */
    };
    %3619 = (meta[relay.Constant][771] /* ty=Tensor[(1), bool] */, meta[relay.Constant][772] /* ty=Tensor[(1), int32] */, %x627);
    %3620 = (%tensor_0757,);
    let %v751: () = vm.invoke_tvm_op(%3618, %3619, %3620) /* ty=() */;
    let %x628: Tensor[(1), int32] = %tensor_0757;
    let %storage_0889: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][902]) /* ty=Storage[] */;
    let %tensor_0758: Tensor[(1), int32] = memory.alloc_tensor(%storage_0889, 0 /* ty=int64 */, meta[relay.Constant][773] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][902]) /* ty=Tensor[(1), int32] */;
    %3622 = fn (%p0754: (Tensor[(1, ?), int32], Tensor[(1, 1), int32]), Primitive=1) -> Tensor[(1), int32] {
      %3621 = %p0754.1;
      squeeze(%3621, axis=[1]) /* ty=Tensor[(1), int32] */
    };
    %3623 = (%x625,);
    %3624 = (%tensor_0758,);
    let %v752: () = vm.invoke_tvm_op(%3622, %3623, %3624) /* ty=() */;
    let %x629: Tensor[(1), int32] = %tensor_0758;
    let %in_shape_0127: Tensor[(1), int64] = vm.shape_of(%x626, meta[relay.attrs.ShapeOfAttrs][170]) /* ty=Tensor[(1), int64] */;
    let %in_shape_186: Tensor[(1), int32] = device_copy(%x628, meta[relay.attrs.DeviceCopyAttrs][163]) /* ty=Tensor[(1), int32] */;
    let %in_shape_262: Tensor[(1), int32] = device_copy(%x629, meta[relay.attrs.DeviceCopyAttrs][164]) /* ty=Tensor[(1), int32] */;
    let %in_shape_350: Tensor[(1), int32] = device_copy(meta[relay.Constant][774] /* ty=Tensor[(1), int32] */, meta[relay.attrs.DeviceCopyAttrs][165]) /* ty=Tensor[(1), int32] */;
    let %storage_0890: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][903]) /* ty=Storage[] */;
    let %tensor_0759: Tensor[(1), int64] = memory.alloc_tensor(%storage_0890, 0 /* ty=int64 */, meta[relay.Constant][775] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][903]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0137: Tensor[(1), int64] = %tensor_0759;
    %3625 = fn (%p0755: Tensor[(?), int32], %p1354: Tensor[(1), int32], %p2204: Tensor[(1), int32], %p3114: Tensor[(1), int32], Primitive=1) -> Tensor[(?), int32] {
      dyn.strided_slice(%p0755, %p1354, %p2204, %p3114, begin=None, end=None, strides=None, slice_mode="size") /* ty=Tensor[(?), int32] */
    };
    %3626 = (%in_shape_0127, %in_shape_186, %in_shape_262, %in_shape_350);
    %3627 = (%shape_func_out_0137,);
    let %shape_func137: () = vm.shape_func(%3625, %3626, %3627, meta[relay.attrs.ShapeFuncAttrs][137]) /* ty=() */;
    let %storage_0891: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][904]) /* ty=Storage[] */;
    let %tensor_0760: int64 = memory.alloc_tensor(%storage_0891, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][904]) /* ty=int64 */;
    %3628 = fn (%p0756: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0756) /* ty=int64 */
    };
    %3629 = (%shape_func_out_0137,);
    %3630 = (%tensor_0760,);
    let %v753: () = vm.invoke_tvm_op(%3628, %3629, %3630) /* ty=() */;
    let %storage_0892: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][905]) /* ty=Storage[] */;
    let %tensor_0761: int64 = memory.alloc_tensor(%storage_0892, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][905]) /* ty=int64 */;
    %3631 = fn (%p0757: int64, Primitive=1) -> int64 {
      multiply(%p0757, 4 /* ty=int64 */) /* ty=int64 */
    };
    %3632 = (%tensor_0760,);
    %3633 = (%tensor_0761,);
    let %v754: () = vm.invoke_tvm_op(%3631, %3632, %3633) /* ty=() */;
    let %storage_0893: Storage[] = memory.alloc_storage(%tensor_0761, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][906]) /* ty=Storage[] */;
    let %out_0131: Tensor[(?), int32] = memory.alloc_tensor(%storage_0893, 0 /* ty=int64 */, %shape_func_out_0137, meta[relay.attrs.AllocTensorAttrs][906]) /* ty=Tensor[(?), int32] */;
    %3634 = (%x626, %x628, %x629, meta[relay.Constant][774] /* ty=Tensor[(1), int32] */);
    %3635 = (%out_0131,);
    let %v755: () = vm.invoke_tvm_op(%3625, %3634, %3635) /* ty=() */;
    let %x630: Tensor[(?), int32] = %out_0131;
    let %in_shape_0128: Tensor[(1), int64] = vm.shape_of(%x630, meta[relay.attrs.ShapeOfAttrs][171]) /* ty=Tensor[(1), int64] */;
    let %storage_0894: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][907]) /* ty=Storage[] */;
    let %tensor_0762: Tensor[(1), int64] = memory.alloc_tensor(%storage_0894, 0 /* ty=int64 */, meta[relay.Constant][776] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][907]) /* ty=Tensor[(1), int64] */;
    let %shape_func_out_0138: Tensor[(1), int64] = %tensor_0762;
    %3636 = fn (%p0758: Tensor[(?), int32], Primitive=1) -> Tensor[(?), int64] {
      cast(%p0758, dtype="int64") /* ty=Tensor[(?), int64] */
    };
    %3637 = (%in_shape_0128,);
    %3638 = (%shape_func_out_0138,);
    let %shape_func138: () = vm.shape_func(%3636, %3637, %3638, meta[relay.attrs.ShapeFuncAttrs][138]) /* ty=() */;
    let %storage_0895: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][908]) /* ty=Storage[] */;
    let %tensor_0763: int64 = memory.alloc_tensor(%storage_0895, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][908]) /* ty=int64 */;
    %3639 = fn (%p0759: Tensor[(1), int64], Primitive=1) -> int64 {
      prod(%p0759) /* ty=int64 */
    };
    %3640 = (%shape_func_out_0138,);
    %3641 = (%tensor_0763,);
    let %v756: () = vm.invoke_tvm_op(%3639, %3640, %3641) /* ty=() */;
    let %storage_0896: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][909]) /* ty=Storage[] */;
    let %tensor_0764: int64 = memory.alloc_tensor(%storage_0896, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][909]) /* ty=int64 */;
    %3642 = fn (%p0760: int64, Primitive=1) -> int64 {
      multiply(%p0760, 8 /* ty=int64 */) /* ty=int64 */
    };
    %3643 = (%tensor_0763,);
    %3644 = (%tensor_0764,);
    let %v757: () = vm.invoke_tvm_op(%3642, %3643, %3644) /* ty=() */;
    let %storage_0897: Storage[] = memory.alloc_storage(%tensor_0764, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][910]) /* ty=Storage[] */;
    let %out_0132: Tensor[(?), int64] = memory.alloc_tensor(%storage_0897, 0 /* ty=int64 */, %shape_func_out_0138, meta[relay.attrs.AllocTensorAttrs][910]) /* ty=Tensor[(?), int64] */;
    %3645 = (%x630,);
    %3646 = (%out_0132,);
    let %v758: () = vm.invoke_tvm_op(%3636, %3645, %3646) /* ty=() */;
    let %x631: Tensor[(?), int64] = %out_0132;
    %x631
  };
  let %in_shape_0129: Tensor[(2), int64] = vm.shape_of(%x614, meta[relay.attrs.ShapeOfAttrs][172]) /* ty=Tensor[(2), int64] */;
  let %in_shape_187: Tensor[(1), int64] = vm.shape_of(%x616, meta[relay.attrs.ShapeOfAttrs][173]) /* ty=Tensor[(1), int64] */;
  let %storage_0898: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][911]) /* ty=Storage[] */;
  let %tensor_0765: Tensor[(2), int64] = memory.alloc_tensor(%storage_0898, 0 /* ty=int64 */, meta[relay.Constant][777] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][911]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0139: Tensor[(2), int64] = %tensor_0765;
  %3648 = fn (%p0761: Tensor[(?, 4), float32], %p1355: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 4), float32] {
    %3647 = (%p0761, %p1355);
    adv_index(%3647) /* ty=Tensor[(?, 4), float32] */
  };
  %3649 = (%in_shape_0129, %in_shape_187);
  %3650 = (%shape_func_out_0139,);
  let %shape_func139: () = vm.shape_func(%3648, %3649, %3650, meta[relay.attrs.ShapeFuncAttrs][139]) /* ty=() */;
  let %storage_0899: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][912]) /* ty=Storage[] */;
  let %tensor_0766: int64 = memory.alloc_tensor(%storage_0899, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][912]) /* ty=int64 */;
  %3651 = fn (%p0762: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0762) /* ty=int64 */
  };
  %3652 = (%shape_func_out_0139,);
  %3653 = (%tensor_0766,);
  let %v759: () = vm.invoke_tvm_op(%3651, %3652, %3653) /* ty=() */;
  let %storage_0900: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][913]) /* ty=Storage[] */;
  let %tensor_0767: int64 = memory.alloc_tensor(%storage_0900, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][913]) /* ty=int64 */;
  %3654 = fn (%p0763: int64, Primitive=1) -> int64 {
    multiply(%p0763, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3655 = (%tensor_0766,);
  %3656 = (%tensor_0767,);
  let %v760: () = vm.invoke_tvm_op(%3654, %3655, %3656) /* ty=() */;
  let %storage_0901: Storage[] = memory.alloc_storage(%tensor_0767, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][914]) /* ty=Storage[] */;
  let %out_0133: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_0901, 0 /* ty=int64 */, %shape_func_out_0139, meta[relay.attrs.AllocTensorAttrs][914]) /* ty=Tensor[(?, 4), float32] */;
  %3657 = (%x614, %x616);
  %3658 = (%out_0133,);
  let %v761: () = vm.invoke_tvm_op(%3648, %3657, %3658) /* ty=() */;
  let %x632: Tensor[(?, 4), float32] = %out_0133;
  let %storage_0902: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][915]) /* ty=Storage[] */;
  let %tensor_0768: Tensor[(2), int32] = memory.alloc_tensor(%storage_0902, 0 /* ty=int64 */, meta[relay.Constant][778] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][915]) /* ty=Tensor[(2), int32] */;
  %3659 = fn (%p0764: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0764, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %3660 = (%x632,);
  %3661 = (%tensor_0768,);
  let %v762: () = vm.invoke_tvm_op(%3659, %3660, %3661) /* ty=() */;
  let %x633: Tensor[(2), int32] = %tensor_0768;
  let %storage_0903: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][916]) /* ty=Storage[] */;
  let %tensor_0769: Tensor[(2), int32] = memory.alloc_tensor(%storage_0903, 0 /* ty=int64 */, meta[relay.Constant][779] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][916]) /* ty=Tensor[(2), int32] */;
  %3664 = fn (%p0765: Tensor[(2), bool], %p1356: Tensor[(2), int32], %p2205: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3662 = cast_like(%p2205, %p1356) /* ty=Tensor[(2), int32] */;
    %3663 = add(%p1356, %3662) /* ty=Tensor[(2), int32] */;
    where(%p0765, %3663, %p1356) /* ty=Tensor[(2), int32] */
  };
  %3665 = (meta[relay.Constant][780] /* ty=Tensor[(2), bool] */, meta[relay.Constant][781] /* ty=Tensor[(2), int32] */, %x633);
  %3666 = (%tensor_0769,);
  let %v763: () = vm.invoke_tvm_op(%3664, %3665, %3666) /* ty=() */;
  let %x634: Tensor[(2), int32] = %tensor_0769;
  let %storage_0904: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][917]) /* ty=Storage[] */;
  let %tensor_0770: Tensor[(2), int64] = memory.alloc_tensor(%storage_0904, 0 /* ty=int64 */, meta[relay.Constant][782] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][917]) /* ty=Tensor[(2), int64] */;
  %3667 = fn (%p0766: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0766, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %3668 = (%x633,);
  %3669 = (%tensor_0770,);
  let %v764: () = vm.invoke_tvm_op(%3667, %3668, %3669) /* ty=() */;
  let %x635: Tensor[(2), int64] = %tensor_0770;
  let %in_shape_0130: Tensor[(2), int64] = vm.shape_of(%x632, meta[relay.attrs.ShapeOfAttrs][174]) /* ty=Tensor[(2), int64] */;
  let %in_shape_188: Tensor[(2), int32] = device_copy(%x634, meta[relay.attrs.DeviceCopyAttrs][166]) /* ty=Tensor[(2), int32] */;
  let %in_shape_263: Tensor[(2), int64] = device_copy(%x635, meta[relay.attrs.DeviceCopyAttrs][167]) /* ty=Tensor[(2), int64] */;
  let %in_shape_351: Tensor[(2), int32] = device_copy(meta[relay.Constant][783] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][168]) /* ty=Tensor[(2), int32] */;
  let %storage_0905: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][918]) /* ty=Storage[] */;
  let %tensor_0771: Tensor[(2), int64] = memory.alloc_tensor(%storage_0905, 0 /* ty=int64 */, meta[relay.Constant][784] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][918]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0140: Tensor[(2), int64] = %tensor_0771;
  %3670 = fn (%p0767: Tensor[(?, 4), float32], %p1357: Tensor[(2), int32], %p2206: Tensor[(2), int64], %p3115: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0767, %p1357, %p2206, %p3115, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3671 = (%in_shape_0130, %in_shape_188, %in_shape_263, %in_shape_351);
  %3672 = (%shape_func_out_0140,);
  let %shape_func140: () = vm.shape_func(%3670, %3671, %3672, meta[relay.attrs.ShapeFuncAttrs][140]) /* ty=() */;
  let %storage_0906: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][919]) /* ty=Storage[] */;
  let %tensor_0772: int64 = memory.alloc_tensor(%storage_0906, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][919]) /* ty=int64 */;
  %3673 = fn (%p0768: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0768) /* ty=int64 */
  };
  %3674 = (%shape_func_out_0140,);
  %3675 = (%tensor_0772,);
  let %v765: () = vm.invoke_tvm_op(%3673, %3674, %3675) /* ty=() */;
  let %storage_0907: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][920]) /* ty=Storage[] */;
  let %tensor_0773: int64 = memory.alloc_tensor(%storage_0907, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][920]) /* ty=int64 */;
  %3676 = fn (%p0769: int64, Primitive=1) -> int64 {
    multiply(%p0769, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3677 = (%tensor_0772,);
  %3678 = (%tensor_0773,);
  let %v766: () = vm.invoke_tvm_op(%3676, %3677, %3678) /* ty=() */;
  let %storage_0908: Storage[] = memory.alloc_storage(%tensor_0773, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][921]) /* ty=Storage[] */;
  let %out_0134: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0908, 0 /* ty=int64 */, %shape_func_out_0140, meta[relay.attrs.AllocTensorAttrs][921]) /* ty=Tensor[(?, ?), float32] */;
  %3679 = (%x632, %x634, %x635, meta[relay.Constant][783] /* ty=Tensor[(2), int32] */);
  %3680 = (%out_0134,);
  let %v767: () = vm.invoke_tvm_op(%3670, %3679, %3680) /* ty=() */;
  let %x636: Tensor[(?, ?), float32] = %out_0134;
  let %storage_0909: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][922]) /* ty=Storage[] */;
  let %tensor_0774: Tensor[(2), int32] = memory.alloc_tensor(%storage_0909, 0 /* ty=int64 */, meta[relay.Constant][785] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][922]) /* ty=Tensor[(2), int32] */;
  %3683 = fn (%p0770: Tensor[(2), bool], %p1358: Tensor[(2), int32], %p2207: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3681 = cast_like(%p2207, %p1358) /* ty=Tensor[(2), int32] */;
    %3682 = add(%p1358, %3681) /* ty=Tensor[(2), int32] */;
    where(%p0770, %3682, %p1358) /* ty=Tensor[(2), int32] */
  };
  %3684 = (meta[relay.Constant][786] /* ty=Tensor[(2), bool] */, meta[relay.Constant][787] /* ty=Tensor[(2), int32] */, %x633);
  %3685 = (%tensor_0774,);
  let %v768: () = vm.invoke_tvm_op(%3683, %3684, %3685) /* ty=() */;
  let %x637: Tensor[(2), int32] = %tensor_0774;
  let %in_shape_0131: Tensor[(2), int64] = vm.shape_of(%x632, meta[relay.attrs.ShapeOfAttrs][175]) /* ty=Tensor[(2), int64] */;
  let %in_shape_189: Tensor[(2), int32] = device_copy(%x637, meta[relay.attrs.DeviceCopyAttrs][169]) /* ty=Tensor[(2), int32] */;
  let %in_shape_264: Tensor[(2), int64] = device_copy(%x635, meta[relay.attrs.DeviceCopyAttrs][170]) /* ty=Tensor[(2), int64] */;
  let %in_shape_352: Tensor[(2), int32] = device_copy(meta[relay.Constant][788] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][171]) /* ty=Tensor[(2), int32] */;
  let %storage_0910: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][923]) /* ty=Storage[] */;
  let %tensor_0775: Tensor[(2), int64] = memory.alloc_tensor(%storage_0910, 0 /* ty=int64 */, meta[relay.Constant][789] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][923]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0141: Tensor[(2), int64] = %tensor_0775;
  %3686 = fn (%p0771: Tensor[(?, 4), float32], %p1359: Tensor[(2), int32], %p2208: Tensor[(2), int64], %p3116: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0771, %p1359, %p2208, %p3116, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3687 = (%in_shape_0131, %in_shape_189, %in_shape_264, %in_shape_352);
  %3688 = (%shape_func_out_0141,);
  let %shape_func141: () = vm.shape_func(%3686, %3687, %3688, meta[relay.attrs.ShapeFuncAttrs][141]) /* ty=() */;
  let %storage_0911: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][924]) /* ty=Storage[] */;
  let %tensor_0776: int64 = memory.alloc_tensor(%storage_0911, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][924]) /* ty=int64 */;
  %3689 = fn (%p0772: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0772) /* ty=int64 */
  };
  %3690 = (%shape_func_out_0141,);
  %3691 = (%tensor_0776,);
  let %v769: () = vm.invoke_tvm_op(%3689, %3690, %3691) /* ty=() */;
  let %storage_0912: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][925]) /* ty=Storage[] */;
  let %tensor_0777: int64 = memory.alloc_tensor(%storage_0912, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][925]) /* ty=int64 */;
  %3692 = fn (%p0773: int64, Primitive=1) -> int64 {
    multiply(%p0773, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3693 = (%tensor_0776,);
  %3694 = (%tensor_0777,);
  let %v770: () = vm.invoke_tvm_op(%3692, %3693, %3694) /* ty=() */;
  let %storage_0913: Storage[] = memory.alloc_storage(%tensor_0777, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][926]) /* ty=Storage[] */;
  let %out_0135: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0913, 0 /* ty=int64 */, %shape_func_out_0141, meta[relay.attrs.AllocTensorAttrs][926]) /* ty=Tensor[(?, ?), float32] */;
  %3695 = (%x632, %x637, %x635, meta[relay.Constant][788] /* ty=Tensor[(2), int32] */);
  %3696 = (%out_0135,);
  let %v771: () = vm.invoke_tvm_op(%3686, %3695, %3696) /* ty=() */;
  let %x638: Tensor[(?, ?), float32] = %out_0135;
  let %storage_0914: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][927]) /* ty=Storage[] */;
  let %tensor_0778: Tensor[(2), int32] = memory.alloc_tensor(%storage_0914, 0 /* ty=int64 */, meta[relay.Constant][790] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][927]) /* ty=Tensor[(2), int32] */;
  %3699 = fn (%p0774: Tensor[(2), bool], %p1360: Tensor[(2), int32], %p2209: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3697 = cast_like(%p2209, %p1360) /* ty=Tensor[(2), int32] */;
    %3698 = add(%p1360, %3697) /* ty=Tensor[(2), int32] */;
    where(%p0774, %3698, %p1360) /* ty=Tensor[(2), int32] */
  };
  %3700 = (meta[relay.Constant][791] /* ty=Tensor[(2), bool] */, meta[relay.Constant][792] /* ty=Tensor[(2), int32] */, %x633);
  %3701 = (%tensor_0778,);
  let %v772: () = vm.invoke_tvm_op(%3699, %3700, %3701) /* ty=() */;
  let %x639: Tensor[(2), int32] = %tensor_0778;
  let %in_shape_0132: Tensor[(2), int64] = vm.shape_of(%x632, meta[relay.attrs.ShapeOfAttrs][176]) /* ty=Tensor[(2), int64] */;
  let %in_shape_190: Tensor[(2), int32] = device_copy(%x639, meta[relay.attrs.DeviceCopyAttrs][172]) /* ty=Tensor[(2), int32] */;
  let %in_shape_265: Tensor[(2), int64] = device_copy(%x635, meta[relay.attrs.DeviceCopyAttrs][173]) /* ty=Tensor[(2), int64] */;
  let %in_shape_353: Tensor[(2), int32] = device_copy(meta[relay.Constant][793] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][174]) /* ty=Tensor[(2), int32] */;
  let %storage_0915: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][928]) /* ty=Storage[] */;
  let %tensor_0779: Tensor[(2), int64] = memory.alloc_tensor(%storage_0915, 0 /* ty=int64 */, meta[relay.Constant][794] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][928]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0142: Tensor[(2), int64] = %tensor_0779;
  %3702 = fn (%p0775: Tensor[(?, 4), float32], %p1361: Tensor[(2), int32], %p2210: Tensor[(2), int64], %p3117: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0775, %p1361, %p2210, %p3117, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3703 = (%in_shape_0132, %in_shape_190, %in_shape_265, %in_shape_353);
  %3704 = (%shape_func_out_0142,);
  let %shape_func142: () = vm.shape_func(%3702, %3703, %3704, meta[relay.attrs.ShapeFuncAttrs][142]) /* ty=() */;
  let %storage_0916: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][929]) /* ty=Storage[] */;
  let %tensor_0780: int64 = memory.alloc_tensor(%storage_0916, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][929]) /* ty=int64 */;
  %3705 = fn (%p0776: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0776) /* ty=int64 */
  };
  %3706 = (%shape_func_out_0142,);
  %3707 = (%tensor_0780,);
  let %v773: () = vm.invoke_tvm_op(%3705, %3706, %3707) /* ty=() */;
  let %storage_0917: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][930]) /* ty=Storage[] */;
  let %tensor_0781: int64 = memory.alloc_tensor(%storage_0917, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][930]) /* ty=int64 */;
  %3708 = fn (%p0777: int64, Primitive=1) -> int64 {
    multiply(%p0777, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3709 = (%tensor_0780,);
  %3710 = (%tensor_0781,);
  let %v774: () = vm.invoke_tvm_op(%3708, %3709, %3710) /* ty=() */;
  let %storage_0918: Storage[] = memory.alloc_storage(%tensor_0781, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][931]) /* ty=Storage[] */;
  let %out_0136: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0918, 0 /* ty=int64 */, %shape_func_out_0142, meta[relay.attrs.AllocTensorAttrs][931]) /* ty=Tensor[(?, ?), float32] */;
  %3711 = (%x632, %x639, %x635, meta[relay.Constant][793] /* ty=Tensor[(2), int32] */);
  %3712 = (%out_0136,);
  let %v775: () = vm.invoke_tvm_op(%3702, %3711, %3712) /* ty=() */;
  let %x640: Tensor[(?, ?), float32] = %out_0136;
  let %storage_0919: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][932]) /* ty=Storage[] */;
  let %tensor_0782: Tensor[(2), int32] = memory.alloc_tensor(%storage_0919, 0 /* ty=int64 */, meta[relay.Constant][795] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][932]) /* ty=Tensor[(2), int32] */;
  %3715 = fn (%p0778: Tensor[(2), bool], %p1362: Tensor[(2), int32], %p2211: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3713 = cast_like(%p2211, %p1362) /* ty=Tensor[(2), int32] */;
    %3714 = add(%p1362, %3713) /* ty=Tensor[(2), int32] */;
    where(%p0778, %3714, %p1362) /* ty=Tensor[(2), int32] */
  };
  %3716 = (meta[relay.Constant][796] /* ty=Tensor[(2), bool] */, meta[relay.Constant][797] /* ty=Tensor[(2), int32] */, %x633);
  %3717 = (%tensor_0782,);
  let %v776: () = vm.invoke_tvm_op(%3715, %3716, %3717) /* ty=() */;
  let %x641: Tensor[(2), int32] = %tensor_0782;
  let %in_shape_0133: Tensor[(2), int64] = vm.shape_of(%x632, meta[relay.attrs.ShapeOfAttrs][177]) /* ty=Tensor[(2), int64] */;
  let %in_shape_191: Tensor[(2), int32] = device_copy(%x641, meta[relay.attrs.DeviceCopyAttrs][175]) /* ty=Tensor[(2), int32] */;
  let %in_shape_266: Tensor[(2), int64] = device_copy(%x635, meta[relay.attrs.DeviceCopyAttrs][176]) /* ty=Tensor[(2), int64] */;
  let %in_shape_354: Tensor[(2), int32] = device_copy(meta[relay.Constant][798] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][177]) /* ty=Tensor[(2), int32] */;
  let %storage_0920: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][933]) /* ty=Storage[] */;
  let %tensor_0783: Tensor[(2), int64] = memory.alloc_tensor(%storage_0920, 0 /* ty=int64 */, meta[relay.Constant][799] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][933]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0143: Tensor[(2), int64] = %tensor_0783;
  %3718 = fn (%p0779: Tensor[(?, 4), float32], %p1363: Tensor[(2), int32], %p2212: Tensor[(2), int64], %p3118: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0779, %p1363, %p2212, %p3118, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3719 = (%in_shape_0133, %in_shape_191, %in_shape_266, %in_shape_354);
  %3720 = (%shape_func_out_0143,);
  let %shape_func143: () = vm.shape_func(%3718, %3719, %3720, meta[relay.attrs.ShapeFuncAttrs][143]) /* ty=() */;
  let %storage_0921: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][934]) /* ty=Storage[] */;
  let %tensor_0784: int64 = memory.alloc_tensor(%storage_0921, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][934]) /* ty=int64 */;
  %3721 = fn (%p0780: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0780) /* ty=int64 */
  };
  %3722 = (%shape_func_out_0143,);
  %3723 = (%tensor_0784,);
  let %v777: () = vm.invoke_tvm_op(%3721, %3722, %3723) /* ty=() */;
  let %storage_0922: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][935]) /* ty=Storage[] */;
  let %tensor_0785: int64 = memory.alloc_tensor(%storage_0922, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][935]) /* ty=int64 */;
  %3724 = fn (%p0781: int64, Primitive=1) -> int64 {
    multiply(%p0781, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3725 = (%tensor_0784,);
  %3726 = (%tensor_0785,);
  let %v778: () = vm.invoke_tvm_op(%3724, %3725, %3726) /* ty=() */;
  let %storage_0923: Storage[] = memory.alloc_storage(%tensor_0785, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][936]) /* ty=Storage[] */;
  let %out_0137: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0923, 0 /* ty=int64 */, %shape_func_out_0143, meta[relay.attrs.AllocTensorAttrs][936]) /* ty=Tensor[(?, ?), float32] */;
  %3727 = (%x632, %x641, %x635, meta[relay.Constant][798] /* ty=Tensor[(2), int32] */);
  %3728 = (%out_0137,);
  let %v779: () = vm.invoke_tvm_op(%3718, %3727, %3728) /* ty=() */;
  let %x642: Tensor[(?, ?), float32] = %out_0137;
  let %in_shape_0134: Tensor[(2), int64] = vm.shape_of(%x636, meta[relay.attrs.ShapeOfAttrs][178]) /* ty=Tensor[(2), int64] */;
  let %in_shape_192: Tensor[(2), int64] = vm.shape_of(%x638, meta[relay.attrs.ShapeOfAttrs][179]) /* ty=Tensor[(2), int64] */;
  let %in_shape_267: Tensor[(2), int64] = vm.shape_of(%x640, meta[relay.attrs.ShapeOfAttrs][180]) /* ty=Tensor[(2), int64] */;
  let %in_shape_355: Tensor[(2), int64] = vm.shape_of(%x642, meta[relay.attrs.ShapeOfAttrs][181]) /* ty=Tensor[(2), int64] */;
  let %storage_0924: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][937]) /* ty=Storage[] */;
  let %tensor_0786: Tensor[(1), int64] = memory.alloc_tensor(%storage_0924, 0 /* ty=int64 */, meta[relay.Constant][800] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][937]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0144: Tensor[(1), int64] = %tensor_0786;
  %3746 = fn (%p0782: Tensor[(?, ?), float32], %p1364: Tensor[(?, ?), float32], %p2213: Tensor[(?, ?), float32], %p3119: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?), int64] {
    %3729 = take(%p0782, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %3730 = take(%p1364, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %3731 = subtract(%3729, %3730) /* ty=Tensor[(?), float32] */;
    %3732 = take(%p2213, 3 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %3733 = take(%p3119, 1 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %3734 = subtract(%3732, %3733) /* ty=Tensor[(?), float32] */;
    %3735 = multiply(%3731, %3734) /* ty=Tensor[(?), float32] */;
    %3736 = (%3735,);
    %3737 = concatenate(%3736) /* ty=Tensor[(?), float32] */;
    %3738 = sqrt(%3737) /* ty=Tensor[(?), float32] */;
    %3739 = divide(%3738, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %3740 = log2(%3739) /* ty=Tensor[(?), float32] */;
    %3741 = add(%3740, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %3742 = add(%3741, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %3743 = floor(%3742) /* ty=Tensor[(?), float32] */;
    %3744 = clip(%3743, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
    %3745 = cast(%3744, dtype="int64") /* ty=Tensor[(?), int64] */;
    subtract(%3745, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */
  };
  %3747 = (%in_shape_0134, %in_shape_192, %in_shape_267, %in_shape_355);
  %3748 = (%shape_func_out_0144,);
  let %shape_func144: () = vm.shape_func(%3746, %3747, %3748, meta[relay.attrs.ShapeFuncAttrs][144]) /* ty=() */;
  let %storage_0925: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][938]) /* ty=Storage[] */;
  let %tensor_0787: int64 = memory.alloc_tensor(%storage_0925, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][938]) /* ty=int64 */;
  %3749 = fn (%p0783: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0783) /* ty=int64 */
  };
  %3750 = (%shape_func_out_0144,);
  %3751 = (%tensor_0787,);
  let %v780: () = vm.invoke_tvm_op(%3749, %3750, %3751) /* ty=() */;
  let %storage_0926: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][939]) /* ty=Storage[] */;
  let %tensor_0788: int64 = memory.alloc_tensor(%storage_0926, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][939]) /* ty=int64 */;
  %3752 = fn (%p0784: int64, Primitive=1) -> int64 {
    multiply(%p0784, 8 /* ty=int64 */) /* ty=int64 */
  };
  %3753 = (%tensor_0787,);
  %3754 = (%tensor_0788,);
  let %v781: () = vm.invoke_tvm_op(%3752, %3753, %3754) /* ty=() */;
  let %storage_0927: Storage[] = memory.alloc_storage(%tensor_0788, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][940]) /* ty=Storage[] */;
  let %out_0138: Tensor[(?), int64] = memory.alloc_tensor(%storage_0927, 0 /* ty=int64 */, %shape_func_out_0144, meta[relay.attrs.AllocTensorAttrs][940]) /* ty=Tensor[(?), int64] */;
  %3755 = (%x636, %x638, %x640, %x642);
  %3756 = (%out_0138,);
  let %v782: () = vm.invoke_tvm_op(%3746, %3755, %3756) /* ty=() */;
  let %x643: Tensor[(?), int64] = %out_0138;
  let %storage_0928: Storage[] = memory.alloc_storage(4 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][941]) /* ty=Storage[] */;
  let %tensor_0789: Tensor[(1), int32] = memory.alloc_tensor(%storage_0928, 0 /* ty=int64 */, meta[relay.Constant][801] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][941]) /* ty=Tensor[(1), int32] */;
  %3757 = fn (%p0785: Tensor[(?), int64], Primitive=1) -> Tensor[(1), int32] {
    shape_of(%p0785, dtype="int32") /* ty=Tensor[(1), int32] */
  };
  %3758 = (%x643,);
  %3759 = (%tensor_0789,);
  let %v783: () = vm.invoke_tvm_op(%3757, %3758, %3759) /* ty=() */;
  let %x644: Tensor[(1), int32] = %tensor_0789;
  let %storage_0929: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][942]) /* ty=Storage[] */;
  let %tensor_0790: Tensor[(4), int64] = memory.alloc_tensor(%storage_0929, 0 /* ty=int64 */, meta[relay.Constant][802] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][942]) /* ty=Tensor[(4), int64] */;
  %3764 = fn (%p0786: Tensor[(1), int32], %p1365: Tensor[(1), int64], %p2214: Tensor[(1), int64], Primitive=1) -> Tensor[(4), int64] {
    %3760 = take(%p0786, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
    %3761 = expand_dims(%3760, axis=0) /* ty=Tensor[(1), int32] */;
    %3762 = cast(%3761, dtype="int64") /* ty=Tensor[(1), int64] */;
    %3763 = (%3762, %p1365, %p2214, %p2214);
    concatenate(%3763) /* ty=Tensor[(4), int64] */
  };
  %3765 = (%x644, meta[relay.Constant][460] /* ty=Tensor[(1), int64] */, meta[relay.Constant][803] /* ty=Tensor[(1), int64] */);
  %3766 = (%tensor_0790,);
  let %v784: () = vm.invoke_tvm_op(%3764, %3765, %3766) /* ty=() */;
  let %x645: Tensor[(4), int64] = %tensor_0790;
  let %in_shape_0135: int32 = device_copy(0 /* ty=int32 */, meta[relay.attrs.DeviceCopyAttrs][178]) /* ty=int32 */;
  let %in_shape_193: Tensor[(4), int64] = device_copy(%x645, meta[relay.attrs.DeviceCopyAttrs][179]) /* ty=Tensor[(4), int64] */;
  let %storage_0930: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][943]) /* ty=Storage[] */;
  let %tensor_0791: Tensor[(4), int64] = memory.alloc_tensor(%storage_0930, 0 /* ty=int64 */, meta[relay.Constant][804] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][943]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0145: Tensor[(4), int64] = %tensor_0791;
  %3767 = fn (%p0787: int32, %p1366: Tensor[(4), int64], Primitive=1) -> Tensor[(?, ?, ?, ?), float32] {
    dyn.full(%p0787, %p1366, shape=None, dtype="float32") /* ty=Tensor[(?, ?, ?, ?), float32] */
  };
  %3768 = (%in_shape_0135, %in_shape_193);
  %3769 = (%shape_func_out_0145,);
  let %shape_func145: () = vm.shape_func(%3767, %3768, %3769, meta[relay.attrs.ShapeFuncAttrs][145]) /* ty=() */;
  let %storage_0931: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][944]) /* ty=Storage[] */;
  let %tensor_0792: int64 = memory.alloc_tensor(%storage_0931, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][944]) /* ty=int64 */;
  %3770 = fn (%p0788: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0788) /* ty=int64 */
  };
  %3771 = (%shape_func_out_0145,);
  %3772 = (%tensor_0792,);
  let %v785: () = vm.invoke_tvm_op(%3770, %3771, %3772) /* ty=() */;
  let %storage_0932: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][945]) /* ty=Storage[] */;
  let %tensor_0793: int64 = memory.alloc_tensor(%storage_0932, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][945]) /* ty=int64 */;
  %3773 = fn (%p0789: int64, Primitive=1) -> int64 {
    multiply(%p0789, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3774 = (%tensor_0792,);
  %3775 = (%tensor_0793,);
  let %v786: () = vm.invoke_tvm_op(%3773, %3774, %3775) /* ty=() */;
  let %storage_0933: Storage[] = memory.alloc_storage(%tensor_0793, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][946]) /* ty=Storage[] */;
  let %out_0139: Tensor[(?, ?, ?, ?), float32] = memory.alloc_tensor(%storage_0933, 0 /* ty=int64 */, %shape_func_out_0145, meta[relay.attrs.AllocTensorAttrs][946]) /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %3776 = (0 /* ty=int32 */, %x645);
  %3777 = (%out_0139,);
  let %v787: () = vm.invoke_tvm_op(%3767, %3776, %3777) /* ty=() */;
  let %x646: Tensor[(?, ?, ?, ?), float32] = %out_0139;
  let %in_shape_0136: Tensor[(4), int64] = vm.shape_of(%x646, meta[relay.attrs.ShapeOfAttrs][182]) /* ty=Tensor[(4), int64] */;
  let %storage_0934: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][947]) /* ty=Storage[] */;
  let %tensor_0794: Tensor[(4), int64] = memory.alloc_tensor(%storage_0934, 0 /* ty=int64 */, meta[relay.Constant][805] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][947]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0146: Tensor[(4), int64] = %tensor_0794;
  %3778 = fn (%p0790: Tensor[(?, ?, ?, ?), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    reshape(%p0790, newshape=[0, 256, 14, 14]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %3779 = (%in_shape_0136,);
  %3780 = (%shape_func_out_0146,);
  let %shape_func146: () = vm.shape_func(%3778, %3779, %3780, meta[relay.attrs.ShapeFuncAttrs][146]) /* ty=() */;
  let %x647: Tensor[(?, 256, 14, 14), float32] = vm.reshape_tensor(%x646, %shape_func_out_0146, meta[relay.attrs.ReshapeTensorAttrs][112]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  let %in_shape_0137: Tensor[(1), int64] = vm.shape_of(%x643, meta[relay.attrs.ShapeOfAttrs][183]) /* ty=Tensor[(1), int64] */;
  let %storage_0935: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][948]) /* ty=Storage[] */;
  let %tensor_0795: Tensor[(1), int64] = memory.alloc_tensor(%storage_0935, 0 /* ty=int64 */, meta[relay.Constant][806] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][948]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0147: Tensor[(1), int64] = %tensor_0795;
  %3781 = fn (%p0791: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0791, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %3782 = (%in_shape_0137,);
  %3783 = (%shape_func_out_0147,);
  let %shape_func147: () = vm.shape_func(%3781, %3782, %3783, meta[relay.attrs.ShapeFuncAttrs][147]) /* ty=() */;
  let %storage_0936: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][949]) /* ty=Storage[] */;
  let %tensor_0796: int64 = memory.alloc_tensor(%storage_0936, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][949]) /* ty=int64 */;
  %3784 = fn (%p0792: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0792) /* ty=int64 */
  };
  %3785 = (%shape_func_out_0147,);
  %3786 = (%tensor_0796,);
  let %v788: () = vm.invoke_tvm_op(%3784, %3785, %3786) /* ty=() */;
  let %storage_0937: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][950]) /* ty=Storage[] */;
  let %tensor_0797: int64 = memory.alloc_tensor(%storage_0937, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][950]) /* ty=int64 */;
  %3787 = fn (%p0793: int64, Primitive=1) -> int64 {
    multiply(%p0793, 1 /* ty=int64 */) /* ty=int64 */
  };
  %3788 = (%tensor_0796,);
  %3789 = (%tensor_0797,);
  let %v789: () = vm.invoke_tvm_op(%3787, %3788, %3789) /* ty=() */;
  let %storage_0938: Storage[] = memory.alloc_storage(%tensor_0797, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][951]) /* ty=Storage[] */;
  let %out_0140: Tensor[(?), bool] = memory.alloc_tensor(%storage_0938, 0 /* ty=int64 */, %shape_func_out_0147, meta[relay.attrs.AllocTensorAttrs][951]) /* ty=Tensor[(?), bool] */;
  %3790 = (%x643,);
  %3791 = (%out_0140,);
  let %v790: () = vm.invoke_tvm_op(%3781, %3790, %3791) /* ty=() */;
  let %x648: Tensor[(?), bool] = %out_0140;
  let %in_shape_0138: Tensor[(?), bool] = device_copy(%x648, meta[relay.attrs.DeviceCopyAttrs][180]) /* ty=Tensor[(?), bool] */;
  let %storage_0939: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][952]) /* ty=Storage[] */;
  let %tensor_0798: Tensor[(2), int64] = memory.alloc_tensor(%storage_0939, 0 /* ty=int64 */, meta[relay.Constant][807] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][952]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0148: Tensor[(2), int64] = %tensor_0798;
  %3792 = fn (%p0794: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0794) /* ty=Tensor[(?, 1), int32] */
  };
  %3793 = (%in_shape_0138,);
  %3794 = (%shape_func_out_0148,);
  let %shape_func148: () = vm.shape_func(%3792, %3793, %3794, meta[relay.attrs.ShapeFuncAttrs][148]) /* ty=() */;
  let %storage_0940: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][953]) /* ty=Storage[] */;
  let %tensor_0799: int64 = memory.alloc_tensor(%storage_0940, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][953]) /* ty=int64 */;
  %3795 = fn (%p0795: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0795) /* ty=int64 */
  };
  %3796 = (%shape_func_out_0148,);
  %3797 = (%tensor_0799,);
  let %v791: () = vm.invoke_tvm_op(%3795, %3796, %3797) /* ty=() */;
  let %storage_0941: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][954]) /* ty=Storage[] */;
  let %tensor_0800: int64 = memory.alloc_tensor(%storage_0941, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][954]) /* ty=int64 */;
  %3798 = fn (%p0796: int64, Primitive=1) -> int64 {
    multiply(%p0796, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3799 = (%tensor_0799,);
  %3800 = (%tensor_0800,);
  let %v792: () = vm.invoke_tvm_op(%3798, %3799, %3800) /* ty=() */;
  let %storage_0942: Storage[] = memory.alloc_storage(%tensor_0800, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][955]) /* ty=Storage[] */;
  let %out_0141: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0942, 0 /* ty=int64 */, %shape_func_out_0148, meta[relay.attrs.AllocTensorAttrs][955]) /* ty=Tensor[(?, 1), int32] */;
  %3801 = (%x648,);
  %3802 = (%out_0141,);
  let %v793: () = vm.invoke_tvm_op(%3792, %3801, %3802) /* ty=() */;
  let %x649: Tensor[(?, 1), int32] = %out_0141;
  let %in_shape_0139: Tensor[(2), int64] = vm.shape_of(%x649, meta[relay.attrs.ShapeOfAttrs][184]) /* ty=Tensor[(2), int64] */;
  let %storage_0943: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][956]) /* ty=Storage[] */;
  let %tensor_0801: Tensor[(1), int64] = memory.alloc_tensor(%storage_0943, 0 /* ty=int64 */, meta[relay.Constant][808] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][956]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0149: Tensor[(1), int64] = %tensor_0801;
  %3805 = fn (%p0797: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %3803 = split(%p0797, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %3804 = %3803.0;
    squeeze(%3804, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %3806 = (%in_shape_0139,);
  %3807 = (%shape_func_out_0149,);
  let %shape_func149: () = vm.shape_func(%3805, %3806, %3807, meta[relay.attrs.ShapeFuncAttrs][149]) /* ty=() */;
  let %storage_0944: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][957]) /* ty=Storage[] */;
  let %tensor_0802: int64 = memory.alloc_tensor(%storage_0944, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][957]) /* ty=int64 */;
  %3808 = fn (%p0798: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0798) /* ty=int64 */
  };
  %3809 = (%shape_func_out_0149,);
  %3810 = (%tensor_0802,);
  let %v794: () = vm.invoke_tvm_op(%3808, %3809, %3810) /* ty=() */;
  let %storage_0945: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][958]) /* ty=Storage[] */;
  let %tensor_0803: int64 = memory.alloc_tensor(%storage_0945, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][958]) /* ty=int64 */;
  %3811 = fn (%p0799: int64, Primitive=1) -> int64 {
    multiply(%p0799, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3812 = (%tensor_0802,);
  %3813 = (%tensor_0803,);
  let %v795: () = vm.invoke_tvm_op(%3811, %3812, %3813) /* ty=() */;
  let %storage_0946: Storage[] = memory.alloc_storage(%tensor_0803, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][959]) /* ty=Storage[] */;
  let %out_0142: Tensor[(?), int32] = memory.alloc_tensor(%storage_0946, 0 /* ty=int64 */, %shape_func_out_0149, meta[relay.attrs.AllocTensorAttrs][959]) /* ty=Tensor[(?), int32] */;
  %3814 = (%x649,);
  %3815 = (%out_0142,);
  let %v796: () = vm.invoke_tvm_op(%3805, %3814, %3815) /* ty=() */;
  let %x650: Tensor[(?), int32] = %out_0142;
  let %in_shape_0140: Tensor[(1), int64] = vm.shape_of(%x650, meta[relay.attrs.ShapeOfAttrs][185]) /* ty=Tensor[(1), int64] */;
  let %storage_0947: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][960]) /* ty=Storage[] */;
  let %tensor_0804: Tensor[(4), int64] = memory.alloc_tensor(%storage_0947, 0 /* ty=int64 */, meta[relay.Constant][809] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][960]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0150: Tensor[(4), int64] = %tensor_0804;
  %3819 = fn (%p0800: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 14, 14), int32] {
    %3816 = reshape(%p0800, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %3817 = repeat(%3816, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %3818 = repeat(%3817, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
    repeat(%3818, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */
  };
  %3820 = (%in_shape_0140,);
  %3821 = (%shape_func_out_0150,);
  let %shape_func150: () = vm.shape_func(%3819, %3820, %3821, meta[relay.attrs.ShapeFuncAttrs][150]) /* ty=() */;
  let %storage_0948: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][961]) /* ty=Storage[] */;
  let %tensor_0805: int64 = memory.alloc_tensor(%storage_0948, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][961]) /* ty=int64 */;
  %3822 = fn (%p0801: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0801) /* ty=int64 */
  };
  %3823 = (%shape_func_out_0150,);
  %3824 = (%tensor_0805,);
  let %v797: () = vm.invoke_tvm_op(%3822, %3823, %3824) /* ty=() */;
  let %storage_0949: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][962]) /* ty=Storage[] */;
  let %tensor_0806: int64 = memory.alloc_tensor(%storage_0949, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][962]) /* ty=int64 */;
  %3825 = fn (%p0802: int64, Primitive=1) -> int64 {
    multiply(%p0802, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3826 = (%tensor_0805,);
  %3827 = (%tensor_0806,);
  let %v798: () = vm.invoke_tvm_op(%3825, %3826, %3827) /* ty=() */;
  let %storage_0950: Storage[] = memory.alloc_storage(%tensor_0806, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][963]) /* ty=Storage[] */;
  let %out_0143: Tensor[(?, 256, 14, 14), int32] = memory.alloc_tensor(%storage_0950, 0 /* ty=int64 */, %shape_func_out_0150, meta[relay.attrs.AllocTensorAttrs][963]) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %3828 = (%x650,);
  %3829 = (%out_0143,);
  let %v799: () = vm.invoke_tvm_op(%3819, %3828, %3829) /* ty=() */;
  let %x651: Tensor[(?, 256, 14, 14), int32] = %out_0143;
  let %storage_0951: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][964]) /* ty=Storage[] */;
  let %tensor_0807: Tensor[(2), int32] = memory.alloc_tensor(%storage_0951, 0 /* ty=int64 */, meta[relay.Constant][810] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][964]) /* ty=Tensor[(2), int32] */;
  %3832 = fn (%p0803: Tensor[(2), bool], %p1367: Tensor[(2), int32], %p2215: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3830 = cast_like(%p2215, %p1367) /* ty=Tensor[(2), int32] */;
    %3831 = add(%p1367, %3830) /* ty=Tensor[(2), int32] */;
    where(%p0803, %3831, %p1367) /* ty=Tensor[(2), int32] */
  };
  %3833 = (meta[relay.Constant][811] /* ty=Tensor[(2), bool] */, meta[relay.Constant][812] /* ty=Tensor[(2), int32] */, %x633);
  %3834 = (%tensor_0807,);
  let %v800: () = vm.invoke_tvm_op(%3832, %3833, %3834) /* ty=() */;
  let %x652: Tensor[(2), int32] = %tensor_0807;
  let %in_shape_0141: Tensor[(2), int64] = vm.shape_of(%x632, meta[relay.attrs.ShapeOfAttrs][186]) /* ty=Tensor[(2), int64] */;
  let %in_shape_194: Tensor[(2), int32] = device_copy(%x652, meta[relay.attrs.DeviceCopyAttrs][181]) /* ty=Tensor[(2), int32] */;
  let %in_shape_268: Tensor[(2), int64] = device_copy(%x635, meta[relay.attrs.DeviceCopyAttrs][182]) /* ty=Tensor[(2), int64] */;
  let %in_shape_356: Tensor[(2), int32] = device_copy(meta[relay.Constant][813] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][183]) /* ty=Tensor[(2), int32] */;
  let %storage_0952: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][965]) /* ty=Storage[] */;
  let %tensor_0808: Tensor[(2), int64] = memory.alloc_tensor(%storage_0952, 0 /* ty=int64 */, meta[relay.Constant][814] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][965]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0151: Tensor[(2), int64] = %tensor_0808;
  %3835 = fn (%p0804: Tensor[(?, 4), float32], %p1368: Tensor[(2), int32], %p2216: Tensor[(2), int64], %p3120: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0804, %p1368, %p2216, %p3120, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3836 = (%in_shape_0141, %in_shape_194, %in_shape_268, %in_shape_356);
  %3837 = (%shape_func_out_0151,);
  let %shape_func151: () = vm.shape_func(%3835, %3836, %3837, meta[relay.attrs.ShapeFuncAttrs][151]) /* ty=() */;
  let %storage_0953: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][966]) /* ty=Storage[] */;
  let %tensor_0809: int64 = memory.alloc_tensor(%storage_0953, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][966]) /* ty=int64 */;
  %3838 = fn (%p0805: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0805) /* ty=int64 */
  };
  %3839 = (%shape_func_out_0151,);
  %3840 = (%tensor_0809,);
  let %v801: () = vm.invoke_tvm_op(%3838, %3839, %3840) /* ty=() */;
  let %storage_0954: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][967]) /* ty=Storage[] */;
  let %tensor_0810: int64 = memory.alloc_tensor(%storage_0954, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][967]) /* ty=int64 */;
  %3841 = fn (%p0806: int64, Primitive=1) -> int64 {
    multiply(%p0806, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3842 = (%tensor_0809,);
  %3843 = (%tensor_0810,);
  let %v802: () = vm.invoke_tvm_op(%3841, %3842, %3843) /* ty=() */;
  let %storage_0955: Storage[] = memory.alloc_storage(%tensor_0810, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][968]) /* ty=Storage[] */;
  let %out_0144: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0955, 0 /* ty=int64 */, %shape_func_out_0151, meta[relay.attrs.AllocTensorAttrs][968]) /* ty=Tensor[(?, ?), float32] */;
  %3844 = (%x632, %x652, %x635, meta[relay.Constant][813] /* ty=Tensor[(2), int32] */);
  %3845 = (%out_0144,);
  let %v803: () = vm.invoke_tvm_op(%3835, %3844, %3845) /* ty=() */;
  let %x653: Tensor[(?, ?), float32] = %out_0144;
  let %storage_0956: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][969]) /* ty=Storage[] */;
  let %tensor_0811: Tensor[(2), int32] = memory.alloc_tensor(%storage_0956, 0 /* ty=int64 */, meta[relay.Constant][815] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][969]) /* ty=Tensor[(2), int32] */;
  %3846 = fn (%p0807: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0807, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %3847 = (%x653,);
  %3848 = (%tensor_0811,);
  let %v804: () = vm.invoke_tvm_op(%3846, %3847, %3848) /* ty=() */;
  let %x654: Tensor[(2), int32] = %tensor_0811;
  let %storage_0957: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][970]) /* ty=Storage[] */;
  let %tensor_0812: Tensor[(2), int32] = memory.alloc_tensor(%storage_0957, 0 /* ty=int64 */, meta[relay.Constant][816] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][970]) /* ty=Tensor[(2), int32] */;
  %3851 = fn (%p0808: Tensor[(2), bool], %p1369: Tensor[(2), int32], %p2217: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %3849 = cast_like(%p2217, %p1369) /* ty=Tensor[(2), int32] */;
    %3850 = add(%p1369, %3849) /* ty=Tensor[(2), int32] */;
    where(%p0808, %3850, %p1369) /* ty=Tensor[(2), int32] */
  };
  %3852 = (meta[relay.Constant][817] /* ty=Tensor[(2), bool] */, meta[relay.Constant][818] /* ty=Tensor[(2), int32] */, %x654);
  %3853 = (%tensor_0812,);
  let %v805: () = vm.invoke_tvm_op(%3851, %3852, %3853) /* ty=() */;
  let %x655: Tensor[(2), int32] = %tensor_0812;
  let %storage_0958: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][971]) /* ty=Storage[] */;
  let %tensor_0813: Tensor[(2), int32] = memory.alloc_tensor(%storage_0958, 0 /* ty=int64 */, meta[relay.Constant][819] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][971]) /* ty=Tensor[(2), int32] */;
  %3854 = fn (%p0809: Tensor[(2), int32], %p1370: Tensor[(1), int32], Primitive=1) -> Tensor[(2), int32] {
    scatter(%p0809, %p1370, %p1370, meta[relay.attrs.ScatterAttrs][9]) /* ty=Tensor[(2), int32] */
  };
  %3855 = (%x654, meta[relay.Constant][478] /* ty=Tensor[(1), int32] */);
  %3856 = (%tensor_0813,);
  let %v806: () = vm.invoke_tvm_op(%3854, %3855, %3856) /* ty=() */;
  let %x656: Tensor[(2), int32] = %tensor_0813;
  let %storage_0959: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][972]) /* ty=Storage[] */;
  let %tensor_0814: Tensor[(2), int64] = memory.alloc_tensor(%storage_0959, 0 /* ty=int64 */, meta[relay.Constant][820] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][972]) /* ty=Tensor[(2), int64] */;
  %3857 = fn (%p0810: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0810, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %3858 = (%x656,);
  %3859 = (%tensor_0814,);
  let %v807: () = vm.invoke_tvm_op(%3857, %3858, %3859) /* ty=() */;
  let %x657: Tensor[(2), int64] = %tensor_0814;
  let %in_shape_0142: Tensor[(2), int64] = vm.shape_of(%x653, meta[relay.attrs.ShapeOfAttrs][187]) /* ty=Tensor[(2), int64] */;
  let %in_shape_195: Tensor[(2), int32] = device_copy(%x655, meta[relay.attrs.DeviceCopyAttrs][184]) /* ty=Tensor[(2), int32] */;
  let %in_shape_269: Tensor[(2), int64] = device_copy(%x657, meta[relay.attrs.DeviceCopyAttrs][185]) /* ty=Tensor[(2), int64] */;
  let %in_shape_357: Tensor[(2), int32] = device_copy(meta[relay.Constant][821] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][186]) /* ty=Tensor[(2), int32] */;
  let %storage_0960: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][973]) /* ty=Storage[] */;
  let %tensor_0815: Tensor[(2), int64] = memory.alloc_tensor(%storage_0960, 0 /* ty=int64 */, meta[relay.Constant][822] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][973]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0152: Tensor[(2), int64] = %tensor_0815;
  %3860 = fn (%p0811: Tensor[(?, ?), float32], %p1371: Tensor[(2), int32], %p2218: Tensor[(2), int64], %p3121: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0811, %p1371, %p2218, %p3121, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %3861 = (%in_shape_0142, %in_shape_195, %in_shape_269, %in_shape_357);
  %3862 = (%shape_func_out_0152,);
  let %shape_func152: () = vm.shape_func(%3860, %3861, %3862, meta[relay.attrs.ShapeFuncAttrs][152]) /* ty=() */;
  let %storage_0961: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][974]) /* ty=Storage[] */;
  let %tensor_0816: int64 = memory.alloc_tensor(%storage_0961, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][974]) /* ty=int64 */;
  %3863 = fn (%p0812: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0812) /* ty=int64 */
  };
  %3864 = (%shape_func_out_0152,);
  %3865 = (%tensor_0816,);
  let %v808: () = vm.invoke_tvm_op(%3863, %3864, %3865) /* ty=() */;
  let %storage_0962: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][975]) /* ty=Storage[] */;
  let %tensor_0817: int64 = memory.alloc_tensor(%storage_0962, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][975]) /* ty=int64 */;
  %3866 = fn (%p0813: int64, Primitive=1) -> int64 {
    multiply(%p0813, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3867 = (%tensor_0816,);
  %3868 = (%tensor_0817,);
  let %v809: () = vm.invoke_tvm_op(%3866, %3867, %3868) /* ty=() */;
  let %storage_0963: Storage[] = memory.alloc_storage(%tensor_0817, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][976]) /* ty=Storage[] */;
  let %out_0145: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0963, 0 /* ty=int64 */, %shape_func_out_0152, meta[relay.attrs.AllocTensorAttrs][976]) /* ty=Tensor[(?, ?), float32] */;
  %3869 = (%x653, %x655, %x657, meta[relay.Constant][821] /* ty=Tensor[(2), int32] */);
  %3870 = (%out_0145,);
  let %v810: () = vm.invoke_tvm_op(%3860, %3869, %3870) /* ty=() */;
  let %x658: Tensor[(?, ?), float32] = %out_0145;
  let %in_shape_0143: Tensor[(2), int64] = vm.shape_of(%x658, meta[relay.attrs.ShapeOfAttrs][188]) /* ty=Tensor[(2), int64] */;
  let %in_shape_196: Tensor[(2), int64] = vm.shape_of(%x632, meta[relay.attrs.ShapeOfAttrs][189]) /* ty=Tensor[(2), int64] */;
  let %storage_0964: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][977]) /* ty=Storage[] */;
  let %tensor_0818: Tensor[(2), int64] = memory.alloc_tensor(%storage_0964, 0 /* ty=int64 */, meta[relay.Constant][823] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][977]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0153: Tensor[(2), int64] = %tensor_0818;
  %3877 = fn (%p0814: Tensor[(?, ?), float32], %p1372: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(?, ?), float32] {
    %3871 = full_like(%p0814, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
    %3872 = (%3871,);
    %3873 = concatenate(%3872) /* ty=Tensor[(?, ?), float32] */;
    %3874 = (%p1372,);
    %3875 = concatenate(%3874) /* ty=Tensor[(?, 4), float32] */;
    %3876 = (%3873, %3875);
    concatenate(%3876, axis=1) /* ty=Tensor[(?, ?), float32] */
  };
  %3878 = (%in_shape_0143, %in_shape_196);
  %3879 = (%shape_func_out_0153,);
  let %shape_func153: () = vm.shape_func(%3877, %3878, %3879, meta[relay.attrs.ShapeFuncAttrs][153]) /* ty=() */;
  let %storage_0965: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][978]) /* ty=Storage[] */;
  let %tensor_0819: int64 = memory.alloc_tensor(%storage_0965, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][978]) /* ty=int64 */;
  %3880 = fn (%p0815: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0815) /* ty=int64 */
  };
  %3881 = (%shape_func_out_0153,);
  %3882 = (%tensor_0819,);
  let %v811: () = vm.invoke_tvm_op(%3880, %3881, %3882) /* ty=() */;
  let %storage_0966: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][979]) /* ty=Storage[] */;
  let %tensor_0820: int64 = memory.alloc_tensor(%storage_0966, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][979]) /* ty=int64 */;
  %3883 = fn (%p0816: int64, Primitive=1) -> int64 {
    multiply(%p0816, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3884 = (%tensor_0819,);
  %3885 = (%tensor_0820,);
  let %v812: () = vm.invoke_tvm_op(%3883, %3884, %3885) /* ty=() */;
  let %storage_0967: Storage[] = memory.alloc_storage(%tensor_0820, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][980]) /* ty=Storage[] */;
  let %out_0146: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0967, 0 /* ty=int64 */, %shape_func_out_0153, meta[relay.attrs.AllocTensorAttrs][980]) /* ty=Tensor[(?, ?), float32] */;
  %3886 = (%x658, %x632);
  %3887 = (%out_0146,);
  let %v813: () = vm.invoke_tvm_op(%3877, %3886, %3887) /* ty=() */;
  let %x659: Tensor[(?, ?), float32] = %out_0146;
  let %in_shape_0144: Tensor[(2), int64] = vm.shape_of(%x659, meta[relay.attrs.ShapeOfAttrs][190]) /* ty=Tensor[(2), int64] */;
  let %in_shape_197: Tensor[(1), int64] = vm.shape_of(%x650, meta[relay.attrs.ShapeOfAttrs][191]) /* ty=Tensor[(1), int64] */;
  let %storage_0968: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][981]) /* ty=Storage[] */;
  let %tensor_0821: Tensor[(2), int64] = memory.alloc_tensor(%storage_0968, 0 /* ty=int64 */, meta[relay.Constant][824] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][981]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0154: Tensor[(2), int64] = %tensor_0821;
  %3890 = fn (%p0817: Tensor[(?, ?), float32], %p1373: Tensor[(?), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    %3888 = cast(%p1373, dtype="int64") /* ty=Tensor[(?), int64] */;
    %3889 = (%p0817, %3888);
    adv_index(%3889) /* ty=Tensor[(?, ?), float32] */
  };
  %3891 = (%in_shape_0144, %in_shape_197);
  %3892 = (%shape_func_out_0154,);
  let %shape_func154: () = vm.shape_func(%3890, %3891, %3892, meta[relay.attrs.ShapeFuncAttrs][154]) /* ty=() */;
  let %storage_0969: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][982]) /* ty=Storage[] */;
  let %tensor_0822: int64 = memory.alloc_tensor(%storage_0969, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][982]) /* ty=int64 */;
  %3893 = fn (%p0818: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0818) /* ty=int64 */
  };
  %3894 = (%shape_func_out_0154,);
  %3895 = (%tensor_0822,);
  let %v814: () = vm.invoke_tvm_op(%3893, %3894, %3895) /* ty=() */;
  let %storage_0970: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][983]) /* ty=Storage[] */;
  let %tensor_0823: int64 = memory.alloc_tensor(%storage_0970, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][983]) /* ty=int64 */;
  %3896 = fn (%p0819: int64, Primitive=1) -> int64 {
    multiply(%p0819, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3897 = (%tensor_0822,);
  %3898 = (%tensor_0823,);
  let %v815: () = vm.invoke_tvm_op(%3896, %3897, %3898) /* ty=() */;
  let %storage_0971: Storage[] = memory.alloc_storage(%tensor_0823, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][984]) /* ty=Storage[] */;
  let %out_0147: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0971, 0 /* ty=int64 */, %shape_func_out_0154, meta[relay.attrs.AllocTensorAttrs][984]) /* ty=Tensor[(?, ?), float32] */;
  %3899 = (%x659, %x650);
  %3900 = (%out_0147,);
  let %v816: () = vm.invoke_tvm_op(%3890, %3899, %3900) /* ty=() */;
  let %x660: Tensor[(?, ?), float32] = %out_0147;
  let %in_shape_198: Tensor[(2), int64] = vm.shape_of(%x660, meta[relay.attrs.ShapeOfAttrs][192]) /* ty=Tensor[(2), int64] */;
  let %storage_0972: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][985]) /* ty=Storage[] */;
  let %tensor_0824: Tensor[(4), int64] = memory.alloc_tensor(%storage_0972, 0 /* ty=int64 */, meta[relay.Constant][825] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][985]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0155: Tensor[(4), int64] = %tensor_0824;
  %3901 = fn (%p0820: Tensor[(1, 256, 200, 200), float32], %p1374: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    vision.roi_align(%p0820, %p1374, meta[relay.attrs.ROIAlignAttrs][4]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %3902 = (meta[relay.Constant][826] /* ty=Tensor[(4), int64] */, %in_shape_198);
  %3903 = (%shape_func_out_0155,);
  let %shape_func155: () = vm.shape_func(%3901, %3902, %3903, meta[relay.attrs.ShapeFuncAttrs][155]) /* ty=() */;
  let %storage_0973: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][986]) /* ty=Storage[] */;
  let %tensor_0825: int64 = memory.alloc_tensor(%storage_0973, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][986]) /* ty=int64 */;
  %3904 = fn (%p0821: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0821) /* ty=int64 */
  };
  %3905 = (%shape_func_out_0155,);
  %3906 = (%tensor_0825,);
  let %v817: () = vm.invoke_tvm_op(%3904, %3905, %3906) /* ty=() */;
  let %storage_0974: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][987]) /* ty=Storage[] */;
  let %tensor_0826: int64 = memory.alloc_tensor(%storage_0974, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][987]) /* ty=int64 */;
  %3907 = fn (%p0822: int64, Primitive=1) -> int64 {
    multiply(%p0822, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3908 = (%tensor_0825,);
  %3909 = (%tensor_0826,);
  let %v818: () = vm.invoke_tvm_op(%3907, %3908, %3909) /* ty=() */;
  let %storage_0975: Storage[] = memory.alloc_storage(%tensor_0826, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][988]) /* ty=Storage[] */;
  let %out_0148: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_0975, 0 /* ty=int64 */, %shape_func_out_0155, meta[relay.attrs.AllocTensorAttrs][988]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %3910 = (%x368, %x660);
  %3911 = (%out_0148,);
  let %v819: () = vm.invoke_tvm_op(%3901, %3910, %3911) /* ty=() */;
  let %x661: Tensor[(?, 256, 14, 14), float32] = %out_0148;
  let %in_shape_0145: Tensor[(4), int64] = vm.shape_of(%x647, meta[relay.attrs.ShapeOfAttrs][193]) /* ty=Tensor[(4), int64] */;
  let %in_shape_199: Tensor[(4), int64] = vm.shape_of(%x651, meta[relay.attrs.ShapeOfAttrs][194]) /* ty=Tensor[(4), int64] */;
  let %in_shape_270: Tensor[(4), int64] = vm.shape_of(%x661, meta[relay.attrs.ShapeOfAttrs][195]) /* ty=Tensor[(4), int64] */;
  let %storage_0976: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][989]) /* ty=Storage[] */;
  let %tensor_0827: Tensor[(4), int64] = memory.alloc_tensor(%storage_0976, 0 /* ty=int64 */, meta[relay.Constant][827] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][989]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0156: Tensor[(4), int64] = %tensor_0827;
  %3912 = fn (%p0823: Tensor[(?, 256, 14, 14), float32], %p1375: Tensor[(?, 256, 14, 14), int32], %p2219: Tensor[(?, 256, 14, 14), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    scatter(%p0823, %p1375, %p2219, meta[relay.attrs.ScatterAttrs][10]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %3913 = (%in_shape_0145, %in_shape_199, %in_shape_270);
  %3914 = (%shape_func_out_0156,);
  let %shape_func156: () = vm.shape_func(%3912, %3913, %3914, meta[relay.attrs.ShapeFuncAttrs][156]) /* ty=() */;
  let %storage_0977: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][990]) /* ty=Storage[] */;
  let %tensor_0828: int64 = memory.alloc_tensor(%storage_0977, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][990]) /* ty=int64 */;
  %3915 = fn (%p0824: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0824) /* ty=int64 */
  };
  %3916 = (%shape_func_out_0156,);
  %3917 = (%tensor_0828,);
  let %v820: () = vm.invoke_tvm_op(%3915, %3916, %3917) /* ty=() */;
  let %storage_0978: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][991]) /* ty=Storage[] */;
  let %tensor_0829: int64 = memory.alloc_tensor(%storage_0978, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][991]) /* ty=int64 */;
  %3918 = fn (%p0825: int64, Primitive=1) -> int64 {
    multiply(%p0825, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3919 = (%tensor_0828,);
  %3920 = (%tensor_0829,);
  let %v821: () = vm.invoke_tvm_op(%3918, %3919, %3920) /* ty=() */;
  let %storage_0979: Storage[] = memory.alloc_storage(%tensor_0829, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][992]) /* ty=Storage[] */;
  let %out_0149: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_0979, 0 /* ty=int64 */, %shape_func_out_0156, meta[relay.attrs.AllocTensorAttrs][992]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %3921 = (%x647, %x651, %x661);
  %3922 = (%out_0149,);
  let %v822: () = vm.invoke_tvm_op(%3912, %3921, %3922) /* ty=() */;
  let %x662: Tensor[(?, 256, 14, 14), float32] = %out_0149;
  let %in_shape_0146: Tensor[(1), int64] = vm.shape_of(%x643, meta[relay.attrs.ShapeOfAttrs][196]) /* ty=Tensor[(1), int64] */;
  let %storage_0980: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][993]) /* ty=Storage[] */;
  let %tensor_0830: Tensor[(1), int64] = memory.alloc_tensor(%storage_0980, 0 /* ty=int64 */, meta[relay.Constant][828] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][993]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0157: Tensor[(1), int64] = %tensor_0830;
  %3923 = fn (%p0826: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0826, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %3924 = (%in_shape_0146,);
  %3925 = (%shape_func_out_0157,);
  let %shape_func157: () = vm.shape_func(%3923, %3924, %3925, meta[relay.attrs.ShapeFuncAttrs][157]) /* ty=() */;
  let %storage_0981: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][994]) /* ty=Storage[] */;
  let %tensor_0831: int64 = memory.alloc_tensor(%storage_0981, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][994]) /* ty=int64 */;
  %3926 = fn (%p0827: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0827) /* ty=int64 */
  };
  %3927 = (%shape_func_out_0157,);
  %3928 = (%tensor_0831,);
  let %v823: () = vm.invoke_tvm_op(%3926, %3927, %3928) /* ty=() */;
  let %storage_0982: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][995]) /* ty=Storage[] */;
  let %tensor_0832: int64 = memory.alloc_tensor(%storage_0982, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][995]) /* ty=int64 */;
  %3929 = fn (%p0828: int64, Primitive=1) -> int64 {
    multiply(%p0828, 1 /* ty=int64 */) /* ty=int64 */
  };
  %3930 = (%tensor_0831,);
  %3931 = (%tensor_0832,);
  let %v824: () = vm.invoke_tvm_op(%3929, %3930, %3931) /* ty=() */;
  let %storage_0983: Storage[] = memory.alloc_storage(%tensor_0832, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][996]) /* ty=Storage[] */;
  let %out_0150: Tensor[(?), bool] = memory.alloc_tensor(%storage_0983, 0 /* ty=int64 */, %shape_func_out_0157, meta[relay.attrs.AllocTensorAttrs][996]) /* ty=Tensor[(?), bool] */;
  %3932 = (%x643,);
  %3933 = (%out_0150,);
  let %v825: () = vm.invoke_tvm_op(%3923, %3932, %3933) /* ty=() */;
  let %x663: Tensor[(?), bool] = %out_0150;
  let %in_shape_0147: Tensor[(?), bool] = device_copy(%x663, meta[relay.attrs.DeviceCopyAttrs][187]) /* ty=Tensor[(?), bool] */;
  let %storage_0984: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][997]) /* ty=Storage[] */;
  let %tensor_0833: Tensor[(2), int64] = memory.alloc_tensor(%storage_0984, 0 /* ty=int64 */, meta[relay.Constant][829] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][997]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0158: Tensor[(2), int64] = %tensor_0833;
  %3934 = fn (%p0829: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0829) /* ty=Tensor[(?, 1), int32] */
  };
  %3935 = (%in_shape_0147,);
  %3936 = (%shape_func_out_0158,);
  let %shape_func158: () = vm.shape_func(%3934, %3935, %3936, meta[relay.attrs.ShapeFuncAttrs][158]) /* ty=() */;
  let %storage_0985: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][998]) /* ty=Storage[] */;
  let %tensor_0834: int64 = memory.alloc_tensor(%storage_0985, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][998]) /* ty=int64 */;
  %3937 = fn (%p0830: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0830) /* ty=int64 */
  };
  %3938 = (%shape_func_out_0158,);
  %3939 = (%tensor_0834,);
  let %v826: () = vm.invoke_tvm_op(%3937, %3938, %3939) /* ty=() */;
  let %storage_0986: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][999]) /* ty=Storage[] */;
  let %tensor_0835: int64 = memory.alloc_tensor(%storage_0986, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][999]) /* ty=int64 */;
  %3940 = fn (%p0831: int64, Primitive=1) -> int64 {
    multiply(%p0831, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3941 = (%tensor_0834,);
  %3942 = (%tensor_0835,);
  let %v827: () = vm.invoke_tvm_op(%3940, %3941, %3942) /* ty=() */;
  let %storage_0987: Storage[] = memory.alloc_storage(%tensor_0835, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1000]) /* ty=Storage[] */;
  let %out_0151: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_0987, 0 /* ty=int64 */, %shape_func_out_0158, meta[relay.attrs.AllocTensorAttrs][1000]) /* ty=Tensor[(?, 1), int32] */;
  %3943 = (%x663,);
  %3944 = (%out_0151,);
  let %v828: () = vm.invoke_tvm_op(%3934, %3943, %3944) /* ty=() */;
  let %x664: Tensor[(?, 1), int32] = %out_0151;
  let %in_shape_0148: Tensor[(2), int64] = vm.shape_of(%x664, meta[relay.attrs.ShapeOfAttrs][197]) /* ty=Tensor[(2), int64] */;
  let %storage_0988: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1001]) /* ty=Storage[] */;
  let %tensor_0836: Tensor[(1), int64] = memory.alloc_tensor(%storage_0988, 0 /* ty=int64 */, meta[relay.Constant][830] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1001]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0159: Tensor[(1), int64] = %tensor_0836;
  %3947 = fn (%p0832: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %3945 = split(%p0832, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %3946 = %3945.0;
    squeeze(%3946, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %3948 = (%in_shape_0148,);
  %3949 = (%shape_func_out_0159,);
  let %shape_func159: () = vm.shape_func(%3947, %3948, %3949, meta[relay.attrs.ShapeFuncAttrs][159]) /* ty=() */;
  let %storage_0989: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1002]) /* ty=Storage[] */;
  let %tensor_0837: int64 = memory.alloc_tensor(%storage_0989, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1002]) /* ty=int64 */;
  %3950 = fn (%p0833: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0833) /* ty=int64 */
  };
  %3951 = (%shape_func_out_0159,);
  %3952 = (%tensor_0837,);
  let %v829: () = vm.invoke_tvm_op(%3950, %3951, %3952) /* ty=() */;
  let %storage_0990: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1003]) /* ty=Storage[] */;
  let %tensor_0838: int64 = memory.alloc_tensor(%storage_0990, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1003]) /* ty=int64 */;
  %3953 = fn (%p0834: int64, Primitive=1) -> int64 {
    multiply(%p0834, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3954 = (%tensor_0837,);
  %3955 = (%tensor_0838,);
  let %v830: () = vm.invoke_tvm_op(%3953, %3954, %3955) /* ty=() */;
  let %storage_0991: Storage[] = memory.alloc_storage(%tensor_0838, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1004]) /* ty=Storage[] */;
  let %out_0152: Tensor[(?), int32] = memory.alloc_tensor(%storage_0991, 0 /* ty=int64 */, %shape_func_out_0159, meta[relay.attrs.AllocTensorAttrs][1004]) /* ty=Tensor[(?), int32] */;
  %3956 = (%x664,);
  %3957 = (%out_0152,);
  let %v831: () = vm.invoke_tvm_op(%3947, %3956, %3957) /* ty=() */;
  let %x665: Tensor[(?), int32] = %out_0152;
  let %in_shape_0149: Tensor[(1), int64] = vm.shape_of(%x665, meta[relay.attrs.ShapeOfAttrs][198]) /* ty=Tensor[(1), int64] */;
  let %storage_0992: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1005]) /* ty=Storage[] */;
  let %tensor_0839: Tensor[(4), int64] = memory.alloc_tensor(%storage_0992, 0 /* ty=int64 */, meta[relay.Constant][831] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1005]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0160: Tensor[(4), int64] = %tensor_0839;
  %3961 = fn (%p0835: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 14, 14), int32] {
    %3958 = reshape(%p0835, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %3959 = repeat(%3958, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %3960 = repeat(%3959, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
    repeat(%3960, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */
  };
  %3962 = (%in_shape_0149,);
  %3963 = (%shape_func_out_0160,);
  let %shape_func160: () = vm.shape_func(%3961, %3962, %3963, meta[relay.attrs.ShapeFuncAttrs][160]) /* ty=() */;
  let %storage_0993: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1006]) /* ty=Storage[] */;
  let %tensor_0840: int64 = memory.alloc_tensor(%storage_0993, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1006]) /* ty=int64 */;
  %3964 = fn (%p0836: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0836) /* ty=int64 */
  };
  %3965 = (%shape_func_out_0160,);
  %3966 = (%tensor_0840,);
  let %v832: () = vm.invoke_tvm_op(%3964, %3965, %3966) /* ty=() */;
  let %storage_0994: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1007]) /* ty=Storage[] */;
  let %tensor_0841: int64 = memory.alloc_tensor(%storage_0994, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1007]) /* ty=int64 */;
  %3967 = fn (%p0837: int64, Primitive=1) -> int64 {
    multiply(%p0837, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3968 = (%tensor_0840,);
  %3969 = (%tensor_0841,);
  let %v833: () = vm.invoke_tvm_op(%3967, %3968, %3969) /* ty=() */;
  let %storage_0995: Storage[] = memory.alloc_storage(%tensor_0841, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1008]) /* ty=Storage[] */;
  let %out_0153: Tensor[(?, 256, 14, 14), int32] = memory.alloc_tensor(%storage_0995, 0 /* ty=int64 */, %shape_func_out_0160, meta[relay.attrs.AllocTensorAttrs][1008]) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %3970 = (%x665,);
  %3971 = (%out_0153,);
  let %v834: () = vm.invoke_tvm_op(%3961, %3970, %3971) /* ty=() */;
  let %x666: Tensor[(?, 256, 14, 14), int32] = %out_0153;
  let %in_shape_0150: Tensor[(2), int64] = vm.shape_of(%x659, meta[relay.attrs.ShapeOfAttrs][199]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1100: Tensor[(1), int64] = vm.shape_of(%x665, meta[relay.attrs.ShapeOfAttrs][200]) /* ty=Tensor[(1), int64] */;
  let %storage_0996: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1009]) /* ty=Storage[] */;
  let %tensor_0842: Tensor[(2), int64] = memory.alloc_tensor(%storage_0996, 0 /* ty=int64 */, meta[relay.Constant][832] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1009]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0161: Tensor[(2), int64] = %tensor_0842;
  %3974 = fn (%p0838: Tensor[(?, ?), float32], %p1376: Tensor[(?), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    %3972 = cast(%p1376, dtype="int64") /* ty=Tensor[(?), int64] */;
    %3973 = (%p0838, %3972);
    adv_index(%3973) /* ty=Tensor[(?, ?), float32] */
  };
  %3975 = (%in_shape_0150, %in_shape_1100);
  %3976 = (%shape_func_out_0161,);
  let %shape_func161: () = vm.shape_func(%3974, %3975, %3976, meta[relay.attrs.ShapeFuncAttrs][161]) /* ty=() */;
  let %storage_0997: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1010]) /* ty=Storage[] */;
  let %tensor_0843: int64 = memory.alloc_tensor(%storage_0997, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1010]) /* ty=int64 */;
  %3977 = fn (%p0839: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0839) /* ty=int64 */
  };
  %3978 = (%shape_func_out_0161,);
  %3979 = (%tensor_0843,);
  let %v835: () = vm.invoke_tvm_op(%3977, %3978, %3979) /* ty=() */;
  let %storage_0998: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1011]) /* ty=Storage[] */;
  let %tensor_0844: int64 = memory.alloc_tensor(%storage_0998, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1011]) /* ty=int64 */;
  %3980 = fn (%p0840: int64, Primitive=1) -> int64 {
    multiply(%p0840, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3981 = (%tensor_0843,);
  %3982 = (%tensor_0844,);
  let %v836: () = vm.invoke_tvm_op(%3980, %3981, %3982) /* ty=() */;
  let %storage_0999: Storage[] = memory.alloc_storage(%tensor_0844, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1012]) /* ty=Storage[] */;
  let %out_0154: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_0999, 0 /* ty=int64 */, %shape_func_out_0161, meta[relay.attrs.AllocTensorAttrs][1012]) /* ty=Tensor[(?, ?), float32] */;
  %3983 = (%x659, %x665);
  %3984 = (%out_0154,);
  let %v837: () = vm.invoke_tvm_op(%3974, %3983, %3984) /* ty=() */;
  let %x667: Tensor[(?, ?), float32] = %out_0154;
  let %in_shape_1101: Tensor[(2), int64] = vm.shape_of(%x667, meta[relay.attrs.ShapeOfAttrs][201]) /* ty=Tensor[(2), int64] */;
  let %storage_01000: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1013]) /* ty=Storage[] */;
  let %tensor_0845: Tensor[(4), int64] = memory.alloc_tensor(%storage_01000, 0 /* ty=int64 */, meta[relay.Constant][833] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1013]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0162: Tensor[(4), int64] = %tensor_0845;
  %3985 = fn (%p0841: Tensor[(1, 256, 100, 100), float32], %p1377: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    vision.roi_align(%p0841, %p1377, meta[relay.attrs.ROIAlignAttrs][5]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %3986 = (meta[relay.Constant][834] /* ty=Tensor[(4), int64] */, %in_shape_1101);
  %3987 = (%shape_func_out_0162,);
  let %shape_func162: () = vm.shape_func(%3985, %3986, %3987, meta[relay.attrs.ShapeFuncAttrs][162]) /* ty=() */;
  let %storage_01001: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1014]) /* ty=Storage[] */;
  let %tensor_0846: int64 = memory.alloc_tensor(%storage_01001, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1014]) /* ty=int64 */;
  %3988 = fn (%p0842: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0842) /* ty=int64 */
  };
  %3989 = (%shape_func_out_0162,);
  %3990 = (%tensor_0846,);
  let %v838: () = vm.invoke_tvm_op(%3988, %3989, %3990) /* ty=() */;
  let %storage_01002: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1015]) /* ty=Storage[] */;
  let %tensor_0847: int64 = memory.alloc_tensor(%storage_01002, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1015]) /* ty=int64 */;
  %3991 = fn (%p0843: int64, Primitive=1) -> int64 {
    multiply(%p0843, 4 /* ty=int64 */) /* ty=int64 */
  };
  %3992 = (%tensor_0846,);
  %3993 = (%tensor_0847,);
  let %v839: () = vm.invoke_tvm_op(%3991, %3992, %3993) /* ty=() */;
  let %storage_01003: Storage[] = memory.alloc_storage(%tensor_0847, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1016]) /* ty=Storage[] */;
  let %out_0155: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_01003, 0 /* ty=int64 */, %shape_func_out_0162, meta[relay.attrs.AllocTensorAttrs][1016]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %3994 = (%x371, %x667);
  %3995 = (%out_0155,);
  let %v840: () = vm.invoke_tvm_op(%3985, %3994, %3995) /* ty=() */;
  let %x668: Tensor[(?, 256, 14, 14), float32] = %out_0155;
  let %in_shape_0151: Tensor[(4), int64] = vm.shape_of(%x662, meta[relay.attrs.ShapeOfAttrs][202]) /* ty=Tensor[(4), int64] */;
  let %in_shape_1102: Tensor[(4), int64] = vm.shape_of(%x666, meta[relay.attrs.ShapeOfAttrs][203]) /* ty=Tensor[(4), int64] */;
  let %in_shape_271: Tensor[(4), int64] = vm.shape_of(%x668, meta[relay.attrs.ShapeOfAttrs][204]) /* ty=Tensor[(4), int64] */;
  let %storage_01004: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1017]) /* ty=Storage[] */;
  let %tensor_0848: Tensor[(4), int64] = memory.alloc_tensor(%storage_01004, 0 /* ty=int64 */, meta[relay.Constant][835] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1017]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0163: Tensor[(4), int64] = %tensor_0848;
  %3996 = fn (%p0844: Tensor[(?, 256, 14, 14), float32], %p1378: Tensor[(?, 256, 14, 14), int32], %p2220: Tensor[(?, 256, 14, 14), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    scatter(%p0844, %p1378, %p2220, meta[relay.attrs.ScatterAttrs][11]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %3997 = (%in_shape_0151, %in_shape_1102, %in_shape_271);
  %3998 = (%shape_func_out_0163,);
  let %shape_func163: () = vm.shape_func(%3996, %3997, %3998, meta[relay.attrs.ShapeFuncAttrs][163]) /* ty=() */;
  let %storage_01005: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1018]) /* ty=Storage[] */;
  let %tensor_0849: int64 = memory.alloc_tensor(%storage_01005, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1018]) /* ty=int64 */;
  %3999 = fn (%p0845: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0845) /* ty=int64 */
  };
  %4000 = (%shape_func_out_0163,);
  %4001 = (%tensor_0849,);
  let %v841: () = vm.invoke_tvm_op(%3999, %4000, %4001) /* ty=() */;
  let %storage_01006: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1019]) /* ty=Storage[] */;
  let %tensor_0850: int64 = memory.alloc_tensor(%storage_01006, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1019]) /* ty=int64 */;
  %4002 = fn (%p0846: int64, Primitive=1) -> int64 {
    multiply(%p0846, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4003 = (%tensor_0849,);
  %4004 = (%tensor_0850,);
  let %v842: () = vm.invoke_tvm_op(%4002, %4003, %4004) /* ty=() */;
  let %storage_01007: Storage[] = memory.alloc_storage(%tensor_0850, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1020]) /* ty=Storage[] */;
  let %out_0156: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_01007, 0 /* ty=int64 */, %shape_func_out_0163, meta[relay.attrs.AllocTensorAttrs][1020]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %4005 = (%x662, %x666, %x668);
  %4006 = (%out_0156,);
  let %v843: () = vm.invoke_tvm_op(%3996, %4005, %4006) /* ty=() */;
  let %x669: Tensor[(?, 256, 14, 14), float32] = %out_0156;
  let %in_shape_0152: Tensor[(1), int64] = vm.shape_of(%x643, meta[relay.attrs.ShapeOfAttrs][205]) /* ty=Tensor[(1), int64] */;
  let %storage_01008: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1021]) /* ty=Storage[] */;
  let %tensor_0851: Tensor[(1), int64] = memory.alloc_tensor(%storage_01008, 0 /* ty=int64 */, meta[relay.Constant][836] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1021]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0164: Tensor[(1), int64] = %tensor_0851;
  %4007 = fn (%p0847: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0847, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %4008 = (%in_shape_0152,);
  %4009 = (%shape_func_out_0164,);
  let %shape_func164: () = vm.shape_func(%4007, %4008, %4009, meta[relay.attrs.ShapeFuncAttrs][164]) /* ty=() */;
  let %storage_01009: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1022]) /* ty=Storage[] */;
  let %tensor_0852: int64 = memory.alloc_tensor(%storage_01009, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1022]) /* ty=int64 */;
  %4010 = fn (%p0848: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0848) /* ty=int64 */
  };
  %4011 = (%shape_func_out_0164,);
  %4012 = (%tensor_0852,);
  let %v844: () = vm.invoke_tvm_op(%4010, %4011, %4012) /* ty=() */;
  let %storage_01010: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1023]) /* ty=Storage[] */;
  let %tensor_0853: int64 = memory.alloc_tensor(%storage_01010, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1023]) /* ty=int64 */;
  %4013 = fn (%p0849: int64, Primitive=1) -> int64 {
    multiply(%p0849, 1 /* ty=int64 */) /* ty=int64 */
  };
  %4014 = (%tensor_0852,);
  %4015 = (%tensor_0853,);
  let %v845: () = vm.invoke_tvm_op(%4013, %4014, %4015) /* ty=() */;
  let %storage_01011: Storage[] = memory.alloc_storage(%tensor_0853, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1024]) /* ty=Storage[] */;
  let %out_0157: Tensor[(?), bool] = memory.alloc_tensor(%storage_01011, 0 /* ty=int64 */, %shape_func_out_0164, meta[relay.attrs.AllocTensorAttrs][1024]) /* ty=Tensor[(?), bool] */;
  %4016 = (%x643,);
  %4017 = (%out_0157,);
  let %v846: () = vm.invoke_tvm_op(%4007, %4016, %4017) /* ty=() */;
  let %x670: Tensor[(?), bool] = %out_0157;
  let %in_shape_0153: Tensor[(?), bool] = device_copy(%x670, meta[relay.attrs.DeviceCopyAttrs][188]) /* ty=Tensor[(?), bool] */;
  let %storage_01012: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1025]) /* ty=Storage[] */;
  let %tensor_0854: Tensor[(2), int64] = memory.alloc_tensor(%storage_01012, 0 /* ty=int64 */, meta[relay.Constant][837] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1025]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0165: Tensor[(2), int64] = %tensor_0854;
  %4018 = fn (%p0850: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0850) /* ty=Tensor[(?, 1), int32] */
  };
  %4019 = (%in_shape_0153,);
  %4020 = (%shape_func_out_0165,);
  let %shape_func165: () = vm.shape_func(%4018, %4019, %4020, meta[relay.attrs.ShapeFuncAttrs][165]) /* ty=() */;
  let %storage_01013: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1026]) /* ty=Storage[] */;
  let %tensor_0855: int64 = memory.alloc_tensor(%storage_01013, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1026]) /* ty=int64 */;
  %4021 = fn (%p0851: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0851) /* ty=int64 */
  };
  %4022 = (%shape_func_out_0165,);
  %4023 = (%tensor_0855,);
  let %v847: () = vm.invoke_tvm_op(%4021, %4022, %4023) /* ty=() */;
  let %storage_01014: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1027]) /* ty=Storage[] */;
  let %tensor_0856: int64 = memory.alloc_tensor(%storage_01014, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1027]) /* ty=int64 */;
  %4024 = fn (%p0852: int64, Primitive=1) -> int64 {
    multiply(%p0852, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4025 = (%tensor_0855,);
  %4026 = (%tensor_0856,);
  let %v848: () = vm.invoke_tvm_op(%4024, %4025, %4026) /* ty=() */;
  let %storage_01015: Storage[] = memory.alloc_storage(%tensor_0856, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1028]) /* ty=Storage[] */;
  let %out_0158: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_01015, 0 /* ty=int64 */, %shape_func_out_0165, meta[relay.attrs.AllocTensorAttrs][1028]) /* ty=Tensor[(?, 1), int32] */;
  %4027 = (%x670,);
  %4028 = (%out_0158,);
  let %v849: () = vm.invoke_tvm_op(%4018, %4027, %4028) /* ty=() */;
  let %x671: Tensor[(?, 1), int32] = %out_0158;
  let %in_shape_0154: Tensor[(2), int64] = vm.shape_of(%x671, meta[relay.attrs.ShapeOfAttrs][206]) /* ty=Tensor[(2), int64] */;
  let %storage_01016: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1029]) /* ty=Storage[] */;
  let %tensor_0857: Tensor[(1), int64] = memory.alloc_tensor(%storage_01016, 0 /* ty=int64 */, meta[relay.Constant][838] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1029]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0166: Tensor[(1), int64] = %tensor_0857;
  %4031 = fn (%p0853: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %4029 = split(%p0853, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %4030 = %4029.0;
    squeeze(%4030, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %4032 = (%in_shape_0154,);
  %4033 = (%shape_func_out_0166,);
  let %shape_func166: () = vm.shape_func(%4031, %4032, %4033, meta[relay.attrs.ShapeFuncAttrs][166]) /* ty=() */;
  let %storage_01017: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1030]) /* ty=Storage[] */;
  let %tensor_0858: int64 = memory.alloc_tensor(%storage_01017, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1030]) /* ty=int64 */;
  %4034 = fn (%p0854: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0854) /* ty=int64 */
  };
  %4035 = (%shape_func_out_0166,);
  %4036 = (%tensor_0858,);
  let %v850: () = vm.invoke_tvm_op(%4034, %4035, %4036) /* ty=() */;
  let %storage_01018: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1031]) /* ty=Storage[] */;
  let %tensor_0859: int64 = memory.alloc_tensor(%storage_01018, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1031]) /* ty=int64 */;
  %4037 = fn (%p0855: int64, Primitive=1) -> int64 {
    multiply(%p0855, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4038 = (%tensor_0858,);
  %4039 = (%tensor_0859,);
  let %v851: () = vm.invoke_tvm_op(%4037, %4038, %4039) /* ty=() */;
  let %storage_01019: Storage[] = memory.alloc_storage(%tensor_0859, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1032]) /* ty=Storage[] */;
  let %out_0159: Tensor[(?), int32] = memory.alloc_tensor(%storage_01019, 0 /* ty=int64 */, %shape_func_out_0166, meta[relay.attrs.AllocTensorAttrs][1032]) /* ty=Tensor[(?), int32] */;
  %4040 = (%x671,);
  %4041 = (%out_0159,);
  let %v852: () = vm.invoke_tvm_op(%4031, %4040, %4041) /* ty=() */;
  let %x672: Tensor[(?), int32] = %out_0159;
  let %in_shape_0155: Tensor[(1), int64] = vm.shape_of(%x672, meta[relay.attrs.ShapeOfAttrs][207]) /* ty=Tensor[(1), int64] */;
  let %storage_01020: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1033]) /* ty=Storage[] */;
  let %tensor_0860: Tensor[(4), int64] = memory.alloc_tensor(%storage_01020, 0 /* ty=int64 */, meta[relay.Constant][839] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1033]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0167: Tensor[(4), int64] = %tensor_0860;
  %4045 = fn (%p0856: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 14, 14), int32] {
    %4042 = reshape(%p0856, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %4043 = repeat(%4042, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %4044 = repeat(%4043, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
    repeat(%4044, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */
  };
  %4046 = (%in_shape_0155,);
  %4047 = (%shape_func_out_0167,);
  let %shape_func167: () = vm.shape_func(%4045, %4046, %4047, meta[relay.attrs.ShapeFuncAttrs][167]) /* ty=() */;
  let %storage_01021: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1034]) /* ty=Storage[] */;
  let %tensor_0861: int64 = memory.alloc_tensor(%storage_01021, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1034]) /* ty=int64 */;
  %4048 = fn (%p0857: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0857) /* ty=int64 */
  };
  %4049 = (%shape_func_out_0167,);
  %4050 = (%tensor_0861,);
  let %v853: () = vm.invoke_tvm_op(%4048, %4049, %4050) /* ty=() */;
  let %storage_01022: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1035]) /* ty=Storage[] */;
  let %tensor_0862: int64 = memory.alloc_tensor(%storage_01022, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1035]) /* ty=int64 */;
  %4051 = fn (%p0858: int64, Primitive=1) -> int64 {
    multiply(%p0858, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4052 = (%tensor_0861,);
  %4053 = (%tensor_0862,);
  let %v854: () = vm.invoke_tvm_op(%4051, %4052, %4053) /* ty=() */;
  let %storage_01023: Storage[] = memory.alloc_storage(%tensor_0862, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1036]) /* ty=Storage[] */;
  let %out_0160: Tensor[(?, 256, 14, 14), int32] = memory.alloc_tensor(%storage_01023, 0 /* ty=int64 */, %shape_func_out_0167, meta[relay.attrs.AllocTensorAttrs][1036]) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %4054 = (%x672,);
  %4055 = (%out_0160,);
  let %v855: () = vm.invoke_tvm_op(%4045, %4054, %4055) /* ty=() */;
  let %x673: Tensor[(?, 256, 14, 14), int32] = %out_0160;
  let %in_shape_0156: Tensor[(2), int64] = vm.shape_of(%x659, meta[relay.attrs.ShapeOfAttrs][208]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1103: Tensor[(1), int64] = vm.shape_of(%x672, meta[relay.attrs.ShapeOfAttrs][209]) /* ty=Tensor[(1), int64] */;
  let %storage_01024: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1037]) /* ty=Storage[] */;
  let %tensor_0863: Tensor[(2), int64] = memory.alloc_tensor(%storage_01024, 0 /* ty=int64 */, meta[relay.Constant][840] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1037]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0168: Tensor[(2), int64] = %tensor_0863;
  %4058 = fn (%p0859: Tensor[(?, ?), float32], %p1379: Tensor[(?), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    %4056 = cast(%p1379, dtype="int64") /* ty=Tensor[(?), int64] */;
    %4057 = (%p0859, %4056);
    adv_index(%4057) /* ty=Tensor[(?, ?), float32] */
  };
  %4059 = (%in_shape_0156, %in_shape_1103);
  %4060 = (%shape_func_out_0168,);
  let %shape_func168: () = vm.shape_func(%4058, %4059, %4060, meta[relay.attrs.ShapeFuncAttrs][168]) /* ty=() */;
  let %storage_01025: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1038]) /* ty=Storage[] */;
  let %tensor_0864: int64 = memory.alloc_tensor(%storage_01025, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1038]) /* ty=int64 */;
  %4061 = fn (%p0860: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0860) /* ty=int64 */
  };
  %4062 = (%shape_func_out_0168,);
  %4063 = (%tensor_0864,);
  let %v856: () = vm.invoke_tvm_op(%4061, %4062, %4063) /* ty=() */;
  let %storage_01026: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1039]) /* ty=Storage[] */;
  let %tensor_0865: int64 = memory.alloc_tensor(%storage_01026, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1039]) /* ty=int64 */;
  %4064 = fn (%p0861: int64, Primitive=1) -> int64 {
    multiply(%p0861, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4065 = (%tensor_0864,);
  %4066 = (%tensor_0865,);
  let %v857: () = vm.invoke_tvm_op(%4064, %4065, %4066) /* ty=() */;
  let %storage_01027: Storage[] = memory.alloc_storage(%tensor_0865, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1040]) /* ty=Storage[] */;
  let %out_0161: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01027, 0 /* ty=int64 */, %shape_func_out_0168, meta[relay.attrs.AllocTensorAttrs][1040]) /* ty=Tensor[(?, ?), float32] */;
  %4067 = (%x659, %x672);
  %4068 = (%out_0161,);
  let %v858: () = vm.invoke_tvm_op(%4058, %4067, %4068) /* ty=() */;
  let %x674: Tensor[(?, ?), float32] = %out_0161;
  let %in_shape_1104: Tensor[(2), int64] = vm.shape_of(%x674, meta[relay.attrs.ShapeOfAttrs][210]) /* ty=Tensor[(2), int64] */;
  let %storage_01028: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1041]) /* ty=Storage[] */;
  let %tensor_0866: Tensor[(4), int64] = memory.alloc_tensor(%storage_01028, 0 /* ty=int64 */, meta[relay.Constant][841] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1041]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0169: Tensor[(4), int64] = %tensor_0866;
  %4069 = fn (%p0862: Tensor[(1, 256, 50, 50), float32], %p1380: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    vision.roi_align(%p0862, %p1380, meta[relay.attrs.ROIAlignAttrs][6]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %4070 = (meta[relay.Constant][842] /* ty=Tensor[(4), int64] */, %in_shape_1104);
  %4071 = (%shape_func_out_0169,);
  let %shape_func169: () = vm.shape_func(%4069, %4070, %4071, meta[relay.attrs.ShapeFuncAttrs][169]) /* ty=() */;
  let %storage_01029: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1042]) /* ty=Storage[] */;
  let %tensor_0867: int64 = memory.alloc_tensor(%storage_01029, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1042]) /* ty=int64 */;
  %4072 = fn (%p0863: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0863) /* ty=int64 */
  };
  %4073 = (%shape_func_out_0169,);
  %4074 = (%tensor_0867,);
  let %v859: () = vm.invoke_tvm_op(%4072, %4073, %4074) /* ty=() */;
  let %storage_01030: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1043]) /* ty=Storage[] */;
  let %tensor_0868: int64 = memory.alloc_tensor(%storage_01030, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1043]) /* ty=int64 */;
  %4075 = fn (%p0864: int64, Primitive=1) -> int64 {
    multiply(%p0864, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4076 = (%tensor_0867,);
  %4077 = (%tensor_0868,);
  let %v860: () = vm.invoke_tvm_op(%4075, %4076, %4077) /* ty=() */;
  let %storage_01031: Storage[] = memory.alloc_storage(%tensor_0868, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1044]) /* ty=Storage[] */;
  let %out_0162: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_01031, 0 /* ty=int64 */, %shape_func_out_0169, meta[relay.attrs.AllocTensorAttrs][1044]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %4078 = (%x374, %x674);
  %4079 = (%out_0162,);
  let %v861: () = vm.invoke_tvm_op(%4069, %4078, %4079) /* ty=() */;
  let %x675: Tensor[(?, 256, 14, 14), float32] = %out_0162;
  let %in_shape_0157: Tensor[(4), int64] = vm.shape_of(%x669, meta[relay.attrs.ShapeOfAttrs][211]) /* ty=Tensor[(4), int64] */;
  let %in_shape_1105: Tensor[(4), int64] = vm.shape_of(%x673, meta[relay.attrs.ShapeOfAttrs][212]) /* ty=Tensor[(4), int64] */;
  let %in_shape_272: Tensor[(4), int64] = vm.shape_of(%x675, meta[relay.attrs.ShapeOfAttrs][213]) /* ty=Tensor[(4), int64] */;
  let %storage_01032: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1045]) /* ty=Storage[] */;
  let %tensor_0869: Tensor[(4), int64] = memory.alloc_tensor(%storage_01032, 0 /* ty=int64 */, meta[relay.Constant][843] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1045]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0170: Tensor[(4), int64] = %tensor_0869;
  %4080 = fn (%p0865: Tensor[(?, 256, 14, 14), float32], %p1381: Tensor[(?, 256, 14, 14), int32], %p2221: Tensor[(?, 256, 14, 14), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    scatter(%p0865, %p1381, %p2221, meta[relay.attrs.ScatterAttrs][12]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %4081 = (%in_shape_0157, %in_shape_1105, %in_shape_272);
  %4082 = (%shape_func_out_0170,);
  let %shape_func170: () = vm.shape_func(%4080, %4081, %4082, meta[relay.attrs.ShapeFuncAttrs][170]) /* ty=() */;
  let %storage_01033: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1046]) /* ty=Storage[] */;
  let %tensor_0870: int64 = memory.alloc_tensor(%storage_01033, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1046]) /* ty=int64 */;
  %4083 = fn (%p0866: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0866) /* ty=int64 */
  };
  %4084 = (%shape_func_out_0170,);
  %4085 = (%tensor_0870,);
  let %v862: () = vm.invoke_tvm_op(%4083, %4084, %4085) /* ty=() */;
  let %storage_01034: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1047]) /* ty=Storage[] */;
  let %tensor_0871: int64 = memory.alloc_tensor(%storage_01034, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1047]) /* ty=int64 */;
  %4086 = fn (%p0867: int64, Primitive=1) -> int64 {
    multiply(%p0867, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4087 = (%tensor_0870,);
  %4088 = (%tensor_0871,);
  let %v863: () = vm.invoke_tvm_op(%4086, %4087, %4088) /* ty=() */;
  let %storage_01035: Storage[] = memory.alloc_storage(%tensor_0871, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1048]) /* ty=Storage[] */;
  let %out_0163: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_01035, 0 /* ty=int64 */, %shape_func_out_0170, meta[relay.attrs.AllocTensorAttrs][1048]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %4089 = (%x669, %x673, %x675);
  %4090 = (%out_0163,);
  let %v864: () = vm.invoke_tvm_op(%4080, %4089, %4090) /* ty=() */;
  let %x676: Tensor[(?, 256, 14, 14), float32] = %out_0163;
  let %in_shape_0158: Tensor[(1), int64] = vm.shape_of(%x643, meta[relay.attrs.ShapeOfAttrs][214]) /* ty=Tensor[(1), int64] */;
  let %storage_01036: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1049]) /* ty=Storage[] */;
  let %tensor_0872: Tensor[(1), int64] = memory.alloc_tensor(%storage_01036, 0 /* ty=int64 */, meta[relay.Constant][844] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1049]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0171: Tensor[(1), int64] = %tensor_0872;
  %4091 = fn (%p0868: Tensor[(?), int64], Primitive=1) -> Tensor[(?), bool] {
    equal(%p0868, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */
  };
  %4092 = (%in_shape_0158,);
  %4093 = (%shape_func_out_0171,);
  let %shape_func171: () = vm.shape_func(%4091, %4092, %4093, meta[relay.attrs.ShapeFuncAttrs][171]) /* ty=() */;
  let %storage_01037: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1050]) /* ty=Storage[] */;
  let %tensor_0873: int64 = memory.alloc_tensor(%storage_01037, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1050]) /* ty=int64 */;
  %4094 = fn (%p0869: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0869) /* ty=int64 */
  };
  %4095 = (%shape_func_out_0171,);
  %4096 = (%tensor_0873,);
  let %v865: () = vm.invoke_tvm_op(%4094, %4095, %4096) /* ty=() */;
  let %storage_01038: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1051]) /* ty=Storage[] */;
  let %tensor_0874: int64 = memory.alloc_tensor(%storage_01038, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1051]) /* ty=int64 */;
  %4097 = fn (%p0870: int64, Primitive=1) -> int64 {
    multiply(%p0870, 1 /* ty=int64 */) /* ty=int64 */
  };
  %4098 = (%tensor_0873,);
  %4099 = (%tensor_0874,);
  let %v866: () = vm.invoke_tvm_op(%4097, %4098, %4099) /* ty=() */;
  let %storage_01039: Storage[] = memory.alloc_storage(%tensor_0874, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1052]) /* ty=Storage[] */;
  let %out_0164: Tensor[(?), bool] = memory.alloc_tensor(%storage_01039, 0 /* ty=int64 */, %shape_func_out_0171, meta[relay.attrs.AllocTensorAttrs][1052]) /* ty=Tensor[(?), bool] */;
  %4100 = (%x643,);
  %4101 = (%out_0164,);
  let %v867: () = vm.invoke_tvm_op(%4091, %4100, %4101) /* ty=() */;
  let %x677: Tensor[(?), bool] = %out_0164;
  let %in_shape_0159: Tensor[(?), bool] = device_copy(%x677, meta[relay.attrs.DeviceCopyAttrs][189]) /* ty=Tensor[(?), bool] */;
  let %storage_01040: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1053]) /* ty=Storage[] */;
  let %tensor_0875: Tensor[(2), int64] = memory.alloc_tensor(%storage_01040, 0 /* ty=int64 */, meta[relay.Constant][845] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1053]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0172: Tensor[(2), int64] = %tensor_0875;
  %4102 = fn (%p0871: Tensor[(?), bool], Primitive=1) -> Tensor[(?, 1), int32] {
    argwhere(%p0871) /* ty=Tensor[(?, 1), int32] */
  };
  %4103 = (%in_shape_0159,);
  %4104 = (%shape_func_out_0172,);
  let %shape_func172: () = vm.shape_func(%4102, %4103, %4104, meta[relay.attrs.ShapeFuncAttrs][172]) /* ty=() */;
  let %storage_01041: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1054]) /* ty=Storage[] */;
  let %tensor_0876: int64 = memory.alloc_tensor(%storage_01041, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1054]) /* ty=int64 */;
  %4105 = fn (%p0872: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0872) /* ty=int64 */
  };
  %4106 = (%shape_func_out_0172,);
  %4107 = (%tensor_0876,);
  let %v868: () = vm.invoke_tvm_op(%4105, %4106, %4107) /* ty=() */;
  let %storage_01042: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1055]) /* ty=Storage[] */;
  let %tensor_0877: int64 = memory.alloc_tensor(%storage_01042, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1055]) /* ty=int64 */;
  %4108 = fn (%p0873: int64, Primitive=1) -> int64 {
    multiply(%p0873, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4109 = (%tensor_0876,);
  %4110 = (%tensor_0877,);
  let %v869: () = vm.invoke_tvm_op(%4108, %4109, %4110) /* ty=() */;
  let %storage_01043: Storage[] = memory.alloc_storage(%tensor_0877, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1056]) /* ty=Storage[] */;
  let %out_0165: Tensor[(?, 1), int32] = memory.alloc_tensor(%storage_01043, 0 /* ty=int64 */, %shape_func_out_0172, meta[relay.attrs.AllocTensorAttrs][1056]) /* ty=Tensor[(?, 1), int32] */;
  %4111 = (%x677,);
  %4112 = (%out_0165,);
  let %v870: () = vm.invoke_tvm_op(%4102, %4111, %4112) /* ty=() */;
  let %x678: Tensor[(?, 1), int32] = %out_0165;
  let %in_shape_0160: Tensor[(2), int64] = vm.shape_of(%x678, meta[relay.attrs.ShapeOfAttrs][215]) /* ty=Tensor[(2), int64] */;
  let %storage_01044: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1057]) /* ty=Storage[] */;
  let %tensor_0878: Tensor[(1), int64] = memory.alloc_tensor(%storage_01044, 0 /* ty=int64 */, meta[relay.Constant][846] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1057]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0173: Tensor[(1), int64] = %tensor_0878;
  %4115 = fn (%p0874: Tensor[(?, 1), int32], Primitive=1) -> Tensor[(?), int32] {
    %4113 = split(%p0874, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
    %4114 = %4113.0;
    squeeze(%4114, axis=[1]) /* ty=Tensor[(?), int32] */
  };
  %4116 = (%in_shape_0160,);
  %4117 = (%shape_func_out_0173,);
  let %shape_func173: () = vm.shape_func(%4115, %4116, %4117, meta[relay.attrs.ShapeFuncAttrs][173]) /* ty=() */;
  let %storage_01045: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1058]) /* ty=Storage[] */;
  let %tensor_0879: int64 = memory.alloc_tensor(%storage_01045, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1058]) /* ty=int64 */;
  %4118 = fn (%p0875: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0875) /* ty=int64 */
  };
  %4119 = (%shape_func_out_0173,);
  %4120 = (%tensor_0879,);
  let %v871: () = vm.invoke_tvm_op(%4118, %4119, %4120) /* ty=() */;
  let %storage_01046: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1059]) /* ty=Storage[] */;
  let %tensor_0880: int64 = memory.alloc_tensor(%storage_01046, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1059]) /* ty=int64 */;
  %4121 = fn (%p0876: int64, Primitive=1) -> int64 {
    multiply(%p0876, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4122 = (%tensor_0879,);
  %4123 = (%tensor_0880,);
  let %v872: () = vm.invoke_tvm_op(%4121, %4122, %4123) /* ty=() */;
  let %storage_01047: Storage[] = memory.alloc_storage(%tensor_0880, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1060]) /* ty=Storage[] */;
  let %out_0166: Tensor[(?), int32] = memory.alloc_tensor(%storage_01047, 0 /* ty=int64 */, %shape_func_out_0173, meta[relay.attrs.AllocTensorAttrs][1060]) /* ty=Tensor[(?), int32] */;
  %4124 = (%x678,);
  %4125 = (%out_0166,);
  let %v873: () = vm.invoke_tvm_op(%4115, %4124, %4125) /* ty=() */;
  let %x679: Tensor[(?), int32] = %out_0166;
  let %in_shape_0161: Tensor[(1), int64] = vm.shape_of(%x679, meta[relay.attrs.ShapeOfAttrs][216]) /* ty=Tensor[(1), int64] */;
  let %storage_01048: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1061]) /* ty=Storage[] */;
  let %tensor_0881: Tensor[(4), int64] = memory.alloc_tensor(%storage_01048, 0 /* ty=int64 */, meta[relay.Constant][847] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1061]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0174: Tensor[(4), int64] = %tensor_0881;
  %4129 = fn (%p0877: Tensor[(?), int32], Primitive=1) -> Tensor[(?, 256, 14, 14), int32] {
    %4126 = reshape(%p0877, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
    %4127 = repeat(%4126, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
    %4128 = repeat(%4127, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
    repeat(%4128, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */
  };
  %4130 = (%in_shape_0161,);
  %4131 = (%shape_func_out_0174,);
  let %shape_func174: () = vm.shape_func(%4129, %4130, %4131, meta[relay.attrs.ShapeFuncAttrs][174]) /* ty=() */;
  let %storage_01049: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1062]) /* ty=Storage[] */;
  let %tensor_0882: int64 = memory.alloc_tensor(%storage_01049, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1062]) /* ty=int64 */;
  %4132 = fn (%p0878: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0878) /* ty=int64 */
  };
  %4133 = (%shape_func_out_0174,);
  %4134 = (%tensor_0882,);
  let %v874: () = vm.invoke_tvm_op(%4132, %4133, %4134) /* ty=() */;
  let %storage_01050: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1063]) /* ty=Storage[] */;
  let %tensor_0883: int64 = memory.alloc_tensor(%storage_01050, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1063]) /* ty=int64 */;
  %4135 = fn (%p0879: int64, Primitive=1) -> int64 {
    multiply(%p0879, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4136 = (%tensor_0882,);
  %4137 = (%tensor_0883,);
  let %v875: () = vm.invoke_tvm_op(%4135, %4136, %4137) /* ty=() */;
  let %storage_01051: Storage[] = memory.alloc_storage(%tensor_0883, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1064]) /* ty=Storage[] */;
  let %out_0167: Tensor[(?, 256, 14, 14), int32] = memory.alloc_tensor(%storage_01051, 0 /* ty=int64 */, %shape_func_out_0174, meta[relay.attrs.AllocTensorAttrs][1064]) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %4138 = (%x679,);
  %4139 = (%out_0167,);
  let %v876: () = vm.invoke_tvm_op(%4129, %4138, %4139) /* ty=() */;
  let %x680: Tensor[(?, 256, 14, 14), int32] = %out_0167;
  let %in_shape_0162: Tensor[(2), int64] = vm.shape_of(%x659, meta[relay.attrs.ShapeOfAttrs][217]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1106: Tensor[(1), int64] = vm.shape_of(%x679, meta[relay.attrs.ShapeOfAttrs][218]) /* ty=Tensor[(1), int64] */;
  let %storage_01052: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1065]) /* ty=Storage[] */;
  let %tensor_0884: Tensor[(2), int64] = memory.alloc_tensor(%storage_01052, 0 /* ty=int64 */, meta[relay.Constant][848] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1065]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0175: Tensor[(2), int64] = %tensor_0884;
  %4142 = fn (%p0880: Tensor[(?, ?), float32], %p1382: Tensor[(?), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    %4140 = cast(%p1382, dtype="int64") /* ty=Tensor[(?), int64] */;
    %4141 = (%p0880, %4140);
    adv_index(%4141) /* ty=Tensor[(?, ?), float32] */
  };
  %4143 = (%in_shape_0162, %in_shape_1106);
  %4144 = (%shape_func_out_0175,);
  let %shape_func175: () = vm.shape_func(%4142, %4143, %4144, meta[relay.attrs.ShapeFuncAttrs][175]) /* ty=() */;
  let %storage_01053: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1066]) /* ty=Storage[] */;
  let %tensor_0885: int64 = memory.alloc_tensor(%storage_01053, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1066]) /* ty=int64 */;
  %4145 = fn (%p0881: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0881) /* ty=int64 */
  };
  %4146 = (%shape_func_out_0175,);
  %4147 = (%tensor_0885,);
  let %v877: () = vm.invoke_tvm_op(%4145, %4146, %4147) /* ty=() */;
  let %storage_01054: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1067]) /* ty=Storage[] */;
  let %tensor_0886: int64 = memory.alloc_tensor(%storage_01054, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1067]) /* ty=int64 */;
  %4148 = fn (%p0882: int64, Primitive=1) -> int64 {
    multiply(%p0882, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4149 = (%tensor_0885,);
  %4150 = (%tensor_0886,);
  let %v878: () = vm.invoke_tvm_op(%4148, %4149, %4150) /* ty=() */;
  let %storage_01055: Storage[] = memory.alloc_storage(%tensor_0886, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1068]) /* ty=Storage[] */;
  let %out_0168: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01055, 0 /* ty=int64 */, %shape_func_out_0175, meta[relay.attrs.AllocTensorAttrs][1068]) /* ty=Tensor[(?, ?), float32] */;
  %4151 = (%x659, %x679);
  %4152 = (%out_0168,);
  let %v879: () = vm.invoke_tvm_op(%4142, %4151, %4152) /* ty=() */;
  let %x681: Tensor[(?, ?), float32] = %out_0168;
  let %in_shape_1107: Tensor[(2), int64] = vm.shape_of(%x681, meta[relay.attrs.ShapeOfAttrs][219]) /* ty=Tensor[(2), int64] */;
  let %storage_01056: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1069]) /* ty=Storage[] */;
  let %tensor_0887: Tensor[(4), int64] = memory.alloc_tensor(%storage_01056, 0 /* ty=int64 */, meta[relay.Constant][849] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1069]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0176: Tensor[(4), int64] = %tensor_0887;
  %4153 = fn (%p0883: Tensor[(1, 256, 25, 25), float32], %p1383: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    vision.roi_align(%p0883, %p1383, meta[relay.attrs.ROIAlignAttrs][7]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %4154 = (meta[relay.Constant][850] /* ty=Tensor[(4), int64] */, %in_shape_1107);
  %4155 = (%shape_func_out_0176,);
  let %shape_func176: () = vm.shape_func(%4153, %4154, %4155, meta[relay.attrs.ShapeFuncAttrs][176]) /* ty=() */;
  let %storage_01057: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1070]) /* ty=Storage[] */;
  let %tensor_0888: int64 = memory.alloc_tensor(%storage_01057, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1070]) /* ty=int64 */;
  %4156 = fn (%p0884: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0884) /* ty=int64 */
  };
  %4157 = (%shape_func_out_0176,);
  %4158 = (%tensor_0888,);
  let %v880: () = vm.invoke_tvm_op(%4156, %4157, %4158) /* ty=() */;
  let %storage_01058: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1071]) /* ty=Storage[] */;
  let %tensor_0889: int64 = memory.alloc_tensor(%storage_01058, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1071]) /* ty=int64 */;
  %4159 = fn (%p0885: int64, Primitive=1) -> int64 {
    multiply(%p0885, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4160 = (%tensor_0888,);
  %4161 = (%tensor_0889,);
  let %v881: () = vm.invoke_tvm_op(%4159, %4160, %4161) /* ty=() */;
  let %storage_01059: Storage[] = memory.alloc_storage(%tensor_0889, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1072]) /* ty=Storage[] */;
  let %out_0169: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_01059, 0 /* ty=int64 */, %shape_func_out_0176, meta[relay.attrs.AllocTensorAttrs][1072]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %4162 = (%x377, %x681);
  %4163 = (%out_0169,);
  let %v882: () = vm.invoke_tvm_op(%4153, %4162, %4163) /* ty=() */;
  let %x682: Tensor[(?, 256, 14, 14), float32] = %out_0169;
  let %in_shape_0163: Tensor[(4), int64] = vm.shape_of(%x676, meta[relay.attrs.ShapeOfAttrs][220]) /* ty=Tensor[(4), int64] */;
  let %in_shape_1108: Tensor[(4), int64] = vm.shape_of(%x680, meta[relay.attrs.ShapeOfAttrs][221]) /* ty=Tensor[(4), int64] */;
  let %in_shape_273: Tensor[(4), int64] = vm.shape_of(%x682, meta[relay.attrs.ShapeOfAttrs][222]) /* ty=Tensor[(4), int64] */;
  let %storage_01060: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1073]) /* ty=Storage[] */;
  let %tensor_0890: Tensor[(4), int64] = memory.alloc_tensor(%storage_01060, 0 /* ty=int64 */, meta[relay.Constant][851] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1073]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0177: Tensor[(4), int64] = %tensor_0890;
  %4164 = fn (%p0886: Tensor[(?, 256, 14, 14), float32], %p1384: Tensor[(?, 256, 14, 14), int32], %p2222: Tensor[(?, 256, 14, 14), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    scatter(%p0886, %p1384, %p2222, meta[relay.attrs.ScatterAttrs][13]) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %4165 = (%in_shape_0163, %in_shape_1108, %in_shape_273);
  %4166 = (%shape_func_out_0177,);
  let %shape_func177: () = vm.shape_func(%4164, %4165, %4166, meta[relay.attrs.ShapeFuncAttrs][177]) /* ty=() */;
  let %storage_01061: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1074]) /* ty=Storage[] */;
  let %tensor_0891: int64 = memory.alloc_tensor(%storage_01061, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1074]) /* ty=int64 */;
  %4167 = fn (%p0887: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0887) /* ty=int64 */
  };
  %4168 = (%shape_func_out_0177,);
  %4169 = (%tensor_0891,);
  let %v883: () = vm.invoke_tvm_op(%4167, %4168, %4169) /* ty=() */;
  let %storage_01062: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1075]) /* ty=Storage[] */;
  let %tensor_0892: int64 = memory.alloc_tensor(%storage_01062, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1075]) /* ty=int64 */;
  %4170 = fn (%p0888: int64, Primitive=1) -> int64 {
    multiply(%p0888, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4171 = (%tensor_0891,);
  %4172 = (%tensor_0892,);
  let %v884: () = vm.invoke_tvm_op(%4170, %4171, %4172) /* ty=() */;
  let %storage_01063: Storage[] = memory.alloc_storage(%tensor_0892, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1076]) /* ty=Storage[] */;
  let %out_0170: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_01063, 0 /* ty=int64 */, %shape_func_out_0177, meta[relay.attrs.AllocTensorAttrs][1076]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %4173 = (%x676, %x680, %x682);
  %4174 = (%out_0170,);
  let %v885: () = vm.invoke_tvm_op(%4164, %4173, %4174) /* ty=() */;
  let %x683: Tensor[(?, 256, 14, 14), float32] = %out_0170;
  let %in_shape_0164: Tensor[(4), int64] = vm.shape_of(%x683, meta[relay.attrs.ShapeOfAttrs][223]) /* ty=Tensor[(4), int64] */;
  let %storage_01064: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1077]) /* ty=Storage[] */;
  let %tensor_0893: Tensor[(4), int64] = memory.alloc_tensor(%storage_01064, 0 /* ty=int64 */, meta[relay.Constant][852] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1077]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0178: Tensor[(4), int64] = %tensor_0893;
  %4179 = fn (%p0889: Tensor[(?, 256, 14, 14), float32], %p1385: Tensor[(256, 256, 3, 3), float32], %p2223: Tensor[(256), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    %4175 = nn.conv2d(%p0889, %p1385, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
    %4176 = expand_dims(%p2223, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %4177 = expand_dims(%4176, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %4178 = add(%4175, %4177) /* ty=Tensor[(?, 256, 14, 14), float32] */;
    nn.relu(%4178) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %4180 = (%in_shape_0164, meta[relay.Constant][853] /* ty=Tensor[(4), int64] */, meta[relay.Constant][854] /* ty=Tensor[(1), int64] */);
  %4181 = (%shape_func_out_0178,);
  let %shape_func178: () = vm.shape_func(%4179, %4180, %4181, meta[relay.attrs.ShapeFuncAttrs][178]) /* ty=() */;
  let %storage_01065: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1078]) /* ty=Storage[] */;
  let %tensor_0894: int64 = memory.alloc_tensor(%storage_01065, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1078]) /* ty=int64 */;
  %4182 = fn (%p0890: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0890) /* ty=int64 */
  };
  %4183 = (%shape_func_out_0178,);
  %4184 = (%tensor_0894,);
  let %v886: () = vm.invoke_tvm_op(%4182, %4183, %4184) /* ty=() */;
  let %storage_01066: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1079]) /* ty=Storage[] */;
  let %tensor_0895: int64 = memory.alloc_tensor(%storage_01066, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1079]) /* ty=int64 */;
  %4185 = fn (%p0891: int64, Primitive=1) -> int64 {
    multiply(%p0891, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4186 = (%tensor_0894,);
  %4187 = (%tensor_0895,);
  let %v887: () = vm.invoke_tvm_op(%4185, %4186, %4187) /* ty=() */;
  let %storage_01067: Storage[] = memory.alloc_storage(%tensor_0895, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1080]) /* ty=Storage[] */;
  let %out_0171: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_01067, 0 /* ty=int64 */, %shape_func_out_0178, meta[relay.attrs.AllocTensorAttrs][1080]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %4188 = (%x683, %model.roi_heads.mask_head.mask_fcn1.weight, %model.roi_heads.mask_head.mask_fcn1.bias);
  %4189 = (%out_0171,);
  let %v888: () = vm.invoke_tvm_op(%4179, %4188, %4189) /* ty=() */;
  let %x684: Tensor[(?, 256, 14, 14), float32] = %out_0171;
  let %in_shape_0165: Tensor[(4), int64] = vm.shape_of(%x684, meta[relay.attrs.ShapeOfAttrs][224]) /* ty=Tensor[(4), int64] */;
  let %storage_01068: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1081]) /* ty=Storage[] */;
  let %tensor_0896: Tensor[(4), int64] = memory.alloc_tensor(%storage_01068, 0 /* ty=int64 */, meta[relay.Constant][855] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1081]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0179: Tensor[(4), int64] = %tensor_0896;
  %4194 = fn (%p0892: Tensor[(?, 256, 14, 14), float32], %p1386: Tensor[(256, 256, 3, 3), float32], %p2224: Tensor[(256), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    %4190 = nn.conv2d(%p0892, %p1386, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
    %4191 = expand_dims(%p2224, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %4192 = expand_dims(%4191, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %4193 = add(%4190, %4192) /* ty=Tensor[(?, 256, 14, 14), float32] */;
    nn.relu(%4193) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %4195 = (%in_shape_0165, meta[relay.Constant][856] /* ty=Tensor[(4), int64] */, meta[relay.Constant][857] /* ty=Tensor[(1), int64] */);
  %4196 = (%shape_func_out_0179,);
  let %shape_func179: () = vm.shape_func(%4194, %4195, %4196, meta[relay.attrs.ShapeFuncAttrs][179]) /* ty=() */;
  let %storage_01069: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1082]) /* ty=Storage[] */;
  let %tensor_0897: int64 = memory.alloc_tensor(%storage_01069, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1082]) /* ty=int64 */;
  %4197 = fn (%p0893: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0893) /* ty=int64 */
  };
  %4198 = (%shape_func_out_0179,);
  %4199 = (%tensor_0897,);
  let %v889: () = vm.invoke_tvm_op(%4197, %4198, %4199) /* ty=() */;
  let %storage_01070: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1083]) /* ty=Storage[] */;
  let %tensor_0898: int64 = memory.alloc_tensor(%storage_01070, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1083]) /* ty=int64 */;
  %4200 = fn (%p0894: int64, Primitive=1) -> int64 {
    multiply(%p0894, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4201 = (%tensor_0897,);
  %4202 = (%tensor_0898,);
  let %v890: () = vm.invoke_tvm_op(%4200, %4201, %4202) /* ty=() */;
  let %storage_01071: Storage[] = memory.alloc_storage(%tensor_0898, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1084]) /* ty=Storage[] */;
  let %out_0172: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_01071, 0 /* ty=int64 */, %shape_func_out_0179, meta[relay.attrs.AllocTensorAttrs][1084]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %4203 = (%x684, %model.roi_heads.mask_head.mask_fcn2.weight, %model.roi_heads.mask_head.mask_fcn2.bias);
  %4204 = (%out_0172,);
  let %v891: () = vm.invoke_tvm_op(%4194, %4203, %4204) /* ty=() */;
  let %x685: Tensor[(?, 256, 14, 14), float32] = %out_0172;
  let %in_shape_0166: Tensor[(4), int64] = vm.shape_of(%x685, meta[relay.attrs.ShapeOfAttrs][225]) /* ty=Tensor[(4), int64] */;
  let %storage_01072: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1085]) /* ty=Storage[] */;
  let %tensor_0899: Tensor[(4), int64] = memory.alloc_tensor(%storage_01072, 0 /* ty=int64 */, meta[relay.Constant][858] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1085]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0180: Tensor[(4), int64] = %tensor_0899;
  %4209 = fn (%p0895: Tensor[(?, 256, 14, 14), float32], %p1387: Tensor[(256, 256, 3, 3), float32], %p2225: Tensor[(256), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    %4205 = nn.conv2d(%p0895, %p1387, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
    %4206 = expand_dims(%p2225, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %4207 = expand_dims(%4206, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %4208 = add(%4205, %4207) /* ty=Tensor[(?, 256, 14, 14), float32] */;
    nn.relu(%4208) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %4210 = (%in_shape_0166, meta[relay.Constant][859] /* ty=Tensor[(4), int64] */, meta[relay.Constant][860] /* ty=Tensor[(1), int64] */);
  %4211 = (%shape_func_out_0180,);
  let %shape_func180: () = vm.shape_func(%4209, %4210, %4211, meta[relay.attrs.ShapeFuncAttrs][180]) /* ty=() */;
  let %storage_01073: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1086]) /* ty=Storage[] */;
  let %tensor_0900: int64 = memory.alloc_tensor(%storage_01073, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1086]) /* ty=int64 */;
  %4212 = fn (%p0896: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0896) /* ty=int64 */
  };
  %4213 = (%shape_func_out_0180,);
  %4214 = (%tensor_0900,);
  let %v892: () = vm.invoke_tvm_op(%4212, %4213, %4214) /* ty=() */;
  let %storage_01074: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1087]) /* ty=Storage[] */;
  let %tensor_0901: int64 = memory.alloc_tensor(%storage_01074, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1087]) /* ty=int64 */;
  %4215 = fn (%p0897: int64, Primitive=1) -> int64 {
    multiply(%p0897, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4216 = (%tensor_0900,);
  %4217 = (%tensor_0901,);
  let %v893: () = vm.invoke_tvm_op(%4215, %4216, %4217) /* ty=() */;
  let %storage_01075: Storage[] = memory.alloc_storage(%tensor_0901, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1088]) /* ty=Storage[] */;
  let %out_0173: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_01075, 0 /* ty=int64 */, %shape_func_out_0180, meta[relay.attrs.AllocTensorAttrs][1088]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %4218 = (%x685, %model.roi_heads.mask_head.mask_fcn3.weight, %model.roi_heads.mask_head.mask_fcn3.bias);
  %4219 = (%out_0173,);
  let %v894: () = vm.invoke_tvm_op(%4209, %4218, %4219) /* ty=() */;
  let %x686: Tensor[(?, 256, 14, 14), float32] = %out_0173;
  let %in_shape_0167: Tensor[(4), int64] = vm.shape_of(%x686, meta[relay.attrs.ShapeOfAttrs][226]) /* ty=Tensor[(4), int64] */;
  let %storage_01076: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1089]) /* ty=Storage[] */;
  let %tensor_0902: Tensor[(4), int64] = memory.alloc_tensor(%storage_01076, 0 /* ty=int64 */, meta[relay.Constant][861] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1089]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0181: Tensor[(4), int64] = %tensor_0902;
  %4224 = fn (%p0898: Tensor[(?, 256, 14, 14), float32], %p1388: Tensor[(256, 256, 3, 3), float32], %p2226: Tensor[(256), float32], Primitive=1) -> Tensor[(?, 256, 14, 14), float32] {
    %4220 = nn.conv2d(%p0898, %p1388, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
    %4221 = expand_dims(%p2226, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %4222 = expand_dims(%4221, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %4223 = add(%4220, %4222) /* ty=Tensor[(?, 256, 14, 14), float32] */;
    nn.relu(%4223) /* ty=Tensor[(?, 256, 14, 14), float32] */
  };
  %4225 = (%in_shape_0167, meta[relay.Constant][862] /* ty=Tensor[(4), int64] */, meta[relay.Constant][863] /* ty=Tensor[(1), int64] */);
  %4226 = (%shape_func_out_0181,);
  let %shape_func181: () = vm.shape_func(%4224, %4225, %4226, meta[relay.attrs.ShapeFuncAttrs][181]) /* ty=() */;
  let %storage_01077: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1090]) /* ty=Storage[] */;
  let %tensor_0903: int64 = memory.alloc_tensor(%storage_01077, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1090]) /* ty=int64 */;
  %4227 = fn (%p0899: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0899) /* ty=int64 */
  };
  %4228 = (%shape_func_out_0181,);
  %4229 = (%tensor_0903,);
  let %v895: () = vm.invoke_tvm_op(%4227, %4228, %4229) /* ty=() */;
  let %storage_01078: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1091]) /* ty=Storage[] */;
  let %tensor_0904: int64 = memory.alloc_tensor(%storage_01078, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1091]) /* ty=int64 */;
  %4230 = fn (%p0900: int64, Primitive=1) -> int64 {
    multiply(%p0900, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4231 = (%tensor_0903,);
  %4232 = (%tensor_0904,);
  let %v896: () = vm.invoke_tvm_op(%4230, %4231, %4232) /* ty=() */;
  let %storage_01079: Storage[] = memory.alloc_storage(%tensor_0904, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1092]) /* ty=Storage[] */;
  let %out_0174: Tensor[(?, 256, 14, 14), float32] = memory.alloc_tensor(%storage_01079, 0 /* ty=int64 */, %shape_func_out_0181, meta[relay.attrs.AllocTensorAttrs][1092]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %4233 = (%x686, %model.roi_heads.mask_head.mask_fcn4.weight, %model.roi_heads.mask_head.mask_fcn4.bias);
  %4234 = (%out_0174,);
  let %v897: () = vm.invoke_tvm_op(%4224, %4233, %4234) /* ty=() */;
  let %x687: Tensor[(?, 256, 14, 14), float32] = %out_0174;
  let %in_shape_0168: Tensor[(4), int64] = vm.shape_of(%x687, meta[relay.attrs.ShapeOfAttrs][227]) /* ty=Tensor[(4), int64] */;
  let %storage_01080: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1093]) /* ty=Storage[] */;
  let %tensor_0905: Tensor[(4), int64] = memory.alloc_tensor(%storage_01080, 0 /* ty=int64 */, meta[relay.Constant][864] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1093]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0182: Tensor[(4), int64] = %tensor_0905;
  %4239 = fn (%p0901: Tensor[(?, 256, 14, 14), float32], %p1389: Tensor[(256, 256, 2, 2), float32], %p2227: Tensor[(256), float32], Primitive=1) -> Tensor[(?, 256, 28, 28), float32] {
    %4235 = nn.conv2d_transpose(%p0901, %p1389, channels=256, kernel_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(?, 256, 28, 28), float32] */;
    %4236 = expand_dims(%p2227, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
    %4237 = expand_dims(%4236, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
    %4238 = add(%4235, %4237) /* ty=Tensor[(?, 256, 28, 28), float32] */;
    nn.relu(%4238) /* ty=Tensor[(?, 256, 28, 28), float32] */
  };
  %4240 = (%in_shape_0168, meta[relay.Constant][865] /* ty=Tensor[(4), int64] */, meta[relay.Constant][866] /* ty=Tensor[(1), int64] */);
  %4241 = (%shape_func_out_0182,);
  let %shape_func182: () = vm.shape_func(%4239, %4240, %4241, meta[relay.attrs.ShapeFuncAttrs][182]) /* ty=() */;
  let %storage_01081: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1094]) /* ty=Storage[] */;
  let %tensor_0906: int64 = memory.alloc_tensor(%storage_01081, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1094]) /* ty=int64 */;
  %4242 = fn (%p0902: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0902) /* ty=int64 */
  };
  %4243 = (%shape_func_out_0182,);
  %4244 = (%tensor_0906,);
  let %v898: () = vm.invoke_tvm_op(%4242, %4243, %4244) /* ty=() */;
  let %storage_01082: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1095]) /* ty=Storage[] */;
  let %tensor_0907: int64 = memory.alloc_tensor(%storage_01082, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1095]) /* ty=int64 */;
  %4245 = fn (%p0903: int64, Primitive=1) -> int64 {
    multiply(%p0903, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4246 = (%tensor_0906,);
  %4247 = (%tensor_0907,);
  let %v899: () = vm.invoke_tvm_op(%4245, %4246, %4247) /* ty=() */;
  let %storage_01083: Storage[] = memory.alloc_storage(%tensor_0907, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1096]) /* ty=Storage[] */;
  let %out_0175: Tensor[(?, 256, 28, 28), float32] = memory.alloc_tensor(%storage_01083, 0 /* ty=int64 */, %shape_func_out_0182, meta[relay.attrs.AllocTensorAttrs][1096]) /* ty=Tensor[(?, 256, 28, 28), float32] */;
  %4248 = (%x687, %model.roi_heads.mask_predictor.conv5_mask.weight, %model.roi_heads.mask_predictor.conv5_mask.bias);
  %4249 = (%out_0175,);
  let %v900: () = vm.invoke_tvm_op(%4239, %4248, %4249) /* ty=() */;
  let %x688: Tensor[(?, 256, 28, 28), float32] = %out_0175;
  let %in_shape_0169: Tensor[(4), int64] = vm.shape_of(%x688, meta[relay.attrs.ShapeOfAttrs][228]) /* ty=Tensor[(4), int64] */;
  let %storage_01084: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1097]) /* ty=Storage[] */;
  let %tensor_0908: Tensor[(4), int64] = memory.alloc_tensor(%storage_01084, 0 /* ty=int64 */, meta[relay.Constant][867] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1097]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0183: Tensor[(4), int64] = %tensor_0908;
  %4253 = fn (%p0904: Tensor[(?, 256, 28, 28), float32], %p1390: Tensor[(91, 256, 1, 1), float32], %p2228: Tensor[(91), float32], Primitive=1) -> Tensor[(?, 91, 28, 28), float32] {
    %4250 = nn.conv2d(%p0904, %p1390, padding=[0, 0, 0, 0], channels=91, kernel_size=[1, 1]) /* ty=Tensor[(?, 91, 28, 28), float32] */;
    %4251 = expand_dims(%p2228, axis=1, num_newaxis=2) /* ty=Tensor[(91, 1, 1), float32] */;
    %4252 = expand_dims(%4251, axis=0) /* ty=Tensor[(1, 91, 1, 1), float32] */;
    add(%4250, %4252) /* ty=Tensor[(?, 91, 28, 28), float32] */
  };
  %4254 = (%in_shape_0169, meta[relay.Constant][868] /* ty=Tensor[(4), int64] */, meta[relay.Constant][869] /* ty=Tensor[(1), int64] */);
  %4255 = (%shape_func_out_0183,);
  let %shape_func183: () = vm.shape_func(%4253, %4254, %4255, meta[relay.attrs.ShapeFuncAttrs][183]) /* ty=() */;
  let %storage_01085: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1098]) /* ty=Storage[] */;
  let %tensor_0909: int64 = memory.alloc_tensor(%storage_01085, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1098]) /* ty=int64 */;
  %4256 = fn (%p0905: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0905) /* ty=int64 */
  };
  %4257 = (%shape_func_out_0183,);
  %4258 = (%tensor_0909,);
  let %v901: () = vm.invoke_tvm_op(%4256, %4257, %4258) /* ty=() */;
  let %storage_01086: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1099]) /* ty=Storage[] */;
  let %tensor_0910: int64 = memory.alloc_tensor(%storage_01086, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1099]) /* ty=int64 */;
  %4259 = fn (%p0906: int64, Primitive=1) -> int64 {
    multiply(%p0906, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4260 = (%tensor_0909,);
  %4261 = (%tensor_0910,);
  let %v902: () = vm.invoke_tvm_op(%4259, %4260, %4261) /* ty=() */;
  let %storage_01087: Storage[] = memory.alloc_storage(%tensor_0910, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1100]) /* ty=Storage[] */;
  let %out_0176: Tensor[(?, 91, 28, 28), float32] = memory.alloc_tensor(%storage_01087, 0 /* ty=int64 */, %shape_func_out_0183, meta[relay.attrs.AllocTensorAttrs][1100]) /* ty=Tensor[(?, 91, 28, 28), float32] */;
  %4262 = (%x688, %model.roi_heads.mask_predictor.mask_fcn_logits.weight, %model.roi_heads.mask_predictor.mask_fcn_logits.bias);
  %4263 = (%out_0176,);
  let %v903: () = vm.invoke_tvm_op(%4253, %4262, %4263) /* ty=() */;
  let %x689: Tensor[(?, 91, 28, 28), float32] = %out_0176;
  let %storage_01088: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1101]) /* ty=Storage[] */;
  let %tensor_0911: Tensor[(4), int32] = memory.alloc_tensor(%storage_01088, 0 /* ty=int64 */, meta[relay.Constant][870] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1101]) /* ty=Tensor[(4), int32] */;
  %4264 = fn (%p0907: Tensor[(?, 91, 28, 28), float32], Primitive=1) -> Tensor[(4), int32] {
    shape_of(%p0907, dtype="int32") /* ty=Tensor[(4), int32] */
  };
  %4265 = (%x689,);
  %4266 = (%tensor_0911,);
  let %v904: () = vm.invoke_tvm_op(%4264, %4265, %4266) /* ty=() */;
  let %x690: Tensor[(4), int32] = %tensor_0911;
  let %storage_01089: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1102]) /* ty=Storage[] */;
  let %tensor_0912: int64 = memory.alloc_tensor(%storage_01089, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1102]) /* ty=int64 */;
  %4268 = fn (%p0908: Tensor[(4), int32], Primitive=1) -> int64 {
    %4267 = take(%p0908, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
    cast(%4267, dtype="int64") /* ty=int64 */
  };
  %4269 = (%x690,);
  %4270 = (%tensor_0912,);
  let %v905: () = vm.invoke_tvm_op(%4268, %4269, %4270) /* ty=() */;
  let %x691: int64 = %tensor_0912;
  let %in_shape_0170: int64 = device_copy(0 /* ty=int64 */, meta[relay.attrs.DeviceCopyAttrs][190]) /* ty=int64 */;
  let %in_shape_1109: int64 = device_copy(%x691, meta[relay.attrs.DeviceCopyAttrs][191]) /* ty=int64 */;
  let %in_shape_274: int64 = device_copy(1 /* ty=int64 */, meta[relay.attrs.DeviceCopyAttrs][192]) /* ty=int64 */;
  let %storage_01090: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1103]) /* ty=Storage[] */;
  let %tensor_0913: Tensor[(1), int64] = memory.alloc_tensor(%storage_01090, 0 /* ty=int64 */, meta[relay.Constant][871] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1103]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0184: Tensor[(1), int64] = %tensor_0913;
  %4271 = fn (%p0909: int64, %p1391: int64, %p2229: int64, Primitive=1) -> Tensor[(?), int64] {
    arange(%p0909, %p1391, %p2229, start=meta[relay.Constant][872], stop=meta[relay.Call][2], step=meta[relay.Constant][873], dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %4272 = (%in_shape_0170, %in_shape_1109, %in_shape_274);
  %4273 = (%shape_func_out_0184,);
  let %shape_func184: () = vm.shape_func(%4271, %4272, %4273, meta[relay.attrs.ShapeFuncAttrs][184]) /* ty=() */;
  let %storage_01091: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1104]) /* ty=Storage[] */;
  let %tensor_0914: int64 = memory.alloc_tensor(%storage_01091, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1104]) /* ty=int64 */;
  %4274 = fn (%p0910: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0910) /* ty=int64 */
  };
  %4275 = (%shape_func_out_0184,);
  %4276 = (%tensor_0914,);
  let %v906: () = vm.invoke_tvm_op(%4274, %4275, %4276) /* ty=() */;
  let %storage_01092: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1105]) /* ty=Storage[] */;
  let %tensor_0915: int64 = memory.alloc_tensor(%storage_01092, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1105]) /* ty=int64 */;
  %4277 = fn (%p0911: int64, Primitive=1) -> int64 {
    multiply(%p0911, 8 /* ty=int64 */) /* ty=int64 */
  };
  %4278 = (%tensor_0914,);
  %4279 = (%tensor_0915,);
  let %v907: () = vm.invoke_tvm_op(%4277, %4278, %4279) /* ty=() */;
  let %storage_01093: Storage[] = memory.alloc_storage(%tensor_0915, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1106]) /* ty=Storage[] */;
  let %out_0177: Tensor[(?), int64] = memory.alloc_tensor(%storage_01093, 0 /* ty=int64 */, %shape_func_out_0184, meta[relay.attrs.AllocTensorAttrs][1106]) /* ty=Tensor[(?), int64] */;
  %4280 = (0 /* ty=int64 */, %x691, 1 /* ty=int64 */);
  %4281 = (%out_0177,);
  let %v908: () = vm.invoke_tvm_op(%4271, %4280, %4281) /* ty=() */;
  let %x692: Tensor[(?), int64] = %out_0177;
  let %in_shape_0171: Tensor[(1), int64] = vm.shape_of(%x610, meta[relay.attrs.ShapeOfAttrs][229]) /* ty=Tensor[(1), int64] */;
  let %in_shape_1110: Tensor[(1), int64] = vm.shape_of(%x616, meta[relay.attrs.ShapeOfAttrs][230]) /* ty=Tensor[(1), int64] */;
  let %storage_01094: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1107]) /* ty=Storage[] */;
  let %tensor_0916: Tensor[(1), int64] = memory.alloc_tensor(%storage_01094, 0 /* ty=int64 */, meta[relay.Constant][874] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1107]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0185: Tensor[(1), int64] = %tensor_0916;
  %4283 = fn (%p0912: Tensor[(?), int64], %p1392: Tensor[(?), int64], Primitive=1) -> Tensor[(?), int64] {
    %4282 = (%p0912, %p1392);
    adv_index(%4282) /* ty=Tensor[(?), int64] */
  };
  %4284 = (%in_shape_0171, %in_shape_1110);
  %4285 = (%shape_func_out_0185,);
  let %shape_func185: () = vm.shape_func(%4283, %4284, %4285, meta[relay.attrs.ShapeFuncAttrs][185]) /* ty=() */;
  let %storage_01095: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1108]) /* ty=Storage[] */;
  let %tensor_0917: int64 = memory.alloc_tensor(%storage_01095, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1108]) /* ty=int64 */;
  %4286 = fn (%p0913: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0913) /* ty=int64 */
  };
  %4287 = (%shape_func_out_0185,);
  %4288 = (%tensor_0917,);
  let %v909: () = vm.invoke_tvm_op(%4286, %4287, %4288) /* ty=() */;
  let %storage_01096: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1109]) /* ty=Storage[] */;
  let %tensor_0918: int64 = memory.alloc_tensor(%storage_01096, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1109]) /* ty=int64 */;
  %4289 = fn (%p0914: int64, Primitive=1) -> int64 {
    multiply(%p0914, 8 /* ty=int64 */) /* ty=int64 */
  };
  %4290 = (%tensor_0917,);
  %4291 = (%tensor_0918,);
  let %v910: () = vm.invoke_tvm_op(%4289, %4290, %4291) /* ty=() */;
  let %storage_01097: Storage[] = memory.alloc_storage(%tensor_0918, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1110]) /* ty=Storage[] */;
  let %out_0178: Tensor[(?), int64] = memory.alloc_tensor(%storage_01097, 0 /* ty=int64 */, %shape_func_out_0185, meta[relay.attrs.AllocTensorAttrs][1110]) /* ty=Tensor[(?), int64] */;
  %4292 = (%x610, %x616);
  %4293 = (%out_0178,);
  let %v911: () = vm.invoke_tvm_op(%4283, %4292, %4293) /* ty=() */;
  let %x693: Tensor[(?), int64] = %out_0178;
  let %in_shape_0172: Tensor[(4), int64] = vm.shape_of(%x689, meta[relay.attrs.ShapeOfAttrs][231]) /* ty=Tensor[(4), int64] */;
  let %in_shape_1111: Tensor[(1), int64] = vm.shape_of(%x692, meta[relay.attrs.ShapeOfAttrs][232]) /* ty=Tensor[(1), int64] */;
  let %in_shape_275: Tensor[(1), int64] = vm.shape_of(%x693, meta[relay.attrs.ShapeOfAttrs][233]) /* ty=Tensor[(1), int64] */;
  let %storage_01098: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1111]) /* ty=Storage[] */;
  let %tensor_0919: Tensor[(3), int64] = memory.alloc_tensor(%storage_01098, 0 /* ty=int64 */, meta[relay.Constant][875] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1111]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0186: Tensor[(3), int64] = %tensor_0919;
  %4298 = fn (%p0915: Tensor[(?, 91, 28, 28), float32], %p1393: Tensor[(?), int64], %p2230: Tensor[(?), int64], Primitive=1) -> Tensor[(?, 28, 28), float32] {
    %4294 = sigmoid(%p0915) /* ty=Tensor[(?, 91, 28, 28), float32] */;
    %4295 = (%p2230,);
    %4296 = concatenate(%4295) /* ty=Tensor[(?), int64] */;
    %4297 = (%4294, %p1393, %4296);
    adv_index(%4297) /* ty=Tensor[(?, 28, 28), float32] */
  };
  %4299 = (%in_shape_0172, %in_shape_1111, %in_shape_275);
  %4300 = (%shape_func_out_0186,);
  let %shape_func186: () = vm.shape_func(%4298, %4299, %4300, meta[relay.attrs.ShapeFuncAttrs][186]) /* ty=() */;
  let %storage_01099: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1112]) /* ty=Storage[] */;
  let %tensor_0920: int64 = memory.alloc_tensor(%storage_01099, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1112]) /* ty=int64 */;
  %4301 = fn (%p0916: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0916) /* ty=int64 */
  };
  %4302 = (%shape_func_out_0186,);
  %4303 = (%tensor_0920,);
  let %v912: () = vm.invoke_tvm_op(%4301, %4302, %4303) /* ty=() */;
  let %storage_01100: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1113]) /* ty=Storage[] */;
  let %tensor_0921: int64 = memory.alloc_tensor(%storage_01100, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1113]) /* ty=int64 */;
  %4304 = fn (%p0917: int64, Primitive=1) -> int64 {
    multiply(%p0917, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4305 = (%tensor_0920,);
  %4306 = (%tensor_0921,);
  let %v913: () = vm.invoke_tvm_op(%4304, %4305, %4306) /* ty=() */;
  let %storage_01101: Storage[] = memory.alloc_storage(%tensor_0921, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1114]) /* ty=Storage[] */;
  let %out_0179: Tensor[(?, 28, 28), float32] = memory.alloc_tensor(%storage_01101, 0 /* ty=int64 */, %shape_func_out_0186, meta[relay.attrs.AllocTensorAttrs][1114]) /* ty=Tensor[(?, 28, 28), float32] */;
  %4307 = (%x689, %x692, %x693);
  %4308 = (%out_0179,);
  let %v914: () = vm.invoke_tvm_op(%4298, %4307, %4308) /* ty=() */;
  let %x694: Tensor[(?, 28, 28), float32] = %out_0179;
  let %storage_01102: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1115]) /* ty=Storage[] */;
  let %tensor_0922: Tensor[(3), int32] = memory.alloc_tensor(%storage_01102, 0 /* ty=int64 */, meta[relay.Constant][876] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1115]) /* ty=Tensor[(3), int32] */;
  %4309 = fn (%p0918: Tensor[(?, 28, 28), float32], Primitive=1) -> Tensor[(3), int32] {
    shape_of(%p0918, dtype="int32") /* ty=Tensor[(3), int32] */
  };
  %4310 = (%x694,);
  %4311 = (%tensor_0922,);
  let %v915: () = vm.invoke_tvm_op(%4309, %4310, %4311) /* ty=() */;
  let %x695: Tensor[(3), int32] = %tensor_0922;
  let %storage_01103: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1116]) /* ty=Storage[] */;
  let %tensor_0923: Tensor[(3), int32] = memory.alloc_tensor(%storage_01103, 0 /* ty=int64 */, meta[relay.Constant][877] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1116]) /* ty=Tensor[(3), int32] */;
  %4314 = fn (%p0919: Tensor[(3), bool], %p1394: Tensor[(3), int32], %p2231: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int32] {
    %4312 = cast_like(%p2231, %p1394) /* ty=Tensor[(3), int32] */;
    %4313 = add(%p1394, %4312) /* ty=Tensor[(3), int32] */;
    where(%p0919, %4313, %p1394) /* ty=Tensor[(3), int32] */
  };
  %4315 = (meta[relay.Constant][878] /* ty=Tensor[(3), bool] */, meta[relay.Constant][879] /* ty=Tensor[(3), int32] */, %x695);
  %4316 = (%tensor_0923,);
  let %v916: () = vm.invoke_tvm_op(%4314, %4315, %4316) /* ty=() */;
  let %x696: Tensor[(3), int32] = %tensor_0923;
  let %storage_01104: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1117]) /* ty=Storage[] */;
  let %tensor_0924: Tensor[(3), int64] = memory.alloc_tensor(%storage_01104, 0 /* ty=int64 */, meta[relay.Constant][880] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1117]) /* ty=Tensor[(3), int64] */;
  %4317 = fn (%p0920: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    cast(%p0920, dtype="int64") /* ty=Tensor[(3), int64] */
  };
  %4318 = (%x695,);
  %4319 = (%tensor_0924,);
  let %v917: () = vm.invoke_tvm_op(%4317, %4318, %4319) /* ty=() */;
  let %x697: Tensor[(3), int64] = %tensor_0924;
  let %in_shape_0173: Tensor[(3), int64] = vm.shape_of(%x694, meta[relay.attrs.ShapeOfAttrs][234]) /* ty=Tensor[(3), int64] */;
  let %in_shape_1112: Tensor[(3), int32] = device_copy(%x696, meta[relay.attrs.DeviceCopyAttrs][193]) /* ty=Tensor[(3), int32] */;
  let %in_shape_276: Tensor[(3), int64] = device_copy(%x697, meta[relay.attrs.DeviceCopyAttrs][194]) /* ty=Tensor[(3), int64] */;
  let %in_shape_358: Tensor[(3), int32] = device_copy(meta[relay.Constant][881] /* ty=Tensor[(3), int32] */, meta[relay.attrs.DeviceCopyAttrs][195]) /* ty=Tensor[(3), int32] */;
  let %storage_01105: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1118]) /* ty=Storage[] */;
  let %tensor_0925: Tensor[(3), int64] = memory.alloc_tensor(%storage_01105, 0 /* ty=int64 */, meta[relay.Constant][882] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1118]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0187: Tensor[(3), int64] = %tensor_0925;
  %4320 = fn (%p0921: Tensor[(?, 28, 28), float32], %p1395: Tensor[(3), int32], %p2232: Tensor[(3), int64], %p3122: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0921, %p1395, %p2232, %p3122, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %4321 = (%in_shape_0173, %in_shape_1112, %in_shape_276, %in_shape_358);
  %4322 = (%shape_func_out_0187,);
  let %shape_func187: () = vm.shape_func(%4320, %4321, %4322, meta[relay.attrs.ShapeFuncAttrs][187]) /* ty=() */;
  let %storage_01106: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1119]) /* ty=Storage[] */;
  let %tensor_0926: int64 = memory.alloc_tensor(%storage_01106, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1119]) /* ty=int64 */;
  %4323 = fn (%p0922: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0922) /* ty=int64 */
  };
  %4324 = (%shape_func_out_0187,);
  %4325 = (%tensor_0926,);
  let %v918: () = vm.invoke_tvm_op(%4323, %4324, %4325) /* ty=() */;
  let %storage_01107: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1120]) /* ty=Storage[] */;
  let %tensor_0927: int64 = memory.alloc_tensor(%storage_01107, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1120]) /* ty=int64 */;
  %4326 = fn (%p0923: int64, Primitive=1) -> int64 {
    multiply(%p0923, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4327 = (%tensor_0926,);
  %4328 = (%tensor_0927,);
  let %v919: () = vm.invoke_tvm_op(%4326, %4327, %4328) /* ty=() */;
  let %storage_01108: Storage[] = memory.alloc_storage(%tensor_0927, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1121]) /* ty=Storage[] */;
  let %out_0180: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_01108, 0 /* ty=int64 */, %shape_func_out_0187, meta[relay.attrs.AllocTensorAttrs][1121]) /* ty=Tensor[(?, ?, ?), float32] */;
  %4329 = (%x694, %x696, %x697, meta[relay.Constant][881] /* ty=Tensor[(3), int32] */);
  %4330 = (%out_0180,);
  let %v920: () = vm.invoke_tvm_op(%4320, %4329, %4330) /* ty=() */;
  let %x698: Tensor[(?, ?, ?), float32] = %out_0180;
  let %in_shape_0174: Tensor[(3), int64] = vm.shape_of(%x698, meta[relay.attrs.ShapeOfAttrs][235]) /* ty=Tensor[(3), int64] */;
  let %storage_01109: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1122]) /* ty=Storage[] */;
  let %tensor_0928: Tensor[(4), int64] = memory.alloc_tensor(%storage_01109, 0 /* ty=int64 */, meta[relay.Constant][883] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1122]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0188: Tensor[(4), int64] = %tensor_0928;
  %4331 = fn (%p0924: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(?, 1, ?, ?), float32] {
    expand_dims(%p0924, axis=1) /* ty=Tensor[(?, 1, ?, ?), float32] */
  };
  %4332 = (%in_shape_0174,);
  %4333 = (%shape_func_out_0188,);
  let %shape_func188: () = vm.shape_func(%4331, %4332, %4333, meta[relay.attrs.ShapeFuncAttrs][188]) /* ty=() */;
  let %storage_01110: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1123]) /* ty=Storage[] */;
  let %tensor_0929: int64 = memory.alloc_tensor(%storage_01110, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1123]) /* ty=int64 */;
  %4334 = fn (%p0925: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0925) /* ty=int64 */
  };
  %4335 = (%shape_func_out_0188,);
  %4336 = (%tensor_0929,);
  let %v921: () = vm.invoke_tvm_op(%4334, %4335, %4336) /* ty=() */;
  let %storage_01111: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1124]) /* ty=Storage[] */;
  let %tensor_0930: int64 = memory.alloc_tensor(%storage_01111, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1124]) /* ty=int64 */;
  %4337 = fn (%p0926: int64, Primitive=1) -> int64 {
    multiply(%p0926, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4338 = (%tensor_0929,);
  %4339 = (%tensor_0930,);
  let %v922: () = vm.invoke_tvm_op(%4337, %4338, %4339) /* ty=() */;
  let %storage_01112: Storage[] = memory.alloc_storage(%tensor_0930, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1125]) /* ty=Storage[] */;
  let %out_0181: Tensor[(?, 1, ?, ?), float32] = memory.alloc_tensor(%storage_01112, 0 /* ty=int64 */, %shape_func_out_0188, meta[relay.attrs.AllocTensorAttrs][1125]) /* ty=Tensor[(?, 1, ?, ?), float32] */;
  %4340 = (%x698,);
  %4341 = (%out_0181,);
  let %v923: () = vm.invoke_tvm_op(%4331, %4340, %4341) /* ty=() */;
  let %x699: Tensor[(?, 1, ?, ?), float32] = %out_0181;
  let %in_shape_0175: Tensor[(4), int64] = vm.shape_of(%x699, meta[relay.attrs.ShapeOfAttrs][236]) /* ty=Tensor[(4), int64] */;
  let %storage_01113: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1126]) /* ty=Storage[] */;
  let %tensor_0931: Tensor[(4), int64] = memory.alloc_tensor(%storage_01113, 0 /* ty=int64 */, meta[relay.Constant][884] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1126]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0189: Tensor[(4), int64] = %tensor_0931;
  %4342 = fn (%p0927: Tensor[(?, 1, ?, ?), float32], Primitive=1) -> Tensor[(?, 1, ?, ?), float32] {
    nn.pad(%p0927, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]) /* ty=Tensor[(?, 1, ?, ?), float32] */
  };
  %4343 = (%in_shape_0175,);
  %4344 = (%shape_func_out_0189,);
  let %shape_func189: () = vm.shape_func(%4342, %4343, %4344, meta[relay.attrs.ShapeFuncAttrs][189]) /* ty=() */;
  let %storage_01114: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1127]) /* ty=Storage[] */;
  let %tensor_0932: int64 = memory.alloc_tensor(%storage_01114, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1127]) /* ty=int64 */;
  %4345 = fn (%p0928: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0928) /* ty=int64 */
  };
  %4346 = (%shape_func_out_0189,);
  %4347 = (%tensor_0932,);
  let %v924: () = vm.invoke_tvm_op(%4345, %4346, %4347) /* ty=() */;
  let %storage_01115: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1128]) /* ty=Storage[] */;
  let %tensor_0933: int64 = memory.alloc_tensor(%storage_01115, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1128]) /* ty=int64 */;
  %4348 = fn (%p0929: int64, Primitive=1) -> int64 {
    multiply(%p0929, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4349 = (%tensor_0932,);
  %4350 = (%tensor_0933,);
  let %v925: () = vm.invoke_tvm_op(%4348, %4349, %4350) /* ty=() */;
  let %storage_01116: Storage[] = memory.alloc_storage(%tensor_0933, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1129]) /* ty=Storage[] */;
  let %out_0182: Tensor[(?, 1, ?, ?), float32] = memory.alloc_tensor(%storage_01116, 0 /* ty=int64 */, %shape_func_out_0189, meta[relay.attrs.AllocTensorAttrs][1129]) /* ty=Tensor[(?, 1, ?, ?), float32] */;
  %4351 = (%x699,);
  %4352 = (%out_0182,);
  let %v926: () = vm.invoke_tvm_op(%4342, %4351, %4352) /* ty=() */;
  let %x700: Tensor[(?, 1, ?, ?), float32] = %out_0182;
  let %in_shape_0176: Tensor[(2), int64] = vm.shape_of(%x632, meta[relay.attrs.ShapeOfAttrs][237]) /* ty=Tensor[(2), int64] */;
  let %storage_01117: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1130]) /* ty=Storage[] */;
  let %tensor_0934: Tensor[(2), int64] = memory.alloc_tensor(%storage_01117, 0 /* ty=int64 */, meta[relay.Constant][885] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1130]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0190: Tensor[(2), int64] = %tensor_0934;
  %4367 = fn (%p0930: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(?, 4), float32] {
    %4353 = split(%p0930, indices_or_sections=4, axis=1) /* ty=(Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32]) */;
    %4354 = %4353.0;
    %4355 = squeeze(%4354, axis=[1]) /* ty=Tensor[(?), float32] */;
    %4356 = multiply(%4355, 0.375f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %4357 = %4353.1;
    %4358 = squeeze(%4357, axis=[1]) /* ty=Tensor[(?), float32] */;
    %4359 = multiply(%4358, 0.375f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %4360 = %4353.2;
    %4361 = squeeze(%4360, axis=[1]) /* ty=Tensor[(?), float32] */;
    %4362 = multiply(%4361, 0.375f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %4363 = %4353.3;
    %4364 = squeeze(%4363, axis=[1]) /* ty=Tensor[(?), float32] */;
    %4365 = multiply(%4364, 0.375f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %4366 = (%4356, %4359, %4362, %4365);
    stack(%4366, axis=1) /* ty=Tensor[(?, 4), float32] */
  };
  %4368 = (%in_shape_0176,);
  %4369 = (%shape_func_out_0190,);
  let %shape_func190: () = vm.shape_func(%4367, %4368, %4369, meta[relay.attrs.ShapeFuncAttrs][190]) /* ty=() */;
  let %storage_01118: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1131]) /* ty=Storage[] */;
  let %tensor_0935: int64 = memory.alloc_tensor(%storage_01118, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1131]) /* ty=int64 */;
  %4370 = fn (%p0931: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0931) /* ty=int64 */
  };
  %4371 = (%shape_func_out_0190,);
  %4372 = (%tensor_0935,);
  let %v927: () = vm.invoke_tvm_op(%4370, %4371, %4372) /* ty=() */;
  let %storage_01119: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1132]) /* ty=Storage[] */;
  let %tensor_0936: int64 = memory.alloc_tensor(%storage_01119, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1132]) /* ty=int64 */;
  %4373 = fn (%p0932: int64, Primitive=1) -> int64 {
    multiply(%p0932, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4374 = (%tensor_0935,);
  %4375 = (%tensor_0936,);
  let %v928: () = vm.invoke_tvm_op(%4373, %4374, %4375) /* ty=() */;
  let %storage_01120: Storage[] = memory.alloc_storage(%tensor_0936, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1133]) /* ty=Storage[] */;
  let %out_0183: Tensor[(?, 4), float32] = memory.alloc_tensor(%storage_01120, 0 /* ty=int64 */, %shape_func_out_0190, meta[relay.attrs.AllocTensorAttrs][1133]) /* ty=Tensor[(?, 4), float32] */;
  %4376 = (%x632,);
  %4377 = (%out_0183,);
  let %v929: () = vm.invoke_tvm_op(%4367, %4376, %4377) /* ty=() */;
  let %x701: Tensor[(?, 4), float32] = %out_0183;
  let %in_shape_0177: Tensor[(1), int64] = vm.shape_of(%x612, meta[relay.attrs.ShapeOfAttrs][238]) /* ty=Tensor[(1), int64] */;
  let %in_shape_1113: Tensor[(1), int64] = vm.shape_of(%x616, meta[relay.attrs.ShapeOfAttrs][239]) /* ty=Tensor[(1), int64] */;
  let %storage_01121: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1134]) /* ty=Storage[] */;
  let %tensor_0937: Tensor[(1), int64] = memory.alloc_tensor(%storage_01121, 0 /* ty=int64 */, meta[relay.Constant][886] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1134]) /* ty=Tensor[(1), int64] */;
  let %shape_func_out_0191: Tensor[(1), int64] = %tensor_0937;
  %4379 = fn (%p0933: Tensor[(?), float32], %p1396: Tensor[(?), int64], Primitive=1) -> Tensor[(?), float32] {
    %4378 = (%p0933, %p1396);
    adv_index(%4378) /* ty=Tensor[(?), float32] */
  };
  %4380 = (%in_shape_0177, %in_shape_1113);
  %4381 = (%shape_func_out_0191,);
  let %shape_func191: () = vm.shape_func(%4379, %4380, %4381, meta[relay.attrs.ShapeFuncAttrs][191]) /* ty=() */;
  let %storage_01122: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1135]) /* ty=Storage[] */;
  let %tensor_0938: int64 = memory.alloc_tensor(%storage_01122, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1135]) /* ty=int64 */;
  %4382 = fn (%p0934: Tensor[(1), int64], Primitive=1) -> int64 {
    prod(%p0934) /* ty=int64 */
  };
  %4383 = (%shape_func_out_0191,);
  %4384 = (%tensor_0938,);
  let %v930: () = vm.invoke_tvm_op(%4382, %4383, %4384) /* ty=() */;
  let %storage_01123: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1136]) /* ty=Storage[] */;
  let %tensor_0939: int64 = memory.alloc_tensor(%storage_01123, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1136]) /* ty=int64 */;
  %4385 = fn (%p0935: int64, Primitive=1) -> int64 {
    multiply(%p0935, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4386 = (%tensor_0938,);
  %4387 = (%tensor_0939,);
  let %v931: () = vm.invoke_tvm_op(%4385, %4386, %4387) /* ty=() */;
  let %storage_01124: Storage[] = memory.alloc_storage(%tensor_0939, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1137]) /* ty=Storage[] */;
  let %out_0184: Tensor[(?), float32] = memory.alloc_tensor(%storage_01124, 0 /* ty=int64 */, %shape_func_out_0191, meta[relay.attrs.AllocTensorAttrs][1137]) /* ty=Tensor[(?), float32] */;
  %4388 = (%x612, %x616);
  %4389 = (%out_0184,);
  let %v932: () = vm.invoke_tvm_op(%4379, %4388, %4389) /* ty=() */;
  let %x702: Tensor[(?), float32] = %out_0184;
  let %x703: fn (Tensor[(?, ?), float32]) -> static_tensor_float32_any_any_t[] = @lifted_name9037289787164507084;
  let %x704: List[Tensor[(?, ?), float32]] = Nil /* ty=List[Tensor[(?, ?), float32]] */;
  let %storage_01125: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1138]) /* ty=Storage[] */;
  let %tensor_0940: Tensor[(2), int32] = memory.alloc_tensor(%storage_01125, 0 /* ty=int64 */, meta[relay.Constant][887] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1138]) /* ty=Tensor[(2), int32] */;
  %4390 = fn (%p0936: Tensor[(?, 4), float32], Primitive=1) -> Tensor[(2), int32] {
    shape_of(%p0936, dtype="int32") /* ty=Tensor[(2), int32] */
  };
  %4391 = (%x701,);
  %4392 = (%tensor_0940,);
  let %v933: () = vm.invoke_tvm_op(%4390, %4391, %4392) /* ty=() */;
  let %x705: Tensor[(2), int32] = %tensor_0940;
  let %storage_01126: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1139]) /* ty=Storage[] */;
  let %tensor_0941: Tensor[(2), int32] = memory.alloc_tensor(%storage_01126, 0 /* ty=int64 */, meta[relay.Constant][888] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1139]) /* ty=Tensor[(2), int32] */;
  %4395 = fn (%p0937: Tensor[(2), bool], %p1397: Tensor[(2), int32], %p2233: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %4393 = cast_like(%p2233, %p1397) /* ty=Tensor[(2), int32] */;
    %4394 = add(%p1397, %4393) /* ty=Tensor[(2), int32] */;
    where(%p0937, %4394, %p1397) /* ty=Tensor[(2), int32] */
  };
  %4396 = (meta[relay.Constant][889] /* ty=Tensor[(2), bool] */, meta[relay.Constant][890] /* ty=Tensor[(2), int32] */, %x705);
  %4397 = (%tensor_0941,);
  let %v934: () = vm.invoke_tvm_op(%4395, %4396, %4397) /* ty=() */;
  let %x706: Tensor[(2), int32] = %tensor_0941;
  let %storage_01127: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1140]) /* ty=Storage[] */;
  let %tensor_0942: Tensor[(2), int64] = memory.alloc_tensor(%storage_01127, 0 /* ty=int64 */, meta[relay.Constant][891] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1140]) /* ty=Tensor[(2), int64] */;
  %4398 = fn (%p0938: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int64] {
    cast(%p0938, dtype="int64") /* ty=Tensor[(2), int64] */
  };
  %4399 = (%x705,);
  %4400 = (%tensor_0942,);
  let %v935: () = vm.invoke_tvm_op(%4398, %4399, %4400) /* ty=() */;
  let %x707: Tensor[(2), int64] = %tensor_0942;
  let %in_shape_0178: Tensor[(2), int64] = vm.shape_of(%x701, meta[relay.attrs.ShapeOfAttrs][240]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1114: Tensor[(2), int32] = device_copy(%x706, meta[relay.attrs.DeviceCopyAttrs][196]) /* ty=Tensor[(2), int32] */;
  let %in_shape_277: Tensor[(2), int64] = device_copy(%x707, meta[relay.attrs.DeviceCopyAttrs][197]) /* ty=Tensor[(2), int64] */;
  let %in_shape_359: Tensor[(2), int32] = device_copy(meta[relay.Constant][892] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][198]) /* ty=Tensor[(2), int32] */;
  let %storage_01128: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1141]) /* ty=Storage[] */;
  let %tensor_0943: Tensor[(2), int64] = memory.alloc_tensor(%storage_01128, 0 /* ty=int64 */, meta[relay.Constant][893] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1141]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0192: Tensor[(2), int64] = %tensor_0943;
  %4401 = fn (%p0939: Tensor[(?, 4), float32], %p1398: Tensor[(2), int32], %p2234: Tensor[(2), int64], %p3123: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0939, %p1398, %p2234, %p3123, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %4402 = (%in_shape_0178, %in_shape_1114, %in_shape_277, %in_shape_359);
  %4403 = (%shape_func_out_0192,);
  let %shape_func192: () = vm.shape_func(%4401, %4402, %4403, meta[relay.attrs.ShapeFuncAttrs][192]) /* ty=() */;
  let %storage_01129: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1142]) /* ty=Storage[] */;
  let %tensor_0944: int64 = memory.alloc_tensor(%storage_01129, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1142]) /* ty=int64 */;
  %4404 = fn (%p0940: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0940) /* ty=int64 */
  };
  %4405 = (%shape_func_out_0192,);
  %4406 = (%tensor_0944,);
  let %v936: () = vm.invoke_tvm_op(%4404, %4405, %4406) /* ty=() */;
  let %storage_01130: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1143]) /* ty=Storage[] */;
  let %tensor_0945: int64 = memory.alloc_tensor(%storage_01130, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1143]) /* ty=int64 */;
  %4407 = fn (%p0941: int64, Primitive=1) -> int64 {
    multiply(%p0941, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4408 = (%tensor_0944,);
  %4409 = (%tensor_0945,);
  let %v937: () = vm.invoke_tvm_op(%4407, %4408, %4409) /* ty=() */;
  let %storage_01131: Storage[] = memory.alloc_storage(%tensor_0945, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1144]) /* ty=Storage[] */;
  let %out_0185: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01131, 0 /* ty=int64 */, %shape_func_out_0192, meta[relay.attrs.AllocTensorAttrs][1144]) /* ty=Tensor[(?, ?), float32] */;
  %4410 = (%x701, %x706, %x707, meta[relay.Constant][892] /* ty=Tensor[(2), int32] */);
  %4411 = (%out_0185,);
  let %v938: () = vm.invoke_tvm_op(%4401, %4410, %4411) /* ty=() */;
  let %x708: Tensor[(?, ?), float32] = %out_0185;
  let %storage_01132: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1145]) /* ty=Storage[] */;
  let %tensor_0946: Tensor[(2), int32] = memory.alloc_tensor(%storage_01132, 0 /* ty=int64 */, meta[relay.Constant][894] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1145]) /* ty=Tensor[(2), int32] */;
  %4414 = fn (%p0942: Tensor[(2), bool], %p1399: Tensor[(2), int32], %p2235: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %4412 = cast_like(%p2235, %p1399) /* ty=Tensor[(2), int32] */;
    %4413 = add(%p1399, %4412) /* ty=Tensor[(2), int32] */;
    where(%p0942, %4413, %p1399) /* ty=Tensor[(2), int32] */
  };
  %4415 = (meta[relay.Constant][895] /* ty=Tensor[(2), bool] */, meta[relay.Constant][896] /* ty=Tensor[(2), int32] */, %x705);
  %4416 = (%tensor_0946,);
  let %v939: () = vm.invoke_tvm_op(%4414, %4415, %4416) /* ty=() */;
  let %x709: Tensor[(2), int32] = %tensor_0946;
  let %in_shape_0179: Tensor[(2), int64] = vm.shape_of(%x701, meta[relay.attrs.ShapeOfAttrs][241]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1115: Tensor[(2), int32] = device_copy(%x709, meta[relay.attrs.DeviceCopyAttrs][199]) /* ty=Tensor[(2), int32] */;
  let %in_shape_278: Tensor[(2), int64] = device_copy(%x707, meta[relay.attrs.DeviceCopyAttrs][200]) /* ty=Tensor[(2), int64] */;
  let %in_shape_360: Tensor[(2), int32] = device_copy(meta[relay.Constant][897] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][201]) /* ty=Tensor[(2), int32] */;
  let %storage_01133: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1146]) /* ty=Storage[] */;
  let %tensor_0947: Tensor[(2), int64] = memory.alloc_tensor(%storage_01133, 0 /* ty=int64 */, meta[relay.Constant][898] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1146]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0193: Tensor[(2), int64] = %tensor_0947;
  %4417 = fn (%p0943: Tensor[(?, 4), float32], %p1400: Tensor[(2), int32], %p2236: Tensor[(2), int64], %p3124: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0943, %p1400, %p2236, %p3124, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %4418 = (%in_shape_0179, %in_shape_1115, %in_shape_278, %in_shape_360);
  %4419 = (%shape_func_out_0193,);
  let %shape_func193: () = vm.shape_func(%4417, %4418, %4419, meta[relay.attrs.ShapeFuncAttrs][193]) /* ty=() */;
  let %storage_01134: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1147]) /* ty=Storage[] */;
  let %tensor_0948: int64 = memory.alloc_tensor(%storage_01134, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1147]) /* ty=int64 */;
  %4420 = fn (%p0944: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0944) /* ty=int64 */
  };
  %4421 = (%shape_func_out_0193,);
  %4422 = (%tensor_0948,);
  let %v940: () = vm.invoke_tvm_op(%4420, %4421, %4422) /* ty=() */;
  let %storage_01135: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1148]) /* ty=Storage[] */;
  let %tensor_0949: int64 = memory.alloc_tensor(%storage_01135, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1148]) /* ty=int64 */;
  %4423 = fn (%p0945: int64, Primitive=1) -> int64 {
    multiply(%p0945, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4424 = (%tensor_0948,);
  %4425 = (%tensor_0949,);
  let %v941: () = vm.invoke_tvm_op(%4423, %4424, %4425) /* ty=() */;
  let %storage_01136: Storage[] = memory.alloc_storage(%tensor_0949, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1149]) /* ty=Storage[] */;
  let %out_0186: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01136, 0 /* ty=int64 */, %shape_func_out_0193, meta[relay.attrs.AllocTensorAttrs][1149]) /* ty=Tensor[(?, ?), float32] */;
  %4426 = (%x701, %x709, %x707, meta[relay.Constant][897] /* ty=Tensor[(2), int32] */);
  %4427 = (%out_0186,);
  let %v942: () = vm.invoke_tvm_op(%4417, %4426, %4427) /* ty=() */;
  let %x710: Tensor[(?, ?), float32] = %out_0186;
  let %storage_01137: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1150]) /* ty=Storage[] */;
  let %tensor_0950: Tensor[(2), int32] = memory.alloc_tensor(%storage_01137, 0 /* ty=int64 */, meta[relay.Constant][899] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1150]) /* ty=Tensor[(2), int32] */;
  %4430 = fn (%p0946: Tensor[(2), bool], %p1401: Tensor[(2), int32], %p2237: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %4428 = cast_like(%p2237, %p1401) /* ty=Tensor[(2), int32] */;
    %4429 = add(%p1401, %4428) /* ty=Tensor[(2), int32] */;
    where(%p0946, %4429, %p1401) /* ty=Tensor[(2), int32] */
  };
  %4431 = (meta[relay.Constant][900] /* ty=Tensor[(2), bool] */, meta[relay.Constant][901] /* ty=Tensor[(2), int32] */, %x705);
  %4432 = (%tensor_0950,);
  let %v943: () = vm.invoke_tvm_op(%4430, %4431, %4432) /* ty=() */;
  let %x711: Tensor[(2), int32] = %tensor_0950;
  let %in_shape_0180: Tensor[(2), int64] = vm.shape_of(%x701, meta[relay.attrs.ShapeOfAttrs][242]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1116: Tensor[(2), int32] = device_copy(%x711, meta[relay.attrs.DeviceCopyAttrs][202]) /* ty=Tensor[(2), int32] */;
  let %in_shape_279: Tensor[(2), int64] = device_copy(%x707, meta[relay.attrs.DeviceCopyAttrs][203]) /* ty=Tensor[(2), int64] */;
  let %in_shape_361: Tensor[(2), int32] = device_copy(meta[relay.Constant][902] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][204]) /* ty=Tensor[(2), int32] */;
  let %storage_01138: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1151]) /* ty=Storage[] */;
  let %tensor_0951: Tensor[(2), int64] = memory.alloc_tensor(%storage_01138, 0 /* ty=int64 */, meta[relay.Constant][903] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1151]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0194: Tensor[(2), int64] = %tensor_0951;
  %4433 = fn (%p0947: Tensor[(?, 4), float32], %p1402: Tensor[(2), int32], %p2238: Tensor[(2), int64], %p3125: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0947, %p1402, %p2238, %p3125, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %4434 = (%in_shape_0180, %in_shape_1116, %in_shape_279, %in_shape_361);
  %4435 = (%shape_func_out_0194,);
  let %shape_func194: () = vm.shape_func(%4433, %4434, %4435, meta[relay.attrs.ShapeFuncAttrs][194]) /* ty=() */;
  let %storage_01139: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1152]) /* ty=Storage[] */;
  let %tensor_0952: int64 = memory.alloc_tensor(%storage_01139, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1152]) /* ty=int64 */;
  %4436 = fn (%p0948: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0948) /* ty=int64 */
  };
  %4437 = (%shape_func_out_0194,);
  %4438 = (%tensor_0952,);
  let %v944: () = vm.invoke_tvm_op(%4436, %4437, %4438) /* ty=() */;
  let %storage_01140: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1153]) /* ty=Storage[] */;
  let %tensor_0953: int64 = memory.alloc_tensor(%storage_01140, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1153]) /* ty=int64 */;
  %4439 = fn (%p0949: int64, Primitive=1) -> int64 {
    multiply(%p0949, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4440 = (%tensor_0952,);
  %4441 = (%tensor_0953,);
  let %v945: () = vm.invoke_tvm_op(%4439, %4440, %4441) /* ty=() */;
  let %storage_01141: Storage[] = memory.alloc_storage(%tensor_0953, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1154]) /* ty=Storage[] */;
  let %out_0187: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01141, 0 /* ty=int64 */, %shape_func_out_0194, meta[relay.attrs.AllocTensorAttrs][1154]) /* ty=Tensor[(?, ?), float32] */;
  %4442 = (%x701, %x711, %x707, meta[relay.Constant][902] /* ty=Tensor[(2), int32] */);
  %4443 = (%out_0187,);
  let %v946: () = vm.invoke_tvm_op(%4433, %4442, %4443) /* ty=() */;
  let %x712: Tensor[(?, ?), float32] = %out_0187;
  let %storage_01142: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1155]) /* ty=Storage[] */;
  let %tensor_0954: Tensor[(2), int32] = memory.alloc_tensor(%storage_01142, 0 /* ty=int64 */, meta[relay.Constant][904] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1155]) /* ty=Tensor[(2), int32] */;
  %4446 = fn (%p0950: Tensor[(2), bool], %p1403: Tensor[(2), int32], %p2239: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %4444 = cast_like(%p2239, %p1403) /* ty=Tensor[(2), int32] */;
    %4445 = add(%p1403, %4444) /* ty=Tensor[(2), int32] */;
    where(%p0950, %4445, %p1403) /* ty=Tensor[(2), int32] */
  };
  %4447 = (meta[relay.Constant][905] /* ty=Tensor[(2), bool] */, meta[relay.Constant][906] /* ty=Tensor[(2), int32] */, %x705);
  %4448 = (%tensor_0954,);
  let %v947: () = vm.invoke_tvm_op(%4446, %4447, %4448) /* ty=() */;
  let %x713: Tensor[(2), int32] = %tensor_0954;
  let %in_shape_0181: Tensor[(2), int64] = vm.shape_of(%x701, meta[relay.attrs.ShapeOfAttrs][243]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1117: Tensor[(2), int32] = device_copy(%x713, meta[relay.attrs.DeviceCopyAttrs][205]) /* ty=Tensor[(2), int32] */;
  let %in_shape_280: Tensor[(2), int64] = device_copy(%x707, meta[relay.attrs.DeviceCopyAttrs][206]) /* ty=Tensor[(2), int64] */;
  let %in_shape_362: Tensor[(2), int32] = device_copy(meta[relay.Constant][907] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][207]) /* ty=Tensor[(2), int32] */;
  let %storage_01143: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1156]) /* ty=Storage[] */;
  let %tensor_0955: Tensor[(2), int64] = memory.alloc_tensor(%storage_01143, 0 /* ty=int64 */, meta[relay.Constant][908] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1156]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0195: Tensor[(2), int64] = %tensor_0955;
  %4449 = fn (%p0951: Tensor[(?, 4), float32], %p1404: Tensor[(2), int32], %p2240: Tensor[(2), int64], %p3126: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0951, %p1404, %p2240, %p3126, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %4450 = (%in_shape_0181, %in_shape_1117, %in_shape_280, %in_shape_362);
  %4451 = (%shape_func_out_0195,);
  let %shape_func195: () = vm.shape_func(%4449, %4450, %4451, meta[relay.attrs.ShapeFuncAttrs][195]) /* ty=() */;
  let %storage_01144: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1157]) /* ty=Storage[] */;
  let %tensor_0956: int64 = memory.alloc_tensor(%storage_01144, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1157]) /* ty=int64 */;
  %4452 = fn (%p0952: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0952) /* ty=int64 */
  };
  %4453 = (%shape_func_out_0195,);
  %4454 = (%tensor_0956,);
  let %v948: () = vm.invoke_tvm_op(%4452, %4453, %4454) /* ty=() */;
  let %storage_01145: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1158]) /* ty=Storage[] */;
  let %tensor_0957: int64 = memory.alloc_tensor(%storage_01145, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1158]) /* ty=int64 */;
  %4455 = fn (%p0953: int64, Primitive=1) -> int64 {
    multiply(%p0953, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4456 = (%tensor_0956,);
  %4457 = (%tensor_0957,);
  let %v949: () = vm.invoke_tvm_op(%4455, %4456, %4457) /* ty=() */;
  let %storage_01146: Storage[] = memory.alloc_storage(%tensor_0957, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1159]) /* ty=Storage[] */;
  let %out_0188: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01146, 0 /* ty=int64 */, %shape_func_out_0195, meta[relay.attrs.AllocTensorAttrs][1159]) /* ty=Tensor[(?, ?), float32] */;
  %4458 = (%x701, %x713, %x707, meta[relay.Constant][907] /* ty=Tensor[(2), int32] */);
  %4459 = (%out_0188,);
  let %v950: () = vm.invoke_tvm_op(%4449, %4458, %4459) /* ty=() */;
  let %x714: Tensor[(?, ?), float32] = %out_0188;
  let %storage_01147: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1160]) /* ty=Storage[] */;
  let %tensor_0958: Tensor[(4), int32] = memory.alloc_tensor(%storage_01147, 0 /* ty=int64 */, meta[relay.Constant][909] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1160]) /* ty=Tensor[(4), int32] */;
  %4460 = fn (%p0954: Tensor[(?, 1, ?, ?), float32], Primitive=1) -> Tensor[(4), int32] {
    shape_of(%p0954, dtype="int32") /* ty=Tensor[(4), int32] */
  };
  %4461 = (%x699,);
  %4462 = (%tensor_0958,);
  let %v951: () = vm.invoke_tvm_op(%4460, %4461, %4462) /* ty=() */;
  let %x715: Tensor[(4), int32] = %tensor_0958;
  let %storage_01148: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1161]) /* ty=Storage[] */;
  let %tensor_0959: Tensor[(2), int32] = memory.alloc_tensor(%storage_01148, 0 /* ty=int64 */, meta[relay.Constant][910] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1161]) /* ty=Tensor[(2), int32] */;
  %4465 = fn (%p0955: Tensor[(2), bool], %p1405: Tensor[(2), int32], %p2241: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %4463 = cast_like(%p2241, %p1405) /* ty=Tensor[(2), int32] */;
    %4464 = add(%p1405, %4463) /* ty=Tensor[(2), int32] */;
    where(%p0955, %4464, %p1405) /* ty=Tensor[(2), int32] */
  };
  %4466 = (meta[relay.Constant][911] /* ty=Tensor[(2), bool] */, meta[relay.Constant][912] /* ty=Tensor[(2), int32] */, %x705);
  %4467 = (%tensor_0959,);
  let %v952: () = vm.invoke_tvm_op(%4465, %4466, %4467) /* ty=() */;
  let %x716: Tensor[(2), int32] = %tensor_0959;
  let %in_shape_0182: Tensor[(2), int64] = vm.shape_of(%x701, meta[relay.attrs.ShapeOfAttrs][244]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1118: Tensor[(2), int32] = device_copy(%x716, meta[relay.attrs.DeviceCopyAttrs][208]) /* ty=Tensor[(2), int32] */;
  let %in_shape_281: Tensor[(2), int64] = device_copy(%x707, meta[relay.attrs.DeviceCopyAttrs][209]) /* ty=Tensor[(2), int64] */;
  let %in_shape_363: Tensor[(2), int32] = device_copy(meta[relay.Constant][913] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][210]) /* ty=Tensor[(2), int32] */;
  let %storage_01149: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1162]) /* ty=Storage[] */;
  let %tensor_0960: Tensor[(2), int64] = memory.alloc_tensor(%storage_01149, 0 /* ty=int64 */, meta[relay.Constant][914] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1162]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0196: Tensor[(2), int64] = %tensor_0960;
  %4468 = fn (%p0956: Tensor[(?, 4), float32], %p1406: Tensor[(2), int32], %p2242: Tensor[(2), int64], %p3127: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0956, %p1406, %p2242, %p3127, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %4469 = (%in_shape_0182, %in_shape_1118, %in_shape_281, %in_shape_363);
  %4470 = (%shape_func_out_0196,);
  let %shape_func196: () = vm.shape_func(%4468, %4469, %4470, meta[relay.attrs.ShapeFuncAttrs][196]) /* ty=() */;
  let %storage_01150: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1163]) /* ty=Storage[] */;
  let %tensor_0961: int64 = memory.alloc_tensor(%storage_01150, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1163]) /* ty=int64 */;
  %4471 = fn (%p0957: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0957) /* ty=int64 */
  };
  %4472 = (%shape_func_out_0196,);
  %4473 = (%tensor_0961,);
  let %v953: () = vm.invoke_tvm_op(%4471, %4472, %4473) /* ty=() */;
  let %storage_01151: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1164]) /* ty=Storage[] */;
  let %tensor_0962: int64 = memory.alloc_tensor(%storage_01151, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1164]) /* ty=int64 */;
  %4474 = fn (%p0958: int64, Primitive=1) -> int64 {
    multiply(%p0958, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4475 = (%tensor_0961,);
  %4476 = (%tensor_0962,);
  let %v954: () = vm.invoke_tvm_op(%4474, %4475, %4476) /* ty=() */;
  let %storage_01152: Storage[] = memory.alloc_storage(%tensor_0962, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1165]) /* ty=Storage[] */;
  let %out_0189: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01152, 0 /* ty=int64 */, %shape_func_out_0196, meta[relay.attrs.AllocTensorAttrs][1165]) /* ty=Tensor[(?, ?), float32] */;
  %4477 = (%x701, %x716, %x707, meta[relay.Constant][913] /* ty=Tensor[(2), int32] */);
  %4478 = (%out_0189,);
  let %v955: () = vm.invoke_tvm_op(%4468, %4477, %4478) /* ty=() */;
  let %x717: Tensor[(?, ?), float32] = %out_0189;
  let %storage_01153: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1166]) /* ty=Storage[] */;
  let %tensor_0963: Tensor[(2), int32] = memory.alloc_tensor(%storage_01153, 0 /* ty=int64 */, meta[relay.Constant][915] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1166]) /* ty=Tensor[(2), int32] */;
  %4481 = fn (%p0959: Tensor[(2), bool], %p1407: Tensor[(2), int32], %p2243: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %4479 = cast_like(%p2243, %p1407) /* ty=Tensor[(2), int32] */;
    %4480 = add(%p1407, %4479) /* ty=Tensor[(2), int32] */;
    where(%p0959, %4480, %p1407) /* ty=Tensor[(2), int32] */
  };
  %4482 = (meta[relay.Constant][916] /* ty=Tensor[(2), bool] */, meta[relay.Constant][917] /* ty=Tensor[(2), int32] */, %x705);
  %4483 = (%tensor_0963,);
  let %v956: () = vm.invoke_tvm_op(%4481, %4482, %4483) /* ty=() */;
  let %x718: Tensor[(2), int32] = %tensor_0963;
  let %in_shape_0183: Tensor[(2), int64] = vm.shape_of(%x701, meta[relay.attrs.ShapeOfAttrs][245]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1119: Tensor[(2), int32] = device_copy(%x718, meta[relay.attrs.DeviceCopyAttrs][211]) /* ty=Tensor[(2), int32] */;
  let %in_shape_282: Tensor[(2), int64] = device_copy(%x707, meta[relay.attrs.DeviceCopyAttrs][212]) /* ty=Tensor[(2), int64] */;
  let %in_shape_364: Tensor[(2), int32] = device_copy(meta[relay.Constant][918] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][213]) /* ty=Tensor[(2), int32] */;
  let %storage_01154: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1167]) /* ty=Storage[] */;
  let %tensor_0964: Tensor[(2), int64] = memory.alloc_tensor(%storage_01154, 0 /* ty=int64 */, meta[relay.Constant][919] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1167]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0197: Tensor[(2), int64] = %tensor_0964;
  %4484 = fn (%p0960: Tensor[(?, 4), float32], %p1408: Tensor[(2), int32], %p2244: Tensor[(2), int64], %p3128: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0960, %p1408, %p2244, %p3128, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %4485 = (%in_shape_0183, %in_shape_1119, %in_shape_282, %in_shape_364);
  %4486 = (%shape_func_out_0197,);
  let %shape_func197: () = vm.shape_func(%4484, %4485, %4486, meta[relay.attrs.ShapeFuncAttrs][197]) /* ty=() */;
  let %storage_01155: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1168]) /* ty=Storage[] */;
  let %tensor_0965: int64 = memory.alloc_tensor(%storage_01155, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1168]) /* ty=int64 */;
  %4487 = fn (%p0961: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0961) /* ty=int64 */
  };
  %4488 = (%shape_func_out_0197,);
  %4489 = (%tensor_0965,);
  let %v957: () = vm.invoke_tvm_op(%4487, %4488, %4489) /* ty=() */;
  let %storage_01156: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1169]) /* ty=Storage[] */;
  let %tensor_0966: int64 = memory.alloc_tensor(%storage_01156, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1169]) /* ty=int64 */;
  %4490 = fn (%p0962: int64, Primitive=1) -> int64 {
    multiply(%p0962, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4491 = (%tensor_0965,);
  %4492 = (%tensor_0966,);
  let %v958: () = vm.invoke_tvm_op(%4490, %4491, %4492) /* ty=() */;
  let %storage_01157: Storage[] = memory.alloc_storage(%tensor_0966, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1170]) /* ty=Storage[] */;
  let %out_0190: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01157, 0 /* ty=int64 */, %shape_func_out_0197, meta[relay.attrs.AllocTensorAttrs][1170]) /* ty=Tensor[(?, ?), float32] */;
  %4493 = (%x701, %x718, %x707, meta[relay.Constant][918] /* ty=Tensor[(2), int32] */);
  %4494 = (%out_0190,);
  let %v959: () = vm.invoke_tvm_op(%4484, %4493, %4494) /* ty=() */;
  let %x719: Tensor[(?, ?), float32] = %out_0190;
  let %storage_01158: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1171]) /* ty=Storage[] */;
  let %tensor_0967: Tensor[(2), int32] = memory.alloc_tensor(%storage_01158, 0 /* ty=int64 */, meta[relay.Constant][920] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1171]) /* ty=Tensor[(2), int32] */;
  %4497 = fn (%p0963: Tensor[(2), bool], %p1409: Tensor[(2), int32], %p2245: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %4495 = cast_like(%p2245, %p1409) /* ty=Tensor[(2), int32] */;
    %4496 = add(%p1409, %4495) /* ty=Tensor[(2), int32] */;
    where(%p0963, %4496, %p1409) /* ty=Tensor[(2), int32] */
  };
  %4498 = (meta[relay.Constant][921] /* ty=Tensor[(2), bool] */, meta[relay.Constant][922] /* ty=Tensor[(2), int32] */, %x705);
  %4499 = (%tensor_0967,);
  let %v960: () = vm.invoke_tvm_op(%4497, %4498, %4499) /* ty=() */;
  let %x720: Tensor[(2), int32] = %tensor_0967;
  let %in_shape_0184: Tensor[(2), int64] = vm.shape_of(%x701, meta[relay.attrs.ShapeOfAttrs][246]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1120: Tensor[(2), int32] = device_copy(%x720, meta[relay.attrs.DeviceCopyAttrs][214]) /* ty=Tensor[(2), int32] */;
  let %in_shape_283: Tensor[(2), int64] = device_copy(%x707, meta[relay.attrs.DeviceCopyAttrs][215]) /* ty=Tensor[(2), int64] */;
  let %in_shape_365: Tensor[(2), int32] = device_copy(meta[relay.Constant][923] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][216]) /* ty=Tensor[(2), int32] */;
  let %storage_01159: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1172]) /* ty=Storage[] */;
  let %tensor_0968: Tensor[(2), int64] = memory.alloc_tensor(%storage_01159, 0 /* ty=int64 */, meta[relay.Constant][924] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1172]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0198: Tensor[(2), int64] = %tensor_0968;
  %4500 = fn (%p0964: Tensor[(?, 4), float32], %p1410: Tensor[(2), int32], %p2246: Tensor[(2), int64], %p3129: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0964, %p1410, %p2246, %p3129, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %4501 = (%in_shape_0184, %in_shape_1120, %in_shape_283, %in_shape_365);
  %4502 = (%shape_func_out_0198,);
  let %shape_func198: () = vm.shape_func(%4500, %4501, %4502, meta[relay.attrs.ShapeFuncAttrs][198]) /* ty=() */;
  let %storage_01160: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1173]) /* ty=Storage[] */;
  let %tensor_0969: int64 = memory.alloc_tensor(%storage_01160, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1173]) /* ty=int64 */;
  %4503 = fn (%p0965: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0965) /* ty=int64 */
  };
  %4504 = (%shape_func_out_0198,);
  %4505 = (%tensor_0969,);
  let %v961: () = vm.invoke_tvm_op(%4503, %4504, %4505) /* ty=() */;
  let %storage_01161: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1174]) /* ty=Storage[] */;
  let %tensor_0970: int64 = memory.alloc_tensor(%storage_01161, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1174]) /* ty=int64 */;
  %4506 = fn (%p0966: int64, Primitive=1) -> int64 {
    multiply(%p0966, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4507 = (%tensor_0969,);
  %4508 = (%tensor_0970,);
  let %v962: () = vm.invoke_tvm_op(%4506, %4507, %4508) /* ty=() */;
  let %storage_01162: Storage[] = memory.alloc_storage(%tensor_0970, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1175]) /* ty=Storage[] */;
  let %out_0191: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01162, 0 /* ty=int64 */, %shape_func_out_0198, meta[relay.attrs.AllocTensorAttrs][1175]) /* ty=Tensor[(?, ?), float32] */;
  %4509 = (%x701, %x720, %x707, meta[relay.Constant][923] /* ty=Tensor[(2), int32] */);
  %4510 = (%out_0191,);
  let %v963: () = vm.invoke_tvm_op(%4500, %4509, %4510) /* ty=() */;
  let %x721: Tensor[(?, ?), float32] = %out_0191;
  let %storage_01163: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1176]) /* ty=Storage[] */;
  let %tensor_0971: Tensor[(2), int32] = memory.alloc_tensor(%storage_01163, 0 /* ty=int64 */, meta[relay.Constant][925] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1176]) /* ty=Tensor[(2), int32] */;
  %4513 = fn (%p0967: Tensor[(2), bool], %p1411: Tensor[(2), int32], %p2247: Tensor[(2), int32], Primitive=1) -> Tensor[(2), int32] {
    %4511 = cast_like(%p2247, %p1411) /* ty=Tensor[(2), int32] */;
    %4512 = add(%p1411, %4511) /* ty=Tensor[(2), int32] */;
    where(%p0967, %4512, %p1411) /* ty=Tensor[(2), int32] */
  };
  %4514 = (meta[relay.Constant][926] /* ty=Tensor[(2), bool] */, meta[relay.Constant][927] /* ty=Tensor[(2), int32] */, %x705);
  %4515 = (%tensor_0971,);
  let %v964: () = vm.invoke_tvm_op(%4513, %4514, %4515) /* ty=() */;
  let %x722: Tensor[(2), int32] = %tensor_0971;
  let %in_shape_0185: Tensor[(2), int64] = vm.shape_of(%x701, meta[relay.attrs.ShapeOfAttrs][247]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1121: Tensor[(2), int32] = device_copy(%x722, meta[relay.attrs.DeviceCopyAttrs][217]) /* ty=Tensor[(2), int32] */;
  let %in_shape_284: Tensor[(2), int64] = device_copy(%x707, meta[relay.attrs.DeviceCopyAttrs][218]) /* ty=Tensor[(2), int64] */;
  let %in_shape_366: Tensor[(2), int32] = device_copy(meta[relay.Constant][928] /* ty=Tensor[(2), int32] */, meta[relay.attrs.DeviceCopyAttrs][219]) /* ty=Tensor[(2), int32] */;
  let %storage_01164: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1177]) /* ty=Storage[] */;
  let %tensor_0972: Tensor[(2), int64] = memory.alloc_tensor(%storage_01164, 0 /* ty=int64 */, meta[relay.Constant][929] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1177]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0199: Tensor[(2), int64] = %tensor_0972;
  %4516 = fn (%p0968: Tensor[(?, 4), float32], %p1412: Tensor[(2), int32], %p2248: Tensor[(2), int64], %p3130: Tensor[(2), int32], Primitive=1) -> Tensor[(?, ?), float32] {
    dyn.strided_slice(%p0968, %p1412, %p2248, %p3130, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */
  };
  %4517 = (%in_shape_0185, %in_shape_1121, %in_shape_284, %in_shape_366);
  %4518 = (%shape_func_out_0199,);
  let %shape_func199: () = vm.shape_func(%4516, %4517, %4518, meta[relay.attrs.ShapeFuncAttrs][199]) /* ty=() */;
  let %storage_01165: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1178]) /* ty=Storage[] */;
  let %tensor_0973: int64 = memory.alloc_tensor(%storage_01165, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1178]) /* ty=int64 */;
  %4519 = fn (%p0969: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0969) /* ty=int64 */
  };
  %4520 = (%shape_func_out_0199,);
  %4521 = (%tensor_0973,);
  let %v965: () = vm.invoke_tvm_op(%4519, %4520, %4521) /* ty=() */;
  let %storage_01166: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1179]) /* ty=Storage[] */;
  let %tensor_0974: int64 = memory.alloc_tensor(%storage_01166, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1179]) /* ty=int64 */;
  %4522 = fn (%p0970: int64, Primitive=1) -> int64 {
    multiply(%p0970, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4523 = (%tensor_0973,);
  %4524 = (%tensor_0974,);
  let %v966: () = vm.invoke_tvm_op(%4522, %4523, %4524) /* ty=() */;
  let %storage_01167: Storage[] = memory.alloc_storage(%tensor_0974, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1180]) /* ty=Storage[] */;
  let %out_0192: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_01167, 0 /* ty=int64 */, %shape_func_out_0199, meta[relay.attrs.AllocTensorAttrs][1180]) /* ty=Tensor[(?, ?), float32] */;
  %4525 = (%x701, %x722, %x707, meta[relay.Constant][928] /* ty=Tensor[(2), int32] */);
  %4526 = (%out_0192,);
  let %v967: () = vm.invoke_tvm_op(%4516, %4525, %4526) /* ty=() */;
  let %x723: Tensor[(?, ?), float32] = %out_0192;
  let %in_shape_0186: Tensor[(2), int64] = vm.shape_of(%x708, meta[relay.attrs.ShapeOfAttrs][248]) /* ty=Tensor[(2), int64] */;
  let %in_shape_1122: Tensor[(2), int64] = vm.shape_of(%x710, meta[relay.attrs.ShapeOfAttrs][249]) /* ty=Tensor[(2), int64] */;
  let %in_shape_285: Tensor[(2), int64] = vm.shape_of(%x712, meta[relay.attrs.ShapeOfAttrs][250]) /* ty=Tensor[(2), int64] */;
  let %in_shape_367: Tensor[(2), int64] = vm.shape_of(%x714, meta[relay.attrs.ShapeOfAttrs][251]) /* ty=Tensor[(2), int64] */;
  let %in_shape_52: Tensor[(2), int64] = vm.shape_of(%x717, meta[relay.attrs.ShapeOfAttrs][252]) /* ty=Tensor[(2), int64] */;
  let %in_shape_61: Tensor[(2), int64] = vm.shape_of(%x719, meta[relay.attrs.ShapeOfAttrs][253]) /* ty=Tensor[(2), int64] */;
  let %in_shape_71: Tensor[(2), int64] = vm.shape_of(%x721, meta[relay.attrs.ShapeOfAttrs][254]) /* ty=Tensor[(2), int64] */;
  let %in_shape_81: Tensor[(2), int64] = vm.shape_of(%x723, meta[relay.attrs.ShapeOfAttrs][255]) /* ty=Tensor[(2), int64] */;
  let %storage_01168: Storage[] = memory.alloc_storage(16 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1181]) /* ty=Storage[] */;
  let %tensor_0975: Tensor[(2), int64] = memory.alloc_tensor(%storage_01168, 0 /* ty=int64 */, meta[relay.Constant][930] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1181]) /* ty=Tensor[(2), int64] */;
  let %shape_func_out_0200: Tensor[(2), int64] = %tensor_0975;
  %4558 = fn (%p0971: Tensor[(?, ?), float32], %p1413: Tensor[(?, ?), float32], %p2249: Tensor[(?, ?), float32], %p3131: Tensor[(?, ?), float32], %p460: Tensor[(4), int32], %p520: Tensor[(?, ?), float32], %p63: Tensor[(?, ?), float32], %p73: Tensor[(?, ?), float32], %p83: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, 4), int64] {
    %4527 = take(%p0971, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %4528 = take(%p1413, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %4529 = add(%4527, %4528) /* ty=Tensor[(?), float32] */;
    %4530 = multiply(%4529, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %4531 = take(%p2249, 2 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %4532 = take(%p3131, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %4533 = subtract(%4531, %4532) /* ty=Tensor[(?), float32] */;
    %4534 = multiply(%4533, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %4535 = take(%p460, 3 /* ty=int32 */, axis=0) /* ty=int32 */;
    %4536 = add(%4535, 2 /* ty=int32 */) /* ty=int32 */;
    %4537 = cast(%4536, dtype="int64") /* ty=int64 */;
    %4538 = cast(%4537, dtype="float32") /* ty=float32 */;
    %4539 = cast(%4535, dtype="int64") /* ty=int64 */;
    %4540 = cast(%4539, dtype="float32") /* ty=float32 */;
    %4541 = divide(%4538, %4540) /* ty=float32 */;
    %4542 = multiply(%4534, %4541) /* ty=Tensor[(?), float32] */;
    %4543 = subtract(%4530, %4542) /* ty=Tensor[(?), float32] */;
    %4544 = take(%p520, 3 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %4545 = take(%p63, 1 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %4546 = add(%4544, %4545) /* ty=Tensor[(?), float32] */;
    %4547 = multiply(%4546, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %4548 = take(%p73, 3 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %4549 = take(%p83, 1 /* ty=int32 */, axis=1) /* ty=Tensor[(?), float32] */;
    %4550 = subtract(%4548, %4549) /* ty=Tensor[(?), float32] */;
    %4551 = multiply(%4550, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %4552 = multiply(%4551, %4541) /* ty=Tensor[(?), float32] */;
    %4553 = subtract(%4547, %4552) /* ty=Tensor[(?), float32] */;
    %4554 = add(%4530, %4542) /* ty=Tensor[(?), float32] */;
    %4555 = add(%4547, %4552) /* ty=Tensor[(?), float32] */;
    %4556 = (%4543, %4553, %4554, %4555);
    %4557 = stack(%4556, axis=1) /* ty=Tensor[(?, 4), float32] */;
    cast(%4557, dtype="int64") /* ty=Tensor[(?, 4), int64] */
  };
  %4559 = (%in_shape_0186, %in_shape_1122, %in_shape_285, %in_shape_367, meta[relay.Constant][931] /* ty=Tensor[(1), int64] */, %in_shape_52, %in_shape_61, %in_shape_71, %in_shape_81);
  %4560 = (%shape_func_out_0200,);
  let %shape_func200: () = vm.shape_func(%4558, %4559, %4560, meta[relay.attrs.ShapeFuncAttrs][200]) /* ty=() */;
  let %storage_01169: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1182]) /* ty=Storage[] */;
  let %tensor_0976: int64 = memory.alloc_tensor(%storage_01169, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1182]) /* ty=int64 */;
  %4561 = fn (%p0972: Tensor[(2), int64], Primitive=1) -> int64 {
    prod(%p0972) /* ty=int64 */
  };
  %4562 = (%shape_func_out_0200,);
  %4563 = (%tensor_0976,);
  let %v968: () = vm.invoke_tvm_op(%4561, %4562, %4563) /* ty=() */;
  let %storage_01170: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1183]) /* ty=Storage[] */;
  let %tensor_0977: int64 = memory.alloc_tensor(%storage_01170, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1183]) /* ty=int64 */;
  %4564 = fn (%p0973: int64, Primitive=1) -> int64 {
    multiply(%p0973, 8 /* ty=int64 */) /* ty=int64 */
  };
  %4565 = (%tensor_0976,);
  %4566 = (%tensor_0977,);
  let %v969: () = vm.invoke_tvm_op(%4564, %4565, %4566) /* ty=() */;
  let %storage_01171: Storage[] = memory.alloc_storage(%tensor_0977, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1184]) /* ty=Storage[] */;
  let %out_0193: Tensor[(?, 4), int64] = memory.alloc_tensor(%storage_01171, 0 /* ty=int64 */, %shape_func_out_0200, meta[relay.attrs.AllocTensorAttrs][1184]) /* ty=Tensor[(?, 4), int64] */;
  %4567 = (%x708, %x710, %x712, %x714, %x715, %x717, %x719, %x721, %x723);
  %4568 = (%out_0193,);
  let %v970: () = vm.invoke_tvm_op(%4558, %4567, %4568) /* ty=() */;
  let %x724: Tensor[(?, 4), int64] = %out_0193;
  let %x725: fn (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %while_loop: fn (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = @lifted_name8408068344935463616(%x700, meta[relay.Constant][478] /* ty=Tensor[(1), int32] */) /* ty=fn (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) */;
  %while_loop;
  let %x726: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = %x725(0 /* ty=int32 */, %x704, %x700, %x724) /* ty=(int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) */;
  let %x727: List[Tensor[(?, ?), float32]] = %x726.1;
  let %x728: List[static_tensor_float32_any_any_t[]] = @map(%x703, %x727) /* ty=List[static_tensor_float32_any_any_t[]] */;
  let %x729: static_tensor_float32_any_any_any_t[] = @tensor_array_stack_float32_any_any(%x728) /* ty=static_tensor_float32_any_any_any_t[] */;
  let %x730: Tensor[(?, ?, ?), float32] = @tensor_get_data_float32_any_any_any(%x729) /* ty=Tensor[(?, ?, ?), float32] */;
  let %storage_01172: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1185]) /* ty=Storage[] */;
  let %tensor_0978: Tensor[(3), int32] = memory.alloc_tensor(%storage_01172, 0 /* ty=int64 */, meta[relay.Constant][932] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1185]) /* ty=Tensor[(3), int32] */;
  %4569 = fn (%p0974: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(3), int32] {
    shape_of(%p0974, dtype="int32") /* ty=Tensor[(3), int32] */
  };
  %4570 = (%x730,);
  %4571 = (%tensor_0978,);
  let %v971: () = vm.invoke_tvm_op(%4569, %4570, %4571) /* ty=() */;
  let %x731: Tensor[(3), int32] = %tensor_0978;
  let %storage_01173: Storage[] = memory.alloc_storage(12 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1186]) /* ty=Storage[] */;
  let %tensor_0979: Tensor[(3), int32] = memory.alloc_tensor(%storage_01173, 0 /* ty=int64 */, meta[relay.Constant][933] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1186]) /* ty=Tensor[(3), int32] */;
  %4574 = fn (%p0975: Tensor[(3), bool], %p1414: Tensor[(3), int32], %p2250: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int32] {
    %4572 = cast_like(%p2250, %p1414) /* ty=Tensor[(3), int32] */;
    %4573 = add(%p1414, %4572) /* ty=Tensor[(3), int32] */;
    where(%p0975, %4573, %p1414) /* ty=Tensor[(3), int32] */
  };
  %4575 = (meta[relay.Constant][934] /* ty=Tensor[(3), bool] */, meta[relay.Constant][935] /* ty=Tensor[(3), int32] */, %x731);
  %4576 = (%tensor_0979,);
  let %v972: () = vm.invoke_tvm_op(%4574, %4575, %4576) /* ty=() */;
  let %x732: Tensor[(3), int32] = %tensor_0979;
  let %storage_01174: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1187]) /* ty=Storage[] */;
  let %tensor_0980: Tensor[(3), int64] = memory.alloc_tensor(%storage_01174, 0 /* ty=int64 */, meta[relay.Constant][936] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1187]) /* ty=Tensor[(3), int64] */;
  %4577 = fn (%p0976: Tensor[(3), int32], Primitive=1) -> Tensor[(3), int64] {
    cast(%p0976, dtype="int64") /* ty=Tensor[(3), int64] */
  };
  %4578 = (%x731,);
  %4579 = (%tensor_0980,);
  let %v973: () = vm.invoke_tvm_op(%4577, %4578, %4579) /* ty=() */;
  let %x733: Tensor[(3), int64] = %tensor_0980;
  let %in_shape_0187: Tensor[(3), int64] = vm.shape_of(%x730, meta[relay.attrs.ShapeOfAttrs][256]) /* ty=Tensor[(3), int64] */;
  let %in_shape_1123: Tensor[(3), int32] = device_copy(%x732, meta[relay.attrs.DeviceCopyAttrs][220]) /* ty=Tensor[(3), int32] */;
  let %in_shape_286: Tensor[(3), int64] = device_copy(%x733, meta[relay.attrs.DeviceCopyAttrs][221]) /* ty=Tensor[(3), int64] */;
  let %in_shape_368: Tensor[(3), int32] = device_copy(meta[relay.Constant][937] /* ty=Tensor[(3), int32] */, meta[relay.attrs.DeviceCopyAttrs][222]) /* ty=Tensor[(3), int32] */;
  let %storage_01175: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1188]) /* ty=Storage[] */;
  let %tensor_0981: Tensor[(3), int64] = memory.alloc_tensor(%storage_01175, 0 /* ty=int64 */, meta[relay.Constant][938] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1188]) /* ty=Tensor[(3), int64] */;
  let %shape_func_out_0201: Tensor[(3), int64] = %tensor_0981;
  %4580 = fn (%p0977: Tensor[(?, ?, ?), float32], %p1415: Tensor[(3), int32], %p2251: Tensor[(3), int64], %p3132: Tensor[(3), int32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
    dyn.strided_slice(%p0977, %p1415, %p2251, %p3132, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */
  };
  %4581 = (%in_shape_0187, %in_shape_1123, %in_shape_286, %in_shape_368);
  %4582 = (%shape_func_out_0201,);
  let %shape_func201: () = vm.shape_func(%4580, %4581, %4582, meta[relay.attrs.ShapeFuncAttrs][201]) /* ty=() */;
  let %storage_01176: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1189]) /* ty=Storage[] */;
  let %tensor_0982: int64 = memory.alloc_tensor(%storage_01176, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1189]) /* ty=int64 */;
  %4583 = fn (%p0978: Tensor[(3), int64], Primitive=1) -> int64 {
    prod(%p0978) /* ty=int64 */
  };
  %4584 = (%shape_func_out_0201,);
  %4585 = (%tensor_0982,);
  let %v974: () = vm.invoke_tvm_op(%4583, %4584, %4585) /* ty=() */;
  let %storage_01177: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1190]) /* ty=Storage[] */;
  let %tensor_0983: int64 = memory.alloc_tensor(%storage_01177, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1190]) /* ty=int64 */;
  %4586 = fn (%p0979: int64, Primitive=1) -> int64 {
    multiply(%p0979, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4587 = (%tensor_0982,);
  %4588 = (%tensor_0983,);
  let %v975: () = vm.invoke_tvm_op(%4586, %4587, %4588) /* ty=() */;
  let %storage_01178: Storage[] = memory.alloc_storage(%tensor_0983, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1191]) /* ty=Storage[] */;
  let %out_0194: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_01178, 0 /* ty=int64 */, %shape_func_out_0201, meta[relay.attrs.AllocTensorAttrs][1191]) /* ty=Tensor[(?, ?, ?), float32] */;
  %4589 = (%x730, %x732, %x733, meta[relay.Constant][937] /* ty=Tensor[(3), int32] */);
  %4590 = (%out_0194,);
  let %v976: () = vm.invoke_tvm_op(%4580, %4589, %4590) /* ty=() */;
  let %x734: Tensor[(?, ?, ?), float32] = %out_0194;
  let %in_shape_0188: Tensor[(3), int64] = vm.shape_of(%x734, meta[relay.attrs.ShapeOfAttrs][257]) /* ty=Tensor[(3), int64] */;
  let %storage_01179: Storage[] = memory.alloc_storage(32 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1192]) /* ty=Storage[] */;
  let %tensor_0984: Tensor[(4), int64] = memory.alloc_tensor(%storage_01179, 0 /* ty=int64 */, meta[relay.Constant][939] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1192]) /* ty=Tensor[(4), int64] */;
  let %shape_func_out_0202: Tensor[(4), int64] = %tensor_0984;
  %4591 = fn (%p0980: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(?, 1, ?, ?), float32] {
    expand_dims(%p0980, axis=1) /* ty=Tensor[(?, 1, ?, ?), float32] */
  };
  %4592 = (%in_shape_0188,);
  %4593 = (%shape_func_out_0202,);
  let %shape_func202: () = vm.shape_func(%4591, %4592, %4593, meta[relay.attrs.ShapeFuncAttrs][202]) /* ty=() */;
  let %storage_01180: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1193]) /* ty=Storage[] */;
  let %tensor_0985: int64 = memory.alloc_tensor(%storage_01180, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1193]) /* ty=int64 */;
  %4594 = fn (%p0981: Tensor[(4), int64], Primitive=1) -> int64 {
    prod(%p0981) /* ty=int64 */
  };
  %4595 = (%shape_func_out_0202,);
  %4596 = (%tensor_0985,);
  let %v977: () = vm.invoke_tvm_op(%4594, %4595, %4596) /* ty=() */;
  let %storage_01181: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1194]) /* ty=Storage[] */;
  let %tensor_0986: int64 = memory.alloc_tensor(%storage_01181, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1194]) /* ty=int64 */;
  %4597 = fn (%p0982: int64, Primitive=1) -> int64 {
    multiply(%p0982, 4 /* ty=int64 */) /* ty=int64 */
  };
  %4598 = (%tensor_0985,);
  %4599 = (%tensor_0986,);
  let %v978: () = vm.invoke_tvm_op(%4597, %4598, %4599) /* ty=() */;
  let %storage_01182: Storage[] = memory.alloc_storage(%tensor_0986, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1195]) /* ty=Storage[] */;
  let %out_0195: Tensor[(?, 1, ?, ?), float32] = memory.alloc_tensor(%storage_01182, 0 /* ty=int64 */, %shape_func_out_0202, meta[relay.attrs.AllocTensorAttrs][1195]) /* ty=Tensor[(?, 1, ?, ?), float32] */;
  %4600 = (%x734,);
  %4601 = (%out_0195,);
  let %v979: () = vm.invoke_tvm_op(%4591, %4600, %4601) /* ty=() */;
  let %x735: Tensor[(?, 1, ?, ?), float32] = %out_0195;
  let %x736: (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) = (%x701, %x702, %x693, %x735);
  %x736;
  %x613;
  %x611;
  %x93
}

def @tensor_concatenate_float32_any_any_any(%x737: static_tensor_float32_any_any_any_t[], %y: static_tensor_float32_any_any_any_t[]) -> static_tensor_float32_any_any_any_t[] {
  let %x738: static_tensor_float32_any_any_any_t[] = match? (%x737) {
    tensor_constructor_float32_any_any_any(%t1: Tensor[(?, ?, ?), float32]) => {
      let %x739: static_tensor_float32_any_any_any_t[] = match? (%y) {
        tensor_constructor_float32_any_any_any(%t2: Tensor[(?, ?, ?), float32]) => {
          let %in_shape_0189: Tensor[(3), int64] = vm.shape_of(%t1, meta[relay.attrs.ShapeOfAttrs][258]) /* ty=Tensor[(3), int64] */;
          let %in_shape_1124: Tensor[(3), int64] = vm.shape_of(%t2, meta[relay.attrs.ShapeOfAttrs][259]) /* ty=Tensor[(3), int64] */;
          let %storage_01183: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1196]) /* ty=Storage[] */;
          let %tensor_0987: Tensor[(3), int64] = memory.alloc_tensor(%storage_01183, 0 /* ty=int64 */, meta[relay.Constant][940] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1196]) /* ty=Tensor[(3), int64] */;
          let %shape_func_out_0203: Tensor[(3), int64] = %tensor_0987;
          %4603 = fn (%p0983: Tensor[(?, ?, ?), float32], %p1416: Tensor[(?, ?, ?), float32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
            %4602 = (%p0983, %p1416);
            concatenate(%4602) /* ty=Tensor[(?, ?, ?), float32] */
          };
          %4604 = (%in_shape_0189, %in_shape_1124);
          %4605 = (%shape_func_out_0203,);
          let %shape_func203: () = vm.shape_func(%4603, %4604, %4605, meta[relay.attrs.ShapeFuncAttrs][203]) /* ty=() */;
          let %storage_01184: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1197]) /* ty=Storage[] */;
          let %tensor_0988: int64 = memory.alloc_tensor(%storage_01184, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1197]) /* ty=int64 */;
          %4606 = fn (%p0984: Tensor[(3), int64], Primitive=1) -> int64 {
            prod(%p0984) /* ty=int64 */
          };
          %4607 = (%shape_func_out_0203,);
          %4608 = (%tensor_0988,);
          let %v980: () = vm.invoke_tvm_op(%4606, %4607, %4608) /* ty=() */;
          let %storage_01185: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1198]) /* ty=Storage[] */;
          let %tensor_0989: int64 = memory.alloc_tensor(%storage_01185, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1198]) /* ty=int64 */;
          %4609 = fn (%p0985: int64, Primitive=1) -> int64 {
            multiply(%p0985, 4 /* ty=int64 */) /* ty=int64 */
          };
          %4610 = (%tensor_0988,);
          %4611 = (%tensor_0989,);
          let %v981: () = vm.invoke_tvm_op(%4609, %4610, %4611) /* ty=() */;
          let %storage_01186: Storage[] = memory.alloc_storage(%tensor_0989, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1199]) /* ty=Storage[] */;
          let %out_0196: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_01186, 0 /* ty=int64 */, %shape_func_out_0203, meta[relay.attrs.AllocTensorAttrs][1199]) /* ty=Tensor[(?, ?, ?), float32] */;
          %4612 = (%t1, %t2);
          %4613 = (%out_0196,);
          let %v982: () = vm.invoke_tvm_op(%4603, %4612, %4613) /* ty=() */;
          let %x740: Tensor[(?, ?, ?), float32] = %out_0196;
          let %x741: static_tensor_float32_any_any_any_t[] = tensor_constructor_float32_any_any_any(%x740) /* ty=static_tensor_float32_any_any_any_t[] */;
          %x741
        },
      };
      %x739
    },
  };
  %x738
}

def @tensor_get_data_float32_any_any_any(%tensor: static_tensor_float32_any_any_any_t[]) -> Tensor[(?, ?, ?), float32] {
  let %x742: Tensor[(?, ?, ?), float32] = match? (%tensor) {
    tensor_constructor_float32_any_any_any(%t: Tensor[(?, ?, ?), float32]) => {
      %t
    },
  };
  %x742
}

def @tensor_expand_dims_float32_any_any(%x743: static_tensor_float32_any_any_t[]) -> static_tensor_float32_any_any_any_t[] {
  let %x744: static_tensor_float32_any_any_any_t[] = match? (%x743) {
    tensor_constructor_float32_any_any(%t3: Tensor[(?, ?), float32]) => {
      let %in_shape_0190: Tensor[(2), int64] = vm.shape_of(%t3, meta[relay.attrs.ShapeOfAttrs][260]) /* ty=Tensor[(2), int64] */;
      let %storage_01187: Storage[] = memory.alloc_storage(24 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1200]) /* ty=Storage[] */;
      let %tensor_0990: Tensor[(3), int64] = memory.alloc_tensor(%storage_01187, 0 /* ty=int64 */, meta[relay.Constant][941] /* ty=Tensor[(1), int64] */, meta[relay.attrs.AllocTensorAttrs][1200]) /* ty=Tensor[(3), int64] */;
      let %shape_func_out_0204: Tensor[(3), int64] = %tensor_0990;
      %4614 = fn (%p0986: Tensor[(?, ?), float32], Primitive=1) -> Tensor[(?, ?, ?), float32] {
        expand_dims(%p0986, axis=0) /* ty=Tensor[(?, ?, ?), float32] */
      };
      %4615 = (%in_shape_0190,);
      %4616 = (%shape_func_out_0204,);
      let %shape_func204: () = vm.shape_func(%4614, %4615, %4616, meta[relay.attrs.ShapeFuncAttrs][204]) /* ty=() */;
      let %storage_01188: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1201]) /* ty=Storage[] */;
      let %tensor_0991: int64 = memory.alloc_tensor(%storage_01188, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1201]) /* ty=int64 */;
      %4617 = fn (%p0987: Tensor[(3), int64], Primitive=1) -> int64 {
        prod(%p0987) /* ty=int64 */
      };
      %4618 = (%shape_func_out_0204,);
      %4619 = (%tensor_0991,);
      let %v983: () = vm.invoke_tvm_op(%4617, %4618, %4619) /* ty=() */;
      let %storage_01189: Storage[] = memory.alloc_storage(8 /* ty=int64 */, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1202]) /* ty=Storage[] */;
      let %tensor_0992: int64 = memory.alloc_tensor(%storage_01189, 0 /* ty=int64 */, 0 /* ty=int64 */, meta[relay.attrs.AllocTensorAttrs][1202]) /* ty=int64 */;
      %4620 = fn (%p0988: int64, Primitive=1) -> int64 {
        multiply(%p0988, 4 /* ty=int64 */) /* ty=int64 */
      };
      %4621 = (%tensor_0991,);
      %4622 = (%tensor_0992,);
      let %v984: () = vm.invoke_tvm_op(%4620, %4621, %4622) /* ty=() */;
      let %storage_01190: Storage[] = memory.alloc_storage(%tensor_0992, 64 /* ty=int64 */, meta[relay.attrs.AllocStorageAttrs][1203]) /* ty=Storage[] */;
      let %out_0197: Tensor[(?, ?, ?), float32] = memory.alloc_tensor(%storage_01190, 0 /* ty=int64 */, %shape_func_out_0204, meta[relay.attrs.AllocTensorAttrs][1203]) /* ty=Tensor[(?, ?, ?), float32] */;
      %4623 = (%t3,);
      %4624 = (%out_0197,);
      let %v985: () = vm.invoke_tvm_op(%4614, %4623, %4624) /* ty=() */;
      let %x745: Tensor[(?, ?, ?), float32] = %out_0197;
      let %x746: static_tensor_float32_any_any_any_t[] = tensor_constructor_float32_any_any_any(%x745) /* ty=static_tensor_float32_any_any_any_t[] */;
      %x746
    },
  };
  %x744
}

def @foldr[A, B](%f1: fn (A, B) -> B, %acc: B, %xs3: List[A]) -> B {
  let %x747: B = match (%xs3) {
    Cons(%x748: A, %rest2: List[A]) => {
      let %x749: B = @foldr(%f1, %acc, %rest2) /* ty=B */;
      let %x750: B = %f1(%x748, %x749) /* ty=B */;
      %x750
    },
    Nil => {
      %acc
    },
  };
  %x747
}

def @lifted_name9037289787164507084(%eta_expand_param: Tensor[(?, ?), float32]) -> static_tensor_float32_any_any_t[] {
  let %x751: static_tensor_float32_any_any_t[] = tensor_constructor_float32_any_any(%eta_expand_param) /* ty=static_tensor_float32_any_any_t[] */;
  %x751
}

def @lifted_name4769082969410390021[A](%eta_expand_param1: A, %eta_expand_param2: List[A]) -> List[A] {
  let %x752: List[A] = Cons(%eta_expand_param1, %eta_expand_param2) /* ty=List[A] */;
  %x752
}

def @foldl[A, B](%f2: fn (A, B) -> A, %acc1: A, %xs4: List[B]) -> A {
  let %x753: A = match (%xs4) {
    Cons(%x754: B, %rest3: List[B]) => {
      let %x755: A = %f2(%acc1, %x754) /* ty=A */;
      let %x756: A = @foldl(%f2, %x755, %rest3) /* ty=A */;
      %x756
    },
    Nil => {
      %acc1
    },
  };
  %x753
}

def @hd[A](%xs5: List[A]) -> A {
  let %x757: A = match? (%xs5) {
    Cons(%x758: A, _) => {
      %x758
    },
  };
  %x757
}

#[version = "0.0.5"]
fn (%x: Tensor[(?, 1, ?, ?), float32], %x1: Tensor[(1), int32], Closure=1) -> fn (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) {
  fn (%i.1: int32, %res.6: List[Tensor[(?, ?), float32]], %v7286: Tensor[(?, 1, ?, ?), float32], %v7394: Tensor[(?, 4), int64]) -> (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) {
    let %x2: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x3: int64 = 64 /* ty=int64 */;
    let %x4: int64 = 64 /* ty=int64 */;
    let %region1: Storage[] = memory.alloc_storage(%x3, %x4, meta[relay.attrs.AllocStorageAttrs][0]) /* ty=Storage[] */;
    let %storage_0: Storage[] = %region1;
    let %x5: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x6: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x7: int64 = 0 /* ty=int64 */;
    let %x8: int64 = 0 /* ty=int64 */;
    let %tensor_0: bool = memory.alloc_tensor(%storage_0, %x7, %x8, meta[relay.attrs.AllocTensorAttrs][0]) /* ty=bool */;
    let %x9: bool = %tensor_0;
    let %x10: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x11: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x12: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = if (%x9) {
      let %x13: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x14: int64 = 4 /* ty=int64 */;
      let %x15: int64 = 64 /* ty=int64 */;
      let %storage_01: Storage[] = memory.alloc_storage(%x14, %x15, meta[relay.attrs.AllocStorageAttrs][1]) /* ty=Storage[] */;
      let %x16: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x17: int64 = 0 /* ty=int64 */;
      let %x18: int64 = 0 /* ty=int64 */;
      let %tensor_01: int32 = memory.alloc_tensor(%storage_01, %x17, %x18, meta[relay.attrs.AllocTensorAttrs][1]) /* ty=int32 */;
      let %x19: int32 = %tensor_01;
      let %x20: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x21: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x22: int64 = 16 /* ty=int64 */;
      let %x23: int64 = 64 /* ty=int64 */;
      let %storage_02: Storage[] = memory.alloc_storage(%x22, %x23, meta[relay.attrs.AllocStorageAttrs][2]) /* ty=Storage[] */;
      let %x24: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x25: int64 = 0 /* ty=int64 */;
      let %x26: Tensor[(1), int64] = meta[relay.Constant][0] /* ty=Tensor[(1), int64] */;
      let %tensor_02: Tensor[(2), int64] = memory.alloc_tensor(%storage_02, %x25, %x26, meta[relay.attrs.AllocTensorAttrs][2]) /* ty=Tensor[(2), int64] */;
      let %shape_func_out_0: Tensor[(2), int64] = %tensor_02;
      let %x27: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x28: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x29: int64 = 8 /* ty=int64 */;
      let %x30: int64 = 64 /* ty=int64 */;
      let %storage_03: Storage[] = memory.alloc_storage(%x29, %x30, meta[relay.attrs.AllocStorageAttrs][3]) /* ty=Storage[] */;
      let %x31: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x32: int64 = 0 /* ty=int64 */;
      let %x33: int64 = 0 /* ty=int64 */;
      let %tensor_03: int64 = memory.alloc_tensor(%storage_03, %x32, %x33, meta[relay.attrs.AllocTensorAttrs][3]) /* ty=int64 */;
      let %x34: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x35: int64 = 64 /* ty=int64 */;
      let %storage_04: Storage[] = memory.alloc_storage(%tensor_03, %x35, meta[relay.attrs.AllocStorageAttrs][4]) /* ty=Storage[] */;
      let %x36: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x37: int64 = 0 /* ty=int64 */;
      let %out_0: Tensor[(?, ?), float32] = memory.alloc_tensor(%storage_04, %x37, %shape_func_out_0, meta[relay.attrs.AllocTensorAttrs][4]) /* ty=Tensor[(?, ?), float32] */;
      let %x38: Tensor[(?, ?), float32] = %out_0;
      let %x39: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x40: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x41: List[Tensor[(?, ?), float32]] = Nil /* ty=List[Tensor[(?, ?), float32]] */;
      let %x42: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x43: List[Tensor[(?, ?), float32]] = Cons(%x38, %x41) /* ty=List[Tensor[(?, ?), float32]] */;
      let %x44: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x45: List[Tensor[(?, ?), float32]] = @concat(%res.6, %x43) /* ty=List[Tensor[(?, ?), float32]] */;
      let %x46: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x47: fn (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = @lifted_name8408068344935463616(%x, %x1);
      let %x48: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = %x47(%x19, %x45, %v7286, %v7394) /* ty=(int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) */;
      %x48;
      %x46;
      %x44;
      %x42;
      %x40;
      %x39;
      %x36;
      %x34;
      %x31;
      %x28;
      %x27;
      %x24;
      %x21;
      %x20;
      %x16;
      %x13
    } else {
      let %x49: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = let %x50: (int32, List[Tensor[(?, ?), float32]], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = (%i.1, %res.6, %v7286, %v7394);
      %x50;
      %x49
    };
    %x12;
    %x11;
    %x10;
    %x6;
    %x5;
    %x2
  }
}
#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant", 
        "relay.attrs.AllocTensorAttrs", 
        "relay.attrs.AllocStorageAttrs"
      ], 
      "data": [2, 7, 21]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "4", 
        "data": "0", 
        "span": "0"
      }
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "int64", 
        "shape": "5", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [6]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "1"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [8, 10, 12, 15, 17]
    }, 
    {
      "type_key": "relay.attrs.AllocTensorAttrs", 
      "attrs": {
        "assert_shape": "9", 
        "const_shape": "0", 
        "dtype": "bool"
      }
    }, 
    {
      "type_key": "Array"
    }, 
    {
      "type_key": "relay.attrs.AllocTensorAttrs", 
      "attrs": {
        "assert_shape": "11", 
        "const_shape": "0", 
        "dtype": "int32"
      }
    }, 
    {
      "type_key": "Array"
    }, 
    {
      "type_key": "relay.attrs.AllocTensorAttrs", 
      "attrs": {
        "assert_shape": "13", 
        "const_shape": "0", 
        "dtype": "int64"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [14]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "2"
      }
    }, 
    {
      "type_key": "relay.attrs.AllocTensorAttrs", 
      "attrs": {
        "assert_shape": "16", 
        "const_shape": "0", 
        "dtype": "int64"
      }
    }, 
    {
      "type_key": "Array"
    }, 
    {
      "type_key": "relay.attrs.AllocTensorAttrs", 
      "attrs": {
        "assert_shape": "18", 
        "const_shape": "0", 
        "dtype": "float32"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [19, 20]
    }, 
    {
      "type_key": "tir.Any", 
      "attrs": {
        "dtype": "int32", 
        "span": "0"
      }
    }, 
    {
      "type_key": "tir.Any", 
      "attrs": {
        "dtype": "int32", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [22, 23, 24, 25, 26]
    }, 
    {
      "type_key": "relay.attrs.AllocStorageAttrs", 
      "attrs": {
        "device_id": "0", 
        "device_type": "2", 
        "dtype": "bool"
      }
    }, 
    {
      "type_key": "relay.attrs.AllocStorageAttrs", 
      "attrs": {
        "device_id": "0", 
        "device_type": "2", 
        "dtype": "int32"
      }
    }, 
    {
      "type_key": "relay.attrs.AllocStorageAttrs", 
      "attrs": {
        "device_id": "0", 
        "device_type": "1", 
        "dtype": "int64"
      }
    }, 
    {
      "type_key": "relay.attrs.AllocStorageAttrs", 
      "attrs": {
        "device_id": "0", 
        "device_type": "1", 
        "dtype": "int64"
      }
    }, 
    {
      "type_key": "relay.attrs.AllocStorageAttrs", 
      "attrs": {
        "device_id": "0", 
        "device_type": "2", 
        "dtype": "float32"
      }
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAQAAAABAAQABAAAAAAAAAAgAAAAAAAAAAgAAAAAAAAA="
  ], 
  "attrs": {"tvm_version": "0.8.dev0"}
}

