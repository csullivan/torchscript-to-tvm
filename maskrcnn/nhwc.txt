File test_street_small.jpg exists, skip.
type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type Option[A] {
  Some(A),
  None,
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

def @main(%input0: Tensor[(1, 3, 300, 300), float32], %model.backbone.body.conv1.weight: Tensor[(64, 3, 7, 7), float32], %model.backbone.body.bn1.weight: Tensor[(64), float32], %model.backbone.body.bn1.running_var: Tensor[(64), float32], %model.backbone.body.bn1.bias: Tensor[(64), float32], %model.backbone.body.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.0.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.downsample.1.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.1.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.1.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.1.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.2.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.2.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.2.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32], %model.backbone.body.layer2.0.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.0.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.0.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %model.backbone.body.layer2.0.downsample.1.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.1.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.1.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.1.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.2.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.2.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.2.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.3.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.3.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.3.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.body.layer3.0.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.0.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.0.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32], %model.backbone.body.layer3.0.downsample.1.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.1.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.1.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.1.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.2.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.2.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.2.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.3.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.3.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.3.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.4.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.4.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.4.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.5.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.5.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.5.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32], %model.backbone.body.layer4.0.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.0.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.0.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32], %model.backbone.body.layer4.0.downsample.1.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.1.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.1.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.1.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.2.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.2.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.2.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_mean: Tensor[(2048), float32], %model.backbone.fpn.inner_blocks.0.weight: Tensor[(256, 256, 1, 1), float32], %model.backbone.fpn.inner_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.fpn.inner_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.2.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.fpn.inner_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.3.weight: Tensor[(256, 2048, 1, 1), float32], %model.backbone.fpn.inner_blocks.3.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.0.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.1.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.3.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.3.bias: Tensor[(256), float32], %model.rpn.head.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.rpn.head.conv.bias: Tensor[(256), float32], %model.rpn.head.cls_logits.weight: Tensor[(3, 256, 1, 1), float32], %model.rpn.head.cls_logits.bias: Tensor[(3), float32], %model.rpn.head.bbox_pred.weight: Tensor[(12, 256, 1, 1), float32], %model.rpn.head.bbox_pred.bias: Tensor[(12), float32], %model.roi_heads.box_head.fc6.weight: Tensor[(1024, 12544), float32], %model.roi_heads.box_head.fc6.bias: Tensor[(1024), float32], %model.roi_heads.box_head.fc7.weight: Tensor[(1024, 1024), float32], %model.roi_heads.box_head.fc7.bias: Tensor[(1024), float32], %model.roi_heads.box_predictor.cls_score.weight: Tensor[(91, 1024), float32], %model.roi_heads.box_predictor.cls_score.bias: Tensor[(91), float32], %model.roi_heads.box_predictor.bbox_pred.weight: Tensor[(364, 1024), float32], %model.roi_heads.box_predictor.bbox_pred.bias: Tensor[(364), float32], %model.roi_heads.mask_head.mask_fcn1.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn1.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn2.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn2.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn3.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn3.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn4.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn4.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.conv5_mask.weight: Tensor[(256, 256, 2, 2), float32], %model.roi_heads.mask_predictor.conv5_mask.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.weight: Tensor[(91, 256, 1, 1), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.bias: Tensor[(91), float32]) -> (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, ?, ?), float32]) {
  %0 = split(%input0, indices_or_sections=1) /* ty=(Tensor[(1, 3, 300, 300), float32],) */;
  %1 = %0.0;
  %2 = squeeze(%1, axis=[0]) /* ty=Tensor[(3, 300, 300), float32] */;
  %3 = strided_slice(meta[relay.Constant][0] /* ty=Tensor[(3), float32] */, begin=[0], end=[3], strides=[1]) /* ty=Tensor[(3), float32] */;
  %4 = expand_dims(%3, axis=1) /* ty=Tensor[(3, 1), float32] */;
  %5 = expand_dims(%4, axis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %6 = subtract(%2, %5) /* ty=Tensor[(3, 300, 300), float32] */;
  %7 = strided_slice(meta[relay.Constant][1] /* ty=Tensor[(3), float32] */, begin=[0], end=[3], strides=[1]) /* ty=Tensor[(3), float32] */;
  %8 = expand_dims(%7, axis=1) /* ty=Tensor[(3, 1), float32] */;
  %9 = expand_dims(%8, axis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %10 = divide(%6, %9) /* ty=Tensor[(3, 300, 300), float32] */;
  %11 = expand_dims(%10, axis=0) /* ty=Tensor[(1, 3, 300, 300), float32] */;
  %12 = image.resize(%11, size=[800, 800]) /* ty=Tensor[(1, 3, 800, 800), float32] */;
  %13 = take(%12, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(3, 800, 800), float32] */;
  %14 = nn.pad(%13, pad_width=[[0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(3, 800, 800), float32] */;
  %15 = (%14,);
  %16 = stack(%15) /* ty=Tensor[(1, 3, 800, 800), float32] */;
  %17 = layout_transform(%16, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 800, 800, 3), float32] */;
  %18 = layout_transform(%model.backbone.body.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(7, 7, 3, 64), float32] */;
  %19 = nn.conv2d(%17, %18, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 400, 400, 64), float32] */;
  %20 = reshape(%model.backbone.body.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %21 = reshape(%model.backbone.body.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %22 = add(%21, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %23 = rsqrt(%22) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %24 = multiply(%20, %23) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %25 = layout_transform(%24, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %26 = multiply(%19, %25) /* ty=Tensor[(1, 400, 400, 64), float32] */;
  %27 = reshape(%model.backbone.body.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %28 = reshape(%model.backbone.body.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %29 = multiply(%28, %24) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %30 = subtract(%27, %29) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %31 = layout_transform(%30, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %32 = add(%26, %31) /* ty=Tensor[(1, 400, 400, 64), float32] */;
  %33 = nn.relu(%32) /* ty=Tensor[(1, 400, 400, 64), float32] */;
  %34 = nn.max_pool2d(%33, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1], layout="NHWC") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %35 = layout_transform(%model.backbone.body.layer1.0.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 64), float32] */;
  %36 = nn.conv2d(%34, %35, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %37 = reshape(%model.backbone.body.layer1.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %38 = reshape(%model.backbone.body.layer1.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %39 = add(%38, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %40 = rsqrt(%39) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %41 = multiply(%37, %40) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %42 = layout_transform(%41, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %43 = multiply(%36, %42) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %44 = reshape(%model.backbone.body.layer1.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %45 = reshape(%model.backbone.body.layer1.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %46 = multiply(%45, %41) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %47 = subtract(%44, %46) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %48 = layout_transform(%47, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %49 = add(%43, %48) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %50 = nn.relu(%49) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %51 = layout_transform(%model.backbone.body.layer1.0.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 64, 64), float32] */;
  %52 = nn.conv2d(%50, %51, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %53 = reshape(%model.backbone.body.layer1.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %54 = reshape(%model.backbone.body.layer1.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %55 = add(%54, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %56 = rsqrt(%55) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %57 = multiply(%53, %56) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %58 = layout_transform(%57, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %59 = multiply(%52, %58) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %60 = reshape(%model.backbone.body.layer1.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %61 = reshape(%model.backbone.body.layer1.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %62 = multiply(%61, %57) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %63 = subtract(%60, %62) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %64 = layout_transform(%63, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %65 = add(%59, %64) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %66 = nn.relu(%65) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %67 = layout_transform(%model.backbone.body.layer1.0.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float32] */;
  %68 = nn.conv2d(%66, %67, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %69 = reshape(%model.backbone.body.layer1.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %70 = reshape(%model.backbone.body.layer1.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %71 = add(%70, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %72 = rsqrt(%71) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %73 = multiply(%69, %72) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %74 = layout_transform(%73, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %75 = multiply(%68, %74) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %76 = reshape(%model.backbone.body.layer1.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %77 = reshape(%model.backbone.body.layer1.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %78 = multiply(%77, %73) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %79 = subtract(%76, %78) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %80 = layout_transform(%79, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %81 = add(%75, %80) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %82 = layout_transform(%model.backbone.body.layer1.0.downsample.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float32] */;
  %83 = nn.conv2d(%34, %82, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %84 = reshape(%model.backbone.body.layer1.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %85 = reshape(%model.backbone.body.layer1.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %86 = add(%85, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %87 = rsqrt(%86) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %88 = multiply(%84, %87) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %89 = layout_transform(%88, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %90 = multiply(%83, %89) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %91 = reshape(%model.backbone.body.layer1.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %92 = reshape(%model.backbone.body.layer1.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %93 = multiply(%92, %88) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %94 = subtract(%91, %93) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %95 = layout_transform(%94, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %96 = add(%90, %95) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %97 = add(%81, %96) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %98 = nn.relu(%97) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %99 = layout_transform(%model.backbone.body.layer1.1.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 64), float32] */;
  %100 = nn.conv2d(%98, %99, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %101 = reshape(%model.backbone.body.layer1.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %102 = reshape(%model.backbone.body.layer1.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %103 = add(%102, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %104 = rsqrt(%103) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %105 = multiply(%101, %104) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %106 = layout_transform(%105, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %107 = multiply(%100, %106) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %108 = reshape(%model.backbone.body.layer1.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %109 = reshape(%model.backbone.body.layer1.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %110 = multiply(%109, %105) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %111 = subtract(%108, %110) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %112 = layout_transform(%111, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %113 = add(%107, %112) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %114 = nn.relu(%113) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %115 = layout_transform(%model.backbone.body.layer1.1.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 64, 64), float32] */;
  %116 = nn.conv2d(%114, %115, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %117 = reshape(%model.backbone.body.layer1.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %118 = reshape(%model.backbone.body.layer1.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %119 = add(%118, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %120 = rsqrt(%119) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %121 = multiply(%117, %120) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %122 = layout_transform(%121, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %123 = multiply(%116, %122) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %124 = reshape(%model.backbone.body.layer1.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %125 = reshape(%model.backbone.body.layer1.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %126 = multiply(%125, %121) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %127 = subtract(%124, %126) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %128 = layout_transform(%127, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %129 = add(%123, %128) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %130 = nn.relu(%129) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %131 = layout_transform(%model.backbone.body.layer1.1.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float32] */;
  %132 = nn.conv2d(%130, %131, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %133 = reshape(%model.backbone.body.layer1.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %134 = reshape(%model.backbone.body.layer1.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %135 = add(%134, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %136 = rsqrt(%135) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %137 = multiply(%133, %136) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %138 = layout_transform(%137, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %139 = multiply(%132, %138) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %140 = reshape(%model.backbone.body.layer1.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %141 = reshape(%model.backbone.body.layer1.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %142 = multiply(%141, %137) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %143 = subtract(%140, %142) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %144 = layout_transform(%143, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %145 = add(%139, %144) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %146 = add(%145, %98) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %147 = nn.relu(%146) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %148 = layout_transform(%model.backbone.body.layer1.2.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 64), float32] */;
  %149 = nn.conv2d(%147, %148, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %150 = reshape(%model.backbone.body.layer1.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %151 = reshape(%model.backbone.body.layer1.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %152 = add(%151, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %153 = rsqrt(%152) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %154 = multiply(%150, %153) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %155 = layout_transform(%154, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %156 = multiply(%149, %155) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %157 = reshape(%model.backbone.body.layer1.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %158 = reshape(%model.backbone.body.layer1.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %159 = multiply(%158, %154) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %160 = subtract(%157, %159) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %161 = layout_transform(%160, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %162 = add(%156, %161) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %163 = nn.relu(%162) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %164 = layout_transform(%model.backbone.body.layer1.2.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 64, 64), float32] */;
  %165 = nn.conv2d(%163, %164, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %166 = reshape(%model.backbone.body.layer1.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %167 = reshape(%model.backbone.body.layer1.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %168 = add(%167, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %169 = rsqrt(%168) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %170 = multiply(%166, %169) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %171 = layout_transform(%170, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %172 = multiply(%165, %171) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %173 = reshape(%model.backbone.body.layer1.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %174 = reshape(%model.backbone.body.layer1.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %175 = multiply(%174, %170) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %176 = subtract(%173, %175) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %177 = layout_transform(%176, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %178 = add(%172, %177) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %179 = nn.relu(%178) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %180 = layout_transform(%model.backbone.body.layer1.2.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float32] */;
  %181 = nn.conv2d(%179, %180, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %182 = reshape(%model.backbone.body.layer1.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %183 = reshape(%model.backbone.body.layer1.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %184 = add(%183, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %185 = rsqrt(%184) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %186 = multiply(%182, %185) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %187 = layout_transform(%186, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %188 = multiply(%181, %187) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %189 = reshape(%model.backbone.body.layer1.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %190 = reshape(%model.backbone.body.layer1.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %191 = multiply(%190, %186) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %192 = subtract(%189, %191) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %193 = layout_transform(%192, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %194 = add(%188, %193) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %195 = add(%194, %147) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %196 = nn.relu(%195) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %197 = layout_transform(%model.backbone.fpn.inner_blocks.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 256), float32] */;
  %198 = nn.conv2d(%196, %197, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %199 = expand_dims(%model.backbone.fpn.inner_blocks.0.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %200 = expand_dims(%199, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %201 = layout_transform(%200, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %202 = add(%198, %201) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %203 = layout_transform(%model.backbone.body.layer2.0.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 128), float32] */;
  %204 = nn.conv2d(%196, %203, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 128), float32] */;
  %205 = reshape(%model.backbone.body.layer2.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %206 = reshape(%model.backbone.body.layer2.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %207 = add(%206, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %208 = rsqrt(%207) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %209 = multiply(%205, %208) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %210 = layout_transform(%209, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %211 = multiply(%204, %210) /* ty=Tensor[(1, 200, 200, 128), float32] */;
  %212 = reshape(%model.backbone.body.layer2.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %213 = reshape(%model.backbone.body.layer2.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %214 = multiply(%213, %209) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %215 = subtract(%212, %214) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %216 = layout_transform(%215, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %217 = add(%211, %216) /* ty=Tensor[(1, 200, 200, 128), float32] */;
  %218 = nn.relu(%217) /* ty=Tensor[(1, 200, 200, 128), float32] */;
  %219 = layout_transform(%model.backbone.body.layer2.0.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float32] */;
  %220 = nn.conv2d(%218, %219, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %221 = reshape(%model.backbone.body.layer2.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %222 = reshape(%model.backbone.body.layer2.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %223 = add(%222, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %224 = rsqrt(%223) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %225 = multiply(%221, %224) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %226 = layout_transform(%225, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %227 = multiply(%220, %226) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %228 = reshape(%model.backbone.body.layer2.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %229 = reshape(%model.backbone.body.layer2.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %230 = multiply(%229, %225) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %231 = subtract(%228, %230) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %232 = layout_transform(%231, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %233 = add(%227, %232) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %234 = nn.relu(%233) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %235 = layout_transform(%model.backbone.body.layer2.0.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float32] */;
  %236 = nn.conv2d(%234, %235, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %237 = reshape(%model.backbone.body.layer2.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %238 = reshape(%model.backbone.body.layer2.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %239 = add(%238, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %240 = rsqrt(%239) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %241 = multiply(%237, %240) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %242 = layout_transform(%241, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %243 = multiply(%236, %242) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %244 = reshape(%model.backbone.body.layer2.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %245 = reshape(%model.backbone.body.layer2.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %246 = multiply(%245, %241) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %247 = subtract(%244, %246) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %248 = layout_transform(%247, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %249 = add(%243, %248) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %250 = layout_transform(%model.backbone.body.layer2.0.downsample.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 512), float32] */;
  %251 = nn.conv2d(%196, %250, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %252 = reshape(%model.backbone.body.layer2.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %253 = reshape(%model.backbone.body.layer2.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %254 = add(%253, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %255 = rsqrt(%254) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %256 = multiply(%252, %255) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %257 = layout_transform(%256, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %258 = multiply(%251, %257) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %259 = reshape(%model.backbone.body.layer2.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %260 = reshape(%model.backbone.body.layer2.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %261 = multiply(%260, %256) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %262 = subtract(%259, %261) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %263 = layout_transform(%262, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %264 = add(%258, %263) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %265 = add(%249, %264) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %266 = nn.relu(%265) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %267 = layout_transform(%model.backbone.body.layer2.1.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 128), float32] */;
  %268 = nn.conv2d(%266, %267, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %269 = reshape(%model.backbone.body.layer2.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %270 = reshape(%model.backbone.body.layer2.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %271 = add(%270, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %272 = rsqrt(%271) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %273 = multiply(%269, %272) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %274 = layout_transform(%273, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %275 = multiply(%268, %274) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %276 = reshape(%model.backbone.body.layer2.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %277 = reshape(%model.backbone.body.layer2.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %278 = multiply(%277, %273) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %279 = subtract(%276, %278) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %280 = layout_transform(%279, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %281 = add(%275, %280) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %282 = nn.relu(%281) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %283 = layout_transform(%model.backbone.body.layer2.1.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float32] */;
  %284 = nn.conv2d(%282, %283, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %285 = reshape(%model.backbone.body.layer2.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %286 = reshape(%model.backbone.body.layer2.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %287 = add(%286, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %288 = rsqrt(%287) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %289 = multiply(%285, %288) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %290 = layout_transform(%289, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %291 = multiply(%284, %290) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %292 = reshape(%model.backbone.body.layer2.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %293 = reshape(%model.backbone.body.layer2.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %294 = multiply(%293, %289) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %295 = subtract(%292, %294) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %296 = layout_transform(%295, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %297 = add(%291, %296) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %298 = nn.relu(%297) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %299 = layout_transform(%model.backbone.body.layer2.1.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float32] */;
  %300 = nn.conv2d(%298, %299, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %301 = reshape(%model.backbone.body.layer2.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %302 = reshape(%model.backbone.body.layer2.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %303 = add(%302, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %304 = rsqrt(%303) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %305 = multiply(%301, %304) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %306 = layout_transform(%305, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %307 = multiply(%300, %306) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %308 = reshape(%model.backbone.body.layer2.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %309 = reshape(%model.backbone.body.layer2.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %310 = multiply(%309, %305) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %311 = subtract(%308, %310) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %312 = layout_transform(%311, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %313 = add(%307, %312) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %314 = add(%313, %266) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %315 = nn.relu(%314) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %316 = layout_transform(%model.backbone.body.layer2.2.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 128), float32] */;
  %317 = nn.conv2d(%315, %316, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %318 = reshape(%model.backbone.body.layer2.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %319 = reshape(%model.backbone.body.layer2.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %320 = add(%319, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %321 = rsqrt(%320) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %322 = multiply(%318, %321) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %323 = layout_transform(%322, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %324 = multiply(%317, %323) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %325 = reshape(%model.backbone.body.layer2.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %326 = reshape(%model.backbone.body.layer2.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %327 = multiply(%326, %322) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %328 = subtract(%325, %327) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %329 = layout_transform(%328, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %330 = add(%324, %329) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %331 = nn.relu(%330) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %332 = layout_transform(%model.backbone.body.layer2.2.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float32] */;
  %333 = nn.conv2d(%331, %332, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %334 = reshape(%model.backbone.body.layer2.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %335 = reshape(%model.backbone.body.layer2.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %336 = add(%335, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %337 = rsqrt(%336) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %338 = multiply(%334, %337) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %339 = layout_transform(%338, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %340 = multiply(%333, %339) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %341 = reshape(%model.backbone.body.layer2.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %342 = reshape(%model.backbone.body.layer2.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %343 = multiply(%342, %338) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %344 = subtract(%341, %343) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %345 = layout_transform(%344, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %346 = add(%340, %345) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %347 = nn.relu(%346) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %348 = layout_transform(%model.backbone.body.layer2.2.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float32] */;
  %349 = nn.conv2d(%347, %348, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %350 = reshape(%model.backbone.body.layer2.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %351 = reshape(%model.backbone.body.layer2.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %352 = add(%351, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %353 = rsqrt(%352) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %354 = multiply(%350, %353) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %355 = layout_transform(%354, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %356 = multiply(%349, %355) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %357 = reshape(%model.backbone.body.layer2.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %358 = reshape(%model.backbone.body.layer2.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %359 = multiply(%358, %354) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %360 = subtract(%357, %359) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %361 = layout_transform(%360, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %362 = add(%356, %361) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %363 = add(%362, %315) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %364 = nn.relu(%363) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %365 = layout_transform(%model.backbone.body.layer2.3.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 128), float32] */;
  %366 = nn.conv2d(%364, %365, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %367 = reshape(%model.backbone.body.layer2.3.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %368 = reshape(%model.backbone.body.layer2.3.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %369 = add(%368, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %370 = rsqrt(%369) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %371 = multiply(%367, %370) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %372 = layout_transform(%371, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %373 = multiply(%366, %372) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %374 = reshape(%model.backbone.body.layer2.3.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %375 = reshape(%model.backbone.body.layer2.3.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %376 = multiply(%375, %371) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %377 = subtract(%374, %376) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %378 = layout_transform(%377, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %379 = add(%373, %378) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %380 = nn.relu(%379) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %381 = layout_transform(%model.backbone.body.layer2.3.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float32] */;
  %382 = nn.conv2d(%380, %381, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %383 = reshape(%model.backbone.body.layer2.3.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %384 = reshape(%model.backbone.body.layer2.3.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %385 = add(%384, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %386 = rsqrt(%385) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %387 = multiply(%383, %386) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %388 = layout_transform(%387, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %389 = multiply(%382, %388) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %390 = reshape(%model.backbone.body.layer2.3.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %391 = reshape(%model.backbone.body.layer2.3.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %392 = multiply(%391, %387) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %393 = subtract(%390, %392) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %394 = layout_transform(%393, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %395 = add(%389, %394) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %396 = nn.relu(%395) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %397 = layout_transform(%model.backbone.body.layer2.3.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float32] */;
  %398 = nn.conv2d(%396, %397, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %399 = reshape(%model.backbone.body.layer2.3.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %400 = reshape(%model.backbone.body.layer2.3.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %401 = add(%400, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %402 = rsqrt(%401) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %403 = multiply(%399, %402) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %404 = layout_transform(%403, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %405 = multiply(%398, %404) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %406 = reshape(%model.backbone.body.layer2.3.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %407 = reshape(%model.backbone.body.layer2.3.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %408 = multiply(%407, %403) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %409 = subtract(%406, %408) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %410 = layout_transform(%409, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %411 = add(%405, %410) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %412 = add(%411, %364) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %413 = nn.relu(%412) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %414 = layout_transform(%model.backbone.fpn.inner_blocks.1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 256), float32] */;
  %415 = nn.conv2d(%413, %414, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %416 = expand_dims(%model.backbone.fpn.inner_blocks.1.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %417 = expand_dims(%416, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %418 = layout_transform(%417, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %419 = add(%415, %418) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %420 = layout_transform(%model.backbone.body.layer3.0.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 256), float32] */;
  %421 = nn.conv2d(%413, %420, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %422 = reshape(%model.backbone.body.layer3.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %423 = reshape(%model.backbone.body.layer3.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %424 = add(%423, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %425 = rsqrt(%424) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %426 = multiply(%422, %425) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %427 = layout_transform(%426, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %428 = multiply(%421, %427) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %429 = reshape(%model.backbone.body.layer3.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %430 = reshape(%model.backbone.body.layer3.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %431 = multiply(%430, %426) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %432 = subtract(%429, %431) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %433 = layout_transform(%432, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %434 = add(%428, %433) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %435 = nn.relu(%434) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %436 = layout_transform(%model.backbone.body.layer3.0.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %437 = nn.conv2d(%435, %436, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %438 = reshape(%model.backbone.body.layer3.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %439 = reshape(%model.backbone.body.layer3.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %440 = add(%439, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %441 = rsqrt(%440) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %442 = multiply(%438, %441) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %443 = layout_transform(%442, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %444 = multiply(%437, %443) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %445 = reshape(%model.backbone.body.layer3.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %446 = reshape(%model.backbone.body.layer3.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %447 = multiply(%446, %442) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %448 = subtract(%445, %447) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %449 = layout_transform(%448, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %450 = add(%444, %449) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %451 = nn.relu(%450) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %452 = layout_transform(%model.backbone.body.layer3.0.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %453 = nn.conv2d(%451, %452, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %454 = reshape(%model.backbone.body.layer3.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %455 = reshape(%model.backbone.body.layer3.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %456 = add(%455, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %457 = rsqrt(%456) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %458 = multiply(%454, %457) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %459 = layout_transform(%458, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %460 = multiply(%453, %459) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %461 = reshape(%model.backbone.body.layer3.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %462 = reshape(%model.backbone.body.layer3.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %463 = multiply(%462, %458) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %464 = subtract(%461, %463) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %465 = layout_transform(%464, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %466 = add(%460, %465) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %467 = layout_transform(%model.backbone.body.layer3.0.downsample.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 1024), float32] */;
  %468 = nn.conv2d(%413, %467, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %469 = reshape(%model.backbone.body.layer3.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %470 = reshape(%model.backbone.body.layer3.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %471 = add(%470, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %472 = rsqrt(%471) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %473 = multiply(%469, %472) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %474 = layout_transform(%473, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %475 = multiply(%468, %474) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %476 = reshape(%model.backbone.body.layer3.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %477 = reshape(%model.backbone.body.layer3.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %478 = multiply(%477, %473) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %479 = subtract(%476, %478) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %480 = layout_transform(%479, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %481 = add(%475, %480) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %482 = add(%466, %481) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %483 = nn.relu(%482) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %484 = layout_transform(%model.backbone.body.layer3.1.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %485 = nn.conv2d(%483, %484, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %486 = reshape(%model.backbone.body.layer3.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %487 = reshape(%model.backbone.body.layer3.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %488 = add(%487, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %489 = rsqrt(%488) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %490 = multiply(%486, %489) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %491 = layout_transform(%490, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %492 = multiply(%485, %491) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %493 = reshape(%model.backbone.body.layer3.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %494 = reshape(%model.backbone.body.layer3.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %495 = multiply(%494, %490) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %496 = subtract(%493, %495) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %497 = layout_transform(%496, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %498 = add(%492, %497) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %499 = nn.relu(%498) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %500 = layout_transform(%model.backbone.body.layer3.1.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %501 = nn.conv2d(%499, %500, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %502 = reshape(%model.backbone.body.layer3.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %503 = reshape(%model.backbone.body.layer3.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %504 = add(%503, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %505 = rsqrt(%504) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %506 = multiply(%502, %505) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %507 = layout_transform(%506, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %508 = multiply(%501, %507) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %509 = reshape(%model.backbone.body.layer3.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %510 = reshape(%model.backbone.body.layer3.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %511 = multiply(%510, %506) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %512 = subtract(%509, %511) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %513 = layout_transform(%512, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %514 = add(%508, %513) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %515 = nn.relu(%514) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %516 = layout_transform(%model.backbone.body.layer3.1.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %517 = nn.conv2d(%515, %516, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %518 = reshape(%model.backbone.body.layer3.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %519 = reshape(%model.backbone.body.layer3.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %520 = add(%519, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %521 = rsqrt(%520) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %522 = multiply(%518, %521) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %523 = layout_transform(%522, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %524 = multiply(%517, %523) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %525 = reshape(%model.backbone.body.layer3.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %526 = reshape(%model.backbone.body.layer3.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %527 = multiply(%526, %522) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %528 = subtract(%525, %527) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %529 = layout_transform(%528, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %530 = add(%524, %529) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %531 = add(%530, %483) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %532 = nn.relu(%531) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %533 = layout_transform(%model.backbone.body.layer3.2.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %534 = nn.conv2d(%532, %533, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %535 = reshape(%model.backbone.body.layer3.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %536 = reshape(%model.backbone.body.layer3.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %537 = add(%536, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %538 = rsqrt(%537) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %539 = multiply(%535, %538) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %540 = layout_transform(%539, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %541 = multiply(%534, %540) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %542 = reshape(%model.backbone.body.layer3.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %543 = reshape(%model.backbone.body.layer3.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %544 = multiply(%543, %539) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %545 = subtract(%542, %544) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %546 = layout_transform(%545, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %547 = add(%541, %546) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %548 = nn.relu(%547) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %549 = layout_transform(%model.backbone.body.layer3.2.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %550 = nn.conv2d(%548, %549, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %551 = reshape(%model.backbone.body.layer3.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %552 = reshape(%model.backbone.body.layer3.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %553 = add(%552, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %554 = rsqrt(%553) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %555 = multiply(%551, %554) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %556 = layout_transform(%555, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %557 = multiply(%550, %556) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %558 = reshape(%model.backbone.body.layer3.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %559 = reshape(%model.backbone.body.layer3.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %560 = multiply(%559, %555) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %561 = subtract(%558, %560) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %562 = layout_transform(%561, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %563 = add(%557, %562) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %564 = nn.relu(%563) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %565 = layout_transform(%model.backbone.body.layer3.2.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %566 = nn.conv2d(%564, %565, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %567 = reshape(%model.backbone.body.layer3.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %568 = reshape(%model.backbone.body.layer3.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %569 = add(%568, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %570 = rsqrt(%569) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %571 = multiply(%567, %570) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %572 = layout_transform(%571, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %573 = multiply(%566, %572) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %574 = reshape(%model.backbone.body.layer3.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %575 = reshape(%model.backbone.body.layer3.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %576 = multiply(%575, %571) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %577 = subtract(%574, %576) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %578 = layout_transform(%577, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %579 = add(%573, %578) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %580 = add(%579, %532) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %581 = nn.relu(%580) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %582 = layout_transform(%model.backbone.body.layer3.3.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %583 = nn.conv2d(%581, %582, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %584 = reshape(%model.backbone.body.layer3.3.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %585 = reshape(%model.backbone.body.layer3.3.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %586 = add(%585, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %587 = rsqrt(%586) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %588 = multiply(%584, %587) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %589 = layout_transform(%588, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %590 = multiply(%583, %589) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %591 = reshape(%model.backbone.body.layer3.3.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %592 = reshape(%model.backbone.body.layer3.3.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %593 = multiply(%592, %588) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %594 = subtract(%591, %593) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %595 = layout_transform(%594, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %596 = add(%590, %595) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %597 = nn.relu(%596) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %598 = layout_transform(%model.backbone.body.layer3.3.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %599 = nn.conv2d(%597, %598, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %600 = reshape(%model.backbone.body.layer3.3.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %601 = reshape(%model.backbone.body.layer3.3.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %602 = add(%601, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %603 = rsqrt(%602) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %604 = multiply(%600, %603) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %605 = layout_transform(%604, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %606 = multiply(%599, %605) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %607 = reshape(%model.backbone.body.layer3.3.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %608 = reshape(%model.backbone.body.layer3.3.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %609 = multiply(%608, %604) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %610 = subtract(%607, %609) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %611 = layout_transform(%610, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %612 = add(%606, %611) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %613 = nn.relu(%612) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %614 = layout_transform(%model.backbone.body.layer3.3.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %615 = nn.conv2d(%613, %614, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %616 = reshape(%model.backbone.body.layer3.3.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %617 = reshape(%model.backbone.body.layer3.3.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %618 = add(%617, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %619 = rsqrt(%618) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %620 = multiply(%616, %619) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %621 = layout_transform(%620, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %622 = multiply(%615, %621) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %623 = reshape(%model.backbone.body.layer3.3.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %624 = reshape(%model.backbone.body.layer3.3.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %625 = multiply(%624, %620) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %626 = subtract(%623, %625) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %627 = layout_transform(%626, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %628 = add(%622, %627) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %629 = add(%628, %581) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %630 = nn.relu(%629) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %631 = layout_transform(%model.backbone.body.layer3.4.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %632 = nn.conv2d(%630, %631, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %633 = reshape(%model.backbone.body.layer3.4.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %634 = reshape(%model.backbone.body.layer3.4.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %635 = add(%634, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %636 = rsqrt(%635) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %637 = multiply(%633, %636) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %638 = layout_transform(%637, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %639 = multiply(%632, %638) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %640 = reshape(%model.backbone.body.layer3.4.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %641 = reshape(%model.backbone.body.layer3.4.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %642 = multiply(%641, %637) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %643 = subtract(%640, %642) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %644 = layout_transform(%643, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %645 = add(%639, %644) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %646 = nn.relu(%645) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %647 = layout_transform(%model.backbone.body.layer3.4.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %648 = nn.conv2d(%646, %647, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %649 = reshape(%model.backbone.body.layer3.4.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %650 = reshape(%model.backbone.body.layer3.4.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %651 = add(%650, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %652 = rsqrt(%651) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %653 = multiply(%649, %652) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %654 = layout_transform(%653, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %655 = multiply(%648, %654) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %656 = reshape(%model.backbone.body.layer3.4.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %657 = reshape(%model.backbone.body.layer3.4.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %658 = multiply(%657, %653) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %659 = subtract(%656, %658) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %660 = layout_transform(%659, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %661 = add(%655, %660) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %662 = nn.relu(%661) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %663 = layout_transform(%model.backbone.body.layer3.4.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %664 = nn.conv2d(%662, %663, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %665 = reshape(%model.backbone.body.layer3.4.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %666 = reshape(%model.backbone.body.layer3.4.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %667 = add(%666, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %668 = rsqrt(%667) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %669 = multiply(%665, %668) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %670 = layout_transform(%669, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %671 = multiply(%664, %670) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %672 = reshape(%model.backbone.body.layer3.4.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %673 = reshape(%model.backbone.body.layer3.4.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %674 = multiply(%673, %669) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %675 = subtract(%672, %674) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %676 = layout_transform(%675, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %677 = add(%671, %676) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %678 = add(%677, %630) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %679 = nn.relu(%678) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %680 = layout_transform(%model.backbone.body.layer3.5.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %681 = nn.conv2d(%679, %680, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %682 = reshape(%model.backbone.body.layer3.5.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %683 = reshape(%model.backbone.body.layer3.5.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %684 = add(%683, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %685 = rsqrt(%684) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %686 = multiply(%682, %685) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %687 = layout_transform(%686, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %688 = multiply(%681, %687) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %689 = reshape(%model.backbone.body.layer3.5.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %690 = reshape(%model.backbone.body.layer3.5.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %691 = multiply(%690, %686) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %692 = subtract(%689, %691) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %693 = layout_transform(%692, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %694 = add(%688, %693) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %695 = nn.relu(%694) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %696 = layout_transform(%model.backbone.body.layer3.5.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %697 = nn.conv2d(%695, %696, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %698 = reshape(%model.backbone.body.layer3.5.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %699 = reshape(%model.backbone.body.layer3.5.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %700 = add(%699, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %701 = rsqrt(%700) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %702 = multiply(%698, %701) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %703 = layout_transform(%702, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %704 = multiply(%697, %703) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %705 = reshape(%model.backbone.body.layer3.5.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %706 = reshape(%model.backbone.body.layer3.5.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %707 = multiply(%706, %702) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %708 = subtract(%705, %707) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %709 = layout_transform(%708, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %710 = add(%704, %709) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %711 = nn.relu(%710) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %712 = layout_transform(%model.backbone.body.layer3.5.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %713 = nn.conv2d(%711, %712, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %714 = reshape(%model.backbone.body.layer3.5.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %715 = reshape(%model.backbone.body.layer3.5.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %716 = add(%715, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %717 = rsqrt(%716) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %718 = multiply(%714, %717) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %719 = layout_transform(%718, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %720 = multiply(%713, %719) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %721 = reshape(%model.backbone.body.layer3.5.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %722 = reshape(%model.backbone.body.layer3.5.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %723 = multiply(%722, %718) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %724 = subtract(%721, %723) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %725 = layout_transform(%724, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %726 = add(%720, %725) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %727 = add(%726, %679) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %728 = nn.relu(%727) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %729 = layout_transform(%model.backbone.fpn.inner_blocks.2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %730 = nn.conv2d(%728, %729, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %731 = expand_dims(%model.backbone.fpn.inner_blocks.2.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %732 = expand_dims(%731, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %733 = layout_transform(%732, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %734 = add(%730, %733) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %735 = layout_transform(%model.backbone.body.layer4.0.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 512), float32] */;
  %736 = nn.conv2d(%728, %735, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 512), float32] */;
  %737 = reshape(%model.backbone.body.layer4.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %738 = reshape(%model.backbone.body.layer4.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %739 = add(%738, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %740 = rsqrt(%739) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %741 = multiply(%737, %740) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %742 = layout_transform(%741, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %743 = multiply(%736, %742) /* ty=Tensor[(1, 50, 50, 512), float32] */;
  %744 = reshape(%model.backbone.body.layer4.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %745 = reshape(%model.backbone.body.layer4.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %746 = multiply(%745, %741) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %747 = subtract(%744, %746) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %748 = layout_transform(%747, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %749 = add(%743, %748) /* ty=Tensor[(1, 50, 50, 512), float32] */;
  %750 = nn.relu(%749) /* ty=Tensor[(1, 50, 50, 512), float32] */;
  %751 = layout_transform(%model.backbone.body.layer4.0.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 512, 512), float32] */;
  %752 = nn.conv2d(%750, %751, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %753 = reshape(%model.backbone.body.layer4.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %754 = reshape(%model.backbone.body.layer4.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %755 = add(%754, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %756 = rsqrt(%755) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %757 = multiply(%753, %756) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %758 = layout_transform(%757, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %759 = multiply(%752, %758) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %760 = reshape(%model.backbone.body.layer4.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %761 = reshape(%model.backbone.body.layer4.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %762 = multiply(%761, %757) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %763 = subtract(%760, %762) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %764 = layout_transform(%763, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %765 = add(%759, %764) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %766 = nn.relu(%765) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %767 = layout_transform(%model.backbone.body.layer4.0.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 2048), float32] */;
  %768 = nn.conv2d(%766, %767, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %769 = reshape(%model.backbone.body.layer4.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %770 = reshape(%model.backbone.body.layer4.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %771 = add(%770, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %772 = rsqrt(%771) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %773 = multiply(%769, %772) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %774 = layout_transform(%773, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %775 = multiply(%768, %774) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %776 = reshape(%model.backbone.body.layer4.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %777 = reshape(%model.backbone.body.layer4.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %778 = multiply(%777, %773) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %779 = subtract(%776, %778) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %780 = layout_transform(%779, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %781 = add(%775, %780) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %782 = layout_transform(%model.backbone.body.layer4.0.downsample.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 2048), float32] */;
  %783 = nn.conv2d(%728, %782, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %784 = reshape(%model.backbone.body.layer4.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %785 = reshape(%model.backbone.body.layer4.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %786 = add(%785, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %787 = rsqrt(%786) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %788 = multiply(%784, %787) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %789 = layout_transform(%788, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %790 = multiply(%783, %789) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %791 = reshape(%model.backbone.body.layer4.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %792 = reshape(%model.backbone.body.layer4.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %793 = multiply(%792, %788) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %794 = subtract(%791, %793) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %795 = layout_transform(%794, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %796 = add(%790, %795) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %797 = add(%781, %796) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %798 = nn.relu(%797) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %799 = layout_transform(%model.backbone.body.layer4.1.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 2048, 512), float32] */;
  %800 = nn.conv2d(%798, %799, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %801 = reshape(%model.backbone.body.layer4.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %802 = reshape(%model.backbone.body.layer4.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %803 = add(%802, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %804 = rsqrt(%803) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %805 = multiply(%801, %804) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %806 = layout_transform(%805, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %807 = multiply(%800, %806) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %808 = reshape(%model.backbone.body.layer4.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %809 = reshape(%model.backbone.body.layer4.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %810 = multiply(%809, %805) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %811 = subtract(%808, %810) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %812 = layout_transform(%811, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %813 = add(%807, %812) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %814 = nn.relu(%813) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %815 = layout_transform(%model.backbone.body.layer4.1.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 512, 512), float32] */;
  %816 = nn.conv2d(%814, %815, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %817 = reshape(%model.backbone.body.layer4.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %818 = reshape(%model.backbone.body.layer4.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %819 = add(%818, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %820 = rsqrt(%819) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %821 = multiply(%817, %820) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %822 = layout_transform(%821, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %823 = multiply(%816, %822) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %824 = reshape(%model.backbone.body.layer4.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %825 = reshape(%model.backbone.body.layer4.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %826 = multiply(%825, %821) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %827 = subtract(%824, %826) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %828 = layout_transform(%827, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %829 = add(%823, %828) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %830 = nn.relu(%829) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %831 = layout_transform(%model.backbone.body.layer4.1.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 2048), float32] */;
  %832 = nn.conv2d(%830, %831, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %833 = reshape(%model.backbone.body.layer4.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %834 = reshape(%model.backbone.body.layer4.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %835 = add(%834, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %836 = rsqrt(%835) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %837 = multiply(%833, %836) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %838 = layout_transform(%837, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %839 = multiply(%832, %838) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %840 = reshape(%model.backbone.body.layer4.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %841 = reshape(%model.backbone.body.layer4.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %842 = multiply(%841, %837) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %843 = subtract(%840, %842) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %844 = layout_transform(%843, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %845 = add(%839, %844) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %846 = add(%845, %798) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %847 = nn.relu(%846) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %848 = layout_transform(%model.backbone.body.layer4.2.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 2048, 512), float32] */;
  %849 = nn.conv2d(%847, %848, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %850 = reshape(%model.backbone.body.layer4.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %851 = reshape(%model.backbone.body.layer4.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %852 = add(%851, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %853 = rsqrt(%852) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %854 = multiply(%850, %853) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %855 = layout_transform(%854, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %856 = multiply(%849, %855) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %857 = reshape(%model.backbone.body.layer4.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %858 = reshape(%model.backbone.body.layer4.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %859 = multiply(%858, %854) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %860 = subtract(%857, %859) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %861 = layout_transform(%860, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %862 = add(%856, %861) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %863 = nn.relu(%862) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %864 = layout_transform(%model.backbone.body.layer4.2.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 512, 512), float32] */;
  %865 = nn.conv2d(%863, %864, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %866 = reshape(%model.backbone.body.layer4.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %867 = reshape(%model.backbone.body.layer4.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %868 = add(%867, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %869 = rsqrt(%868) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %870 = multiply(%866, %869) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %871 = layout_transform(%870, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %872 = multiply(%865, %871) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %873 = reshape(%model.backbone.body.layer4.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %874 = reshape(%model.backbone.body.layer4.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %875 = multiply(%874, %870) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %876 = subtract(%873, %875) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %877 = layout_transform(%876, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %878 = add(%872, %877) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %879 = nn.relu(%878) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %880 = layout_transform(%model.backbone.body.layer4.2.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 2048), float32] */;
  %881 = nn.conv2d(%879, %880, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %882 = reshape(%model.backbone.body.layer4.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %883 = reshape(%model.backbone.body.layer4.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %884 = add(%883, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %885 = rsqrt(%884) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %886 = multiply(%882, %885) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %887 = layout_transform(%886, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %888 = multiply(%881, %887) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %889 = reshape(%model.backbone.body.layer4.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %890 = reshape(%model.backbone.body.layer4.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %891 = multiply(%890, %886) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %892 = subtract(%889, %891) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %893 = layout_transform(%892, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %894 = add(%888, %893) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %895 = add(%894, %847) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %896 = nn.relu(%895) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %897 = layout_transform(%model.backbone.fpn.inner_blocks.3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 2048, 256), float32] */;
  %898 = nn.conv2d(%896, %897, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %899 = expand_dims(%model.backbone.fpn.inner_blocks.3.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %900 = expand_dims(%899, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %901 = layout_transform(%900, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %902 = add(%898, %901) /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %903 = layout_transform(%902, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %904 = image.resize(%903, size=[50, 50], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %905 = layout_transform(%904, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %906 = add(%734, %905) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %907 = layout_transform(%906, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %908 = image.resize(%907, size=[100, 100], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %909 = layout_transform(%908, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %910 = add(%419, %909) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %911 = layout_transform(%910, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %912 = image.resize(%911, size=[200, 200], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %913 = layout_transform(%912, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %914 = add(%202, %913) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %915 = layout_transform(%model.backbone.fpn.layer_blocks.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %916 = nn.conv2d(%914, %915, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %917 = expand_dims(%model.backbone.fpn.layer_blocks.0.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %918 = expand_dims(%917, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %919 = layout_transform(%918, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %920 = add(%916, %919) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %921 = layout_transform(%920, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %922 = layout_transform(%model.rpn.head.conv.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %923 = nn.conv2d(%920, %922, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %924 = expand_dims(%model.rpn.head.conv.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %925 = expand_dims(%924, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %926 = layout_transform(%925, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %927 = add(%923, %926) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %928 = nn.relu(%927) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %929 = layout_transform(%model.rpn.head.bbox_pred.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 12), float32] */;
  %930 = nn.conv2d(%928, %929, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 12), float32] */;
  %931 = expand_dims(%model.rpn.head.bbox_pred.bias, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %932 = expand_dims(%931, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %933 = layout_transform(%932, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float32] */;
  %934 = add(%930, %933) /* ty=Tensor[(1, 200, 200, 12), float32] */;
  %935 = layout_transform(%934, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 200, 200), float32] */;
  %936 = reshape(%935, newshape=[1, -1, 4, 200, 200]) /* ty=Tensor[(1, 3, 4, 200, 200), float32] */;
  %937 = transpose(%936, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 4), float32] */;
  %938 = reshape(%937, newshape=[1, -1, 4]) /* ty=Tensor[(1, 120000, 4), float32] */;
  %939 = layout_transform(%model.backbone.fpn.layer_blocks.1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %940 = nn.conv2d(%910, %939, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %941 = expand_dims(%model.backbone.fpn.layer_blocks.1.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %942 = expand_dims(%941, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %943 = layout_transform(%942, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %944 = add(%940, %943) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %945 = nn.conv2d(%944, %922, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %946 = expand_dims(%model.rpn.head.conv.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %947 = expand_dims(%946, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %948 = layout_transform(%947, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %949 = add(%945, %948) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %950 = nn.relu(%949) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %951 = nn.conv2d(%950, %929, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 12), float32] */;
  %952 = expand_dims(%model.rpn.head.bbox_pred.bias, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %953 = expand_dims(%952, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %954 = layout_transform(%953, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float32] */;
  %955 = add(%951, %954) /* ty=Tensor[(1, 100, 100, 12), float32] */;
  %956 = layout_transform(%955, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 100, 100), float32] */;
  %957 = reshape(%956, newshape=[1, -1, 4, 100, 100]) /* ty=Tensor[(1, 3, 4, 100, 100), float32] */;
  %958 = transpose(%957, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 4), float32] */;
  %959 = reshape(%958, newshape=[1, -1, 4]) /* ty=Tensor[(1, 30000, 4), float32] */;
  %960 = layout_transform(%model.backbone.fpn.layer_blocks.2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %961 = nn.conv2d(%906, %960, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %962 = expand_dims(%model.backbone.fpn.layer_blocks.2.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %963 = expand_dims(%962, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %964 = layout_transform(%963, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %965 = add(%961, %964) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %966 = nn.conv2d(%965, %922, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %967 = expand_dims(%model.rpn.head.conv.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %968 = expand_dims(%967, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %969 = layout_transform(%968, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %970 = add(%966, %969) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %971 = nn.relu(%970) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %972 = nn.conv2d(%971, %929, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 12), float32] */;
  %973 = expand_dims(%model.rpn.head.bbox_pred.bias, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %974 = expand_dims(%973, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %975 = layout_transform(%974, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float32] */;
  %976 = add(%972, %975) /* ty=Tensor[(1, 50, 50, 12), float32] */;
  %977 = layout_transform(%976, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 50, 50), float32] */;
  %978 = reshape(%977, newshape=[1, -1, 4, 50, 50]) /* ty=Tensor[(1, 3, 4, 50, 50), float32] */;
  %979 = transpose(%978, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 4), float32] */;
  %980 = reshape(%979, newshape=[1, -1, 4]) /* ty=Tensor[(1, 7500, 4), float32] */;
  %981 = layout_transform(%model.backbone.fpn.layer_blocks.3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %982 = nn.conv2d(%902, %981, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %983 = expand_dims(%model.backbone.fpn.layer_blocks.3.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %984 = expand_dims(%983, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %985 = layout_transform(%984, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %986 = add(%982, %985) /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %987 = nn.conv2d(%986, %922, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %988 = expand_dims(%model.rpn.head.conv.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %989 = expand_dims(%988, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %990 = layout_transform(%989, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %991 = add(%987, %990) /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %992 = nn.relu(%991) /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %993 = nn.conv2d(%992, %929, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 12), float32] */;
  %994 = expand_dims(%model.rpn.head.bbox_pred.bias, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %995 = expand_dims(%994, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %996 = layout_transform(%995, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float32] */;
  %997 = add(%993, %996) /* ty=Tensor[(1, 25, 25, 12), float32] */;
  %998 = layout_transform(%997, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 25, 25), float32] */;
  %999 = reshape(%998, newshape=[1, -1, 4, 25, 25]) /* ty=Tensor[(1, 3, 4, 25, 25), float32] */;
  %1000 = transpose(%999, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 4), float32] */;
  %1001 = reshape(%1000, newshape=[1, -1, 4]) /* ty=Tensor[(1, 1875, 4), float32] */;
  %1002 = nn.max_pool2d(%986, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 13, 13, 256), float32] */;
  %1003 = nn.conv2d(%1002, %922, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 13, 13, 256), float32] */;
  %1004 = expand_dims(%model.rpn.head.conv.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %1005 = expand_dims(%1004, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1006 = layout_transform(%1005, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %1007 = add(%1003, %1006) /* ty=Tensor[(1, 13, 13, 256), float32] */;
  %1008 = nn.relu(%1007) /* ty=Tensor[(1, 13, 13, 256), float32] */;
  %1009 = nn.conv2d(%1008, %929, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 13, 13, 12), float32] */;
  %1010 = expand_dims(%model.rpn.head.bbox_pred.bias, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %1011 = expand_dims(%1010, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %1012 = layout_transform(%1011, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float32] */;
  %1013 = add(%1009, %1012) /* ty=Tensor[(1, 13, 13, 12), float32] */;
  %1014 = layout_transform(%1013, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 13, 13), float32] */;
  %1015 = reshape(%1014, newshape=[1, -1, 4, 13, 13]) /* ty=Tensor[(1, 3, 4, 13, 13), float32] */;
  %1016 = transpose(%1015, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 4), float32] */;
  %1017 = reshape(%1016, newshape=[1, -1, 4]) /* ty=Tensor[(1, 507, 4), float32] */;
  %1018 = (%938, %959, %980, %1001, %1017);
  %1019 = concatenate(%1018, axis=1) /* ty=Tensor[(1, 159882, 4), float32] */;
  %1020 = reshape(%1019, newshape=[-1, 4]) /* ty=Tensor[(159882, 4), float32] */;
  %1021 = reshape(%1020, newshape=[159882, -1]) /* ty=Tensor[(159882, 4), float32] */;
  %1022 = strided_slice(%1021, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
  %1023 = strided_slice(%1022, begin=[0, 0], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %1024 = divide(%1023, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %1025 = arange(0f /* ty=float32 */, 200f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][2], stop=meta[relay.Constant][3], step=meta[relay.Constant][4], dtype="float32") /* ty=Tensor[(200), float32] */;
  %1026 = floor_divide(800 /* ty=int32 */, 200 /* ty=int32 */) /* ty=int32 */;
  %1027 = cast(%1026, dtype="int64") /* ty=int64 */;
  %1028 = cast(%1027, dtype="float32") /* ty=float32 */;
  %1029 = multiply(%1025, %1028) /* ty=Tensor[(200), float32] */;
  %1030 = arange(0f /* ty=float32 */, 200f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][5], stop=meta[relay.Constant][6], step=meta[relay.Constant][7], dtype="float32") /* ty=Tensor[(200), float32] */;
  %1031 = floor_divide(800 /* ty=int32 */, 200 /* ty=int32 */) /* ty=int32 */;
  %1032 = cast(%1031, dtype="int64") /* ty=int64 */;
  %1033 = cast(%1032, dtype="float32") /* ty=float32 */;
  %1034 = multiply(%1030, %1033) /* ty=Tensor[(200), float32] */;
  %1035 = (%1029, %1034);
  %1036 = meshgrid(%1035) /* ty=(Tensor[(200, 200), float32], Tensor[(200, 200), float32]) */;
  %1037 = %1036.1;
  %1038 = reshape(%1037, newshape=[-1]) /* ty=Tensor[(40000), float32] */;
  %1039 = %1036.0;
  %1040 = reshape(%1039, newshape=[-1]) /* ty=Tensor[(40000), float32] */;
  %1041 = (%1038, %1040, %1038, %1040);
  %1042 = stack(%1041, axis=1) /* ty=Tensor[(40000, 4), float32] */;
  %1043 = reshape(%1042, newshape=[-1, 1, 4]) /* ty=Tensor[(40000, 1, 4), float32] */;
  %1044 = reshape(meta[relay.Constant][8] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %1045 = add(%1043, %1044) /* ty=Tensor[(40000, 3, 4), float32] */;
  %1046 = reshape(%1045, newshape=[-1, 4]) /* ty=Tensor[(120000, 4), float32] */;
  %1047 = arange(0f /* ty=float32 */, 100f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][9], stop=meta[relay.Constant][10], step=meta[relay.Constant][11], dtype="float32") /* ty=Tensor[(100), float32] */;
  %1048 = floor_divide(800 /* ty=int32 */, 100 /* ty=int32 */) /* ty=int32 */;
  %1049 = cast(%1048, dtype="int64") /* ty=int64 */;
  %1050 = cast(%1049, dtype="float32") /* ty=float32 */;
  %1051 = multiply(%1047, %1050) /* ty=Tensor[(100), float32] */;
  %1052 = arange(0f /* ty=float32 */, 100f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][12], stop=meta[relay.Constant][13], step=meta[relay.Constant][14], dtype="float32") /* ty=Tensor[(100), float32] */;
  %1053 = floor_divide(800 /* ty=int32 */, 100 /* ty=int32 */) /* ty=int32 */;
  %1054 = cast(%1053, dtype="int64") /* ty=int64 */;
  %1055 = cast(%1054, dtype="float32") /* ty=float32 */;
  %1056 = multiply(%1052, %1055) /* ty=Tensor[(100), float32] */;
  %1057 = (%1051, %1056);
  %1058 = meshgrid(%1057) /* ty=(Tensor[(100, 100), float32], Tensor[(100, 100), float32]) */;
  %1059 = %1058.1;
  %1060 = reshape(%1059, newshape=[-1]) /* ty=Tensor[(10000), float32] */;
  %1061 = %1058.0;
  %1062 = reshape(%1061, newshape=[-1]) /* ty=Tensor[(10000), float32] */;
  %1063 = (%1060, %1062, %1060, %1062);
  %1064 = stack(%1063, axis=1) /* ty=Tensor[(10000, 4), float32] */;
  %1065 = reshape(%1064, newshape=[-1, 1, 4]) /* ty=Tensor[(10000, 1, 4), float32] */;
  %1066 = reshape(meta[relay.Constant][15] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %1067 = add(%1065, %1066) /* ty=Tensor[(10000, 3, 4), float32] */;
  %1068 = reshape(%1067, newshape=[-1, 4]) /* ty=Tensor[(30000, 4), float32] */;
  %1069 = arange(0f /* ty=float32 */, 50f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][16], stop=meta[relay.Constant][17], step=meta[relay.Constant][18], dtype="float32") /* ty=Tensor[(50), float32] */;
  %1070 = floor_divide(800 /* ty=int32 */, 50 /* ty=int32 */) /* ty=int32 */;
  %1071 = cast(%1070, dtype="int64") /* ty=int64 */;
  %1072 = cast(%1071, dtype="float32") /* ty=float32 */;
  %1073 = multiply(%1069, %1072) /* ty=Tensor[(50), float32] */;
  %1074 = arange(0f /* ty=float32 */, 50f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][19], stop=meta[relay.Constant][20], step=meta[relay.Constant][21], dtype="float32") /* ty=Tensor[(50), float32] */;
  %1075 = floor_divide(800 /* ty=int32 */, 50 /* ty=int32 */) /* ty=int32 */;
  %1076 = cast(%1075, dtype="int64") /* ty=int64 */;
  %1077 = cast(%1076, dtype="float32") /* ty=float32 */;
  %1078 = multiply(%1074, %1077) /* ty=Tensor[(50), float32] */;
  %1079 = (%1073, %1078);
  %1080 = meshgrid(%1079) /* ty=(Tensor[(50, 50), float32], Tensor[(50, 50), float32]) */;
  %1081 = %1080.1;
  %1082 = reshape(%1081, newshape=[-1]) /* ty=Tensor[(2500), float32] */;
  %1083 = %1080.0;
  %1084 = reshape(%1083, newshape=[-1]) /* ty=Tensor[(2500), float32] */;
  %1085 = (%1082, %1084, %1082, %1084);
  %1086 = stack(%1085, axis=1) /* ty=Tensor[(2500, 4), float32] */;
  %1087 = reshape(%1086, newshape=[-1, 1, 4]) /* ty=Tensor[(2500, 1, 4), float32] */;
  %1088 = reshape(meta[relay.Constant][22] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %1089 = add(%1087, %1088) /* ty=Tensor[(2500, 3, 4), float32] */;
  %1090 = reshape(%1089, newshape=[-1, 4]) /* ty=Tensor[(7500, 4), float32] */;
  %1091 = arange(0f /* ty=float32 */, 25f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][23], stop=meta[relay.Constant][24], step=meta[relay.Constant][25], dtype="float32") /* ty=Tensor[(25), float32] */;
  %1092 = floor_divide(800 /* ty=int32 */, 25 /* ty=int32 */) /* ty=int32 */;
  %1093 = cast(%1092, dtype="int64") /* ty=int64 */;
  %1094 = cast(%1093, dtype="float32") /* ty=float32 */;
  %1095 = multiply(%1091, %1094) /* ty=Tensor[(25), float32] */;
  %1096 = arange(0f /* ty=float32 */, 25f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][26], stop=meta[relay.Constant][27], step=meta[relay.Constant][28], dtype="float32") /* ty=Tensor[(25), float32] */;
  %1097 = floor_divide(800 /* ty=int32 */, 25 /* ty=int32 */) /* ty=int32 */;
  %1098 = cast(%1097, dtype="int64") /* ty=int64 */;
  %1099 = cast(%1098, dtype="float32") /* ty=float32 */;
  %1100 = multiply(%1096, %1099) /* ty=Tensor[(25), float32] */;
  %1101 = (%1095, %1100);
  %1102 = meshgrid(%1101) /* ty=(Tensor[(25, 25), float32], Tensor[(25, 25), float32]) */;
  %1103 = %1102.1;
  %1104 = reshape(%1103, newshape=[-1]) /* ty=Tensor[(625), float32] */;
  %1105 = %1102.0;
  %1106 = reshape(%1105, newshape=[-1]) /* ty=Tensor[(625), float32] */;
  %1107 = (%1104, %1106, %1104, %1106);
  %1108 = stack(%1107, axis=1) /* ty=Tensor[(625, 4), float32] */;
  %1109 = reshape(%1108, newshape=[-1, 1, 4]) /* ty=Tensor[(625, 1, 4), float32] */;
  %1110 = reshape(meta[relay.Constant][29] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %1111 = add(%1109, %1110) /* ty=Tensor[(625, 3, 4), float32] */;
  %1112 = reshape(%1111, newshape=[-1, 4]) /* ty=Tensor[(1875, 4), float32] */;
  %1113 = arange(0f /* ty=float32 */, 13f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][30], stop=meta[relay.Constant][31], step=meta[relay.Constant][32], dtype="float32") /* ty=Tensor[(13), float32] */;
  %1114 = floor_divide(800 /* ty=int32 */, 13 /* ty=int32 */) /* ty=int32 */;
  %1115 = cast(%1114, dtype="int64") /* ty=int64 */;
  %1116 = cast(%1115, dtype="float32") /* ty=float32 */;
  %1117 = multiply(%1113, %1116) /* ty=Tensor[(13), float32] */;
  %1118 = arange(0f /* ty=float32 */, 13f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][33], stop=meta[relay.Constant][34], step=meta[relay.Constant][35], dtype="float32") /* ty=Tensor[(13), float32] */;
  %1119 = floor_divide(800 /* ty=int32 */, 13 /* ty=int32 */) /* ty=int32 */;
  %1120 = cast(%1119, dtype="int64") /* ty=int64 */;
  %1121 = cast(%1120, dtype="float32") /* ty=float32 */;
  %1122 = multiply(%1118, %1121) /* ty=Tensor[(13), float32] */;
  %1123 = (%1117, %1122);
  %1124 = meshgrid(%1123) /* ty=(Tensor[(13, 13), float32], Tensor[(13, 13), float32]) */;
  %1125 = %1124.1;
  %1126 = reshape(%1125, newshape=[-1]) /* ty=Tensor[(169), float32] */;
  %1127 = %1124.0;
  %1128 = reshape(%1127, newshape=[-1]) /* ty=Tensor[(169), float32] */;
  %1129 = (%1126, %1128, %1126, %1128);
  %1130 = stack(%1129, axis=1) /* ty=Tensor[(169, 4), float32] */;
  %1131 = reshape(%1130, newshape=[-1, 1, 4]) /* ty=Tensor[(169, 1, 4), float32] */;
  %1132 = reshape(meta[relay.Constant][36] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %1133 = add(%1131, %1132) /* ty=Tensor[(169, 3, 4), float32] */;
  %1134 = reshape(%1133, newshape=[-1, 4]) /* ty=Tensor[(507, 4), float32] */;
  %1135 = (%1046, %1068, %1090, %1112, %1134);
  %1136 = concatenate(%1135) /* ty=Tensor[(159882, 4), float32] */;
  %1137 = (%1136,);
  %1138 = concatenate(%1137) /* ty=Tensor[(159882, 4), float32] */;
  %1139 = strided_slice(%1138, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
  %1140 = take(%1139, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1141 = strided_slice(%1138, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
  %1142 = take(%1141, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1143 = subtract(%1140, %1142) /* ty=Tensor[(159882), float32] */;
  %1144 = strided_slice(%1143, begin=[0], end=[159882], strides=[1]) /* ty=Tensor[(159882), float32] */;
  %1145 = expand_dims(%1144, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1146 = multiply(%1024, %1145) /* ty=Tensor[(159882, 1), float32] */;
  %1147 = strided_slice(%1138, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
  %1148 = take(%1147, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1149 = multiply(%1143, 0.5f /* ty=float32 */) /* ty=Tensor[(159882), float32] */;
  %1150 = add(%1148, %1149) /* ty=Tensor[(159882), float32] */;
  %1151 = strided_slice(%1150, begin=[0], end=[159882], strides=[1]) /* ty=Tensor[(159882), float32] */;
  %1152 = expand_dims(%1151, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1153 = add(%1146, %1152) /* ty=Tensor[(159882, 1), float32] */;
  %1154 = strided_slice(%1021, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
  %1155 = strided_slice(%1154, begin=[0, 2], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %1156 = divide(%1155, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %1157 = clip(%1156, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float32] */;
  %1158 = exp(%1157) /* ty=Tensor[(159882, 1), float32] */;
  %1159 = strided_slice(%1143, begin=[0], end=[159882], strides=[1]) /* ty=Tensor[(159882), float32] */;
  %1160 = expand_dims(%1159, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1161 = multiply(%1158, %1160) /* ty=Tensor[(159882, 1), float32] */;
  %1162 = multiply(0.5f /* ty=float32 */, %1161) /* ty=Tensor[(159882, 1), float32] */;
  %1163 = subtract(%1153, %1162) /* ty=Tensor[(159882, 1), float32] */;
  %1164 = strided_slice(%1021, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
  %1165 = strided_slice(%1164, begin=[0, 1], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %1166 = divide(%1165, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %1167 = strided_slice(%1138, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
  %1168 = take(%1167, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1169 = strided_slice(%1138, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
  %1170 = take(%1169, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1171 = subtract(%1168, %1170) /* ty=Tensor[(159882), float32] */;
  %1172 = strided_slice(%1171, begin=[0], end=[159882], strides=[1]) /* ty=Tensor[(159882), float32] */;
  %1173 = expand_dims(%1172, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1174 = multiply(%1166, %1173) /* ty=Tensor[(159882, 1), float32] */;
  %1175 = strided_slice(%1138, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
  %1176 = take(%1175, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1177 = multiply(%1171, 0.5f /* ty=float32 */) /* ty=Tensor[(159882), float32] */;
  %1178 = add(%1176, %1177) /* ty=Tensor[(159882), float32] */;
  %1179 = strided_slice(%1178, begin=[0], end=[159882], strides=[1]) /* ty=Tensor[(159882), float32] */;
  %1180 = expand_dims(%1179, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1181 = add(%1174, %1180) /* ty=Tensor[(159882, 1), float32] */;
  %1182 = strided_slice(%1021, begin=[0, 0], end=[159882, 4], strides=[1, 1]) /* ty=Tensor[(159882, 4), float32] */;
  %1183 = strided_slice(%1182, begin=[0, 3], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %1184 = divide(%1183, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %1185 = clip(%1184, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float32] */;
  %1186 = exp(%1185) /* ty=Tensor[(159882, 1), float32] */;
  %1187 = strided_slice(%1171, begin=[0], end=[159882], strides=[1]) /* ty=Tensor[(159882), float32] */;
  %1188 = expand_dims(%1187, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1189 = multiply(%1186, %1188) /* ty=Tensor[(159882, 1), float32] */;
  %1190 = multiply(0.5f /* ty=float32 */, %1189) /* ty=Tensor[(159882, 1), float32] */;
  %1191 = subtract(%1181, %1190) /* ty=Tensor[(159882, 1), float32] */;
  %1192 = multiply(0.5f /* ty=float32 */, %1161) /* ty=Tensor[(159882, 1), float32] */;
  %1193 = add(%1153, %1192) /* ty=Tensor[(159882, 1), float32] */;
  %1194 = multiply(0.5f /* ty=float32 */, %1189) /* ty=Tensor[(159882, 1), float32] */;
  %1195 = add(%1181, %1194) /* ty=Tensor[(159882, 1), float32] */;
  %1196 = (%1163, %1191, %1193, %1195);
  %1197 = stack(%1196, axis=2) /* ty=Tensor[(159882, 1, 4), float32] */;
  %1198 = reshape(%1197, newshape=[0, -1, 1]) /* ty=Tensor[(159882, 4, 1), float32] */;
  %1199 = squeeze(%1198, axis=[2]) /* ty=Tensor[(159882, 4), float32] */;
  %1200 = reshape(%1199, newshape=[159882, -1, 4]) /* ty=Tensor[(159882, 1, 4), float32] */;
  %1201 = reshape(%1200, newshape=[1, -1, 4]) /* ty=Tensor[(1, 159882, 4), float32] */;
  %1202 = arange(0 /* ty=int64 */, 1 /* ty=int64 */, 1 /* ty=int64 */, start=meta[relay.Constant][37], stop=meta[relay.Constant][38], step=meta[relay.Constant][39], dtype="int64") /* ty=Tensor[(1), int64] */;
  %1203 = strided_slice(%1202, begin=[0], end=[1], strides=[1]) /* ty=Tensor[(1), int64] */;
  %1204 = expand_dims(%1203, axis=1) /* ty=Tensor[(1, 1), int64] */;
  %1205 = layout_transform(%model.rpn.head.cls_logits.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 3), float32] */;
  %1206 = nn.conv2d(%928, %1205, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 3), float32] */;
  %1207 = expand_dims(%model.rpn.head.cls_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %1208 = expand_dims(%1207, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
  %1209 = layout_transform(%1208, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float32] */;
  %1210 = add(%1206, %1209) /* ty=Tensor[(1, 200, 200, 3), float32] */;
  %1211 = layout_transform(%1210, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 200, 200), float32] */;
  %1212 = reshape(%1211, newshape=[1, -1, 1, 200, 200]) /* ty=Tensor[(1, 3, 1, 200, 200), float32] */;
  %1213 = transpose(%1212, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 1), float32] */;
  %1214 = reshape(%1213, newshape=[1, -1, 1]) /* ty=Tensor[(1, 120000, 1), float32] */;
  %1215 = nn.conv2d(%950, %1205, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 3), float32] */;
  %1216 = expand_dims(%model.rpn.head.cls_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %1217 = expand_dims(%1216, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
  %1218 = layout_transform(%1217, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float32] */;
  %1219 = add(%1215, %1218) /* ty=Tensor[(1, 100, 100, 3), float32] */;
  %1220 = layout_transform(%1219, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 100, 100), float32] */;
  %1221 = reshape(%1220, newshape=[1, -1, 1, 100, 100]) /* ty=Tensor[(1, 3, 1, 100, 100), float32] */;
  %1222 = transpose(%1221, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 1), float32] */;
  %1223 = reshape(%1222, newshape=[1, -1, 1]) /* ty=Tensor[(1, 30000, 1), float32] */;
  %1224 = nn.conv2d(%971, %1205, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 3), float32] */;
  %1225 = expand_dims(%model.rpn.head.cls_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %1226 = expand_dims(%1225, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
  %1227 = layout_transform(%1226, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float32] */;
  %1228 = add(%1224, %1227) /* ty=Tensor[(1, 50, 50, 3), float32] */;
  %1229 = layout_transform(%1228, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 50, 50), float32] */;
  %1230 = reshape(%1229, newshape=[1, -1, 1, 50, 50]) /* ty=Tensor[(1, 3, 1, 50, 50), float32] */;
  %1231 = transpose(%1230, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 1), float32] */;
  %1232 = reshape(%1231, newshape=[1, -1, 1]) /* ty=Tensor[(1, 7500, 1), float32] */;
  %1233 = nn.conv2d(%992, %1205, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 3), float32] */;
  %1234 = expand_dims(%model.rpn.head.cls_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %1235 = expand_dims(%1234, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
  %1236 = layout_transform(%1235, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float32] */;
  %1237 = add(%1233, %1236) /* ty=Tensor[(1, 25, 25, 3), float32] */;
  %1238 = layout_transform(%1237, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 25, 25), float32] */;
  %1239 = reshape(%1238, newshape=[1, -1, 1, 25, 25]) /* ty=Tensor[(1, 3, 1, 25, 25), float32] */;
  %1240 = transpose(%1239, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 1), float32] */;
  %1241 = reshape(%1240, newshape=[1, -1, 1]) /* ty=Tensor[(1, 1875, 1), float32] */;
  %1242 = nn.conv2d(%1008, %1205, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 13, 13, 3), float32] */;
  %1243 = expand_dims(%model.rpn.head.cls_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %1244 = expand_dims(%1243, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
  %1245 = layout_transform(%1244, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float32] */;
  %1246 = add(%1242, %1245) /* ty=Tensor[(1, 13, 13, 3), float32] */;
  %1247 = layout_transform(%1246, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 13, 13), float32] */;
  %1248 = reshape(%1247, newshape=[1, -1, 1, 13, 13]) /* ty=Tensor[(1, 3, 1, 13, 13), float32] */;
  %1249 = transpose(%1248, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 1), float32] */;
  %1250 = reshape(%1249, newshape=[1, -1, 1]) /* ty=Tensor[(1, 507, 1), float32] */;
  %1251 = (%1214, %1223, %1232, %1241, %1250);
  %1252 = concatenate(%1251, axis=1) /* ty=Tensor[(1, 159882, 1), float32] */;
  %1253 = reshape(%1252, newshape=[-1, 1, 0]) /* ty=Tensor[(159882, 1, 1), float32] */;
  %1254 = squeeze(%1253, axis=[1]) /* ty=Tensor[(159882, 1), float32] */;
  %1255 = reshape(%1254, newshape=[1, -1]) /* ty=Tensor[(1, 159882), float32] */;
  %1256 = split(%1255, indices_or_sections=[120000, 150000, 157500, 159375], axis=1) /* ty=(Tensor[(1, 120000), float32], Tensor[(1, 30000), float32], Tensor[(1, 7500), float32], Tensor[(1, 1875), float32], Tensor[(1, 507), float32]) */;
  %1257 = %1256.0;
  %1258 = topk(%1257, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1259 = %1258.1;
  %1260 = add(%1259, 0 /* ty=int64 */) /* ty=Tensor[(1, 1000), int64] */;
  %1261 = %1256.1;
  %1262 = topk(%1261, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1263 = %1262.1;
  %1264 = take(meta[relay.Constant][40] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1265 = expand_dims(%1264, axis=0) /* ty=Tensor[(1), int64] */;
  %1266 = add(%1265, 0 /* ty=int64 */) /* ty=Tensor[(1), int64] */;
  %1267 = add(%1263, %1266) /* ty=Tensor[(1, 1000), int64] */;
  %1268 = %1256.2;
  %1269 = topk(%1268, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1270 = %1269.1;
  %1271 = take(meta[relay.Constant][41] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1272 = expand_dims(%1271, axis=0) /* ty=Tensor[(1), int64] */;
  %1273 = add(%1266, %1272) /* ty=Tensor[(1), int64] */;
  %1274 = add(%1270, %1273) /* ty=Tensor[(1, 1000), int64] */;
  %1275 = %1256.3;
  %1276 = topk(%1275, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1277 = %1276.1;
  %1278 = take(meta[relay.Constant][42] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1279 = expand_dims(%1278, axis=0) /* ty=Tensor[(1), int64] */;
  %1280 = add(%1273, %1279) /* ty=Tensor[(1), int64] */;
  %1281 = add(%1277, %1280) /* ty=Tensor[(1, 1000), int64] */;
  %1282 = %1256.4;
  %1283 = topk(%1282, k=507, axis=1, dtype="int64") /* ty=(Tensor[(1, 507), float32], Tensor[(1, 507), int64]) */;
  %1284 = %1283.1;
  %1285 = take(meta[relay.Constant][43] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1286 = expand_dims(%1285, axis=0) /* ty=Tensor[(1), int64] */;
  %1287 = add(%1280, %1286) /* ty=Tensor[(1), int64] */;
  %1288 = add(%1284, %1287) /* ty=Tensor[(1, 507), int64] */;
  %1289 = (%1260, %1267, %1274, %1281, %1288);
  %1290 = concatenate(%1289, axis=1) /* ty=Tensor[(1, 4507), int64] */;
  %1291 = (%1201, %1204, %1290);
  %1292 = adv_index(%1291) /* ty=Tensor[(1, 4507, 4), float32] */;
  %1293 = split(%1292, indices_or_sections=1) /* ty=(Tensor[(1, 4507, 4), float32],) */;
  %1294 = %1293.0;
  %1295 = squeeze(%1294, axis=[0]) /* ty=Tensor[(4507, 4), float32] */;
  %1296 = strided_slice(%1295, begin=[0, 0], end=[4507, 4], strides=[1, 2]) /* ty=Tensor[(4507, 2), float32] */;
  %1297 = maximum(%1296, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
  %1298 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1299 = minimum(%1297, %1298) /* ty=Tensor[(4507, 2), float32] */;
  %1300 = strided_slice(%1295, begin=[0, 1], end=[4507, 4], strides=[1, 2]) /* ty=Tensor[(4507, 2), float32] */;
  %1301 = maximum(%1300, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
  %1302 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1303 = minimum(%1301, %1302) /* ty=Tensor[(4507, 2), float32] */;
  %1304 = (%1299, %1303);
  %1305 = stack(%1304, axis=2) /* ty=Tensor[(4507, 2, 2), float32] */;
  %1306 = reshape(%1305, newshape=[4507, 4]) /* ty=Tensor[(4507, 4), float32] */;
  %1307 = strided_slice(%1306, begin=[0, 0], end=[4507, 4], strides=[1, 1]) /* ty=Tensor[(4507, 4), float32] */;
  %1308 = take(%1307, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1309 = strided_slice(%1306, begin=[0, 0], end=[4507, 4], strides=[1, 1]) /* ty=Tensor[(4507, 4), float32] */;
  %1310 = take(%1309, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1311 = subtract(%1308, %1310) /* ty=Tensor[(4507), float32] */;
  %1312 = greater_equal(%1311, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
  %1313 = cast(%1312, dtype="bool") /* ty=Tensor[(4507), bool] */;
  %1314 = strided_slice(%1306, begin=[0, 0], end=[4507, 4], strides=[1, 1]) /* ty=Tensor[(4507, 4), float32] */;
  %1315 = take(%1314, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1316 = strided_slice(%1306, begin=[0, 0], end=[4507, 4], strides=[1, 1]) /* ty=Tensor[(4507, 4), float32] */;
  %1317 = take(%1316, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1318 = subtract(%1315, %1317) /* ty=Tensor[(4507), float32] */;
  %1319 = greater_equal(%1318, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
  %1320 = cast(%1319, dtype="bool") /* ty=Tensor[(4507), bool] */;
  %1321 = logical_and(%1313, %1320) /* ty=Tensor[(4507), bool] */;
  %1322 = argwhere(%1321) /* ty=Tensor[(?, 1), int32] */;
  %1323 = split(%1322, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1324 = %1323.0;
  %1325 = squeeze(%1324, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1326 = cast(%1325, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1327 = (%1306, %1326);
  %1328 = adv_index(%1327) /* ty=Tensor[(?, 4), float32] */;
  %1329 = ndarray_size(%1328, dtype="int32") /* ty=int32 */;
  %1330 = equal(%1329, 0 /* ty=int32 */) /* ty=bool */;
  %1380 = if (%1330) {
    zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
  } else {
    %1331 = full(0 /* ty=int32 */, shape=[120000], dtype="int64") /* ty=Tensor[(120000), int64] */;
    %1332 = full(1 /* ty=int32 */, shape=[30000], dtype="int64") /* ty=Tensor[(30000), int64] */;
    %1333 = full(2 /* ty=int32 */, shape=[7500], dtype="int64") /* ty=Tensor[(7500), int64] */;
    %1334 = full(3 /* ty=int32 */, shape=[1875], dtype="int64") /* ty=Tensor[(1875), int64] */;
    %1335 = full(4 /* ty=int32 */, shape=[507], dtype="int64") /* ty=Tensor[(507), int64] */;
    %1336 = (%1331, %1332, %1333, %1334, %1335);
    %1337 = concatenate(%1336) /* ty=Tensor[(159882), int64] */;
    %1338 = reshape(%1337, newshape=[1, -1]) /* ty=Tensor[(1, 159882), int64] */;
    %1339 = cast(%1255, dtype="int64") /* ty=Tensor[(1, 159882), int64] */;
    %1340 = broadcast_to_like(%1338, %1339) /* ty=Tensor[(1, 159882), int64] */;
    %1341 = (%1340, %1204, %1290);
    %1342 = adv_index(%1341) /* ty=Tensor[(1, 4507), int64] */;
    %1343 = split(%1342, indices_or_sections=1) /* ty=(Tensor[(1, 4507), int64],) */;
    %1344 = %1343.0;
    %1345 = squeeze(%1344, axis=[0]) /* ty=Tensor[(4507), int64] */;
    %1346 = (%1345, %1326);
    %1347 = adv_index(%1346) /* ty=Tensor[(?), int64] */;
    %1348 = expand_dims(%1347, axis=-1) /* ty=Tensor[(?, 1), int64] */;
    %1349 = cast(%1348, dtype="float32") /* ty=Tensor[(?, 1), float32] */;
    %1350 = (%1255, %1204, %1290);
    %1351 = adv_index(%1350) /* ty=Tensor[(1, 4507), float32] */;
    %1352 = split(%1351, indices_or_sections=1) /* ty=(Tensor[(1, 4507), float32],) */;
    %1353 = %1352.0;
    %1354 = squeeze(%1353, axis=[0]) /* ty=Tensor[(4507), float32] */;
    %1355 = (%1354, %1326);
    %1356 = adv_index(%1355) /* ty=Tensor[(?), float32] */;
    %1357 = min(%1356) /* ty=float32 */;
    %1358 = subtract(%1356, %1357) /* ty=Tensor[(?), float32] */;
    %1359 = add(%1358, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %1360 = expand_dims(%1359, axis=-1) /* ty=Tensor[(?, 1), float32] */;
    %1361 = (%1349, %1360, %1328);
    %1362 = concatenate(%1361, axis=-1) /* ty=Tensor[(?, 6), float32] */;
    %1363 = expand_dims(%1362, axis=0) /* ty=Tensor[(1, ?, 6), float32] */;
    %1364 = shape_of(%1359, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1365 = squeeze(%1364) /* ty=int32 */;
    %1366 = arange(0 /* ty=int32 */, %1365, 1 /* ty=int32 */, start=meta[relay.Constant][44], stop=meta[relay.Call][0], step=meta[relay.Constant][45], dtype="int32") /* ty=Tensor[(?), int32] */;
    %1367 = expand_dims(%1366, axis=0) /* ty=Tensor[(1, ?), int32] */;
    %1368 = vision.non_max_suppression(%1363, %1364, %1367, 1000 /* ty=int32 */, 0.7f /* ty=float32 */, meta[relay.attrs.NonMaximumSuppressionAttrs][0]) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */;
    %1369 = %1368.0;
    %1370 = squeeze(%1369, axis=[0]) /* ty=Tensor[(?), int32] */;
    %1371 = cast_like(0 /* ty=int32 */, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
    %1372 = less(meta[relay.Constant][46] /* ty=Tensor[(1), int32] */, %1371) /* ty=Tensor[(1), bool] */;
    %1373 = shape_of(%1370, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1374 = cast_like(%1373, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1375 = add(meta[relay.Constant][46] /* ty=Tensor[(1), int32] */, %1374) /* ty=Tensor[(1), int32] */;
    %1376 = where(%1372, %1375, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1377 = %1368.1;
    %1378 = squeeze(%1377, axis=[1]) /* ty=Tensor[(1), int32] */;
    %1379 = dyn.strided_slice(%1370, %1376, %1378, meta[relay.Constant][47] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None, slice_mode="size") /* ty=Tensor[(?), int32] */;
    cast(%1379, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %1381 = (%1328, %1380);
  %1382 = adv_index(%1381) /* ty=Tensor[(?, 4), float32] */;
  %1383 = cast_like(0 /* ty=int32 */, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1384 = less(meta[relay.Constant][48] /* ty=Tensor[(2), int32] */, %1383) /* ty=Tensor[(2), bool] */;
  %1385 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1386 = cast_like(%1385, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1387 = add(meta[relay.Constant][48] /* ty=Tensor[(2), int32] */, %1386) /* ty=Tensor[(2), int32] */;
  %1388 = where(%1384, %1387, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1389 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1390 = cast(%1389, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1391 = dyn.strided_slice(%1382, %1388, %1390, meta[relay.Constant][49] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1392 = cast_like(0 /* ty=int32 */, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1393 = less(meta[relay.Constant][50] /* ty=Tensor[(2), int32] */, %1392) /* ty=Tensor[(2), bool] */;
  %1394 = shape_of(%1391, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1395 = cast_like(%1394, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1396 = add(meta[relay.Constant][50] /* ty=Tensor[(2), int32] */, %1395) /* ty=Tensor[(2), int32] */;
  %1397 = where(%1393, %1396, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1398 = shape_of(%1391, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1399 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1400 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1401 = scatter(%1398, %1399, %1400, meta[relay.attrs.ScatterAttrs][0]) /* ty=Tensor[(2), int32] */;
  %1402 = cast(%1401, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1403 = dyn.strided_slice(%1391, %1397, %1402, meta[relay.Constant][51] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1404 = full_like(%1403, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
  %1405 = (%1404,);
  %1406 = concatenate(%1405) /* ty=Tensor[(?, ?), float32] */;
  %1407 = (%1382,);
  %1408 = concatenate(%1407) /* ty=Tensor[(?, 4), float32] */;
  %1409 = (%1406, %1408);
  %1410 = concatenate(%1409, axis=1) /* ty=Tensor[(?, ?), float32] */;
  %1411 = cast_like(0 /* ty=int32 */, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1412 = less(meta[relay.Constant][52] /* ty=Tensor[(2), int32] */, %1411) /* ty=Tensor[(2), bool] */;
  %1413 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1414 = cast_like(%1413, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1415 = add(meta[relay.Constant][52] /* ty=Tensor[(2), int32] */, %1414) /* ty=Tensor[(2), int32] */;
  %1416 = where(%1412, %1415, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1417 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1418 = cast(%1417, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1419 = dyn.strided_slice(%1382, %1416, %1418, meta[relay.Constant][53] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1420 = take(%1419, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1421 = cast_like(0 /* ty=int32 */, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1422 = less(meta[relay.Constant][54] /* ty=Tensor[(2), int32] */, %1421) /* ty=Tensor[(2), bool] */;
  %1423 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1424 = cast_like(%1423, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1425 = add(meta[relay.Constant][54] /* ty=Tensor[(2), int32] */, %1424) /* ty=Tensor[(2), int32] */;
  %1426 = where(%1422, %1425, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1427 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1428 = cast(%1427, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1429 = dyn.strided_slice(%1382, %1426, %1428, meta[relay.Constant][55] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1430 = take(%1429, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1431 = subtract(%1420, %1430) /* ty=Tensor[(?), float32] */;
  %1432 = cast_like(0 /* ty=int32 */, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1433 = less(meta[relay.Constant][56] /* ty=Tensor[(2), int32] */, %1432) /* ty=Tensor[(2), bool] */;
  %1434 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1435 = cast_like(%1434, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1436 = add(meta[relay.Constant][56] /* ty=Tensor[(2), int32] */, %1435) /* ty=Tensor[(2), int32] */;
  %1437 = where(%1433, %1436, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1438 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1439 = cast(%1438, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1440 = dyn.strided_slice(%1382, %1437, %1439, meta[relay.Constant][57] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1441 = take(%1440, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1442 = cast_like(0 /* ty=int32 */, meta[relay.Constant][58] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1443 = less(meta[relay.Constant][58] /* ty=Tensor[(2), int32] */, %1442) /* ty=Tensor[(2), bool] */;
  %1444 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1445 = cast_like(%1444, meta[relay.Constant][58] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1446 = add(meta[relay.Constant][58] /* ty=Tensor[(2), int32] */, %1445) /* ty=Tensor[(2), int32] */;
  %1447 = where(%1443, %1446, meta[relay.Constant][58] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1448 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1449 = cast(%1448, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1450 = dyn.strided_slice(%1382, %1447, %1449, meta[relay.Constant][59] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1451 = take(%1450, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1452 = subtract(%1441, %1451) /* ty=Tensor[(?), float32] */;
  %1453 = multiply(%1431, %1452) /* ty=Tensor[(?), float32] */;
  %1454 = (%1453,);
  %1455 = concatenate(%1454) /* ty=Tensor[(?), float32] */;
  %1456 = sqrt(%1455) /* ty=Tensor[(?), float32] */;
  %1457 = divide(%1456, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1458 = log2(%1457) /* ty=Tensor[(?), float32] */;
  %1459 = add(%1458, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1460 = add(%1459, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1461 = floor(%1460) /* ty=Tensor[(?), float32] */;
  %1462 = clip(%1461, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
  %1463 = cast(%1462, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1464 = subtract(%1463, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */;
  %1465 = equal(%1464, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1466 = argwhere(%1465) /* ty=Tensor[(?, 1), int32] */;
  %1467 = split(%1466, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1468 = %1467.0;
  %1469 = squeeze(%1468, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1470 = cast(%1469, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1471 = (%1410, %1470);
  %1472 = adv_index(%1471) /* ty=Tensor[(?, ?), float32] */;
  %1473 = vision.roi_align(%921, %1472, meta[relay.attrs.ROIAlignAttrs][0]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1474 = layout_transform(%944, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %1475 = equal(%1464, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1476 = argwhere(%1475) /* ty=Tensor[(?, 1), int32] */;
  %1477 = split(%1476, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1478 = %1477.0;
  %1479 = squeeze(%1478, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1480 = cast(%1479, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1481 = (%1410, %1480);
  %1482 = adv_index(%1481) /* ty=Tensor[(?, ?), float32] */;
  %1483 = vision.roi_align(%1474, %1482, meta[relay.attrs.ROIAlignAttrs][1]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1484 = layout_transform(%965, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %1485 = equal(%1464, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1486 = argwhere(%1485) /* ty=Tensor[(?, 1), int32] */;
  %1487 = split(%1486, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1488 = %1487.0;
  %1489 = squeeze(%1488, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1490 = cast(%1489, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1491 = (%1410, %1490);
  %1492 = adv_index(%1491) /* ty=Tensor[(?, ?), float32] */;
  %1493 = vision.roi_align(%1484, %1492, meta[relay.attrs.ROIAlignAttrs][2]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1494 = layout_transform(%986, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %1495 = equal(%1464, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1496 = argwhere(%1495) /* ty=Tensor[(?, 1), int32] */;
  %1497 = split(%1496, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1498 = %1497.0;
  %1499 = squeeze(%1498, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1500 = cast(%1499, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1501 = (%1410, %1500);
  %1502 = adv_index(%1501) /* ty=Tensor[(?, ?), float32] */;
  %1503 = vision.roi_align(%1494, %1502, meta[relay.attrs.ROIAlignAttrs][3]) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1504 = (%1473, %1483, %1493, %1503);
  %1505 = concatenate(%1504) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1506 = equal(%1464, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1507 = argwhere(%1506) /* ty=Tensor[(?, 1), int32] */;
  %1508 = split(%1507, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1509 = %1508.0;
  %1510 = squeeze(%1509, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1511 = cast(%1510, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1512 = equal(%1464, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1513 = argwhere(%1512) /* ty=Tensor[(?, 1), int32] */;
  %1514 = split(%1513, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1515 = %1514.0;
  %1516 = squeeze(%1515, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1517 = cast(%1516, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1518 = equal(%1464, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1519 = argwhere(%1518) /* ty=Tensor[(?, 1), int32] */;
  %1520 = split(%1519, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1521 = %1520.0;
  %1522 = squeeze(%1521, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1523 = cast(%1522, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1524 = equal(%1464, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1525 = argwhere(%1524) /* ty=Tensor[(?, 1), int32] */;
  %1526 = split(%1525, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1527 = %1526.0;
  %1528 = squeeze(%1527, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1529 = cast(%1528, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1530 = (%1511, %1517, %1523, %1529);
  %1531 = concatenate(%1530) /* ty=Tensor[(?), int64] */;
  %1532 = argsort(%1531, dtype="int32") /* ty=Tensor[(?), int32] */;
  %1533 = cast(%1532, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1534 = take(%1505, %1533, axis=0) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1535 = reshape(%1534, newshape=[0, -1, 1, 1]) /* ty=Tensor[(?, 12544, 1, 1), float32] */;
  %1536 = squeeze(%1535, axis=[2, 3]) /* ty=Tensor[(?, 12544), float32] */;
  %1537 = transpose(%model.roi_heads.box_head.fc6.weight, axes=[1, 0]) /* ty=Tensor[(12544, 1024), float32] */;
  %1538 = transpose(%1537, axes=[1, 0]) /* ty=Tensor[(1024, 12544), float32] */;
  %1539 = nn.dense(%1536, %1538, units=1024) /* ty=Tensor[(?, 1024), float32] */;
  %1540 = add(%1539, %model.roi_heads.box_head.fc6.bias) /* ty=Tensor[(?, 1024), float32] */;
  %1541 = nn.relu(%1540) /* ty=Tensor[(?, 1024), float32] */;
  %1542 = transpose(%model.roi_heads.box_head.fc7.weight, axes=[1, 0]) /* ty=Tensor[(1024, 1024), float32] */;
  %1543 = transpose(%1542, axes=[1, 0]) /* ty=Tensor[(1024, 1024), float32] */;
  %1544 = nn.dense(%1541, %1543, units=1024) /* ty=Tensor[(?, 1024), float32] */;
  %1545 = add(%1544, %model.roi_heads.box_head.fc7.bias) /* ty=Tensor[(?, 1024), float32] */;
  %1546 = nn.relu(%1545) /* ty=Tensor[(?, 1024), float32] */;
  %1547 = reshape(%1546, newshape=[0, -1]) /* ty=Tensor[(?, 1024), float32] */;
  %1548 = transpose(%model.roi_heads.box_predictor.bbox_pred.weight, axes=[1, 0]) /* ty=Tensor[(1024, 364), float32] */;
  %1549 = transpose(%1548, axes=[1, 0]) /* ty=Tensor[(364, 1024), float32] */;
  %1550 = nn.dense(%1547, %1549, units=364) /* ty=Tensor[(?, 364), float32] */;
  %1551 = add(%1550, %model.roi_heads.box_predictor.bbox_pred.bias) /* ty=Tensor[(?, 364), float32] */;
  %1552 = shape_of(%1382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1553 = take(%1552, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1554 = add(%1553, 0 /* ty=int32 */) /* ty=int32 */;
  %1555 = cast(%1554, dtype="int64") /* ty=int64 */;
  %1556 = expand_dims(%1555, axis=0) /* ty=Tensor[(1), int64] */;
  %1557 = expand_dims(-1 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1558 = (%1556, %1557);
  %1559 = concatenate(%1558) /* ty=Tensor[(2), int64] */;
  %1560 = dyn.reshape(%1551, %1559, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1561 = cast_like(0 /* ty=int32 */, meta[relay.Constant][60] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1562 = less(meta[relay.Constant][60] /* ty=Tensor[(2), int32] */, %1561) /* ty=Tensor[(2), bool] */;
  %1563 = shape_of(%1560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1564 = cast_like(%1563, meta[relay.Constant][60] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1565 = add(meta[relay.Constant][60] /* ty=Tensor[(2), int32] */, %1564) /* ty=Tensor[(2), int32] */;
  %1566 = where(%1562, %1565, meta[relay.Constant][60] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1567 = shape_of(%1560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1568 = cast(%1567, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1569 = dyn.strided_slice(%1560, %1566, %1568, meta[relay.Constant][61] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1570 = cast_like(0 /* ty=int32 */, meta[relay.Constant][62] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1571 = less(meta[relay.Constant][62] /* ty=Tensor[(2), int32] */, %1570) /* ty=Tensor[(2), bool] */;
  %1572 = shape_of(%1569, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1573 = cast_like(%1572, meta[relay.Constant][62] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1574 = add(meta[relay.Constant][62] /* ty=Tensor[(2), int32] */, %1573) /* ty=Tensor[(2), int32] */;
  %1575 = where(%1571, %1574, meta[relay.Constant][62] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1576 = shape_of(%1569, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1577 = cast(%1576, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1578 = dyn.strided_slice(%1569, %1575, %1577, meta[relay.Constant][63] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1579 = divide(%1578, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1580 = (%1382,);
  %1581 = concatenate(%1580) /* ty=Tensor[(?, 4), float32] */;
  %1582 = cast_like(0 /* ty=int32 */, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1583 = less(meta[relay.Constant][64] /* ty=Tensor[(2), int32] */, %1582) /* ty=Tensor[(2), bool] */;
  %1584 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1585 = cast_like(%1584, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1586 = add(meta[relay.Constant][64] /* ty=Tensor[(2), int32] */, %1585) /* ty=Tensor[(2), int32] */;
  %1587 = where(%1583, %1586, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1588 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1589 = cast(%1588, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1590 = dyn.strided_slice(%1581, %1587, %1589, meta[relay.Constant][65] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1591 = take(%1590, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1592 = cast_like(0 /* ty=int32 */, meta[relay.Constant][66] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1593 = less(meta[relay.Constant][66] /* ty=Tensor[(2), int32] */, %1592) /* ty=Tensor[(2), bool] */;
  %1594 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1595 = cast_like(%1594, meta[relay.Constant][66] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1596 = add(meta[relay.Constant][66] /* ty=Tensor[(2), int32] */, %1595) /* ty=Tensor[(2), int32] */;
  %1597 = where(%1593, %1596, meta[relay.Constant][66] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1598 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1599 = cast(%1598, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1600 = dyn.strided_slice(%1581, %1597, %1599, meta[relay.Constant][67] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1601 = take(%1600, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1602 = subtract(%1591, %1601) /* ty=Tensor[(?), float32] */;
  %1603 = cast_like(0 /* ty=int32 */, meta[relay.Constant][68] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
  %1604 = less(meta[relay.Constant][68] /* ty=Tensor[(1), int32] */, %1603) /* ty=Tensor[(1), bool] */;
  %1605 = shape_of(%1602, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1606 = cast_like(%1605, meta[relay.Constant][68] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1607 = add(meta[relay.Constant][68] /* ty=Tensor[(1), int32] */, %1606) /* ty=Tensor[(1), int32] */;
  %1608 = where(%1604, %1607, meta[relay.Constant][68] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1609 = shape_of(%1602, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1610 = cast(%1609, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1611 = dyn.strided_slice(%1602, %1608, %1610, meta[relay.Constant][69] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */;
  %1612 = expand_dims(%1611, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1613 = multiply(%1579, %1612) /* ty=Tensor[(?, ?), float32] */;
  %1614 = cast_like(0 /* ty=int32 */, meta[relay.Constant][70] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1615 = less(meta[relay.Constant][70] /* ty=Tensor[(2), int32] */, %1614) /* ty=Tensor[(2), bool] */;
  %1616 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1617 = cast_like(%1616, meta[relay.Constant][70] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1618 = add(meta[relay.Constant][70] /* ty=Tensor[(2), int32] */, %1617) /* ty=Tensor[(2), int32] */;
  %1619 = where(%1615, %1618, meta[relay.Constant][70] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1620 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1621 = cast(%1620, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1622 = dyn.strided_slice(%1581, %1619, %1621, meta[relay.Constant][71] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1623 = take(%1622, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1624 = multiply(%1602, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1625 = add(%1623, %1624) /* ty=Tensor[(?), float32] */;
  %1626 = cast_like(0 /* ty=int32 */, meta[relay.Constant][72] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
  %1627 = less(meta[relay.Constant][72] /* ty=Tensor[(1), int32] */, %1626) /* ty=Tensor[(1), bool] */;
  %1628 = shape_of(%1625, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1629 = cast_like(%1628, meta[relay.Constant][72] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1630 = add(meta[relay.Constant][72] /* ty=Tensor[(1), int32] */, %1629) /* ty=Tensor[(1), int32] */;
  %1631 = where(%1627, %1630, meta[relay.Constant][72] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1632 = shape_of(%1625, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1633 = cast(%1632, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1634 = dyn.strided_slice(%1625, %1631, %1633, meta[relay.Constant][73] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */;
  %1635 = expand_dims(%1634, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1636 = add(%1613, %1635) /* ty=Tensor[(?, ?), float32] */;
  %1637 = cast_like(0 /* ty=int32 */, meta[relay.Constant][74] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1638 = less(meta[relay.Constant][74] /* ty=Tensor[(2), int32] */, %1637) /* ty=Tensor[(2), bool] */;
  %1639 = shape_of(%1560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1640 = cast_like(%1639, meta[relay.Constant][74] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1641 = add(meta[relay.Constant][74] /* ty=Tensor[(2), int32] */, %1640) /* ty=Tensor[(2), int32] */;
  %1642 = where(%1638, %1641, meta[relay.Constant][74] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1643 = shape_of(%1560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1644 = cast(%1643, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1645 = dyn.strided_slice(%1560, %1642, %1644, meta[relay.Constant][75] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1646 = cast_like(0 /* ty=int32 */, meta[relay.Constant][76] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1647 = less(meta[relay.Constant][76] /* ty=Tensor[(2), int32] */, %1646) /* ty=Tensor[(2), bool] */;
  %1648 = shape_of(%1645, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1649 = cast_like(%1648, meta[relay.Constant][76] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1650 = add(meta[relay.Constant][76] /* ty=Tensor[(2), int32] */, %1649) /* ty=Tensor[(2), int32] */;
  %1651 = where(%1647, %1650, meta[relay.Constant][76] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1652 = shape_of(%1645, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1653 = cast(%1652, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1654 = dyn.strided_slice(%1645, %1651, %1653, meta[relay.Constant][77] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1655 = divide(%1654, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1656 = clip(%1655, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
  %1657 = exp(%1656) /* ty=Tensor[(?, ?), float32] */;
  %1658 = cast_like(0 /* ty=int32 */, meta[relay.Constant][78] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
  %1659 = less(meta[relay.Constant][78] /* ty=Tensor[(1), int32] */, %1658) /* ty=Tensor[(1), bool] */;
  %1660 = shape_of(%1602, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1661 = cast_like(%1660, meta[relay.Constant][78] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1662 = add(meta[relay.Constant][78] /* ty=Tensor[(1), int32] */, %1661) /* ty=Tensor[(1), int32] */;
  %1663 = where(%1659, %1662, meta[relay.Constant][78] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1664 = shape_of(%1602, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1665 = cast(%1664, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1666 = dyn.strided_slice(%1602, %1663, %1665, meta[relay.Constant][79] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */;
  %1667 = expand_dims(%1666, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1668 = multiply(%1657, %1667) /* ty=Tensor[(?, ?), float32] */;
  %1669 = multiply(0.5f /* ty=float32 */, %1668) /* ty=Tensor[(?, ?), float32] */;
  %1670 = subtract(%1636, %1669) /* ty=Tensor[(?, ?), float32] */;
  %1671 = cast_like(0 /* ty=int32 */, meta[relay.Constant][80] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1672 = less(meta[relay.Constant][80] /* ty=Tensor[(2), int32] */, %1671) /* ty=Tensor[(2), bool] */;
  %1673 = shape_of(%1560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1674 = cast_like(%1673, meta[relay.Constant][80] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1675 = add(meta[relay.Constant][80] /* ty=Tensor[(2), int32] */, %1674) /* ty=Tensor[(2), int32] */;
  %1676 = where(%1672, %1675, meta[relay.Constant][80] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1677 = shape_of(%1560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1678 = cast(%1677, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1679 = dyn.strided_slice(%1560, %1676, %1678, meta[relay.Constant][81] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1680 = cast_like(0 /* ty=int32 */, meta[relay.Constant][82] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1681 = less(meta[relay.Constant][82] /* ty=Tensor[(2), int32] */, %1680) /* ty=Tensor[(2), bool] */;
  %1682 = shape_of(%1679, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1683 = cast_like(%1682, meta[relay.Constant][82] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1684 = add(meta[relay.Constant][82] /* ty=Tensor[(2), int32] */, %1683) /* ty=Tensor[(2), int32] */;
  %1685 = where(%1681, %1684, meta[relay.Constant][82] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1686 = shape_of(%1679, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1687 = cast(%1686, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1688 = dyn.strided_slice(%1679, %1685, %1687, meta[relay.Constant][83] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1689 = divide(%1688, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1690 = cast_like(0 /* ty=int32 */, meta[relay.Constant][84] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1691 = less(meta[relay.Constant][84] /* ty=Tensor[(2), int32] */, %1690) /* ty=Tensor[(2), bool] */;
  %1692 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1693 = cast_like(%1692, meta[relay.Constant][84] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1694 = add(meta[relay.Constant][84] /* ty=Tensor[(2), int32] */, %1693) /* ty=Tensor[(2), int32] */;
  %1695 = where(%1691, %1694, meta[relay.Constant][84] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1696 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1697 = cast(%1696, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1698 = dyn.strided_slice(%1581, %1695, %1697, meta[relay.Constant][85] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1699 = take(%1698, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1700 = cast_like(0 /* ty=int32 */, meta[relay.Constant][86] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1701 = less(meta[relay.Constant][86] /* ty=Tensor[(2), int32] */, %1700) /* ty=Tensor[(2), bool] */;
  %1702 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1703 = cast_like(%1702, meta[relay.Constant][86] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1704 = add(meta[relay.Constant][86] /* ty=Tensor[(2), int32] */, %1703) /* ty=Tensor[(2), int32] */;
  %1705 = where(%1701, %1704, meta[relay.Constant][86] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1706 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1707 = cast(%1706, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1708 = dyn.strided_slice(%1581, %1705, %1707, meta[relay.Constant][87] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1709 = take(%1708, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1710 = subtract(%1699, %1709) /* ty=Tensor[(?), float32] */;
  %1711 = cast_like(0 /* ty=int32 */, meta[relay.Constant][88] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
  %1712 = less(meta[relay.Constant][88] /* ty=Tensor[(1), int32] */, %1711) /* ty=Tensor[(1), bool] */;
  %1713 = shape_of(%1710, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1714 = cast_like(%1713, meta[relay.Constant][88] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1715 = add(meta[relay.Constant][88] /* ty=Tensor[(1), int32] */, %1714) /* ty=Tensor[(1), int32] */;
  %1716 = where(%1712, %1715, meta[relay.Constant][88] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1717 = shape_of(%1710, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1718 = cast(%1717, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1719 = dyn.strided_slice(%1710, %1716, %1718, meta[relay.Constant][89] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */;
  %1720 = expand_dims(%1719, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1721 = multiply(%1689, %1720) /* ty=Tensor[(?, ?), float32] */;
  %1722 = cast_like(0 /* ty=int32 */, meta[relay.Constant][90] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1723 = less(meta[relay.Constant][90] /* ty=Tensor[(2), int32] */, %1722) /* ty=Tensor[(2), bool] */;
  %1724 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1725 = cast_like(%1724, meta[relay.Constant][90] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1726 = add(meta[relay.Constant][90] /* ty=Tensor[(2), int32] */, %1725) /* ty=Tensor[(2), int32] */;
  %1727 = where(%1723, %1726, meta[relay.Constant][90] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1728 = shape_of(%1581, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1729 = cast(%1728, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1730 = dyn.strided_slice(%1581, %1727, %1729, meta[relay.Constant][91] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1731 = take(%1730, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1732 = multiply(%1710, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1733 = add(%1731, %1732) /* ty=Tensor[(?), float32] */;
  %1734 = cast_like(0 /* ty=int32 */, meta[relay.Constant][92] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
  %1735 = less(meta[relay.Constant][92] /* ty=Tensor[(1), int32] */, %1734) /* ty=Tensor[(1), bool] */;
  %1736 = shape_of(%1733, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1737 = cast_like(%1736, meta[relay.Constant][92] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1738 = add(meta[relay.Constant][92] /* ty=Tensor[(1), int32] */, %1737) /* ty=Tensor[(1), int32] */;
  %1739 = where(%1735, %1738, meta[relay.Constant][92] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1740 = shape_of(%1733, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1741 = cast(%1740, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1742 = dyn.strided_slice(%1733, %1739, %1741, meta[relay.Constant][93] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */;
  %1743 = expand_dims(%1742, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1744 = add(%1721, %1743) /* ty=Tensor[(?, ?), float32] */;
  %1745 = cast_like(0 /* ty=int32 */, meta[relay.Constant][94] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1746 = less(meta[relay.Constant][94] /* ty=Tensor[(2), int32] */, %1745) /* ty=Tensor[(2), bool] */;
  %1747 = shape_of(%1560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1748 = cast_like(%1747, meta[relay.Constant][94] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1749 = add(meta[relay.Constant][94] /* ty=Tensor[(2), int32] */, %1748) /* ty=Tensor[(2), int32] */;
  %1750 = where(%1746, %1749, meta[relay.Constant][94] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1751 = shape_of(%1560, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1752 = cast(%1751, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1753 = dyn.strided_slice(%1560, %1750, %1752, meta[relay.Constant][95] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1754 = cast_like(0 /* ty=int32 */, meta[relay.Constant][96] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1755 = less(meta[relay.Constant][96] /* ty=Tensor[(2), int32] */, %1754) /* ty=Tensor[(2), bool] */;
  %1756 = shape_of(%1753, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1757 = cast_like(%1756, meta[relay.Constant][96] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1758 = add(meta[relay.Constant][96] /* ty=Tensor[(2), int32] */, %1757) /* ty=Tensor[(2), int32] */;
  %1759 = where(%1755, %1758, meta[relay.Constant][96] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1760 = shape_of(%1753, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1761 = cast(%1760, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1762 = dyn.strided_slice(%1753, %1759, %1761, meta[relay.Constant][97] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1763 = divide(%1762, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1764 = clip(%1763, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
  %1765 = exp(%1764) /* ty=Tensor[(?, ?), float32] */;
  %1766 = cast_like(0 /* ty=int32 */, meta[relay.Constant][98] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
  %1767 = less(meta[relay.Constant][98] /* ty=Tensor[(1), int32] */, %1766) /* ty=Tensor[(1), bool] */;
  %1768 = shape_of(%1710, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1769 = cast_like(%1768, meta[relay.Constant][98] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1770 = add(meta[relay.Constant][98] /* ty=Tensor[(1), int32] */, %1769) /* ty=Tensor[(1), int32] */;
  %1771 = where(%1767, %1770, meta[relay.Constant][98] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
  %1772 = shape_of(%1710, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1773 = cast(%1772, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1774 = dyn.strided_slice(%1710, %1771, %1773, meta[relay.Constant][99] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?), float32] */;
  %1775 = expand_dims(%1774, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1776 = multiply(%1765, %1775) /* ty=Tensor[(?, ?), float32] */;
  %1777 = multiply(0.5f /* ty=float32 */, %1776) /* ty=Tensor[(?, ?), float32] */;
  %1778 = subtract(%1744, %1777) /* ty=Tensor[(?, ?), float32] */;
  %1779 = multiply(0.5f /* ty=float32 */, %1668) /* ty=Tensor[(?, ?), float32] */;
  %1780 = add(%1636, %1779) /* ty=Tensor[(?, ?), float32] */;
  %1781 = multiply(0.5f /* ty=float32 */, %1776) /* ty=Tensor[(?, ?), float32] */;
  %1782 = add(%1744, %1781) /* ty=Tensor[(?, ?), float32] */;
  %1783 = (%1670, %1778, %1780, %1782);
  %1784 = stack(%1783, axis=2) /* ty=Tensor[(?, ?, 4), float32] */;
  %1785 = reshape(%1784, newshape=[0, -1, 1]) /* ty=Tensor[(?, ?, 1), float32] */;
  %1786 = squeeze(%1785, axis=[2]) /* ty=Tensor[(?, ?), float32] */;
  %1787 = cast(%1554, dtype="int64") /* ty=int64 */;
  %1788 = expand_dims(%1787, axis=0) /* ty=Tensor[(1), int64] */;
  %1789 = expand_dims(-1 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1790 = expand_dims(4 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1791 = (%1788, %1789, %1790);
  %1792 = concatenate(%1791) /* ty=Tensor[(3), int64] */;
  %1793 = dyn.reshape(%1786, %1792, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1794 = cast_like(0 /* ty=int32 */, meta[relay.Constant][100] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1795 = less(meta[relay.Constant][100] /* ty=Tensor[(3), int32] */, %1794) /* ty=Tensor[(3), bool] */;
  %1796 = shape_of(%1793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1797 = cast_like(%1796, meta[relay.Constant][100] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1798 = add(meta[relay.Constant][100] /* ty=Tensor[(3), int32] */, %1797) /* ty=Tensor[(3), int32] */;
  %1799 = where(%1795, %1798, meta[relay.Constant][100] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1800 = shape_of(%1793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1801 = cast(%1800, dtype="int64") /* ty=Tensor[(3), int64] */;
  %1802 = dyn.strided_slice(%1793, %1799, %1801, meta[relay.Constant][101] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %1803 = maximum(%1802, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
  %1804 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1805 = minimum(%1803, %1804) /* ty=Tensor[(?, ?, ?), float32] */;
  %1806 = cast_like(0 /* ty=int32 */, meta[relay.Constant][102] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1807 = less(meta[relay.Constant][102] /* ty=Tensor[(3), int32] */, %1806) /* ty=Tensor[(3), bool] */;
  %1808 = shape_of(%1793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1809 = cast_like(%1808, meta[relay.Constant][102] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1810 = add(meta[relay.Constant][102] /* ty=Tensor[(3), int32] */, %1809) /* ty=Tensor[(3), int32] */;
  %1811 = where(%1807, %1810, meta[relay.Constant][102] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1812 = shape_of(%1793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1813 = cast(%1812, dtype="int64") /* ty=Tensor[(3), int64] */;
  %1814 = dyn.strided_slice(%1793, %1811, %1813, meta[relay.Constant][103] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %1815 = maximum(%1814, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
  %1816 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1817 = minimum(%1815, %1816) /* ty=Tensor[(?, ?, ?), float32] */;
  %1818 = (%1805, %1817);
  %1819 = stack(%1818, axis=3) /* ty=Tensor[(?, ?, ?, 2), float32] */;
  %1820 = shape_of(%1793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1821 = take(%1820, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1822 = cast(%1821, dtype="int64") /* ty=int64 */;
  %1823 = expand_dims(%1822, axis=0) /* ty=Tensor[(1), int64] */;
  %1824 = shape_of(%1793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1825 = take(%1824, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1826 = cast(%1825, dtype="int64") /* ty=int64 */;
  %1827 = expand_dims(%1826, axis=0) /* ty=Tensor[(1), int64] */;
  %1828 = shape_of(%1793, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1829 = take(%1828, 2 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1830 = cast(%1829, dtype="int64") /* ty=int64 */;
  %1831 = expand_dims(%1830, axis=0) /* ty=Tensor[(1), int64] */;
  %1832 = (%1823, %1827, %1831);
  %1833 = concatenate(%1832) /* ty=Tensor[(3), int64] */;
  %1834 = dyn.reshape(%1819, %1833, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1835 = cast_like(0 /* ty=int32 */, meta[relay.Constant][104] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1836 = less(meta[relay.Constant][104] /* ty=Tensor[(3), int32] */, %1835) /* ty=Tensor[(3), bool] */;
  %1837 = shape_of(%1834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1838 = cast_like(%1837, meta[relay.Constant][104] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1839 = add(meta[relay.Constant][104] /* ty=Tensor[(3), int32] */, %1838) /* ty=Tensor[(3), int32] */;
  %1840 = where(%1836, %1839, meta[relay.Constant][104] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1841 = shape_of(%1834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1842 = cast(%1841, dtype="int64") /* ty=Tensor[(3), int64] */;
  %1843 = dyn.strided_slice(%1834, %1840, %1842, meta[relay.Constant][105] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %1844 = cast_like(0 /* ty=int32 */, meta[relay.Constant][106] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1845 = less(meta[relay.Constant][106] /* ty=Tensor[(3), int32] */, %1844) /* ty=Tensor[(3), bool] */;
  %1846 = shape_of(%1843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1847 = cast_like(%1846, meta[relay.Constant][106] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1848 = add(meta[relay.Constant][106] /* ty=Tensor[(3), int32] */, %1847) /* ty=Tensor[(3), int32] */;
  %1849 = where(%1845, %1848, meta[relay.Constant][106] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1850 = shape_of(%1843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1851 = cast(%1850, dtype="int64") /* ty=Tensor[(3), int64] */;
  %1852 = dyn.strided_slice(%1843, %1849, %1851, meta[relay.Constant][107] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %1853 = reshape(%1852, newshape=[-1, 4]) /* ty=Tensor[(?, 4), float32] */;
  %1854 = transpose(%model.roi_heads.box_predictor.cls_score.weight, axes=[1, 0]) /* ty=Tensor[(1024, 91), float32] */;
  %1855 = transpose(%1854, axes=[1, 0]) /* ty=Tensor[(91, 1024), float32] */;
  %1856 = nn.dense(%1547, %1855, units=91) /* ty=Tensor[(?, 91), float32] */;
  %1857 = add(%1856, %model.roi_heads.box_predictor.cls_score.bias) /* ty=Tensor[(?, 91), float32] */;
  %1858 = nn.softmax(%1857) /* ty=Tensor[(?, 91), float32] */;
  %1859 = cast_like(0 /* ty=int32 */, meta[relay.Constant][108] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1860 = less(meta[relay.Constant][108] /* ty=Tensor[(2), int32] */, %1859) /* ty=Tensor[(2), bool] */;
  %1861 = shape_of(%1858, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1862 = cast_like(%1861, meta[relay.Constant][108] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1863 = add(meta[relay.Constant][108] /* ty=Tensor[(2), int32] */, %1862) /* ty=Tensor[(2), int32] */;
  %1864 = where(%1860, %1863, meta[relay.Constant][108] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1865 = shape_of(%1858, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1866 = cast(%1865, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1867 = dyn.strided_slice(%1858, %1864, %1866, meta[relay.Constant][109] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1868 = cast_like(0 /* ty=int32 */, meta[relay.Constant][110] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1869 = less(meta[relay.Constant][110] /* ty=Tensor[(2), int32] */, %1868) /* ty=Tensor[(2), bool] */;
  %1870 = shape_of(%1867, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1871 = cast_like(%1870, meta[relay.Constant][110] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1872 = add(meta[relay.Constant][110] /* ty=Tensor[(2), int32] */, %1871) /* ty=Tensor[(2), int32] */;
  %1873 = where(%1869, %1872, meta[relay.Constant][110] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1874 = shape_of(%1867, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1875 = cast(%1874, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1876 = dyn.strided_slice(%1867, %1873, %1875, meta[relay.Constant][111] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1877 = reshape(%1876, newshape=[-1]) /* ty=Tensor[(?), float32] */;
  %1878 = greater(%1877, 0.05f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %1879 = argwhere(%1878) /* ty=Tensor[(?, 1), int32] */;
  %1880 = split(%1879, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1881 = %1880.0;
  %1882 = squeeze(%1881, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1883 = cast(%1882, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1884 = (%1853, %1883);
  %1885 = adv_index(%1884) /* ty=Tensor[(?, 4), float32] */;
  %1886 = cast_like(0 /* ty=int32 */, meta[relay.Constant][112] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1887 = less(meta[relay.Constant][112] /* ty=Tensor[(2), int32] */, %1886) /* ty=Tensor[(2), bool] */;
  %1888 = shape_of(%1885, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1889 = cast_like(%1888, meta[relay.Constant][112] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1890 = add(meta[relay.Constant][112] /* ty=Tensor[(2), int32] */, %1889) /* ty=Tensor[(2), int32] */;
  %1891 = where(%1887, %1890, meta[relay.Constant][112] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1892 = shape_of(%1885, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1893 = cast(%1892, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1894 = dyn.strided_slice(%1885, %1891, %1893, meta[relay.Constant][113] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1895 = take(%1894, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1896 = cast_like(0 /* ty=int32 */, meta[relay.Constant][114] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1897 = less(meta[relay.Constant][114] /* ty=Tensor[(2), int32] */, %1896) /* ty=Tensor[(2), bool] */;
  %1898 = shape_of(%1885, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1899 = cast_like(%1898, meta[relay.Constant][114] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1900 = add(meta[relay.Constant][114] /* ty=Tensor[(2), int32] */, %1899) /* ty=Tensor[(2), int32] */;
  %1901 = where(%1897, %1900, meta[relay.Constant][114] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1902 = shape_of(%1885, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1903 = cast(%1902, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1904 = dyn.strided_slice(%1885, %1901, %1903, meta[relay.Constant][115] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1905 = take(%1904, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1906 = subtract(%1895, %1905) /* ty=Tensor[(?), float32] */;
  %1907 = greater_equal(%1906, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %1908 = cast(%1907, dtype="bool") /* ty=Tensor[(?), bool] */;
  %1909 = cast_like(0 /* ty=int32 */, meta[relay.Constant][116] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1910 = less(meta[relay.Constant][116] /* ty=Tensor[(2), int32] */, %1909) /* ty=Tensor[(2), bool] */;
  %1911 = shape_of(%1885, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1912 = cast_like(%1911, meta[relay.Constant][116] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1913 = add(meta[relay.Constant][116] /* ty=Tensor[(2), int32] */, %1912) /* ty=Tensor[(2), int32] */;
  %1914 = where(%1910, %1913, meta[relay.Constant][116] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1915 = shape_of(%1885, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1916 = cast(%1915, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1917 = dyn.strided_slice(%1885, %1914, %1916, meta[relay.Constant][117] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1918 = take(%1917, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1919 = cast_like(0 /* ty=int32 */, meta[relay.Constant][118] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1920 = less(meta[relay.Constant][118] /* ty=Tensor[(2), int32] */, %1919) /* ty=Tensor[(2), bool] */;
  %1921 = shape_of(%1885, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1922 = cast_like(%1921, meta[relay.Constant][118] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1923 = add(meta[relay.Constant][118] /* ty=Tensor[(2), int32] */, %1922) /* ty=Tensor[(2), int32] */;
  %1924 = where(%1920, %1923, meta[relay.Constant][118] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1925 = shape_of(%1885, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1926 = cast(%1925, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1927 = dyn.strided_slice(%1885, %1924, %1926, meta[relay.Constant][119] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1928 = take(%1927, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1929 = subtract(%1918, %1928) /* ty=Tensor[(?), float32] */;
  %1930 = greater_equal(%1929, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %1931 = cast(%1930, dtype="bool") /* ty=Tensor[(?), bool] */;
  %1932 = logical_and(%1908, %1931) /* ty=Tensor[(?), bool] */;
  %1933 = argwhere(%1932) /* ty=Tensor[(?, 1), int32] */;
  %1934 = split(%1933, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1935 = %1934.0;
  %1936 = squeeze(%1935, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1937 = cast(%1936, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1938 = (%1885, %1937);
  %1939 = adv_index(%1938) /* ty=Tensor[(?, 4), float32] */;
  %1940 = ndarray_size(%1939, dtype="int32") /* ty=int32 */;
  %1941 = equal(%1940, 0 /* ty=int32 */) /* ty=bool */;
  %1998 = if (%1941) {
    zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
  } else {
    %1942 = arange(0 /* ty=int64 */, 91 /* ty=int64 */, 1 /* ty=int64 */, start=meta[relay.Constant][120], stop=meta[relay.Constant][121], step=meta[relay.Constant][122], dtype="int64") /* ty=Tensor[(91), int64] */;
    %1943 = reshape(%1942, newshape=[1, -1]) /* ty=Tensor[(1, 91), int64] */;
    %1944 = cast(%1858, dtype="int64") /* ty=Tensor[(?, 91), int64] */;
    %1945 = broadcast_to_like(%1943, %1944) /* ty=Tensor[(?, 91), int64] */;
    %1946 = cast_like(0 /* ty=int32 */, meta[relay.Constant][123] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
    %1947 = less(meta[relay.Constant][123] /* ty=Tensor[(2), int32] */, %1946) /* ty=Tensor[(2), bool] */;
    %1948 = shape_of(%1945, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1949 = cast_like(%1948, meta[relay.Constant][123] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
    %1950 = add(meta[relay.Constant][123] /* ty=Tensor[(2), int32] */, %1949) /* ty=Tensor[(2), int32] */;
    %1951 = where(%1947, %1950, meta[relay.Constant][123] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
    %1952 = shape_of(%1945, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1953 = cast(%1952, dtype="int64") /* ty=Tensor[(2), int64] */;
    %1954 = dyn.strided_slice(%1945, %1951, %1953, meta[relay.Constant][124] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), int64] */;
    %1955 = cast_like(0 /* ty=int32 */, meta[relay.Constant][125] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
    %1956 = less(meta[relay.Constant][125] /* ty=Tensor[(2), int32] */, %1955) /* ty=Tensor[(2), bool] */;
    %1957 = shape_of(%1954, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1958 = cast_like(%1957, meta[relay.Constant][125] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
    %1959 = add(meta[relay.Constant][125] /* ty=Tensor[(2), int32] */, %1958) /* ty=Tensor[(2), int32] */;
    %1960 = where(%1956, %1959, meta[relay.Constant][125] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
    %1961 = shape_of(%1954, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1962 = cast(%1961, dtype="int64") /* ty=Tensor[(2), int64] */;
    %1963 = dyn.strided_slice(%1954, %1960, %1962, meta[relay.Constant][126] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), int64] */;
    %1964 = reshape(%1963, newshape=[-1]) /* ty=Tensor[(?), int64] */;
    %1965 = (%1964, %1883);
    %1966 = adv_index(%1965) /* ty=Tensor[(?), int64] */;
    %1967 = (%1966, %1937);
    %1968 = adv_index(%1967) /* ty=Tensor[(?), int64] */;
    %1969 = expand_dims(%1968, axis=-1) /* ty=Tensor[(?, 1), int64] */;
    %1970 = cast(%1969, dtype="float32") /* ty=Tensor[(?, 1), float32] */;
    %1971 = (%1877, %1883);
    %1972 = adv_index(%1971) /* ty=Tensor[(?), float32] */;
    %1973 = (%1972, %1937);
    %1974 = adv_index(%1973) /* ty=Tensor[(?), float32] */;
    %1975 = min(%1974) /* ty=float32 */;
    %1976 = subtract(%1974, %1975) /* ty=Tensor[(?), float32] */;
    %1977 = add(%1976, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %1978 = expand_dims(%1977, axis=-1) /* ty=Tensor[(?, 1), float32] */;
    %1979 = (%1970, %1978, %1939);
    %1980 = concatenate(%1979, axis=-1) /* ty=Tensor[(?, 6), float32] */;
    %1981 = expand_dims(%1980, axis=0) /* ty=Tensor[(1, ?, 6), float32] */;
    %1982 = shape_of(%1977, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1983 = squeeze(%1982) /* ty=int32 */;
    %1984 = arange(0 /* ty=int32 */, %1983, 1 /* ty=int32 */, start=meta[relay.Constant][127], stop=meta[relay.Call][1], step=meta[relay.Constant][128], dtype="int32") /* ty=Tensor[(?), int32] */;
    %1985 = expand_dims(%1984, axis=0) /* ty=Tensor[(1, ?), int32] */;
    %1986 = vision.non_max_suppression(%1981, %1982, %1985, 100 /* ty=int32 */, 0.5f /* ty=float32 */, meta[relay.attrs.NonMaximumSuppressionAttrs][1]) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */;
    %1987 = %1986.0;
    %1988 = squeeze(%1987, axis=[0]) /* ty=Tensor[(?), int32] */;
    %1989 = cast_like(0 /* ty=int32 */, meta[relay.Constant][129] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
    %1990 = less(meta[relay.Constant][129] /* ty=Tensor[(1), int32] */, %1989) /* ty=Tensor[(1), bool] */;
    %1991 = shape_of(%1988, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1992 = cast_like(%1991, meta[relay.Constant][129] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1993 = add(meta[relay.Constant][129] /* ty=Tensor[(1), int32] */, %1992) /* ty=Tensor[(1), int32] */;
    %1994 = where(%1990, %1993, meta[relay.Constant][129] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1995 = %1986.1;
    %1996 = squeeze(%1995, axis=[1]) /* ty=Tensor[(1), int32] */;
    %1997 = dyn.strided_slice(%1988, %1994, %1996, meta[relay.Constant][130] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None, slice_mode="size") /* ty=Tensor[(?), int32] */;
    cast(%1997, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %1999 = (%1939, %1998);
  %2000 = adv_index(%1999) /* ty=Tensor[(?, 4), float32] */;
  %2001 = split(%2000, indices_or_sections=4, axis=1) /* ty=(Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32]) */;
  %2002 = %2001.0;
  %2003 = squeeze(%2002, axis=[1]) /* ty=Tensor[(?), float32] */;
  %2004 = cast(300 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %2005 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %2006 = divide(%2004, %2005) /* ty=float32 */;
  %2007 = multiply(%2003, %2006) /* ty=Tensor[(?), float32] */;
  %2008 = %2001.1;
  %2009 = squeeze(%2008, axis=[1]) /* ty=Tensor[(?), float32] */;
  %2010 = cast(300 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %2011 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %2012 = divide(%2010, %2011) /* ty=float32 */;
  %2013 = multiply(%2009, %2012) /* ty=Tensor[(?), float32] */;
  %2014 = %2001.2;
  %2015 = squeeze(%2014, axis=[1]) /* ty=Tensor[(?), float32] */;
  %2016 = multiply(%2015, %2006) /* ty=Tensor[(?), float32] */;
  %2017 = %2001.3;
  %2018 = squeeze(%2017, axis=[1]) /* ty=Tensor[(?), float32] */;
  %2019 = multiply(%2018, %2012) /* ty=Tensor[(?), float32] */;
  %2020 = (%2007, %2013, %2016, %2019);
  %2021 = stack(%2020, axis=1) /* ty=Tensor[(?, 4), float32] */;
  %2022 = (%1974, %1998);
  %2023 = adv_index(%2022) /* ty=Tensor[(?), float32] */;
  %2024 = (%1968, %1998);
  %2025 = adv_index(%2024) /* ty=Tensor[(?), int64] */;

  %2026 = full(0 /* ty=int32 */, shape=[0, 300, 300], dtype="float32") /* ty=Tensor[(0, 300, 300), float32] */;
  %2027 = cast_like(0 /* ty=int32 */, meta[relay.Constant][131] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2028 = less(meta[relay.Constant][131] /* ty=Tensor[(2), int32] */, %2027) /* ty=Tensor[(2), bool] */;
  %2029 = shape_of(%2000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2030 = cast_like(%2029, meta[relay.Constant][131] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2031 = add(meta[relay.Constant][131] /* ty=Tensor[(2), int32] */, %2030) /* ty=Tensor[(2), int32] */;
  %2032 = where(%2028, %2031, meta[relay.Constant][131] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2033 = shape_of(%2000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2034 = cast(%2033, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2035 = dyn.strided_slice(%2000, %2032, %2034, meta[relay.Constant][132] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2036 = take(%2035, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2037 = cast_like(0 /* ty=int32 */, meta[relay.Constant][133] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2038 = less(meta[relay.Constant][133] /* ty=Tensor[(2), int32] */, %2037) /* ty=Tensor[(2), bool] */;
  %2039 = shape_of(%2000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2040 = cast_like(%2039, meta[relay.Constant][133] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2041 = add(meta[relay.Constant][133] /* ty=Tensor[(2), int32] */, %2040) /* ty=Tensor[(2), int32] */;
  %2042 = where(%2038, %2041, meta[relay.Constant][133] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2043 = shape_of(%2000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2044 = cast(%2043, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2045 = dyn.strided_slice(%2000, %2042, %2044, meta[relay.Constant][134] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2046 = take(%2045, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2047 = subtract(%2036, %2046) /* ty=Tensor[(?), float32] */;
  %2048 = cast_like(0 /* ty=int32 */, meta[relay.Constant][135] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2049 = less(meta[relay.Constant][135] /* ty=Tensor[(2), int32] */, %2048) /* ty=Tensor[(2), bool] */;
  %2050 = shape_of(%2000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2051 = cast_like(%2050, meta[relay.Constant][135] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2052 = add(meta[relay.Constant][135] /* ty=Tensor[(2), int32] */, %2051) /* ty=Tensor[(2), int32] */;
  %2053 = where(%2049, %2052, meta[relay.Constant][135] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2054 = shape_of(%2000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2055 = cast(%2054, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2056 = dyn.strided_slice(%2000, %2053, %2055, meta[relay.Constant][136] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2057 = take(%2056, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2058 = cast_like(0 /* ty=int32 */, meta[relay.Constant][137] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2059 = less(meta[relay.Constant][137] /* ty=Tensor[(2), int32] */, %2058) /* ty=Tensor[(2), bool] */;
  %2060 = shape_of(%2000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2061 = cast_like(%2060, meta[relay.Constant][137] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2062 = add(meta[relay.Constant][137] /* ty=Tensor[(2), int32] */, %2061) /* ty=Tensor[(2), int32] */;
  %2063 = where(%2059, %2062, meta[relay.Constant][137] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2064 = shape_of(%2000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2065 = cast(%2064, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2066 = dyn.strided_slice(%2000, %2063, %2065, meta[relay.Constant][138] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2067 = take(%2066, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2068 = subtract(%2057, %2067) /* ty=Tensor[(?), float32] */;
  %2069 = multiply(%2047, %2068) /* ty=Tensor[(?), float32] */;
  %2070 = (%2069,);
  %2071 = concatenate(%2070) /* ty=Tensor[(?), float32] */;
  %2072 = sqrt(%2071) /* ty=Tensor[(?), float32] */;
  %2073 = divide(%2072, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %2074 = log2(%2073) /* ty=Tensor[(?), float32] */;
  %2075 = add(%2074, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %2076 = add(%2075, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %2077 = floor(%2076) /* ty=Tensor[(?), float32] */;
  %2078 = clip(%2077, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
  %2079 = cast(%2078, dtype="int64") /* ty=Tensor[(?), int64] */;
  %2080 = subtract(%2079, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */;
  %2081 = shape_of(%2080, dtype="int32") /* ty=Tensor[(1), int32] */;
  %2082 = take(%2081, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %2083 = expand_dims(%2082, axis=0) /* ty=Tensor[(1), int32] */;
  %2084 = cast(%2083, dtype="int64") /* ty=Tensor[(1), int64] */;
  %2085 = expand_dims(256 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2086 = cast(%2085, dtype="int64") /* ty=Tensor[(1), int64] */;
  %2087 = expand_dims(14 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2088 = cast(%2087, dtype="int64") /* ty=Tensor[(1), int64] */;
  %2089 = expand_dims(14 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2090 = cast(%2089, dtype="int64") /* ty=Tensor[(1), int64] */;
  %2091 = (%2084, %2086, %2088, %2090);
  %2092 = concatenate(%2091) /* ty=Tensor[(4), int64] */;
  %2093 = dyn.full(0 /* ty=int32 */, %2092, shape=None, dtype="float32") /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %2094 = reshape(%2093, newshape=[0, 256, 14, 14]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2095 = equal(%2080, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2096 = argwhere(%2095) /* ty=Tensor[(?, 1), int32] */;
  %2097 = split(%2096, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2098 = %2097.0;
  %2099 = squeeze(%2098, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2100 = reshape(%2099, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %2101 = repeat(%2100, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %2102 = repeat(%2101, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %2103 = repeat(%2102, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2104 = cast_like(0 /* ty=int32 */, meta[relay.Constant][139] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2105 = less(meta[relay.Constant][139] /* ty=Tensor[(2), int32] */, %2104) /* ty=Tensor[(2), bool] */;
  %2106 = shape_of(%2000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2107 = cast_like(%2106, meta[relay.Constant][139] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2108 = add(meta[relay.Constant][139] /* ty=Tensor[(2), int32] */, %2107) /* ty=Tensor[(2), int32] */;
  %2109 = where(%2105, %2108, meta[relay.Constant][139] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2110 = shape_of(%2000, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2111 = cast(%2110, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2112 = dyn.strided_slice(%2000, %2109, %2111, meta[relay.Constant][140] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2113 = cast_like(0 /* ty=int32 */, meta[relay.Constant][141] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2114 = less(meta[relay.Constant][141] /* ty=Tensor[(2), int32] */, %2113) /* ty=Tensor[(2), bool] */;
  %2115 = shape_of(%2112, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2116 = cast_like(%2115, meta[relay.Constant][141] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2117 = add(meta[relay.Constant][141] /* ty=Tensor[(2), int32] */, %2116) /* ty=Tensor[(2), int32] */;
  %2118 = where(%2114, %2117, meta[relay.Constant][141] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2119 = shape_of(%2112, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2120 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2121 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %2122 = scatter(%2119, %2120, %2121, meta[relay.attrs.ScatterAttrs][1]) /* ty=Tensor[(2), int32] */;
  %2123 = cast(%2122, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2124 = dyn.strided_slice(%2112, %2118, %2123, meta[relay.Constant][142] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2125 = full_like(%2124, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
  %2126 = (%2125,);
  %2127 = concatenate(%2126) /* ty=Tensor[(?, ?), float32] */;
  %2128 = (%2000,);
  %2129 = concatenate(%2128) /* ty=Tensor[(?, 4), float32] */;
  %2130 = (%2127, %2129);
  %2131 = concatenate(%2130, axis=1) /* ty=Tensor[(?, ?), float32] */;
  %2132 = equal(%2080, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2133 = argwhere(%2132) /* ty=Tensor[(?, 1), int32] */;
  %2134 = split(%2133, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2135 = %2134.0;
  %2136 = squeeze(%2135, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2137 = cast(%2136, dtype="int64") /* ty=Tensor[(?), int64] */;
  %2138 = (%2131, %2137);
  %2139 = adv_index(%2138) /* ty=Tensor[(?, ?), float32] */;
  %2140 = vision.roi_align(%921, %2139, meta[relay.attrs.ROIAlignAttrs][4]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2141 = scatter(%2094, %2103, %2140, meta[relay.attrs.ScatterAttrs][2]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2142 = equal(%2080, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2143 = argwhere(%2142) /* ty=Tensor[(?, 1), int32] */;
  %2144 = split(%2143, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2145 = %2144.0;
  %2146 = squeeze(%2145, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2147 = reshape(%2146, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %2148 = repeat(%2147, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %2149 = repeat(%2148, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %2150 = repeat(%2149, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2151 = equal(%2080, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2152 = argwhere(%2151) /* ty=Tensor[(?, 1), int32] */;
  %2153 = split(%2152, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2154 = %2153.0;
  %2155 = squeeze(%2154, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2156 = cast(%2155, dtype="int64") /* ty=Tensor[(?), int64] */;
  %2157 = (%2131, %2156);
  %2158 = adv_index(%2157) /* ty=Tensor[(?, ?), float32] */;
  %2159 = vision.roi_align(%1474, %2158, meta[relay.attrs.ROIAlignAttrs][5]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2160 = scatter(%2141, %2150, %2159, meta[relay.attrs.ScatterAttrs][3]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2161 = equal(%2080, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2162 = argwhere(%2161) /* ty=Tensor[(?, 1), int32] */;
  %2163 = split(%2162, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2164 = %2163.0;
  %2165 = squeeze(%2164, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2166 = reshape(%2165, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %2167 = repeat(%2166, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %2168 = repeat(%2167, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %2169 = repeat(%2168, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2170 = equal(%2080, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2171 = argwhere(%2170) /* ty=Tensor[(?, 1), int32] */;
  %2172 = split(%2171, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2173 = %2172.0;
  %2174 = squeeze(%2173, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2175 = cast(%2174, dtype="int64") /* ty=Tensor[(?), int64] */;
  %2176 = (%2131, %2175);
  %2177 = adv_index(%2176) /* ty=Tensor[(?, ?), float32] */;
  %2178 = vision.roi_align(%1484, %2177, meta[relay.attrs.ROIAlignAttrs][6]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2179 = scatter(%2160, %2169, %2178, meta[relay.attrs.ScatterAttrs][4]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2180 = equal(%2080, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2181 = argwhere(%2180) /* ty=Tensor[(?, 1), int32] */;
  %2182 = split(%2181, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2183 = %2182.0;
  %2184 = squeeze(%2183, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2185 = reshape(%2184, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %2186 = repeat(%2185, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %2187 = repeat(%2186, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %2188 = repeat(%2187, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %2189 = equal(%2080, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %2190 = argwhere(%2189) /* ty=Tensor[(?, 1), int32] */;
  %2191 = split(%2190, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %2192 = %2191.0;
  %2193 = squeeze(%2192, axis=[1]) /* ty=Tensor[(?), int32] */;
  %2194 = cast(%2193, dtype="int64") /* ty=Tensor[(?), int64] */;
  %2195 = (%2131, %2194);
  %2196 = adv_index(%2195) /* ty=Tensor[(?, ?), float32] */;
  %2197 = vision.roi_align(%1494, %2196, meta[relay.attrs.ROIAlignAttrs][7]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2198 = scatter(%2179, %2188, %2197, meta[relay.attrs.ScatterAttrs][5]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2199 = layout_transform(%2198, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2200 = layout_transform(%model.roi_heads.mask_head.mask_fcn1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %2201 = nn.conv2d(%2199, %2200, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2202 = expand_dims(%model.roi_heads.mask_head.mask_fcn1.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %2203 = expand_dims(%2202, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %2204 = layout_transform(%2203, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %2205 = add(%2201, %2204) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2206 = nn.relu(%2205) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2207 = layout_transform(%model.roi_heads.mask_head.mask_fcn2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %2208 = nn.conv2d(%2206, %2207, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2209 = expand_dims(%model.roi_heads.mask_head.mask_fcn2.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %2210 = expand_dims(%2209, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %2211 = layout_transform(%2210, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %2212 = add(%2208, %2211) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2213 = nn.relu(%2212) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2214 = layout_transform(%model.roi_heads.mask_head.mask_fcn3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %2215 = nn.conv2d(%2213, %2214, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2216 = expand_dims(%model.roi_heads.mask_head.mask_fcn3.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %2217 = expand_dims(%2216, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %2218 = layout_transform(%2217, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %2219 = add(%2215, %2218) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2220 = nn.relu(%2219) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2221 = layout_transform(%model.roi_heads.mask_head.mask_fcn4.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %2222 = nn.conv2d(%2220, %2221, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2223 = expand_dims(%model.roi_heads.mask_head.mask_fcn4.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %2224 = expand_dims(%2223, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %2225 = layout_transform(%2224, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %2226 = add(%2222, %2225) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2227 = nn.relu(%2226) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %2228 = layout_transform(%2227, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %2229 = nn.conv2d_transpose(%2228, %model.roi_heads.mask_predictor.conv5_mask.weight, channels=256, kernel_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(?, 256, 28, 28), float32] */;
  %2230 = expand_dims(%model.roi_heads.mask_predictor.conv5_mask.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %2231 = expand_dims(%2230, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %2232 = add(%2229, %2231) /* ty=Tensor[(?, 256, 28, 28), float32] */;
  %2233 = nn.relu(%2232) /* ty=Tensor[(?, 256, 28, 28), float32] */;
  %2234 = layout_transform(%2233, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(?, 28, 28, 256), float32] */;
  %2235 = layout_transform(%model.roi_heads.mask_predictor.mask_fcn_logits.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 91), float32] */;
  %2236 = nn.conv2d(%2234, %2235, padding=[0, 0, 0, 0], channels=91, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 28, 28, 91), float32] */;
  %2237 = expand_dims(%model.roi_heads.mask_predictor.mask_fcn_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(91, 1, 1), float32] */;
  %2238 = expand_dims(%2237, axis=0) /* ty=Tensor[(1, 91, 1, 1), float32] */;
  %2239 = layout_transform(%2238, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 91), float32] */;
  %2240 = add(%2236, %2239) /* ty=Tensor[(?, 28, 28, 91), float32] */;
  %2241 = sigmoid(%2240) /* ty=Tensor[(?, 28, 28, 91), float32] */;
  %2242 = layout_transform(%2241, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 91, 28, 28), float32] */;
  %2243 = layout_transform(%2240, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 91, 28, 28), float32] */;
  %2244 = shape_of(%2243, dtype="int32") /* ty=Tensor[(4), int32] */;
  %2245 = take(%2244, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %2246 = cast(%2245, dtype="int64") /* ty=int64 */;
  %2247 = arange(0 /* ty=int64 */, %2246, 1 /* ty=int64 */, start=meta[relay.Constant][143], stop=meta[relay.Call][2], step=meta[relay.Constant][144], dtype="int64") /* ty=Tensor[(?), int64] */;
  %2248 = (%2025,);
  %2249 = concatenate(%2248) /* ty=Tensor[(?), int64] */;
  %2250 = (%2242, %2247, %2249);
  %2251 = adv_index(%2250) /* ty=Tensor[(?, 28, 28), float32] */;
  %2252 = cast_like(0 /* ty=int32 */, meta[relay.Constant][145] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %2253 = less(meta[relay.Constant][145] /* ty=Tensor[(3), int32] */, %2252) /* ty=Tensor[(3), bool] */;
  %2254 = shape_of(%2251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2255 = cast_like(%2254, meta[relay.Constant][145] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %2256 = add(meta[relay.Constant][145] /* ty=Tensor[(3), int32] */, %2255) /* ty=Tensor[(3), int32] */;
  %2257 = where(%2253, %2256, meta[relay.Constant][145] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %2258 = shape_of(%2251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2259 = cast(%2258, dtype="int64") /* ty=Tensor[(3), int64] */;
  %2260 = dyn.strided_slice(%2251, %2257, %2259, meta[relay.Constant][146] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %2261 = expand_dims(%2260, axis=1) /* ty=Tensor[(?, 1, ?, ?), float32] */;
  %2262 = nn.pad(%2261, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]) /* ty=Tensor[(?, 1, ?, ?), float32] */;
  %2263 = cast_like(0 /* ty=int32 */, meta[relay.Constant][147] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2264 = less(meta[relay.Constant][147] /* ty=Tensor[(2), int32] */, %2263) /* ty=Tensor[(2), bool] */;
  %2265 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2266 = cast_like(%2265, meta[relay.Constant][147] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2267 = add(meta[relay.Constant][147] /* ty=Tensor[(2), int32] */, %2266) /* ty=Tensor[(2), int32] */;
  %2268 = where(%2264, %2267, meta[relay.Constant][147] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2269 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2270 = cast(%2269, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2271 = dyn.strided_slice(%2021, %2268, %2270, meta[relay.Constant][148] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2272 = take(%2271, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2273 = cast_like(0 /* ty=int32 */, meta[relay.Constant][149] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2274 = less(meta[relay.Constant][149] /* ty=Tensor[(2), int32] */, %2273) /* ty=Tensor[(2), bool] */;
  %2275 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2276 = cast_like(%2275, meta[relay.Constant][149] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2277 = add(meta[relay.Constant][149] /* ty=Tensor[(2), int32] */, %2276) /* ty=Tensor[(2), int32] */;
  %2278 = where(%2274, %2277, meta[relay.Constant][149] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2279 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2280 = cast(%2279, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2281 = dyn.strided_slice(%2021, %2278, %2280, meta[relay.Constant][150] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2282 = take(%2281, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2283 = add(%2272, %2282) /* ty=Tensor[(?), float32] */;
  %2284 = multiply(%2283, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %2285 = cast_like(0 /* ty=int32 */, meta[relay.Constant][151] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2286 = less(meta[relay.Constant][151] /* ty=Tensor[(2), int32] */, %2285) /* ty=Tensor[(2), bool] */;
  %2287 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2288 = cast_like(%2287, meta[relay.Constant][151] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2289 = add(meta[relay.Constant][151] /* ty=Tensor[(2), int32] */, %2288) /* ty=Tensor[(2), int32] */;
  %2290 = where(%2286, %2289, meta[relay.Constant][151] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2291 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2292 = cast(%2291, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2293 = dyn.strided_slice(%2021, %2290, %2292, meta[relay.Constant][152] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2294 = take(%2293, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2295 = cast_like(0 /* ty=int32 */, meta[relay.Constant][153] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2296 = less(meta[relay.Constant][153] /* ty=Tensor[(2), int32] */, %2295) /* ty=Tensor[(2), bool] */;
  %2297 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2298 = cast_like(%2297, meta[relay.Constant][153] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2299 = add(meta[relay.Constant][153] /* ty=Tensor[(2), int32] */, %2298) /* ty=Tensor[(2), int32] */;
  %2300 = where(%2296, %2299, meta[relay.Constant][153] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2301 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2302 = cast(%2301, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2303 = dyn.strided_slice(%2021, %2300, %2302, meta[relay.Constant][154] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2304 = take(%2303, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2305 = subtract(%2294, %2304) /* ty=Tensor[(?), float32] */;
  %2306 = multiply(%2305, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %2307 = shape_of(%2261, dtype="int32") /* ty=Tensor[(4), int32] */;
  %2308 = take(%2307, 3 /* ty=int32 */, axis=0) /* ty=int32 */;
  %2309 = add(%2308, 2 /* ty=int32 */) /* ty=int32 */;
  %2310 = cast(%2309, dtype="int64") /* ty=int64 */;
  %2311 = cast(%2310, dtype="float32") /* ty=float32 */;
  %2312 = cast(%2308, dtype="int64") /* ty=int64 */;
  %2313 = cast(%2312, dtype="float32") /* ty=float32 */;
  %2314 = divide(%2311, %2313) /* ty=float32 */;
  %2315 = multiply(%2306, %2314) /* ty=Tensor[(?), float32] */;
  %2316 = subtract(%2284, %2315) /* ty=Tensor[(?), float32] */;
  %2317 = cast_like(0 /* ty=int32 */, meta[relay.Constant][155] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2318 = less(meta[relay.Constant][155] /* ty=Tensor[(2), int32] */, %2317) /* ty=Tensor[(2), bool] */;
  %2319 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2320 = cast_like(%2319, meta[relay.Constant][155] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2321 = add(meta[relay.Constant][155] /* ty=Tensor[(2), int32] */, %2320) /* ty=Tensor[(2), int32] */;
  %2322 = where(%2318, %2321, meta[relay.Constant][155] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2323 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2324 = cast(%2323, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2325 = dyn.strided_slice(%2021, %2322, %2324, meta[relay.Constant][156] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2326 = take(%2325, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2327 = cast_like(0 /* ty=int32 */, meta[relay.Constant][157] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2328 = less(meta[relay.Constant][157] /* ty=Tensor[(2), int32] */, %2327) /* ty=Tensor[(2), bool] */;
  %2329 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2330 = cast_like(%2329, meta[relay.Constant][157] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2331 = add(meta[relay.Constant][157] /* ty=Tensor[(2), int32] */, %2330) /* ty=Tensor[(2), int32] */;
  %2332 = where(%2328, %2331, meta[relay.Constant][157] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2333 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2334 = cast(%2333, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2335 = dyn.strided_slice(%2021, %2332, %2334, meta[relay.Constant][158] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2336 = take(%2335, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2337 = add(%2326, %2336) /* ty=Tensor[(?), float32] */;
  %2338 = multiply(%2337, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %2339 = cast_like(0 /* ty=int32 */, meta[relay.Constant][159] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2340 = less(meta[relay.Constant][159] /* ty=Tensor[(2), int32] */, %2339) /* ty=Tensor[(2), bool] */;
  %2341 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2342 = cast_like(%2341, meta[relay.Constant][159] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2343 = add(meta[relay.Constant][159] /* ty=Tensor[(2), int32] */, %2342) /* ty=Tensor[(2), int32] */;
  %2344 = where(%2340, %2343, meta[relay.Constant][159] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2345 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2346 = cast(%2345, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2347 = dyn.strided_slice(%2021, %2344, %2346, meta[relay.Constant][160] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2348 = take(%2347, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2349 = cast_like(0 /* ty=int32 */, meta[relay.Constant][161] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %2350 = less(meta[relay.Constant][161] /* ty=Tensor[(2), int32] */, %2349) /* ty=Tensor[(2), bool] */;
  %2351 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2352 = cast_like(%2351, meta[relay.Constant][161] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2353 = add(meta[relay.Constant][161] /* ty=Tensor[(2), int32] */, %2352) /* ty=Tensor[(2), int32] */;
  %2354 = where(%2350, %2353, meta[relay.Constant][161] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %2355 = shape_of(%2021, dtype="int32") /* ty=Tensor[(2), int32] */;
  %2356 = cast(%2355, dtype="int64") /* ty=Tensor[(2), int64] */;
  %2357 = dyn.strided_slice(%2021, %2354, %2356, meta[relay.Constant][162] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %2358 = take(%2357, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %2359 = subtract(%2348, %2358) /* ty=Tensor[(?), float32] */;
  %2360 = multiply(%2359, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %2361 = multiply(%2360, %2314) /* ty=Tensor[(?), float32] */;
  %2362 = subtract(%2338, %2361) /* ty=Tensor[(?), float32] */;
  %2363 = add(%2284, %2315) /* ty=Tensor[(?), float32] */;
  %2364 = add(%2338, %2361) /* ty=Tensor[(?), float32] */;
  %2365 = (%2316, %2362, %2363, %2364);
  %2366 = stack(%2365, axis=1) /* ty=Tensor[(?, 4), float32] */;
  %2367 = cast(%2366, dtype="int64") /* ty=Tensor[(?, 4), int64] */;
  %2558 = (
    let %while_loop: fn (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) -> (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) = fn (%i.1: int32, %res_append.6: Tensor[(?, ?, ?), float32], %v7286: Tensor[(?, 1, ?, ?), float32], %v7394: Tensor[(?, 4), int64]) -> (int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) {
      %2368 = shape_of(%2262, dtype="int32") /* ty=Tensor[(4), int32] */;
      %2369 = take(%2368, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
      %2370 = less(%i.1, %2369) /* ty=bool */;
      if (%2370) {
        %2371 = add(%i.1, 1 /* ty=int32 */) /* ty=int32 */;
        %2372 = take(%v7394, %i.1, axis=0, mode="wrap") /* ty=Tensor[(4), int64] */;
        %2373 = take(%2372, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2374 = expand_dims(%2373, axis=0) /* ty=Tensor[(1), int64] */;
        %2375 = full(0 /* ty=int32 */, shape=[1], dtype="int64") /* ty=Tensor[(1), int64] */;
        %2376 = (%2374, %2375);
        %2377 = concatenate(%2376) /* ty=Tensor[(2), int64] */;
        %2378 = max(%2377) /* ty=int64 */;
        %2379 = expand_dims(%2378, axis=0) /* ty=Tensor[(1), int64] */;
        %2380 = cast(%2379, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2381 = take(%v7286, %i.1, axis=0, mode="wrap") /* ty=Tensor[(1, ?, ?), float32] */;
        %2382 = take(%2381, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(?, ?), float32] */;
        %2383 = expand_dims(%2382, axis=0, num_newaxis=2) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        %2384 = repeat(%2383, repeats=1, axis=0) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        %2385 = repeat(%2384, repeats=1, axis=1) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        %2386 = take(%2372, 3 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2387 = take(%2372, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2388 = subtract(%2386, %2387) /* ty=int64 */;
        %2389 = full(1 /* ty=int32 */, shape=[1], dtype="int64") /* ty=Tensor[(1), int64] */;
        %2390 = add(%2388, %2389) /* ty=Tensor[(1), int64] */;
        %2391 = (%2390, %2389);
        %2392 = concatenate(%2391) /* ty=Tensor[(2), int64] */;
        %2393 = max(%2392) /* ty=int64 */;
        %2394 = expand_dims(%2393, axis=0) /* ty=Tensor[(1), int64] */;
        %2395 = take(%2372, 2 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2396 = take(%2372, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2397 = subtract(%2395, %2396) /* ty=int64 */;
        %2398 = add(%2397, %2389) /* ty=Tensor[(1), int64] */;
        %2399 = (%2398, %2389);
        %2400 = concatenate(%2399) /* ty=Tensor[(2), int64] */;
        %2401 = max(%2400) /* ty=int64 */;
        %2402 = expand_dims(%2401, axis=0) /* ty=Tensor[(1), int64] */;
        %2403 = (%2394, %2402);
        %2404 = concatenate(%2403) /* ty=Tensor[(2), int64] */;
        %2405 = dyn.image.resize(%2385, %2404, size=[]) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        %2406 = take(%2405, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(1, ?, ?), float32] */;
        %2407 = take(%2406, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(?, ?), float32] */;
        %2408 = take(%2372, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2409 = subtract(%2378, %2408) /* ty=int64 */;
        %2410 = expand_dims(%2409, axis=0) /* ty=Tensor[(1), int64] */;
        %2411 = cast(%2410, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2412 = expand_dims(0 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %2413 = (%2411, %2412);
        %2414 = concatenate(%2413) /* ty=Tensor[(2), int64] */;
        %2415 = cast_like(0 /* ty=int32 */, %2414) /* ty=int64 */;
        %2416 = less(%2414, %2415) /* ty=Tensor[(2), bool] */;
        %2417 = shape_of(%2407, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2418 = cast_like(%2417, %2414) /* ty=Tensor[(2), int64] */;
        %2419 = add(%2414, %2418) /* ty=Tensor[(2), int64] */;
        %2420 = where(%2416, %2419, %2414) /* ty=Tensor[(2), int64] */;
        %2421 = shape_of(%2407, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2422 = cast(%2421, dtype="int64") /* ty=Tensor[(2), int64] */;
        %2423 = expand_dims(0 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2424 = take(%2372, 3 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2425 = expand_dims(%2424, axis=0) /* ty=Tensor[(1), int64] */;
        %2426 = add(%2425, %2389) /* ty=Tensor[(1), int64] */;
        %2427 = expand_dims(300 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %2428 = (%2426, %2427);
        %2429 = concatenate(%2428) /* ty=Tensor[(2), int64] */;
        %2430 = min(%2429) /* ty=int64 */;
        %2431 = take(%2372, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2432 = subtract(%2430, %2431) /* ty=int64 */;
        %2433 = expand_dims(%2432, axis=0) /* ty=Tensor[(1), int64] */;
        %2434 = scatter(%2422, %2423, %2433, meta[relay.attrs.ScatterAttrs][6]) /* ty=Tensor[(2), int64] */;
        %2435 = dyn.strided_slice(%2407, %2420, %2434, meta[relay.Constant][163] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %2436 = expand_dims(0 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %2437 = take(%2372, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2438 = expand_dims(%2437, axis=0) /* ty=Tensor[(1), int64] */;
        %2439 = (%2438, %2375);
        %2440 = concatenate(%2439) /* ty=Tensor[(2), int64] */;
        %2441 = max(%2440) /* ty=int64 */;
        %2442 = take(%2372, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2443 = subtract(%2441, %2442) /* ty=int64 */;
        %2444 = expand_dims(%2443, axis=0) /* ty=Tensor[(1), int64] */;
        %2445 = cast(%2444, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2446 = (%2436, %2445);
        %2447 = concatenate(%2446) /* ty=Tensor[(2), int64] */;
        %2448 = cast_like(0 /* ty=int32 */, %2447) /* ty=int64 */;
        %2449 = less(%2447, %2448) /* ty=Tensor[(2), bool] */;
        %2450 = shape_of(%2435, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2451 = cast_like(%2450, %2447) /* ty=Tensor[(2), int64] */;
        %2452 = add(%2447, %2451) /* ty=Tensor[(2), int64] */;
        %2453 = where(%2449, %2452, %2447) /* ty=Tensor[(2), int64] */;
        %2454 = shape_of(%2435, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2455 = cast(%2454, dtype="int64") /* ty=Tensor[(2), int64] */;
        %2456 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2457 = take(%2372, 2 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2458 = expand_dims(%2457, axis=0) /* ty=Tensor[(1), int64] */;
        %2459 = add(%2458, %2389) /* ty=Tensor[(1), int64] */;
        %2460 = expand_dims(300 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %2461 = (%2459, %2460);
        %2462 = concatenate(%2461) /* ty=Tensor[(2), int64] */;
        %2463 = min(%2462) /* ty=int64 */;
        %2464 = take(%2372, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2465 = subtract(%2463, %2464) /* ty=int64 */;
        %2466 = expand_dims(%2465, axis=0) /* ty=Tensor[(1), int64] */;
        %2467 = scatter(%2455, %2456, %2466, meta[relay.attrs.ScatterAttrs][7]) /* ty=Tensor[(2), int64] */;
        %2468 = dyn.strided_slice(%2435, %2453, %2467, meta[relay.Constant][164] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %2469 = shape_of(%2468, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2470 = take(%2469, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
        %2471 = expand_dims(%2470, axis=0) /* ty=Tensor[(1), int32] */;
        %2472 = cast(%2471, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2473 = (%2380, %2472);
        %2474 = concatenate(%2473) /* ty=Tensor[(2), int64] */;
        %2475 = dyn.full(0 /* ty=int32 */, %2474, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %2476 = reshape(%2475, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %2477 = subtract(300 /* ty=int64 */, %2430) /* ty=int64 */;
        %2478 = expand_dims(%2477, axis=0) /* ty=Tensor[(1), int64] */;
        %2479 = cast(%2478, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2480 = shape_of(%2468, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2481 = take(%2480, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
        %2482 = expand_dims(%2481, axis=0) /* ty=Tensor[(1), int32] */;
        %2483 = cast(%2482, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2484 = (%2479, %2483);
        %2485 = concatenate(%2484) /* ty=Tensor[(2), int64] */;
        %2486 = dyn.full(0 /* ty=int32 */, %2485, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %2487 = reshape(%2486, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %2488 = (%2476, %2468, %2487);
        %2489 = concatenate(%2488) /* ty=Tensor[(?, ?), float32] */;
        %2490 = cast_like(0 /* ty=int32 */, meta[relay.Constant][165] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
        %2491 = less(meta[relay.Constant][165] /* ty=Tensor[(2), int32] */, %2490) /* ty=Tensor[(2), bool] */;
        %2492 = shape_of(%2489, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2493 = cast_like(%2492, meta[relay.Constant][165] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2494 = add(meta[relay.Constant][165] /* ty=Tensor[(2), int32] */, %2493) /* ty=Tensor[(2), int32] */;
        %2495 = where(%2491, %2494, meta[relay.Constant][165] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2496 = shape_of(%2489, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2497 = expand_dims(0 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2498 = expand_dims(300 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2499 = scatter(%2496, %2497, %2498, meta[relay.attrs.ScatterAttrs][8]) /* ty=Tensor[(2), int32] */;
        %2500 = cast(%2499, dtype="int64") /* ty=Tensor[(2), int64] */;
        %2501 = dyn.strided_slice(%2489, %2495, %2500, meta[relay.Constant][166] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %2502 = cast_like(0 /* ty=int32 */, meta[relay.Constant][167] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
        %2503 = less(meta[relay.Constant][167] /* ty=Tensor[(2), int32] */, %2502) /* ty=Tensor[(2), bool] */;
        %2504 = shape_of(%2501, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2505 = cast_like(%2504, meta[relay.Constant][167] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2506 = add(meta[relay.Constant][167] /* ty=Tensor[(2), int32] */, %2505) /* ty=Tensor[(2), int32] */;
        %2507 = where(%2503, %2506, meta[relay.Constant][167] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2508 = shape_of(%2501, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2509 = cast(%2508, dtype="int64") /* ty=Tensor[(2), int64] */;
        %2510 = dyn.strided_slice(%2501, %2507, %2509, meta[relay.Constant][168] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %2511 = shape_of(%2510, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2512 = take(%2511, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
        %2513 = expand_dims(%2512, axis=0) /* ty=Tensor[(1), int32] */;
        %2514 = cast(%2513, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2515 = expand_dims(%2441, axis=0) /* ty=Tensor[(1), int64] */;
        %2516 = cast(%2515, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2517 = (%2514, %2516);
        %2518 = concatenate(%2517) /* ty=Tensor[(2), int64] */;
        %2519 = dyn.full(0 /* ty=int32 */, %2518, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %2520 = reshape(%2519, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %2521 = shape_of(%2510, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2522 = take(%2521, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
        %2523 = expand_dims(%2522, axis=0) /* ty=Tensor[(1), int32] */;
        %2524 = cast(%2523, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2525 = subtract(300 /* ty=int64 */, %2463) /* ty=int64 */;
        %2526 = expand_dims(%2525, axis=0) /* ty=Tensor[(1), int64] */;
        %2527 = cast(%2526, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2528 = (%2524, %2527);
        %2529 = concatenate(%2528) /* ty=Tensor[(2), int64] */;
        %2530 = dyn.full(0 /* ty=int32 */, %2529, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %2531 = reshape(%2530, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %2532 = (%2520, %2510, %2531);
        %2533 = concatenate(%2532, axis=1) /* ty=Tensor[(?, ?), float32] */;
        %2534 = cast_like(0 /* ty=int32 */, meta[relay.Constant][169] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
        %2535 = less(meta[relay.Constant][169] /* ty=Tensor[(2), int32] */, %2534) /* ty=Tensor[(2), bool] */;
        %2536 = shape_of(%2533, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2537 = cast_like(%2536, meta[relay.Constant][169] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2538 = add(meta[relay.Constant][169] /* ty=Tensor[(2), int32] */, %2537) /* ty=Tensor[(2), int32] */;
        %2539 = where(%2535, %2538, meta[relay.Constant][169] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2540 = shape_of(%2533, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2541 = cast(%2540, dtype="int64") /* ty=Tensor[(2), int64] */;
        %2542 = dyn.strided_slice(%2533, %2539, %2541, meta[relay.Constant][170] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %2543 = cast_like(0 /* ty=int32 */, meta[relay.Constant][171] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
        %2544 = less(meta[relay.Constant][171] /* ty=Tensor[(2), int32] */, %2543) /* ty=Tensor[(2), bool] */;
        %2545 = shape_of(%2542, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2546 = cast_like(%2545, meta[relay.Constant][171] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2547 = add(meta[relay.Constant][171] /* ty=Tensor[(2), int32] */, %2546) /* ty=Tensor[(2), int32] */;
        %2548 = where(%2544, %2547, meta[relay.Constant][171] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2549 = shape_of(%2542, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2550 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2551 = expand_dims(300 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2552 = scatter(%2549, %2550, %2551, meta[relay.attrs.ScatterAttrs][9]) /* ty=Tensor[(2), int32] */;
        %2553 = cast(%2552, dtype="int64") /* ty=Tensor[(2), int64] */;
        %2554 = dyn.strided_slice(%2542, %2548, %2553, meta[relay.Constant][172] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %2555 = expand_dims(%2554, axis=0) /* ty=Tensor[(1, ?, ?), float32] */;
        %2556 = (%res_append.6, %2555);
        %2557 = concatenate(%2556) /* ty=Tensor[(?, ?, ?), float32] */;
        %while_loop(%2371, %2557, %v7286, %v7394) /* ty=(int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) */
      } else {
        (%i.1, %res_append.6, %v7286, %v7394)
      }
    };
    %while_loop
  );
  %2559 = %2558(0 /* ty=int32 */, %2026, %2262, %2367) /* ty=(int32, Tensor[(?, ?, ?), float32], Tensor[(?, 1, ?, ?), float32], Tensor[(?, 4), int64]) */;
  %2560 = %2559.1;
  %2561 = cast_like(0 /* ty=int32 */, meta[relay.Constant][173] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %2562 = less(meta[relay.Constant][173] /* ty=Tensor[(3), int32] */, %2561) /* ty=Tensor[(3), bool] */;
  %2563 = shape_of(%2560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2564 = cast_like(%2563, meta[relay.Constant][173] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %2565 = add(meta[relay.Constant][173] /* ty=Tensor[(3), int32] */, %2564) /* ty=Tensor[(3), int32] */;
  %2566 = where(%2562, %2565, meta[relay.Constant][173] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %2567 = shape_of(%2560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2568 = cast(%2567, dtype="int64") /* ty=Tensor[(3), int64] */;
  %2569 = dyn.strided_slice(%2560, %2566, %2568, meta[relay.Constant][174] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %2570 = expand_dims(%2569, axis=1) /* ty=Tensor[(?, 1, ?, ?), float32] */;
  (%2021, %2023, %2025, %2570)
}
