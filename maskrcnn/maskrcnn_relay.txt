File test_street_small.jpg exists, skip.
fn (%input0: Tensor[(1, 3, 300, 300), float32], %model.backbone.body.conv1.weight: Tensor[(64, 3, 7, 7), float32], %model.backbone.body.bn1.weight: Tensor[(64), float32], %model.backbone.body.bn1.running_var: Tensor[(64), float32], %model.backbone.body.bn1.bias: Tensor[(64), float32], %model.backbone.body.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.0.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.downsample.1.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.1.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.1.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.1.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.2.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.2.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.2.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32], %model.backbone.body.layer2.0.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.0.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.0.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %model.backbone.body.layer2.0.downsample.1.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.1.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.1.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.1.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.2.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.2.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.2.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.3.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.3.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.3.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.body.layer3.0.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.0.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.0.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32], %model.backbone.body.layer3.0.downsample.1.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.1.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.1.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.1.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.2.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.2.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.2.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.3.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.3.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.3.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.4.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.4.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.4.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.5.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.5.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.5.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32], %model.backbone.body.layer4.0.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.0.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.0.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32], %model.backbone.body.layer4.0.downsample.1.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.1.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.1.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.1.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.2.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.2.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.2.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_mean: Tensor[(2048), float32], %model.backbone.fpn.inner_blocks.0.weight: Tensor[(256, 256, 1, 1), float32], %model.backbone.fpn.inner_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.fpn.inner_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.2.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.fpn.inner_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.3.weight: Tensor[(256, 2048, 1, 1), float32], %model.backbone.fpn.inner_blocks.3.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.0.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.1.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.3.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.3.bias: Tensor[(256), float32], %model.rpn.head.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.rpn.head.conv.bias: Tensor[(256), float32], %model.rpn.head.cls_logits.weight: Tensor[(3, 256, 1, 1), float32], %model.rpn.head.cls_logits.bias: Tensor[(3), float32], %model.rpn.head.bbox_pred.weight: Tensor[(12, 256, 1, 1), float32], %model.rpn.head.bbox_pred.bias: Tensor[(12), float32], %model.roi_heads.box_head.fc6.weight: Tensor[(1024, 12544), float32], %model.roi_heads.box_head.fc6.bias: Tensor[(1024), float32], %model.roi_heads.box_head.fc7.weight: Tensor[(1024, 1024), float32], %model.roi_heads.box_head.fc7.bias: Tensor[(1024), float32], %model.roi_heads.box_predictor.cls_score.weight: Tensor[(91, 1024), float32], %model.roi_heads.box_predictor.cls_score.bias: Tensor[(91), float32], %model.roi_heads.box_predictor.bbox_pred.weight: Tensor[(364, 1024), float32], %model.roi_heads.box_predictor.bbox_pred.bias: Tensor[(364), float32], %model.roi_heads.mask_head.mask_fcn1.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn1.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn2.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn2.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn3.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn3.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn4.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn4.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.conv5_mask.weight: Tensor[(256, 256, 2, 2), float32], %model.roi_heads.mask_predictor.conv5_mask.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.weight: Tensor[(91, 256, 1, 1), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.bias: Tensor[(91), float32]) {
  %0 = split(%input0, indices_or_sections=1);
  %1 = %0.0;
  %2 = squeeze(%1, axis=[0]);
  %3 = (%2,);
  %4 = %3.0;
  %5 = strided_slice(meta[relay.Constant][0], begin=[0], end=[3], strides=[1]);
  %6 = expand_dims(%5, axis=1);
  %7 = expand_dims(%6, axis=2);
  %8 = subtract(%4, %7);
  %9 = strided_slice(meta[relay.Constant][1], begin=[0], end=[3], strides=[1]);
  %10 = expand_dims(%9, axis=1);
  %11 = expand_dims(%10, axis=2);
  %12 = divide(%8, %11);
  %13 = expand_dims(%12, axis=0);
  %14 = image.resize(%13, size=[800, 800]);
  %15 = take(%14, 0, axis=0);
  %16 = nn.pad(%15, pad_width=[[0, 0], [0, 0], [0, 0]]);
  %17 = (%16,);
  %18 = stack(%17);
  %19 = (%18, 800, 800);
  %20 = %19.0;
  %21 = nn.conv2d(%20, %model.backbone.body.conv1.weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]);
  %22 = reshape(%model.backbone.body.bn1.weight, newshape=[1, -1, 1, 1]);
  %23 = reshape(%model.backbone.body.bn1.running_var, newshape=[1, -1, 1, 1]);
  %24 = add(%23, 0f);
  %25 = rsqrt(%24);
  %26 = multiply(%22, %25);
  %27 = multiply(%21, %26);
  %28 = reshape(%model.backbone.body.bn1.bias, newshape=[1, -1, 1, 1]);
  %29 = reshape(%model.backbone.body.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %30 = multiply(%29, %26);
  %31 = subtract(%28, %30);
  %32 = add(%27, %31);
  %33 = nn.relu(%32);
  %34 = nn.max_pool2d(%33, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]);
  %35 = nn.conv2d(%34, %model.backbone.body.layer1.0.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %36 = reshape(%model.backbone.body.layer1.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %37 = reshape(%model.backbone.body.layer1.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %38 = add(%37, 0f);
  %39 = rsqrt(%38);
  %40 = multiply(%36, %39);
  %41 = multiply(%35, %40);
  %42 = reshape(%model.backbone.body.layer1.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %43 = reshape(%model.backbone.body.layer1.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %44 = multiply(%43, %40);
  %45 = subtract(%42, %44);
  %46 = add(%41, %45);
  %47 = nn.relu(%46);
  %48 = nn.conv2d(%47, %model.backbone.body.layer1.0.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %49 = reshape(%model.backbone.body.layer1.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %50 = reshape(%model.backbone.body.layer1.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %51 = add(%50, 0f);
  %52 = rsqrt(%51);
  %53 = multiply(%49, %52);
  %54 = multiply(%48, %53);
  %55 = reshape(%model.backbone.body.layer1.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %56 = reshape(%model.backbone.body.layer1.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %57 = multiply(%56, %53);
  %58 = subtract(%55, %57);
  %59 = add(%54, %58);
  %60 = nn.relu(%59);
  %61 = nn.conv2d(%60, %model.backbone.body.layer1.0.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %62 = reshape(%model.backbone.body.layer1.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %63 = reshape(%model.backbone.body.layer1.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %64 = add(%63, 0f);
  %65 = rsqrt(%64);
  %66 = multiply(%62, %65);
  %67 = multiply(%61, %66);
  %68 = reshape(%model.backbone.body.layer1.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %69 = reshape(%model.backbone.body.layer1.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %70 = multiply(%69, %66);
  %71 = subtract(%68, %70);
  %72 = add(%67, %71);
  %73 = nn.conv2d(%34, %model.backbone.body.layer1.0.downsample.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %74 = reshape(%model.backbone.body.layer1.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %75 = reshape(%model.backbone.body.layer1.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %76 = add(%75, 0f);
  %77 = rsqrt(%76);
  %78 = multiply(%74, %77);
  %79 = multiply(%73, %78);
  %80 = reshape(%model.backbone.body.layer1.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %81 = reshape(%model.backbone.body.layer1.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %82 = multiply(%81, %78);
  %83 = subtract(%80, %82);
  %84 = add(%79, %83);
  %85 = add(%72, %84);
  %86 = nn.relu(%85);
  %87 = nn.conv2d(%86, %model.backbone.body.layer1.1.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %88 = reshape(%model.backbone.body.layer1.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %89 = reshape(%model.backbone.body.layer1.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %90 = add(%89, 0f);
  %91 = rsqrt(%90);
  %92 = multiply(%88, %91);
  %93 = multiply(%87, %92);
  %94 = reshape(%model.backbone.body.layer1.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %95 = reshape(%model.backbone.body.layer1.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %96 = multiply(%95, %92);
  %97 = subtract(%94, %96);
  %98 = add(%93, %97);
  %99 = nn.relu(%98);
  %100 = nn.conv2d(%99, %model.backbone.body.layer1.1.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %101 = reshape(%model.backbone.body.layer1.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %102 = reshape(%model.backbone.body.layer1.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %103 = add(%102, 0f);
  %104 = rsqrt(%103);
  %105 = multiply(%101, %104);
  %106 = multiply(%100, %105);
  %107 = reshape(%model.backbone.body.layer1.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %108 = reshape(%model.backbone.body.layer1.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %109 = multiply(%108, %105);
  %110 = subtract(%107, %109);
  %111 = add(%106, %110);
  %112 = nn.relu(%111);
  %113 = nn.conv2d(%112, %model.backbone.body.layer1.1.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %114 = reshape(%model.backbone.body.layer1.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %115 = reshape(%model.backbone.body.layer1.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %116 = add(%115, 0f);
  %117 = rsqrt(%116);
  %118 = multiply(%114, %117);
  %119 = multiply(%113, %118);
  %120 = reshape(%model.backbone.body.layer1.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %121 = reshape(%model.backbone.body.layer1.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %122 = multiply(%121, %118);
  %123 = subtract(%120, %122);
  %124 = add(%119, %123);
  %125 = add(%124, %86);
  %126 = nn.relu(%125);
  %127 = nn.conv2d(%126, %model.backbone.body.layer1.2.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %128 = reshape(%model.backbone.body.layer1.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %129 = reshape(%model.backbone.body.layer1.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %130 = add(%129, 0f);
  %131 = rsqrt(%130);
  %132 = multiply(%128, %131);
  %133 = multiply(%127, %132);
  %134 = reshape(%model.backbone.body.layer1.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %135 = reshape(%model.backbone.body.layer1.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %136 = multiply(%135, %132);
  %137 = subtract(%134, %136);
  %138 = add(%133, %137);
  %139 = nn.relu(%138);
  %140 = nn.conv2d(%139, %model.backbone.body.layer1.2.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %141 = reshape(%model.backbone.body.layer1.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %142 = reshape(%model.backbone.body.layer1.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %143 = add(%142, 0f);
  %144 = rsqrt(%143);
  %145 = multiply(%141, %144);
  %146 = multiply(%140, %145);
  %147 = reshape(%model.backbone.body.layer1.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %148 = reshape(%model.backbone.body.layer1.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %149 = multiply(%148, %145);
  %150 = subtract(%147, %149);
  %151 = add(%146, %150);
  %152 = nn.relu(%151);
  %153 = nn.conv2d(%152, %model.backbone.body.layer1.2.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %154 = reshape(%model.backbone.body.layer1.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %155 = reshape(%model.backbone.body.layer1.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %156 = add(%155, 0f);
  %157 = rsqrt(%156);
  %158 = multiply(%154, %157);
  %159 = multiply(%153, %158);
  %160 = reshape(%model.backbone.body.layer1.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %161 = reshape(%model.backbone.body.layer1.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %162 = multiply(%161, %158);
  %163 = subtract(%160, %162);
  %164 = add(%159, %163);
  %165 = add(%164, %126);
  %166 = nn.relu(%165);
  %167 = nn.conv2d(%166, %model.backbone.body.layer2.0.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %168 = reshape(%model.backbone.body.layer2.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %169 = reshape(%model.backbone.body.layer2.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %170 = add(%169, 0f);
  %171 = rsqrt(%170);
  %172 = multiply(%168, %171);
  %173 = multiply(%167, %172);
  %174 = reshape(%model.backbone.body.layer2.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %175 = reshape(%model.backbone.body.layer2.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %176 = multiply(%175, %172);
  %177 = subtract(%174, %176);
  %178 = add(%173, %177);
  %179 = nn.relu(%178);
  %180 = nn.conv2d(%179, %model.backbone.body.layer2.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %181 = reshape(%model.backbone.body.layer2.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %182 = reshape(%model.backbone.body.layer2.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %183 = add(%182, 0f);
  %184 = rsqrt(%183);
  %185 = multiply(%181, %184);
  %186 = multiply(%180, %185);
  %187 = reshape(%model.backbone.body.layer2.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %188 = reshape(%model.backbone.body.layer2.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %189 = multiply(%188, %185);
  %190 = subtract(%187, %189);
  %191 = add(%186, %190);
  %192 = nn.relu(%191);
  %193 = nn.conv2d(%192, %model.backbone.body.layer2.0.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %194 = reshape(%model.backbone.body.layer2.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %195 = reshape(%model.backbone.body.layer2.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %196 = add(%195, 0f);
  %197 = rsqrt(%196);
  %198 = multiply(%194, %197);
  %199 = multiply(%193, %198);
  %200 = reshape(%model.backbone.body.layer2.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %201 = reshape(%model.backbone.body.layer2.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %202 = multiply(%201, %198);
  %203 = subtract(%200, %202);
  %204 = add(%199, %203);
  %205 = nn.conv2d(%166, %model.backbone.body.layer2.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %206 = reshape(%model.backbone.body.layer2.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %207 = reshape(%model.backbone.body.layer2.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %208 = add(%207, 0f);
  %209 = rsqrt(%208);
  %210 = multiply(%206, %209);
  %211 = multiply(%205, %210);
  %212 = reshape(%model.backbone.body.layer2.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %213 = reshape(%model.backbone.body.layer2.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %214 = multiply(%213, %210);
  %215 = subtract(%212, %214);
  %216 = add(%211, %215);
  %217 = add(%204, %216);
  %218 = nn.relu(%217);
  %219 = nn.conv2d(%218, %model.backbone.body.layer2.1.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %220 = reshape(%model.backbone.body.layer2.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %221 = reshape(%model.backbone.body.layer2.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %222 = add(%221, 0f);
  %223 = rsqrt(%222);
  %224 = multiply(%220, %223);
  %225 = multiply(%219, %224);
  %226 = reshape(%model.backbone.body.layer2.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %227 = reshape(%model.backbone.body.layer2.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %228 = multiply(%227, %224);
  %229 = subtract(%226, %228);
  %230 = add(%225, %229);
  %231 = nn.relu(%230);
  %232 = nn.conv2d(%231, %model.backbone.body.layer2.1.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %233 = reshape(%model.backbone.body.layer2.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %234 = reshape(%model.backbone.body.layer2.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %235 = add(%234, 0f);
  %236 = rsqrt(%235);
  %237 = multiply(%233, %236);
  %238 = multiply(%232, %237);
  %239 = reshape(%model.backbone.body.layer2.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %240 = reshape(%model.backbone.body.layer2.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %241 = multiply(%240, %237);
  %242 = subtract(%239, %241);
  %243 = add(%238, %242);
  %244 = nn.relu(%243);
  %245 = nn.conv2d(%244, %model.backbone.body.layer2.1.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %246 = reshape(%model.backbone.body.layer2.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %247 = reshape(%model.backbone.body.layer2.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %248 = add(%247, 0f);
  %249 = rsqrt(%248);
  %250 = multiply(%246, %249);
  %251 = multiply(%245, %250);
  %252 = reshape(%model.backbone.body.layer2.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %253 = reshape(%model.backbone.body.layer2.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %254 = multiply(%253, %250);
  %255 = subtract(%252, %254);
  %256 = add(%251, %255);
  %257 = add(%256, %218);
  %258 = nn.relu(%257);
  %259 = nn.conv2d(%258, %model.backbone.body.layer2.2.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %260 = reshape(%model.backbone.body.layer2.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %261 = reshape(%model.backbone.body.layer2.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %262 = add(%261, 0f);
  %263 = rsqrt(%262);
  %264 = multiply(%260, %263);
  %265 = multiply(%259, %264);
  %266 = reshape(%model.backbone.body.layer2.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %267 = reshape(%model.backbone.body.layer2.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %268 = multiply(%267, %264);
  %269 = subtract(%266, %268);
  %270 = add(%265, %269);
  %271 = nn.relu(%270);
  %272 = nn.conv2d(%271, %model.backbone.body.layer2.2.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %273 = reshape(%model.backbone.body.layer2.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %274 = reshape(%model.backbone.body.layer2.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %275 = add(%274, 0f);
  %276 = rsqrt(%275);
  %277 = multiply(%273, %276);
  %278 = multiply(%272, %277);
  %279 = reshape(%model.backbone.body.layer2.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %280 = reshape(%model.backbone.body.layer2.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %281 = multiply(%280, %277);
  %282 = subtract(%279, %281);
  %283 = add(%278, %282);
  %284 = nn.relu(%283);
  %285 = nn.conv2d(%284, %model.backbone.body.layer2.2.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %286 = reshape(%model.backbone.body.layer2.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %287 = reshape(%model.backbone.body.layer2.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %288 = add(%287, 0f);
  %289 = rsqrt(%288);
  %290 = multiply(%286, %289);
  %291 = multiply(%285, %290);
  %292 = reshape(%model.backbone.body.layer2.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %293 = reshape(%model.backbone.body.layer2.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %294 = multiply(%293, %290);
  %295 = subtract(%292, %294);
  %296 = add(%291, %295);
  %297 = add(%296, %258);
  %298 = nn.relu(%297);
  %299 = nn.conv2d(%298, %model.backbone.body.layer2.3.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %300 = reshape(%model.backbone.body.layer2.3.bn1.weight, newshape=[1, -1, 1, 1]);
  %301 = reshape(%model.backbone.body.layer2.3.bn1.running_var, newshape=[1, -1, 1, 1]);
  %302 = add(%301, 0f);
  %303 = rsqrt(%302);
  %304 = multiply(%300, %303);
  %305 = multiply(%299, %304);
  %306 = reshape(%model.backbone.body.layer2.3.bn1.bias, newshape=[1, -1, 1, 1]);
  %307 = reshape(%model.backbone.body.layer2.3.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %308 = multiply(%307, %304);
  %309 = subtract(%306, %308);
  %310 = add(%305, %309);
  %311 = nn.relu(%310);
  %312 = nn.conv2d(%311, %model.backbone.body.layer2.3.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %313 = reshape(%model.backbone.body.layer2.3.bn2.weight, newshape=[1, -1, 1, 1]);
  %314 = reshape(%model.backbone.body.layer2.3.bn2.running_var, newshape=[1, -1, 1, 1]);
  %315 = add(%314, 0f);
  %316 = rsqrt(%315);
  %317 = multiply(%313, %316);
  %318 = multiply(%312, %317);
  %319 = reshape(%model.backbone.body.layer2.3.bn2.bias, newshape=[1, -1, 1, 1]);
  %320 = reshape(%model.backbone.body.layer2.3.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %321 = multiply(%320, %317);
  %322 = subtract(%319, %321);
  %323 = add(%318, %322);
  %324 = nn.relu(%323);
  %325 = nn.conv2d(%324, %model.backbone.body.layer2.3.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %326 = reshape(%model.backbone.body.layer2.3.bn3.weight, newshape=[1, -1, 1, 1]);
  %327 = reshape(%model.backbone.body.layer2.3.bn3.running_var, newshape=[1, -1, 1, 1]);
  %328 = add(%327, 0f);
  %329 = rsqrt(%328);
  %330 = multiply(%326, %329);
  %331 = multiply(%325, %330);
  %332 = reshape(%model.backbone.body.layer2.3.bn3.bias, newshape=[1, -1, 1, 1]);
  %333 = reshape(%model.backbone.body.layer2.3.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %334 = multiply(%333, %330);
  %335 = subtract(%332, %334);
  %336 = add(%331, %335);
  %337 = add(%336, %298);
  %338 = nn.relu(%337);
  %339 = nn.conv2d(%338, %model.backbone.body.layer3.0.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %340 = reshape(%model.backbone.body.layer3.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %341 = reshape(%model.backbone.body.layer3.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %342 = add(%341, 0f);
  %343 = rsqrt(%342);
  %344 = multiply(%340, %343);
  %345 = multiply(%339, %344);
  %346 = reshape(%model.backbone.body.layer3.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %347 = reshape(%model.backbone.body.layer3.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %348 = multiply(%347, %344);
  %349 = subtract(%346, %348);
  %350 = add(%345, %349);
  %351 = nn.relu(%350);
  %352 = nn.conv2d(%351, %model.backbone.body.layer3.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %353 = reshape(%model.backbone.body.layer3.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %354 = reshape(%model.backbone.body.layer3.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %355 = add(%354, 0f);
  %356 = rsqrt(%355);
  %357 = multiply(%353, %356);
  %358 = multiply(%352, %357);
  %359 = reshape(%model.backbone.body.layer3.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %360 = reshape(%model.backbone.body.layer3.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %361 = multiply(%360, %357);
  %362 = subtract(%359, %361);
  %363 = add(%358, %362);
  %364 = nn.relu(%363);
  %365 = nn.conv2d(%364, %model.backbone.body.layer3.0.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %366 = reshape(%model.backbone.body.layer3.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %367 = reshape(%model.backbone.body.layer3.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %368 = add(%367, 0f);
  %369 = rsqrt(%368);
  %370 = multiply(%366, %369);
  %371 = multiply(%365, %370);
  %372 = reshape(%model.backbone.body.layer3.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %373 = reshape(%model.backbone.body.layer3.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %374 = multiply(%373, %370);
  %375 = subtract(%372, %374);
  %376 = add(%371, %375);
  %377 = nn.conv2d(%338, %model.backbone.body.layer3.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %378 = reshape(%model.backbone.body.layer3.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %379 = reshape(%model.backbone.body.layer3.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %380 = add(%379, 0f);
  %381 = rsqrt(%380);
  %382 = multiply(%378, %381);
  %383 = multiply(%377, %382);
  %384 = reshape(%model.backbone.body.layer3.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %385 = reshape(%model.backbone.body.layer3.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %386 = multiply(%385, %382);
  %387 = subtract(%384, %386);
  %388 = add(%383, %387);
  %389 = add(%376, %388);
  %390 = nn.relu(%389);
  %391 = nn.conv2d(%390, %model.backbone.body.layer3.1.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %392 = reshape(%model.backbone.body.layer3.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %393 = reshape(%model.backbone.body.layer3.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %394 = add(%393, 0f);
  %395 = rsqrt(%394);
  %396 = multiply(%392, %395);
  %397 = multiply(%391, %396);
  %398 = reshape(%model.backbone.body.layer3.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %399 = reshape(%model.backbone.body.layer3.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %400 = multiply(%399, %396);
  %401 = subtract(%398, %400);
  %402 = add(%397, %401);
  %403 = nn.relu(%402);
  %404 = nn.conv2d(%403, %model.backbone.body.layer3.1.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %405 = reshape(%model.backbone.body.layer3.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %406 = reshape(%model.backbone.body.layer3.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %407 = add(%406, 0f);
  %408 = rsqrt(%407);
  %409 = multiply(%405, %408);
  %410 = multiply(%404, %409);
  %411 = reshape(%model.backbone.body.layer3.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %412 = reshape(%model.backbone.body.layer3.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %413 = multiply(%412, %409);
  %414 = subtract(%411, %413);
  %415 = add(%410, %414);
  %416 = nn.relu(%415);
  %417 = nn.conv2d(%416, %model.backbone.body.layer3.1.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %418 = reshape(%model.backbone.body.layer3.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %419 = reshape(%model.backbone.body.layer3.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %420 = add(%419, 0f);
  %421 = rsqrt(%420);
  %422 = multiply(%418, %421);
  %423 = multiply(%417, %422);
  %424 = reshape(%model.backbone.body.layer3.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %425 = reshape(%model.backbone.body.layer3.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %426 = multiply(%425, %422);
  %427 = subtract(%424, %426);
  %428 = add(%423, %427);
  %429 = add(%428, %390);
  %430 = nn.relu(%429);
  %431 = nn.conv2d(%430, %model.backbone.body.layer3.2.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %432 = reshape(%model.backbone.body.layer3.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %433 = reshape(%model.backbone.body.layer3.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %434 = add(%433, 0f);
  %435 = rsqrt(%434);
  %436 = multiply(%432, %435);
  %437 = multiply(%431, %436);
  %438 = reshape(%model.backbone.body.layer3.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %439 = reshape(%model.backbone.body.layer3.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %440 = multiply(%439, %436);
  %441 = subtract(%438, %440);
  %442 = add(%437, %441);
  %443 = nn.relu(%442);
  %444 = nn.conv2d(%443, %model.backbone.body.layer3.2.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %445 = reshape(%model.backbone.body.layer3.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %446 = reshape(%model.backbone.body.layer3.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %447 = add(%446, 0f);
  %448 = rsqrt(%447);
  %449 = multiply(%445, %448);
  %450 = multiply(%444, %449);
  %451 = reshape(%model.backbone.body.layer3.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %452 = reshape(%model.backbone.body.layer3.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %453 = multiply(%452, %449);
  %454 = subtract(%451, %453);
  %455 = add(%450, %454);
  %456 = nn.relu(%455);
  %457 = nn.conv2d(%456, %model.backbone.body.layer3.2.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %458 = reshape(%model.backbone.body.layer3.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %459 = reshape(%model.backbone.body.layer3.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %460 = add(%459, 0f);
  %461 = rsqrt(%460);
  %462 = multiply(%458, %461);
  %463 = multiply(%457, %462);
  %464 = reshape(%model.backbone.body.layer3.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %465 = reshape(%model.backbone.body.layer3.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %466 = multiply(%465, %462);
  %467 = subtract(%464, %466);
  %468 = add(%463, %467);
  %469 = add(%468, %430);
  %470 = nn.relu(%469);
  %471 = nn.conv2d(%470, %model.backbone.body.layer3.3.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %472 = reshape(%model.backbone.body.layer3.3.bn1.weight, newshape=[1, -1, 1, 1]);
  %473 = reshape(%model.backbone.body.layer3.3.bn1.running_var, newshape=[1, -1, 1, 1]);
  %474 = add(%473, 0f);
  %475 = rsqrt(%474);
  %476 = multiply(%472, %475);
  %477 = multiply(%471, %476);
  %478 = reshape(%model.backbone.body.layer3.3.bn1.bias, newshape=[1, -1, 1, 1]);
  %479 = reshape(%model.backbone.body.layer3.3.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %480 = multiply(%479, %476);
  %481 = subtract(%478, %480);
  %482 = add(%477, %481);
  %483 = nn.relu(%482);
  %484 = nn.conv2d(%483, %model.backbone.body.layer3.3.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %485 = reshape(%model.backbone.body.layer3.3.bn2.weight, newshape=[1, -1, 1, 1]);
  %486 = reshape(%model.backbone.body.layer3.3.bn2.running_var, newshape=[1, -1, 1, 1]);
  %487 = add(%486, 0f);
  %488 = rsqrt(%487);
  %489 = multiply(%485, %488);
  %490 = multiply(%484, %489);
  %491 = reshape(%model.backbone.body.layer3.3.bn2.bias, newshape=[1, -1, 1, 1]);
  %492 = reshape(%model.backbone.body.layer3.3.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %493 = multiply(%492, %489);
  %494 = subtract(%491, %493);
  %495 = add(%490, %494);
  %496 = nn.relu(%495);
  %497 = nn.conv2d(%496, %model.backbone.body.layer3.3.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %498 = reshape(%model.backbone.body.layer3.3.bn3.weight, newshape=[1, -1, 1, 1]);
  %499 = reshape(%model.backbone.body.layer3.3.bn3.running_var, newshape=[1, -1, 1, 1]);
  %500 = add(%499, 0f);
  %501 = rsqrt(%500);
  %502 = multiply(%498, %501);
  %503 = multiply(%497, %502);
  %504 = reshape(%model.backbone.body.layer3.3.bn3.bias, newshape=[1, -1, 1, 1]);
  %505 = reshape(%model.backbone.body.layer3.3.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %506 = multiply(%505, %502);
  %507 = subtract(%504, %506);
  %508 = add(%503, %507);
  %509 = add(%508, %470);
  %510 = nn.relu(%509);
  %511 = nn.conv2d(%510, %model.backbone.body.layer3.4.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %512 = reshape(%model.backbone.body.layer3.4.bn1.weight, newshape=[1, -1, 1, 1]);
  %513 = reshape(%model.backbone.body.layer3.4.bn1.running_var, newshape=[1, -1, 1, 1]);
  %514 = add(%513, 0f);
  %515 = rsqrt(%514);
  %516 = multiply(%512, %515);
  %517 = multiply(%511, %516);
  %518 = reshape(%model.backbone.body.layer3.4.bn1.bias, newshape=[1, -1, 1, 1]);
  %519 = reshape(%model.backbone.body.layer3.4.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %520 = multiply(%519, %516);
  %521 = subtract(%518, %520);
  %522 = add(%517, %521);
  %523 = nn.relu(%522);
  %524 = nn.conv2d(%523, %model.backbone.body.layer3.4.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %525 = reshape(%model.backbone.body.layer3.4.bn2.weight, newshape=[1, -1, 1, 1]);
  %526 = reshape(%model.backbone.body.layer3.4.bn2.running_var, newshape=[1, -1, 1, 1]);
  %527 = add(%526, 0f);
  %528 = rsqrt(%527);
  %529 = multiply(%525, %528);
  %530 = multiply(%524, %529);
  %531 = reshape(%model.backbone.body.layer3.4.bn2.bias, newshape=[1, -1, 1, 1]);
  %532 = reshape(%model.backbone.body.layer3.4.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %533 = multiply(%532, %529);
  %534 = subtract(%531, %533);
  %535 = add(%530, %534);
  %536 = nn.relu(%535);
  %537 = nn.conv2d(%536, %model.backbone.body.layer3.4.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %538 = reshape(%model.backbone.body.layer3.4.bn3.weight, newshape=[1, -1, 1, 1]);
  %539 = reshape(%model.backbone.body.layer3.4.bn3.running_var, newshape=[1, -1, 1, 1]);
  %540 = add(%539, 0f);
  %541 = rsqrt(%540);
  %542 = multiply(%538, %541);
  %543 = multiply(%537, %542);
  %544 = reshape(%model.backbone.body.layer3.4.bn3.bias, newshape=[1, -1, 1, 1]);
  %545 = reshape(%model.backbone.body.layer3.4.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %546 = multiply(%545, %542);
  %547 = subtract(%544, %546);
  %548 = add(%543, %547);
  %549 = add(%548, %510);
  %550 = nn.relu(%549);
  %551 = nn.conv2d(%550, %model.backbone.body.layer3.5.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %552 = reshape(%model.backbone.body.layer3.5.bn1.weight, newshape=[1, -1, 1, 1]);
  %553 = reshape(%model.backbone.body.layer3.5.bn1.running_var, newshape=[1, -1, 1, 1]);
  %554 = add(%553, 0f);
  %555 = rsqrt(%554);
  %556 = multiply(%552, %555);
  %557 = multiply(%551, %556);
  %558 = reshape(%model.backbone.body.layer3.5.bn1.bias, newshape=[1, -1, 1, 1]);
  %559 = reshape(%model.backbone.body.layer3.5.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %560 = multiply(%559, %556);
  %561 = subtract(%558, %560);
  %562 = add(%557, %561);
  %563 = nn.relu(%562);
  %564 = nn.conv2d(%563, %model.backbone.body.layer3.5.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %565 = reshape(%model.backbone.body.layer3.5.bn2.weight, newshape=[1, -1, 1, 1]);
  %566 = reshape(%model.backbone.body.layer3.5.bn2.running_var, newshape=[1, -1, 1, 1]);
  %567 = add(%566, 0f);
  %568 = rsqrt(%567);
  %569 = multiply(%565, %568);
  %570 = multiply(%564, %569);
  %571 = reshape(%model.backbone.body.layer3.5.bn2.bias, newshape=[1, -1, 1, 1]);
  %572 = reshape(%model.backbone.body.layer3.5.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %573 = multiply(%572, %569);
  %574 = subtract(%571, %573);
  %575 = add(%570, %574);
  %576 = nn.relu(%575);
  %577 = nn.conv2d(%576, %model.backbone.body.layer3.5.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %578 = reshape(%model.backbone.body.layer3.5.bn3.weight, newshape=[1, -1, 1, 1]);
  %579 = reshape(%model.backbone.body.layer3.5.bn3.running_var, newshape=[1, -1, 1, 1]);
  %580 = add(%579, 0f);
  %581 = rsqrt(%580);
  %582 = multiply(%578, %581);
  %583 = multiply(%577, %582);
  %584 = reshape(%model.backbone.body.layer3.5.bn3.bias, newshape=[1, -1, 1, 1]);
  %585 = reshape(%model.backbone.body.layer3.5.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %586 = multiply(%585, %582);
  %587 = subtract(%584, %586);
  %588 = add(%583, %587);
  %589 = add(%588, %550);
  %590 = nn.relu(%589);
  %591 = nn.conv2d(%590, %model.backbone.body.layer4.0.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %592 = reshape(%model.backbone.body.layer4.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %593 = reshape(%model.backbone.body.layer4.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %594 = add(%593, 0f);
  %595 = rsqrt(%594);
  %596 = multiply(%592, %595);
  %597 = multiply(%591, %596);
  %598 = reshape(%model.backbone.body.layer4.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %599 = reshape(%model.backbone.body.layer4.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %600 = multiply(%599, %596);
  %601 = subtract(%598, %600);
  %602 = add(%597, %601);
  %603 = nn.relu(%602);
  %604 = nn.conv2d(%603, %model.backbone.body.layer4.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %605 = reshape(%model.backbone.body.layer4.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %606 = reshape(%model.backbone.body.layer4.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %607 = add(%606, 0f);
  %608 = rsqrt(%607);
  %609 = multiply(%605, %608);
  %610 = multiply(%604, %609);
  %611 = reshape(%model.backbone.body.layer4.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %612 = reshape(%model.backbone.body.layer4.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %613 = multiply(%612, %609);
  %614 = subtract(%611, %613);
  %615 = add(%610, %614);
  %616 = nn.relu(%615);
  %617 = nn.conv2d(%616, %model.backbone.body.layer4.0.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %618 = reshape(%model.backbone.body.layer4.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %619 = reshape(%model.backbone.body.layer4.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %620 = add(%619, 0f);
  %621 = rsqrt(%620);
  %622 = multiply(%618, %621);
  %623 = multiply(%617, %622);
  %624 = reshape(%model.backbone.body.layer4.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %625 = reshape(%model.backbone.body.layer4.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %626 = multiply(%625, %622);
  %627 = subtract(%624, %626);
  %628 = add(%623, %627);
  %629 = nn.conv2d(%590, %model.backbone.body.layer4.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %630 = reshape(%model.backbone.body.layer4.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %631 = reshape(%model.backbone.body.layer4.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %632 = add(%631, 0f);
  %633 = rsqrt(%632);
  %634 = multiply(%630, %633);
  %635 = multiply(%629, %634);
  %636 = reshape(%model.backbone.body.layer4.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %637 = reshape(%model.backbone.body.layer4.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %638 = multiply(%637, %634);
  %639 = subtract(%636, %638);
  %640 = add(%635, %639);
  %641 = add(%628, %640);
  %642 = nn.relu(%641);
  %643 = nn.conv2d(%642, %model.backbone.body.layer4.1.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %644 = reshape(%model.backbone.body.layer4.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %645 = reshape(%model.backbone.body.layer4.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %646 = add(%645, 0f);
  %647 = rsqrt(%646);
  %648 = multiply(%644, %647);
  %649 = multiply(%643, %648);
  %650 = reshape(%model.backbone.body.layer4.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %651 = reshape(%model.backbone.body.layer4.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %652 = multiply(%651, %648);
  %653 = subtract(%650, %652);
  %654 = add(%649, %653);
  %655 = nn.relu(%654);
  %656 = nn.conv2d(%655, %model.backbone.body.layer4.1.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %657 = reshape(%model.backbone.body.layer4.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %658 = reshape(%model.backbone.body.layer4.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %659 = add(%658, 0f);
  %660 = rsqrt(%659);
  %661 = multiply(%657, %660);
  %662 = multiply(%656, %661);
  %663 = reshape(%model.backbone.body.layer4.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %664 = reshape(%model.backbone.body.layer4.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %665 = multiply(%664, %661);
  %666 = subtract(%663, %665);
  %667 = add(%662, %666);
  %668 = nn.relu(%667);
  %669 = nn.conv2d(%668, %model.backbone.body.layer4.1.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %670 = reshape(%model.backbone.body.layer4.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %671 = reshape(%model.backbone.body.layer4.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %672 = add(%671, 0f);
  %673 = rsqrt(%672);
  %674 = multiply(%670, %673);
  %675 = multiply(%669, %674);
  %676 = reshape(%model.backbone.body.layer4.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %677 = reshape(%model.backbone.body.layer4.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %678 = multiply(%677, %674);
  %679 = subtract(%676, %678);
  %680 = add(%675, %679);
  %681 = add(%680, %642);
  %682 = nn.relu(%681);
  %683 = nn.conv2d(%682, %model.backbone.body.layer4.2.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %684 = reshape(%model.backbone.body.layer4.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %685 = reshape(%model.backbone.body.layer4.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %686 = add(%685, 0f);
  %687 = rsqrt(%686);
  %688 = multiply(%684, %687);
  %689 = multiply(%683, %688);
  %690 = reshape(%model.backbone.body.layer4.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %691 = reshape(%model.backbone.body.layer4.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %692 = multiply(%691, %688);
  %693 = subtract(%690, %692);
  %694 = add(%689, %693);
  %695 = nn.relu(%694);
  %696 = nn.conv2d(%695, %model.backbone.body.layer4.2.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %697 = reshape(%model.backbone.body.layer4.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %698 = reshape(%model.backbone.body.layer4.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %699 = add(%698, 0f);
  %700 = rsqrt(%699);
  %701 = multiply(%697, %700);
  %702 = multiply(%696, %701);
  %703 = reshape(%model.backbone.body.layer4.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %704 = reshape(%model.backbone.body.layer4.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %705 = multiply(%704, %701);
  %706 = subtract(%703, %705);
  %707 = add(%702, %706);
  %708 = nn.relu(%707);
  %709 = nn.conv2d(%708, %model.backbone.body.layer4.2.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %710 = reshape(%model.backbone.body.layer4.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %711 = reshape(%model.backbone.body.layer4.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %712 = add(%711, 0f);
  %713 = rsqrt(%712);
  %714 = multiply(%710, %713);
  %715 = multiply(%709, %714);
  %716 = reshape(%model.backbone.body.layer4.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %717 = reshape(%model.backbone.body.layer4.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %718 = multiply(%717, %714);
  %719 = subtract(%716, %718);
  %720 = add(%715, %719);
  %721 = add(%720, %682);
  %722 = nn.relu(%721);
  %723 = (%722, %590, %338, %166);
  %724 = %723.3;
  %725 = nn.conv2d(%724, %model.backbone.fpn.inner_blocks.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %726 = nn.bias_add(%725, %model.backbone.fpn.inner_blocks.0.bias);
  %727 = %723.2;
  %728 = nn.conv2d(%727, %model.backbone.fpn.inner_blocks.1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %729 = nn.bias_add(%728, %model.backbone.fpn.inner_blocks.1.bias);
  %730 = %723.1;
  %731 = nn.conv2d(%730, %model.backbone.fpn.inner_blocks.2.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %732 = nn.bias_add(%731, %model.backbone.fpn.inner_blocks.2.bias);
  %733 = %723.0;
  %734 = nn.conv2d(%733, %model.backbone.fpn.inner_blocks.3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %735 = nn.bias_add(%734, %model.backbone.fpn.inner_blocks.3.bias);
  %736 = image.resize(%735, size=[50, 50], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %737 = add(%732, %736);
  %738 = image.resize(%737, size=[100, 100], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %739 = add(%729, %738);
  %740 = image.resize(%739, size=[200, 200], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %741 = add(%726, %740);
  %742 = nn.conv2d(%741, %model.backbone.fpn.layer_blocks.0.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %743 = nn.bias_add(%742, %model.backbone.fpn.layer_blocks.0.bias);
  %744 = nn.conv2d(%739, %model.backbone.fpn.layer_blocks.1.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %745 = nn.bias_add(%744, %model.backbone.fpn.layer_blocks.1.bias);
  %746 = nn.conv2d(%737, %model.backbone.fpn.layer_blocks.2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %747 = nn.bias_add(%746, %model.backbone.fpn.layer_blocks.2.bias);
  %748 = nn.conv2d(%735, %model.backbone.fpn.layer_blocks.3.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %749 = nn.bias_add(%748, %model.backbone.fpn.layer_blocks.3.bias);
  %750 = nn.max_pool2d(%749, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0]);
  %751 = (%743, %745, %747, %749, %750, %749, %749, %749, %749, %749, %749);
  %752 = %751.0;
  %753 = %751.1;
  %754 = %751.2;
  %755 = %751.3;
  %756 = %751.4;
  %757 = %751.5;
  %758 = %751.6;
  %759 = %751.7;
  %760 = %751.8;
  %761 = %751.9;
  %762 = %751.10;
  %763 = (%752, %753, %754, %755, %756, %757, %758, %759, %760, %761, %762);
  %764 = %763.0;
  %765 = nn.conv2d(%764, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %766 = nn.bias_add(%765, %model.rpn.head.conv.bias);
  %767 = nn.relu(%766);
  %768 = nn.conv2d(%767, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %769 = nn.bias_add(%768, %model.rpn.head.cls_logits.bias);
  %770 = %763.1;
  %771 = nn.conv2d(%770, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %772 = nn.bias_add(%771, %model.rpn.head.conv.bias);
  %773 = nn.relu(%772);
  %774 = nn.conv2d(%773, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %775 = nn.bias_add(%774, %model.rpn.head.cls_logits.bias);
  %776 = %763.2;
  %777 = nn.conv2d(%776, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %778 = nn.bias_add(%777, %model.rpn.head.conv.bias);
  %779 = nn.relu(%778);
  %780 = nn.conv2d(%779, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %781 = nn.bias_add(%780, %model.rpn.head.cls_logits.bias);
  %782 = %763.3;
  %783 = nn.conv2d(%782, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %784 = nn.bias_add(%783, %model.rpn.head.conv.bias);
  %785 = nn.relu(%784);
  %786 = nn.conv2d(%785, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %787 = nn.bias_add(%786, %model.rpn.head.cls_logits.bias);
  %788 = %763.4;
  %789 = nn.conv2d(%788, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %790 = nn.bias_add(%789, %model.rpn.head.conv.bias);
  %791 = nn.relu(%790);
  %792 = nn.conv2d(%791, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %793 = nn.bias_add(%792, %model.rpn.head.cls_logits.bias);
  %794 = nn.conv2d(%767, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %795 = nn.bias_add(%794, %model.rpn.head.bbox_pred.bias);
  %796 = nn.conv2d(%773, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %797 = nn.bias_add(%796, %model.rpn.head.bbox_pred.bias);
  %798 = nn.conv2d(%779, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %799 = nn.bias_add(%798, %model.rpn.head.bbox_pred.bias);
  %800 = nn.conv2d(%785, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %801 = nn.bias_add(%800, %model.rpn.head.bbox_pred.bias);
  %802 = nn.conv2d(%791, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %803 = nn.bias_add(%802, %model.rpn.head.bbox_pred.bias);
  %804 = (%769, %775, %781, %787, %793, %795, %797, %799, %801, %803);
  %805 = %804.5;
  %806 = reshape(%805, newshape=[1, -1, 4, 200, 200]);
  %807 = transpose(%806, axes=[0, 3, 4, 1, 2]);
  %808 = reshape(%807, newshape=[1, -1, 4]);
  %809 = %804.6;
  %810 = reshape(%809, newshape=[1, -1, 4, 100, 100]);
  %811 = transpose(%810, axes=[0, 3, 4, 1, 2]);
  %812 = reshape(%811, newshape=[1, -1, 4]);
  %813 = %804.7;
  %814 = reshape(%813, newshape=[1, -1, 4, 50, 50]);
  %815 = transpose(%814, axes=[0, 3, 4, 1, 2]);
  %816 = reshape(%815, newshape=[1, -1, 4]);
  %817 = %804.8;
  %818 = reshape(%817, newshape=[1, -1, 4, 25, 25]);
  %819 = transpose(%818, axes=[0, 3, 4, 1, 2]);
  %820 = reshape(%819, newshape=[1, -1, 4]);
  %821 = %804.9;
  %822 = reshape(%821, newshape=[1, -1, 4, 13, 13]);
  %823 = transpose(%822, axes=[0, 3, 4, 1, 2]);
  %824 = reshape(%823, newshape=[1, -1, 4]);
  %825 = (%808, %812, %816, %820, %824);
  %826 = concatenate(%825, axis=1);
  %827 = reshape(%826, newshape=[-1, 4]);
  %828 = reshape(%827, newshape=[159882, -1]);
  %829 = strided_slice(%828, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %830 = strided_slice(%829, begin=[0, 0], end=[159882, 4], strides=[1, 4]);
  %831 = divide(%830, 1f);
  %832 = arange(0f, 200f, 1f, start=meta[relay.Constant][2], stop=meta[relay.Constant][3], step=meta[relay.Constant][4], dtype="float32");
  %833 = floor_divide(800, 200);
  %834 = cast(%833, dtype="int64");
  %835 = cast(%834, dtype="float32");
  %836 = multiply(%832, %835);
  %837 = arange(0f, 200f, 1f, start=meta[relay.Constant][5], stop=meta[relay.Constant][6], step=meta[relay.Constant][7], dtype="float32");
  %838 = floor_divide(800, 200);
  %839 = cast(%838, dtype="int64");
  %840 = cast(%839, dtype="float32");
  %841 = multiply(%837, %840);
  %842 = (%836, %841);
  %843 = meshgrid(%842);
  %844 = %843.1;
  %845 = reshape(%844, newshape=[-1]);
  %846 = %843.0;
  %847 = reshape(%846, newshape=[-1]);
  %848 = (%845, %847, %845, %847);
  %849 = stack(%848, axis=1);
  %850 = reshape(%849, newshape=[-1, 1, 4]);
  %851 = reshape(meta[relay.Constant][8], newshape=[1, -1, 4]);
  %852 = add(%850, %851);
  %853 = reshape(%852, newshape=[-1, 4]);
  %854 = arange(0f, 100f, 1f, start=meta[relay.Constant][9], stop=meta[relay.Constant][10], step=meta[relay.Constant][11], dtype="float32");
  %855 = floor_divide(800, 100);
  %856 = cast(%855, dtype="int64");
  %857 = cast(%856, dtype="float32");
  %858 = multiply(%854, %857);
  %859 = arange(0f, 100f, 1f, start=meta[relay.Constant][12], stop=meta[relay.Constant][13], step=meta[relay.Constant][14], dtype="float32");
  %860 = floor_divide(800, 100);
  %861 = cast(%860, dtype="int64");
  %862 = cast(%861, dtype="float32");
  %863 = multiply(%859, %862);
  %864 = (%858, %863);
  %865 = meshgrid(%864);
  %866 = %865.1;
  %867 = reshape(%866, newshape=[-1]);
  %868 = %865.0;
  %869 = reshape(%868, newshape=[-1]);
  %870 = (%867, %869, %867, %869);
  %871 = stack(%870, axis=1);
  %872 = reshape(%871, newshape=[-1, 1, 4]);
  %873 = reshape(meta[relay.Constant][15], newshape=[1, -1, 4]);
  %874 = add(%872, %873);
  %875 = reshape(%874, newshape=[-1, 4]);
  %876 = arange(0f, 50f, 1f, start=meta[relay.Constant][16], stop=meta[relay.Constant][17], step=meta[relay.Constant][18], dtype="float32");
  %877 = floor_divide(800, 50);
  %878 = cast(%877, dtype="int64");
  %879 = cast(%878, dtype="float32");
  %880 = multiply(%876, %879);
  %881 = arange(0f, 50f, 1f, start=meta[relay.Constant][19], stop=meta[relay.Constant][20], step=meta[relay.Constant][21], dtype="float32");
  %882 = floor_divide(800, 50);
  %883 = cast(%882, dtype="int64");
  %884 = cast(%883, dtype="float32");
  %885 = multiply(%881, %884);
  %886 = (%880, %885);
  %887 = meshgrid(%886);
  %888 = %887.1;
  %889 = reshape(%888, newshape=[-1]);
  %890 = %887.0;
  %891 = reshape(%890, newshape=[-1]);
  %892 = (%889, %891, %889, %891);
  %893 = stack(%892, axis=1);
  %894 = reshape(%893, newshape=[-1, 1, 4]);
  %895 = reshape(meta[relay.Constant][22], newshape=[1, -1, 4]);
  %896 = add(%894, %895);
  %897 = reshape(%896, newshape=[-1, 4]);
  %898 = arange(0f, 25f, 1f, start=meta[relay.Constant][23], stop=meta[relay.Constant][24], step=meta[relay.Constant][25], dtype="float32");
  %899 = floor_divide(800, 25);
  %900 = cast(%899, dtype="int64");
  %901 = cast(%900, dtype="float32");
  %902 = multiply(%898, %901);
  %903 = arange(0f, 25f, 1f, start=meta[relay.Constant][26], stop=meta[relay.Constant][27], step=meta[relay.Constant][28], dtype="float32");
  %904 = floor_divide(800, 25);
  %905 = cast(%904, dtype="int64");
  %906 = cast(%905, dtype="float32");
  %907 = multiply(%903, %906);
  %908 = (%902, %907);
  %909 = meshgrid(%908);
  %910 = %909.1;
  %911 = reshape(%910, newshape=[-1]);
  %912 = %909.0;
  %913 = reshape(%912, newshape=[-1]);
  %914 = (%911, %913, %911, %913);
  %915 = stack(%914, axis=1);
  %916 = reshape(%915, newshape=[-1, 1, 4]);
  %917 = reshape(meta[relay.Constant][29], newshape=[1, -1, 4]);
  %918 = add(%916, %917);
  %919 = reshape(%918, newshape=[-1, 4]);
  %920 = arange(0f, 13f, 1f, start=meta[relay.Constant][30], stop=meta[relay.Constant][31], step=meta[relay.Constant][32], dtype="float32");
  %921 = floor_divide(800, 13);
  %922 = cast(%921, dtype="int64");
  %923 = cast(%922, dtype="float32");
  %924 = multiply(%920, %923);
  %925 = arange(0f, 13f, 1f, start=meta[relay.Constant][33], stop=meta[relay.Constant][34], step=meta[relay.Constant][35], dtype="float32");
  %926 = floor_divide(800, 13);
  %927 = cast(%926, dtype="int64");
  %928 = cast(%927, dtype="float32");
  %929 = multiply(%925, %928);
  %930 = (%924, %929);
  %931 = meshgrid(%930);
  %932 = %931.1;
  %933 = reshape(%932, newshape=[-1]);
  %934 = %931.0;
  %935 = reshape(%934, newshape=[-1]);
  %936 = (%933, %935, %933, %935);
  %937 = stack(%936, axis=1);
  %938 = reshape(%937, newshape=[-1, 1, 4]);
  %939 = reshape(meta[relay.Constant][36], newshape=[1, -1, 4]);
  %940 = add(%938, %939);
  %941 = reshape(%940, newshape=[-1, 4]);
  %942 = (%853, %875, %897, %919, %941);
  %943 = concatenate(%942);
  %944 = (%943,);
  %945 = concatenate(%944);
  %946 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %947 = take(%946, 2, axis=1);
  %948 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %949 = take(%948, 0, axis=1);
  %950 = subtract(%947, %949);
  %951 = strided_slice(%950, begin=[0], end=[159882], strides=[1]);
  %952 = expand_dims(%951, axis=1);
  %953 = multiply(%831, %952);
  %954 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %955 = take(%954, 0, axis=1);
  %956 = multiply(%950, 0.5f);
  %957 = add(%955, %956);
  %958 = strided_slice(%957, begin=[0], end=[159882], strides=[1]);
  %959 = expand_dims(%958, axis=1);
  %960 = add(%953, %959);
  %961 = strided_slice(%828, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %962 = strided_slice(%961, begin=[0, 2], end=[159882, 4], strides=[1, 4]);
  %963 = divide(%962, 1f);
  %964 = clip(%963, a_min=-3.40282e+38f, a_max=4.13517f);
  %965 = exp(%964);
  %966 = strided_slice(%950, begin=[0], end=[159882], strides=[1]);
  %967 = expand_dims(%966, axis=1);
  %968 = multiply(%965, %967);
  %969 = multiply(0.5f, %968);
  %970 = subtract(%960, %969);
  %971 = strided_slice(%828, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %972 = strided_slice(%971, begin=[0, 1], end=[159882, 4], strides=[1, 4]);
  %973 = divide(%972, 1f);
  %974 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %975 = take(%974, 3, axis=1);
  %976 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %977 = take(%976, 1, axis=1);
  %978 = subtract(%975, %977);
  %979 = strided_slice(%978, begin=[0], end=[159882], strides=[1]);
  %980 = expand_dims(%979, axis=1);
  %981 = multiply(%973, %980);
  %982 = strided_slice(%945, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %983 = take(%982, 1, axis=1);
  %984 = multiply(%978, 0.5f);
  %985 = add(%983, %984);
  %986 = strided_slice(%985, begin=[0], end=[159882], strides=[1]);
  %987 = expand_dims(%986, axis=1);
  %988 = add(%981, %987);
  %989 = strided_slice(%828, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %990 = strided_slice(%989, begin=[0, 3], end=[159882, 4], strides=[1, 4]);
  %991 = divide(%990, 1f);
  %992 = clip(%991, a_min=-3.40282e+38f, a_max=4.13517f);
  %993 = exp(%992);
  %994 = strided_slice(%978, begin=[0], end=[159882], strides=[1]);
  %995 = expand_dims(%994, axis=1);
  %996 = multiply(%993, %995);
  %997 = multiply(0.5f, %996);
  %998 = subtract(%988, %997);
  %999 = multiply(0.5f, %968);
  %1000 = add(%960, %999);
  %1001 = multiply(0.5f, %996);
  %1002 = add(%988, %1001);
  %1003 = (%970, %998, %1000, %1002);
  %1004 = stack(%1003, axis=2);
  %1005 = reshape(%1004, newshape=[0, -1, 1]);
  %1006 = squeeze(%1005, axis=[2]);
  %1007 = reshape(%1006, newshape=[159882, -1, 4]);
  %1008 = reshape(%1007, newshape=[1, -1, 4]);
  %1009 = arange(0, 1, 1, start=meta[relay.Constant][37], stop=meta[relay.Constant][38], step=meta[relay.Constant][39], dtype="int64");
  %1010 = strided_slice(%1009, begin=[0], end=[1], strides=[1]);
  %1011 = expand_dims(%1010, axis=1);
  %1012 = %804.0;
  %1013 = reshape(%1012, newshape=[1, -1, 1, 200, 200]);
  %1014 = transpose(%1013, axes=[0, 3, 4, 1, 2]);
  %1015 = reshape(%1014, newshape=[1, -1, 1]);
  %1016 = %804.1;
  %1017 = reshape(%1016, newshape=[1, -1, 1, 100, 100]);
  %1018 = transpose(%1017, axes=[0, 3, 4, 1, 2]);
  %1019 = reshape(%1018, newshape=[1, -1, 1]);
  %1020 = %804.2;
  %1021 = reshape(%1020, newshape=[1, -1, 1, 50, 50]);
  %1022 = transpose(%1021, axes=[0, 3, 4, 1, 2]);
  %1023 = reshape(%1022, newshape=[1, -1, 1]);
  %1024 = %804.3;
  %1025 = reshape(%1024, newshape=[1, -1, 1, 25, 25]);
  %1026 = transpose(%1025, axes=[0, 3, 4, 1, 2]);
  %1027 = reshape(%1026, newshape=[1, -1, 1]);
  %1028 = %804.4;
  %1029 = reshape(%1028, newshape=[1, -1, 1, 13, 13]);
  %1030 = transpose(%1029, axes=[0, 3, 4, 1, 2]);
  %1031 = reshape(%1030, newshape=[1, -1, 1]);
  %1032 = (%1015, %1019, %1023, %1027, %1031);
  %1033 = concatenate(%1032, axis=1);
  %1034 = reshape(%1033, newshape=[-1, 1, 0]);
  %1035 = squeeze(%1034, axis=[1]);
  %1036 = reshape(%1035, newshape=[1, -1]);
  %1037 = split(%1036, indices_or_sections=[120000, 150000, 157500, 159375], axis=1);
  %1038 = %1037.0;
  %1039 = topk(%1038, k=1000, axis=1, dtype="int64");
  %1040 = %1039.1;
  %1041 = add(%1040, 0);
  %1042 = %1037.1;
  %1043 = topk(%1042, k=1000, axis=1, dtype="int64");
  %1044 = %1043.1;
  %1045 = take(meta[relay.Constant][40], 1, axis=0);
  %1046 = expand_dims(%1045, axis=0);
  %1047 = add(%1046, 0);
  %1048 = add(%1044, %1047);
  %1049 = %1037.2;
  %1050 = topk(%1049, k=1000, axis=1, dtype="int64");
  %1051 = %1050.1;
  %1052 = take(meta[relay.Constant][41], 1, axis=0);
  %1053 = expand_dims(%1052, axis=0);
  %1054 = add(%1047, %1053);
  %1055 = add(%1051, %1054);
  %1056 = %1037.3;
  %1057 = topk(%1056, k=1000, axis=1, dtype="int64");
  %1058 = %1057.1;
  %1059 = take(meta[relay.Constant][42], 1, axis=0);
  %1060 = expand_dims(%1059, axis=0);
  %1061 = add(%1054, %1060);
  %1062 = add(%1058, %1061);
  %1063 = %1037.4;
  %1064 = topk(%1063, k=507, axis=1, dtype="int64");
  %1065 = %1064.1;
  %1066 = take(meta[relay.Constant][43], 1, axis=0);
  %1067 = expand_dims(%1066, axis=0);
  %1068 = add(%1061, %1067);
  %1069 = add(%1065, %1068);
  %1070 = (%1041, %1048, %1055, %1062, %1069);
  %1071 = concatenate(%1070, axis=1);
  %1072 = (%1008, %1011, %1071);
  %1073 = adv_index(%1072);
  %1074 = split(%1073, indices_or_sections=1);
  %1075 = %1074.0;
  %1076 = squeeze(%1075, axis=[0]);
  %1077 = (%1076,);
  %1078 = %1077.0;
  %1079 = strided_slice(%1078, begin=[0, 0], end=[4507, 4], strides=[1, 2]);
  %1080 = maximum(%1079, 0f);
  %1081 = %19.1;
  %1082 = cast(%1081, dtype="float32");
  %1083 = minimum(%1080, %1082);
  %1084 = strided_slice(%1078, begin=[0, 1], end=[4507, 4], strides=[1, 2]);
  %1085 = maximum(%1084, 0f);
  %1086 = %19.2;
  %1087 = cast(%1086, dtype="float32");
  %1088 = minimum(%1085, %1087);
  %1089 = (%1083, %1088);
  %1090 = stack(%1089, axis=2);
  %1091 = reshape(%1090, newshape=[4507, 4]);
  %1092 = strided_slice(%1091, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1093 = take(%1092, 2, axis=1);
  %1094 = strided_slice(%1091, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1095 = take(%1094, 0, axis=1);
  %1096 = subtract(%1093, %1095);
  %1097 = greater_equal(%1096, 0.001f);
  %1098 = cast(%1097, dtype="bool");
  %1099 = strided_slice(%1091, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1100 = take(%1099, 3, axis=1);
  %1101 = strided_slice(%1091, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1102 = take(%1101, 1, axis=1);
  %1103 = subtract(%1100, %1102);
  %1104 = greater_equal(%1103, 0.001f);
  %1105 = cast(%1104, dtype="bool");
  %1106 = logical_and(%1098, %1105);
  %1107 = argwhere(%1106);
  %1108 = split(%1107, indices_or_sections=1, axis=1);
  %1109 = %1108.0;
  %1110 = squeeze(%1109, axis=[1]);
  %1111 = (%1110,);
  %1112 = %1111.0;
  %1113 = cast(%1112, dtype="int64");
  %1114 = (%1091, %1113);
  %1115 = adv_index(%1114);
  %1116 = ndarray_size(%1115, dtype="int32");
  %1117 = equal(%1116, 0);
  %1184 = if (%1117) {
    zeros(shape=[0], dtype="int64")
  } else {
    %1118 = (%1036, %1011, %1071);
    %1119 = adv_index(%1118);
    %1120 = split(%1119, indices_or_sections=1);
    %1121 = %1120.0;
    %1122 = squeeze(%1121, axis=[0]);
    %1123 = (%1122,);
    %1124 = %1123.0;
    %1125 = (%1124, %1113);
    %1126 = adv_index(%1125);
    %1127 = min(%1126);
    %1128 = subtract(%1126, %1127);
    %1129 = add(%1128, 1f);
    %1130 = expand_dims(%1129, axis=-1);
    %1131 = full(0, shape=[120000], dtype="int64");
    %1132 = full(1, shape=[30000], dtype="int64");
    %1133 = full(2, shape=[7500], dtype="int64");
    %1134 = full(3, shape=[1875], dtype="int64");
    %1135 = full(4, shape=[507], dtype="int64");
    %1136 = (%1131, %1132, %1133, %1134, %1135);
    %1137 = concatenate(%1136);
    %1138 = reshape(%1137, newshape=[1, -1]);
    %1139 = cast(%1036, dtype="int64");
    %1140 = broadcast_to_like(%1138, %1139);
    %1141 = (%1140, %1011, %1071);
    %1142 = adv_index(%1141);
    %1143 = split(%1142, indices_or_sections=1);
    %1144 = %1143.0;
    %1145 = squeeze(%1144, axis=[0]);
    %1146 = (%1145,);
    %1147 = %1146.0;
    %1148 = (%1147, %1113);
    %1149 = adv_index(%1148);
    %1150 = cast(%1149, dtype="float32");
    %1151 = max(%1115);
    %1152 = add(%1151, 1f);
    %1153 = multiply(%1150, %1152);
    %1154 = cast_like(0, meta[relay.Constant][44]);
    %1155 = less(meta[relay.Constant][44], %1154);
    %1156 = shape_of(%1153, dtype="int32");
    %1157 = cast_like(%1156, meta[relay.Constant][44]);
    %1158 = add(meta[relay.Constant][44], %1157);
    %1159 = where(%1155, %1158, meta[relay.Constant][44]);
    %1160 = shape_of(%1153, dtype="int32");
    %1161 = cast(%1160, dtype="int64");
    %1162 = dyn.strided_slice(%1153, %1159, %1161, meta[relay.Constant][45], begin=None, end=None, strides=None);
    %1163 = expand_dims(%1162, axis=1);
    %1164 = add(%1115, %1163);
    %1165 = (%1130, %1164);
    %1166 = concatenate(%1165, axis=-1);
    %1167 = expand_dims(%1166, axis=0);
    %1168 = shape_of(%1129, dtype="int32");
    %1169 = squeeze(%1168);
    %1170 = arange(0, %1169, 1, start=meta[relay.Constant][46], stop=meta[relay.Call][0], step=meta[relay.Constant][47], dtype="int32");
    %1171 = expand_dims(%1170, axis=0);
    %1172 = vision.non_max_suppression(%1167, %1168, %1171, -1, 0.7f, meta[relay.attrs.NonMaximumSuppressionAttrs][0]);
    %1173 = %1172.0;
    %1174 = squeeze(%1173, axis=[0]);
    %1175 = cast_like(0, meta[relay.Constant][48]);
    %1176 = less(meta[relay.Constant][48], %1175);
    %1177 = shape_of(%1174, dtype="int32");
    %1178 = cast_like(%1177, meta[relay.Constant][48]);
    %1179 = add(meta[relay.Constant][48], %1178);
    %1180 = where(%1176, %1179, meta[relay.Constant][48]);
    %1181 = %1172.1;
    %1182 = squeeze(%1181, axis=[1]);
    %1183 = dyn.strided_slice(%1174, %1180, %1182, meta[relay.Constant][49], begin=None, end=None, strides=None, slice_mode="size");
    cast(%1183, dtype="int64")
  };
  %1185 = strided_slice(%1184, begin=[0], end=[1000], strides=[1]);
  %1186 = (%1115, %1185);
  %1187 = adv_index(%1186);
  %1188 = cast_like(0, meta[relay.Constant][50]);
  %1189 = less(meta[relay.Constant][50], %1188);
  %1190 = shape_of(%1187, dtype="int32");
  %1191 = cast_like(%1190, meta[relay.Constant][50]);
  %1192 = add(meta[relay.Constant][50], %1191);
  %1193 = where(%1189, %1192, meta[relay.Constant][50]);
  %1194 = shape_of(%1187, dtype="int32");
  %1195 = cast(%1194, dtype="int64");
  %1196 = dyn.strided_slice(%1187, %1193, %1195, meta[relay.Constant][51], begin=None, end=None, strides=None);
  %1197 = take(%1196, 2, axis=1);
  %1198 = cast_like(0, meta[relay.Constant][52]);
  %1199 = less(meta[relay.Constant][52], %1198);
  %1200 = shape_of(%1187, dtype="int32");
  %1201 = cast_like(%1200, meta[relay.Constant][52]);
  %1202 = add(meta[relay.Constant][52], %1201);
  %1203 = where(%1199, %1202, meta[relay.Constant][52]);
  %1204 = shape_of(%1187, dtype="int32");
  %1205 = cast(%1204, dtype="int64");
  %1206 = dyn.strided_slice(%1187, %1203, %1205, meta[relay.Constant][53], begin=None, end=None, strides=None);
  %1207 = take(%1206, 0, axis=1);
  %1208 = subtract(%1197, %1207);
  %1209 = cast_like(0, meta[relay.Constant][54]);
  %1210 = less(meta[relay.Constant][54], %1209);
  %1211 = shape_of(%1187, dtype="int32");
  %1212 = cast_like(%1211, meta[relay.Constant][54]);
  %1213 = add(meta[relay.Constant][54], %1212);
  %1214 = where(%1210, %1213, meta[relay.Constant][54]);
  %1215 = shape_of(%1187, dtype="int32");
  %1216 = cast(%1215, dtype="int64");
  %1217 = dyn.strided_slice(%1187, %1214, %1216, meta[relay.Constant][55], begin=None, end=None, strides=None);
  %1218 = take(%1217, 3, axis=1);
  %1219 = cast_like(0, meta[relay.Constant][56]);
  %1220 = less(meta[relay.Constant][56], %1219);
  %1221 = shape_of(%1187, dtype="int32");
  %1222 = cast_like(%1221, meta[relay.Constant][56]);
  %1223 = add(meta[relay.Constant][56], %1222);
  %1224 = where(%1220, %1223, meta[relay.Constant][56]);
  %1225 = shape_of(%1187, dtype="int32");
  %1226 = cast(%1225, dtype="int64");
  %1227 = dyn.strided_slice(%1187, %1224, %1226, meta[relay.Constant][57], begin=None, end=None, strides=None);
  %1228 = take(%1227, 1, axis=1);
  %1229 = subtract(%1218, %1228);
  %1230 = multiply(%1208, %1229);
  %1231 = (%1230,);
  %1232 = concatenate(%1231);
  %1233 = sqrt(%1232);
  %1234 = divide(%1233, 224f);
  %1235 = log2(%1234);
  %1236 = add(%1235, 4f);
  %1237 = add(%1236, 1e-06f);
  %1238 = floor(%1237);
  %1239 = clip(%1238, a_min=2f, a_max=5f);
  %1240 = cast(%1239, dtype="int64");
  %1241 = subtract(%1240, 2);
  %1242 = shape_of(%1241, dtype="int32");
  %1243 = take(%1242, 0, axis=0);
  %1244 = expand_dims(%1243, axis=0);
  %1245 = cast(%1244, dtype="int64");
  %1246 = expand_dims(256, axis=0);
  %1247 = cast(%1246, dtype="int64");
  %1248 = expand_dims(7, axis=0);
  %1249 = cast(%1248, dtype="int64");
  %1250 = expand_dims(7, axis=0);
  %1251 = cast(%1250, dtype="int64");
  %1252 = (%1245, %1247, %1249, %1251);
  %1253 = concatenate(%1252);
  %1254 = dyn.full(0, %1253, shape=None, dtype="float32");
  %1255 = reshape(%1254, newshape=[0, 256, 7, 7]);
  %1256 = equal(%1241, 0);
  %1257 = argwhere(%1256);
  %1258 = split(%1257, indices_or_sections=1, axis=1);
  %1259 = %1258.0;
  %1260 = squeeze(%1259, axis=[1]);
  %1261 = (%1260,);
  %1262 = %1261.0;
  %1263 = reshape(%1262, newshape=[-1, 1, 1, 1]);
  %1264 = repeat(%1263, repeats=256, axis=1);
  %1265 = repeat(%1264, repeats=7, axis=2);
  %1266 = repeat(%1265, repeats=7, axis=3);
  %1267 = cast_like(0, meta[relay.Constant][58]);
  %1268 = less(meta[relay.Constant][58], %1267);
  %1269 = shape_of(%1187, dtype="int32");
  %1270 = cast_like(%1269, meta[relay.Constant][58]);
  %1271 = add(meta[relay.Constant][58], %1270);
  %1272 = where(%1268, %1271, meta[relay.Constant][58]);
  %1273 = shape_of(%1187, dtype="int32");
  %1274 = cast(%1273, dtype="int64");
  %1275 = dyn.strided_slice(%1187, %1272, %1274, meta[relay.Constant][59], begin=None, end=None, strides=None);
  %1276 = cast_like(0, meta[relay.Constant][60]);
  %1277 = less(meta[relay.Constant][60], %1276);
  %1278 = shape_of(%1275, dtype="int32");
  %1279 = cast_like(%1278, meta[relay.Constant][60]);
  %1280 = add(meta[relay.Constant][60], %1279);
  %1281 = where(%1277, %1280, meta[relay.Constant][60]);
  %1282 = shape_of(%1275, dtype="int32");
  %1283 = expand_dims(1, axis=0);
  %1284 = expand_dims(1, axis=0);
  %1285 = scatter(%1282, %1283, %1284, meta[relay.attrs.ScatterAttrs][0]);
  %1286 = cast(%1285, dtype="int64");
  %1287 = dyn.strided_slice(%1275, %1281, %1286, meta[relay.Constant][61], begin=None, end=None, strides=None);
  %1288 = full_like(%1287, 0);
  %1289 = (%1288,);
  %1290 = concatenate(%1289);
  %1291 = (%1187,);
  %1292 = concatenate(%1291);
  %1293 = (%1290, %1292);
  %1294 = concatenate(%1293, axis=1);

  %1295 = equal(%1241, 0);
  %1296 = argwhere(%1295);
  %1297 = split(%1296, indices_or_sections=1, axis=1);
  %1298 = %1297.0;
  %1299 = squeeze(%1298, axis=[1]);
  %1300 = (%1299,);
  %1301 = %1300.0;
  %1302 = cast(%1301, dtype="int64");
  %1303 = (%1294, %1302);
  %1304 = adv_index(%1303);
  %1305 = vision.roi_align(%764, %1304, meta[relay.attrs.ROIAlignAttrs][0]);
  %1306 = scatter(%1255, %1266, %1305, meta[relay.attrs.ScatterAttrs][1]);
  %1307 = equal(%1241, 1);
  %1308 = argwhere(%1307);
  %1309 = split(%1308, indices_or_sections=1, axis=1);
  %1310 = %1309.0;
  %1311 = squeeze(%1310, axis=[1]);
  %1312 = (%1311,);
  %1313 = %1312.0;
  %1314 = reshape(%1313, newshape=[-1, 1, 1, 1]);
  %1315 = repeat(%1314, repeats=256, axis=1);
  %1316 = repeat(%1315, repeats=7, axis=2);
  %1317 = repeat(%1316, repeats=7, axis=3);
  %1318 = equal(%1241, 1);
  %1319 = argwhere(%1318);
  %1320 = split(%1319, indices_or_sections=1, axis=1);
  %1321 = %1320.0;
  %1322 = squeeze(%1321, axis=[1]);
  %1323 = (%1322,);
  %1324 = %1323.0;
  %1325 = cast(%1324, dtype="int64");
  %1326 = (%1294, %1325);
  %1327 = adv_index(%1326);
  %1328 = vision.roi_align(%770, %1327, meta[relay.attrs.ROIAlignAttrs][1]);
  %1329 = scatter(%1306, %1317, %1328, meta[relay.attrs.ScatterAttrs][2]);
  %1330 = equal(%1241, 2);
  %1331 = argwhere(%1330);
  %1332 = split(%1331, indices_or_sections=1, axis=1);
  %1333 = %1332.0;
  %1334 = squeeze(%1333, axis=[1]);
  %1335 = (%1334,);
  %1336 = %1335.0;
  %1337 = reshape(%1336, newshape=[-1, 1, 1, 1]);
  %1338 = repeat(%1337, repeats=256, axis=1);
  %1339 = repeat(%1338, repeats=7, axis=2);
  %1340 = repeat(%1339, repeats=7, axis=3);
  %1341 = equal(%1241, 2);
  %1342 = argwhere(%1341);
  %1343 = split(%1342, indices_or_sections=1, axis=1);
  %1344 = %1343.0;
  %1345 = squeeze(%1344, axis=[1]);
  %1346 = (%1345,);
  %1347 = %1346.0;
  %1348 = cast(%1347, dtype="int64");
  %1349 = (%1294, %1348);
  %1350 = adv_index(%1349);
  %1351 = vision.roi_align(%776, %1350, meta[relay.attrs.ROIAlignAttrs][2]);
  %1352 = scatter(%1329, %1340, %1351, meta[relay.attrs.ScatterAttrs][3]);
  %1353 = equal(%1241, 3);
  %1354 = argwhere(%1353);
  %1355 = split(%1354, indices_or_sections=1, axis=1);
  %1356 = %1355.0;
  %1357 = squeeze(%1356, axis=[1]);
  %1358 = (%1357,);
  %1359 = %1358.0;
  %1360 = reshape(%1359, newshape=[-1, 1, 1, 1]);
  %1361 = repeat(%1360, repeats=256, axis=1);
  %1362 = repeat(%1361, repeats=7, axis=2);
  %1363 = repeat(%1362, repeats=7, axis=3);
  %1364 = %763.9;
  %1365 = equal(%1241, 3);
  %1366 = argwhere(%1365);
  %1367 = split(%1366, indices_or_sections=1, axis=1);
  %1368 = %1367.0;
  %1369 = squeeze(%1368, axis=[1]);
  %1370 = (%1369,);
  %1371 = %1370.0;
  %1372 = cast(%1371, dtype="int64");
  %1373 = (%1294, %1372);
  %1374 = adv_index(%1373);
  %1375 = vision.roi_align(%1364, %1374, meta[relay.attrs.ROIAlignAttrs][3]);
  %1376 = scatter(%1352, %1363, %1375, meta[relay.attrs.ScatterAttrs][4]);

  %1377 = reshape(%1376, newshape=[0, -1, 1, 1]);
  %1378 = squeeze(%1377, axis=[2, 3]);
  %1379 = transpose(%model.roi_heads.box_head.fc6.weight, axes=[1, 0]);
  %1380 = transpose(%1379, axes=[1, 0]);
  %1381 = nn.dense(%1378, %1380, units=1024);
  %1382 = add(%1381, %model.roi_heads.box_head.fc6.bias);
  %1383 = nn.relu(%1382);
  %1384 = transpose(%model.roi_heads.box_head.fc7.weight, axes=[1, 0]);
  %1385 = transpose(%1384, axes=[1, 0]);
  %1386 = nn.dense(%1383, %1385, units=1024);
  %1387 = add(%1386, %model.roi_heads.box_head.fc7.bias);
  %1388 = nn.relu(%1387);
  %1389 = reshape(%1388, newshape=[0, -1]);
  %1390 = transpose(%model.roi_heads.box_predictor.cls_score.weight, axes=[1, 0]);
  %1391 = transpose(%1390, axes=[1, 0]);
  %1392 = nn.dense(%1389, %1391, units=91);
  %1393 = add(%1392, %model.roi_heads.box_predictor.cls_score.bias);
  %1394 = transpose(%model.roi_heads.box_predictor.bbox_pred.weight, axes=[1, 0]);
  %1395 = transpose(%1394, axes=[1, 0]);
  %1396 = nn.dense(%1389, %1395, units=364);
  %1397 = add(%1396, %model.roi_heads.box_predictor.bbox_pred.bias);
  %1398 = (%1393, %1397);
  %1399 = %1398.1;
  %1400 = shape_of(%1187, dtype="int32");
  %1401 = take(%1400, 0, axis=0);
  %1402 = add(%1401, 0);
  %1403 = cast(%1402, dtype="int64");
  %1404 = expand_dims(%1403, axis=0);
  %1405 = expand_dims(-1, axis=0);
  %1406 = (%1404, %1405);
  %1407 = concatenate(%1406);
  %1408 = dyn.reshape(%1399, %1407, newshape=[]);
  %1409 = cast_like(0, meta[relay.Constant][62]);
  %1410 = less(meta[relay.Constant][62], %1409);
  %1411 = shape_of(%1408, dtype="int32");
  %1412 = cast_like(%1411, meta[relay.Constant][62]);
  %1413 = add(meta[relay.Constant][62], %1412);
  %1414 = where(%1410, %1413, meta[relay.Constant][62]);
  %1415 = shape_of(%1408, dtype="int32");
  %1416 = cast(%1415, dtype="int64");
  %1417 = dyn.strided_slice(%1408, %1414, %1416, meta[relay.Constant][63], begin=None, end=None, strides=None);
  %1418 = cast_like(0, meta[relay.Constant][64]);
  %1419 = less(meta[relay.Constant][64], %1418);
  %1420 = shape_of(%1417, dtype="int32");
  %1421 = cast_like(%1420, meta[relay.Constant][64]);
  %1422 = add(meta[relay.Constant][64], %1421);
  %1423 = where(%1419, %1422, meta[relay.Constant][64]);
  %1424 = shape_of(%1417, dtype="int32");
  %1425 = cast(%1424, dtype="int64");
  %1426 = dyn.strided_slice(%1417, %1423, %1425, meta[relay.Constant][65], begin=None, end=None, strides=None);
  %1427 = divide(%1426, 10f);
  %1428 = (%1187,);
  %1429 = concatenate(%1428);
  %1430 = cast_like(0, meta[relay.Constant][66]);
  %1431 = less(meta[relay.Constant][66], %1430);
  %1432 = shape_of(%1429, dtype="int32");
  %1433 = cast_like(%1432, meta[relay.Constant][66]);
  %1434 = add(meta[relay.Constant][66], %1433);
  %1435 = where(%1431, %1434, meta[relay.Constant][66]);
  %1436 = shape_of(%1429, dtype="int32");
  %1437 = cast(%1436, dtype="int64");
  %1438 = dyn.strided_slice(%1429, %1435, %1437, meta[relay.Constant][67], begin=None, end=None, strides=None);
  %1439 = take(%1438, 2, axis=1);
  %1440 = cast_like(0, meta[relay.Constant][68]);
  %1441 = less(meta[relay.Constant][68], %1440);
  %1442 = shape_of(%1429, dtype="int32");
  %1443 = cast_like(%1442, meta[relay.Constant][68]);
  %1444 = add(meta[relay.Constant][68], %1443);
  %1445 = where(%1441, %1444, meta[relay.Constant][68]);
  %1446 = shape_of(%1429, dtype="int32");
  %1447 = cast(%1446, dtype="int64");
  %1448 = dyn.strided_slice(%1429, %1445, %1447, meta[relay.Constant][69], begin=None, end=None, strides=None);
  %1449 = take(%1448, 0, axis=1);
  %1450 = subtract(%1439, %1449);
  %1451 = cast_like(0, meta[relay.Constant][70]);
  %1452 = less(meta[relay.Constant][70], %1451);
  %1453 = shape_of(%1450, dtype="int32");
  %1454 = cast_like(%1453, meta[relay.Constant][70]);
  %1455 = add(meta[relay.Constant][70], %1454);
  %1456 = where(%1452, %1455, meta[relay.Constant][70]);
  %1457 = shape_of(%1450, dtype="int32");
  %1458 = cast(%1457, dtype="int64");
  %1459 = dyn.strided_slice(%1450, %1456, %1458, meta[relay.Constant][71], begin=None, end=None, strides=None);
  %1460 = expand_dims(%1459, axis=1);
  %1461 = multiply(%1427, %1460);
  %1462 = cast_like(0, meta[relay.Constant][72]);
  %1463 = less(meta[relay.Constant][72], %1462);
  %1464 = shape_of(%1429, dtype="int32");
  %1465 = cast_like(%1464, meta[relay.Constant][72]);
  %1466 = add(meta[relay.Constant][72], %1465);
  %1467 = where(%1463, %1466, meta[relay.Constant][72]);
  %1468 = shape_of(%1429, dtype="int32");
  %1469 = cast(%1468, dtype="int64");
  %1470 = dyn.strided_slice(%1429, %1467, %1469, meta[relay.Constant][73], begin=None, end=None, strides=None);
  %1471 = take(%1470, 0, axis=1);
  %1472 = multiply(%1450, 0.5f);
  %1473 = add(%1471, %1472);
  %1474 = cast_like(0, meta[relay.Constant][74]);
  %1475 = less(meta[relay.Constant][74], %1474);
  %1476 = shape_of(%1473, dtype="int32");
  %1477 = cast_like(%1476, meta[relay.Constant][74]);
  %1478 = add(meta[relay.Constant][74], %1477);
  %1479 = where(%1475, %1478, meta[relay.Constant][74]);
  %1480 = shape_of(%1473, dtype="int32");
  %1481 = cast(%1480, dtype="int64");
  %1482 = dyn.strided_slice(%1473, %1479, %1481, meta[relay.Constant][75], begin=None, end=None, strides=None);
  %1483 = expand_dims(%1482, axis=1);
  %1484 = add(%1461, %1483);
  %1485 = cast_like(0, meta[relay.Constant][76]);
  %1486 = less(meta[relay.Constant][76], %1485);
  %1487 = shape_of(%1408, dtype="int32");
  %1488 = cast_like(%1487, meta[relay.Constant][76]);
  %1489 = add(meta[relay.Constant][76], %1488);
  %1490 = where(%1486, %1489, meta[relay.Constant][76]);
  %1491 = shape_of(%1408, dtype="int32");
  %1492 = cast(%1491, dtype="int64");
  %1493 = dyn.strided_slice(%1408, %1490, %1492, meta[relay.Constant][77], begin=None, end=None, strides=None);
  %1494 = cast_like(0, meta[relay.Constant][78]);
  %1495 = less(meta[relay.Constant][78], %1494);
  %1496 = shape_of(%1493, dtype="int32");
  %1497 = cast_like(%1496, meta[relay.Constant][78]);
  %1498 = add(meta[relay.Constant][78], %1497);
  %1499 = where(%1495, %1498, meta[relay.Constant][78]);
  %1500 = shape_of(%1493, dtype="int32");
  %1501 = cast(%1500, dtype="int64");
  %1502 = dyn.strided_slice(%1493, %1499, %1501, meta[relay.Constant][79], begin=None, end=None, strides=None);
  %1503 = divide(%1502, 5f);
  %1504 = clip(%1503, a_min=-3.40282e+38f, a_max=4.13517f);
  %1505 = exp(%1504);
  %1506 = cast_like(0, meta[relay.Constant][80]);
  %1507 = less(meta[relay.Constant][80], %1506);
  %1508 = shape_of(%1450, dtype="int32");
  %1509 = cast_like(%1508, meta[relay.Constant][80]);
  %1510 = add(meta[relay.Constant][80], %1509);
  %1511 = where(%1507, %1510, meta[relay.Constant][80]);
  %1512 = shape_of(%1450, dtype="int32");
  %1513 = cast(%1512, dtype="int64");
  %1514 = dyn.strided_slice(%1450, %1511, %1513, meta[relay.Constant][81], begin=None, end=None, strides=None);
  %1515 = expand_dims(%1514, axis=1);
  %1516 = multiply(%1505, %1515);
  %1517 = multiply(0.5f, %1516);
  %1518 = subtract(%1484, %1517);
  %1519 = cast_like(0, meta[relay.Constant][82]);
  %1520 = less(meta[relay.Constant][82], %1519);
  %1521 = shape_of(%1408, dtype="int32");
  %1522 = cast_like(%1521, meta[relay.Constant][82]);
  %1523 = add(meta[relay.Constant][82], %1522);
  %1524 = where(%1520, %1523, meta[relay.Constant][82]);
  %1525 = shape_of(%1408, dtype="int32");
  %1526 = cast(%1525, dtype="int64");
  %1527 = dyn.strided_slice(%1408, %1524, %1526, meta[relay.Constant][83], begin=None, end=None, strides=None);
  %1528 = cast_like(0, meta[relay.Constant][84]);
  %1529 = less(meta[relay.Constant][84], %1528);
  %1530 = shape_of(%1527, dtype="int32");
  %1531 = cast_like(%1530, meta[relay.Constant][84]);
  %1532 = add(meta[relay.Constant][84], %1531);
  %1533 = where(%1529, %1532, meta[relay.Constant][84]);
  %1534 = shape_of(%1527, dtype="int32");
  %1535 = cast(%1534, dtype="int64");
  %1536 = dyn.strided_slice(%1527, %1533, %1535, meta[relay.Constant][85], begin=None, end=None, strides=None);
  %1537 = divide(%1536, 10f);
  %1538 = cast_like(0, meta[relay.Constant][86]);
  %1539 = less(meta[relay.Constant][86], %1538);
  %1540 = shape_of(%1429, dtype="int32");
  %1541 = cast_like(%1540, meta[relay.Constant][86]);
  %1542 = add(meta[relay.Constant][86], %1541);
  %1543 = where(%1539, %1542, meta[relay.Constant][86]);
  %1544 = shape_of(%1429, dtype="int32");
  %1545 = cast(%1544, dtype="int64");
  %1546 = dyn.strided_slice(%1429, %1543, %1545, meta[relay.Constant][87], begin=None, end=None, strides=None);
  %1547 = take(%1546, 3, axis=1);
  %1548 = cast_like(0, meta[relay.Constant][88]);
  %1549 = less(meta[relay.Constant][88], %1548);
  %1550 = shape_of(%1429, dtype="int32");
  %1551 = cast_like(%1550, meta[relay.Constant][88]);
  %1552 = add(meta[relay.Constant][88], %1551);
  %1553 = where(%1549, %1552, meta[relay.Constant][88]);
  %1554 = shape_of(%1429, dtype="int32");
  %1555 = cast(%1554, dtype="int64");
  %1556 = dyn.strided_slice(%1429, %1553, %1555, meta[relay.Constant][89], begin=None, end=None, strides=None);
  %1557 = take(%1556, 1, axis=1);
  %1558 = subtract(%1547, %1557);
  %1559 = cast_like(0, meta[relay.Constant][90]);
  %1560 = less(meta[relay.Constant][90], %1559);
  %1561 = shape_of(%1558, dtype="int32");
  %1562 = cast_like(%1561, meta[relay.Constant][90]);
  %1563 = add(meta[relay.Constant][90], %1562);
  %1564 = where(%1560, %1563, meta[relay.Constant][90]);
  %1565 = shape_of(%1558, dtype="int32");
  %1566 = cast(%1565, dtype="int64");
  %1567 = dyn.strided_slice(%1558, %1564, %1566, meta[relay.Constant][91], begin=None, end=None, strides=None);
  %1568 = expand_dims(%1567, axis=1);
  %1569 = multiply(%1537, %1568);
  %1570 = cast_like(0, meta[relay.Constant][92]);
  %1571 = less(meta[relay.Constant][92], %1570);
  %1572 = shape_of(%1429, dtype="int32");
  %1573 = cast_like(%1572, meta[relay.Constant][92]);
  %1574 = add(meta[relay.Constant][92], %1573);
  %1575 = where(%1571, %1574, meta[relay.Constant][92]);
  %1576 = shape_of(%1429, dtype="int32");
  %1577 = cast(%1576, dtype="int64");
  %1578 = dyn.strided_slice(%1429, %1575, %1577, meta[relay.Constant][93], begin=None, end=None, strides=None);
  %1579 = take(%1578, 1, axis=1);
  %1580 = multiply(%1558, 0.5f);
  %1581 = add(%1579, %1580);
  %1582 = cast_like(0, meta[relay.Constant][94]);
  %1583 = less(meta[relay.Constant][94], %1582);
  %1584 = shape_of(%1581, dtype="int32");
  %1585 = cast_like(%1584, meta[relay.Constant][94]);
  %1586 = add(meta[relay.Constant][94], %1585);
  %1587 = where(%1583, %1586, meta[relay.Constant][94]);
  %1588 = shape_of(%1581, dtype="int32");
  %1589 = cast(%1588, dtype="int64");
  %1590 = dyn.strided_slice(%1581, %1587, %1589, meta[relay.Constant][95], begin=None, end=None, strides=None);
  %1591 = expand_dims(%1590, axis=1);
  %1592 = add(%1569, %1591);
  %1593 = cast_like(0, meta[relay.Constant][96]);
  %1594 = less(meta[relay.Constant][96], %1593);
  %1595 = shape_of(%1408, dtype="int32");
  %1596 = cast_like(%1595, meta[relay.Constant][96]);
  %1597 = add(meta[relay.Constant][96], %1596);
  %1598 = where(%1594, %1597, meta[relay.Constant][96]);
  %1599 = shape_of(%1408, dtype="int32");
  %1600 = cast(%1599, dtype="int64");
  %1601 = dyn.strided_slice(%1408, %1598, %1600, meta[relay.Constant][97], begin=None, end=None, strides=None);
  %1602 = cast_like(0, meta[relay.Constant][98]);
  %1603 = less(meta[relay.Constant][98], %1602);
  %1604 = shape_of(%1601, dtype="int32");
  %1605 = cast_like(%1604, meta[relay.Constant][98]);
  %1606 = add(meta[relay.Constant][98], %1605);
  %1607 = where(%1603, %1606, meta[relay.Constant][98]);
  %1608 = shape_of(%1601, dtype="int32");
  %1609 = cast(%1608, dtype="int64");
  %1610 = dyn.strided_slice(%1601, %1607, %1609, meta[relay.Constant][99], begin=None, end=None, strides=None);
  %1611 = divide(%1610, 5f);
  %1612 = clip(%1611, a_min=-3.40282e+38f, a_max=4.13517f);
  %1613 = exp(%1612);
  %1614 = cast_like(0, meta[relay.Constant][100]);
  %1615 = less(meta[relay.Constant][100], %1614);
  %1616 = shape_of(%1558, dtype="int32");
  %1617 = cast_like(%1616, meta[relay.Constant][100]);
  %1618 = add(meta[relay.Constant][100], %1617);
  %1619 = where(%1615, %1618, meta[relay.Constant][100]);
  %1620 = shape_of(%1558, dtype="int32");
  %1621 = cast(%1620, dtype="int64");
  %1622 = dyn.strided_slice(%1558, %1619, %1621, meta[relay.Constant][101], begin=None, end=None, strides=None);
  %1623 = expand_dims(%1622, axis=1);
  %1624 = multiply(%1613, %1623);
  %1625 = multiply(0.5f, %1624);
  %1626 = subtract(%1592, %1625);
  %1627 = multiply(0.5f, %1516);
  %1628 = add(%1484, %1627);
  %1629 = multiply(0.5f, %1624);
  %1630 = add(%1592, %1629);
  %1631 = (%1518, %1626, %1628, %1630);
  %1632 = stack(%1631, axis=2);
  %1633 = reshape(%1632, newshape=[0, -1, 1]);
  %1634 = squeeze(%1633, axis=[2]);
  %1635 = cast(%1402, dtype="int64");
  %1636 = expand_dims(%1635, axis=0);
  %1637 = expand_dims(-1, axis=0);
  %1638 = expand_dims(4, axis=0);
  %1639 = (%1636, %1637, %1638);
  %1640 = concatenate(%1639);
  %1641 = dyn.reshape(%1634, %1640, newshape=[]);
  %1642 = (%1641,);
  %1643 = %1642.0;
  %1644 = cast_like(0, meta[relay.Constant][102]);
  %1645 = less(meta[relay.Constant][102], %1644);
  %1646 = shape_of(%1643, dtype="int32");
  %1647 = cast_like(%1646, meta[relay.Constant][102]);
  %1648 = add(meta[relay.Constant][102], %1647);
  %1649 = where(%1645, %1648, meta[relay.Constant][102]);
  %1650 = shape_of(%1643, dtype="int32");
  %1651 = cast(%1650, dtype="int64");
  %1652 = dyn.strided_slice(%1643, %1649, %1651, meta[relay.Constant][103], begin=None, end=None, strides=None);
  %1653 = maximum(%1652, 0f);
  %1654 = cast(%1081, dtype="float32");
  %1655 = minimum(%1653, %1654);
  %1656 = cast_like(0, meta[relay.Constant][104]);
  %1657 = less(meta[relay.Constant][104], %1656);
  %1658 = shape_of(%1643, dtype="int32");
  %1659 = cast_like(%1658, meta[relay.Constant][104]);
  %1660 = add(meta[relay.Constant][104], %1659);
  %1661 = where(%1657, %1660, meta[relay.Constant][104]);
  %1662 = shape_of(%1643, dtype="int32");
  %1663 = cast(%1662, dtype="int64");
  %1664 = dyn.strided_slice(%1643, %1661, %1663, meta[relay.Constant][105], begin=None, end=None, strides=None);
  %1665 = maximum(%1664, 0f);
  %1666 = cast(%1086, dtype="float32");
  %1667 = minimum(%1665, %1666);
  %1668 = (%1655, %1667);
  %1669 = stack(%1668, axis=3);
  %1670 = shape_of(%1643, dtype="int32");
  %1671 = take(%1670, 0, axis=0);
  %1672 = cast(%1671, dtype="int64");
  %1673 = expand_dims(%1672, axis=0);
  %1674 = shape_of(%1643, dtype="int32");
  %1675 = take(%1674, 1, axis=0);
  %1676 = cast(%1675, dtype="int64");
  %1677 = expand_dims(%1676, axis=0);
  %1678 = shape_of(%1643, dtype="int32");
  %1679 = take(%1678, 2, axis=0);
  %1680 = cast(%1679, dtype="int64");
  %1681 = expand_dims(%1680, axis=0);
  %1682 = (%1673, %1677, %1681);
  %1683 = concatenate(%1682);
  %1684 = dyn.reshape(%1669, %1683, newshape=[]);
  %1685 = cast_like(0, meta[relay.Constant][106]);
  %1686 = less(meta[relay.Constant][106], %1685);
  %1687 = shape_of(%1684, dtype="int32");
  %1688 = cast_like(%1687, meta[relay.Constant][106]);
  %1689 = add(meta[relay.Constant][106], %1688);
  %1690 = where(%1686, %1689, meta[relay.Constant][106]);
  %1691 = shape_of(%1684, dtype="int32");
  %1692 = cast(%1691, dtype="int64");
  %1693 = dyn.strided_slice(%1684, %1690, %1692, meta[relay.Constant][107], begin=None, end=None, strides=None);
  %1694 = cast_like(0, meta[relay.Constant][108]);
  %1695 = less(meta[relay.Constant][108], %1694);
  %1696 = shape_of(%1693, dtype="int32");
  %1697 = cast_like(%1696, meta[relay.Constant][108]);
  %1698 = add(meta[relay.Constant][108], %1697);
  %1699 = where(%1695, %1698, meta[relay.Constant][108]);
  %1700 = shape_of(%1693, dtype="int32");
  %1701 = cast(%1700, dtype="int64");
  %1702 = dyn.strided_slice(%1693, %1699, %1701, meta[relay.Constant][109], begin=None, end=None, strides=None);
  %1703 = reshape(%1702, newshape=[-1, 4]);
  %1704 = %1398.0;
  %1705 = nn.softmax(%1704);
  %1706 = (%1705,);
  %1707 = %1706.0;
  %1708 = cast_like(0, meta[relay.Constant][110]);
  %1709 = less(meta[relay.Constant][110], %1708);
  %1710 = shape_of(%1707, dtype="int32");
  %1711 = cast_like(%1710, meta[relay.Constant][110]);
  %1712 = add(meta[relay.Constant][110], %1711);
  %1713 = where(%1709, %1712, meta[relay.Constant][110]);
  %1714 = shape_of(%1707, dtype="int32");
  %1715 = cast(%1714, dtype="int64");
  %1716 = dyn.strided_slice(%1707, %1713, %1715, meta[relay.Constant][111], begin=None, end=None, strides=None);
  %1717 = cast_like(0, meta[relay.Constant][112]);
  %1718 = less(meta[relay.Constant][112], %1717);
  %1719 = shape_of(%1716, dtype="int32");
  %1720 = cast_like(%1719, meta[relay.Constant][112]);
  %1721 = add(meta[relay.Constant][112], %1720);
  %1722 = where(%1718, %1721, meta[relay.Constant][112]);
  %1723 = shape_of(%1716, dtype="int32");
  %1724 = cast(%1723, dtype="int64");
  %1725 = dyn.strided_slice(%1716, %1722, %1724, meta[relay.Constant][113], begin=None, end=None, strides=None);
  %1726 = reshape(%1725, newshape=[-1]);
  %1727 = greater(%1726, 0.05f);
  %1728 = argwhere(%1727);
  %1729 = split(%1728, indices_or_sections=1, axis=1);
  %1730 = %1729.0;
  %1731 = squeeze(%1730, axis=[1]);
  %1732 = (%1731,);
  %1733 = %1732.0;
  %1734 = cast(%1733, dtype="int64");
  %1735 = (%1703, %1734);
  %1736 = adv_index(%1735);
  %1737 = cast_like(0, meta[relay.Constant][114]);
  %1738 = less(meta[relay.Constant][114], %1737);
  %1739 = shape_of(%1736, dtype="int32");
  %1740 = cast_like(%1739, meta[relay.Constant][114]);
  %1741 = add(meta[relay.Constant][114], %1740);
  %1742 = where(%1738, %1741, meta[relay.Constant][114]);
  %1743 = shape_of(%1736, dtype="int32");
  %1744 = cast(%1743, dtype="int64");
  %1745 = dyn.strided_slice(%1736, %1742, %1744, meta[relay.Constant][115], begin=None, end=None, strides=None);
  %1746 = take(%1745, 2, axis=1);
  %1747 = cast_like(0, meta[relay.Constant][116]);
  %1748 = less(meta[relay.Constant][116], %1747);
  %1749 = shape_of(%1736, dtype="int32");
  %1750 = cast_like(%1749, meta[relay.Constant][116]);
  %1751 = add(meta[relay.Constant][116], %1750);
  %1752 = where(%1748, %1751, meta[relay.Constant][116]);
  %1753 = shape_of(%1736, dtype="int32");
  %1754 = cast(%1753, dtype="int64");
  %1755 = dyn.strided_slice(%1736, %1752, %1754, meta[relay.Constant][117], begin=None, end=None, strides=None);
  %1756 = take(%1755, 0, axis=1);
  %1757 = subtract(%1746, %1756);
  %1758 = greater_equal(%1757, 0.01f);
  %1759 = cast(%1758, dtype="bool");
  %1760 = cast_like(0, meta[relay.Constant][118]);
  %1761 = less(meta[relay.Constant][118], %1760);
  %1762 = shape_of(%1736, dtype="int32");
  %1763 = cast_like(%1762, meta[relay.Constant][118]);
  %1764 = add(meta[relay.Constant][118], %1763);
  %1765 = where(%1761, %1764, meta[relay.Constant][118]);
  %1766 = shape_of(%1736, dtype="int32");
  %1767 = cast(%1766, dtype="int64");
  %1768 = dyn.strided_slice(%1736, %1765, %1767, meta[relay.Constant][119], begin=None, end=None, strides=None);
  %1769 = take(%1768, 3, axis=1);
  %1770 = cast_like(0, meta[relay.Constant][120]);
  %1771 = less(meta[relay.Constant][120], %1770);
  %1772 = shape_of(%1736, dtype="int32");
  %1773 = cast_like(%1772, meta[relay.Constant][120]);
  %1774 = add(meta[relay.Constant][120], %1773);
  %1775 = where(%1771, %1774, meta[relay.Constant][120]);
  %1776 = shape_of(%1736, dtype="int32");
  %1777 = cast(%1776, dtype="int64");
  %1778 = dyn.strided_slice(%1736, %1775, %1777, meta[relay.Constant][121], begin=None, end=None, strides=None);
  %1779 = take(%1778, 1, axis=1);
  %1780 = subtract(%1769, %1779);
  %1781 = greater_equal(%1780, 0.01f);
  %1782 = cast(%1781, dtype="bool");
  %1783 = logical_and(%1759, %1782);
  %1784 = argwhere(%1783);
  %1785 = split(%1784, indices_or_sections=1, axis=1);
  %1786 = %1785.0;
  %1787 = squeeze(%1786, axis=[1]);
  %1788 = (%1787,);
  %1789 = %1788.0;
  %1790 = cast(%1789, dtype="int64");
  %1791 = (%1736, %1790);
  %1792 = adv_index(%1791);
  %1793 = ndarray_size(%1792, dtype="int32");
  %1794 = equal(%1793, 0);
  %1864 = if (%1794) {
    zeros(shape=[0], dtype="int64")
  } else {
    %1795 = (%1726, %1734);
    %1796 = adv_index(%1795);
    %1797 = (%1796, %1790);
    %1798 = adv_index(%1797);
    %1799 = min(%1798);
    %1800 = subtract(%1798, %1799);
    %1801 = add(%1800, 1f);
    %1802 = expand_dims(%1801, axis=-1);
    %1803 = arange(0, 91, 1, start=meta[relay.Constant][122], stop=meta[relay.Constant][123], step=meta[relay.Constant][124], dtype="int64");
    %1804 = reshape(%1803, newshape=[1, -1]);
    %1805 = cast(%1707, dtype="int64");
    %1806 = broadcast_to_like(%1804, %1805);
    %1807 = cast_like(0, meta[relay.Constant][125]);
    %1808 = less(meta[relay.Constant][125], %1807);
    %1809 = shape_of(%1806, dtype="int32");
    %1810 = cast_like(%1809, meta[relay.Constant][125]);
    %1811 = add(meta[relay.Constant][125], %1810);
    %1812 = where(%1808, %1811, meta[relay.Constant][125]);
    %1813 = shape_of(%1806, dtype="int32");
    %1814 = cast(%1813, dtype="int64");
    %1815 = dyn.strided_slice(%1806, %1812, %1814, meta[relay.Constant][126], begin=None, end=None, strides=None);
    %1816 = cast_like(0, meta[relay.Constant][127]);
    %1817 = less(meta[relay.Constant][127], %1816);
    %1818 = shape_of(%1815, dtype="int32");
    %1819 = cast_like(%1818, meta[relay.Constant][127]);
    %1820 = add(meta[relay.Constant][127], %1819);
    %1821 = where(%1817, %1820, meta[relay.Constant][127]);
    %1822 = shape_of(%1815, dtype="int32");
    %1823 = cast(%1822, dtype="int64");
    %1824 = dyn.strided_slice(%1815, %1821, %1823, meta[relay.Constant][128], begin=None, end=None, strides=None);
    %1825 = reshape(%1824, newshape=[-1]);
    %1826 = (%1825, %1734);
    %1827 = adv_index(%1826);
    %1828 = (%1827, %1790);
    %1829 = adv_index(%1828);
    %1830 = cast(%1829, dtype="float32");
    %1831 = max(%1792);
    %1832 = add(%1831, 1f);
    %1833 = multiply(%1830, %1832);
    %1834 = cast_like(0, meta[relay.Constant][129]);
    %1835 = less(meta[relay.Constant][129], %1834);
    %1836 = shape_of(%1833, dtype="int32");
    %1837 = cast_like(%1836, meta[relay.Constant][129]);
    %1838 = add(meta[relay.Constant][129], %1837);
    %1839 = where(%1835, %1838, meta[relay.Constant][129]);
    %1840 = shape_of(%1833, dtype="int32");
    %1841 = cast(%1840, dtype="int64");
    %1842 = dyn.strided_slice(%1833, %1839, %1841, meta[relay.Constant][130], begin=None, end=None, strides=None);
    %1843 = expand_dims(%1842, axis=1);
    %1844 = add(%1792, %1843);
    %1845 = (%1802, %1844);
    %1846 = concatenate(%1845, axis=-1);
    %1847 = expand_dims(%1846, axis=0);

    %1848 = shape_of(%1801, dtype="int32");
    %1849 = squeeze(%1848);
    %1850 = arange(0, %1849, 1, start=meta[relay.Constant][131], stop=meta[relay.Call][1], step=meta[relay.Constant][132], dtype="int32");
    %1851 = expand_dims(%1850, axis=0);

    %1852 = vision.non_max_suppression(%1847, %1848, %1851, -1, 0.5f, meta[relay.attrs.NonMaximumSuppressionAttrs][1]);
    %1853 = %1852.0;
    %1854 = squeeze(%1853, axis=[0]);
    %1855 = cast_like(0, meta[relay.Constant][133]);
    %1856 = less(meta[relay.Constant][133], %1855);
    %1857 = shape_of(%1854, dtype="int32");
    %1858 = cast_like(%1857, meta[relay.Constant][133]);
    %1859 = add(meta[relay.Constant][133], %1858);
    %1860 = where(%1856, %1859, meta[relay.Constant][133]);
    %1861 = %1852.1;
    %1862 = squeeze(%1861, axis=[1]);
    %1863 = dyn.strided_slice(%1854, %1860, %1862, meta[relay.Constant][134], begin=None, end=None, strides=None, slice_mode="size");
    cast(%1863, dtype="int64")
  };
  %1865 = strided_slice(%1864, begin=[0], end=[100], strides=[1]);
  %1866 = (%1792, %1865);
  %1867 = adv_index(%1866);
  %1868 = cast_like(0, meta[relay.Constant][135]);
  %1869 = less(meta[relay.Constant][135], %1868);
  %1870 = shape_of(%1867, dtype="int32");
  %1871 = cast_like(%1870, meta[relay.Constant][135]);
  %1872 = add(meta[relay.Constant][135], %1871);
  %1873 = where(%1869, %1872, meta[relay.Constant][135]);
  %1874 = shape_of(%1867, dtype="int32");
  %1875 = cast(%1874, dtype="int64");
  %1876 = dyn.strided_slice(%1867, %1873, %1875, meta[relay.Constant][136], begin=None, end=None, strides=None);
  %1877 = take(%1876, 2, axis=1);
  %1878 = cast_like(0, meta[relay.Constant][137]);
  %1879 = less(meta[relay.Constant][137], %1878);
  %1880 = shape_of(%1867, dtype="int32");
  %1881 = cast_like(%1880, meta[relay.Constant][137]);
  %1882 = add(meta[relay.Constant][137], %1881);
  %1883 = where(%1879, %1882, meta[relay.Constant][137]);
  %1884 = shape_of(%1867, dtype="int32");
  %1885 = cast(%1884, dtype="int64");
  %1886 = dyn.strided_slice(%1867, %1883, %1885, meta[relay.Constant][138], begin=None, end=None, strides=None);
  %1887 = take(%1886, 0, axis=1);
  %1888 = subtract(%1877, %1887);
  %1889 = cast_like(0, meta[relay.Constant][139]);
  %1890 = less(meta[relay.Constant][139], %1889);
  %1891 = shape_of(%1867, dtype="int32");
  %1892 = cast_like(%1891, meta[relay.Constant][139]);
  %1893 = add(meta[relay.Constant][139], %1892);
  %1894 = where(%1890, %1893, meta[relay.Constant][139]);
  %1895 = shape_of(%1867, dtype="int32");
  %1896 = cast(%1895, dtype="int64");
  %1897 = dyn.strided_slice(%1867, %1894, %1896, meta[relay.Constant][140], begin=None, end=None, strides=None);
  %1898 = take(%1897, 3, axis=1);
  %1899 = cast_like(0, meta[relay.Constant][141]);
  %1900 = less(meta[relay.Constant][141], %1899);
  %1901 = shape_of(%1867, dtype="int32");
  %1902 = cast_like(%1901, meta[relay.Constant][141]);
  %1903 = add(meta[relay.Constant][141], %1902);
  %1904 = where(%1900, %1903, meta[relay.Constant][141]);
  %1905 = shape_of(%1867, dtype="int32");
  %1906 = cast(%1905, dtype="int64");
  %1907 = dyn.strided_slice(%1867, %1904, %1906, meta[relay.Constant][142], begin=None, end=None, strides=None);
  %1908 = take(%1907, 1, axis=1);
  %1909 = subtract(%1898, %1908);
  %1910 = multiply(%1888, %1909);
  %1911 = (%1910,);
  %1912 = concatenate(%1911);
  %1913 = sqrt(%1912);
  %1914 = divide(%1913, 224f);
  %1915 = log2(%1914);
  %1916 = add(%1915, 4f);
  %1917 = add(%1916, 1e-06f);
  %1918 = floor(%1917);
  %1919 = clip(%1918, a_min=2f, a_max=5f);
  %1920 = cast(%1919, dtype="int64");
  %1921 = subtract(%1920, 2);
  %1922 = shape_of(%1921, dtype="int32");
  %1923 = take(%1922, 0, axis=0);
  %1924 = expand_dims(%1923, axis=0);
  %1925 = cast(%1924, dtype="int64");
  %1926 = expand_dims(256, axis=0);
  %1927 = cast(%1926, dtype="int64");
  %1928 = expand_dims(14, axis=0);
  %1929 = cast(%1928, dtype="int64");
  %1930 = expand_dims(14, axis=0);
  %1931 = cast(%1930, dtype="int64");
  %1932 = (%1925, %1927, %1929, %1931);
  %1933 = concatenate(%1932);
  %1934 = dyn.full(0, %1933, shape=None, dtype="float32");
  %1935 = reshape(%1934, newshape=[0, 256, 14, 14]);
  %1936 = equal(%1921, 0);
  %1937 = argwhere(%1936);
  %1938 = split(%1937, indices_or_sections=1, axis=1);
  %1939 = %1938.0;
  %1940 = squeeze(%1939, axis=[1]);
  %1941 = (%1940,);
  %1942 = %1941.0;
  %1943 = reshape(%1942, newshape=[-1, 1, 1, 1]);
  %1944 = repeat(%1943, repeats=256, axis=1);
  %1945 = repeat(%1944, repeats=14, axis=2);
  %1946 = repeat(%1945, repeats=14, axis=3);
  %1947 = cast_like(0, meta[relay.Constant][143]);
  %1948 = less(meta[relay.Constant][143], %1947);
  %1949 = shape_of(%1867, dtype="int32");
  %1950 = cast_like(%1949, meta[relay.Constant][143]);
  %1951 = add(meta[relay.Constant][143], %1950);
  %1952 = where(%1948, %1951, meta[relay.Constant][143]);
  %1953 = shape_of(%1867, dtype="int32");
  %1954 = cast(%1953, dtype="int64");
  %1955 = dyn.strided_slice(%1867, %1952, %1954, meta[relay.Constant][144], begin=None, end=None, strides=None);
  %1956 = cast_like(0, meta[relay.Constant][145]);
  %1957 = less(meta[relay.Constant][145], %1956);
  %1958 = shape_of(%1955, dtype="int32");
  %1959 = cast_like(%1958, meta[relay.Constant][145]);
  %1960 = add(meta[relay.Constant][145], %1959);
  %1961 = where(%1957, %1960, meta[relay.Constant][145]);
  %1962 = shape_of(%1955, dtype="int32");
  %1963 = expand_dims(1, axis=0);
  %1964 = expand_dims(1, axis=0);
  %1965 = scatter(%1962, %1963, %1964, meta[relay.attrs.ScatterAttrs][5]);
  %1966 = cast(%1965, dtype="int64");
  %1967 = dyn.strided_slice(%1955, %1961, %1966, meta[relay.Constant][146], begin=None, end=None, strides=None);
  %1968 = full_like(%1967, 0);
  %1969 = (%1968,);
  %1970 = concatenate(%1969);
  %1971 = (%1867,);
  %1972 = concatenate(%1971);
  %1973 = (%1970, %1972);
  %1974 = concatenate(%1973, axis=1);
  %1975 = equal(%1921, 0);
  %1976 = argwhere(%1975);
  %1977 = split(%1976, indices_or_sections=1, axis=1);
  %1978 = %1977.0;
  %1979 = squeeze(%1978, axis=[1]);
  %1980 = (%1979,);
  %1981 = %1980.0;
  %1982 = cast(%1981, dtype="int64");
  %1983 = (%1974, %1982);
  %1984 = adv_index(%1983);
  %1985 = vision.roi_align(%764, %1984, meta[relay.attrs.ROIAlignAttrs][4]);
  %1986 = scatter(%1935, %1946, %1985, meta[relay.attrs.ScatterAttrs][6]);
  %1987 = equal(%1921, 1);
  %1988 = argwhere(%1987);
  %1989 = split(%1988, indices_or_sections=1, axis=1);
  %1990 = %1989.0;
  %1991 = squeeze(%1990, axis=[1]);
  %1992 = (%1991,);
  %1993 = %1992.0;
  %1994 = reshape(%1993, newshape=[-1, 1, 1, 1]);
  %1995 = repeat(%1994, repeats=256, axis=1);
  %1996 = repeat(%1995, repeats=14, axis=2);
  %1997 = repeat(%1996, repeats=14, axis=3);
  %1998 = equal(%1921, 1);
  %1999 = argwhere(%1998);
  %2000 = split(%1999, indices_or_sections=1, axis=1);
  %2001 = %2000.0;
  %2002 = squeeze(%2001, axis=[1]);
  %2003 = (%2002,);
  %2004 = %2003.0;
  %2005 = cast(%2004, dtype="int64");
  %2006 = (%1974, %2005);
  %2007 = adv_index(%2006);
  %2008 = vision.roi_align(%770, %2007, meta[relay.attrs.ROIAlignAttrs][5]);
  %2009 = scatter(%1986, %1997, %2008, meta[relay.attrs.ScatterAttrs][7]);
  %2010 = equal(%1921, 2);
  %2011 = argwhere(%2010);
  %2012 = split(%2011, indices_or_sections=1, axis=1);
  %2013 = %2012.0;
  %2014 = squeeze(%2013, axis=[1]);
  %2015 = (%2014,);
  %2016 = %2015.0;
  %2017 = reshape(%2016, newshape=[-1, 1, 1, 1]);
  %2018 = repeat(%2017, repeats=256, axis=1);
  %2019 = repeat(%2018, repeats=14, axis=2);
  %2020 = repeat(%2019, repeats=14, axis=3);
  %2021 = equal(%1921, 2);
  %2022 = argwhere(%2021);
  %2023 = split(%2022, indices_or_sections=1, axis=1);
  %2024 = %2023.0;
  %2025 = squeeze(%2024, axis=[1]);
  %2026 = (%2025,);
  %2027 = %2026.0;
  %2028 = cast(%2027, dtype="int64");
  %2029 = (%1974, %2028);
  %2030 = adv_index(%2029);
  %2031 = vision.roi_align(%776, %2030, meta[relay.attrs.ROIAlignAttrs][6]);
  %2032 = scatter(%2009, %2020, %2031, meta[relay.attrs.ScatterAttrs][8]);
  %2033 = equal(%1921, 3);
  %2034 = argwhere(%2033);
  %2035 = split(%2034, indices_or_sections=1, axis=1);
  %2036 = %2035.0;
  %2037 = squeeze(%2036, axis=[1]);
  %2038 = (%2037,);
  %2039 = %2038.0;
  %2040 = reshape(%2039, newshape=[-1, 1, 1, 1]);
  %2041 = repeat(%2040, repeats=256, axis=1);
  %2042 = repeat(%2041, repeats=14, axis=2);
  %2043 = repeat(%2042, repeats=14, axis=3);
  %2044 = %763.10;
  %2045 = equal(%1921, 3);
  %2046 = argwhere(%2045);
  %2047 = split(%2046, indices_or_sections=1, axis=1);
  %2048 = %2047.0;
  %2049 = squeeze(%2048, axis=[1]);
  %2050 = (%2049,);
  %2051 = %2050.0;
  %2052 = cast(%2051, dtype="int64");
  %2053 = (%1974, %2052);
  %2054 = adv_index(%2053);
  %2055 = vision.roi_align(%2044, %2054, meta[relay.attrs.ROIAlignAttrs][7]);
  %2056 = scatter(%2032, %2043, %2055, meta[relay.attrs.ScatterAttrs][9]);
  %2057 = nn.conv2d(%2056, %model.roi_heads.mask_head.mask_fcn1.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2058 = nn.bias_add(%2057, %model.roi_heads.mask_head.mask_fcn1.bias);
  %2059 = nn.relu(%2058);
  %2060 = nn.conv2d(%2059, %model.roi_heads.mask_head.mask_fcn2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2061 = nn.bias_add(%2060, %model.roi_heads.mask_head.mask_fcn2.bias);
  %2062 = nn.relu(%2061);
  %2063 = nn.conv2d(%2062, %model.roi_heads.mask_head.mask_fcn3.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2064 = nn.bias_add(%2063, %model.roi_heads.mask_head.mask_fcn3.bias);
  %2065 = nn.relu(%2064);
  %2066 = nn.conv2d(%2065, %model.roi_heads.mask_head.mask_fcn4.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %2067 = nn.bias_add(%2066, %model.roi_heads.mask_head.mask_fcn4.bias);
  %2068 = nn.relu(%2067);
  %2069 = nn.conv2d_transpose(%2068, %model.roi_heads.mask_predictor.conv5_mask.weight, channels=256, kernel_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]);
  %2070 = nn.bias_add(%2069, %model.roi_heads.mask_predictor.conv5_mask.bias);
  %2071 = nn.relu(%2070);
  %2072 = nn.conv2d(%2071, %model.roi_heads.mask_predictor.mask_fcn_logits.weight, padding=[0, 0, 0, 0], channels=91, kernel_size=[1, 1]);
  %2073 = nn.bias_add(%2072, %model.roi_heads.mask_predictor.mask_fcn_logits.bias);
  %2074 = sigmoid(%2073);
  %2075 = shape_of(%2073, dtype="int32");
  %2076 = take(%2075, 0, axis=0);
  %2077 = cast(%2076, dtype="int64");
  %2078 = arange(0, %2077, 1, start=meta[relay.Constant][147], stop=meta[relay.Call][2], step=meta[relay.Constant][148], dtype="int64");
  %2079 = (%1829, %1865);
  %2080 = adv_index(%2079);
  %2081 = (%2080,);
  %2082 = concatenate(%2081);
  %2083 = (%2074, %2078, %2082);
  %2084 = adv_index(%2083);
  %2085 = cast_like(0, meta[relay.Constant][149]);
  %2086 = less(meta[relay.Constant][149], %2085);
  %2087 = shape_of(%2084, dtype="int32");
  %2088 = cast_like(%2087, meta[relay.Constant][149]);
  %2089 = add(meta[relay.Constant][149], %2088);
  %2090 = where(%2086, %2089, meta[relay.Constant][149]);
  %2091 = shape_of(%2084, dtype="int32");
  %2092 = cast(%2091, dtype="int64");
  %2093 = dyn.strided_slice(%2084, %2090, %2092, meta[relay.Constant][150], begin=None, end=None, strides=None);
  %2094 = expand_dims(%2093, axis=1);
  %2095 = (%2094,);
  %2096 = %2095.0;
  %2097 = (%1798, %1865);
  %2098 = adv_index(%2097);
  %2099 = (%1867, %2096, %2098, %2080);
  %2100 = %2099.0;
  %2101 = split(%2100, indices_or_sections=4, axis=1);
  %2102 = %2101.0;
  %2103 = squeeze(%2102, axis=[1]);
  %2104 = %2101.1;
  %2105 = squeeze(%2104, axis=[1]);
  %2106 = %2101.2;
  %2107 = squeeze(%2106, axis=[1]);
  %2108 = %2101.3;
  %2109 = squeeze(%2108, axis=[1]);
  %2110 = (%2103, %2105, %2107, %2109);
  %2111 = %2110.0;
  %2112 = cast(300, dtype="float32");
  %2113 = cast(%1081, dtype="float32");
  %2114 = divide(%2112, %2113);
  %2115 = multiply(%2111, %2114);
  %2116 = %2110.1;
  %2117 = cast(300, dtype="float32");
  %2118 = cast(%1086, dtype="float32");
  %2119 = divide(%2117, %2118);
  %2120 = multiply(%2116, %2119);
  %2121 = %2110.2;
  %2122 = multiply(%2121, %2114);
  %2123 = %2110.3;
  %2124 = multiply(%2123, %2119);
  %2125 = (%2115, %2120, %2122, %2124);
  %2126 = stack(%2125, axis=1);
  %2127 = %2099.2;
  %2128 = %2099.3;
  %2129 = full(0, shape=[0, 300, 300], dtype="float32");
  %2130 = %2099.1;
  %2131 = nn.pad(%2130, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]);
  %2132 = cast_like(0, meta[relay.Constant][151]);
  %2133 = less(meta[relay.Constant][151], %2132);
  %2134 = shape_of(%2126, dtype="int32");
  %2135 = cast_like(%2134, meta[relay.Constant][151]);
  %2136 = add(meta[relay.Constant][151], %2135);
  %2137 = where(%2133, %2136, meta[relay.Constant][151]);
  %2138 = shape_of(%2126, dtype="int32");
  %2139 = cast(%2138, dtype="int64");
  %2140 = dyn.strided_slice(%2126, %2137, %2139, meta[relay.Constant][152], begin=None, end=None, strides=None);
  %2141 = take(%2140, 2, axis=1);
  %2142 = cast_like(0, meta[relay.Constant][153]);
  %2143 = less(meta[relay.Constant][153], %2142);
  %2144 = shape_of(%2126, dtype="int32");
  %2145 = cast_like(%2144, meta[relay.Constant][153]);
  %2146 = add(meta[relay.Constant][153], %2145);
  %2147 = where(%2143, %2146, meta[relay.Constant][153]);
  %2148 = shape_of(%2126, dtype="int32");
  %2149 = cast(%2148, dtype="int64");
  %2150 = dyn.strided_slice(%2126, %2147, %2149, meta[relay.Constant][154], begin=None, end=None, strides=None);
  %2151 = take(%2150, 0, axis=1);
  %2152 = add(%2141, %2151);
  %2153 = multiply(%2152, 0.5f);
  %2154 = cast_like(0, meta[relay.Constant][155]);
  %2155 = less(meta[relay.Constant][155], %2154);
  %2156 = shape_of(%2126, dtype="int32");
  %2157 = cast_like(%2156, meta[relay.Constant][155]);
  %2158 = add(meta[relay.Constant][155], %2157);
  %2159 = where(%2155, %2158, meta[relay.Constant][155]);
  %2160 = shape_of(%2126, dtype="int32");
  %2161 = cast(%2160, dtype="int64");
  %2162 = dyn.strided_slice(%2126, %2159, %2161, meta[relay.Constant][156], begin=None, end=None, strides=None);
  %2163 = take(%2162, 2, axis=1);
  %2164 = cast_like(0, meta[relay.Constant][157]);
  %2165 = less(meta[relay.Constant][157], %2164);
  %2166 = shape_of(%2126, dtype="int32");
  %2167 = cast_like(%2166, meta[relay.Constant][157]);
  %2168 = add(meta[relay.Constant][157], %2167);
  %2169 = where(%2165, %2168, meta[relay.Constant][157]);
  %2170 = shape_of(%2126, dtype="int32");
  %2171 = cast(%2170, dtype="int64");
  %2172 = dyn.strided_slice(%2126, %2169, %2171, meta[relay.Constant][158], begin=None, end=None, strides=None);
  %2173 = take(%2172, 0, axis=1);
  %2174 = subtract(%2163, %2173);
  %2175 = multiply(%2174, 0.5f);
  %2176 = shape_of(%2130, dtype="int32");
  %2177 = take(%2176, 3, axis=0);
  %2178 = add(%2177, 2);
  %2179 = cast(%2178, dtype="int64");
  %2180 = cast(%2179, dtype="float32");
  %2181 = cast(%2177, dtype="int64");
  %2182 = cast(%2181, dtype="float32");
  %2183 = divide(%2180, %2182);
  %2184 = multiply(%2175, %2183);
  %2185 = subtract(%2153, %2184);
  %2186 = cast_like(0, meta[relay.Constant][159]);
  %2187 = less(meta[relay.Constant][159], %2186);
  %2188 = shape_of(%2126, dtype="int32");
  %2189 = cast_like(%2188, meta[relay.Constant][159]);
  %2190 = add(meta[relay.Constant][159], %2189);
  %2191 = where(%2187, %2190, meta[relay.Constant][159]);
  %2192 = shape_of(%2126, dtype="int32");
  %2193 = cast(%2192, dtype="int64");
  %2194 = dyn.strided_slice(%2126, %2191, %2193, meta[relay.Constant][160], begin=None, end=None, strides=None);
  %2195 = take(%2194, 3, axis=1);
  %2196 = cast_like(0, meta[relay.Constant][161]);
  %2197 = less(meta[relay.Constant][161], %2196);
  %2198 = shape_of(%2126, dtype="int32");
  %2199 = cast_like(%2198, meta[relay.Constant][161]);
  %2200 = add(meta[relay.Constant][161], %2199);
  %2201 = where(%2197, %2200, meta[relay.Constant][161]);
  %2202 = shape_of(%2126, dtype="int32");
  %2203 = cast(%2202, dtype="int64");
  %2204 = dyn.strided_slice(%2126, %2201, %2203, meta[relay.Constant][162], begin=None, end=None, strides=None);
  %2205 = take(%2204, 1, axis=1);
  %2206 = add(%2195, %2205);
  %2207 = multiply(%2206, 0.5f);
  %2208 = cast_like(0, meta[relay.Constant][163]);
  %2209 = less(meta[relay.Constant][163], %2208);
  %2210 = shape_of(%2126, dtype="int32");
  %2211 = cast_like(%2210, meta[relay.Constant][163]);
  %2212 = add(meta[relay.Constant][163], %2211);
  %2213 = where(%2209, %2212, meta[relay.Constant][163]);
  %2214 = shape_of(%2126, dtype="int32");
  %2215 = cast(%2214, dtype="int64");
  %2216 = dyn.strided_slice(%2126, %2213, %2215, meta[relay.Constant][164], begin=None, end=None, strides=None);
  %2217 = take(%2216, 3, axis=1);
  %2218 = cast_like(0, meta[relay.Constant][165]);
  %2219 = less(meta[relay.Constant][165], %2218);
  %2220 = shape_of(%2126, dtype="int32");
  %2221 = cast_like(%2220, meta[relay.Constant][165]);
  %2222 = add(meta[relay.Constant][165], %2221);
  %2223 = where(%2219, %2222, meta[relay.Constant][165]);
  %2224 = shape_of(%2126, dtype="int32");
  %2225 = cast(%2224, dtype="int64");
  %2226 = dyn.strided_slice(%2126, %2223, %2225, meta[relay.Constant][166], begin=None, end=None, strides=None);
  %2227 = take(%2226, 1, axis=1);
  %2228 = subtract(%2217, %2227);
  %2229 = multiply(%2228, 0.5f);
  %2230 = multiply(%2229, %2183);
  %2231 = subtract(%2207, %2230);
  %2232 = add(%2153, %2184);
  %2233 = add(%2207, %2230);
  %2234 = (%2185, %2231, %2232, %2233);
  %2235 = stack(%2234, axis=1);
  %2236 = cast(%2235, dtype="int64");

  %2427 = (
    let %while_loop = fn (%i.1: int32, %res_append.6: Tensor[(?, 300, 300), float32], %v7286: Tensor[(?, 1, ?, ?), float32], %v7394: Tensor[(?, 4), int64]) {
      %2237 = shape_of(%2131, dtype="int32");
      %2238 = take(%2237, 0, axis=0);
      %2239 = less(%i.1, %2238);
      if (%2239) {
        %2240 = add(%i.1, 1);
        %2241 = take(%v7394, %i.1, axis=0);
        %2242 = take(%2241, 1, axis=0);
        %2243 = expand_dims(%2242, axis=0);
        %2244 = full(0, shape=[1], dtype="int64");
        %2245 = (%2243, %2244);
        %2246 = concatenate(%2245);
        %2247 = max(%2246);
        %2248 = expand_dims(%2247, axis=0);
        %2249 = cast(%2248, dtype="int64");
        %2250 = take(%v7286, %i.1, axis=0);
        %2251 = take(%2250, 0, axis=0);
        %2252 = expand_dims(%2251, axis=0, num_newaxis=2);
        %2253 = repeat(%2252, repeats=1, axis=0);
        %2254 = repeat(%2253, repeats=1, axis=1);
        %2255 = take(%2241, 3, axis=0);
        %2256 = take(%2241, 1, axis=0);
        %2257 = subtract(%2255, %2256);
        %2258 = full(1, shape=[1], dtype="int64");
        %2259 = add(%2257, %2258);
        %2260 = (%2259, %2258);
        %2261 = concatenate(%2260);
        %2262 = max(%2261);
        %2263 = expand_dims(%2262, axis=0);
        %2264 = take(%2241, 2, axis=0);
        %2265 = take(%2241, 0, axis=0);
        %2266 = subtract(%2264, %2265);
        %2267 = add(%2266, %2258);
        %2268 = (%2267, %2258);
        %2269 = concatenate(%2268);
        %2270 = max(%2269);
        %2271 = expand_dims(%2270, axis=0);
        %2272 = (%2263, %2271);
        %2273 = concatenate(%2272);
        %2274 = dyn.image.resize(%2254, %2273, size=[]);
        %2275 = take(%2274, 0, axis=0);
        %2276 = take(%2275, 0, axis=0);
        %2277 = take(%2241, 1, axis=0);
        %2278 = subtract(%2247, %2277);
        %2279 = expand_dims(%2278, axis=0);
        %2280 = cast(%2279, dtype="int64");
        %2281 = expand_dims(0, axis=0);
        %2282 = (%2280, %2281);
        %2283 = concatenate(%2282);
        %2284 = cast_like(0, %2283);
        %2285 = less(%2283, %2284);
        %2286 = shape_of(%2276, dtype="int32");
        %2287 = cast_like(%2286, %2283);
        %2288 = add(%2283, %2287);
        %2289 = where(%2285, %2288, %2283);
        %2290 = shape_of(%2276, dtype="int32");
        %2291 = cast(%2290, dtype="int64");
        %2292 = expand_dims(0, axis=0);
        %2293 = take(%2241, 3, axis=0);
        %2294 = expand_dims(%2293, axis=0);
        %2295 = add(%2294, %2258);
        %2296 = expand_dims(300, axis=0);
        %2297 = (%2295, %2296);
        %2298 = concatenate(%2297);
        %2299 = min(%2298);
        %2300 = take(%2241, 1, axis=0);
        %2301 = subtract(%2299, %2300);
        %2302 = expand_dims(%2301, axis=0);
        %2303 = scatter(%2291, %2292, %2302, meta[relay.attrs.ScatterAttrs][10]);
        %2304 = dyn.strided_slice(%2276, %2289, %2303, meta[relay.Constant][167], begin=None, end=None, strides=None);
        %2305 = expand_dims(0, axis=0);
        %2306 = take(%2241, 0, axis=0);
        %2307 = expand_dims(%2306, axis=0);
        %2308 = (%2307, %2244);
        %2309 = concatenate(%2308);
        %2310 = max(%2309);
        %2311 = take(%2241, 0, axis=0);
        %2312 = subtract(%2310, %2311);
        %2313 = expand_dims(%2312, axis=0);
        %2314 = cast(%2313, dtype="int64");
        %2315 = (%2305, %2314);
        %2316 = concatenate(%2315);
        %2317 = cast_like(0, %2316);
        %2318 = less(%2316, %2317);
        %2319 = shape_of(%2304, dtype="int32");
        %2320 = cast_like(%2319, %2316);
        %2321 = add(%2316, %2320);
        %2322 = where(%2318, %2321, %2316);
        %2323 = shape_of(%2304, dtype="int32");
        %2324 = cast(%2323, dtype="int64");
        %2325 = expand_dims(1, axis=0);
        %2326 = take(%2241, 2, axis=0);
        %2327 = expand_dims(%2326, axis=0);
        %2328 = add(%2327, %2258);
        %2329 = expand_dims(300, axis=0);
        %2330 = (%2328, %2329);
        %2331 = concatenate(%2330);
        %2332 = min(%2331);
        %2333 = take(%2241, 0, axis=0);
        %2334 = subtract(%2332, %2333);
        %2335 = expand_dims(%2334, axis=0);
        %2336 = scatter(%2324, %2325, %2335, meta[relay.attrs.ScatterAttrs][11]);
        %2337 = dyn.strided_slice(%2304, %2322, %2336, meta[relay.Constant][168], begin=None, end=None, strides=None);
        %2338 = shape_of(%2337, dtype="int32");
        %2339 = take(%2338, 1, axis=0);
        %2340 = expand_dims(%2339, axis=0);
        %2341 = cast(%2340, dtype="int64");
        %2342 = (%2249, %2341);
        %2343 = concatenate(%2342);
        %2344 = dyn.full(0, %2343, shape=None, dtype="float32");
        %2345 = reshape(%2344, newshape=[0, 0]);
        %2346 = subtract(300, %2299);
        %2347 = expand_dims(%2346, axis=0);
        %2348 = cast(%2347, dtype="int64");
        %2349 = shape_of(%2337, dtype="int32");
        %2350 = take(%2349, 1, axis=0);
        %2351 = expand_dims(%2350, axis=0);
        %2352 = cast(%2351, dtype="int64");
        %2353 = (%2348, %2352);
        %2354 = concatenate(%2353);
        %2355 = dyn.full(0, %2354, shape=None, dtype="float32");
        %2356 = reshape(%2355, newshape=[0, 0]);
        %2357 = (%2345, %2337, %2356);
        %2358 = concatenate(%2357);
        %2359 = cast_like(0, meta[relay.Constant][169]);
        %2360 = less(meta[relay.Constant][169], %2359);
        %2361 = shape_of(%2358, dtype="int32");
        %2362 = cast_like(%2361, meta[relay.Constant][169]);
        %2363 = add(meta[relay.Constant][169], %2362);
        %2364 = where(%2360, %2363, meta[relay.Constant][169]);
        %2365 = shape_of(%2358, dtype="int32");
        %2366 = expand_dims(0, axis=0);
        %2367 = expand_dims(300, axis=0);
        %2368 = scatter(%2365, %2366, %2367, meta[relay.attrs.ScatterAttrs][12]);
        %2369 = cast(%2368, dtype="int64");
        %2370 = dyn.strided_slice(%2358, %2364, %2369, meta[relay.Constant][170], begin=None, end=None, strides=None);
        %2371 = cast_like(0, meta[relay.Constant][171]);
        %2372 = less(meta[relay.Constant][171], %2371);
        %2373 = shape_of(%2370, dtype="int32");
        %2374 = cast_like(%2373, meta[relay.Constant][171]);
        %2375 = add(meta[relay.Constant][171], %2374);
        %2376 = where(%2372, %2375, meta[relay.Constant][171]);
        %2377 = shape_of(%2370, dtype="int32");
        %2378 = cast(%2377, dtype="int64");
        %2379 = dyn.strided_slice(%2370, %2376, %2378, meta[relay.Constant][172], begin=None, end=None, strides=None);
        %2380 = shape_of(%2379, dtype="int32");
        %2381 = take(%2380, 0, axis=0);
        %2382 = expand_dims(%2381, axis=0);
        %2383 = cast(%2382, dtype="int64");
        %2384 = expand_dims(%2310, axis=0);
        %2385 = cast(%2384, dtype="int64");
        %2386 = (%2383, %2385);
        %2387 = concatenate(%2386);
        %2388 = dyn.full(0, %2387, shape=None, dtype="float32");
        %2389 = reshape(%2388, newshape=[0, 0]);
        %2390 = shape_of(%2379, dtype="int32");
        %2391 = take(%2390, 0, axis=0);
        %2392 = expand_dims(%2391, axis=0);
        %2393 = cast(%2392, dtype="int64");
        %2394 = subtract(300, %2332);
        %2395 = expand_dims(%2394, axis=0);
        %2396 = cast(%2395, dtype="int64");
        %2397 = (%2393, %2396);
        %2398 = concatenate(%2397);
        %2399 = dyn.full(0, %2398, shape=None, dtype="float32");
        %2400 = reshape(%2399, newshape=[0, 0]);
        %2401 = (%2389, %2379, %2400);
        %2402 = concatenate(%2401, axis=1);
        %2403 = cast_like(0, meta[relay.Constant][173]);
        %2404 = less(meta[relay.Constant][173], %2403);
        %2405 = shape_of(%2402, dtype="int32");
        %2406 = cast_like(%2405, meta[relay.Constant][173]);
        %2407 = add(meta[relay.Constant][173], %2406);
        %2408 = where(%2404, %2407, meta[relay.Constant][173]);
        %2409 = shape_of(%2402, dtype="int32");
        %2410 = cast(%2409, dtype="int64");
        %2411 = dyn.strided_slice(%2402, %2408, %2410, meta[relay.Constant][174], begin=None, end=None, strides=None);
        %2412 = cast_like(0, meta[relay.Constant][175]);
        %2413 = less(meta[relay.Constant][175], %2412);
        %2414 = shape_of(%2411, dtype="int32");
        %2415 = cast_like(%2414, meta[relay.Constant][175]);
        %2416 = add(meta[relay.Constant][175], %2415);
        %2417 = where(%2413, %2416, meta[relay.Constant][175]);
        %2418 = shape_of(%2411, dtype="int32");
        %2419 = expand_dims(1, axis=0);
        %2420 = expand_dims(300, axis=0);
        %2421 = scatter(%2418, %2419, %2420, meta[relay.attrs.ScatterAttrs][13]);
        %2422 = cast(%2421, dtype="int64");
        %2423 = dyn.strided_slice(%2411, %2417, %2422, meta[relay.Constant][176], begin=None, end=None, strides=None);

        %2424 = expand_dims(%2423, axis=0);
        %2425 = (%res_append.6, %2424);
        %2426 = concatenate(%2425);

        %while_loop(%2240, %2426, %v7286, %v7394)
      } else {
        (%i.1, %res_append.6, %v7286, %v7394)
      }
    };
    %while_loop
  );
  %2428 = %2427(0, %2129, %2131, %2236);
  %2429 = %2428.1;

  %2430 = cast_like(0, meta[relay.Constant][177]);
  %2431 = less(meta[relay.Constant][177], %2430);
  %2432 = shape_of(%2429, dtype="int32");
  %2433 = cast_like(%2432, meta[relay.Constant][177]);
  %2434 = add(meta[relay.Constant][177], %2433);
  %2435 = where(%2431, %2434, meta[relay.Constant][177]);
  %2436 = shape_of(%2429, dtype="int32");
  %2437 = cast(%2436, dtype="int64");
  %2438 = dyn.strided_slice(%2429, %2435, %2437, meta[relay.Constant][178], begin=None, end=None, strides=None);
  %2439 = expand_dims(%2438, axis=1);
  %2440 = (%2126, %2127, %2128, %2439);
  %2441 = %2440.0;
  %2442 = %2440.1;
  %2443 = %2440.2;
  %2444 = %2440.3;
  (%2441, %2442, %2443, %2444)
}
