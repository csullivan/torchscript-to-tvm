File test_street_small.jpg exists, skip.
scores.shape torch.Size([4507])
scores.shape torch.Size([4507])
scores.shape torch.Size([4507])
scores.shape torch.Size([4507])
type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type List[A] {
  Cons(A, List[A]),
  Nil,
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type Option[A] {
  Some(A),
  None,
}

def @main(%input0: Tensor[(1, 3, 150, 150), float32], %model.backbone.body.conv1.weight: Tensor[(64, 3, 7, 7), float32], %model.backbone.body.bn1.weight: Tensor[(64), float32], %model.backbone.body.bn1.running_var: Tensor[(64), float32], %model.backbone.body.bn1.bias: Tensor[(64), float32], %model.backbone.body.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.0.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.downsample.1.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.1.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.1.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.1.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.2.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.2.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.2.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32], %model.backbone.body.layer2.0.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.0.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.0.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %model.backbone.body.layer2.0.downsample.1.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.1.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.1.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.1.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.2.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.2.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.2.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.3.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.3.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.3.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.body.layer3.0.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.0.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.0.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32], %model.backbone.body.layer3.0.downsample.1.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.1.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.1.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.1.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.2.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.2.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.2.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.3.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.3.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.3.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.4.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.4.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.4.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.5.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.5.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.5.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32], %model.backbone.body.layer4.0.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.0.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.0.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32], %model.backbone.body.layer4.0.downsample.1.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.1.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.1.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.1.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.2.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.2.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.2.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_mean: Tensor[(2048), float32], %model.backbone.fpn.inner_blocks.0.weight: Tensor[(256, 256, 1, 1), float32], %model.backbone.fpn.inner_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.fpn.inner_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.2.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.fpn.inner_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.3.weight: Tensor[(256, 2048, 1, 1), float32], %model.backbone.fpn.inner_blocks.3.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.0.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.1.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.3.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.3.bias: Tensor[(256), float32], %model.rpn.head.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.rpn.head.conv.bias: Tensor[(256), float32], %model.rpn.head.cls_logits.weight: Tensor[(3, 256, 1, 1), float32], %model.rpn.head.cls_logits.bias: Tensor[(3), float32], %model.rpn.head.bbox_pred.weight: Tensor[(12, 256, 1, 1), float32], %model.rpn.head.bbox_pred.bias: Tensor[(12), float32], %model.roi_heads.box_head.fc6.weight: Tensor[(1024, 12544), float32], %model.roi_heads.box_head.fc6.bias: Tensor[(1024), float32], %model.roi_heads.box_head.fc7.weight: Tensor[(1024, 1024), float32], %model.roi_heads.box_head.fc7.bias: Tensor[(1024), float32], %model.roi_heads.box_predictor.cls_score.weight: Tensor[(91, 1024), float32], %model.roi_heads.box_predictor.cls_score.bias: Tensor[(91), float32], %model.roi_heads.box_predictor.bbox_pred.weight: Tensor[(364, 1024), float32], %model.roi_heads.box_predictor.bbox_pred.bias: Tensor[(364), float32], %model.roi_heads.mask_head.mask_fcn1.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn1.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn2.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn2.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn3.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn3.bias: Tensor[(256), float32], %model.roi_heads.mask_head.mask_fcn4.weight: Tensor[(256, 256, 3, 3), float32], %model.roi_heads.mask_head.mask_fcn4.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.conv5_mask.weight: Tensor[(256, 256, 2, 2), float32], %model.roi_heads.mask_predictor.conv5_mask.bias: Tensor[(256), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.weight: Tensor[(91, 256, 1, 1), float32], %model.roi_heads.mask_predictor.mask_fcn_logits.bias: Tensor[(91), float32]) -> (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64], Tensor[(?, 1, 150, 150), float32]) {
  %0 = split(%input0, indices_or_sections=1) /* ty=(Tensor[(1, 3, 150, 150), float32],) */;
  %1 = %0.0;
  %2 = squeeze(%1, axis=[0]) /* ty=Tensor[(3, 150, 150), float32] */;
  %3 = expand_dims(meta[relay.Constant][0] /* ty=Tensor[(3), float32] */, axis=1) /* ty=Tensor[(3, 1), float32] */;
  %4 = expand_dims(%3, axis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %5 = subtract(%2, %4) /* ty=Tensor[(3, 150, 150), float32] */;
  %6 = expand_dims(meta[relay.Constant][1] /* ty=Tensor[(3), float32] */, axis=1) /* ty=Tensor[(3, 1), float32] */;
  %7 = expand_dims(%6, axis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %8 = divide(%5, %7) /* ty=Tensor[(3, 150, 150), float32] */;
  %9 = expand_dims(%8, axis=0) /* ty=Tensor[(1, 3, 150, 150), float32] */;
  %10 = image.resize(%9, size=[800, 800]) /* ty=Tensor[(1, 3, 800, 800), float32] */;
  %11 = take(%10, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(3, 800, 800), float32] */;
  %12 = nn.pad(%11, pad_width=[[0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(3, 800, 800), float32] */;
  %13 = (%12,);
  %14 = stack(%13) /* ty=Tensor[(1, 3, 800, 800), float32] */;
  %15 = layout_transform(%14, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 800, 800, 3), float32] */;
  %16 = layout_transform(%model.backbone.body.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(7, 7, 3, 64), float32] */;
  %17 = nn.conv2d(%15, %16, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 400, 400, 64), float32] */;
  %18 = reshape(%model.backbone.body.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %19 = reshape(%model.backbone.body.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %20 = add(%19, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %21 = rsqrt(%20) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %22 = multiply(%18, %21) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %23 = layout_transform(%22, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %24 = multiply(%17, %23) /* ty=Tensor[(1, 400, 400, 64), float32] */;
  %25 = reshape(%model.backbone.body.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %26 = reshape(%model.backbone.body.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %27 = multiply(%26, %22) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %28 = subtract(%25, %27) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %29 = layout_transform(%28, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %30 = add(%24, %29) /* ty=Tensor[(1, 400, 400, 64), float32] */;
  %31 = nn.relu(%30) /* ty=Tensor[(1, 400, 400, 64), float32] */;
  %32 = nn.max_pool2d(%31, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1], layout="NHWC") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %33 = layout_transform(%model.backbone.body.layer1.0.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 64), float32] */;
  %34 = nn.conv2d(%32, %33, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %35 = reshape(%model.backbone.body.layer1.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %36 = reshape(%model.backbone.body.layer1.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %37 = add(%36, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %38 = rsqrt(%37) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %39 = multiply(%35, %38) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %40 = layout_transform(%39, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %41 = multiply(%34, %40) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %42 = reshape(%model.backbone.body.layer1.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %43 = reshape(%model.backbone.body.layer1.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %44 = multiply(%43, %39) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %45 = subtract(%42, %44) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %46 = layout_transform(%45, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %47 = add(%41, %46) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %48 = nn.relu(%47) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %49 = layout_transform(%model.backbone.body.layer1.0.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 64, 64), float32] */;
  %50 = nn.conv2d(%48, %49, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %51 = reshape(%model.backbone.body.layer1.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %52 = reshape(%model.backbone.body.layer1.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %53 = add(%52, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %54 = rsqrt(%53) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %55 = multiply(%51, %54) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %56 = layout_transform(%55, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %57 = multiply(%50, %56) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %58 = reshape(%model.backbone.body.layer1.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %59 = reshape(%model.backbone.body.layer1.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %60 = multiply(%59, %55) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %61 = subtract(%58, %60) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %62 = layout_transform(%61, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %63 = add(%57, %62) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %64 = nn.relu(%63) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %65 = layout_transform(%model.backbone.body.layer1.0.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float32] */;
  %66 = nn.conv2d(%64, %65, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %67 = reshape(%model.backbone.body.layer1.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %68 = reshape(%model.backbone.body.layer1.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %69 = add(%68, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %70 = rsqrt(%69) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %71 = multiply(%67, %70) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %72 = layout_transform(%71, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %73 = multiply(%66, %72) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %74 = reshape(%model.backbone.body.layer1.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %75 = reshape(%model.backbone.body.layer1.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %76 = multiply(%75, %71) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %77 = subtract(%74, %76) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %78 = layout_transform(%77, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %79 = add(%73, %78) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %80 = layout_transform(%model.backbone.body.layer1.0.downsample.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float32] */;
  %81 = nn.conv2d(%32, %80, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %82 = reshape(%model.backbone.body.layer1.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %83 = reshape(%model.backbone.body.layer1.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %84 = add(%83, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %85 = rsqrt(%84) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %86 = multiply(%82, %85) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %87 = layout_transform(%86, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %88 = multiply(%81, %87) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %89 = reshape(%model.backbone.body.layer1.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %90 = reshape(%model.backbone.body.layer1.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %91 = multiply(%90, %86) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %92 = subtract(%89, %91) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %93 = layout_transform(%92, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %94 = add(%88, %93) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %95 = add(%79, %94) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %96 = nn.relu(%95) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %97 = layout_transform(%model.backbone.body.layer1.1.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 64), float32] */;
  %98 = nn.conv2d(%96, %97, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %99 = reshape(%model.backbone.body.layer1.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %100 = reshape(%model.backbone.body.layer1.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %101 = add(%100, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %102 = rsqrt(%101) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %103 = multiply(%99, %102) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %104 = layout_transform(%103, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %105 = multiply(%98, %104) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %106 = reshape(%model.backbone.body.layer1.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %107 = reshape(%model.backbone.body.layer1.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %108 = multiply(%107, %103) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %109 = subtract(%106, %108) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %110 = layout_transform(%109, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %111 = add(%105, %110) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %112 = nn.relu(%111) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %113 = layout_transform(%model.backbone.body.layer1.1.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 64, 64), float32] */;
  %114 = nn.conv2d(%112, %113, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %115 = reshape(%model.backbone.body.layer1.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %116 = reshape(%model.backbone.body.layer1.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %117 = add(%116, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %118 = rsqrt(%117) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %119 = multiply(%115, %118) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %120 = layout_transform(%119, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %121 = multiply(%114, %120) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %122 = reshape(%model.backbone.body.layer1.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %123 = reshape(%model.backbone.body.layer1.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %124 = multiply(%123, %119) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %125 = subtract(%122, %124) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %126 = layout_transform(%125, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %127 = add(%121, %126) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %128 = nn.relu(%127) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %129 = layout_transform(%model.backbone.body.layer1.1.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float32] */;
  %130 = nn.conv2d(%128, %129, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %131 = reshape(%model.backbone.body.layer1.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %132 = reshape(%model.backbone.body.layer1.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %133 = add(%132, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %134 = rsqrt(%133) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %135 = multiply(%131, %134) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %136 = layout_transform(%135, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %137 = multiply(%130, %136) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %138 = reshape(%model.backbone.body.layer1.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %139 = reshape(%model.backbone.body.layer1.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %140 = multiply(%139, %135) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %141 = subtract(%138, %140) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %142 = layout_transform(%141, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %143 = add(%137, %142) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %144 = add(%143, %96) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %145 = nn.relu(%144) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %146 = layout_transform(%model.backbone.body.layer1.2.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 64), float32] */;
  %147 = nn.conv2d(%145, %146, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %148 = reshape(%model.backbone.body.layer1.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %149 = reshape(%model.backbone.body.layer1.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %150 = add(%149, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %151 = rsqrt(%150) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %152 = multiply(%148, %151) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %153 = layout_transform(%152, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %154 = multiply(%147, %153) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %155 = reshape(%model.backbone.body.layer1.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %156 = reshape(%model.backbone.body.layer1.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %157 = multiply(%156, %152) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %158 = subtract(%155, %157) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %159 = layout_transform(%158, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %160 = add(%154, %159) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %161 = nn.relu(%160) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %162 = layout_transform(%model.backbone.body.layer1.2.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 64, 64), float32] */;
  %163 = nn.conv2d(%161, %162, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %164 = reshape(%model.backbone.body.layer1.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %165 = reshape(%model.backbone.body.layer1.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %166 = add(%165, 0f /* ty=float32 */) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %167 = rsqrt(%166) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %168 = multiply(%164, %167) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %169 = layout_transform(%168, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %170 = multiply(%163, %169) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %171 = reshape(%model.backbone.body.layer1.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %172 = reshape(%model.backbone.body.layer1.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %173 = multiply(%172, %168) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %174 = subtract(%171, %173) /* ty=Tensor[(1, 64, 1, 1), float32] */;
  %175 = layout_transform(%174, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 64), float32] */;
  %176 = add(%170, %175) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %177 = nn.relu(%176) /* ty=Tensor[(1, 200, 200, 64), float32] */;
  %178 = layout_transform(%model.backbone.body.layer1.2.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 64, 256), float32] */;
  %179 = nn.conv2d(%177, %178, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %180 = reshape(%model.backbone.body.layer1.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %181 = reshape(%model.backbone.body.layer1.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %182 = add(%181, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %183 = rsqrt(%182) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %184 = multiply(%180, %183) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %185 = layout_transform(%184, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %186 = multiply(%179, %185) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %187 = reshape(%model.backbone.body.layer1.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %188 = reshape(%model.backbone.body.layer1.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %189 = multiply(%188, %184) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %190 = subtract(%187, %189) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %191 = layout_transform(%190, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %192 = add(%186, %191) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %193 = add(%192, %145) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %194 = nn.relu(%193) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %195 = layout_transform(%model.backbone.fpn.inner_blocks.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 256), float32] */;
  %196 = nn.conv2d(%194, %195, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %197 = expand_dims(%model.backbone.fpn.inner_blocks.0.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %198 = expand_dims(%197, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %199 = layout_transform(%198, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %200 = add(%196, %199) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %201 = layout_transform(%model.backbone.body.layer2.0.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 128), float32] */;
  %202 = nn.conv2d(%194, %201, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 128), float32] */;
  %203 = reshape(%model.backbone.body.layer2.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %204 = reshape(%model.backbone.body.layer2.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %205 = add(%204, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %206 = rsqrt(%205) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %207 = multiply(%203, %206) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %208 = layout_transform(%207, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %209 = multiply(%202, %208) /* ty=Tensor[(1, 200, 200, 128), float32] */;
  %210 = reshape(%model.backbone.body.layer2.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %211 = reshape(%model.backbone.body.layer2.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %212 = multiply(%211, %207) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %213 = subtract(%210, %212) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %214 = layout_transform(%213, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %215 = add(%209, %214) /* ty=Tensor[(1, 200, 200, 128), float32] */;
  %216 = nn.relu(%215) /* ty=Tensor[(1, 200, 200, 128), float32] */;
  %217 = layout_transform(%model.backbone.body.layer2.0.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float32] */;
  %218 = nn.conv2d(%216, %217, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %219 = reshape(%model.backbone.body.layer2.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %220 = reshape(%model.backbone.body.layer2.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %221 = add(%220, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %222 = rsqrt(%221) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %223 = multiply(%219, %222) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %224 = layout_transform(%223, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %225 = multiply(%218, %224) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %226 = reshape(%model.backbone.body.layer2.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %227 = reshape(%model.backbone.body.layer2.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %228 = multiply(%227, %223) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %229 = subtract(%226, %228) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %230 = layout_transform(%229, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %231 = add(%225, %230) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %232 = nn.relu(%231) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %233 = layout_transform(%model.backbone.body.layer2.0.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float32] */;
  %234 = nn.conv2d(%232, %233, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %235 = reshape(%model.backbone.body.layer2.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %236 = reshape(%model.backbone.body.layer2.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %237 = add(%236, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %238 = rsqrt(%237) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %239 = multiply(%235, %238) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %240 = layout_transform(%239, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %241 = multiply(%234, %240) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %242 = reshape(%model.backbone.body.layer2.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %243 = reshape(%model.backbone.body.layer2.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %244 = multiply(%243, %239) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %245 = subtract(%242, %244) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %246 = layout_transform(%245, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %247 = add(%241, %246) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %248 = layout_transform(%model.backbone.body.layer2.0.downsample.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 512), float32] */;
  %249 = nn.conv2d(%194, %248, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %250 = reshape(%model.backbone.body.layer2.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %251 = reshape(%model.backbone.body.layer2.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %252 = add(%251, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %253 = rsqrt(%252) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %254 = multiply(%250, %253) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %255 = layout_transform(%254, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %256 = multiply(%249, %255) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %257 = reshape(%model.backbone.body.layer2.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %258 = reshape(%model.backbone.body.layer2.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %259 = multiply(%258, %254) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %260 = subtract(%257, %259) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %261 = layout_transform(%260, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %262 = add(%256, %261) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %263 = add(%247, %262) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %264 = nn.relu(%263) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %265 = layout_transform(%model.backbone.body.layer2.1.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 128), float32] */;
  %266 = nn.conv2d(%264, %265, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %267 = reshape(%model.backbone.body.layer2.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %268 = reshape(%model.backbone.body.layer2.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %269 = add(%268, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %270 = rsqrt(%269) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %271 = multiply(%267, %270) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %272 = layout_transform(%271, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %273 = multiply(%266, %272) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %274 = reshape(%model.backbone.body.layer2.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %275 = reshape(%model.backbone.body.layer2.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %276 = multiply(%275, %271) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %277 = subtract(%274, %276) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %278 = layout_transform(%277, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %279 = add(%273, %278) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %280 = nn.relu(%279) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %281 = layout_transform(%model.backbone.body.layer2.1.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float32] */;
  %282 = nn.conv2d(%280, %281, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %283 = reshape(%model.backbone.body.layer2.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %284 = reshape(%model.backbone.body.layer2.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %285 = add(%284, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %286 = rsqrt(%285) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %287 = multiply(%283, %286) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %288 = layout_transform(%287, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %289 = multiply(%282, %288) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %290 = reshape(%model.backbone.body.layer2.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %291 = reshape(%model.backbone.body.layer2.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %292 = multiply(%291, %287) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %293 = subtract(%290, %292) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %294 = layout_transform(%293, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %295 = add(%289, %294) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %296 = nn.relu(%295) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %297 = layout_transform(%model.backbone.body.layer2.1.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float32] */;
  %298 = nn.conv2d(%296, %297, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %299 = reshape(%model.backbone.body.layer2.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %300 = reshape(%model.backbone.body.layer2.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %301 = add(%300, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %302 = rsqrt(%301) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %303 = multiply(%299, %302) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %304 = layout_transform(%303, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %305 = multiply(%298, %304) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %306 = reshape(%model.backbone.body.layer2.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %307 = reshape(%model.backbone.body.layer2.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %308 = multiply(%307, %303) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %309 = subtract(%306, %308) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %310 = layout_transform(%309, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %311 = add(%305, %310) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %312 = add(%311, %264) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %313 = nn.relu(%312) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %314 = layout_transform(%model.backbone.body.layer2.2.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 128), float32] */;
  %315 = nn.conv2d(%313, %314, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %316 = reshape(%model.backbone.body.layer2.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %317 = reshape(%model.backbone.body.layer2.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %318 = add(%317, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %319 = rsqrt(%318) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %320 = multiply(%316, %319) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %321 = layout_transform(%320, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %322 = multiply(%315, %321) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %323 = reshape(%model.backbone.body.layer2.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %324 = reshape(%model.backbone.body.layer2.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %325 = multiply(%324, %320) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %326 = subtract(%323, %325) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %327 = layout_transform(%326, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %328 = add(%322, %327) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %329 = nn.relu(%328) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %330 = layout_transform(%model.backbone.body.layer2.2.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float32] */;
  %331 = nn.conv2d(%329, %330, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %332 = reshape(%model.backbone.body.layer2.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %333 = reshape(%model.backbone.body.layer2.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %334 = add(%333, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %335 = rsqrt(%334) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %336 = multiply(%332, %335) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %337 = layout_transform(%336, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %338 = multiply(%331, %337) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %339 = reshape(%model.backbone.body.layer2.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %340 = reshape(%model.backbone.body.layer2.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %341 = multiply(%340, %336) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %342 = subtract(%339, %341) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %343 = layout_transform(%342, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %344 = add(%338, %343) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %345 = nn.relu(%344) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %346 = layout_transform(%model.backbone.body.layer2.2.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float32] */;
  %347 = nn.conv2d(%345, %346, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %348 = reshape(%model.backbone.body.layer2.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %349 = reshape(%model.backbone.body.layer2.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %350 = add(%349, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %351 = rsqrt(%350) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %352 = multiply(%348, %351) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %353 = layout_transform(%352, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %354 = multiply(%347, %353) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %355 = reshape(%model.backbone.body.layer2.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %356 = reshape(%model.backbone.body.layer2.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %357 = multiply(%356, %352) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %358 = subtract(%355, %357) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %359 = layout_transform(%358, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %360 = add(%354, %359) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %361 = add(%360, %313) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %362 = nn.relu(%361) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %363 = layout_transform(%model.backbone.body.layer2.3.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 128), float32] */;
  %364 = nn.conv2d(%362, %363, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %365 = reshape(%model.backbone.body.layer2.3.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %366 = reshape(%model.backbone.body.layer2.3.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %367 = add(%366, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %368 = rsqrt(%367) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %369 = multiply(%365, %368) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %370 = layout_transform(%369, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %371 = multiply(%364, %370) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %372 = reshape(%model.backbone.body.layer2.3.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %373 = reshape(%model.backbone.body.layer2.3.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %374 = multiply(%373, %369) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %375 = subtract(%372, %374) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %376 = layout_transform(%375, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %377 = add(%371, %376) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %378 = nn.relu(%377) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %379 = layout_transform(%model.backbone.body.layer2.3.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 128, 128), float32] */;
  %380 = nn.conv2d(%378, %379, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %381 = reshape(%model.backbone.body.layer2.3.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %382 = reshape(%model.backbone.body.layer2.3.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %383 = add(%382, 0f /* ty=float32 */) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %384 = rsqrt(%383) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %385 = multiply(%381, %384) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %386 = layout_transform(%385, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %387 = multiply(%380, %386) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %388 = reshape(%model.backbone.body.layer2.3.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %389 = reshape(%model.backbone.body.layer2.3.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %390 = multiply(%389, %385) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %391 = subtract(%388, %390) /* ty=Tensor[(1, 128, 1, 1), float32] */;
  %392 = layout_transform(%391, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %393 = add(%387, %392) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %394 = nn.relu(%393) /* ty=Tensor[(1, 100, 100, 128), float32] */;
  %395 = layout_transform(%model.backbone.body.layer2.3.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 128, 512), float32] */;
  %396 = nn.conv2d(%394, %395, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %397 = reshape(%model.backbone.body.layer2.3.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %398 = reshape(%model.backbone.body.layer2.3.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %399 = add(%398, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %400 = rsqrt(%399) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %401 = multiply(%397, %400) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %402 = layout_transform(%401, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %403 = multiply(%396, %402) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %404 = reshape(%model.backbone.body.layer2.3.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %405 = reshape(%model.backbone.body.layer2.3.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %406 = multiply(%405, %401) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %407 = subtract(%404, %406) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %408 = layout_transform(%407, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %409 = add(%403, %408) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %410 = add(%409, %362) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %411 = nn.relu(%410) /* ty=Tensor[(1, 100, 100, 512), float32] */;
  %412 = layout_transform(%model.backbone.fpn.inner_blocks.1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 256), float32] */;
  %413 = nn.conv2d(%411, %412, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %414 = expand_dims(%model.backbone.fpn.inner_blocks.1.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %415 = expand_dims(%414, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %416 = layout_transform(%415, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %417 = add(%413, %416) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %418 = layout_transform(%model.backbone.body.layer3.0.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 256), float32] */;
  %419 = nn.conv2d(%411, %418, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %420 = reshape(%model.backbone.body.layer3.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %421 = reshape(%model.backbone.body.layer3.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %422 = add(%421, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %423 = rsqrt(%422) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %424 = multiply(%420, %423) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %425 = layout_transform(%424, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %426 = multiply(%419, %425) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %427 = reshape(%model.backbone.body.layer3.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %428 = reshape(%model.backbone.body.layer3.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %429 = multiply(%428, %424) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %430 = subtract(%427, %429) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %431 = layout_transform(%430, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %432 = add(%426, %431) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %433 = nn.relu(%432) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %434 = layout_transform(%model.backbone.body.layer3.0.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %435 = nn.conv2d(%433, %434, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %436 = reshape(%model.backbone.body.layer3.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %437 = reshape(%model.backbone.body.layer3.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %438 = add(%437, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %439 = rsqrt(%438) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %440 = multiply(%436, %439) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %441 = layout_transform(%440, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %442 = multiply(%435, %441) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %443 = reshape(%model.backbone.body.layer3.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %444 = reshape(%model.backbone.body.layer3.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %445 = multiply(%444, %440) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %446 = subtract(%443, %445) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %447 = layout_transform(%446, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %448 = add(%442, %447) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %449 = nn.relu(%448) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %450 = layout_transform(%model.backbone.body.layer3.0.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %451 = nn.conv2d(%449, %450, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %452 = reshape(%model.backbone.body.layer3.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %453 = reshape(%model.backbone.body.layer3.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %454 = add(%453, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %455 = rsqrt(%454) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %456 = multiply(%452, %455) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %457 = layout_transform(%456, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %458 = multiply(%451, %457) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %459 = reshape(%model.backbone.body.layer3.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %460 = reshape(%model.backbone.body.layer3.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %461 = multiply(%460, %456) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %462 = subtract(%459, %461) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %463 = layout_transform(%462, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %464 = add(%458, %463) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %465 = layout_transform(%model.backbone.body.layer3.0.downsample.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 1024), float32] */;
  %466 = nn.conv2d(%411, %465, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %467 = reshape(%model.backbone.body.layer3.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %468 = reshape(%model.backbone.body.layer3.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %469 = add(%468, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %470 = rsqrt(%469) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %471 = multiply(%467, %470) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %472 = layout_transform(%471, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %473 = multiply(%466, %472) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %474 = reshape(%model.backbone.body.layer3.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %475 = reshape(%model.backbone.body.layer3.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %476 = multiply(%475, %471) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %477 = subtract(%474, %476) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %478 = layout_transform(%477, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %479 = add(%473, %478) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %480 = add(%464, %479) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %481 = nn.relu(%480) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %482 = layout_transform(%model.backbone.body.layer3.1.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %483 = nn.conv2d(%481, %482, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %484 = reshape(%model.backbone.body.layer3.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %485 = reshape(%model.backbone.body.layer3.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %486 = add(%485, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %487 = rsqrt(%486) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %488 = multiply(%484, %487) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %489 = layout_transform(%488, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %490 = multiply(%483, %489) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %491 = reshape(%model.backbone.body.layer3.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %492 = reshape(%model.backbone.body.layer3.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %493 = multiply(%492, %488) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %494 = subtract(%491, %493) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %495 = layout_transform(%494, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %496 = add(%490, %495) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %497 = nn.relu(%496) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %498 = layout_transform(%model.backbone.body.layer3.1.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %499 = nn.conv2d(%497, %498, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %500 = reshape(%model.backbone.body.layer3.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %501 = reshape(%model.backbone.body.layer3.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %502 = add(%501, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %503 = rsqrt(%502) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %504 = multiply(%500, %503) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %505 = layout_transform(%504, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %506 = multiply(%499, %505) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %507 = reshape(%model.backbone.body.layer3.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %508 = reshape(%model.backbone.body.layer3.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %509 = multiply(%508, %504) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %510 = subtract(%507, %509) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %511 = layout_transform(%510, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %512 = add(%506, %511) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %513 = nn.relu(%512) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %514 = layout_transform(%model.backbone.body.layer3.1.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %515 = nn.conv2d(%513, %514, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %516 = reshape(%model.backbone.body.layer3.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %517 = reshape(%model.backbone.body.layer3.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %518 = add(%517, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %519 = rsqrt(%518) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %520 = multiply(%516, %519) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %521 = layout_transform(%520, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %522 = multiply(%515, %521) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %523 = reshape(%model.backbone.body.layer3.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %524 = reshape(%model.backbone.body.layer3.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %525 = multiply(%524, %520) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %526 = subtract(%523, %525) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %527 = layout_transform(%526, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %528 = add(%522, %527) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %529 = add(%528, %481) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %530 = nn.relu(%529) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %531 = layout_transform(%model.backbone.body.layer3.2.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %532 = nn.conv2d(%530, %531, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %533 = reshape(%model.backbone.body.layer3.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %534 = reshape(%model.backbone.body.layer3.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %535 = add(%534, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %536 = rsqrt(%535) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %537 = multiply(%533, %536) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %538 = layout_transform(%537, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %539 = multiply(%532, %538) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %540 = reshape(%model.backbone.body.layer3.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %541 = reshape(%model.backbone.body.layer3.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %542 = multiply(%541, %537) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %543 = subtract(%540, %542) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %544 = layout_transform(%543, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %545 = add(%539, %544) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %546 = nn.relu(%545) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %547 = layout_transform(%model.backbone.body.layer3.2.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %548 = nn.conv2d(%546, %547, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %549 = reshape(%model.backbone.body.layer3.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %550 = reshape(%model.backbone.body.layer3.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %551 = add(%550, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %552 = rsqrt(%551) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %553 = multiply(%549, %552) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %554 = layout_transform(%553, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %555 = multiply(%548, %554) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %556 = reshape(%model.backbone.body.layer3.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %557 = reshape(%model.backbone.body.layer3.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %558 = multiply(%557, %553) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %559 = subtract(%556, %558) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %560 = layout_transform(%559, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %561 = add(%555, %560) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %562 = nn.relu(%561) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %563 = layout_transform(%model.backbone.body.layer3.2.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %564 = nn.conv2d(%562, %563, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %565 = reshape(%model.backbone.body.layer3.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %566 = reshape(%model.backbone.body.layer3.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %567 = add(%566, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %568 = rsqrt(%567) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %569 = multiply(%565, %568) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %570 = layout_transform(%569, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %571 = multiply(%564, %570) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %572 = reshape(%model.backbone.body.layer3.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %573 = reshape(%model.backbone.body.layer3.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %574 = multiply(%573, %569) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %575 = subtract(%572, %574) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %576 = layout_transform(%575, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %577 = add(%571, %576) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %578 = add(%577, %530) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %579 = nn.relu(%578) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %580 = layout_transform(%model.backbone.body.layer3.3.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %581 = nn.conv2d(%579, %580, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %582 = reshape(%model.backbone.body.layer3.3.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %583 = reshape(%model.backbone.body.layer3.3.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %584 = add(%583, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %585 = rsqrt(%584) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %586 = multiply(%582, %585) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %587 = layout_transform(%586, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %588 = multiply(%581, %587) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %589 = reshape(%model.backbone.body.layer3.3.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %590 = reshape(%model.backbone.body.layer3.3.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %591 = multiply(%590, %586) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %592 = subtract(%589, %591) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %593 = layout_transform(%592, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %594 = add(%588, %593) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %595 = nn.relu(%594) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %596 = layout_transform(%model.backbone.body.layer3.3.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %597 = nn.conv2d(%595, %596, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %598 = reshape(%model.backbone.body.layer3.3.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %599 = reshape(%model.backbone.body.layer3.3.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %600 = add(%599, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %601 = rsqrt(%600) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %602 = multiply(%598, %601) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %603 = layout_transform(%602, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %604 = multiply(%597, %603) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %605 = reshape(%model.backbone.body.layer3.3.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %606 = reshape(%model.backbone.body.layer3.3.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %607 = multiply(%606, %602) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %608 = subtract(%605, %607) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %609 = layout_transform(%608, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %610 = add(%604, %609) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %611 = nn.relu(%610) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %612 = layout_transform(%model.backbone.body.layer3.3.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %613 = nn.conv2d(%611, %612, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %614 = reshape(%model.backbone.body.layer3.3.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %615 = reshape(%model.backbone.body.layer3.3.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %616 = add(%615, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %617 = rsqrt(%616) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %618 = multiply(%614, %617) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %619 = layout_transform(%618, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %620 = multiply(%613, %619) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %621 = reshape(%model.backbone.body.layer3.3.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %622 = reshape(%model.backbone.body.layer3.3.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %623 = multiply(%622, %618) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %624 = subtract(%621, %623) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %625 = layout_transform(%624, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %626 = add(%620, %625) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %627 = add(%626, %579) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %628 = nn.relu(%627) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %629 = layout_transform(%model.backbone.body.layer3.4.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %630 = nn.conv2d(%628, %629, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %631 = reshape(%model.backbone.body.layer3.4.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %632 = reshape(%model.backbone.body.layer3.4.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %633 = add(%632, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %634 = rsqrt(%633) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %635 = multiply(%631, %634) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %636 = layout_transform(%635, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %637 = multiply(%630, %636) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %638 = reshape(%model.backbone.body.layer3.4.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %639 = reshape(%model.backbone.body.layer3.4.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %640 = multiply(%639, %635) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %641 = subtract(%638, %640) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %642 = layout_transform(%641, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %643 = add(%637, %642) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %644 = nn.relu(%643) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %645 = layout_transform(%model.backbone.body.layer3.4.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %646 = nn.conv2d(%644, %645, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %647 = reshape(%model.backbone.body.layer3.4.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %648 = reshape(%model.backbone.body.layer3.4.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %649 = add(%648, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %650 = rsqrt(%649) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %651 = multiply(%647, %650) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %652 = layout_transform(%651, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %653 = multiply(%646, %652) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %654 = reshape(%model.backbone.body.layer3.4.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %655 = reshape(%model.backbone.body.layer3.4.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %656 = multiply(%655, %651) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %657 = subtract(%654, %656) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %658 = layout_transform(%657, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %659 = add(%653, %658) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %660 = nn.relu(%659) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %661 = layout_transform(%model.backbone.body.layer3.4.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %662 = nn.conv2d(%660, %661, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %663 = reshape(%model.backbone.body.layer3.4.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %664 = reshape(%model.backbone.body.layer3.4.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %665 = add(%664, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %666 = rsqrt(%665) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %667 = multiply(%663, %666) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %668 = layout_transform(%667, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %669 = multiply(%662, %668) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %670 = reshape(%model.backbone.body.layer3.4.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %671 = reshape(%model.backbone.body.layer3.4.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %672 = multiply(%671, %667) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %673 = subtract(%670, %672) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %674 = layout_transform(%673, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %675 = add(%669, %674) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %676 = add(%675, %628) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %677 = nn.relu(%676) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %678 = layout_transform(%model.backbone.body.layer3.5.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %679 = nn.conv2d(%677, %678, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %680 = reshape(%model.backbone.body.layer3.5.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %681 = reshape(%model.backbone.body.layer3.5.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %682 = add(%681, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %683 = rsqrt(%682) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %684 = multiply(%680, %683) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %685 = layout_transform(%684, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %686 = multiply(%679, %685) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %687 = reshape(%model.backbone.body.layer3.5.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %688 = reshape(%model.backbone.body.layer3.5.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %689 = multiply(%688, %684) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %690 = subtract(%687, %689) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %691 = layout_transform(%690, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %692 = add(%686, %691) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %693 = nn.relu(%692) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %694 = layout_transform(%model.backbone.body.layer3.5.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %695 = nn.conv2d(%693, %694, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %696 = reshape(%model.backbone.body.layer3.5.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %697 = reshape(%model.backbone.body.layer3.5.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %698 = add(%697, 0f /* ty=float32 */) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %699 = rsqrt(%698) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %700 = multiply(%696, %699) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %701 = layout_transform(%700, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %702 = multiply(%695, %701) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %703 = reshape(%model.backbone.body.layer3.5.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %704 = reshape(%model.backbone.body.layer3.5.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %705 = multiply(%704, %700) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %706 = subtract(%703, %705) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %707 = layout_transform(%706, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %708 = add(%702, %707) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %709 = nn.relu(%708) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %710 = layout_transform(%model.backbone.body.layer3.5.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 1024), float32] */;
  %711 = nn.conv2d(%709, %710, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %712 = reshape(%model.backbone.body.layer3.5.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %713 = reshape(%model.backbone.body.layer3.5.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %714 = add(%713, 0f /* ty=float32 */) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %715 = rsqrt(%714) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %716 = multiply(%712, %715) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %717 = layout_transform(%716, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %718 = multiply(%711, %717) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %719 = reshape(%model.backbone.body.layer3.5.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %720 = reshape(%model.backbone.body.layer3.5.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %721 = multiply(%720, %716) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %722 = subtract(%719, %721) /* ty=Tensor[(1, 1024, 1, 1), float32] */;
  %723 = layout_transform(%722, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 1024), float32] */;
  %724 = add(%718, %723) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %725 = add(%724, %677) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %726 = nn.relu(%725) /* ty=Tensor[(1, 50, 50, 1024), float32] */;
  %727 = layout_transform(%model.backbone.fpn.inner_blocks.2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 256), float32] */;
  %728 = nn.conv2d(%726, %727, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %729 = expand_dims(%model.backbone.fpn.inner_blocks.2.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %730 = expand_dims(%729, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %731 = layout_transform(%730, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %732 = add(%728, %731) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %733 = layout_transform(%model.backbone.body.layer4.0.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 512), float32] */;
  %734 = nn.conv2d(%726, %733, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 512), float32] */;
  %735 = reshape(%model.backbone.body.layer4.0.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %736 = reshape(%model.backbone.body.layer4.0.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %737 = add(%736, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %738 = rsqrt(%737) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %739 = multiply(%735, %738) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %740 = layout_transform(%739, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %741 = multiply(%734, %740) /* ty=Tensor[(1, 50, 50, 512), float32] */;
  %742 = reshape(%model.backbone.body.layer4.0.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %743 = reshape(%model.backbone.body.layer4.0.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %744 = multiply(%743, %739) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %745 = subtract(%742, %744) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %746 = layout_transform(%745, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %747 = add(%741, %746) /* ty=Tensor[(1, 50, 50, 512), float32] */;
  %748 = nn.relu(%747) /* ty=Tensor[(1, 50, 50, 512), float32] */;
  %749 = layout_transform(%model.backbone.body.layer4.0.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 512, 512), float32] */;
  %750 = nn.conv2d(%748, %749, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %751 = reshape(%model.backbone.body.layer4.0.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %752 = reshape(%model.backbone.body.layer4.0.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %753 = add(%752, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %754 = rsqrt(%753) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %755 = multiply(%751, %754) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %756 = layout_transform(%755, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %757 = multiply(%750, %756) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %758 = reshape(%model.backbone.body.layer4.0.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %759 = reshape(%model.backbone.body.layer4.0.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %760 = multiply(%759, %755) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %761 = subtract(%758, %760) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %762 = layout_transform(%761, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %763 = add(%757, %762) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %764 = nn.relu(%763) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %765 = layout_transform(%model.backbone.body.layer4.0.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 2048), float32] */;
  %766 = nn.conv2d(%764, %765, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %767 = reshape(%model.backbone.body.layer4.0.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %768 = reshape(%model.backbone.body.layer4.0.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %769 = add(%768, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %770 = rsqrt(%769) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %771 = multiply(%767, %770) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %772 = layout_transform(%771, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %773 = multiply(%766, %772) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %774 = reshape(%model.backbone.body.layer4.0.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %775 = reshape(%model.backbone.body.layer4.0.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %776 = multiply(%775, %771) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %777 = subtract(%774, %776) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %778 = layout_transform(%777, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %779 = add(%773, %778) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %780 = layout_transform(%model.backbone.body.layer4.0.downsample.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 1024, 2048), float32] */;
  %781 = nn.conv2d(%726, %780, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %782 = reshape(%model.backbone.body.layer4.0.downsample.1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %783 = reshape(%model.backbone.body.layer4.0.downsample.1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %784 = add(%783, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %785 = rsqrt(%784) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %786 = multiply(%782, %785) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %787 = layout_transform(%786, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %788 = multiply(%781, %787) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %789 = reshape(%model.backbone.body.layer4.0.downsample.1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %790 = reshape(%model.backbone.body.layer4.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %791 = multiply(%790, %786) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %792 = subtract(%789, %791) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %793 = layout_transform(%792, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %794 = add(%788, %793) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %795 = add(%779, %794) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %796 = nn.relu(%795) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %797 = layout_transform(%model.backbone.body.layer4.1.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 2048, 512), float32] */;
  %798 = nn.conv2d(%796, %797, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %799 = reshape(%model.backbone.body.layer4.1.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %800 = reshape(%model.backbone.body.layer4.1.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %801 = add(%800, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %802 = rsqrt(%801) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %803 = multiply(%799, %802) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %804 = layout_transform(%803, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %805 = multiply(%798, %804) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %806 = reshape(%model.backbone.body.layer4.1.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %807 = reshape(%model.backbone.body.layer4.1.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %808 = multiply(%807, %803) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %809 = subtract(%806, %808) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %810 = layout_transform(%809, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %811 = add(%805, %810) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %812 = nn.relu(%811) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %813 = layout_transform(%model.backbone.body.layer4.1.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 512, 512), float32] */;
  %814 = nn.conv2d(%812, %813, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %815 = reshape(%model.backbone.body.layer4.1.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %816 = reshape(%model.backbone.body.layer4.1.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %817 = add(%816, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %818 = rsqrt(%817) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %819 = multiply(%815, %818) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %820 = layout_transform(%819, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %821 = multiply(%814, %820) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %822 = reshape(%model.backbone.body.layer4.1.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %823 = reshape(%model.backbone.body.layer4.1.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %824 = multiply(%823, %819) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %825 = subtract(%822, %824) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %826 = layout_transform(%825, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %827 = add(%821, %826) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %828 = nn.relu(%827) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %829 = layout_transform(%model.backbone.body.layer4.1.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 2048), float32] */;
  %830 = nn.conv2d(%828, %829, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %831 = reshape(%model.backbone.body.layer4.1.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %832 = reshape(%model.backbone.body.layer4.1.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %833 = add(%832, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %834 = rsqrt(%833) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %835 = multiply(%831, %834) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %836 = layout_transform(%835, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %837 = multiply(%830, %836) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %838 = reshape(%model.backbone.body.layer4.1.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %839 = reshape(%model.backbone.body.layer4.1.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %840 = multiply(%839, %835) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %841 = subtract(%838, %840) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %842 = layout_transform(%841, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %843 = add(%837, %842) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %844 = add(%843, %796) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %845 = nn.relu(%844) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %846 = layout_transform(%model.backbone.body.layer4.2.conv1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 2048, 512), float32] */;
  %847 = nn.conv2d(%845, %846, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %848 = reshape(%model.backbone.body.layer4.2.bn1.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %849 = reshape(%model.backbone.body.layer4.2.bn1.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %850 = add(%849, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %851 = rsqrt(%850) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %852 = multiply(%848, %851) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %853 = layout_transform(%852, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %854 = multiply(%847, %853) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %855 = reshape(%model.backbone.body.layer4.2.bn1.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %856 = reshape(%model.backbone.body.layer4.2.bn1.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %857 = multiply(%856, %852) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %858 = subtract(%855, %857) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %859 = layout_transform(%858, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %860 = add(%854, %859) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %861 = nn.relu(%860) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %862 = layout_transform(%model.backbone.body.layer4.2.conv2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 512, 512), float32] */;
  %863 = nn.conv2d(%861, %862, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %864 = reshape(%model.backbone.body.layer4.2.bn2.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %865 = reshape(%model.backbone.body.layer4.2.bn2.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %866 = add(%865, 0f /* ty=float32 */) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %867 = rsqrt(%866) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %868 = multiply(%864, %867) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %869 = layout_transform(%868, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %870 = multiply(%863, %869) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %871 = reshape(%model.backbone.body.layer4.2.bn2.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %872 = reshape(%model.backbone.body.layer4.2.bn2.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %873 = multiply(%872, %868) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %874 = subtract(%871, %873) /* ty=Tensor[(1, 512, 1, 1), float32] */;
  %875 = layout_transform(%874, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %876 = add(%870, %875) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %877 = nn.relu(%876) /* ty=Tensor[(1, 25, 25, 512), float32] */;
  %878 = layout_transform(%model.backbone.body.layer4.2.conv3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 512, 2048), float32] */;
  %879 = nn.conv2d(%877, %878, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %880 = reshape(%model.backbone.body.layer4.2.bn3.weight, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %881 = reshape(%model.backbone.body.layer4.2.bn3.running_var, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %882 = add(%881, 0f /* ty=float32 */) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %883 = rsqrt(%882) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %884 = multiply(%880, %883) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %885 = layout_transform(%884, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %886 = multiply(%879, %885) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %887 = reshape(%model.backbone.body.layer4.2.bn3.bias, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %888 = reshape(%model.backbone.body.layer4.2.bn3.running_mean, newshape=[1, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %889 = multiply(%888, %884) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %890 = subtract(%887, %889) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %891 = layout_transform(%890, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 2048), float32] */;
  %892 = add(%886, %891) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %893 = add(%892, %845) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %894 = nn.relu(%893) /* ty=Tensor[(1, 25, 25, 2048), float32] */;
  %895 = layout_transform(%model.backbone.fpn.inner_blocks.3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 2048, 256), float32] */;
  %896 = nn.conv2d(%894, %895, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %897 = expand_dims(%model.backbone.fpn.inner_blocks.3.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %898 = expand_dims(%897, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %899 = layout_transform(%898, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %900 = add(%896, %899) /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %901 = layout_transform(%900, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 25, 25), float32] */;
  %902 = image.resize(%901, size=[50, 50], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %903 = layout_transform(%902, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %904 = add(%732, %903) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %905 = layout_transform(%904, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 50, 50), float32] */;
  %906 = image.resize(%905, size=[100, 100], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %907 = layout_transform(%906, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %908 = add(%417, %907) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %909 = layout_transform(%908, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 256, 100, 100), float32] */;
  %910 = image.resize(%909, size=[200, 200], method="nearest_neighbor", coordinate_transformation_mode="asymmetric") /* ty=Tensor[(1, 256, 200, 200), float32] */;
  %911 = layout_transform(%910, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %912 = add(%200, %911) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %913 = layout_transform(%model.backbone.fpn.layer_blocks.0.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %914 = nn.conv2d(%912, %913, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %915 = expand_dims(%model.backbone.fpn.layer_blocks.0.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %916 = expand_dims(%915, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %917 = layout_transform(%916, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %918 = add(%914, %917) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %919 = layout_transform(%model.rpn.head.conv.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %920 = nn.conv2d(%918, %919, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %921 = expand_dims(%model.rpn.head.conv.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %922 = expand_dims(%921, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %923 = layout_transform(%922, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %924 = add(%920, %923) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %925 = nn.relu(%924) /* ty=Tensor[(1, 200, 200, 256), float32] */;
  %926 = layout_transform(%model.rpn.head.bbox_pred.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 12), float32] */;
  %927 = nn.conv2d(%925, %926, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 12), float32] */;
  %928 = expand_dims(%model.rpn.head.bbox_pred.bias, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %929 = expand_dims(%928, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %930 = layout_transform(%929, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float32] */;
  %931 = add(%927, %930) /* ty=Tensor[(1, 200, 200, 12), float32] */;
  %932 = layout_transform(%931, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 200, 200), float32] */;
  %933 = reshape(%932, newshape=[1, -1, 4, 200, 200]) /* ty=Tensor[(1, 3, 4, 200, 200), float32] */;
  %934 = transpose(%933, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 4), float32] */;
  %935 = reshape(%934, newshape=[1, -1, 4]) /* ty=Tensor[(1, 120000, 4), float32] */;
  %936 = layout_transform(%model.backbone.fpn.layer_blocks.1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %937 = nn.conv2d(%908, %936, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %938 = expand_dims(%model.backbone.fpn.layer_blocks.1.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %939 = expand_dims(%938, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %940 = layout_transform(%939, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %941 = add(%937, %940) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %942 = nn.conv2d(%941, %919, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %943 = expand_dims(%model.rpn.head.conv.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %944 = expand_dims(%943, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %945 = layout_transform(%944, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %946 = add(%942, %945) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %947 = nn.relu(%946) /* ty=Tensor[(1, 100, 100, 256), float32] */;
  %948 = nn.conv2d(%947, %926, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 12), float32] */;
  %949 = expand_dims(%model.rpn.head.bbox_pred.bias, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %950 = expand_dims(%949, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %951 = layout_transform(%950, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float32] */;
  %952 = add(%948, %951) /* ty=Tensor[(1, 100, 100, 12), float32] */;
  %953 = layout_transform(%952, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 100, 100), float32] */;
  %954 = reshape(%953, newshape=[1, -1, 4, 100, 100]) /* ty=Tensor[(1, 3, 4, 100, 100), float32] */;
  %955 = transpose(%954, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 4), float32] */;
  %956 = reshape(%955, newshape=[1, -1, 4]) /* ty=Tensor[(1, 30000, 4), float32] */;
  %957 = layout_transform(%model.backbone.fpn.layer_blocks.2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %958 = nn.conv2d(%904, %957, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %959 = expand_dims(%model.backbone.fpn.layer_blocks.2.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %960 = expand_dims(%959, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %961 = layout_transform(%960, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %962 = add(%958, %961) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %963 = nn.conv2d(%962, %919, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %964 = expand_dims(%model.rpn.head.conv.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %965 = expand_dims(%964, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %966 = layout_transform(%965, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %967 = add(%963, %966) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %968 = nn.relu(%967) /* ty=Tensor[(1, 50, 50, 256), float32] */;
  %969 = nn.conv2d(%968, %926, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 12), float32] */;
  %970 = expand_dims(%model.rpn.head.bbox_pred.bias, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %971 = expand_dims(%970, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %972 = layout_transform(%971, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float32] */;
  %973 = add(%969, %972) /* ty=Tensor[(1, 50, 50, 12), float32] */;
  %974 = layout_transform(%973, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 50, 50), float32] */;
  %975 = reshape(%974, newshape=[1, -1, 4, 50, 50]) /* ty=Tensor[(1, 3, 4, 50, 50), float32] */;
  %976 = transpose(%975, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 4), float32] */;
  %977 = reshape(%976, newshape=[1, -1, 4]) /* ty=Tensor[(1, 7500, 4), float32] */;
  %978 = layout_transform(%model.backbone.fpn.layer_blocks.3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %979 = nn.conv2d(%900, %978, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %980 = expand_dims(%model.backbone.fpn.layer_blocks.3.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %981 = expand_dims(%980, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %982 = layout_transform(%981, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %983 = add(%979, %982) /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %984 = nn.conv2d(%983, %919, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %985 = expand_dims(%model.rpn.head.conv.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %986 = expand_dims(%985, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %987 = layout_transform(%986, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %988 = add(%984, %987) /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %989 = nn.relu(%988) /* ty=Tensor[(1, 25, 25, 256), float32] */;
  %990 = nn.conv2d(%989, %926, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 12), float32] */;
  %991 = expand_dims(%model.rpn.head.bbox_pred.bias, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %992 = expand_dims(%991, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %993 = layout_transform(%992, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float32] */;
  %994 = add(%990, %993) /* ty=Tensor[(1, 25, 25, 12), float32] */;
  %995 = layout_transform(%994, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 25, 25), float32] */;
  %996 = reshape(%995, newshape=[1, -1, 4, 25, 25]) /* ty=Tensor[(1, 3, 4, 25, 25), float32] */;
  %997 = transpose(%996, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 4), float32] */;
  %998 = reshape(%997, newshape=[1, -1, 4]) /* ty=Tensor[(1, 1875, 4), float32] */;
  %999 = nn.max_pool2d(%983, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0], layout="NHWC") /* ty=Tensor[(1, 13, 13, 256), float32] */;
  %1000 = nn.conv2d(%999, %919, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 13, 13, 256), float32] */;
  %1001 = expand_dims(%model.rpn.head.conv.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %1002 = expand_dims(%1001, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1003 = layout_transform(%1002, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %1004 = add(%1000, %1003) /* ty=Tensor[(1, 13, 13, 256), float32] */;
  %1005 = nn.relu(%1004) /* ty=Tensor[(1, 13, 13, 256), float32] */;
  %1006 = nn.conv2d(%1005, %926, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 13, 13, 12), float32] */;
  %1007 = expand_dims(%model.rpn.head.bbox_pred.bias, axis=1, num_newaxis=2) /* ty=Tensor[(12, 1, 1), float32] */;
  %1008 = expand_dims(%1007, axis=0) /* ty=Tensor[(1, 12, 1, 1), float32] */;
  %1009 = layout_transform(%1008, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 12), float32] */;
  %1010 = add(%1006, %1009) /* ty=Tensor[(1, 13, 13, 12), float32] */;
  %1011 = layout_transform(%1010, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 12, 13, 13), float32] */;
  %1012 = reshape(%1011, newshape=[1, -1, 4, 13, 13]) /* ty=Tensor[(1, 3, 4, 13, 13), float32] */;
  %1013 = transpose(%1012, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 4), float32] */;
  %1014 = reshape(%1013, newshape=[1, -1, 4]) /* ty=Tensor[(1, 507, 4), float32] */;
  %1015 = (%935, %956, %977, %998, %1014);
  %1016 = concatenate(%1015, axis=1) /* ty=Tensor[(1, 159882, 4), float32] */;
  %1017 = reshape(%1016, newshape=[-1, 4]) /* ty=Tensor[(159882, 4), float32] */;
  %1018 = reshape(%1017, newshape=[159882, -1]) /* ty=Tensor[(159882, 4), float32] */;
  %1019 = strided_slice(%1018, begin=[0, 0], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %1020 = divide(%1019, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %1021 = arange(0f /* ty=float32 */, 200f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][2], stop=meta[relay.Constant][3], step=meta[relay.Constant][4], dtype="float32") /* ty=Tensor[(200), float32] */;
  %1022 = floor_divide(800 /* ty=int32 */, 200 /* ty=int32 */) /* ty=int32 */;
  %1023 = cast(%1022, dtype="int64") /* ty=int64 */;
  %1024 = cast(%1023, dtype="float32") /* ty=float32 */;
  %1025 = multiply(%1021, %1024) /* ty=Tensor[(200), float32] */;
  %1026 = arange(0f /* ty=float32 */, 200f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][5], stop=meta[relay.Constant][6], step=meta[relay.Constant][7], dtype="float32") /* ty=Tensor[(200), float32] */;
  %1027 = floor_divide(800 /* ty=int32 */, 200 /* ty=int32 */) /* ty=int32 */;
  %1028 = cast(%1027, dtype="int64") /* ty=int64 */;
  %1029 = cast(%1028, dtype="float32") /* ty=float32 */;
  %1030 = multiply(%1026, %1029) /* ty=Tensor[(200), float32] */;
  %1031 = (%1025, %1030);
  %1032 = meshgrid(%1031) /* ty=(Tensor[(200, 200), float32], Tensor[(200, 200), float32]) */;
  %1033 = %1032.1;
  %1034 = reshape(%1033, newshape=[-1]) /* ty=Tensor[(40000), float32] */;
  %1035 = %1032.0;
  %1036 = reshape(%1035, newshape=[-1]) /* ty=Tensor[(40000), float32] */;
  %1037 = (%1034, %1036, %1034, %1036);
  %1038 = stack(%1037, axis=1) /* ty=Tensor[(40000, 4), float32] */;
  %1039 = reshape(%1038, newshape=[-1, 1, 4]) /* ty=Tensor[(40000, 1, 4), float32] */;
  %1040 = reshape(meta[relay.Constant][8] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %1041 = add(%1039, %1040) /* ty=Tensor[(40000, 3, 4), float32] */;
  %1042 = reshape(%1041, newshape=[-1, 4]) /* ty=Tensor[(120000, 4), float32] */;
  %1043 = arange(0f /* ty=float32 */, 100f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][9], stop=meta[relay.Constant][10], step=meta[relay.Constant][11], dtype="float32") /* ty=Tensor[(100), float32] */;
  %1044 = floor_divide(800 /* ty=int32 */, 100 /* ty=int32 */) /* ty=int32 */;
  %1045 = cast(%1044, dtype="int64") /* ty=int64 */;
  %1046 = cast(%1045, dtype="float32") /* ty=float32 */;
  %1047 = multiply(%1043, %1046) /* ty=Tensor[(100), float32] */;
  %1048 = arange(0f /* ty=float32 */, 100f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][12], stop=meta[relay.Constant][13], step=meta[relay.Constant][14], dtype="float32") /* ty=Tensor[(100), float32] */;
  %1049 = floor_divide(800 /* ty=int32 */, 100 /* ty=int32 */) /* ty=int32 */;
  %1050 = cast(%1049, dtype="int64") /* ty=int64 */;
  %1051 = cast(%1050, dtype="float32") /* ty=float32 */;
  %1052 = multiply(%1048, %1051) /* ty=Tensor[(100), float32] */;
  %1053 = (%1047, %1052);
  %1054 = meshgrid(%1053) /* ty=(Tensor[(100, 100), float32], Tensor[(100, 100), float32]) */;
  %1055 = %1054.1;
  %1056 = reshape(%1055, newshape=[-1]) /* ty=Tensor[(10000), float32] */;
  %1057 = %1054.0;
  %1058 = reshape(%1057, newshape=[-1]) /* ty=Tensor[(10000), float32] */;
  %1059 = (%1056, %1058, %1056, %1058);
  %1060 = stack(%1059, axis=1) /* ty=Tensor[(10000, 4), float32] */;
  %1061 = reshape(%1060, newshape=[-1, 1, 4]) /* ty=Tensor[(10000, 1, 4), float32] */;
  %1062 = reshape(meta[relay.Constant][15] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %1063 = add(%1061, %1062) /* ty=Tensor[(10000, 3, 4), float32] */;
  %1064 = reshape(%1063, newshape=[-1, 4]) /* ty=Tensor[(30000, 4), float32] */;
  %1065 = arange(0f /* ty=float32 */, 50f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][16], stop=meta[relay.Constant][17], step=meta[relay.Constant][18], dtype="float32") /* ty=Tensor[(50), float32] */;
  %1066 = floor_divide(800 /* ty=int32 */, 50 /* ty=int32 */) /* ty=int32 */;
  %1067 = cast(%1066, dtype="int64") /* ty=int64 */;
  %1068 = cast(%1067, dtype="float32") /* ty=float32 */;
  %1069 = multiply(%1065, %1068) /* ty=Tensor[(50), float32] */;
  %1070 = arange(0f /* ty=float32 */, 50f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][19], stop=meta[relay.Constant][20], step=meta[relay.Constant][21], dtype="float32") /* ty=Tensor[(50), float32] */;
  %1071 = floor_divide(800 /* ty=int32 */, 50 /* ty=int32 */) /* ty=int32 */;
  %1072 = cast(%1071, dtype="int64") /* ty=int64 */;
  %1073 = cast(%1072, dtype="float32") /* ty=float32 */;
  %1074 = multiply(%1070, %1073) /* ty=Tensor[(50), float32] */;
  %1075 = (%1069, %1074);
  %1076 = meshgrid(%1075) /* ty=(Tensor[(50, 50), float32], Tensor[(50, 50), float32]) */;
  %1077 = %1076.1;
  %1078 = reshape(%1077, newshape=[-1]) /* ty=Tensor[(2500), float32] */;
  %1079 = %1076.0;
  %1080 = reshape(%1079, newshape=[-1]) /* ty=Tensor[(2500), float32] */;
  %1081 = (%1078, %1080, %1078, %1080);
  %1082 = stack(%1081, axis=1) /* ty=Tensor[(2500, 4), float32] */;
  %1083 = reshape(%1082, newshape=[-1, 1, 4]) /* ty=Tensor[(2500, 1, 4), float32] */;
  %1084 = reshape(meta[relay.Constant][22] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %1085 = add(%1083, %1084) /* ty=Tensor[(2500, 3, 4), float32] */;
  %1086 = reshape(%1085, newshape=[-1, 4]) /* ty=Tensor[(7500, 4), float32] */;
  %1087 = arange(0f /* ty=float32 */, 25f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][23], stop=meta[relay.Constant][24], step=meta[relay.Constant][25], dtype="float32") /* ty=Tensor[(25), float32] */;
  %1088 = floor_divide(800 /* ty=int32 */, 25 /* ty=int32 */) /* ty=int32 */;
  %1089 = cast(%1088, dtype="int64") /* ty=int64 */;
  %1090 = cast(%1089, dtype="float32") /* ty=float32 */;
  %1091 = multiply(%1087, %1090) /* ty=Tensor[(25), float32] */;
  %1092 = arange(0f /* ty=float32 */, 25f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][26], stop=meta[relay.Constant][27], step=meta[relay.Constant][28], dtype="float32") /* ty=Tensor[(25), float32] */;
  %1093 = floor_divide(800 /* ty=int32 */, 25 /* ty=int32 */) /* ty=int32 */;
  %1094 = cast(%1093, dtype="int64") /* ty=int64 */;
  %1095 = cast(%1094, dtype="float32") /* ty=float32 */;
  %1096 = multiply(%1092, %1095) /* ty=Tensor[(25), float32] */;
  %1097 = (%1091, %1096);
  %1098 = meshgrid(%1097) /* ty=(Tensor[(25, 25), float32], Tensor[(25, 25), float32]) */;
  %1099 = %1098.1;
  %1100 = reshape(%1099, newshape=[-1]) /* ty=Tensor[(625), float32] */;
  %1101 = %1098.0;
  %1102 = reshape(%1101, newshape=[-1]) /* ty=Tensor[(625), float32] */;
  %1103 = (%1100, %1102, %1100, %1102);
  %1104 = stack(%1103, axis=1) /* ty=Tensor[(625, 4), float32] */;
  %1105 = reshape(%1104, newshape=[-1, 1, 4]) /* ty=Tensor[(625, 1, 4), float32] */;
  %1106 = reshape(meta[relay.Constant][29] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %1107 = add(%1105, %1106) /* ty=Tensor[(625, 3, 4), float32] */;
  %1108 = reshape(%1107, newshape=[-1, 4]) /* ty=Tensor[(1875, 4), float32] */;
  %1109 = arange(0f /* ty=float32 */, 13f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][30], stop=meta[relay.Constant][31], step=meta[relay.Constant][32], dtype="float32") /* ty=Tensor[(13), float32] */;
  %1110 = floor_divide(800 /* ty=int32 */, 13 /* ty=int32 */) /* ty=int32 */;
  %1111 = cast(%1110, dtype="int64") /* ty=int64 */;
  %1112 = cast(%1111, dtype="float32") /* ty=float32 */;
  %1113 = multiply(%1109, %1112) /* ty=Tensor[(13), float32] */;
  %1114 = arange(0f /* ty=float32 */, 13f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][33], stop=meta[relay.Constant][34], step=meta[relay.Constant][35], dtype="float32") /* ty=Tensor[(13), float32] */;
  %1115 = floor_divide(800 /* ty=int32 */, 13 /* ty=int32 */) /* ty=int32 */;
  %1116 = cast(%1115, dtype="int64") /* ty=int64 */;
  %1117 = cast(%1116, dtype="float32") /* ty=float32 */;
  %1118 = multiply(%1114, %1117) /* ty=Tensor[(13), float32] */;
  %1119 = (%1113, %1118);
  %1120 = meshgrid(%1119) /* ty=(Tensor[(13, 13), float32], Tensor[(13, 13), float32]) */;
  %1121 = %1120.1;
  %1122 = reshape(%1121, newshape=[-1]) /* ty=Tensor[(169), float32] */;
  %1123 = %1120.0;
  %1124 = reshape(%1123, newshape=[-1]) /* ty=Tensor[(169), float32] */;
  %1125 = (%1122, %1124, %1122, %1124);
  %1126 = stack(%1125, axis=1) /* ty=Tensor[(169, 4), float32] */;
  %1127 = reshape(%1126, newshape=[-1, 1, 4]) /* ty=Tensor[(169, 1, 4), float32] */;
  %1128 = reshape(meta[relay.Constant][36] /* ty=Tensor[(3, 4), float32] */, newshape=[1, -1, 4]) /* ty=Tensor[(1, 3, 4), float32] */;
  %1129 = add(%1127, %1128) /* ty=Tensor[(169, 3, 4), float32] */;
  %1130 = reshape(%1129, newshape=[-1, 4]) /* ty=Tensor[(507, 4), float32] */;
  %1131 = (%1042, %1064, %1086, %1108, %1130);
  %1132 = concatenate(%1131) /* ty=Tensor[(159882, 4), float32] */;
  %1133 = (%1132,);
  %1134 = concatenate(%1133) /* ty=Tensor[(159882, 4), float32] */;
  %1135 = take(%1134, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1136 = take(%1134, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1137 = subtract(%1135, %1136) /* ty=Tensor[(159882), float32] */;
  %1138 = expand_dims(%1137, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1139 = multiply(%1020, %1138) /* ty=Tensor[(159882, 1), float32] */;
  %1140 = take(%1134, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1141 = multiply(%1137, 0.5f /* ty=float32 */) /* ty=Tensor[(159882), float32] */;
  %1142 = add(%1140, %1141) /* ty=Tensor[(159882), float32] */;
  %1143 = expand_dims(%1142, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1144 = add(%1139, %1143) /* ty=Tensor[(159882, 1), float32] */;
  %1145 = strided_slice(%1018, begin=[0, 2], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %1146 = divide(%1145, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %1147 = clip(%1146, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float32] */;
  %1148 = exp(%1147) /* ty=Tensor[(159882, 1), float32] */;
  %1149 = expand_dims(%1137, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1150 = multiply(%1148, %1149) /* ty=Tensor[(159882, 1), float32] */;
  %1151 = multiply(0.5f /* ty=float32 */, %1150) /* ty=Tensor[(159882, 1), float32] */;
  %1152 = subtract(%1144, %1151) /* ty=Tensor[(159882, 1), float32] */;
  %1153 = strided_slice(%1018, begin=[0, 1], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %1154 = divide(%1153, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %1155 = take(%1134, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1156 = take(%1134, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1157 = subtract(%1155, %1156) /* ty=Tensor[(159882), float32] */;
  %1158 = expand_dims(%1157, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1159 = multiply(%1154, %1158) /* ty=Tensor[(159882, 1), float32] */;
  %1160 = take(%1134, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(159882), float32] */;
  %1161 = multiply(%1157, 0.5f /* ty=float32 */) /* ty=Tensor[(159882), float32] */;
  %1162 = add(%1160, %1161) /* ty=Tensor[(159882), float32] */;
  %1163 = expand_dims(%1162, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1164 = add(%1159, %1163) /* ty=Tensor[(159882, 1), float32] */;
  %1165 = strided_slice(%1018, begin=[0, 3], end=[159882, 4], strides=[1, 4]) /* ty=Tensor[(159882, 1), float32] */;
  %1166 = divide(%1165, 1f /* ty=float32 */) /* ty=Tensor[(159882, 1), float32] */;
  %1167 = clip(%1166, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(159882, 1), float32] */;
  %1168 = exp(%1167) /* ty=Tensor[(159882, 1), float32] */;
  %1169 = expand_dims(%1157, axis=1) /* ty=Tensor[(159882, 1), float32] */;
  %1170 = multiply(%1168, %1169) /* ty=Tensor[(159882, 1), float32] */;
  %1171 = multiply(0.5f /* ty=float32 */, %1170) /* ty=Tensor[(159882, 1), float32] */;
  %1172 = subtract(%1164, %1171) /* ty=Tensor[(159882, 1), float32] */;
  %1173 = multiply(0.5f /* ty=float32 */, %1150) /* ty=Tensor[(159882, 1), float32] */;
  %1174 = add(%1144, %1173) /* ty=Tensor[(159882, 1), float32] */;
  %1175 = multiply(0.5f /* ty=float32 */, %1170) /* ty=Tensor[(159882, 1), float32] */;
  %1176 = add(%1164, %1175) /* ty=Tensor[(159882, 1), float32] */;
  %1177 = (%1152, %1172, %1174, %1176);
  %1178 = stack(%1177, axis=2) /* ty=Tensor[(159882, 1, 4), float32] */;
  %1179 = reshape(%1178, newshape=[0, -1, 1]) /* ty=Tensor[(159882, 4, 1), float32] */;
  %1180 = squeeze(%1179, axis=[2]) /* ty=Tensor[(159882, 4), float32] */;
  %1181 = reshape(%1180, newshape=[159882, -1, 4]) /* ty=Tensor[(159882, 1, 4), float32] */;
  %1182 = reshape(%1181, newshape=[1, -1, 4]) /* ty=Tensor[(1, 159882, 4), float32] */;
  %1183 = arange(0 /* ty=int64 */, 1 /* ty=int64 */, 1 /* ty=int64 */, start=meta[relay.Constant][37], stop=meta[relay.Constant][38], step=meta[relay.Constant][39], dtype="int64") /* ty=Tensor[(1), int64] */;
  %1184 = expand_dims(%1183, axis=1) /* ty=Tensor[(1, 1), int64] */;
  %1185 = layout_transform(%model.rpn.head.cls_logits.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 3), float32] */;
  %1186 = nn.conv2d(%925, %1185, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 200, 200, 3), float32] */;
  %1187 = expand_dims(%model.rpn.head.cls_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %1188 = expand_dims(%1187, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
  %1189 = layout_transform(%1188, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float32] */;
  %1190 = add(%1186, %1189) /* ty=Tensor[(1, 200, 200, 3), float32] */;
  %1191 = layout_transform(%1190, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 200, 200), float32] */;
  %1192 = reshape(%1191, newshape=[1, -1, 1, 200, 200]) /* ty=Tensor[(1, 3, 1, 200, 200), float32] */;
  %1193 = transpose(%1192, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 200, 200, 3, 1), float32] */;
  %1194 = reshape(%1193, newshape=[1, -1, 1]) /* ty=Tensor[(1, 120000, 1), float32] */;
  %1195 = nn.conv2d(%947, %1185, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 100, 100, 3), float32] */;
  %1196 = expand_dims(%model.rpn.head.cls_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %1197 = expand_dims(%1196, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
  %1198 = layout_transform(%1197, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float32] */;
  %1199 = add(%1195, %1198) /* ty=Tensor[(1, 100, 100, 3), float32] */;
  %1200 = layout_transform(%1199, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 100, 100), float32] */;
  %1201 = reshape(%1200, newshape=[1, -1, 1, 100, 100]) /* ty=Tensor[(1, 3, 1, 100, 100), float32] */;
  %1202 = transpose(%1201, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 100, 100, 3, 1), float32] */;
  %1203 = reshape(%1202, newshape=[1, -1, 1]) /* ty=Tensor[(1, 30000, 1), float32] */;
  %1204 = nn.conv2d(%968, %1185, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 50, 50, 3), float32] */;
  %1205 = expand_dims(%model.rpn.head.cls_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %1206 = expand_dims(%1205, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
  %1207 = layout_transform(%1206, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float32] */;
  %1208 = add(%1204, %1207) /* ty=Tensor[(1, 50, 50, 3), float32] */;
  %1209 = layout_transform(%1208, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 50, 50), float32] */;
  %1210 = reshape(%1209, newshape=[1, -1, 1, 50, 50]) /* ty=Tensor[(1, 3, 1, 50, 50), float32] */;
  %1211 = transpose(%1210, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 50, 50, 3, 1), float32] */;
  %1212 = reshape(%1211, newshape=[1, -1, 1]) /* ty=Tensor[(1, 7500, 1), float32] */;
  %1213 = nn.conv2d(%989, %1185, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 25, 25, 3), float32] */;
  %1214 = expand_dims(%model.rpn.head.cls_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %1215 = expand_dims(%1214, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
  %1216 = layout_transform(%1215, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float32] */;
  %1217 = add(%1213, %1216) /* ty=Tensor[(1, 25, 25, 3), float32] */;
  %1218 = layout_transform(%1217, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 25, 25), float32] */;
  %1219 = reshape(%1218, newshape=[1, -1, 1, 25, 25]) /* ty=Tensor[(1, 3, 1, 25, 25), float32] */;
  %1220 = transpose(%1219, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 25, 25, 3, 1), float32] */;
  %1221 = reshape(%1220, newshape=[1, -1, 1]) /* ty=Tensor[(1, 1875, 1), float32] */;
  %1222 = nn.conv2d(%1005, %1185, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(1, 13, 13, 3), float32] */;
  %1223 = expand_dims(%model.rpn.head.cls_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(3, 1, 1), float32] */;
  %1224 = expand_dims(%1223, axis=0) /* ty=Tensor[(1, 3, 1, 1), float32] */;
  %1225 = layout_transform(%1224, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 3), float32] */;
  %1226 = add(%1222, %1225) /* ty=Tensor[(1, 13, 13, 3), float32] */;
  %1227 = layout_transform(%1226, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(1, 3, 13, 13), float32] */;
  %1228 = reshape(%1227, newshape=[1, -1, 1, 13, 13]) /* ty=Tensor[(1, 3, 1, 13, 13), float32] */;
  %1229 = transpose(%1228, axes=[0, 3, 4, 1, 2]) /* ty=Tensor[(1, 13, 13, 3, 1), float32] */;
  %1230 = reshape(%1229, newshape=[1, -1, 1]) /* ty=Tensor[(1, 507, 1), float32] */;
  %1231 = (%1194, %1203, %1212, %1221, %1230);
  %1232 = concatenate(%1231, axis=1) /* ty=Tensor[(1, 159882, 1), float32] */;
  %1233 = reshape(%1232, newshape=[-1, 1, 0]) /* ty=Tensor[(159882, 1, 1), float32] */;
  %1234 = squeeze(%1233, axis=[1]) /* ty=Tensor[(159882, 1), float32] */;
  %1235 = reshape(%1234, newshape=[1, -1]) /* ty=Tensor[(1, 159882), float32] */;
  %1236 = split(%1235, indices_or_sections=[120000, 150000, 157500, 159375], axis=1) /* ty=(Tensor[(1, 120000), float32], Tensor[(1, 30000), float32], Tensor[(1, 7500), float32], Tensor[(1, 1875), float32], Tensor[(1, 507), float32]) */;
  %1237 = %1236.0;
  %1238 = topk(%1237, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1239 = %1238.1;
  %1240 = add(%1239, 0 /* ty=int64 */) /* ty=Tensor[(1, 1000), int64] */;
  %1241 = %1236.1;
  %1242 = topk(%1241, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1243 = %1242.1;
  %1244 = take(meta[relay.Constant][40] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1245 = expand_dims(%1244, axis=0) /* ty=Tensor[(1), int64] */;
  %1246 = add(%1245, 0 /* ty=int64 */) /* ty=Tensor[(1), int64] */;
  %1247 = add(%1243, %1246) /* ty=Tensor[(1, 1000), int64] */;
  %1248 = %1236.2;
  %1249 = topk(%1248, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1250 = %1249.1;
  %1251 = take(meta[relay.Constant][41] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1252 = expand_dims(%1251, axis=0) /* ty=Tensor[(1), int64] */;
  %1253 = add(%1246, %1252) /* ty=Tensor[(1), int64] */;
  %1254 = add(%1250, %1253) /* ty=Tensor[(1, 1000), int64] */;
  %1255 = %1236.3;
  %1256 = topk(%1255, k=1000, axis=1, dtype="int64") /* ty=(Tensor[(1, 1000), float32], Tensor[(1, 1000), int64]) */;
  %1257 = %1256.1;
  %1258 = take(meta[relay.Constant][42] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1259 = expand_dims(%1258, axis=0) /* ty=Tensor[(1), int64] */;
  %1260 = add(%1253, %1259) /* ty=Tensor[(1), int64] */;
  %1261 = add(%1257, %1260) /* ty=Tensor[(1, 1000), int64] */;
  %1262 = %1236.4;
  %1263 = topk(%1262, k=507, axis=1, dtype="int64") /* ty=(Tensor[(1, 507), float32], Tensor[(1, 507), int64]) */;
  %1264 = %1263.1;
  %1265 = take(meta[relay.Constant][43] /* ty=Tensor[(2), int64] */, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
  %1266 = expand_dims(%1265, axis=0) /* ty=Tensor[(1), int64] */;
  %1267 = add(%1260, %1266) /* ty=Tensor[(1), int64] */;
  %1268 = add(%1264, %1267) /* ty=Tensor[(1, 507), int64] */;
  %1269 = (%1240, %1247, %1254, %1261, %1268);
  %1270 = concatenate(%1269, axis=1) /* ty=Tensor[(1, 4507), int64] */;
  %1271 = (%1182, %1184, %1270);
  %1272 = adv_index(%1271) /* ty=Tensor[(1, 4507, 4), float32] */;
  %1273 = split(%1272, indices_or_sections=1) /* ty=(Tensor[(1, 4507, 4), float32],) */;
  %1274 = %1273.0;
  %1275 = squeeze(%1274, axis=[0]) /* ty=Tensor[(4507, 4), float32] */;
  %1276 = strided_slice(%1275, begin=[0, 0], end=[4507, 4], strides=[1, 2]) /* ty=Tensor[(4507, 2), float32] */;
  %1277 = maximum(%1276, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
  %1278 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1279 = minimum(%1277, %1278) /* ty=Tensor[(4507, 2), float32] */;
  %1280 = strided_slice(%1275, begin=[0, 1], end=[4507, 4], strides=[1, 2]) /* ty=Tensor[(4507, 2), float32] */;
  %1281 = maximum(%1280, 0f /* ty=float32 */) /* ty=Tensor[(4507, 2), float32] */;
  %1282 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1283 = minimum(%1281, %1282) /* ty=Tensor[(4507, 2), float32] */;
  %1284 = (%1279, %1283);
  %1285 = stack(%1284, axis=2) /* ty=Tensor[(4507, 2, 2), float32] */;
  %1286 = reshape(%1285, newshape=[4507, 4]) /* ty=Tensor[(4507, 4), float32] */;
  %1287 = take(%1286, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1288 = take(%1286, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1289 = subtract(%1287, %1288) /* ty=Tensor[(4507), float32] */;
  %1290 = greater_equal(%1289, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
  %1291 = cast(%1290, dtype="bool") /* ty=Tensor[(4507), bool] */;
  %1292 = take(%1286, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1293 = take(%1286, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(4507), float32] */;
  %1294 = subtract(%1292, %1293) /* ty=Tensor[(4507), float32] */;
  %1295 = greater_equal(%1294, 0.001f /* ty=float32 */) /* ty=Tensor[(4507), bool] */;
  %1296 = cast(%1295, dtype="bool") /* ty=Tensor[(4507), bool] */;
  %1297 = logical_and(%1291, %1296) /* ty=Tensor[(4507), bool] */;
  %1298 = argwhere(%1297) /* ty=Tensor[(?, 1), int32] */;
  %1299 = split(%1298, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1300 = %1299.0;
  %1301 = squeeze(%1300, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1302 = cast(%1301, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1303 = (%1286, %1302);
  %1304 = adv_index(%1303) /* ty=Tensor[(?, 4), float32] */;
  %1305 = ndarray_size(%1304, dtype="int32") /* ty=int32 */;
  %1306 = equal(%1305, 0 /* ty=int32 */) /* ty=bool */;
  %1356 = if (%1306) {
    zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
  } else {
    %1307 = full(0 /* ty=int32 */, shape=[120000], dtype="int64") /* ty=Tensor[(120000), int64] */;
    %1308 = full(1 /* ty=int32 */, shape=[30000], dtype="int64") /* ty=Tensor[(30000), int64] */;
    %1309 = full(2 /* ty=int32 */, shape=[7500], dtype="int64") /* ty=Tensor[(7500), int64] */;
    %1310 = full(3 /* ty=int32 */, shape=[1875], dtype="int64") /* ty=Tensor[(1875), int64] */;
    %1311 = full(4 /* ty=int32 */, shape=[507], dtype="int64") /* ty=Tensor[(507), int64] */;
    %1312 = (%1307, %1308, %1309, %1310, %1311);
    %1313 = concatenate(%1312) /* ty=Tensor[(159882), int64] */;
    %1314 = reshape(%1313, newshape=[1, -1]) /* ty=Tensor[(1, 159882), int64] */;
    %1315 = cast(%1235, dtype="int64") /* ty=Tensor[(1, 159882), int64] */;
    %1316 = broadcast_to_like(%1314, %1315) /* ty=Tensor[(1, 159882), int64] */;
    %1317 = (%1316, %1184, %1270);
    %1318 = adv_index(%1317) /* ty=Tensor[(1, 4507), int64] */;
    %1319 = split(%1318, indices_or_sections=1) /* ty=(Tensor[(1, 4507), int64],) */;
    %1320 = %1319.0;
    %1321 = squeeze(%1320, axis=[0]) /* ty=Tensor[(4507), int64] */;
    %1322 = (%1321, %1302);
    %1323 = adv_index(%1322) /* ty=Tensor[(?), int64] */;
    %1324 = expand_dims(%1323, axis=-1) /* ty=Tensor[(?, 1), int64] */;
    %1325 = cast(%1324, dtype="float32") /* ty=Tensor[(?, 1), float32] */;
    %1326 = (%1235, %1184, %1270);
    %1327 = adv_index(%1326) /* ty=Tensor[(1, 4507), float32] */;
    %1328 = split(%1327, indices_or_sections=1) /* ty=(Tensor[(1, 4507), float32],) */;
    %1329 = %1328.0;
    %1330 = squeeze(%1329, axis=[0]) /* ty=Tensor[(4507), float32] */;
    %1331 = (%1330, %1302);
    %1332 = adv_index(%1331) /* ty=Tensor[(?), float32] */;
    %1333 = min(%1332) /* ty=float32 */;
    %1334 = subtract(%1332, %1333) /* ty=Tensor[(?), float32] */;
    %1335 = add(%1334, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %1336 = expand_dims(%1335, axis=-1) /* ty=Tensor[(?, 1), float32] */;
    %1337 = (%1325, %1336, %1304);
    %1338 = concatenate(%1337, axis=-1) /* ty=Tensor[(?, 6), float32] */;
    %1339 = expand_dims(%1338, axis=0) /* ty=Tensor[(1, ?, 6), float32] */;
    %1340 = shape_of(%1335, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1341 = squeeze(%1340) /* ty=int32 */;
    %1342 = arange(0 /* ty=int32 */, %1341, 1 /* ty=int32 */, start=meta[relay.Constant][44], stop=meta[relay.Call][0], step=meta[relay.Constant][45], dtype="int32") /* ty=Tensor[(?), int32] */;
    %1343 = expand_dims(%1342, axis=0) /* ty=Tensor[(1, ?), int32] */;
    %1344 = vision.non_max_suppression(%1339, %1340, %1343, 1000 /* ty=int32 */, 0.7f /* ty=float32 */, meta[relay.attrs.NonMaximumSuppressionAttrs][0]) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */;
    %1345 = %1344.0;
    %1346 = squeeze(%1345, axis=[0]) /* ty=Tensor[(?), int32] */;
    %1347 = cast_like(0 /* ty=int32 */, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
    %1348 = less(meta[relay.Constant][46] /* ty=Tensor[(1), int32] */, %1347) /* ty=Tensor[(1), bool] */;
    %1349 = shape_of(%1346, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1350 = cast_like(%1349, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1351 = add(meta[relay.Constant][46] /* ty=Tensor[(1), int32] */, %1350) /* ty=Tensor[(1), int32] */;
    %1352 = where(%1348, %1351, meta[relay.Constant][46] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1353 = %1344.1;
    %1354 = squeeze(%1353, axis=[1]) /* ty=Tensor[(1), int32] */;
    %1355 = dyn.strided_slice(%1346, %1352, %1354, meta[relay.Constant][47] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None, slice_mode="size") /* ty=Tensor[(?), int32] */;
    cast(%1355, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %1357 = (%1304, %1356);
  %1358 = adv_index(%1357) /* ty=Tensor[(?, 4), float32] */;
  %1359 = cast_like(0 /* ty=int32 */, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1360 = less(meta[relay.Constant][48] /* ty=Tensor[(2), int32] */, %1359) /* ty=Tensor[(2), bool] */;
  %1361 = shape_of(%1358, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1362 = cast_like(%1361, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1363 = add(meta[relay.Constant][48] /* ty=Tensor[(2), int32] */, %1362) /* ty=Tensor[(2), int32] */;
  %1364 = where(%1360, %1363, meta[relay.Constant][48] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1365 = shape_of(%1358, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1366 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1367 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1368 = scatter(%1365, %1366, %1367, meta[relay.attrs.ScatterAttrs][0]) /* ty=Tensor[(2), int32] */;
  %1369 = cast(%1368, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1370 = dyn.strided_slice(%1358, %1364, %1369, meta[relay.Constant][49] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1371 = full_like(%1370, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
  %1372 = (%1371,);
  %1373 = concatenate(%1372) /* ty=Tensor[(?, ?), float32] */;
  %1374 = (%1358,);
  %1375 = concatenate(%1374) /* ty=Tensor[(?, 4), float32] */;
  %1376 = (%1373, %1375);
  %1377 = concatenate(%1376, axis=1) /* ty=Tensor[(?, ?), float32] */;
  %1378 = take(%1358, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1379 = take(%1358, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1380 = subtract(%1378, %1379) /* ty=Tensor[(?), float32] */;
  %1381 = take(%1358, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1382 = take(%1358, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1383 = subtract(%1381, %1382) /* ty=Tensor[(?), float32] */;
  %1384 = multiply(%1380, %1383) /* ty=Tensor[(?), float32] */;
  %1385 = (%1384,);
  %1386 = concatenate(%1385) /* ty=Tensor[(?), float32] */;
  %1387 = sqrt(%1386) /* ty=Tensor[(?), float32] */;
  %1388 = divide(%1387, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1389 = log2(%1388) /* ty=Tensor[(?), float32] */;
  %1390 = add(%1389, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1391 = add(%1390, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1392 = floor(%1391) /* ty=Tensor[(?), float32] */;
  %1393 = clip(%1392, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
  %1394 = cast(%1393, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1395 = subtract(%1394, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */;
  %1396 = equal(%1395, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1397 = argwhere(%1396) /* ty=Tensor[(?, 1), int32] */;
  %1398 = split(%1397, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1399 = %1398.0;
  %1400 = squeeze(%1399, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1401 = cast(%1400, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1402 = (%1377, %1401);
  %1403 = adv_index(%1402) /* ty=Tensor[(?, ?), float32] */;
  %1404 = vision.roi_align(%918, %1403, meta[relay.attrs.ROIAlignAttrs][0]) /* ty=Tensor[(?, 7, 7, 256), float32] */;
  %1405 = equal(%1395, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1406 = argwhere(%1405) /* ty=Tensor[(?, 1), int32] */;
  %1407 = split(%1406, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1408 = %1407.0;
  %1409 = squeeze(%1408, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1410 = cast(%1409, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1411 = (%1377, %1410);
  %1412 = adv_index(%1411) /* ty=Tensor[(?, ?), float32] */;
  %1413 = vision.roi_align(%941, %1412, meta[relay.attrs.ROIAlignAttrs][1]) /* ty=Tensor[(?, 7, 7, 256), float32] */;
  %1414 = equal(%1395, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1415 = argwhere(%1414) /* ty=Tensor[(?, 1), int32] */;
  %1416 = split(%1415, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1417 = %1416.0;
  %1418 = squeeze(%1417, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1419 = cast(%1418, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1420 = (%1377, %1419);
  %1421 = adv_index(%1420) /* ty=Tensor[(?, ?), float32] */;
  %1422 = vision.roi_align(%962, %1421, meta[relay.attrs.ROIAlignAttrs][2]) /* ty=Tensor[(?, 7, 7, 256), float32] */;
  %1423 = equal(%1395, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1424 = argwhere(%1423) /* ty=Tensor[(?, 1), int32] */;
  %1425 = split(%1424, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1426 = %1425.0;
  %1427 = squeeze(%1426, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1428 = cast(%1427, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1429 = (%1377, %1428);
  %1430 = adv_index(%1429) /* ty=Tensor[(?, ?), float32] */;
  %1431 = vision.roi_align(%983, %1430, meta[relay.attrs.ROIAlignAttrs][3]) /* ty=Tensor[(?, 7, 7, 256), float32] */;
  %1432 = (%1404, %1413, %1422, %1431);
  %1433 = concatenate(%1432) /* ty=Tensor[(?, 7, 7, 256), float32] */;
  %1434 = layout_transform(%1433, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1435 = equal(%1395, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1436 = argwhere(%1435) /* ty=Tensor[(?, 1), int32] */;
  %1437 = split(%1436, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1438 = %1437.0;
  %1439 = squeeze(%1438, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1440 = cast(%1439, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1441 = equal(%1395, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1442 = argwhere(%1441) /* ty=Tensor[(?, 1), int32] */;
  %1443 = split(%1442, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1444 = %1443.0;
  %1445 = squeeze(%1444, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1446 = cast(%1445, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1447 = equal(%1395, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1448 = argwhere(%1447) /* ty=Tensor[(?, 1), int32] */;
  %1449 = split(%1448, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1450 = %1449.0;
  %1451 = squeeze(%1450, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1452 = cast(%1451, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1453 = equal(%1395, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1454 = argwhere(%1453) /* ty=Tensor[(?, 1), int32] */;
  %1455 = split(%1454, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1456 = %1455.0;
  %1457 = squeeze(%1456, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1458 = cast(%1457, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1459 = (%1440, %1446, %1452, %1458);
  %1460 = concatenate(%1459) /* ty=Tensor[(?), int64] */;
  %1461 = argsort(%1460, dtype="int32") /* ty=Tensor[(?), int32] */;
  %1462 = cast(%1461, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1463 = take(%1434, %1462, axis=0) /* ty=Tensor[(?, 256, 7, 7), float32] */;
  %1464 = reshape(%1463, newshape=[0, -1, 1, 1]) /* ty=Tensor[(?, 12544, 1, 1), float32] */;
  %1465 = squeeze(%1464, axis=[2, 3]) /* ty=Tensor[(?, 12544), float32] */;
  %1466 = transpose(%model.roi_heads.box_head.fc6.weight, axes=[1, 0]) /* ty=Tensor[(12544, 1024), float32] */;
  %1467 = transpose(%1466, axes=[1, 0]) /* ty=Tensor[(1024, 12544), float32] */;
  %1468 = nn.dense(%1465, %1467, units=1024) /* ty=Tensor[(?, 1024), float32] */;
  %1469 = add(%1468, %model.roi_heads.box_head.fc6.bias) /* ty=Tensor[(?, 1024), float32] */;
  %1470 = nn.relu(%1469) /* ty=Tensor[(?, 1024), float32] */;
  %1471 = transpose(%model.roi_heads.box_head.fc7.weight, axes=[1, 0]) /* ty=Tensor[(1024, 1024), float32] */;
  %1472 = transpose(%1471, axes=[1, 0]) /* ty=Tensor[(1024, 1024), float32] */;
  %1473 = nn.dense(%1470, %1472, units=1024) /* ty=Tensor[(?, 1024), float32] */;
  %1474 = add(%1473, %model.roi_heads.box_head.fc7.bias) /* ty=Tensor[(?, 1024), float32] */;
  %1475 = nn.relu(%1474) /* ty=Tensor[(?, 1024), float32] */;
  %1476 = reshape(%1475, newshape=[0, -1]) /* ty=Tensor[(?, 1024), float32] */;
  %1477 = transpose(%model.roi_heads.box_predictor.bbox_pred.weight, axes=[1, 0]) /* ty=Tensor[(1024, 364), float32] */;
  %1478 = transpose(%1477, axes=[1, 0]) /* ty=Tensor[(364, 1024), float32] */;
  %1479 = nn.dense(%1476, %1478, units=364) /* ty=Tensor[(?, 364), float32] */;
  %1480 = add(%1479, %model.roi_heads.box_predictor.bbox_pred.bias) /* ty=Tensor[(?, 364), float32] */;
  %1481 = shape_of(%1358, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1482 = take(%1481, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1483 = add(%1482, 0 /* ty=int32 */) /* ty=int32 */;
  %1484 = cast(%1483, dtype="int64") /* ty=int64 */;
  %1485 = expand_dims(%1484, axis=0) /* ty=Tensor[(1), int64] */;
  %1486 = expand_dims(-1 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1487 = (%1485, %1486);
  %1488 = concatenate(%1487) /* ty=Tensor[(2), int64] */;
  %1489 = dyn.reshape(%1480, %1488, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1490 = cast_like(0 /* ty=int32 */, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1491 = less(meta[relay.Constant][50] /* ty=Tensor[(2), int32] */, %1490) /* ty=Tensor[(2), bool] */;
  %1492 = shape_of(%1489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1493 = cast_like(%1492, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1494 = add(meta[relay.Constant][50] /* ty=Tensor[(2), int32] */, %1493) /* ty=Tensor[(2), int32] */;
  %1495 = where(%1491, %1494, meta[relay.Constant][50] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1496 = shape_of(%1489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1497 = cast(%1496, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1498 = dyn.strided_slice(%1489, %1495, %1497, meta[relay.Constant][51] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1499 = divide(%1498, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1500 = (%1358,);
  %1501 = concatenate(%1500) /* ty=Tensor[(?, 4), float32] */;
  %1502 = take(%1501, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1503 = take(%1501, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1504 = subtract(%1502, %1503) /* ty=Tensor[(?), float32] */;
  %1505 = expand_dims(%1504, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1506 = multiply(%1499, %1505) /* ty=Tensor[(?, ?), float32] */;
  %1507 = take(%1501, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1508 = multiply(%1504, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1509 = add(%1507, %1508) /* ty=Tensor[(?), float32] */;
  %1510 = expand_dims(%1509, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1511 = add(%1506, %1510) /* ty=Tensor[(?, ?), float32] */;
  %1512 = cast_like(0 /* ty=int32 */, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1513 = less(meta[relay.Constant][52] /* ty=Tensor[(2), int32] */, %1512) /* ty=Tensor[(2), bool] */;
  %1514 = shape_of(%1489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1515 = cast_like(%1514, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1516 = add(meta[relay.Constant][52] /* ty=Tensor[(2), int32] */, %1515) /* ty=Tensor[(2), int32] */;
  %1517 = where(%1513, %1516, meta[relay.Constant][52] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1518 = shape_of(%1489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1519 = cast(%1518, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1520 = dyn.strided_slice(%1489, %1517, %1519, meta[relay.Constant][53] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1521 = divide(%1520, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1522 = clip(%1521, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
  %1523 = exp(%1522) /* ty=Tensor[(?, ?), float32] */;
  %1524 = expand_dims(%1504, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1525 = multiply(%1523, %1524) /* ty=Tensor[(?, ?), float32] */;
  %1526 = multiply(0.5f /* ty=float32 */, %1525) /* ty=Tensor[(?, ?), float32] */;
  %1527 = subtract(%1511, %1526) /* ty=Tensor[(?, ?), float32] */;
  %1528 = cast_like(0 /* ty=int32 */, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1529 = less(meta[relay.Constant][54] /* ty=Tensor[(2), int32] */, %1528) /* ty=Tensor[(2), bool] */;
  %1530 = shape_of(%1489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1531 = cast_like(%1530, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1532 = add(meta[relay.Constant][54] /* ty=Tensor[(2), int32] */, %1531) /* ty=Tensor[(2), int32] */;
  %1533 = where(%1529, %1532, meta[relay.Constant][54] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1534 = shape_of(%1489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1535 = cast(%1534, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1536 = dyn.strided_slice(%1489, %1533, %1535, meta[relay.Constant][55] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1537 = divide(%1536, 10f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1538 = take(%1501, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1539 = take(%1501, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1540 = subtract(%1538, %1539) /* ty=Tensor[(?), float32] */;
  %1541 = expand_dims(%1540, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1542 = multiply(%1537, %1541) /* ty=Tensor[(?, ?), float32] */;
  %1543 = take(%1501, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1544 = multiply(%1540, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1545 = add(%1543, %1544) /* ty=Tensor[(?), float32] */;
  %1546 = expand_dims(%1545, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1547 = add(%1542, %1546) /* ty=Tensor[(?, ?), float32] */;
  %1548 = cast_like(0 /* ty=int32 */, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1549 = less(meta[relay.Constant][56] /* ty=Tensor[(2), int32] */, %1548) /* ty=Tensor[(2), bool] */;
  %1550 = shape_of(%1489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1551 = cast_like(%1550, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1552 = add(meta[relay.Constant][56] /* ty=Tensor[(2), int32] */, %1551) /* ty=Tensor[(2), int32] */;
  %1553 = where(%1549, %1552, meta[relay.Constant][56] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1554 = shape_of(%1489, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1555 = cast(%1554, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1556 = dyn.strided_slice(%1489, %1553, %1555, meta[relay.Constant][57] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1557 = divide(%1556, 5f /* ty=float32 */) /* ty=Tensor[(?, ?), float32] */;
  %1558 = clip(%1557, a_min=-3.40282e+38f, a_max=4.13517f) /* ty=Tensor[(?, ?), float32] */;
  %1559 = exp(%1558) /* ty=Tensor[(?, ?), float32] */;
  %1560 = expand_dims(%1540, axis=1) /* ty=Tensor[(?, 1), float32] */;
  %1561 = multiply(%1559, %1560) /* ty=Tensor[(?, ?), float32] */;
  %1562 = multiply(0.5f /* ty=float32 */, %1561) /* ty=Tensor[(?, ?), float32] */;
  %1563 = subtract(%1547, %1562) /* ty=Tensor[(?, ?), float32] */;
  %1564 = multiply(0.5f /* ty=float32 */, %1525) /* ty=Tensor[(?, ?), float32] */;
  %1565 = add(%1511, %1564) /* ty=Tensor[(?, ?), float32] */;
  %1566 = multiply(0.5f /* ty=float32 */, %1561) /* ty=Tensor[(?, ?), float32] */;
  %1567 = add(%1547, %1566) /* ty=Tensor[(?, ?), float32] */;
  %1568 = (%1527, %1563, %1565, %1567);
  %1569 = stack(%1568, axis=2) /* ty=Tensor[(?, ?, 4), float32] */;
  %1570 = reshape(%1569, newshape=[0, -1, 1]) /* ty=Tensor[(?, ?, 1), float32] */;
  %1571 = squeeze(%1570, axis=[2]) /* ty=Tensor[(?, ?), float32] */;
  %1572 = cast(%1483, dtype="int64") /* ty=int64 */;
  %1573 = expand_dims(%1572, axis=0) /* ty=Tensor[(1), int64] */;
  %1574 = expand_dims(-1 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1575 = expand_dims(4 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
  %1576 = (%1573, %1574, %1575);
  %1577 = concatenate(%1576) /* ty=Tensor[(3), int64] */;
  %1578 = dyn.reshape(%1571, %1577, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1579 = cast_like(0 /* ty=int32 */, meta[relay.Constant][58] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1580 = less(meta[relay.Constant][58] /* ty=Tensor[(3), int32] */, %1579) /* ty=Tensor[(3), bool] */;
  %1581 = shape_of(%1578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1582 = cast_like(%1581, meta[relay.Constant][58] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1583 = add(meta[relay.Constant][58] /* ty=Tensor[(3), int32] */, %1582) /* ty=Tensor[(3), int32] */;
  %1584 = where(%1580, %1583, meta[relay.Constant][58] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1585 = shape_of(%1578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1586 = cast(%1585, dtype="int64") /* ty=Tensor[(3), int64] */;
  %1587 = dyn.strided_slice(%1578, %1584, %1586, meta[relay.Constant][59] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %1588 = maximum(%1587, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
  %1589 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1590 = minimum(%1588, %1589) /* ty=Tensor[(?, ?, ?), float32] */;
  %1591 = cast_like(0 /* ty=int32 */, meta[relay.Constant][60] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1592 = less(meta[relay.Constant][60] /* ty=Tensor[(3), int32] */, %1591) /* ty=Tensor[(3), bool] */;
  %1593 = shape_of(%1578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1594 = cast_like(%1593, meta[relay.Constant][60] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1595 = add(meta[relay.Constant][60] /* ty=Tensor[(3), int32] */, %1594) /* ty=Tensor[(3), int32] */;
  %1596 = where(%1592, %1595, meta[relay.Constant][60] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1597 = shape_of(%1578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1598 = cast(%1597, dtype="int64") /* ty=Tensor[(3), int64] */;
  %1599 = dyn.strided_slice(%1578, %1596, %1598, meta[relay.Constant][61] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %1600 = maximum(%1599, 0f /* ty=float32 */) /* ty=Tensor[(?, ?, ?), float32] */;
  %1601 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1602 = minimum(%1600, %1601) /* ty=Tensor[(?, ?, ?), float32] */;
  %1603 = (%1590, %1602);
  %1604 = stack(%1603, axis=3) /* ty=Tensor[(?, ?, ?, 2), float32] */;
  %1605 = shape_of(%1578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1606 = take(%1605, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1607 = cast(%1606, dtype="int64") /* ty=int64 */;
  %1608 = expand_dims(%1607, axis=0) /* ty=Tensor[(1), int64] */;
  %1609 = shape_of(%1578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1610 = take(%1609, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1611 = cast(%1610, dtype="int64") /* ty=int64 */;
  %1612 = expand_dims(%1611, axis=0) /* ty=Tensor[(1), int64] */;
  %1613 = shape_of(%1578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1614 = take(%1613, 2 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1615 = cast(%1614, dtype="int64") /* ty=int64 */;
  %1616 = expand_dims(%1615, axis=0) /* ty=Tensor[(1), int64] */;
  %1617 = (%1608, %1612, %1616);
  %1618 = concatenate(%1617) /* ty=Tensor[(3), int64] */;
  %1619 = dyn.reshape(%1604, %1618, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1620 = cast_like(0 /* ty=int32 */, meta[relay.Constant][62] /* ty=Tensor[(3), int32] */) /* ty=int32 */;
  %1621 = less(meta[relay.Constant][62] /* ty=Tensor[(3), int32] */, %1620) /* ty=Tensor[(3), bool] */;
  %1622 = shape_of(%1619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1623 = cast_like(%1622, meta[relay.Constant][62] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1624 = add(meta[relay.Constant][62] /* ty=Tensor[(3), int32] */, %1623) /* ty=Tensor[(3), int32] */;
  %1625 = where(%1621, %1624, meta[relay.Constant][62] /* ty=Tensor[(3), int32] */) /* ty=Tensor[(3), int32] */;
  %1626 = shape_of(%1619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1627 = cast(%1626, dtype="int64") /* ty=Tensor[(3), int64] */;
  %1628 = dyn.strided_slice(%1619, %1625, %1627, meta[relay.Constant][63] /* ty=Tensor[(3), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?, ?), float32] */;
  %1629 = reshape(%1628, newshape=[-1, 4]) /* ty=Tensor[(?, 4), float32] */;
  %1630 = transpose(%model.roi_heads.box_predictor.cls_score.weight, axes=[1, 0]) /* ty=Tensor[(1024, 91), float32] */;
  %1631 = transpose(%1630, axes=[1, 0]) /* ty=Tensor[(91, 1024), float32] */;
  %1632 = nn.dense(%1476, %1631, units=91) /* ty=Tensor[(?, 91), float32] */;
  %1633 = add(%1632, %model.roi_heads.box_predictor.cls_score.bias) /* ty=Tensor[(?, 91), float32] */;
  %1634 = nn.softmax(%1633) /* ty=Tensor[(?, 91), float32] */;
  %1635 = cast_like(0 /* ty=int32 */, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1636 = less(meta[relay.Constant][64] /* ty=Tensor[(2), int32] */, %1635) /* ty=Tensor[(2), bool] */;
  %1637 = shape_of(%1634, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1638 = cast_like(%1637, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1639 = add(meta[relay.Constant][64] /* ty=Tensor[(2), int32] */, %1638) /* ty=Tensor[(2), int32] */;
  %1640 = where(%1636, %1639, meta[relay.Constant][64] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1641 = shape_of(%1634, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1642 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1643 = expand_dims(91 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1644 = scatter(%1641, %1642, %1643, meta[relay.attrs.ScatterAttrs][1]) /* ty=Tensor[(2), int32] */;
  %1645 = cast(%1644, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1646 = dyn.strided_slice(%1634, %1640, %1645, meta[relay.Constant][65] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1647 = reshape(%1646, newshape=[-1]) /* ty=Tensor[(?), float32] */;
  %1648 = greater(%1647, 0.05f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %1649 = argwhere(%1648) /* ty=Tensor[(?, 1), int32] */;
  %1650 = split(%1649, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1651 = %1650.0;
  %1652 = squeeze(%1651, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1653 = cast(%1652, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1654 = (%1629, %1653);
  %1655 = adv_index(%1654) /* ty=Tensor[(?, 4), float32] */;
  %1656 = take(%1655, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1657 = take(%1655, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1658 = subtract(%1656, %1657) /* ty=Tensor[(?), float32] */;
  %1659 = greater_equal(%1658, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %1660 = cast(%1659, dtype="bool") /* ty=Tensor[(?), bool] */;
  %1661 = take(%1655, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1662 = take(%1655, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1663 = subtract(%1661, %1662) /* ty=Tensor[(?), float32] */;
  %1664 = greater_equal(%1663, 0.01f /* ty=float32 */) /* ty=Tensor[(?), bool] */;
  %1665 = cast(%1664, dtype="bool") /* ty=Tensor[(?), bool] */;
  %1666 = logical_and(%1660, %1665) /* ty=Tensor[(?), bool] */;
  %1667 = argwhere(%1666) /* ty=Tensor[(?, 1), int32] */;
  %1668 = split(%1667, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1669 = %1668.0;
  %1670 = squeeze(%1669, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1671 = cast(%1670, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1672 = (%1655, %1671);
  %1673 = adv_index(%1672) /* ty=Tensor[(?, 4), float32] */;
  %1674 = ndarray_size(%1673, dtype="int32") /* ty=int32 */;
  %1675 = equal(%1674, 0 /* ty=int32 */) /* ty=bool */;
  %1726 = if (%1675) {
    zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
  } else {
    %1676 = arange(0 /* ty=int64 */, 91 /* ty=int64 */, 1 /* ty=int64 */, start=meta[relay.Constant][66], stop=meta[relay.Constant][67], step=meta[relay.Constant][68], dtype="int64") /* ty=Tensor[(91), int64] */;
    %1677 = reshape(%1676, newshape=[1, -1]) /* ty=Tensor[(1, 91), int64] */;
    %1678 = cast(%1634, dtype="int64") /* ty=Tensor[(?, 91), int64] */;
    %1679 = broadcast_to_like(%1677, %1678) /* ty=Tensor[(?, 91), int64] */;
    %1680 = cast_like(0 /* ty=int32 */, meta[relay.Constant][69] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
    %1681 = less(meta[relay.Constant][69] /* ty=Tensor[(2), int32] */, %1680) /* ty=Tensor[(2), bool] */;
    %1682 = shape_of(%1679, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1683 = cast_like(%1682, meta[relay.Constant][69] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
    %1684 = add(meta[relay.Constant][69] /* ty=Tensor[(2), int32] */, %1683) /* ty=Tensor[(2), int32] */;
    %1685 = where(%1681, %1684, meta[relay.Constant][69] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
    %1686 = shape_of(%1679, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1687 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
    %1688 = expand_dims(91 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
    %1689 = scatter(%1686, %1687, %1688, meta[relay.attrs.ScatterAttrs][2]) /* ty=Tensor[(2), int32] */;
    %1690 = cast(%1689, dtype="int64") /* ty=Tensor[(2), int64] */;
    %1691 = dyn.strided_slice(%1679, %1685, %1690, meta[relay.Constant][70] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), int64] */;
    %1692 = reshape(%1691, newshape=[-1]) /* ty=Tensor[(?), int64] */;
    %1693 = (%1692, %1653);
    %1694 = adv_index(%1693) /* ty=Tensor[(?), int64] */;
    %1695 = (%1694, %1671);
    %1696 = adv_index(%1695) /* ty=Tensor[(?), int64] */;
    %1697 = expand_dims(%1696, axis=-1) /* ty=Tensor[(?, 1), int64] */;
    %1698 = cast(%1697, dtype="float32") /* ty=Tensor[(?, 1), float32] */;
    %1699 = (%1647, %1653);
    %1700 = adv_index(%1699) /* ty=Tensor[(?), float32] */;
    %1701 = (%1700, %1671);
    %1702 = adv_index(%1701) /* ty=Tensor[(?), float32] */;
    %1703 = min(%1702) /* ty=float32 */;
    %1704 = subtract(%1702, %1703) /* ty=Tensor[(?), float32] */;
    %1705 = add(%1704, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %1706 = expand_dims(%1705, axis=-1) /* ty=Tensor[(?, 1), float32] */;
    %1707 = (%1698, %1706, %1673);
    %1708 = concatenate(%1707, axis=-1) /* ty=Tensor[(?, 6), float32] */;
    %1709 = expand_dims(%1708, axis=0) /* ty=Tensor[(1, ?, 6), float32] */;
    %1710 = shape_of(%1705, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1711 = squeeze(%1710) /* ty=int32 */;
    %1712 = arange(0 /* ty=int32 */, %1711, 1 /* ty=int32 */, start=meta[relay.Constant][71], stop=meta[relay.Call][1], step=meta[relay.Constant][72], dtype="int32") /* ty=Tensor[(?), int32] */;
    %1713 = expand_dims(%1712, axis=0) /* ty=Tensor[(1, ?), int32] */;
    %1714 = vision.non_max_suppression(%1709, %1710, %1713, 100 /* ty=int32 */, 0.5f /* ty=float32 */, meta[relay.attrs.NonMaximumSuppressionAttrs][1]) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */;
    %1715 = %1714.0;
    %1716 = squeeze(%1715, axis=[0]) /* ty=Tensor[(?), int32] */;
    %1717 = cast_like(0 /* ty=int32 */, meta[relay.Constant][73] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
    %1718 = less(meta[relay.Constant][73] /* ty=Tensor[(1), int32] */, %1717) /* ty=Tensor[(1), bool] */;
    %1719 = shape_of(%1716, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1720 = cast_like(%1719, meta[relay.Constant][73] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1721 = add(meta[relay.Constant][73] /* ty=Tensor[(1), int32] */, %1720) /* ty=Tensor[(1), int32] */;
    %1722 = where(%1718, %1721, meta[relay.Constant][73] /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %1723 = %1714.1;
    %1724 = squeeze(%1723, axis=[1]) /* ty=Tensor[(1), int32] */;
    %1725 = dyn.strided_slice(%1716, %1722, %1724, meta[relay.Constant][74] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None, slice_mode="size") /* ty=Tensor[(?), int32] */;
    cast(%1725, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %1727 = (%1673, %1726);
  %1728 = adv_index(%1727) /* ty=Tensor[(?, 4), float32] */;
  %1729 = split(%1728, indices_or_sections=4, axis=1) /* ty=(Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32]) */;
  %1730 = %1729.0;
  %1731 = squeeze(%1730, axis=[1]) /* ty=Tensor[(?), float32] */;
  %1732 = cast(150 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1733 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1734 = divide(%1732, %1733) /* ty=float32 */;
  %1735 = multiply(%1731, %1734) /* ty=Tensor[(?), float32] */;
  %1736 = %1729.1;
  %1737 = squeeze(%1736, axis=[1]) /* ty=Tensor[(?), float32] */;
  %1738 = cast(150 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1739 = cast(800 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %1740 = divide(%1738, %1739) /* ty=float32 */;
  %1741 = multiply(%1737, %1740) /* ty=Tensor[(?), float32] */;
  %1742 = %1729.2;
  %1743 = squeeze(%1742, axis=[1]) /* ty=Tensor[(?), float32] */;
  %1744 = multiply(%1743, %1734) /* ty=Tensor[(?), float32] */;
  %1745 = %1729.3;
  %1746 = squeeze(%1745, axis=[1]) /* ty=Tensor[(?), float32] */;
  %1747 = multiply(%1746, %1740) /* ty=Tensor[(?), float32] */;
  %1748 = (%1735, %1741, %1744, %1747);
  %1749 = stack(%1748, axis=1) /* ty=Tensor[(?, 4), float32] */;
  %1750 = (%1702, %1726);
  %1751 = adv_index(%1750) /* ty=Tensor[(?), float32] */;
  %1752 = (%1696, %1726);
  %1753 = adv_index(%1752) /* ty=Tensor[(?), int64] */;
  %1754 = full(0 /* ty=int32 */, shape=[0, 150, 150], dtype="float32") /* ty=Tensor[(0, 150, 150), float32] */;
  %1755 = take(%1728, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1756 = take(%1728, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1757 = subtract(%1755, %1756) /* ty=Tensor[(?), float32] */;
  %1758 = take(%1728, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1759 = take(%1728, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1760 = subtract(%1758, %1759) /* ty=Tensor[(?), float32] */;
  %1761 = multiply(%1757, %1760) /* ty=Tensor[(?), float32] */;
  %1762 = (%1761,);
  %1763 = concatenate(%1762) /* ty=Tensor[(?), float32] */;
  %1764 = sqrt(%1763) /* ty=Tensor[(?), float32] */;
  %1765 = divide(%1764, 224f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1766 = log2(%1765) /* ty=Tensor[(?), float32] */;
  %1767 = add(%1766, 4f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1768 = add(%1767, 1e-06f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1769 = floor(%1768) /* ty=Tensor[(?), float32] */;
  %1770 = clip(%1769, a_min=2f, a_max=5f) /* ty=Tensor[(?), float32] */;
  %1771 = cast(%1770, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1772 = subtract(%1771, 2 /* ty=int64 */) /* ty=Tensor[(?), int64] */;
  %1773 = shape_of(%1772, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1774 = take(%1773, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1775 = expand_dims(%1774, axis=0) /* ty=Tensor[(1), int32] */;
  %1776 = cast(%1775, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1777 = expand_dims(256 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1778 = cast(%1777, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1779 = expand_dims(14 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1780 = cast(%1779, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1781 = expand_dims(14 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1782 = cast(%1781, dtype="int64") /* ty=Tensor[(1), int64] */;
  %1783 = (%1776, %1778, %1780, %1782);
  %1784 = concatenate(%1783) /* ty=Tensor[(4), int64] */;
  %1785 = dyn.full(0 /* ty=int32 */, %1784, shape=None, dtype="float32") /* ty=Tensor[(?, ?, ?, ?), float32] */;
  %1786 = reshape(%1785, newshape=[0, 256, 14, 14]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1787 = equal(%1772, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1788 = argwhere(%1787) /* ty=Tensor[(?, 1), int32] */;
  %1789 = split(%1788, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1790 = %1789.0;
  %1791 = squeeze(%1790, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1792 = reshape(%1791, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1793 = repeat(%1792, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1794 = repeat(%1793, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %1795 = repeat(%1794, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %1796 = cast_like(0 /* ty=int32 */, meta[relay.Constant][75] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
  %1797 = less(meta[relay.Constant][75] /* ty=Tensor[(2), int32] */, %1796) /* ty=Tensor[(2), bool] */;
  %1798 = shape_of(%1728, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1799 = cast_like(%1798, meta[relay.Constant][75] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1800 = add(meta[relay.Constant][75] /* ty=Tensor[(2), int32] */, %1799) /* ty=Tensor[(2), int32] */;
  %1801 = where(%1797, %1800, meta[relay.Constant][75] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
  %1802 = shape_of(%1728, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1803 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1804 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
  %1805 = scatter(%1802, %1803, %1804, meta[relay.attrs.ScatterAttrs][3]) /* ty=Tensor[(2), int32] */;
  %1806 = cast(%1805, dtype="int64") /* ty=Tensor[(2), int64] */;
  %1807 = dyn.strided_slice(%1728, %1801, %1806, meta[relay.Constant][76] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
  %1808 = full_like(%1807, 0 /* ty=int32 */) /* ty=Tensor[(?, ?), float32] */;
  %1809 = (%1808,);
  %1810 = concatenate(%1809) /* ty=Tensor[(?, ?), float32] */;
  %1811 = (%1728,);
  %1812 = concatenate(%1811) /* ty=Tensor[(?, 4), float32] */;
  %1813 = (%1810, %1812);
  %1814 = concatenate(%1813, axis=1) /* ty=Tensor[(?, ?), float32] */;
  %1815 = equal(%1772, 0 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1816 = argwhere(%1815) /* ty=Tensor[(?, 1), int32] */;
  %1817 = split(%1816, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1818 = %1817.0;
  %1819 = squeeze(%1818, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1820 = cast(%1819, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1821 = (%1814, %1820);
  %1822 = adv_index(%1821) /* ty=Tensor[(?, ?), float32] */;
  %1823 = vision.roi_align(%918, %1822, meta[relay.attrs.ROIAlignAttrs][4]) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1824 = layout_transform(%1823, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1825 = scatter(%1786, %1795, %1824, meta[relay.attrs.ScatterAttrs][4]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1826 = equal(%1772, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1827 = argwhere(%1826) /* ty=Tensor[(?, 1), int32] */;
  %1828 = split(%1827, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1829 = %1828.0;
  %1830 = squeeze(%1829, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1831 = reshape(%1830, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1832 = repeat(%1831, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1833 = repeat(%1832, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %1834 = repeat(%1833, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %1835 = equal(%1772, 1 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1836 = argwhere(%1835) /* ty=Tensor[(?, 1), int32] */;
  %1837 = split(%1836, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1838 = %1837.0;
  %1839 = squeeze(%1838, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1840 = cast(%1839, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1841 = (%1814, %1840);
  %1842 = adv_index(%1841) /* ty=Tensor[(?, ?), float32] */;
  %1843 = vision.roi_align(%941, %1842, meta[relay.attrs.ROIAlignAttrs][5]) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1844 = layout_transform(%1843, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1845 = scatter(%1825, %1834, %1844, meta[relay.attrs.ScatterAttrs][5]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1846 = equal(%1772, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1847 = argwhere(%1846) /* ty=Tensor[(?, 1), int32] */;
  %1848 = split(%1847, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1849 = %1848.0;
  %1850 = squeeze(%1849, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1851 = reshape(%1850, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1852 = repeat(%1851, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1853 = repeat(%1852, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %1854 = repeat(%1853, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %1855 = equal(%1772, 2 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1856 = argwhere(%1855) /* ty=Tensor[(?, 1), int32] */;
  %1857 = split(%1856, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1858 = %1857.0;
  %1859 = squeeze(%1858, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1860 = cast(%1859, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1861 = (%1814, %1860);
  %1862 = adv_index(%1861) /* ty=Tensor[(?, ?), float32] */;
  %1863 = vision.roi_align(%962, %1862, meta[relay.attrs.ROIAlignAttrs][6]) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1864 = layout_transform(%1863, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1865 = scatter(%1845, %1854, %1864, meta[relay.attrs.ScatterAttrs][6]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1866 = equal(%1772, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1867 = argwhere(%1866) /* ty=Tensor[(?, 1), int32] */;
  %1868 = split(%1867, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1869 = %1868.0;
  %1870 = squeeze(%1869, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1871 = reshape(%1870, newshape=[-1, 1, 1, 1]) /* ty=Tensor[(?, 1, 1, 1), int32] */;
  %1872 = repeat(%1871, repeats=256, axis=1) /* ty=Tensor[(?, 256, 1, 1), int32] */;
  %1873 = repeat(%1872, repeats=14, axis=2) /* ty=Tensor[(?, 256, 14, 1), int32] */;
  %1874 = repeat(%1873, repeats=14, axis=3) /* ty=Tensor[(?, 256, 14, 14), int32] */;
  %1875 = equal(%1772, 3 /* ty=int64 */) /* ty=Tensor[(?), bool] */;
  %1876 = argwhere(%1875) /* ty=Tensor[(?, 1), int32] */;
  %1877 = split(%1876, indices_or_sections=1, axis=1) /* ty=(Tensor[(?, 1), int32],) */;
  %1878 = %1877.0;
  %1879 = squeeze(%1878, axis=[1]) /* ty=Tensor[(?), int32] */;
  %1880 = cast(%1879, dtype="int64") /* ty=Tensor[(?), int64] */;
  %1881 = (%1814, %1880);
  %1882 = adv_index(%1881) /* ty=Tensor[(?, ?), float32] */;
  %1883 = vision.roi_align(%983, %1882, meta[relay.attrs.ROIAlignAttrs][7]) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1884 = layout_transform(%1883, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1885 = scatter(%1865, %1874, %1884, meta[relay.attrs.ScatterAttrs][7]) /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1886 = layout_transform(%1885, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1887 = layout_transform(%model.roi_heads.mask_head.mask_fcn1.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %1888 = nn.conv2d(%1886, %1887, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1889 = expand_dims(%model.roi_heads.mask_head.mask_fcn1.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %1890 = expand_dims(%1889, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1891 = layout_transform(%1890, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %1892 = add(%1888, %1891) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1893 = nn.relu(%1892) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1894 = layout_transform(%model.roi_heads.mask_head.mask_fcn2.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %1895 = nn.conv2d(%1893, %1894, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1896 = expand_dims(%model.roi_heads.mask_head.mask_fcn2.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %1897 = expand_dims(%1896, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1898 = layout_transform(%1897, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %1899 = add(%1895, %1898) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1900 = nn.relu(%1899) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1901 = layout_transform(%model.roi_heads.mask_head.mask_fcn3.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %1902 = nn.conv2d(%1900, %1901, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1903 = expand_dims(%model.roi_heads.mask_head.mask_fcn3.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %1904 = expand_dims(%1903, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1905 = layout_transform(%1904, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %1906 = add(%1902, %1905) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1907 = nn.relu(%1906) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1908 = layout_transform(%model.roi_heads.mask_head.mask_fcn4.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(3, 3, 256, 256), float32] */;
  %1909 = nn.conv2d(%1907, %1908, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1910 = expand_dims(%model.roi_heads.mask_head.mask_fcn4.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %1911 = expand_dims(%1910, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1912 = layout_transform(%1911, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 256), float32] */;
  %1913 = add(%1909, %1912) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1914 = nn.relu(%1913) /* ty=Tensor[(?, 14, 14, 256), float32] */;
  %1915 = layout_transform(%1914, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 256, 14, 14), float32] */;
  %1916 = nn.conv2d_transpose(%1915, %model.roi_heads.mask_predictor.conv5_mask.weight, channels=256, kernel_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(?, 256, 28, 28), float32] */;
  %1917 = expand_dims(%model.roi_heads.mask_predictor.conv5_mask.bias, axis=1, num_newaxis=2) /* ty=Tensor[(256, 1, 1), float32] */;
  %1918 = expand_dims(%1917, axis=0) /* ty=Tensor[(1, 256, 1, 1), float32] */;
  %1919 = add(%1916, %1918) /* ty=Tensor[(?, 256, 28, 28), float32] */;
  %1920 = nn.relu(%1919) /* ty=Tensor[(?, 256, 28, 28), float32] */;
  %1921 = layout_transform(%1920, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(?, 28, 28, 256), float32] */;
  %1922 = layout_transform(%model.roi_heads.mask_predictor.mask_fcn_logits.weight, src_layout="OIHW", dst_layout="HWIO") /* ty=Tensor[(1, 1, 256, 91), float32] */;
  %1923 = nn.conv2d(%1921, %1922, padding=[0, 0, 0, 0], channels=91, kernel_size=[1, 1], data_layout="NHWC", kernel_layout="HWIO") /* ty=Tensor[(?, 28, 28, 91), float32] */;
  %1924 = expand_dims(%model.roi_heads.mask_predictor.mask_fcn_logits.bias, axis=1, num_newaxis=2) /* ty=Tensor[(91, 1, 1), float32] */;
  %1925 = expand_dims(%1924, axis=0) /* ty=Tensor[(1, 91, 1, 1), float32] */;
  %1926 = layout_transform(%1925, src_layout="NCHW", dst_layout="NHWC") /* ty=Tensor[(1, 1, 1, 91), float32] */;
  %1927 = add(%1923, %1926) /* ty=Tensor[(?, 28, 28, 91), float32] */;
  %1928 = sigmoid(%1927) /* ty=Tensor[(?, 28, 28, 91), float32] */;
  %1929 = layout_transform(%1928, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 91, 28, 28), float32] */;
  %1930 = layout_transform(%1927, src_layout="NHWC", dst_layout="NCHW") /* ty=Tensor[(?, 91, 28, 28), float32] */;
  %1931 = shape_of(%1930, dtype="int32") /* ty=Tensor[(4), int32] */;
  %1932 = take(%1931, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
  %1933 = cast(%1932, dtype="int64") /* ty=int64 */;
  %1934 = arange(0 /* ty=int64 */, %1933, 1 /* ty=int64 */, start=meta[relay.Constant][77], stop=meta[relay.Call][2], step=meta[relay.Constant][78], dtype="int64") /* ty=Tensor[(?), int64] */;
  %1935 = (%1753,);
  %1936 = concatenate(%1935) /* ty=Tensor[(?), int64] */;
  %1937 = (%1929, %1934, %1936);
  %1938 = adv_index(%1937) /* ty=Tensor[(?, 28, 28), float32] */;
  %1939 = expand_dims(%1938, axis=1) /* ty=Tensor[(?, 1, 28, 28), float32] */;
  %1940 = nn.pad(%1939, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]]) /* ty=Tensor[(?, 1, 30, 30), float32] */;
  %1941 = take(%1749, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1942 = take(%1749, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1943 = add(%1941, %1942) /* ty=Tensor[(?), float32] */;
  %1944 = multiply(%1943, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1945 = take(%1749, 2 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1946 = take(%1749, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1947 = subtract(%1945, %1946) /* ty=Tensor[(?), float32] */;
  %1948 = multiply(%1947, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1949 = add(28 /* ty=int32 */, 2 /* ty=int32 */) /* ty=int32 */;
  %1950 = cast(%1949, dtype="int64") /* ty=int64 */;
  %1951 = cast(%1950, dtype="float32") /* ty=float32 */;
  %1952 = cast(28 /* ty=int32 */, dtype="int64") /* ty=int64 */;
  %1953 = cast(%1952, dtype="float32") /* ty=float32 */;
  %1954 = divide(%1951, %1953) /* ty=float32 */;
  %1955 = multiply(%1948, %1954) /* ty=Tensor[(?), float32] */;
  %1956 = subtract(%1944, %1955) /* ty=Tensor[(?), float32] */;
  %1957 = take(%1749, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1958 = take(%1749, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1959 = add(%1957, %1958) /* ty=Tensor[(?), float32] */;
  %1960 = multiply(%1959, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1961 = take(%1749, 3 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1962 = take(%1749, 1 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(?), float32] */;
  %1963 = subtract(%1961, %1962) /* ty=Tensor[(?), float32] */;
  %1964 = multiply(%1963, 0.5f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
  %1965 = multiply(%1964, %1954) /* ty=Tensor[(?), float32] */;
  %1966 = subtract(%1960, %1965) /* ty=Tensor[(?), float32] */;
  %1967 = add(%1944, %1955) /* ty=Tensor[(?), float32] */;
  %1968 = add(%1960, %1965) /* ty=Tensor[(?), float32] */;
  %1969 = (%1956, %1966, %1967, %1968);
  %1970 = stack(%1969, axis=1) /* ty=Tensor[(?, 4), float32] */;
  %1971 = cast(%1970, dtype="int64") /* ty=Tensor[(?, 4), int64] */;
  %2144 = (
    let %while_loop: fn (int32, Tensor[(?, 150, 150), float32], Tensor[(?, 1, 30, 30), float32], Tensor[(?, 4), int64]) -> (int32, Tensor[(?, 150, 150), float32], Tensor[(?, 1, 30, 30), float32], Tensor[(?, 4), int64]) = fn (%i.1: int32, %res_append.6: Tensor[(?, 150, 150), float32], %v7286: Tensor[(?, 1, 30, 30), float32], %v7394: Tensor[(?, 4), int64]) -> (int32, Tensor[(?, 150, 150), float32], Tensor[(?, 1, 30, 30), float32], Tensor[(?, 4), int64]) {
      %1972 = shape_of(%1940, dtype="int32") /* ty=Tensor[(4), int32] */;
      %1973 = take(%1972, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
      %1974 = less(%i.1, %1973) /* ty=bool */;
      if (%1974) {
        %1975 = add(%i.1, 1 /* ty=int32 */) /* ty=int32 */;
        %1976 = take(%v7394, %i.1, axis=0, mode="wrap") /* ty=Tensor[(4), int64] */;
        %1977 = take(%1976, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1978 = expand_dims(%1977, axis=0) /* ty=Tensor[(1), int64] */;
        %1979 = full(0 /* ty=int32 */, shape=[1], dtype="int64") /* ty=Tensor[(1), int64] */;
        %1980 = (%1978, %1979);
        %1981 = concatenate(%1980) /* ty=Tensor[(2), int64] */;
        %1982 = max(%1981) /* ty=int64 */;
        %1983 = expand_dims(%1982, axis=0) /* ty=Tensor[(1), int64] */;
        %1984 = cast(%1983, dtype="int64") /* ty=Tensor[(1), int64] */;
        %1985 = take(%v7286, %i.1, axis=0, mode="wrap") /* ty=Tensor[(1, 30, 30), float32] */;
        %1986 = take(%1985, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(30, 30), float32] */;
        %1987 = expand_dims(%1986, axis=0, num_newaxis=2) /* ty=Tensor[(1, 1, 30, 30), float32] */;
        %1988 = repeat(%1987, repeats=1, axis=0) /* ty=Tensor[(1, 1, 30, 30), float32] */;
        %1989 = repeat(%1988, repeats=1, axis=1) /* ty=Tensor[(1, 1, 30, 30), float32] */;
        %1990 = take(%1976, 3 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1991 = take(%1976, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %1992 = subtract(%1990, %1991) /* ty=int64 */;
        %1993 = full(1 /* ty=int32 */, shape=[1], dtype="int64") /* ty=Tensor[(1), int64] */;
        %1994 = add(%1992, %1993) /* ty=Tensor[(1), int64] */;
        %1995 = (%1994, %1993);
        %1996 = concatenate(%1995) /* ty=Tensor[(2), int64] */;
        %1997 = max(%1996) /* ty=int64 */;
        %1998 = expand_dims(%1997, axis=0) /* ty=Tensor[(1), int64] */;
        %1999 = take(%1976, 2 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2000 = take(%1976, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2001 = subtract(%1999, %2000) /* ty=int64 */;
        %2002 = add(%2001, %1993) /* ty=Tensor[(1), int64] */;
        %2003 = (%2002, %1993);
        %2004 = concatenate(%2003) /* ty=Tensor[(2), int64] */;
        %2005 = max(%2004) /* ty=int64 */;
        %2006 = expand_dims(%2005, axis=0) /* ty=Tensor[(1), int64] */;
        %2007 = (%1998, %2006);
        %2008 = concatenate(%2007) /* ty=Tensor[(2), int64] */;
        %2009 = dyn.image.resize(%1989, %2008, size=[]) /* ty=Tensor[(1, 1, ?, ?), float32] */;
        %2010 = take(%2009, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(1, ?, ?), float32] */;
        %2011 = take(%2010, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(?, ?), float32] */;
        %2012 = take(%1976, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2013 = subtract(%1982, %2012) /* ty=int64 */;
        %2014 = expand_dims(%2013, axis=0) /* ty=Tensor[(1), int64] */;
        %2015 = cast(%2014, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2016 = expand_dims(0 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %2017 = (%2015, %2016);
        %2018 = concatenate(%2017) /* ty=Tensor[(2), int64] */;
        %2019 = cast_like(0 /* ty=int32 */, %2018) /* ty=int64 */;
        %2020 = less(%2018, %2019) /* ty=Tensor[(2), bool] */;
        %2021 = shape_of(%2011, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2022 = cast_like(%2021, %2018) /* ty=Tensor[(2), int64] */;
        %2023 = add(%2018, %2022) /* ty=Tensor[(2), int64] */;
        %2024 = where(%2020, %2023, %2018) /* ty=Tensor[(2), int64] */;
        %2025 = shape_of(%2011, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2026 = cast(%2025, dtype="int64") /* ty=Tensor[(2), int64] */;
        %2027 = expand_dims(0 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2028 = take(%1976, 3 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2029 = expand_dims(%2028, axis=0) /* ty=Tensor[(1), int64] */;
        %2030 = add(%2029, %1993) /* ty=Tensor[(1), int64] */;
        %2031 = expand_dims(150 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %2032 = (%2030, %2031);
        %2033 = concatenate(%2032) /* ty=Tensor[(2), int64] */;
        %2034 = min(%2033) /* ty=int64 */;
        %2035 = take(%1976, 1 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2036 = subtract(%2034, %2035) /* ty=int64 */;
        %2037 = expand_dims(%2036, axis=0) /* ty=Tensor[(1), int64] */;
        %2038 = scatter(%2026, %2027, %2037, meta[relay.attrs.ScatterAttrs][8]) /* ty=Tensor[(2), int64] */;
        %2039 = dyn.strided_slice(%2011, %2024, %2038, meta[relay.Constant][79] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %2040 = expand_dims(0 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %2041 = take(%1976, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2042 = expand_dims(%2041, axis=0) /* ty=Tensor[(1), int64] */;
        %2043 = (%2042, %1979);
        %2044 = concatenate(%2043) /* ty=Tensor[(2), int64] */;
        %2045 = max(%2044) /* ty=int64 */;
        %2046 = take(%1976, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2047 = subtract(%2045, %2046) /* ty=int64 */;
        %2048 = expand_dims(%2047, axis=0) /* ty=Tensor[(1), int64] */;
        %2049 = cast(%2048, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2050 = (%2040, %2049);
        %2051 = concatenate(%2050) /* ty=Tensor[(2), int64] */;
        %2052 = cast_like(0 /* ty=int32 */, %2051) /* ty=int64 */;
        %2053 = less(%2051, %2052) /* ty=Tensor[(2), bool] */;
        %2054 = shape_of(%2039, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2055 = cast_like(%2054, %2051) /* ty=Tensor[(2), int64] */;
        %2056 = add(%2051, %2055) /* ty=Tensor[(2), int64] */;
        %2057 = where(%2053, %2056, %2051) /* ty=Tensor[(2), int64] */;
        %2058 = shape_of(%2039, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2059 = cast(%2058, dtype="int64") /* ty=Tensor[(2), int64] */;
        %2060 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2061 = take(%1976, 2 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2062 = expand_dims(%2061, axis=0) /* ty=Tensor[(1), int64] */;
        %2063 = add(%2062, %1993) /* ty=Tensor[(1), int64] */;
        %2064 = expand_dims(150 /* ty=int64 */, axis=0) /* ty=Tensor[(1), int64] */;
        %2065 = (%2063, %2064);
        %2066 = concatenate(%2065) /* ty=Tensor[(2), int64] */;
        %2067 = min(%2066) /* ty=int64 */;
        %2068 = take(%1976, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=int64 */;
        %2069 = subtract(%2067, %2068) /* ty=int64 */;
        %2070 = expand_dims(%2069, axis=0) /* ty=Tensor[(1), int64] */;
        %2071 = scatter(%2059, %2060, %2070, meta[relay.attrs.ScatterAttrs][9]) /* ty=Tensor[(2), int64] */;
        %2072 = dyn.strided_slice(%2039, %2057, %2071, meta[relay.Constant][80] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %2073 = shape_of(%2072, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2074 = take(%2073, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
        %2075 = expand_dims(%2074, axis=0) /* ty=Tensor[(1), int32] */;
        %2076 = cast(%2075, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2077 = (%1984, %2076);
        %2078 = concatenate(%2077) /* ty=Tensor[(2), int64] */;
        %2079 = dyn.full(0 /* ty=int32 */, %2078, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %2080 = reshape(%2079, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %2081 = subtract(150 /* ty=int64 */, %2034) /* ty=int64 */;
        %2082 = expand_dims(%2081, axis=0) /* ty=Tensor[(1), int64] */;
        %2083 = cast(%2082, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2084 = shape_of(%2072, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2085 = take(%2084, 1 /* ty=int32 */, axis=0) /* ty=int32 */;
        %2086 = expand_dims(%2085, axis=0) /* ty=Tensor[(1), int32] */;
        %2087 = cast(%2086, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2088 = (%2083, %2087);
        %2089 = concatenate(%2088) /* ty=Tensor[(2), int64] */;
        %2090 = dyn.full(0 /* ty=int32 */, %2089, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %2091 = reshape(%2090, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %2092 = (%2080, %2072, %2091);
        %2093 = concatenate(%2092) /* ty=Tensor[(?, ?), float32] */;
        %2094 = cast_like(0 /* ty=int32 */, meta[relay.Constant][81] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
        %2095 = less(meta[relay.Constant][81] /* ty=Tensor[(2), int32] */, %2094) /* ty=Tensor[(2), bool] */;
        %2096 = shape_of(%2093, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2097 = cast_like(%2096, meta[relay.Constant][81] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2098 = add(meta[relay.Constant][81] /* ty=Tensor[(2), int32] */, %2097) /* ty=Tensor[(2), int32] */;
        %2099 = where(%2095, %2098, meta[relay.Constant][81] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2100 = shape_of(%2093, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2101 = expand_dims(0 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2102 = expand_dims(150 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2103 = scatter(%2100, %2101, %2102, meta[relay.attrs.ScatterAttrs][10]) /* ty=Tensor[(2), int32] */;
        %2104 = cast(%2103, dtype="int64") /* ty=Tensor[(2), int64] */;
        %2105 = dyn.strided_slice(%2093, %2099, %2104, meta[relay.Constant][82] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %2106 = shape_of(%2105, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2107 = take(%2106, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
        %2108 = expand_dims(%2107, axis=0) /* ty=Tensor[(1), int32] */;
        %2109 = cast(%2108, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2110 = expand_dims(%2045, axis=0) /* ty=Tensor[(1), int64] */;
        %2111 = cast(%2110, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2112 = (%2109, %2111);
        %2113 = concatenate(%2112) /* ty=Tensor[(2), int64] */;
        %2114 = dyn.full(0 /* ty=int32 */, %2113, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %2115 = reshape(%2114, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %2116 = shape_of(%2105, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2117 = take(%2116, 0 /* ty=int32 */, axis=0) /* ty=int32 */;
        %2118 = expand_dims(%2117, axis=0) /* ty=Tensor[(1), int32] */;
        %2119 = cast(%2118, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2120 = subtract(150 /* ty=int64 */, %2067) /* ty=int64 */;
        %2121 = expand_dims(%2120, axis=0) /* ty=Tensor[(1), int64] */;
        %2122 = cast(%2121, dtype="int64") /* ty=Tensor[(1), int64] */;
        %2123 = (%2119, %2122);
        %2124 = concatenate(%2123) /* ty=Tensor[(2), int64] */;
        %2125 = dyn.full(0 /* ty=int32 */, %2124, shape=None, dtype="float32") /* ty=Tensor[(?, ?), float32] */;
        %2126 = reshape(%2125, newshape=[0, 0]) /* ty=Tensor[(?, ?), float32] */;
        %2127 = (%2115, %2105, %2126);
        %2128 = concatenate(%2127, axis=1) /* ty=Tensor[(?, ?), float32] */;
        %2129 = cast_like(0 /* ty=int32 */, meta[relay.Constant][83] /* ty=Tensor[(2), int32] */) /* ty=int32 */;
        %2130 = less(meta[relay.Constant][83] /* ty=Tensor[(2), int32] */, %2129) /* ty=Tensor[(2), bool] */;
        %2131 = shape_of(%2128, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2132 = cast_like(%2131, meta[relay.Constant][83] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2133 = add(meta[relay.Constant][83] /* ty=Tensor[(2), int32] */, %2132) /* ty=Tensor[(2), int32] */;
        %2134 = where(%2130, %2133, meta[relay.Constant][83] /* ty=Tensor[(2), int32] */) /* ty=Tensor[(2), int32] */;
        %2135 = shape_of(%2128, dtype="int32") /* ty=Tensor[(2), int32] */;
        %2136 = expand_dims(1 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2137 = expand_dims(150 /* ty=int32 */, axis=0) /* ty=Tensor[(1), int32] */;
        %2138 = scatter(%2135, %2136, %2137, meta[relay.attrs.ScatterAttrs][11]) /* ty=Tensor[(2), int32] */;
        %2139 = cast(%2138, dtype="int64") /* ty=Tensor[(2), int64] */;
        %2140 = dyn.strided_slice(%2128, %2134, %2139, meta[relay.Constant][84] /* ty=Tensor[(2), int32] */, begin=None, end=None, strides=None) /* ty=Tensor[(?, ?), float32] */;
        %2141 = expand_dims(%2140, axis=0) /* ty=Tensor[(1, ?, ?), float32] */;
        %2142 = (%res_append.6, %2141);
        %2143 = concatenate(%2142) /* ty=Tensor[(?, 150, 150), float32] */;
        %while_loop(%1975, %2143, %v7286, %v7394) /* ty=(int32, Tensor[(?, 150, 150), float32], Tensor[(?, 1, 30, 30), float32], Tensor[(?, 4), int64]) */
      } else {
        (%i.1, %res_append.6, %v7286, %v7394)
      }
    };
    %while_loop
  );
  %2145 = %2144(0 /* ty=int32 */, %1754, %1940, %1971) /* ty=(int32, Tensor[(?, 150, 150), float32], Tensor[(?, 1, 30, 30), float32], Tensor[(?, 4), int64]) */;
  %2146 = %2145.1;
  %2147 = expand_dims(%2146, axis=1) /* ty=Tensor[(?, 1, 150, 150), float32] */;
  (%1749, %1751, %1753, %2147)
}


