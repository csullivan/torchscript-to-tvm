File test_street_small.jpg exists, skip.
fn (%input0: Tensor[(1, 3, 300, 300), float32], %model.backbone.body.conv1.weight: Tensor[(64, 3, 7, 7), float32], %model.backbone.body.bn1.weight: Tensor[(64), float32], %model.backbone.body.bn1.running_var: Tensor[(64), float32], %model.backbone.body.bn1.bias: Tensor[(64), float32], %model.backbone.body.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv1.weight: Tensor[(64, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.0.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.0.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.0.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.0.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.0.downsample.1.weight: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_var: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.bias: Tensor[(256), float32], %model.backbone.body.layer1.0.downsample.1.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.1.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.1.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.1.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.1.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.1.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.1.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.1.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer1.2.conv1.weight: Tensor[(64, 256, 1, 1), float32], %model.backbone.body.layer1.2.bn1.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn1.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv2.weight: Tensor[(64, 64, 3, 3), float32], %model.backbone.body.layer1.2.bn2.weight: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_var: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.bias: Tensor[(64), float32], %model.backbone.body.layer1.2.bn2.running_mean: Tensor[(64), float32], %model.backbone.body.layer1.2.conv3.weight: Tensor[(256, 64, 1, 1), float32], %model.backbone.body.layer1.2.bn3.weight: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_var: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.bias: Tensor[(256), float32], %model.backbone.body.layer1.2.bn3.running_mean: Tensor[(256), float32], %model.backbone.body.layer2.0.conv1.weight: Tensor[(128, 256, 1, 1), float32], %model.backbone.body.layer2.0.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.0.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.0.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.0.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.0.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.0.weight: Tensor[(512, 256, 1, 1), float32], %model.backbone.body.layer2.0.downsample.1.weight: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_var: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.bias: Tensor[(512), float32], %model.backbone.body.layer2.0.downsample.1.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.1.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.1.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.1.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.1.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.1.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.1.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.1.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.2.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.2.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.2.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.2.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.2.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.2.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.2.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer2.3.conv1.weight: Tensor[(128, 512, 1, 1), float32], %model.backbone.body.layer2.3.bn1.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn1.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv2.weight: Tensor[(128, 128, 3, 3), float32], %model.backbone.body.layer2.3.bn2.weight: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_var: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.bias: Tensor[(128), float32], %model.backbone.body.layer2.3.bn2.running_mean: Tensor[(128), float32], %model.backbone.body.layer2.3.conv3.weight: Tensor[(512, 128, 1, 1), float32], %model.backbone.body.layer2.3.bn3.weight: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_var: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.bias: Tensor[(512), float32], %model.backbone.body.layer2.3.bn3.running_mean: Tensor[(512), float32], %model.backbone.body.layer3.0.conv1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.body.layer3.0.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.0.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.0.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.0.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.0.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.0.weight: Tensor[(1024, 512, 1, 1), float32], %model.backbone.body.layer3.0.downsample.1.weight: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.bias: Tensor[(1024), float32], %model.backbone.body.layer3.0.downsample.1.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.1.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.1.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.1.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.1.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.1.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.1.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.1.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.2.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.2.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.2.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.2.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.2.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.2.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.2.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.3.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.3.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.3.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.3.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.3.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.3.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.3.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.4.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.4.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.4.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.4.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.4.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.4.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.4.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer3.5.conv1.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.body.layer3.5.bn1.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn1.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.body.layer3.5.bn2.weight: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_var: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.bias: Tensor[(256), float32], %model.backbone.body.layer3.5.bn2.running_mean: Tensor[(256), float32], %model.backbone.body.layer3.5.conv3.weight: Tensor[(1024, 256, 1, 1), float32], %model.backbone.body.layer3.5.bn3.weight: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_var: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.bias: Tensor[(1024), float32], %model.backbone.body.layer3.5.bn3.running_mean: Tensor[(1024), float32], %model.backbone.body.layer4.0.conv1.weight: Tensor[(512, 1024, 1, 1), float32], %model.backbone.body.layer4.0.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.0.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.0.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.0.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.0.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.0.weight: Tensor[(2048, 1024, 1, 1), float32], %model.backbone.body.layer4.0.downsample.1.weight: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.bias: Tensor[(2048), float32], %model.backbone.body.layer4.0.downsample.1.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.1.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.1.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.1.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.1.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.1.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.1.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.1.bn3.running_mean: Tensor[(2048), float32], %model.backbone.body.layer4.2.conv1.weight: Tensor[(512, 2048, 1, 1), float32], %model.backbone.body.layer4.2.bn1.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn1.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv2.weight: Tensor[(512, 512, 3, 3), float32], %model.backbone.body.layer4.2.bn2.weight: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_var: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.bias: Tensor[(512), float32], %model.backbone.body.layer4.2.bn2.running_mean: Tensor[(512), float32], %model.backbone.body.layer4.2.conv3.weight: Tensor[(2048, 512, 1, 1), float32], %model.backbone.body.layer4.2.bn3.weight: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_var: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.bias: Tensor[(2048), float32], %model.backbone.body.layer4.2.bn3.running_mean: Tensor[(2048), float32], %model.backbone.fpn.inner_blocks.0.weight: Tensor[(256, 256, 1, 1), float32], %model.backbone.fpn.inner_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.1.weight: Tensor[(256, 512, 1, 1), float32], %model.backbone.fpn.inner_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.2.weight: Tensor[(256, 1024, 1, 1), float32], %model.backbone.fpn.inner_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.inner_blocks.3.weight: Tensor[(256, 2048, 1, 1), float32], %model.backbone.fpn.inner_blocks.3.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.0.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.0.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.1.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.1.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.2.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.2.bias: Tensor[(256), float32], %model.backbone.fpn.layer_blocks.3.weight: Tensor[(256, 256, 3, 3), float32], %model.backbone.fpn.layer_blocks.3.bias: Tensor[(256), float32], %model.rpn.head.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.rpn.head.conv.bias: Tensor[(256), float32], %model.rpn.head.cls_logits.weight: Tensor[(3, 256, 1, 1), float32], %model.rpn.head.cls_logits.bias: Tensor[(3), float32], %model.rpn.head.bbox_pred.weight: Tensor[(12, 256, 1, 1), float32], %model.rpn.head.bbox_pred.bias: Tensor[(12), float32], %model.roi_heads.box_head.fc6.weight: Tensor[(1024, 12544), float32], %model.roi_heads.box_head.fc6.bias: Tensor[(1024), float32], %model.roi_heads.box_head.fc7.weight: Tensor[(1024, 1024), float32], %model.roi_heads.box_head.fc7.bias: Tensor[(1024), float32], %model.roi_heads.box_predictor.cls_score.weight: Tensor[(91, 1024), float32], %model.roi_heads.box_predictor.cls_score.bias: Tensor[(91), float32], %model.roi_heads.box_predictor.bbox_pred.weight: Tensor[(364, 1024), float32], %model.roi_heads.box_predictor.bbox_pred.bias: Tensor[(364), float32]) {
  %0 = split(%input0, indices_or_sections=1);
  %1 = %0.0;
  %2 = squeeze(%1, axis=[0]);
  %3 = (%2,);
  %4 = %3.0;
  %5 = strided_slice(meta[relay.Constant][0], begin=[0], end=[3], strides=[1]);
  %6 = expand_dims(%5, axis=1);
  %7 = expand_dims(%6, axis=2);
  %8 = subtract(%4, %7);
  %9 = strided_slice(meta[relay.Constant][1], begin=[0], end=[3], strides=[1]);
  %10 = expand_dims(%9, axis=1);
  %11 = expand_dims(%10, axis=2);
  %12 = divide(%8, %11);
  %13 = expand_dims(%12, axis=0);
  %14 = image.resize(%13, size=[800, 800]);
  %15 = take(%14, 0, axis=0);
  %16 = nn.pad(%15, pad_width=[[0, 0], [0, 0], [0, 0]]);
  %17 = (%16,);
  %18 = stack(%17);
  %19 = (%18, 800, 800);
  %20 = %19.0;
  %21 = nn.conv2d(%20, %model.backbone.body.conv1.weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]);
  %22 = reshape(%model.backbone.body.bn1.weight, newshape=[1, -1, 1, 1]);
  %23 = reshape(%model.backbone.body.bn1.running_var, newshape=[1, -1, 1, 1]);
  %24 = add(%23, 0f);
  %25 = rsqrt(%24);
  %26 = multiply(%22, %25);
  %27 = multiply(%21, %26);
  %28 = reshape(%model.backbone.body.bn1.bias, newshape=[1, -1, 1, 1]);
  %29 = reshape(%model.backbone.body.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %30 = multiply(%29, %26);
  %31 = subtract(%28, %30);
  %32 = add(%27, %31);
  %33 = nn.relu(%32);
  %34 = nn.max_pool2d(%33, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]);
  %35 = nn.conv2d(%34, %model.backbone.body.layer1.0.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %36 = reshape(%model.backbone.body.layer1.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %37 = reshape(%model.backbone.body.layer1.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %38 = add(%37, 0f);
  %39 = rsqrt(%38);
  %40 = multiply(%36, %39);
  %41 = multiply(%35, %40);
  %42 = reshape(%model.backbone.body.layer1.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %43 = reshape(%model.backbone.body.layer1.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %44 = multiply(%43, %40);
  %45 = subtract(%42, %44);
  %46 = add(%41, %45);
  %47 = nn.relu(%46);
  %48 = nn.conv2d(%47, %model.backbone.body.layer1.0.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %49 = reshape(%model.backbone.body.layer1.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %50 = reshape(%model.backbone.body.layer1.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %51 = add(%50, 0f);
  %52 = rsqrt(%51);
  %53 = multiply(%49, %52);
  %54 = multiply(%48, %53);
  %55 = reshape(%model.backbone.body.layer1.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %56 = reshape(%model.backbone.body.layer1.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %57 = multiply(%56, %53);
  %58 = subtract(%55, %57);
  %59 = add(%54, %58);
  %60 = nn.relu(%59);
  %61 = nn.conv2d(%60, %model.backbone.body.layer1.0.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %62 = reshape(%model.backbone.body.layer1.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %63 = reshape(%model.backbone.body.layer1.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %64 = add(%63, 0f);
  %65 = rsqrt(%64);
  %66 = multiply(%62, %65);
  %67 = multiply(%61, %66);
  %68 = reshape(%model.backbone.body.layer1.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %69 = reshape(%model.backbone.body.layer1.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %70 = multiply(%69, %66);
  %71 = subtract(%68, %70);
  %72 = add(%67, %71);
  %73 = nn.conv2d(%34, %model.backbone.body.layer1.0.downsample.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %74 = reshape(%model.backbone.body.layer1.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %75 = reshape(%model.backbone.body.layer1.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %76 = add(%75, 0f);
  %77 = rsqrt(%76);
  %78 = multiply(%74, %77);
  %79 = multiply(%73, %78);
  %80 = reshape(%model.backbone.body.layer1.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %81 = reshape(%model.backbone.body.layer1.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %82 = multiply(%81, %78);
  %83 = subtract(%80, %82);
  %84 = add(%79, %83);
  %85 = add(%72, %84);
  %86 = nn.relu(%85);
  %87 = nn.conv2d(%86, %model.backbone.body.layer1.1.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %88 = reshape(%model.backbone.body.layer1.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %89 = reshape(%model.backbone.body.layer1.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %90 = add(%89, 0f);
  %91 = rsqrt(%90);
  %92 = multiply(%88, %91);
  %93 = multiply(%87, %92);
  %94 = reshape(%model.backbone.body.layer1.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %95 = reshape(%model.backbone.body.layer1.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %96 = multiply(%95, %92);
  %97 = subtract(%94, %96);
  %98 = add(%93, %97);
  %99 = nn.relu(%98);
  %100 = nn.conv2d(%99, %model.backbone.body.layer1.1.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %101 = reshape(%model.backbone.body.layer1.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %102 = reshape(%model.backbone.body.layer1.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %103 = add(%102, 0f);
  %104 = rsqrt(%103);
  %105 = multiply(%101, %104);
  %106 = multiply(%100, %105);
  %107 = reshape(%model.backbone.body.layer1.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %108 = reshape(%model.backbone.body.layer1.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %109 = multiply(%108, %105);
  %110 = subtract(%107, %109);
  %111 = add(%106, %110);
  %112 = nn.relu(%111);
  %113 = nn.conv2d(%112, %model.backbone.body.layer1.1.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %114 = reshape(%model.backbone.body.layer1.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %115 = reshape(%model.backbone.body.layer1.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %116 = add(%115, 0f);
  %117 = rsqrt(%116);
  %118 = multiply(%114, %117);
  %119 = multiply(%113, %118);
  %120 = reshape(%model.backbone.body.layer1.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %121 = reshape(%model.backbone.body.layer1.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %122 = multiply(%121, %118);
  %123 = subtract(%120, %122);
  %124 = add(%119, %123);
  %125 = add(%124, %86);
  %126 = nn.relu(%125);
  %127 = nn.conv2d(%126, %model.backbone.body.layer1.2.conv1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %128 = reshape(%model.backbone.body.layer1.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %129 = reshape(%model.backbone.body.layer1.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %130 = add(%129, 0f);
  %131 = rsqrt(%130);
  %132 = multiply(%128, %131);
  %133 = multiply(%127, %132);
  %134 = reshape(%model.backbone.body.layer1.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %135 = reshape(%model.backbone.body.layer1.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %136 = multiply(%135, %132);
  %137 = subtract(%134, %136);
  %138 = add(%133, %137);
  %139 = nn.relu(%138);
  %140 = nn.conv2d(%139, %model.backbone.body.layer1.2.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]);
  %141 = reshape(%model.backbone.body.layer1.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %142 = reshape(%model.backbone.body.layer1.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %143 = add(%142, 0f);
  %144 = rsqrt(%143);
  %145 = multiply(%141, %144);
  %146 = multiply(%140, %145);
  %147 = reshape(%model.backbone.body.layer1.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %148 = reshape(%model.backbone.body.layer1.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %149 = multiply(%148, %145);
  %150 = subtract(%147, %149);
  %151 = add(%146, %150);
  %152 = nn.relu(%151);
  %153 = nn.conv2d(%152, %model.backbone.body.layer1.2.conv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %154 = reshape(%model.backbone.body.layer1.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %155 = reshape(%model.backbone.body.layer1.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %156 = add(%155, 0f);
  %157 = rsqrt(%156);
  %158 = multiply(%154, %157);
  %159 = multiply(%153, %158);
  %160 = reshape(%model.backbone.body.layer1.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %161 = reshape(%model.backbone.body.layer1.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %162 = multiply(%161, %158);
  %163 = subtract(%160, %162);
  %164 = add(%159, %163);
  %165 = add(%164, %126);
  %166 = nn.relu(%165);
  %167 = nn.conv2d(%166, %model.backbone.body.layer2.0.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %168 = reshape(%model.backbone.body.layer2.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %169 = reshape(%model.backbone.body.layer2.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %170 = add(%169, 0f);
  %171 = rsqrt(%170);
  %172 = multiply(%168, %171);
  %173 = multiply(%167, %172);
  %174 = reshape(%model.backbone.body.layer2.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %175 = reshape(%model.backbone.body.layer2.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %176 = multiply(%175, %172);
  %177 = subtract(%174, %176);
  %178 = add(%173, %177);
  %179 = nn.relu(%178);
  %180 = nn.conv2d(%179, %model.backbone.body.layer2.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %181 = reshape(%model.backbone.body.layer2.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %182 = reshape(%model.backbone.body.layer2.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %183 = add(%182, 0f);
  %184 = rsqrt(%183);
  %185 = multiply(%181, %184);
  %186 = multiply(%180, %185);
  %187 = reshape(%model.backbone.body.layer2.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %188 = reshape(%model.backbone.body.layer2.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %189 = multiply(%188, %185);
  %190 = subtract(%187, %189);
  %191 = add(%186, %190);
  %192 = nn.relu(%191);
  %193 = nn.conv2d(%192, %model.backbone.body.layer2.0.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %194 = reshape(%model.backbone.body.layer2.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %195 = reshape(%model.backbone.body.layer2.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %196 = add(%195, 0f);
  %197 = rsqrt(%196);
  %198 = multiply(%194, %197);
  %199 = multiply(%193, %198);
  %200 = reshape(%model.backbone.body.layer2.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %201 = reshape(%model.backbone.body.layer2.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %202 = multiply(%201, %198);
  %203 = subtract(%200, %202);
  %204 = add(%199, %203);
  %205 = nn.conv2d(%166, %model.backbone.body.layer2.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %206 = reshape(%model.backbone.body.layer2.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %207 = reshape(%model.backbone.body.layer2.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %208 = add(%207, 0f);
  %209 = rsqrt(%208);
  %210 = multiply(%206, %209);
  %211 = multiply(%205, %210);
  %212 = reshape(%model.backbone.body.layer2.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %213 = reshape(%model.backbone.body.layer2.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %214 = multiply(%213, %210);
  %215 = subtract(%212, %214);
  %216 = add(%211, %215);
  %217 = add(%204, %216);
  %218 = nn.relu(%217);
  %219 = nn.conv2d(%218, %model.backbone.body.layer2.1.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %220 = reshape(%model.backbone.body.layer2.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %221 = reshape(%model.backbone.body.layer2.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %222 = add(%221, 0f);
  %223 = rsqrt(%222);
  %224 = multiply(%220, %223);
  %225 = multiply(%219, %224);
  %226 = reshape(%model.backbone.body.layer2.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %227 = reshape(%model.backbone.body.layer2.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %228 = multiply(%227, %224);
  %229 = subtract(%226, %228);
  %230 = add(%225, %229);
  %231 = nn.relu(%230);
  %232 = nn.conv2d(%231, %model.backbone.body.layer2.1.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %233 = reshape(%model.backbone.body.layer2.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %234 = reshape(%model.backbone.body.layer2.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %235 = add(%234, 0f);
  %236 = rsqrt(%235);
  %237 = multiply(%233, %236);
  %238 = multiply(%232, %237);
  %239 = reshape(%model.backbone.body.layer2.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %240 = reshape(%model.backbone.body.layer2.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %241 = multiply(%240, %237);
  %242 = subtract(%239, %241);
  %243 = add(%238, %242);
  %244 = nn.relu(%243);
  %245 = nn.conv2d(%244, %model.backbone.body.layer2.1.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %246 = reshape(%model.backbone.body.layer2.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %247 = reshape(%model.backbone.body.layer2.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %248 = add(%247, 0f);
  %249 = rsqrt(%248);
  %250 = multiply(%246, %249);
  %251 = multiply(%245, %250);
  %252 = reshape(%model.backbone.body.layer2.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %253 = reshape(%model.backbone.body.layer2.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %254 = multiply(%253, %250);
  %255 = subtract(%252, %254);
  %256 = add(%251, %255);
  %257 = add(%256, %218);
  %258 = nn.relu(%257);
  %259 = nn.conv2d(%258, %model.backbone.body.layer2.2.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %260 = reshape(%model.backbone.body.layer2.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %261 = reshape(%model.backbone.body.layer2.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %262 = add(%261, 0f);
  %263 = rsqrt(%262);
  %264 = multiply(%260, %263);
  %265 = multiply(%259, %264);
  %266 = reshape(%model.backbone.body.layer2.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %267 = reshape(%model.backbone.body.layer2.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %268 = multiply(%267, %264);
  %269 = subtract(%266, %268);
  %270 = add(%265, %269);
  %271 = nn.relu(%270);
  %272 = nn.conv2d(%271, %model.backbone.body.layer2.2.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %273 = reshape(%model.backbone.body.layer2.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %274 = reshape(%model.backbone.body.layer2.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %275 = add(%274, 0f);
  %276 = rsqrt(%275);
  %277 = multiply(%273, %276);
  %278 = multiply(%272, %277);
  %279 = reshape(%model.backbone.body.layer2.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %280 = reshape(%model.backbone.body.layer2.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %281 = multiply(%280, %277);
  %282 = subtract(%279, %281);
  %283 = add(%278, %282);
  %284 = nn.relu(%283);
  %285 = nn.conv2d(%284, %model.backbone.body.layer2.2.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %286 = reshape(%model.backbone.body.layer2.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %287 = reshape(%model.backbone.body.layer2.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %288 = add(%287, 0f);
  %289 = rsqrt(%288);
  %290 = multiply(%286, %289);
  %291 = multiply(%285, %290);
  %292 = reshape(%model.backbone.body.layer2.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %293 = reshape(%model.backbone.body.layer2.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %294 = multiply(%293, %290);
  %295 = subtract(%292, %294);
  %296 = add(%291, %295);
  %297 = add(%296, %258);
  %298 = nn.relu(%297);
  %299 = nn.conv2d(%298, %model.backbone.body.layer2.3.conv1.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]);
  %300 = reshape(%model.backbone.body.layer2.3.bn1.weight, newshape=[1, -1, 1, 1]);
  %301 = reshape(%model.backbone.body.layer2.3.bn1.running_var, newshape=[1, -1, 1, 1]);
  %302 = add(%301, 0f);
  %303 = rsqrt(%302);
  %304 = multiply(%300, %303);
  %305 = multiply(%299, %304);
  %306 = reshape(%model.backbone.body.layer2.3.bn1.bias, newshape=[1, -1, 1, 1]);
  %307 = reshape(%model.backbone.body.layer2.3.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %308 = multiply(%307, %304);
  %309 = subtract(%306, %308);
  %310 = add(%305, %309);
  %311 = nn.relu(%310);
  %312 = nn.conv2d(%311, %model.backbone.body.layer2.3.conv2.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]);
  %313 = reshape(%model.backbone.body.layer2.3.bn2.weight, newshape=[1, -1, 1, 1]);
  %314 = reshape(%model.backbone.body.layer2.3.bn2.running_var, newshape=[1, -1, 1, 1]);
  %315 = add(%314, 0f);
  %316 = rsqrt(%315);
  %317 = multiply(%313, %316);
  %318 = multiply(%312, %317);
  %319 = reshape(%model.backbone.body.layer2.3.bn2.bias, newshape=[1, -1, 1, 1]);
  %320 = reshape(%model.backbone.body.layer2.3.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %321 = multiply(%320, %317);
  %322 = subtract(%319, %321);
  %323 = add(%318, %322);
  %324 = nn.relu(%323);
  %325 = nn.conv2d(%324, %model.backbone.body.layer2.3.conv3.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %326 = reshape(%model.backbone.body.layer2.3.bn3.weight, newshape=[1, -1, 1, 1]);
  %327 = reshape(%model.backbone.body.layer2.3.bn3.running_var, newshape=[1, -1, 1, 1]);
  %328 = add(%327, 0f);
  %329 = rsqrt(%328);
  %330 = multiply(%326, %329);
  %331 = multiply(%325, %330);
  %332 = reshape(%model.backbone.body.layer2.3.bn3.bias, newshape=[1, -1, 1, 1]);
  %333 = reshape(%model.backbone.body.layer2.3.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %334 = multiply(%333, %330);
  %335 = subtract(%332, %334);
  %336 = add(%331, %335);
  %337 = add(%336, %298);
  %338 = nn.relu(%337);
  %339 = nn.conv2d(%338, %model.backbone.body.layer3.0.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %340 = reshape(%model.backbone.body.layer3.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %341 = reshape(%model.backbone.body.layer3.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %342 = add(%341, 0f);
  %343 = rsqrt(%342);
  %344 = multiply(%340, %343);
  %345 = multiply(%339, %344);
  %346 = reshape(%model.backbone.body.layer3.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %347 = reshape(%model.backbone.body.layer3.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %348 = multiply(%347, %344);
  %349 = subtract(%346, %348);
  %350 = add(%345, %349);
  %351 = nn.relu(%350);
  %352 = nn.conv2d(%351, %model.backbone.body.layer3.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %353 = reshape(%model.backbone.body.layer3.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %354 = reshape(%model.backbone.body.layer3.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %355 = add(%354, 0f);
  %356 = rsqrt(%355);
  %357 = multiply(%353, %356);
  %358 = multiply(%352, %357);
  %359 = reshape(%model.backbone.body.layer3.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %360 = reshape(%model.backbone.body.layer3.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %361 = multiply(%360, %357);
  %362 = subtract(%359, %361);
  %363 = add(%358, %362);
  %364 = nn.relu(%363);
  %365 = nn.conv2d(%364, %model.backbone.body.layer3.0.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %366 = reshape(%model.backbone.body.layer3.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %367 = reshape(%model.backbone.body.layer3.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %368 = add(%367, 0f);
  %369 = rsqrt(%368);
  %370 = multiply(%366, %369);
  %371 = multiply(%365, %370);
  %372 = reshape(%model.backbone.body.layer3.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %373 = reshape(%model.backbone.body.layer3.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %374 = multiply(%373, %370);
  %375 = subtract(%372, %374);
  %376 = add(%371, %375);
  %377 = nn.conv2d(%338, %model.backbone.body.layer3.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %378 = reshape(%model.backbone.body.layer3.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %379 = reshape(%model.backbone.body.layer3.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %380 = add(%379, 0f);
  %381 = rsqrt(%380);
  %382 = multiply(%378, %381);
  %383 = multiply(%377, %382);
  %384 = reshape(%model.backbone.body.layer3.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %385 = reshape(%model.backbone.body.layer3.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %386 = multiply(%385, %382);
  %387 = subtract(%384, %386);
  %388 = add(%383, %387);
  %389 = add(%376, %388);
  %390 = nn.relu(%389);
  %391 = nn.conv2d(%390, %model.backbone.body.layer3.1.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %392 = reshape(%model.backbone.body.layer3.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %393 = reshape(%model.backbone.body.layer3.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %394 = add(%393, 0f);
  %395 = rsqrt(%394);
  %396 = multiply(%392, %395);
  %397 = multiply(%391, %396);
  %398 = reshape(%model.backbone.body.layer3.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %399 = reshape(%model.backbone.body.layer3.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %400 = multiply(%399, %396);
  %401 = subtract(%398, %400);
  %402 = add(%397, %401);
  %403 = nn.relu(%402);
  %404 = nn.conv2d(%403, %model.backbone.body.layer3.1.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %405 = reshape(%model.backbone.body.layer3.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %406 = reshape(%model.backbone.body.layer3.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %407 = add(%406, 0f);
  %408 = rsqrt(%407);
  %409 = multiply(%405, %408);
  %410 = multiply(%404, %409);
  %411 = reshape(%model.backbone.body.layer3.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %412 = reshape(%model.backbone.body.layer3.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %413 = multiply(%412, %409);
  %414 = subtract(%411, %413);
  %415 = add(%410, %414);
  %416 = nn.relu(%415);
  %417 = nn.conv2d(%416, %model.backbone.body.layer3.1.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %418 = reshape(%model.backbone.body.layer3.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %419 = reshape(%model.backbone.body.layer3.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %420 = add(%419, 0f);
  %421 = rsqrt(%420);
  %422 = multiply(%418, %421);
  %423 = multiply(%417, %422);
  %424 = reshape(%model.backbone.body.layer3.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %425 = reshape(%model.backbone.body.layer3.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %426 = multiply(%425, %422);
  %427 = subtract(%424, %426);
  %428 = add(%423, %427);
  %429 = add(%428, %390);
  %430 = nn.relu(%429);
  %431 = nn.conv2d(%430, %model.backbone.body.layer3.2.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %432 = reshape(%model.backbone.body.layer3.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %433 = reshape(%model.backbone.body.layer3.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %434 = add(%433, 0f);
  %435 = rsqrt(%434);
  %436 = multiply(%432, %435);
  %437 = multiply(%431, %436);
  %438 = reshape(%model.backbone.body.layer3.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %439 = reshape(%model.backbone.body.layer3.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %440 = multiply(%439, %436);
  %441 = subtract(%438, %440);
  %442 = add(%437, %441);
  %443 = nn.relu(%442);
  %444 = nn.conv2d(%443, %model.backbone.body.layer3.2.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %445 = reshape(%model.backbone.body.layer3.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %446 = reshape(%model.backbone.body.layer3.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %447 = add(%446, 0f);
  %448 = rsqrt(%447);
  %449 = multiply(%445, %448);
  %450 = multiply(%444, %449);
  %451 = reshape(%model.backbone.body.layer3.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %452 = reshape(%model.backbone.body.layer3.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %453 = multiply(%452, %449);
  %454 = subtract(%451, %453);
  %455 = add(%450, %454);
  %456 = nn.relu(%455);
  %457 = nn.conv2d(%456, %model.backbone.body.layer3.2.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %458 = reshape(%model.backbone.body.layer3.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %459 = reshape(%model.backbone.body.layer3.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %460 = add(%459, 0f);
  %461 = rsqrt(%460);
  %462 = multiply(%458, %461);
  %463 = multiply(%457, %462);
  %464 = reshape(%model.backbone.body.layer3.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %465 = reshape(%model.backbone.body.layer3.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %466 = multiply(%465, %462);
  %467 = subtract(%464, %466);
  %468 = add(%463, %467);
  %469 = add(%468, %430);
  %470 = nn.relu(%469);
  %471 = nn.conv2d(%470, %model.backbone.body.layer3.3.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %472 = reshape(%model.backbone.body.layer3.3.bn1.weight, newshape=[1, -1, 1, 1]);
  %473 = reshape(%model.backbone.body.layer3.3.bn1.running_var, newshape=[1, -1, 1, 1]);
  %474 = add(%473, 0f);
  %475 = rsqrt(%474);
  %476 = multiply(%472, %475);
  %477 = multiply(%471, %476);
  %478 = reshape(%model.backbone.body.layer3.3.bn1.bias, newshape=[1, -1, 1, 1]);
  %479 = reshape(%model.backbone.body.layer3.3.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %480 = multiply(%479, %476);
  %481 = subtract(%478, %480);
  %482 = add(%477, %481);
  %483 = nn.relu(%482);
  %484 = nn.conv2d(%483, %model.backbone.body.layer3.3.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %485 = reshape(%model.backbone.body.layer3.3.bn2.weight, newshape=[1, -1, 1, 1]);
  %486 = reshape(%model.backbone.body.layer3.3.bn2.running_var, newshape=[1, -1, 1, 1]);
  %487 = add(%486, 0f);
  %488 = rsqrt(%487);
  %489 = multiply(%485, %488);
  %490 = multiply(%484, %489);
  %491 = reshape(%model.backbone.body.layer3.3.bn2.bias, newshape=[1, -1, 1, 1]);
  %492 = reshape(%model.backbone.body.layer3.3.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %493 = multiply(%492, %489);
  %494 = subtract(%491, %493);
  %495 = add(%490, %494);
  %496 = nn.relu(%495);
  %497 = nn.conv2d(%496, %model.backbone.body.layer3.3.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %498 = reshape(%model.backbone.body.layer3.3.bn3.weight, newshape=[1, -1, 1, 1]);
  %499 = reshape(%model.backbone.body.layer3.3.bn3.running_var, newshape=[1, -1, 1, 1]);
  %500 = add(%499, 0f);
  %501 = rsqrt(%500);
  %502 = multiply(%498, %501);
  %503 = multiply(%497, %502);
  %504 = reshape(%model.backbone.body.layer3.3.bn3.bias, newshape=[1, -1, 1, 1]);
  %505 = reshape(%model.backbone.body.layer3.3.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %506 = multiply(%505, %502);
  %507 = subtract(%504, %506);
  %508 = add(%503, %507);
  %509 = add(%508, %470);
  %510 = nn.relu(%509);
  %511 = nn.conv2d(%510, %model.backbone.body.layer3.4.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %512 = reshape(%model.backbone.body.layer3.4.bn1.weight, newshape=[1, -1, 1, 1]);
  %513 = reshape(%model.backbone.body.layer3.4.bn1.running_var, newshape=[1, -1, 1, 1]);
  %514 = add(%513, 0f);
  %515 = rsqrt(%514);
  %516 = multiply(%512, %515);
  %517 = multiply(%511, %516);
  %518 = reshape(%model.backbone.body.layer3.4.bn1.bias, newshape=[1, -1, 1, 1]);
  %519 = reshape(%model.backbone.body.layer3.4.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %520 = multiply(%519, %516);
  %521 = subtract(%518, %520);
  %522 = add(%517, %521);
  %523 = nn.relu(%522);
  %524 = nn.conv2d(%523, %model.backbone.body.layer3.4.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %525 = reshape(%model.backbone.body.layer3.4.bn2.weight, newshape=[1, -1, 1, 1]);
  %526 = reshape(%model.backbone.body.layer3.4.bn2.running_var, newshape=[1, -1, 1, 1]);
  %527 = add(%526, 0f);
  %528 = rsqrt(%527);
  %529 = multiply(%525, %528);
  %530 = multiply(%524, %529);
  %531 = reshape(%model.backbone.body.layer3.4.bn2.bias, newshape=[1, -1, 1, 1]);
  %532 = reshape(%model.backbone.body.layer3.4.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %533 = multiply(%532, %529);
  %534 = subtract(%531, %533);
  %535 = add(%530, %534);
  %536 = nn.relu(%535);
  %537 = nn.conv2d(%536, %model.backbone.body.layer3.4.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %538 = reshape(%model.backbone.body.layer3.4.bn3.weight, newshape=[1, -1, 1, 1]);
  %539 = reshape(%model.backbone.body.layer3.4.bn3.running_var, newshape=[1, -1, 1, 1]);
  %540 = add(%539, 0f);
  %541 = rsqrt(%540);
  %542 = multiply(%538, %541);
  %543 = multiply(%537, %542);
  %544 = reshape(%model.backbone.body.layer3.4.bn3.bias, newshape=[1, -1, 1, 1]);
  %545 = reshape(%model.backbone.body.layer3.4.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %546 = multiply(%545, %542);
  %547 = subtract(%544, %546);
  %548 = add(%543, %547);
  %549 = add(%548, %510);
  %550 = nn.relu(%549);
  %551 = nn.conv2d(%550, %model.backbone.body.layer3.5.conv1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %552 = reshape(%model.backbone.body.layer3.5.bn1.weight, newshape=[1, -1, 1, 1]);
  %553 = reshape(%model.backbone.body.layer3.5.bn1.running_var, newshape=[1, -1, 1, 1]);
  %554 = add(%553, 0f);
  %555 = rsqrt(%554);
  %556 = multiply(%552, %555);
  %557 = multiply(%551, %556);
  %558 = reshape(%model.backbone.body.layer3.5.bn1.bias, newshape=[1, -1, 1, 1]);
  %559 = reshape(%model.backbone.body.layer3.5.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %560 = multiply(%559, %556);
  %561 = subtract(%558, %560);
  %562 = add(%557, %561);
  %563 = nn.relu(%562);
  %564 = nn.conv2d(%563, %model.backbone.body.layer3.5.conv2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %565 = reshape(%model.backbone.body.layer3.5.bn2.weight, newshape=[1, -1, 1, 1]);
  %566 = reshape(%model.backbone.body.layer3.5.bn2.running_var, newshape=[1, -1, 1, 1]);
  %567 = add(%566, 0f);
  %568 = rsqrt(%567);
  %569 = multiply(%565, %568);
  %570 = multiply(%564, %569);
  %571 = reshape(%model.backbone.body.layer3.5.bn2.bias, newshape=[1, -1, 1, 1]);
  %572 = reshape(%model.backbone.body.layer3.5.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %573 = multiply(%572, %569);
  %574 = subtract(%571, %573);
  %575 = add(%570, %574);
  %576 = nn.relu(%575);
  %577 = nn.conv2d(%576, %model.backbone.body.layer3.5.conv3.weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]);
  %578 = reshape(%model.backbone.body.layer3.5.bn3.weight, newshape=[1, -1, 1, 1]);
  %579 = reshape(%model.backbone.body.layer3.5.bn3.running_var, newshape=[1, -1, 1, 1]);
  %580 = add(%579, 0f);
  %581 = rsqrt(%580);
  %582 = multiply(%578, %581);
  %583 = multiply(%577, %582);
  %584 = reshape(%model.backbone.body.layer3.5.bn3.bias, newshape=[1, -1, 1, 1]);
  %585 = reshape(%model.backbone.body.layer3.5.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %586 = multiply(%585, %582);
  %587 = subtract(%584, %586);
  %588 = add(%583, %587);
  %589 = add(%588, %550);
  %590 = nn.relu(%589);
  %591 = nn.conv2d(%590, %model.backbone.body.layer4.0.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %592 = reshape(%model.backbone.body.layer4.0.bn1.weight, newshape=[1, -1, 1, 1]);
  %593 = reshape(%model.backbone.body.layer4.0.bn1.running_var, newshape=[1, -1, 1, 1]);
  %594 = add(%593, 0f);
  %595 = rsqrt(%594);
  %596 = multiply(%592, %595);
  %597 = multiply(%591, %596);
  %598 = reshape(%model.backbone.body.layer4.0.bn1.bias, newshape=[1, -1, 1, 1]);
  %599 = reshape(%model.backbone.body.layer4.0.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %600 = multiply(%599, %596);
  %601 = subtract(%598, %600);
  %602 = add(%597, %601);
  %603 = nn.relu(%602);
  %604 = nn.conv2d(%603, %model.backbone.body.layer4.0.conv2.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %605 = reshape(%model.backbone.body.layer4.0.bn2.weight, newshape=[1, -1, 1, 1]);
  %606 = reshape(%model.backbone.body.layer4.0.bn2.running_var, newshape=[1, -1, 1, 1]);
  %607 = add(%606, 0f);
  %608 = rsqrt(%607);
  %609 = multiply(%605, %608);
  %610 = multiply(%604, %609);
  %611 = reshape(%model.backbone.body.layer4.0.bn2.bias, newshape=[1, -1, 1, 1]);
  %612 = reshape(%model.backbone.body.layer4.0.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %613 = multiply(%612, %609);
  %614 = subtract(%611, %613);
  %615 = add(%610, %614);
  %616 = nn.relu(%615);
  %617 = nn.conv2d(%616, %model.backbone.body.layer4.0.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %618 = reshape(%model.backbone.body.layer4.0.bn3.weight, newshape=[1, -1, 1, 1]);
  %619 = reshape(%model.backbone.body.layer4.0.bn3.running_var, newshape=[1, -1, 1, 1]);
  %620 = add(%619, 0f);
  %621 = rsqrt(%620);
  %622 = multiply(%618, %621);
  %623 = multiply(%617, %622);
  %624 = reshape(%model.backbone.body.layer4.0.bn3.bias, newshape=[1, -1, 1, 1]);
  %625 = reshape(%model.backbone.body.layer4.0.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %626 = multiply(%625, %622);
  %627 = subtract(%624, %626);
  %628 = add(%623, %627);
  %629 = nn.conv2d(%590, %model.backbone.body.layer4.0.downsample.0.weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %630 = reshape(%model.backbone.body.layer4.0.downsample.1.weight, newshape=[1, -1, 1, 1]);
  %631 = reshape(%model.backbone.body.layer4.0.downsample.1.running_var, newshape=[1, -1, 1, 1]);
  %632 = add(%631, 0f);
  %633 = rsqrt(%632);
  %634 = multiply(%630, %633);
  %635 = multiply(%629, %634);
  %636 = reshape(%model.backbone.body.layer4.0.downsample.1.bias, newshape=[1, -1, 1, 1]);
  %637 = reshape(%model.backbone.body.layer4.0.downsample.1.running_mean, newshape=[1, -1, 1, 1]);
  %638 = multiply(%637, %634);
  %639 = subtract(%636, %638);
  %640 = add(%635, %639);
  %641 = add(%628, %640);
  %642 = nn.relu(%641);
  %643 = nn.conv2d(%642, %model.backbone.body.layer4.1.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %644 = reshape(%model.backbone.body.layer4.1.bn1.weight, newshape=[1, -1, 1, 1]);
  %645 = reshape(%model.backbone.body.layer4.1.bn1.running_var, newshape=[1, -1, 1, 1]);
  %646 = add(%645, 0f);
  %647 = rsqrt(%646);
  %648 = multiply(%644, %647);
  %649 = multiply(%643, %648);
  %650 = reshape(%model.backbone.body.layer4.1.bn1.bias, newshape=[1, -1, 1, 1]);
  %651 = reshape(%model.backbone.body.layer4.1.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %652 = multiply(%651, %648);
  %653 = subtract(%650, %652);
  %654 = add(%649, %653);
  %655 = nn.relu(%654);
  %656 = nn.conv2d(%655, %model.backbone.body.layer4.1.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %657 = reshape(%model.backbone.body.layer4.1.bn2.weight, newshape=[1, -1, 1, 1]);
  %658 = reshape(%model.backbone.body.layer4.1.bn2.running_var, newshape=[1, -1, 1, 1]);
  %659 = add(%658, 0f);
  %660 = rsqrt(%659);
  %661 = multiply(%657, %660);
  %662 = multiply(%656, %661);
  %663 = reshape(%model.backbone.body.layer4.1.bn2.bias, newshape=[1, -1, 1, 1]);
  %664 = reshape(%model.backbone.body.layer4.1.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %665 = multiply(%664, %661);
  %666 = subtract(%663, %665);
  %667 = add(%662, %666);
  %668 = nn.relu(%667);
  %669 = nn.conv2d(%668, %model.backbone.body.layer4.1.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %670 = reshape(%model.backbone.body.layer4.1.bn3.weight, newshape=[1, -1, 1, 1]);
  %671 = reshape(%model.backbone.body.layer4.1.bn3.running_var, newshape=[1, -1, 1, 1]);
  %672 = add(%671, 0f);
  %673 = rsqrt(%672);
  %674 = multiply(%670, %673);
  %675 = multiply(%669, %674);
  %676 = reshape(%model.backbone.body.layer4.1.bn3.bias, newshape=[1, -1, 1, 1]);
  %677 = reshape(%model.backbone.body.layer4.1.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %678 = multiply(%677, %674);
  %679 = subtract(%676, %678);
  %680 = add(%675, %679);
  %681 = add(%680, %642);
  %682 = nn.relu(%681);
  %683 = nn.conv2d(%682, %model.backbone.body.layer4.2.conv1.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]);
  %684 = reshape(%model.backbone.body.layer4.2.bn1.weight, newshape=[1, -1, 1, 1]);
  %685 = reshape(%model.backbone.body.layer4.2.bn1.running_var, newshape=[1, -1, 1, 1]);
  %686 = add(%685, 0f);
  %687 = rsqrt(%686);
  %688 = multiply(%684, %687);
  %689 = multiply(%683, %688);
  %690 = reshape(%model.backbone.body.layer4.2.bn1.bias, newshape=[1, -1, 1, 1]);
  %691 = reshape(%model.backbone.body.layer4.2.bn1.running_mean, newshape=[1, -1, 1, 1]);
  %692 = multiply(%691, %688);
  %693 = subtract(%690, %692);
  %694 = add(%689, %693);
  %695 = nn.relu(%694);
  %696 = nn.conv2d(%695, %model.backbone.body.layer4.2.conv2.weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]);
  %697 = reshape(%model.backbone.body.layer4.2.bn2.weight, newshape=[1, -1, 1, 1]);
  %698 = reshape(%model.backbone.body.layer4.2.bn2.running_var, newshape=[1, -1, 1, 1]);
  %699 = add(%698, 0f);
  %700 = rsqrt(%699);
  %701 = multiply(%697, %700);
  %702 = multiply(%696, %701);
  %703 = reshape(%model.backbone.body.layer4.2.bn2.bias, newshape=[1, -1, 1, 1]);
  %704 = reshape(%model.backbone.body.layer4.2.bn2.running_mean, newshape=[1, -1, 1, 1]);
  %705 = multiply(%704, %701);
  %706 = subtract(%703, %705);
  %707 = add(%702, %706);
  %708 = nn.relu(%707);
  %709 = nn.conv2d(%708, %model.backbone.body.layer4.2.conv3.weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]);
  %710 = reshape(%model.backbone.body.layer4.2.bn3.weight, newshape=[1, -1, 1, 1]);
  %711 = reshape(%model.backbone.body.layer4.2.bn3.running_var, newshape=[1, -1, 1, 1]);
  %712 = add(%711, 0f);
  %713 = rsqrt(%712);
  %714 = multiply(%710, %713);
  %715 = multiply(%709, %714);
  %716 = reshape(%model.backbone.body.layer4.2.bn3.bias, newshape=[1, -1, 1, 1]);
  %717 = reshape(%model.backbone.body.layer4.2.bn3.running_mean, newshape=[1, -1, 1, 1]);
  %718 = multiply(%717, %714);
  %719 = subtract(%716, %718);
  %720 = add(%715, %719);
  %721 = add(%720, %682);
  %722 = nn.relu(%721);
  %723 = (%722, %590, %338, %166);
  %724 = %723.3;
  %725 = nn.conv2d(%724, %model.backbone.fpn.inner_blocks.0.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %726 = nn.bias_add(%725, %model.backbone.fpn.inner_blocks.0.bias);
  %727 = %723.2;
  %728 = nn.conv2d(%727, %model.backbone.fpn.inner_blocks.1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %729 = nn.bias_add(%728, %model.backbone.fpn.inner_blocks.1.bias);
  %730 = %723.1;
  %731 = nn.conv2d(%730, %model.backbone.fpn.inner_blocks.2.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %732 = nn.bias_add(%731, %model.backbone.fpn.inner_blocks.2.bias);
  %733 = %723.0;
  %734 = nn.conv2d(%733, %model.backbone.fpn.inner_blocks.3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]);
  %735 = nn.bias_add(%734, %model.backbone.fpn.inner_blocks.3.bias);
  %736 = image.resize(%735, size=[50, 50], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %737 = add(%732, %736);
  %738 = image.resize(%737, size=[100, 100], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %739 = add(%729, %738);
  %740 = image.resize(%739, size=[200, 200], method="nearest_neighbor", coordinate_transformation_mode="asymmetric");
  %741 = add(%726, %740);
  %742 = nn.conv2d(%741, %model.backbone.fpn.layer_blocks.0.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %743 = nn.bias_add(%742, %model.backbone.fpn.layer_blocks.0.bias);
  %744 = nn.conv2d(%739, %model.backbone.fpn.layer_blocks.1.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %745 = nn.bias_add(%744, %model.backbone.fpn.layer_blocks.1.bias);
  %746 = nn.conv2d(%737, %model.backbone.fpn.layer_blocks.2.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %747 = nn.bias_add(%746, %model.backbone.fpn.layer_blocks.2.bias);
  %748 = nn.conv2d(%735, %model.backbone.fpn.layer_blocks.3.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %749 = nn.bias_add(%748, %model.backbone.fpn.layer_blocks.3.bias);
  %750 = nn.max_pool2d(%749, pool_size=[1, 1], strides=[2, 2], padding=[0, 0, 0, 0]);
  %751 = (%743, %745, %747, %749, %750, %749, %749, %749, %749, %749);
  %752 = %751.0;
  %753 = %751.1;
  %754 = %751.2;
  %755 = %751.3;
  %756 = %751.4;
  %757 = %751.5;
  %758 = %751.6;
  %759 = %751.7;
  %760 = %751.8;
  %761 = %751.9;
  %762 = (%752, %753, %754, %755, %756, %757, %758, %759, %760, %761);
  %763 = %762.0;
  %764 = nn.conv2d(%763, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %765 = nn.bias_add(%764, %model.rpn.head.conv.bias);
  %766 = nn.relu(%765);
  %767 = nn.conv2d(%766, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %768 = nn.bias_add(%767, %model.rpn.head.cls_logits.bias);
  %769 = %762.1;
  %770 = nn.conv2d(%769, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %771 = nn.bias_add(%770, %model.rpn.head.conv.bias);
  %772 = nn.relu(%771);
  %773 = nn.conv2d(%772, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %774 = nn.bias_add(%773, %model.rpn.head.cls_logits.bias);
  %775 = %762.2;
  %776 = nn.conv2d(%775, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %777 = nn.bias_add(%776, %model.rpn.head.conv.bias);
  %778 = nn.relu(%777);
  %779 = nn.conv2d(%778, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %780 = nn.bias_add(%779, %model.rpn.head.cls_logits.bias);
  %781 = %762.3;
  %782 = nn.conv2d(%781, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %783 = nn.bias_add(%782, %model.rpn.head.conv.bias);
  %784 = nn.relu(%783);
  %785 = nn.conv2d(%784, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %786 = nn.bias_add(%785, %model.rpn.head.cls_logits.bias);
  %787 = %762.4;
  %788 = nn.conv2d(%787, %model.rpn.head.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]);
  %789 = nn.bias_add(%788, %model.rpn.head.conv.bias);
  %790 = nn.relu(%789);
  %791 = nn.conv2d(%790, %model.rpn.head.cls_logits.weight, padding=[0, 0, 0, 0], channels=3, kernel_size=[1, 1]);
  %792 = nn.bias_add(%791, %model.rpn.head.cls_logits.bias);
  %793 = nn.conv2d(%766, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %794 = nn.bias_add(%793, %model.rpn.head.bbox_pred.bias);
  %795 = nn.conv2d(%772, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %796 = nn.bias_add(%795, %model.rpn.head.bbox_pred.bias);
  %797 = nn.conv2d(%778, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %798 = nn.bias_add(%797, %model.rpn.head.bbox_pred.bias);
  %799 = nn.conv2d(%784, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %800 = nn.bias_add(%799, %model.rpn.head.bbox_pred.bias);
  %801 = nn.conv2d(%790, %model.rpn.head.bbox_pred.weight, padding=[0, 0, 0, 0], channels=12, kernel_size=[1, 1]);
  %802 = nn.bias_add(%801, %model.rpn.head.bbox_pred.bias);
  %803 = (%768, %774, %780, %786, %792, %794, %796, %798, %800, %802);
  %804 = %803.5;
  %805 = reshape(%804, newshape=[1, -1, 4, 200, 200]);
  %806 = transpose(%805, axes=[0, 3, 4, 1, 2]);
  %807 = reshape(%806, newshape=[1, -1, 4]);
  %808 = %803.6;
  %809 = reshape(%808, newshape=[1, -1, 4, 100, 100]);
  %810 = transpose(%809, axes=[0, 3, 4, 1, 2]);
  %811 = reshape(%810, newshape=[1, -1, 4]);
  %812 = %803.7;
  %813 = reshape(%812, newshape=[1, -1, 4, 50, 50]);
  %814 = transpose(%813, axes=[0, 3, 4, 1, 2]);
  %815 = reshape(%814, newshape=[1, -1, 4]);
  %816 = %803.8;
  %817 = reshape(%816, newshape=[1, -1, 4, 25, 25]);
  %818 = transpose(%817, axes=[0, 3, 4, 1, 2]);
  %819 = reshape(%818, newshape=[1, -1, 4]);
  %820 = %803.9;
  %821 = reshape(%820, newshape=[1, -1, 4, 13, 13]);
  %822 = transpose(%821, axes=[0, 3, 4, 1, 2]);
  %823 = reshape(%822, newshape=[1, -1, 4]);
  %824 = (%807, %811, %815, %819, %823);
  %825 = concatenate(%824, axis=1);
  %826 = reshape(%825, newshape=[-1, 4]);
  %827 = reshape(%826, newshape=[159882, -1]);
  %828 = strided_slice(%827, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %829 = strided_slice(%828, begin=[0, 0], end=[159882, 4], strides=[1, 4]);
  %830 = divide(%829, 1f);
  %831 = arange(0f, 200f, 1f, start=meta[relay.Constant][2], stop=meta[relay.Constant][3], step=meta[relay.Constant][4], dtype="float32");
  %832 = floor_divide(800, 200);
  %833 = cast(%832, dtype="int64");
  %834 = cast(%833, dtype="float32");
  %835 = multiply(%831, %834);
  %836 = arange(0f, 200f, 1f, start=meta[relay.Constant][5], stop=meta[relay.Constant][6], step=meta[relay.Constant][7], dtype="float32");
  %837 = floor_divide(800, 200);
  %838 = cast(%837, dtype="int64");
  %839 = cast(%838, dtype="float32");
  %840 = multiply(%836, %839);
  %841 = (%835, %840);
  %842 = meshgrid(%841);
  %843 = %842.1;
  %844 = reshape(%843, newshape=[-1]);
  %845 = %842.0;
  %846 = reshape(%845, newshape=[-1]);
  %847 = (%844, %846, %844, %846);
  %848 = stack(%847, axis=1);
  %849 = reshape(%848, newshape=[-1, 1, 4]);
  %850 = reshape(meta[relay.Constant][8], newshape=[1, -1, 4]);
  %851 = add(%849, %850);
  %852 = reshape(%851, newshape=[-1, 4]);
  %853 = arange(0f, 100f, 1f, start=meta[relay.Constant][9], stop=meta[relay.Constant][10], step=meta[relay.Constant][11], dtype="float32");
  %854 = floor_divide(800, 100);
  %855 = cast(%854, dtype="int64");
  %856 = cast(%855, dtype="float32");
  %857 = multiply(%853, %856);
  %858 = arange(0f, 100f, 1f, start=meta[relay.Constant][12], stop=meta[relay.Constant][13], step=meta[relay.Constant][14], dtype="float32");
  %859 = floor_divide(800, 100);
  %860 = cast(%859, dtype="int64");
  %861 = cast(%860, dtype="float32");
  %862 = multiply(%858, %861);
  %863 = (%857, %862);
  %864 = meshgrid(%863);
  %865 = %864.1;
  %866 = reshape(%865, newshape=[-1]);
  %867 = %864.0;
  %868 = reshape(%867, newshape=[-1]);
  %869 = (%866, %868, %866, %868);
  %870 = stack(%869, axis=1);
  %871 = reshape(%870, newshape=[-1, 1, 4]);
  %872 = reshape(meta[relay.Constant][15], newshape=[1, -1, 4]);
  %873 = add(%871, %872);
  %874 = reshape(%873, newshape=[-1, 4]);
  %875 = arange(0f, 50f, 1f, start=meta[relay.Constant][16], stop=meta[relay.Constant][17], step=meta[relay.Constant][18], dtype="float32");
  %876 = floor_divide(800, 50);
  %877 = cast(%876, dtype="int64");
  %878 = cast(%877, dtype="float32");
  %879 = multiply(%875, %878);
  %880 = arange(0f, 50f, 1f, start=meta[relay.Constant][19], stop=meta[relay.Constant][20], step=meta[relay.Constant][21], dtype="float32");
  %881 = floor_divide(800, 50);
  %882 = cast(%881, dtype="int64");
  %883 = cast(%882, dtype="float32");
  %884 = multiply(%880, %883);
  %885 = (%879, %884);
  %886 = meshgrid(%885);
  %887 = %886.1;
  %888 = reshape(%887, newshape=[-1]);
  %889 = %886.0;
  %890 = reshape(%889, newshape=[-1]);
  %891 = (%888, %890, %888, %890);
  %892 = stack(%891, axis=1);
  %893 = reshape(%892, newshape=[-1, 1, 4]);
  %894 = reshape(meta[relay.Constant][22], newshape=[1, -1, 4]);
  %895 = add(%893, %894);
  %896 = reshape(%895, newshape=[-1, 4]);
  %897 = arange(0f, 25f, 1f, start=meta[relay.Constant][23], stop=meta[relay.Constant][24], step=meta[relay.Constant][25], dtype="float32");
  %898 = floor_divide(800, 25);
  %899 = cast(%898, dtype="int64");
  %900 = cast(%899, dtype="float32");
  %901 = multiply(%897, %900);
  %902 = arange(0f, 25f, 1f, start=meta[relay.Constant][26], stop=meta[relay.Constant][27], step=meta[relay.Constant][28], dtype="float32");
  %903 = floor_divide(800, 25);
  %904 = cast(%903, dtype="int64");
  %905 = cast(%904, dtype="float32");
  %906 = multiply(%902, %905);
  %907 = (%901, %906);
  %908 = meshgrid(%907);
  %909 = %908.1;
  %910 = reshape(%909, newshape=[-1]);
  %911 = %908.0;
  %912 = reshape(%911, newshape=[-1]);
  %913 = (%910, %912, %910, %912);
  %914 = stack(%913, axis=1);
  %915 = reshape(%914, newshape=[-1, 1, 4]);
  %916 = reshape(meta[relay.Constant][29], newshape=[1, -1, 4]);
  %917 = add(%915, %916);
  %918 = reshape(%917, newshape=[-1, 4]);
  %919 = arange(0f, 13f, 1f, start=meta[relay.Constant][30], stop=meta[relay.Constant][31], step=meta[relay.Constant][32], dtype="float32");
  %920 = floor_divide(800, 13);
  %921 = cast(%920, dtype="int64");
  %922 = cast(%921, dtype="float32");
  %923 = multiply(%919, %922);
  %924 = arange(0f, 13f, 1f, start=meta[relay.Constant][33], stop=meta[relay.Constant][34], step=meta[relay.Constant][35], dtype="float32");
  %925 = floor_divide(800, 13);
  %926 = cast(%925, dtype="int64");
  %927 = cast(%926, dtype="float32");
  %928 = multiply(%924, %927);
  %929 = (%923, %928);
  %930 = meshgrid(%929);
  %931 = %930.1;
  %932 = reshape(%931, newshape=[-1]);
  %933 = %930.0;
  %934 = reshape(%933, newshape=[-1]);
  %935 = (%932, %934, %932, %934);
  %936 = stack(%935, axis=1);
  %937 = reshape(%936, newshape=[-1, 1, 4]);
  %938 = reshape(meta[relay.Constant][36], newshape=[1, -1, 4]);
  %939 = add(%937, %938);
  %940 = reshape(%939, newshape=[-1, 4]);
  %941 = (%852, %874, %896, %918, %940);
  %942 = concatenate(%941);
  %943 = (%942,);
  %944 = concatenate(%943);
  %945 = strided_slice(%944, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %946 = take(%945, 2, axis=1);
  %947 = strided_slice(%944, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %948 = take(%947, 0, axis=1);
  %949 = subtract(%946, %948);
  %950 = strided_slice(%949, begin=[0], end=[159882], strides=[1]);
  %951 = expand_dims(%950, axis=1);
  %952 = multiply(%830, %951);
  %953 = strided_slice(%944, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %954 = take(%953, 0, axis=1);
  %955 = multiply(%949, 0.5f);
  %956 = add(%954, %955);
  %957 = strided_slice(%956, begin=[0], end=[159882], strides=[1]);
  %958 = expand_dims(%957, axis=1);
  %959 = add(%952, %958);
  %960 = strided_slice(%827, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %961 = strided_slice(%960, begin=[0, 2], end=[159882, 4], strides=[1, 4]);
  %962 = divide(%961, 1f);
  %963 = clip(%962, a_min=-3.40282e+38f, a_max=4.13517f);
  %964 = exp(%963);
  %965 = strided_slice(%949, begin=[0], end=[159882], strides=[1]);
  %966 = expand_dims(%965, axis=1);
  %967 = multiply(%964, %966);
  %968 = multiply(0.5f, %967);
  %969 = subtract(%959, %968);
  %970 = strided_slice(%827, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %971 = strided_slice(%970, begin=[0, 1], end=[159882, 4], strides=[1, 4]);
  %972 = divide(%971, 1f);
  %973 = strided_slice(%944, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %974 = take(%973, 3, axis=1);
  %975 = strided_slice(%944, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %976 = take(%975, 1, axis=1);
  %977 = subtract(%974, %976);
  %978 = strided_slice(%977, begin=[0], end=[159882], strides=[1]);
  %979 = expand_dims(%978, axis=1);
  %980 = multiply(%972, %979);
  %981 = strided_slice(%944, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %982 = take(%981, 1, axis=1);
  %983 = multiply(%977, 0.5f);
  %984 = add(%982, %983);
  %985 = strided_slice(%984, begin=[0], end=[159882], strides=[1]);
  %986 = expand_dims(%985, axis=1);
  %987 = add(%980, %986);
  %988 = strided_slice(%827, begin=[0, 0], end=[159882, 4], strides=[1, 1]);
  %989 = strided_slice(%988, begin=[0, 3], end=[159882, 4], strides=[1, 4]);
  %990 = divide(%989, 1f);
  %991 = clip(%990, a_min=-3.40282e+38f, a_max=4.13517f);
  %992 = exp(%991);
  %993 = strided_slice(%977, begin=[0], end=[159882], strides=[1]);
  %994 = expand_dims(%993, axis=1);
  %995 = multiply(%992, %994);
  %996 = multiply(0.5f, %995);
  %997 = subtract(%987, %996);
  %998 = multiply(0.5f, %967);
  %999 = add(%959, %998);
  %1000 = multiply(0.5f, %995);
  %1001 = add(%987, %1000);
  %1002 = (%969, %997, %999, %1001);
  %1003 = stack(%1002, axis=2);
  %1004 = reshape(%1003, newshape=[0, -1, 1]);
  %1005 = squeeze(%1004, axis=[2]);
  %1006 = reshape(%1005, newshape=[159882, -1, 4]);
  %1007 = reshape(%1006, newshape=[1, -1, 4]);
  %1008 = arange(0, 1, 1, start=meta[relay.Constant][37], stop=meta[relay.Constant][38], step=meta[relay.Constant][39], dtype="int64");
  %1009 = strided_slice(%1008, begin=[0], end=[1], strides=[1]);
  %1010 = expand_dims(%1009, axis=1);
  %1011 = %803.0;
  %1012 = reshape(%1011, newshape=[1, -1, 1, 200, 200]);
  %1013 = transpose(%1012, axes=[0, 3, 4, 1, 2]);
  %1014 = reshape(%1013, newshape=[1, -1, 1]);
  %1015 = %803.1;
  %1016 = reshape(%1015, newshape=[1, -1, 1, 100, 100]);
  %1017 = transpose(%1016, axes=[0, 3, 4, 1, 2]);
  %1018 = reshape(%1017, newshape=[1, -1, 1]);
  %1019 = %803.2;
  %1020 = reshape(%1019, newshape=[1, -1, 1, 50, 50]);
  %1021 = transpose(%1020, axes=[0, 3, 4, 1, 2]);
  %1022 = reshape(%1021, newshape=[1, -1, 1]);
  %1023 = %803.3;
  %1024 = reshape(%1023, newshape=[1, -1, 1, 25, 25]);
  %1025 = transpose(%1024, axes=[0, 3, 4, 1, 2]);
  %1026 = reshape(%1025, newshape=[1, -1, 1]);
  %1027 = %803.4;
  %1028 = reshape(%1027, newshape=[1, -1, 1, 13, 13]);
  %1029 = transpose(%1028, axes=[0, 3, 4, 1, 2]);
  %1030 = reshape(%1029, newshape=[1, -1, 1]);
  %1031 = (%1014, %1018, %1022, %1026, %1030);
  %1032 = concatenate(%1031, axis=1);
  %1033 = reshape(%1032, newshape=[-1, 1, 0]);
  %1034 = squeeze(%1033, axis=[1]);
  %1035 = reshape(%1034, newshape=[1, -1]);
  %1036 = split(%1035, indices_or_sections=[120000, 150000, 157500, 159375], axis=1);
  %1037 = %1036.0;
  %1038 = topk(%1037, k=1000, axis=1, dtype="int64");
  %1039 = %1038.1;
  %1040 = add(%1039, 0);
  %1041 = %1036.1;
  %1042 = topk(%1041, k=1000, axis=1, dtype="int64");
  %1043 = %1042.1;
  %1044 = take(meta[relay.Constant][40], 1, axis=0);
  %1045 = expand_dims(%1044, axis=0);
  %1046 = add(%1045, 0);
  %1047 = add(%1043, %1046);
  %1048 = %1036.2;
  %1049 = topk(%1048, k=1000, axis=1, dtype="int64");
  %1050 = %1049.1;
  %1051 = take(meta[relay.Constant][41], 1, axis=0);
  %1052 = expand_dims(%1051, axis=0);
  %1053 = add(%1046, %1052);
  %1054 = add(%1050, %1053);
  %1055 = %1036.3;
  %1056 = topk(%1055, k=1000, axis=1, dtype="int64");
  %1057 = %1056.1;
  %1058 = take(meta[relay.Constant][42], 1, axis=0);
  %1059 = expand_dims(%1058, axis=0);
  %1060 = add(%1053, %1059);
  %1061 = add(%1057, %1060);
  %1062 = %1036.4;
  %1063 = topk(%1062, k=507, axis=1, dtype="int64");
  %1064 = %1063.1;
  %1065 = take(meta[relay.Constant][43], 1, axis=0);
  %1066 = expand_dims(%1065, axis=0);
  %1067 = add(%1060, %1066);
  %1068 = add(%1064, %1067);
  %1069 = (%1040, %1047, %1054, %1061, %1068);
  %1070 = concatenate(%1069, axis=1);
  %1071 = (%1007, %1010, %1070);
  %1072 = adv_index(%1071);
  %1073 = split(%1072, indices_or_sections=1);
  %1074 = %1073.0;
  %1075 = squeeze(%1074, axis=[0]);
  %1076 = (%1075,);
  %1077 = %1076.0;
  %1078 = strided_slice(%1077, begin=[0, 0], end=[4507, 4], strides=[1, 2]);
  %1079 = maximum(%1078, 0f);
  %1080 = %19.1;
  %1081 = cast(%1080, dtype="float32");
  %1082 = minimum(%1079, %1081);
  %1083 = strided_slice(%1077, begin=[0, 1], end=[4507, 4], strides=[1, 2]);
  %1084 = maximum(%1083, 0f);
  %1085 = %19.2;
  %1086 = cast(%1085, dtype="float32");
  %1087 = minimum(%1084, %1086);
  %1088 = (%1082, %1087);
  %1089 = stack(%1088, axis=2);
  %1090 = reshape(%1089, newshape=[4507, 4]);
  %1091 = strided_slice(%1090, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1092 = take(%1091, 2, axis=1);
  %1093 = strided_slice(%1090, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1094 = take(%1093, 0, axis=1);
  %1095 = subtract(%1092, %1094);
  %1096 = greater_equal(%1095, 0.001f);
  %1097 = cast(%1096, dtype="bool");
  %1098 = strided_slice(%1090, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1099 = take(%1098, 3, axis=1);
  %1100 = strided_slice(%1090, begin=[0, 0], end=[4507, 4], strides=[1, 1]);
  %1101 = take(%1100, 1, axis=1);
  %1102 = subtract(%1099, %1101);
  %1103 = greater_equal(%1102, 0.001f);
  %1104 = cast(%1103, dtype="bool");
  %1105 = logical_and(%1097, %1104);
  %1106 = argwhere(%1105);
  %1107 = split(%1106, indices_or_sections=1, axis=1);
  %1108 = %1107.0;
  %1109 = squeeze(%1108, axis=[1]);
  %1110 = (%1109,);
  %1111 = %1110.0;
  %1112 = cast(%1111, dtype="int64");
  %1113 = (%1090, %1112);
  %1114 = adv_index(%1113);
  %1115 = ndarray_size(%1114, dtype="int32");
  %1116 = equal(%1115, 0);
  %1183 = if (%1116) {
    zeros(shape=[0], dtype="int64")
  } else {
    %1117 = (%1035, %1010, %1070);
    %1118 = adv_index(%1117);
    %1119 = split(%1118, indices_or_sections=1);
    %1120 = %1119.0;
    %1121 = squeeze(%1120, axis=[0]);
    %1122 = (%1121,);
    %1123 = %1122.0;
    %1124 = (%1123, %1112);
    %1125 = adv_index(%1124);
    %1126 = min(%1125);
    %1127 = subtract(%1125, %1126);
    %1128 = add(%1127, 1f);
    %1129 = expand_dims(%1128, axis=-1);
    %1130 = full(0, shape=[120000], dtype="int64");
    %1131 = full(1, shape=[30000], dtype="int64");
    %1132 = full(2, shape=[7500], dtype="int64");
    %1133 = full(3, shape=[1875], dtype="int64");
    %1134 = full(4, shape=[507], dtype="int64");
    %1135 = (%1130, %1131, %1132, %1133, %1134);
    %1136 = concatenate(%1135);
    %1137 = reshape(%1136, newshape=[1, -1]);
    %1138 = cast(%1035, dtype="int64");
    %1139 = broadcast_to_like(%1137, %1138);
    %1140 = (%1139, %1010, %1070);
    %1141 = adv_index(%1140);
    %1142 = split(%1141, indices_or_sections=1);
    %1143 = %1142.0;
    %1144 = squeeze(%1143, axis=[0]);
    %1145 = (%1144,);
    %1146 = %1145.0;
    %1147 = (%1146, %1112);
    %1148 = adv_index(%1147);
    %1149 = cast(%1148, dtype="float32");
    %1150 = max(%1114);
    %1151 = add(%1150, 1f);
    %1152 = multiply(%1149, %1151);
    %1153 = cast_like(0, meta[relay.Constant][44]);
    %1154 = less(meta[relay.Constant][44], %1153);
    %1155 = shape_of(%1152, dtype="int32");
    %1156 = cast_like(%1155, meta[relay.Constant][44]);
    %1157 = add(meta[relay.Constant][44], %1156);
    %1158 = where(%1154, %1157, meta[relay.Constant][44]);
    %1159 = shape_of(%1152, dtype="int32");
    %1160 = cast(%1159, dtype="int64");
    %1161 = dyn.strided_slice(%1152, %1158, %1160, meta[relay.Constant][45], begin=None, end=None, strides=None);
    %1162 = expand_dims(%1161, axis=1);
    %1163 = add(%1114, %1162);
    %1164 = (%1129, %1163);
    %1165 = concatenate(%1164, axis=-1);
    %1166 = expand_dims(%1165, axis=0);
    %1167 = shape_of(%1128, dtype="int32");
    %1168 = squeeze(%1167);
    %1169 = arange(0, %1168, 1, start=meta[relay.Constant][46], stop=meta[relay.Call][0], step=meta[relay.Constant][47], dtype="int32");
    %1170 = expand_dims(%1169, axis=0);
    %1171 = vision.non_max_suppression(%1166, %1167, %1170, -1, 0.7f, meta[relay.attrs.NonMaximumSuppressionAttrs][0]);
    %1172 = %1171.0;
    %1173 = squeeze(%1172, axis=[0]);
    %1174 = cast_like(0, meta[relay.Constant][48]);
    %1175 = less(meta[relay.Constant][48], %1174);
    %1176 = shape_of(%1173, dtype="int32");
    %1177 = cast_like(%1176, meta[relay.Constant][48]);
    %1178 = add(meta[relay.Constant][48], %1177);
    %1179 = where(%1175, %1178, meta[relay.Constant][48]);
    %1180 = %1171.1;
    %1181 = squeeze(%1180, axis=[1]);
    %1182 = dyn.strided_slice(%1173, %1179, %1181, meta[relay.Constant][49], begin=None, end=None, strides=None, slice_mode="size");
    cast(%1182, dtype="int64")
  };
  %1184 = strided_slice(%1183, begin=[0], end=[1000], strides=[1]);
  %1185 = (%1114, %1184);
  %1186 = adv_index(%1185);
  %1187 = cast_like(0, meta[relay.Constant][50]);
  %1188 = less(meta[relay.Constant][50], %1187);
  %1189 = shape_of(%1186, dtype="int32");
  %1190 = cast_like(%1189, meta[relay.Constant][50]);
  %1191 = add(meta[relay.Constant][50], %1190);
  %1192 = where(%1188, %1191, meta[relay.Constant][50]);
  %1193 = shape_of(%1186, dtype="int32");
  %1194 = cast(%1193, dtype="int64");
  %1195 = dyn.strided_slice(%1186, %1192, %1194, meta[relay.Constant][51], begin=None, end=None, strides=None);
  %1196 = cast_like(0, meta[relay.Constant][52]);
  %1197 = less(meta[relay.Constant][52], %1196);
  %1198 = shape_of(%1195, dtype="int32");
  %1199 = cast_like(%1198, meta[relay.Constant][52]);
  %1200 = add(meta[relay.Constant][52], %1199);
  %1201 = where(%1197, %1200, meta[relay.Constant][52]);
  %1202 = shape_of(%1195, dtype="int32");
  %1203 = expand_dims(1, axis=0);
  %1204 = expand_dims(1, axis=0);
  %1205 = scatter(%1202, %1203, %1204, meta[relay.attrs.ScatterAttrs][0]);
  %1206 = cast(%1205, dtype="int64");
  %1207 = dyn.strided_slice(%1195, %1201, %1206, meta[relay.Constant][53], begin=None, end=None, strides=None);
  %1208 = full_like(%1207, 0);
  %1209 = (%1208,);
  %1210 = concatenate(%1209);
  %1211 = (%1186,);
  %1212 = concatenate(%1211);
  %1213 = (%1210, %1212);
  %1214 = concatenate(%1213, axis=1);
  %1215 = cast_like(0, meta[relay.Constant][54]);
  %1216 = less(meta[relay.Constant][54], %1215);
  %1217 = shape_of(%1186, dtype="int32");
  %1218 = cast_like(%1217, meta[relay.Constant][54]);
  %1219 = add(meta[relay.Constant][54], %1218);
  %1220 = where(%1216, %1219, meta[relay.Constant][54]);
  %1221 = shape_of(%1186, dtype="int32");
  %1222 = cast(%1221, dtype="int64");
  %1223 = dyn.strided_slice(%1186, %1220, %1222, meta[relay.Constant][55], begin=None, end=None, strides=None);
  %1224 = take(%1223, 2, axis=1);
  %1225 = cast_like(0, meta[relay.Constant][56]);
  %1226 = less(meta[relay.Constant][56], %1225);
  %1227 = shape_of(%1186, dtype="int32");
  %1228 = cast_like(%1227, meta[relay.Constant][56]);
  %1229 = add(meta[relay.Constant][56], %1228);
  %1230 = where(%1226, %1229, meta[relay.Constant][56]);
  %1231 = shape_of(%1186, dtype="int32");
  %1232 = cast(%1231, dtype="int64");
  %1233 = dyn.strided_slice(%1186, %1230, %1232, meta[relay.Constant][57], begin=None, end=None, strides=None);
  %1234 = take(%1233, 0, axis=1);
  %1235 = subtract(%1224, %1234);
  %1236 = cast_like(0, meta[relay.Constant][58]);
  %1237 = less(meta[relay.Constant][58], %1236);
  %1238 = shape_of(%1186, dtype="int32");
  %1239 = cast_like(%1238, meta[relay.Constant][58]);
  %1240 = add(meta[relay.Constant][58], %1239);
  %1241 = where(%1237, %1240, meta[relay.Constant][58]);
  %1242 = shape_of(%1186, dtype="int32");
  %1243 = cast(%1242, dtype="int64");
  %1244 = dyn.strided_slice(%1186, %1241, %1243, meta[relay.Constant][59], begin=None, end=None, strides=None);
  %1245 = take(%1244, 3, axis=1);
  %1246 = cast_like(0, meta[relay.Constant][60]);
  %1247 = less(meta[relay.Constant][60], %1246);
  %1248 = shape_of(%1186, dtype="int32");
  %1249 = cast_like(%1248, meta[relay.Constant][60]);
  %1250 = add(meta[relay.Constant][60], %1249);
  %1251 = where(%1247, %1250, meta[relay.Constant][60]);
  %1252 = shape_of(%1186, dtype="int32");
  %1253 = cast(%1252, dtype="int64");
  %1254 = dyn.strided_slice(%1186, %1251, %1253, meta[relay.Constant][61], begin=None, end=None, strides=None);
  %1255 = take(%1254, 1, axis=1);
  %1256 = subtract(%1245, %1255);
  %1257 = multiply(%1235, %1256);
  %1258 = (%1257,);
  %1259 = concatenate(%1258);
  %1260 = sqrt(%1259);
  %1261 = divide(%1260, 224f);
  %1262 = log2(%1261);
  %1263 = add(%1262, 4f);
  %1264 = add(%1263, 1e-06f);
  %1265 = floor(%1264);
  %1266 = clip(%1265, a_min=2f, a_max=5f);
  %1267 = cast(%1266, dtype="int64");
  %1268 = subtract(%1267, 2);

  %1269 = equal(%1268, 0);
  %1270 = argwhere(%1269);
  %1271 = split(%1270, indices_or_sections=1, axis=1);
  %1272 = %1271.0;
  %1273 = squeeze(%1272, axis=[1]);
  %1274 = (%1273,);
  %1275 = %1274.0;
  %1276 = cast(%1275, dtype="int64");
  %1277 = (%1214, %1276);
  %1278 = adv_index(%1277);
  %1279 = vision.roi_align(%763, %1278, meta[relay.attrs.ROIAlignAttrs][0]);
  %1280 = equal(%1268, 1);
  %1281 = argwhere(%1280);
  %1282 = split(%1281, indices_or_sections=1, axis=1);
  %1283 = %1282.0;
  %1284 = squeeze(%1283, axis=[1]);
  %1285 = (%1284,);
  %1286 = %1285.0;
  %1287 = cast(%1286, dtype="int64");
  %1288 = (%1214, %1287);
  %1289 = adv_index(%1288);
  %1290 = vision.roi_align(%769, %1289, meta[relay.attrs.ROIAlignAttrs][1]);
  %1291 = equal(%1268, 2);
  %1292 = argwhere(%1291);
  %1293 = split(%1292, indices_or_sections=1, axis=1);
  %1294 = %1293.0;
  %1295 = squeeze(%1294, axis=[1]);
  %1296 = (%1295,);
  %1297 = %1296.0;
  %1298 = cast(%1297, dtype="int64");
  %1299 = (%1214, %1298);
  %1300 = adv_index(%1299);
  %1301 = vision.roi_align(%775, %1300, meta[relay.attrs.ROIAlignAttrs][2]);
  %1302 = %762.9;
  %1303 = equal(%1268, 3);
  %1304 = argwhere(%1303);
  %1305 = split(%1304, indices_or_sections=1, axis=1);
  %1306 = %1305.0;
  %1307 = squeeze(%1306, axis=[1]);
  %1308 = (%1307,);
  %1309 = %1308.0;
  %1310 = cast(%1309, dtype="int64");
  %1311 = (%1214, %1310);
  %1312 = adv_index(%1311);
  %1313 = vision.roi_align(%1302, %1312, meta[relay.attrs.ROIAlignAttrs][3]);

  %1314 = (%1279, %1290, %1301, %1313);
  %1315 = concatenate(%1314);
  %1316 = (%1276, %1287, %1298, %1310);
  %1317 = concatenate(%1316);
  %1318 = argsort(%1317, dtype="int32");
  %1319 = cast(%1318, dtype="int64");
  %1320 = (%1315, %1319);
  %1321 = adv_index(%1320);


  %1322 = reshape(%1321, newshape=[0, -1, 1, 1]);
  %1323 = squeeze(%1322, axis=[2, 3]);
  %1324 = transpose(%model.roi_heads.box_head.fc6.weight, axes=[1, 0]);
  %1325 = transpose(%1324, axes=[1, 0]);
  %1326 = nn.dense(%1323, %1325, units=1024);
  %1327 = add(%1326, %model.roi_heads.box_head.fc6.bias);
  %1328 = nn.relu(%1327);
  %1329 = transpose(%model.roi_heads.box_head.fc7.weight, axes=[1, 0]);
  %1330 = transpose(%1329, axes=[1, 0]);
  %1331 = nn.dense(%1328, %1330, units=1024);
  %1332 = add(%1331, %model.roi_heads.box_head.fc7.bias);
  %1333 = nn.relu(%1332);
  %1334 = reshape(%1333, newshape=[0, -1]);
  %1335 = transpose(%model.roi_heads.box_predictor.cls_score.weight, axes=[1, 0]);
  %1336 = transpose(%1335, axes=[1, 0]);
  %1337 = nn.dense(%1334, %1336, units=91);
  %1338 = add(%1337, %model.roi_heads.box_predictor.cls_score.bias);
  %1339 = transpose(%model.roi_heads.box_predictor.bbox_pred.weight, axes=[1, 0]);
  %1340 = transpose(%1339, axes=[1, 0]);
  %1341 = nn.dense(%1334, %1340, units=364);
  %1342 = add(%1341, %model.roi_heads.box_predictor.bbox_pred.bias);
  %1343 = (%1338, %1342);
  %1344 = %1343.1;
  %1345 = shape_of(%1186, dtype="int32");
  %1346 = take(%1345, 0, axis=0);
  %1347 = add(%1346, 0);
  %1348 = cast(%1347, dtype="int64");
  %1349 = expand_dims(%1348, axis=0);
  %1350 = expand_dims(-1, axis=0);
  %1351 = (%1349, %1350);
  %1352 = concatenate(%1351);
  %1353 = dyn.reshape(%1344, %1352, newshape=[]);
  %1354 = cast_like(0, meta[relay.Constant][62]);
  %1355 = less(meta[relay.Constant][62], %1354);
  %1356 = shape_of(%1353, dtype="int32");
  %1357 = cast_like(%1356, meta[relay.Constant][62]);
  %1358 = add(meta[relay.Constant][62], %1357);
  %1359 = where(%1355, %1358, meta[relay.Constant][62]);
  %1360 = shape_of(%1353, dtype="int32");
  %1361 = cast(%1360, dtype="int64");
  %1362 = dyn.strided_slice(%1353, %1359, %1361, meta[relay.Constant][63], begin=None, end=None, strides=None);
  %1363 = cast_like(0, meta[relay.Constant][64]);
  %1364 = less(meta[relay.Constant][64], %1363);
  %1365 = shape_of(%1362, dtype="int32");
  %1366 = cast_like(%1365, meta[relay.Constant][64]);
  %1367 = add(meta[relay.Constant][64], %1366);
  %1368 = where(%1364, %1367, meta[relay.Constant][64]);
  %1369 = shape_of(%1362, dtype="int32");
  %1370 = cast(%1369, dtype="int64");
  %1371 = dyn.strided_slice(%1362, %1368, %1370, meta[relay.Constant][65], begin=None, end=None, strides=None);
  %1372 = divide(%1371, 10f);
  %1373 = (%1186,);
  %1374 = concatenate(%1373);
  %1375 = cast_like(0, meta[relay.Constant][66]);
  %1376 = less(meta[relay.Constant][66], %1375);
  %1377 = shape_of(%1374, dtype="int32");
  %1378 = cast_like(%1377, meta[relay.Constant][66]);
  %1379 = add(meta[relay.Constant][66], %1378);
  %1380 = where(%1376, %1379, meta[relay.Constant][66]);
  %1381 = shape_of(%1374, dtype="int32");
  %1382 = cast(%1381, dtype="int64");
  %1383 = dyn.strided_slice(%1374, %1380, %1382, meta[relay.Constant][67], begin=None, end=None, strides=None);
  %1384 = take(%1383, 2, axis=1);
  %1385 = cast_like(0, meta[relay.Constant][68]);
  %1386 = less(meta[relay.Constant][68], %1385);
  %1387 = shape_of(%1374, dtype="int32");
  %1388 = cast_like(%1387, meta[relay.Constant][68]);
  %1389 = add(meta[relay.Constant][68], %1388);
  %1390 = where(%1386, %1389, meta[relay.Constant][68]);
  %1391 = shape_of(%1374, dtype="int32");
  %1392 = cast(%1391, dtype="int64");
  %1393 = dyn.strided_slice(%1374, %1390, %1392, meta[relay.Constant][69], begin=None, end=None, strides=None);
  %1394 = take(%1393, 0, axis=1);
  %1395 = subtract(%1384, %1394);
  %1396 = cast_like(0, meta[relay.Constant][70]);
  %1397 = less(meta[relay.Constant][70], %1396);
  %1398 = shape_of(%1395, dtype="int32");
  %1399 = cast_like(%1398, meta[relay.Constant][70]);
  %1400 = add(meta[relay.Constant][70], %1399);
  %1401 = where(%1397, %1400, meta[relay.Constant][70]);
  %1402 = shape_of(%1395, dtype="int32");
  %1403 = cast(%1402, dtype="int64");
  %1404 = dyn.strided_slice(%1395, %1401, %1403, meta[relay.Constant][71], begin=None, end=None, strides=None);
  %1405 = expand_dims(%1404, axis=1);
  %1406 = multiply(%1372, %1405);
  %1407 = cast_like(0, meta[relay.Constant][72]);
  %1408 = less(meta[relay.Constant][72], %1407);
  %1409 = shape_of(%1374, dtype="int32");
  %1410 = cast_like(%1409, meta[relay.Constant][72]);
  %1411 = add(meta[relay.Constant][72], %1410);
  %1412 = where(%1408, %1411, meta[relay.Constant][72]);
  %1413 = shape_of(%1374, dtype="int32");
  %1414 = cast(%1413, dtype="int64");
  %1415 = dyn.strided_slice(%1374, %1412, %1414, meta[relay.Constant][73], begin=None, end=None, strides=None);
  %1416 = take(%1415, 0, axis=1);
  %1417 = multiply(%1395, 0.5f);
  %1418 = add(%1416, %1417);
  %1419 = cast_like(0, meta[relay.Constant][74]);
  %1420 = less(meta[relay.Constant][74], %1419);
  %1421 = shape_of(%1418, dtype="int32");
  %1422 = cast_like(%1421, meta[relay.Constant][74]);
  %1423 = add(meta[relay.Constant][74], %1422);
  %1424 = where(%1420, %1423, meta[relay.Constant][74]);
  %1425 = shape_of(%1418, dtype="int32");
  %1426 = cast(%1425, dtype="int64");
  %1427 = dyn.strided_slice(%1418, %1424, %1426, meta[relay.Constant][75], begin=None, end=None, strides=None);
  %1428 = expand_dims(%1427, axis=1);
  %1429 = add(%1406, %1428);
  %1430 = cast_like(0, meta[relay.Constant][76]);
  %1431 = less(meta[relay.Constant][76], %1430);
  %1432 = shape_of(%1353, dtype="int32");
  %1433 = cast_like(%1432, meta[relay.Constant][76]);
  %1434 = add(meta[relay.Constant][76], %1433);
  %1435 = where(%1431, %1434, meta[relay.Constant][76]);
  %1436 = shape_of(%1353, dtype="int32");
  %1437 = cast(%1436, dtype="int64");
  %1438 = dyn.strided_slice(%1353, %1435, %1437, meta[relay.Constant][77], begin=None, end=None, strides=None);
  %1439 = cast_like(0, meta[relay.Constant][78]);
  %1440 = less(meta[relay.Constant][78], %1439);
  %1441 = shape_of(%1438, dtype="int32");
  %1442 = cast_like(%1441, meta[relay.Constant][78]);
  %1443 = add(meta[relay.Constant][78], %1442);
  %1444 = where(%1440, %1443, meta[relay.Constant][78]);
  %1445 = shape_of(%1438, dtype="int32");
  %1446 = cast(%1445, dtype="int64");
  %1447 = dyn.strided_slice(%1438, %1444, %1446, meta[relay.Constant][79], begin=None, end=None, strides=None);
  %1448 = divide(%1447, 5f);
  %1449 = clip(%1448, a_min=-3.40282e+38f, a_max=4.13517f);
  %1450 = exp(%1449);
  %1451 = cast_like(0, meta[relay.Constant][80]);
  %1452 = less(meta[relay.Constant][80], %1451);
  %1453 = shape_of(%1395, dtype="int32");
  %1454 = cast_like(%1453, meta[relay.Constant][80]);
  %1455 = add(meta[relay.Constant][80], %1454);
  %1456 = where(%1452, %1455, meta[relay.Constant][80]);
  %1457 = shape_of(%1395, dtype="int32");
  %1458 = cast(%1457, dtype="int64");
  %1459 = dyn.strided_slice(%1395, %1456, %1458, meta[relay.Constant][81], begin=None, end=None, strides=None);
  %1460 = expand_dims(%1459, axis=1);
  %1461 = multiply(%1450, %1460);
  %1462 = multiply(0.5f, %1461);
  %1463 = subtract(%1429, %1462);
  %1464 = cast_like(0, meta[relay.Constant][82]);
  %1465 = less(meta[relay.Constant][82], %1464);
  %1466 = shape_of(%1353, dtype="int32");
  %1467 = cast_like(%1466, meta[relay.Constant][82]);
  %1468 = add(meta[relay.Constant][82], %1467);
  %1469 = where(%1465, %1468, meta[relay.Constant][82]);
  %1470 = shape_of(%1353, dtype="int32");
  %1471 = cast(%1470, dtype="int64");
  %1472 = dyn.strided_slice(%1353, %1469, %1471, meta[relay.Constant][83], begin=None, end=None, strides=None);
  %1473 = cast_like(0, meta[relay.Constant][84]);
  %1474 = less(meta[relay.Constant][84], %1473);
  %1475 = shape_of(%1472, dtype="int32");
  %1476 = cast_like(%1475, meta[relay.Constant][84]);
  %1477 = add(meta[relay.Constant][84], %1476);
  %1478 = where(%1474, %1477, meta[relay.Constant][84]);
  %1479 = shape_of(%1472, dtype="int32");
  %1480 = cast(%1479, dtype="int64");
  %1481 = dyn.strided_slice(%1472, %1478, %1480, meta[relay.Constant][85], begin=None, end=None, strides=None);
  %1482 = divide(%1481, 10f);
  %1483 = cast_like(0, meta[relay.Constant][86]);
  %1484 = less(meta[relay.Constant][86], %1483);
  %1485 = shape_of(%1374, dtype="int32");
  %1486 = cast_like(%1485, meta[relay.Constant][86]);
  %1487 = add(meta[relay.Constant][86], %1486);
  %1488 = where(%1484, %1487, meta[relay.Constant][86]);
  %1489 = shape_of(%1374, dtype="int32");
  %1490 = cast(%1489, dtype="int64");
  %1491 = dyn.strided_slice(%1374, %1488, %1490, meta[relay.Constant][87], begin=None, end=None, strides=None);
  %1492 = take(%1491, 3, axis=1);
  %1493 = cast_like(0, meta[relay.Constant][88]);
  %1494 = less(meta[relay.Constant][88], %1493);
  %1495 = shape_of(%1374, dtype="int32");
  %1496 = cast_like(%1495, meta[relay.Constant][88]);
  %1497 = add(meta[relay.Constant][88], %1496);
  %1498 = where(%1494, %1497, meta[relay.Constant][88]);
  %1499 = shape_of(%1374, dtype="int32");
  %1500 = cast(%1499, dtype="int64");
  %1501 = dyn.strided_slice(%1374, %1498, %1500, meta[relay.Constant][89], begin=None, end=None, strides=None);
  %1502 = take(%1501, 1, axis=1);
  %1503 = subtract(%1492, %1502);
  %1504 = cast_like(0, meta[relay.Constant][90]);
  %1505 = less(meta[relay.Constant][90], %1504);
  %1506 = shape_of(%1503, dtype="int32");
  %1507 = cast_like(%1506, meta[relay.Constant][90]);
  %1508 = add(meta[relay.Constant][90], %1507);
  %1509 = where(%1505, %1508, meta[relay.Constant][90]);
  %1510 = shape_of(%1503, dtype="int32");
  %1511 = cast(%1510, dtype="int64");
  %1512 = dyn.strided_slice(%1503, %1509, %1511, meta[relay.Constant][91], begin=None, end=None, strides=None);
  %1513 = expand_dims(%1512, axis=1);
  %1514 = multiply(%1482, %1513);
  %1515 = cast_like(0, meta[relay.Constant][92]);
  %1516 = less(meta[relay.Constant][92], %1515);
  %1517 = shape_of(%1374, dtype="int32");
  %1518 = cast_like(%1517, meta[relay.Constant][92]);
  %1519 = add(meta[relay.Constant][92], %1518);
  %1520 = where(%1516, %1519, meta[relay.Constant][92]);
  %1521 = shape_of(%1374, dtype="int32");
  %1522 = cast(%1521, dtype="int64");
  %1523 = dyn.strided_slice(%1374, %1520, %1522, meta[relay.Constant][93], begin=None, end=None, strides=None);
  %1524 = take(%1523, 1, axis=1);
  %1525 = multiply(%1503, 0.5f);
  %1526 = add(%1524, %1525);
  %1527 = cast_like(0, meta[relay.Constant][94]);
  %1528 = less(meta[relay.Constant][94], %1527);
  %1529 = shape_of(%1526, dtype="int32");
  %1530 = cast_like(%1529, meta[relay.Constant][94]);
  %1531 = add(meta[relay.Constant][94], %1530);
  %1532 = where(%1528, %1531, meta[relay.Constant][94]);
  %1533 = shape_of(%1526, dtype="int32");
  %1534 = cast(%1533, dtype="int64");
  %1535 = dyn.strided_slice(%1526, %1532, %1534, meta[relay.Constant][95], begin=None, end=None, strides=None);
  %1536 = expand_dims(%1535, axis=1);
  %1537 = add(%1514, %1536);
  %1538 = cast_like(0, meta[relay.Constant][96]);
  %1539 = less(meta[relay.Constant][96], %1538);
  %1540 = shape_of(%1353, dtype="int32");
  %1541 = cast_like(%1540, meta[relay.Constant][96]);
  %1542 = add(meta[relay.Constant][96], %1541);
  %1543 = where(%1539, %1542, meta[relay.Constant][96]);
  %1544 = shape_of(%1353, dtype="int32");
  %1545 = cast(%1544, dtype="int64");
  %1546 = dyn.strided_slice(%1353, %1543, %1545, meta[relay.Constant][97], begin=None, end=None, strides=None);
  %1547 = cast_like(0, meta[relay.Constant][98]);
  %1548 = less(meta[relay.Constant][98], %1547);
  %1549 = shape_of(%1546, dtype="int32");
  %1550 = cast_like(%1549, meta[relay.Constant][98]);
  %1551 = add(meta[relay.Constant][98], %1550);
  %1552 = where(%1548, %1551, meta[relay.Constant][98]);
  %1553 = shape_of(%1546, dtype="int32");
  %1554 = cast(%1553, dtype="int64");
  %1555 = dyn.strided_slice(%1546, %1552, %1554, meta[relay.Constant][99], begin=None, end=None, strides=None);
  %1556 = divide(%1555, 5f);
  %1557 = clip(%1556, a_min=-3.40282e+38f, a_max=4.13517f);
  %1558 = exp(%1557);
  %1559 = cast_like(0, meta[relay.Constant][100]);
  %1560 = less(meta[relay.Constant][100], %1559);
  %1561 = shape_of(%1503, dtype="int32");
  %1562 = cast_like(%1561, meta[relay.Constant][100]);
  %1563 = add(meta[relay.Constant][100], %1562);
  %1564 = where(%1560, %1563, meta[relay.Constant][100]);
  %1565 = shape_of(%1503, dtype="int32");
  %1566 = cast(%1565, dtype="int64");
  %1567 = dyn.strided_slice(%1503, %1564, %1566, meta[relay.Constant][101], begin=None, end=None, strides=None);
  %1568 = expand_dims(%1567, axis=1);
  %1569 = multiply(%1558, %1568);
  %1570 = multiply(0.5f, %1569);
  %1571 = subtract(%1537, %1570);
  %1572 = multiply(0.5f, %1461);
  %1573 = add(%1429, %1572);
  %1574 = multiply(0.5f, %1569);
  %1575 = add(%1537, %1574);
  %1576 = (%1463, %1571, %1573, %1575);
  %1577 = stack(%1576, axis=2);
  %1578 = reshape(%1577, newshape=[0, -1, 1]);
  %1579 = squeeze(%1578, axis=[2]);
  %1580 = cast(%1347, dtype="int64");
  %1581 = expand_dims(%1580, axis=0);
  %1582 = expand_dims(-1, axis=0);
  %1583 = expand_dims(4, axis=0);
  %1584 = (%1581, %1582, %1583);
  %1585 = concatenate(%1584);
  %1586 = dyn.reshape(%1579, %1585, newshape=[]);
  %1587 = (%1586,);
  %1588 = %1587.0;
  %1589 = cast_like(0, meta[relay.Constant][102]);
  %1590 = less(meta[relay.Constant][102], %1589);
  %1591 = shape_of(%1588, dtype="int32");
  %1592 = cast_like(%1591, meta[relay.Constant][102]);
  %1593 = add(meta[relay.Constant][102], %1592);
  %1594 = where(%1590, %1593, meta[relay.Constant][102]);
  %1595 = shape_of(%1588, dtype="int32");
  %1596 = cast(%1595, dtype="int64");
  %1597 = dyn.strided_slice(%1588, %1594, %1596, meta[relay.Constant][103], begin=None, end=None, strides=None);
  %1598 = maximum(%1597, 0f);
  %1599 = cast(%1080, dtype="float32");
  %1600 = minimum(%1598, %1599);
  %1601 = cast_like(0, meta[relay.Constant][104]);
  %1602 = less(meta[relay.Constant][104], %1601);
  %1603 = shape_of(%1588, dtype="int32");
  %1604 = cast_like(%1603, meta[relay.Constant][104]);
  %1605 = add(meta[relay.Constant][104], %1604);
  %1606 = where(%1602, %1605, meta[relay.Constant][104]);
  %1607 = shape_of(%1588, dtype="int32");
  %1608 = cast(%1607, dtype="int64");
  %1609 = dyn.strided_slice(%1588, %1606, %1608, meta[relay.Constant][105], begin=None, end=None, strides=None);
  %1610 = maximum(%1609, 0f);
  %1611 = cast(%1085, dtype="float32");
  %1612 = minimum(%1610, %1611);
  %1613 = (%1600, %1612);
  %1614 = stack(%1613, axis=3);
  %1615 = shape_of(%1588, dtype="int32");
  %1616 = take(%1615, 0, axis=0);
  %1617 = cast(%1616, dtype="int64");
  %1618 = expand_dims(%1617, axis=0);
  %1619 = shape_of(%1588, dtype="int32");
  %1620 = take(%1619, 1, axis=0);
  %1621 = cast(%1620, dtype="int64");
  %1622 = expand_dims(%1621, axis=0);
  %1623 = shape_of(%1588, dtype="int32");
  %1624 = take(%1623, 2, axis=0);
  %1625 = cast(%1624, dtype="int64");
  %1626 = expand_dims(%1625, axis=0);
  %1627 = (%1618, %1622, %1626);
  %1628 = concatenate(%1627);
  %1629 = dyn.reshape(%1614, %1628, newshape=[]);
  %1630 = cast_like(0, meta[relay.Constant][106]);
  %1631 = less(meta[relay.Constant][106], %1630);
  %1632 = shape_of(%1629, dtype="int32");
  %1633 = cast_like(%1632, meta[relay.Constant][106]);
  %1634 = add(meta[relay.Constant][106], %1633);
  %1635 = where(%1631, %1634, meta[relay.Constant][106]);
  %1636 = shape_of(%1629, dtype="int32");
  %1637 = cast(%1636, dtype="int64");
  %1638 = dyn.strided_slice(%1629, %1635, %1637, meta[relay.Constant][107], begin=None, end=None, strides=None);
  %1639 = cast_like(0, meta[relay.Constant][108]);
  %1640 = less(meta[relay.Constant][108], %1639);
  %1641 = shape_of(%1638, dtype="int32");
  %1642 = cast_like(%1641, meta[relay.Constant][108]);
  %1643 = add(meta[relay.Constant][108], %1642);
  %1644 = where(%1640, %1643, meta[relay.Constant][108]);
  %1645 = shape_of(%1638, dtype="int32");
  %1646 = cast(%1645, dtype="int64");
  %1647 = dyn.strided_slice(%1638, %1644, %1646, meta[relay.Constant][109], begin=None, end=None, strides=None);
  %1648 = reshape(%1647, newshape=[-1, 4]);
  %1649 = %1343.0;
  %1650 = nn.softmax(%1649);
  %1651 = (%1650,);
  %1652 = %1651.0;
  %1653 = cast_like(0, meta[relay.Constant][110]);
  %1654 = less(meta[relay.Constant][110], %1653);
  %1655 = shape_of(%1652, dtype="int32");
  %1656 = cast_like(%1655, meta[relay.Constant][110]);
  %1657 = add(meta[relay.Constant][110], %1656);
  %1658 = where(%1654, %1657, meta[relay.Constant][110]);
  %1659 = shape_of(%1652, dtype="int32");
  %1660 = cast(%1659, dtype="int64");
  %1661 = dyn.strided_slice(%1652, %1658, %1660, meta[relay.Constant][111], begin=None, end=None, strides=None);
  %1662 = cast_like(0, meta[relay.Constant][112]);
  %1663 = less(meta[relay.Constant][112], %1662);
  %1664 = shape_of(%1661, dtype="int32");
  %1665 = cast_like(%1664, meta[relay.Constant][112]);
  %1666 = add(meta[relay.Constant][112], %1665);
  %1667 = where(%1663, %1666, meta[relay.Constant][112]);
  %1668 = shape_of(%1661, dtype="int32");
  %1669 = cast(%1668, dtype="int64");
  %1670 = dyn.strided_slice(%1661, %1667, %1669, meta[relay.Constant][113], begin=None, end=None, strides=None);
  %1671 = reshape(%1670, newshape=[-1]);
  %1672 = greater(%1671, 0.05f);
  %1673 = argwhere(%1672);
  %1674 = split(%1673, indices_or_sections=1, axis=1);
  %1675 = %1674.0;
  %1676 = squeeze(%1675, axis=[1]);
  %1677 = (%1676,);
  %1678 = %1677.0;
  %1679 = cast(%1678, dtype="int64");
  %1680 = (%1648, %1679);
  %1681 = adv_index(%1680);
  %1682 = cast_like(0, meta[relay.Constant][114]);
  %1683 = less(meta[relay.Constant][114], %1682);
  %1684 = shape_of(%1681, dtype="int32");
  %1685 = cast_like(%1684, meta[relay.Constant][114]);
  %1686 = add(meta[relay.Constant][114], %1685);
  %1687 = where(%1683, %1686, meta[relay.Constant][114]);
  %1688 = shape_of(%1681, dtype="int32");
  %1689 = cast(%1688, dtype="int64");
  %1690 = dyn.strided_slice(%1681, %1687, %1689, meta[relay.Constant][115], begin=None, end=None, strides=None);
  %1691 = take(%1690, 2, axis=1);
  %1692 = cast_like(0, meta[relay.Constant][116]);
  %1693 = less(meta[relay.Constant][116], %1692);
  %1694 = shape_of(%1681, dtype="int32");
  %1695 = cast_like(%1694, meta[relay.Constant][116]);
  %1696 = add(meta[relay.Constant][116], %1695);
  %1697 = where(%1693, %1696, meta[relay.Constant][116]);
  %1698 = shape_of(%1681, dtype="int32");
  %1699 = cast(%1698, dtype="int64");
  %1700 = dyn.strided_slice(%1681, %1697, %1699, meta[relay.Constant][117], begin=None, end=None, strides=None);
  %1701 = take(%1700, 0, axis=1);
  %1702 = subtract(%1691, %1701);
  %1703 = greater_equal(%1702, 0.01f);
  %1704 = cast(%1703, dtype="bool");
  %1705 = cast_like(0, meta[relay.Constant][118]);
  %1706 = less(meta[relay.Constant][118], %1705);
  %1707 = shape_of(%1681, dtype="int32");
  %1708 = cast_like(%1707, meta[relay.Constant][118]);
  %1709 = add(meta[relay.Constant][118], %1708);
  %1710 = where(%1706, %1709, meta[relay.Constant][118]);
  %1711 = shape_of(%1681, dtype="int32");
  %1712 = cast(%1711, dtype="int64");
  %1713 = dyn.strided_slice(%1681, %1710, %1712, meta[relay.Constant][119], begin=None, end=None, strides=None);
  %1714 = take(%1713, 3, axis=1);
  %1715 = cast_like(0, meta[relay.Constant][120]);
  %1716 = less(meta[relay.Constant][120], %1715);
  %1717 = shape_of(%1681, dtype="int32");
  %1718 = cast_like(%1717, meta[relay.Constant][120]);
  %1719 = add(meta[relay.Constant][120], %1718);
  %1720 = where(%1716, %1719, meta[relay.Constant][120]);
  %1721 = shape_of(%1681, dtype="int32");
  %1722 = cast(%1721, dtype="int64");
  %1723 = dyn.strided_slice(%1681, %1720, %1722, meta[relay.Constant][121], begin=None, end=None, strides=None);
  %1724 = take(%1723, 1, axis=1);
  %1725 = subtract(%1714, %1724);
  %1726 = greater_equal(%1725, 0.01f);
  %1727 = cast(%1726, dtype="bool");
  %1728 = logical_and(%1704, %1727);
  %1729 = argwhere(%1728);
  %1730 = split(%1729, indices_or_sections=1, axis=1);
  %1731 = %1730.0;
  %1732 = squeeze(%1731, axis=[1]);
  %1733 = (%1732,);
  %1734 = %1733.0;
  %1735 = cast(%1734, dtype="int64");
  %1736 = (%1681, %1735);
  %1737 = adv_index(%1736);
  %1738 = ndarray_size(%1737, dtype="int32");
  %1739 = equal(%1738, 0);
  %1809 = if (%1739) {
    zeros(shape=[0], dtype="int64")
  } else {
    %1740 = (%1671, %1679);
    %1741 = adv_index(%1740);
    %1742 = (%1741, %1735);
    %1743 = adv_index(%1742);
    %1744 = min(%1743);
    %1745 = subtract(%1743, %1744);
    %1746 = add(%1745, 1f);
    %1747 = expand_dims(%1746, axis=-1);
    %1748 = arange(0, 91, 1, start=meta[relay.Constant][122], stop=meta[relay.Constant][123], step=meta[relay.Constant][124], dtype="int64");
    %1749 = reshape(%1748, newshape=[1, -1]);
    %1750 = cast(%1652, dtype="int64");
    %1751 = broadcast_to_like(%1749, %1750);
    %1752 = cast_like(0, meta[relay.Constant][125]);
    %1753 = less(meta[relay.Constant][125], %1752);
    %1754 = shape_of(%1751, dtype="int32");
    %1755 = cast_like(%1754, meta[relay.Constant][125]);
    %1756 = add(meta[relay.Constant][125], %1755);
    %1757 = where(%1753, %1756, meta[relay.Constant][125]);
    %1758 = shape_of(%1751, dtype="int32");
    %1759 = cast(%1758, dtype="int64");
    %1760 = dyn.strided_slice(%1751, %1757, %1759, meta[relay.Constant][126], begin=None, end=None, strides=None);
    %1761 = cast_like(0, meta[relay.Constant][127]);
    %1762 = less(meta[relay.Constant][127], %1761);
    %1763 = shape_of(%1760, dtype="int32");
    %1764 = cast_like(%1763, meta[relay.Constant][127]);
    %1765 = add(meta[relay.Constant][127], %1764);
    %1766 = where(%1762, %1765, meta[relay.Constant][127]);
    %1767 = shape_of(%1760, dtype="int32");
    %1768 = cast(%1767, dtype="int64");
    %1769 = dyn.strided_slice(%1760, %1766, %1768, meta[relay.Constant][128], begin=None, end=None, strides=None);
    %1770 = reshape(%1769, newshape=[-1]);
    %1771 = (%1770, %1679);
    %1772 = adv_index(%1771);
    %1773 = (%1772, %1735);
    %1774 = adv_index(%1773);
    %1775 = cast(%1774, dtype="float32");
    %1776 = max(%1737);
    %1777 = add(%1776, 1f);
    %1778 = multiply(%1775, %1777);
    %1779 = cast_like(0, meta[relay.Constant][129]);
    %1780 = less(meta[relay.Constant][129], %1779);
    %1781 = shape_of(%1778, dtype="int32");
    %1782 = cast_like(%1781, meta[relay.Constant][129]);
    %1783 = add(meta[relay.Constant][129], %1782);
    %1784 = where(%1780, %1783, meta[relay.Constant][129]);
    %1785 = shape_of(%1778, dtype="int32");
    %1786 = cast(%1785, dtype="int64");
    %1787 = dyn.strided_slice(%1778, %1784, %1786, meta[relay.Constant][130], begin=None, end=None, strides=None);
    %1788 = expand_dims(%1787, axis=1);
    %1789 = add(%1737, %1788);
    %1790 = (%1747, %1789);
    %1791 = concatenate(%1790, axis=-1);
    %1792 = expand_dims(%1791, axis=0);
    %1793 = shape_of(%1746, dtype="int32");
    %1794 = squeeze(%1793);
    %1795 = arange(0, %1794, 1, start=meta[relay.Constant][131], stop=meta[relay.Call][1], step=meta[relay.Constant][132], dtype="int32");
    %1796 = expand_dims(%1795, axis=0);
    %1797 = vision.non_max_suppression(%1792, %1793, %1796, -1, 0.5f, meta[relay.attrs.NonMaximumSuppressionAttrs][1]);
    %1798 = %1797.0;
    %1799 = squeeze(%1798, axis=[0]);
    %1800 = cast_like(0, meta[relay.Constant][133]);
    %1801 = less(meta[relay.Constant][133], %1800);
    %1802 = shape_of(%1799, dtype="int32");
    %1803 = cast_like(%1802, meta[relay.Constant][133]);
    %1804 = add(meta[relay.Constant][133], %1803);
    %1805 = where(%1801, %1804, meta[relay.Constant][133]);
    %1806 = %1797.1;
    %1807 = squeeze(%1806, axis=[1]);
    %1808 = dyn.strided_slice(%1799, %1805, %1807, meta[relay.Constant][134], begin=None, end=None, strides=None, slice_mode="size");
    cast(%1808, dtype="int64")
  };
  %1810 = strided_slice(%1809, begin=[0], end=[100], strides=[1]);
  %1811 = (%1737, %1810);
  %1812 = adv_index(%1811);
  %1813 = (%1743, %1810);
  %1814 = adv_index(%1813);
  %1815 = (%1774, %1810);
  %1816 = adv_index(%1815);
  %1817 = (%1812, %1814, %1816);
  %1818 = %1817.0;
  %1819 = split(%1818, indices_or_sections=4, axis=1);
  %1820 = %1819.0;
  %1821 = squeeze(%1820, axis=[1]);
  %1822 = %1819.1;
  %1823 = squeeze(%1822, axis=[1]);
  %1824 = %1819.2;
  %1825 = squeeze(%1824, axis=[1]);
  %1826 = %1819.3;
  %1827 = squeeze(%1826, axis=[1]);
  %1828 = (%1821, %1823, %1825, %1827);
  %1829 = %1828.0;
  %1830 = cast(300, dtype="float32");
  %1831 = cast(%1080, dtype="float32");
  %1832 = divide(%1830, %1831);
  %1833 = multiply(%1829, %1832);
  %1834 = %1828.1;
  %1835 = cast(300, dtype="float32");
  %1836 = cast(%1085, dtype="float32");
  %1837 = divide(%1835, %1836);
  %1838 = multiply(%1834, %1837);
  %1839 = %1828.2;
  %1840 = multiply(%1839, %1832);
  %1841 = %1828.3;
  %1842 = multiply(%1841, %1837);
  %1843 = (%1833, %1838, %1840, %1842);
  %1844 = stack(%1843, axis=1);
  %1845 = %1817.1;
  %1846 = %1817.2;
  %1847 = (%1844, %1845, %1846);
  %1848 = %1847.0;
  %1849 = %1847.1;
  %1850 = %1847.2;
  (%1848, %1849, %1850)
}
