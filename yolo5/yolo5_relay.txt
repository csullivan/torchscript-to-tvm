def @main(%input0: Tensor[(1, 3, 416, 416), float32], %model.model.backbone.body.0.conv.conv.weight: Tensor[(32, 12, 3, 3), float32], %model.model.backbone.body.0.conv.bn.weight: Tensor[(32), float32], %model.model.backbone.body.0.conv.bn.bias: Tensor[(32), float32], %model.model.backbone.body.0.conv.bn.running_mean: Tensor[(32), float32], %model.model.backbone.body.0.conv.bn.running_var: Tensor[(32), float32], %model.model.backbone.body.1.conv.weight: Tensor[(64, 32, 3, 3), float32], %model.model.backbone.body.1.bn.weight: Tensor[(64), float32], %model.model.backbone.body.1.bn.bias: Tensor[(64), float32], %model.model.backbone.body.1.bn.running_mean: Tensor[(64), float32], %model.model.backbone.body.1.bn.running_var: Tensor[(64), float32], %model.model.backbone.body.2.cv1.conv.weight: Tensor[(32, 64, 1, 1), float32], %model.model.backbone.body.2.cv1.bn.weight: Tensor[(32), float32], %model.model.backbone.body.2.cv1.bn.bias: Tensor[(32), float32], %model.model.backbone.body.2.cv1.bn.running_mean: Tensor[(32), float32], %model.model.backbone.body.2.cv1.bn.running_var: Tensor[(32), float32], %model.model.backbone.body.2.m.0.cv1.conv.weight: Tensor[(32, 32, 1, 1), float32], %model.model.backbone.body.2.m.0.cv1.bn.weight: Tensor[(32), float32], %model.model.backbone.body.2.m.0.cv1.bn.bias: Tensor[(32), float32], %model.model.backbone.body.2.m.0.cv1.bn.running_mean: Tensor[(32), float32], %model.model.backbone.body.2.m.0.cv1.bn.running_var: Tensor[(32), float32], %model.model.backbone.body.2.m.0.cv2.conv.weight: Tensor[(32, 32, 3, 3), float32], %model.model.backbone.body.2.m.0.cv2.bn.weight: Tensor[(32), float32], %model.model.backbone.body.2.m.0.cv2.bn.bias: Tensor[(32), float32], %model.model.backbone.body.2.m.0.cv2.bn.running_mean: Tensor[(32), float32], %model.model.backbone.body.2.m.0.cv2.bn.running_var: Tensor[(32), float32], %model.model.backbone.body.2.cv3.weight: Tensor[(32, 32, 1, 1), float32], %model.model.backbone.body.2.cv2.weight: Tensor[(32, 64, 1, 1), float32], %model.model.backbone.body.2.bn.weight: Tensor[(64), float32], %model.model.backbone.body.2.bn.bias: Tensor[(64), float32], %model.model.backbone.body.2.bn.running_mean: Tensor[(64), float32], %model.model.backbone.body.2.bn.running_var: Tensor[(64), float32], %model.model.backbone.body.2.cv4.conv.weight: Tensor[(64, 64, 1, 1), float32], %model.model.backbone.body.2.cv4.bn.weight: Tensor[(64), float32], %model.model.backbone.body.2.cv4.bn.bias: Tensor[(64), float32], %model.model.backbone.body.2.cv4.bn.running_mean: Tensor[(64), float32], %model.model.backbone.body.2.cv4.bn.running_var: Tensor[(64), float32], %model.model.backbone.body.3.conv.weight: Tensor[(128, 64, 3, 3), float32], %model.model.backbone.body.3.bn.weight: Tensor[(128), float32], %model.model.backbone.body.3.bn.bias: Tensor[(128), float32], %model.model.backbone.body.3.bn.running_mean: Tensor[(128), float32], %model.model.backbone.body.3.bn.running_var: Tensor[(128), float32], %model.model.backbone.body.4.cv1.conv.weight: Tensor[(64, 128, 1, 1), float32], %model.model.backbone.body.4.cv1.bn.weight: Tensor[(64), float32], %model.model.backbone.body.4.cv1.bn.bias: Tensor[(64), float32], %model.model.backbone.body.4.cv1.bn.running_mean: Tensor[(64), float32], %model.model.backbone.body.4.cv1.bn.running_var: Tensor[(64), float32], %model.model.backbone.body.4.m.0.cv1.conv.weight: Tensor[(64, 64, 1, 1), float32], %model.model.backbone.body.4.m.0.cv1.bn.weight: Tensor[(64), float32], %model.model.backbone.body.4.m.0.cv1.bn.bias: Tensor[(64), float32], %model.model.backbone.body.4.m.0.cv1.bn.running_mean: Tensor[(64), float32], %model.model.backbone.body.4.m.0.cv1.bn.running_var: Tensor[(64), float32], %model.model.backbone.body.4.m.0.cv2.conv.weight: Tensor[(64, 64, 3, 3), float32], %model.model.backbone.body.4.m.0.cv2.bn.weight: Tensor[(64), float32], %model.model.backbone.body.4.m.0.cv2.bn.bias: Tensor[(64), float32], %model.model.backbone.body.4.m.0.cv2.bn.running_mean: Tensor[(64), float32], %model.model.backbone.body.4.m.0.cv2.bn.running_var: Tensor[(64), float32], %model.model.backbone.body.4.m.1.cv1.conv.weight: Tensor[(64, 64, 1, 1), float32], %model.model.backbone.body.4.m.1.cv1.bn.weight: Tensor[(64), float32], %model.model.backbone.body.4.m.1.cv1.bn.bias: Tensor[(64), float32], %model.model.backbone.body.4.m.1.cv1.bn.running_mean: Tensor[(64), float32], %model.model.backbone.body.4.m.1.cv1.bn.running_var: Tensor[(64), float32], %model.model.backbone.body.4.m.1.cv2.conv.weight: Tensor[(64, 64, 3, 3), float32], %model.model.backbone.body.4.m.1.cv2.bn.weight: Tensor[(64), float32], %model.model.backbone.body.4.m.1.cv2.bn.bias: Tensor[(64), float32], %model.model.backbone.body.4.m.1.cv2.bn.running_mean: Tensor[(64), float32], %model.model.backbone.body.4.m.1.cv2.bn.running_var: Tensor[(64), float32], %model.model.backbone.body.4.m.2.cv1.conv.weight: Tensor[(64, 64, 1, 1), float32], %model.model.backbone.body.4.m.2.cv1.bn.weight: Tensor[(64), float32], %model.model.backbone.body.4.m.2.cv1.bn.bias: Tensor[(64), float32], %model.model.backbone.body.4.m.2.cv1.bn.running_mean: Tensor[(64), float32], %model.model.backbone.body.4.m.2.cv1.bn.running_var: Tensor[(64), float32], %model.model.backbone.body.4.m.2.cv2.conv.weight: Tensor[(64, 64, 3, 3), float32], %model.model.backbone.body.4.m.2.cv2.bn.weight: Tensor[(64), float32], %model.model.backbone.body.4.m.2.cv2.bn.bias: Tensor[(64), float32], %model.model.backbone.body.4.m.2.cv2.bn.running_mean: Tensor[(64), float32], %model.model.backbone.body.4.m.2.cv2.bn.running_var: Tensor[(64), float32], %model.model.backbone.body.4.cv3.weight: Tensor[(64, 64, 1, 1), float32], %model.model.backbone.body.4.cv2.weight: Tensor[(64, 128, 1, 1), float32], %model.model.backbone.body.4.bn.weight: Tensor[(128), float32], %model.model.backbone.body.4.bn.bias: Tensor[(128), float32], %model.model.backbone.body.4.bn.running_mean: Tensor[(128), float32], %model.model.backbone.body.4.bn.running_var: Tensor[(128), float32], %model.model.backbone.body.4.cv4.conv.weight: Tensor[(128, 128, 1, 1), float32], %model.model.backbone.body.4.cv4.bn.weight: Tensor[(128), float32], %model.model.backbone.body.4.cv4.bn.bias: Tensor[(128), float32], %model.model.backbone.body.4.cv4.bn.running_mean: Tensor[(128), float32], %model.model.backbone.body.4.cv4.bn.running_var: Tensor[(128), float32], %model.model.backbone.body.5.conv.weight: Tensor[(256, 128, 3, 3), float32], %model.model.backbone.body.5.bn.weight: Tensor[(256), float32], %model.model.backbone.body.5.bn.bias: Tensor[(256), float32], %model.model.backbone.body.5.bn.running_mean: Tensor[(256), float32], %model.model.backbone.body.5.bn.running_var: Tensor[(256), float32], %model.model.backbone.body.6.cv1.conv.weight: Tensor[(128, 256, 1, 1), float32], %model.model.backbone.body.6.cv1.bn.weight: Tensor[(128), float32], %model.model.backbone.body.6.cv1.bn.bias: Tensor[(128), float32], %model.model.backbone.body.6.cv1.bn.running_mean: Tensor[(128), float32], %model.model.backbone.body.6.cv1.bn.running_var: Tensor[(128), float32], %model.model.backbone.body.6.m.0.cv1.conv.weight: Tensor[(128, 128, 1, 1), float32], %model.model.backbone.body.6.m.0.cv1.bn.weight: Tensor[(128), float32], %model.model.backbone.body.6.m.0.cv1.bn.bias: Tensor[(128), float32], %model.model.backbone.body.6.m.0.cv1.bn.running_mean: Tensor[(128), float32], %model.model.backbone.body.6.m.0.cv1.bn.running_var: Tensor[(128), float32], %model.model.backbone.body.6.m.0.cv2.conv.weight: Tensor[(128, 128, 3, 3), float32], %model.model.backbone.body.6.m.0.cv2.bn.weight: Tensor[(128), float32], %model.model.backbone.body.6.m.0.cv2.bn.bias: Tensor[(128), float32], %model.model.backbone.body.6.m.0.cv2.bn.running_mean: Tensor[(128), float32], %model.model.backbone.body.6.m.0.cv2.bn.running_var: Tensor[(128), float32], %model.model.backbone.body.6.m.1.cv1.conv.weight: Tensor[(128, 128, 1, 1), float32], %model.model.backbone.body.6.m.1.cv1.bn.weight: Tensor[(128), float32], %model.model.backbone.body.6.m.1.cv1.bn.bias: Tensor[(128), float32], %model.model.backbone.body.6.m.1.cv1.bn.running_mean: Tensor[(128), float32], %model.model.backbone.body.6.m.1.cv1.bn.running_var: Tensor[(128), float32], %model.model.backbone.body.6.m.1.cv2.conv.weight: Tensor[(128, 128, 3, 3), float32], %model.model.backbone.body.6.m.1.cv2.bn.weight: Tensor[(128), float32], %model.model.backbone.body.6.m.1.cv2.bn.bias: Tensor[(128), float32], %model.model.backbone.body.6.m.1.cv2.bn.running_mean: Tensor[(128), float32], %model.model.backbone.body.6.m.1.cv2.bn.running_var: Tensor[(128), float32], %model.model.backbone.body.6.m.2.cv1.conv.weight: Tensor[(128, 128, 1, 1), float32], %model.model.backbone.body.6.m.2.cv1.bn.weight: Tensor[(128), float32], %model.model.backbone.body.6.m.2.cv1.bn.bias: Tensor[(128), float32], %model.model.backbone.body.6.m.2.cv1.bn.running_mean: Tensor[(128), float32], %model.model.backbone.body.6.m.2.cv1.bn.running_var: Tensor[(128), float32], %model.model.backbone.body.6.m.2.cv2.conv.weight: Tensor[(128, 128, 3, 3), float32], %model.model.backbone.body.6.m.2.cv2.bn.weight: Tensor[(128), float32], %model.model.backbone.body.6.m.2.cv2.bn.bias: Tensor[(128), float32], %model.model.backbone.body.6.m.2.cv2.bn.running_mean: Tensor[(128), float32], %model.model.backbone.body.6.m.2.cv2.bn.running_var: Tensor[(128), float32], %model.model.backbone.body.6.cv3.weight: Tensor[(128, 128, 1, 1), float32], %model.model.backbone.body.6.cv2.weight: Tensor[(128, 256, 1, 1), float32], %model.model.backbone.body.6.bn.weight: Tensor[(256), float32], %model.model.backbone.body.6.bn.bias: Tensor[(256), float32], %model.model.backbone.body.6.bn.running_mean: Tensor[(256), float32], %model.model.backbone.body.6.bn.running_var: Tensor[(256), float32], %model.model.backbone.body.6.cv4.conv.weight: Tensor[(256, 256, 1, 1), float32], %model.model.backbone.body.6.cv4.bn.weight: Tensor[(256), float32], %model.model.backbone.body.6.cv4.bn.bias: Tensor[(256), float32], %model.model.backbone.body.6.cv4.bn.running_mean: Tensor[(256), float32], %model.model.backbone.body.6.cv4.bn.running_var: Tensor[(256), float32], %model.model.backbone.body.7.conv.weight: Tensor[(512, 256, 3, 3), float32], %model.model.backbone.body.7.bn.weight: Tensor[(512), float32], %model.model.backbone.body.7.bn.bias: Tensor[(512), float32], %model.model.backbone.body.7.bn.running_mean: Tensor[(512), float32], %model.model.backbone.body.7.bn.running_var: Tensor[(512), float32], %model.model.backbone.body.8.cv1.conv.weight: Tensor[(256, 512, 1, 1), float32], %model.model.backbone.body.8.cv1.bn.weight: Tensor[(256), float32], %model.model.backbone.body.8.cv1.bn.bias: Tensor[(256), float32], %model.model.backbone.body.8.cv1.bn.running_mean: Tensor[(256), float32], %model.model.backbone.body.8.cv1.bn.running_var: Tensor[(256), float32], %model.model.backbone.body.8.cv2.conv.weight: Tensor[(512, 1024, 1, 1), float32], %model.model.backbone.body.8.cv2.bn.weight: Tensor[(512), float32], %model.model.backbone.body.8.cv2.bn.bias: Tensor[(512), float32], %model.model.backbone.body.8.cv2.bn.running_mean: Tensor[(512), float32], %model.model.backbone.body.8.cv2.bn.running_var: Tensor[(512), float32], %model.model.backbone.pan.inner_blocks.0.cv1.conv.weight: Tensor[(256, 512, 1, 1), float32], %model.model.backbone.pan.inner_blocks.0.cv1.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.cv1.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.cv1.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.cv1.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.m.0.cv1.conv.weight: Tensor[(256, 256, 1, 1), float32], %model.model.backbone.pan.inner_blocks.0.m.0.cv1.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.m.0.cv1.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.m.0.cv1.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.m.0.cv1.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.m.0.cv2.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.model.backbone.pan.inner_blocks.0.m.0.cv2.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.m.0.cv2.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.m.0.cv2.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.m.0.cv2.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.0.cv3.weight: Tensor[(256, 256, 1, 1), float32], %model.model.backbone.pan.inner_blocks.0.cv2.weight: Tensor[(256, 512, 1, 1), float32], %model.model.backbone.pan.inner_blocks.0.bn.weight: Tensor[(512), float32], %model.model.backbone.pan.inner_blocks.0.bn.bias: Tensor[(512), float32], %model.model.backbone.pan.inner_blocks.0.bn.running_mean: Tensor[(512), float32], %model.model.backbone.pan.inner_blocks.0.bn.running_var: Tensor[(512), float32], %model.model.backbone.pan.inner_blocks.0.cv4.conv.weight: Tensor[(512, 512, 1, 1), float32], %model.model.backbone.pan.inner_blocks.0.cv4.bn.weight: Tensor[(512), float32], %model.model.backbone.pan.inner_blocks.0.cv4.bn.bias: Tensor[(512), float32], %model.model.backbone.pan.inner_blocks.0.cv4.bn.running_mean: Tensor[(512), float32], %model.model.backbone.pan.inner_blocks.0.cv4.bn.running_var: Tensor[(512), float32], %model.model.backbone.pan.inner_blocks.1.conv.weight: Tensor[(256, 512, 1, 1), float32], %model.model.backbone.pan.inner_blocks.1.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.1.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.1.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.1.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.3.cv1.conv.weight: Tensor[(128, 512, 1, 1), float32], %model.model.backbone.pan.inner_blocks.3.cv1.bn.weight: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.cv1.bn.bias: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.cv1.bn.running_mean: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.cv1.bn.running_var: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.m.0.cv1.conv.weight: Tensor[(128, 128, 1, 1), float32], %model.model.backbone.pan.inner_blocks.3.m.0.cv1.bn.weight: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.m.0.cv1.bn.bias: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.m.0.cv1.bn.running_mean: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.m.0.cv1.bn.running_var: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.m.0.cv2.conv.weight: Tensor[(128, 128, 3, 3), float32], %model.model.backbone.pan.inner_blocks.3.m.0.cv2.bn.weight: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.m.0.cv2.bn.bias: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.m.0.cv2.bn.running_mean: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.m.0.cv2.bn.running_var: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.3.cv3.weight: Tensor[(128, 128, 1, 1), float32], %model.model.backbone.pan.inner_blocks.3.cv2.weight: Tensor[(128, 512, 1, 1), float32], %model.model.backbone.pan.inner_blocks.3.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.3.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.3.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.3.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.3.cv4.conv.weight: Tensor[(256, 256, 1, 1), float32], %model.model.backbone.pan.inner_blocks.3.cv4.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.3.cv4.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.3.cv4.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.3.cv4.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.inner_blocks.4.conv.weight: Tensor[(128, 256, 1, 1), float32], %model.model.backbone.pan.inner_blocks.4.bn.weight: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.4.bn.bias: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.4.bn.running_mean: Tensor[(128), float32], %model.model.backbone.pan.inner_blocks.4.bn.running_var: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.0.cv1.conv.weight: Tensor[(64, 256, 1, 1), float32], %model.model.backbone.pan.layer_blocks.0.cv1.bn.weight: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.cv1.bn.bias: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.cv1.bn.running_mean: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.cv1.bn.running_var: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.m.0.cv1.conv.weight: Tensor[(64, 64, 1, 1), float32], %model.model.backbone.pan.layer_blocks.0.m.0.cv1.bn.weight: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.m.0.cv1.bn.bias: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.m.0.cv1.bn.running_mean: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.m.0.cv1.bn.running_var: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.m.0.cv2.conv.weight: Tensor[(64, 64, 3, 3), float32], %model.model.backbone.pan.layer_blocks.0.m.0.cv2.bn.weight: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.m.0.cv2.bn.bias: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.m.0.cv2.bn.running_mean: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.m.0.cv2.bn.running_var: Tensor[(64), float32], %model.model.backbone.pan.layer_blocks.0.cv3.weight: Tensor[(64, 64, 1, 1), float32], %model.model.backbone.pan.layer_blocks.0.cv2.weight: Tensor[(64, 256, 1, 1), float32], %model.model.backbone.pan.layer_blocks.0.bn.weight: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.0.bn.bias: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.0.bn.running_mean: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.0.bn.running_var: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.0.cv4.conv.weight: Tensor[(128, 128, 1, 1), float32], %model.model.backbone.pan.layer_blocks.0.cv4.bn.weight: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.0.cv4.bn.bias: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.0.cv4.bn.running_mean: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.0.cv4.bn.running_var: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.1.conv.weight: Tensor[(128, 128, 3, 3), float32], %model.model.backbone.pan.layer_blocks.1.bn.weight: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.1.bn.bias: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.1.bn.running_mean: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.1.bn.running_var: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.cv1.conv.weight: Tensor[(128, 256, 1, 1), float32], %model.model.backbone.pan.layer_blocks.2.cv1.bn.weight: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.cv1.bn.bias: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.cv1.bn.running_mean: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.cv1.bn.running_var: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.m.0.cv1.conv.weight: Tensor[(128, 128, 1, 1), float32], %model.model.backbone.pan.layer_blocks.2.m.0.cv1.bn.weight: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.m.0.cv1.bn.bias: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.m.0.cv1.bn.running_mean: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.m.0.cv1.bn.running_var: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.m.0.cv2.conv.weight: Tensor[(128, 128, 3, 3), float32], %model.model.backbone.pan.layer_blocks.2.m.0.cv2.bn.weight: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.m.0.cv2.bn.bias: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.m.0.cv2.bn.running_mean: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.m.0.cv2.bn.running_var: Tensor[(128), float32], %model.model.backbone.pan.layer_blocks.2.cv3.weight: Tensor[(128, 128, 1, 1), float32], %model.model.backbone.pan.layer_blocks.2.cv2.weight: Tensor[(128, 256, 1, 1), float32], %model.model.backbone.pan.layer_blocks.2.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.2.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.2.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.2.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.2.cv4.conv.weight: Tensor[(256, 256, 1, 1), float32], %model.model.backbone.pan.layer_blocks.2.cv4.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.2.cv4.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.2.cv4.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.2.cv4.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.3.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.model.backbone.pan.layer_blocks.3.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.3.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.3.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.3.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.cv1.conv.weight: Tensor[(256, 512, 1, 1), float32], %model.model.backbone.pan.layer_blocks.4.cv1.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.cv1.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.cv1.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.cv1.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.m.0.cv1.conv.weight: Tensor[(256, 256, 1, 1), float32], %model.model.backbone.pan.layer_blocks.4.m.0.cv1.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.m.0.cv1.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.m.0.cv1.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.m.0.cv1.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.m.0.cv2.conv.weight: Tensor[(256, 256, 3, 3), float32], %model.model.backbone.pan.layer_blocks.4.m.0.cv2.bn.weight: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.m.0.cv2.bn.bias: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.m.0.cv2.bn.running_mean: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.m.0.cv2.bn.running_var: Tensor[(256), float32], %model.model.backbone.pan.layer_blocks.4.cv3.weight: Tensor[(256, 256, 1, 1), float32], %model.model.backbone.pan.layer_blocks.4.cv2.weight: Tensor[(256, 512, 1, 1), float32], %model.model.backbone.pan.layer_blocks.4.bn.weight: Tensor[(512), float32], %model.model.backbone.pan.layer_blocks.4.bn.bias: Tensor[(512), float32], %model.model.backbone.pan.layer_blocks.4.bn.running_mean: Tensor[(512), float32], %model.model.backbone.pan.layer_blocks.4.bn.running_var: Tensor[(512), float32], %model.model.backbone.pan.layer_blocks.4.cv4.conv.weight: Tensor[(512, 512, 1, 1), float32], %model.model.backbone.pan.layer_blocks.4.cv4.bn.weight: Tensor[(512), float32], %model.model.backbone.pan.layer_blocks.4.cv4.bn.bias: Tensor[(512), float32], %model.model.backbone.pan.layer_blocks.4.cv4.bn.running_mean: Tensor[(512), float32], %model.model.backbone.pan.layer_blocks.4.cv4.bn.running_var: Tensor[(512), float32], %model.model.head.head.0.weight: Tensor[(255, 128, 1, 1), float32], %model.model.head.head.0.bias: Tensor[(255), float32], %model.model.head.head.1.weight: Tensor[(255, 256, 1, 1), float32], %model.model.head.head.1.bias: Tensor[(255), float32], %model.model.head.head.2.weight: Tensor[(255, 512, 1, 1), float32], %model.model.head.head.2.bias: Tensor[(255), float32]) -> (Tensor[(?, 4), float32], Tensor[(?), float32], Tensor[(?), int64]) {
  %0 = split(%input0, indices_or_sections=1) /* ty=(Tensor[(1, 3, 416, 416), float32],) */;
  %1 = %0.0;
  %2 = squeeze(%1, axis=[0]) /* ty=Tensor[(3, 416, 416), float32] */;
  %3 = (%2,);
  %4 = %3.0;
  %5 = expand_dims(%4, axis=0) /* ty=Tensor[(1, 3, 416, 416), float32] */;
  %6 = image.resize(%5, size=[320, 320], rounding_method="") /* ty=Tensor[(1, 3, 320, 320), float32] */;
  %7 = take(%6, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(3, 320, 320), float32] */;
  %8 = nn.pad(%7, 0 /* ty=int32 */, pad_width=[[0, 0], [0, 0], [0, 0]]) /* ty=Tensor[(3, 320, 320), float32] */;
  %9 = (%8,);
  %10 = stack(%9) /* ty=Tensor[(1, 3, 320, 320), float32] */;
  %11 = (%10, 320 /* ty=int32 */, 320 /* ty=int32 */);
  %12 = %11.0;
  %13 = strided_slice(%12, begin=[0, 0, 0, 0], end=[1, 3, 320, 320], strides=[1, 1, 2, 1]) /* ty=Tensor[(1, 3, 160, 320), float32] */;
  %14 = strided_slice(%12, begin=[0, 0, 1, 0], end=[1, 3, 320, 320], strides=[1, 1, 2, 1]) /* ty=Tensor[(1, 3, 160, 320), float32] */;
  %15 = strided_slice(%12, begin=[0, 0, 0, 0], end=[1, 3, 320, 320], strides=[1, 1, 2, 1]) /* ty=Tensor[(1, 3, 160, 320), float32] */;
  %16 = strided_slice(%12, begin=[0, 0, 1, 0], end=[1, 3, 320, 320], strides=[1, 1, 2, 1]) /* ty=Tensor[(1, 3, 160, 320), float32] */;
  %17 = strided_slice(%13, begin=[0, 0, 0, 0], end=[1, 3, 160, 320], strides=[1, 1, 1, 2]) /* ty=Tensor[(1, 3, 160, 160), float32] */;
  %18 = strided_slice(%14, begin=[0, 0, 0, 0], end=[1, 3, 160, 320], strides=[1, 1, 1, 2]) /* ty=Tensor[(1, 3, 160, 160), float32] */;
  %19 = strided_slice(%15, begin=[0, 0, 0, 1], end=[1, 3, 160, 320], strides=[1, 1, 1, 2]) /* ty=Tensor[(1, 3, 160, 160), float32] */;
  %20 = strided_slice(%16, begin=[0, 0, 0, 1], end=[1, 3, 160, 320], strides=[1, 1, 1, 2]) /* ty=Tensor[(1, 3, 160, 160), float32] */;
  %21 = (%17, %18, %19, %20);
  %22 = concatenate(%21, axis=1) /* ty=Tensor[(1, 12, 160, 160), float32] */;
  %23 = nn.conv2d(%22, %model.model.backbone.body.0.conv.conv.weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %24 = nn.batch_norm(%23, %model.model.backbone.body.0.conv.bn.weight, %model.model.backbone.body.0.conv.bn.bias, %model.model.backbone.body.0.conv.bn.running_mean, %model.model.backbone.body.0.conv.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 32, 160, 160), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %25 = %24.0;
  %26 = add(%25, 3f /* ty=float32 */) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %27 = clip(%26, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %28 = multiply(%25, %27) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %29 = divide(%28, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %30 = nn.conv2d(%29, %model.model.backbone.body.1.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %31 = nn.batch_norm(%30, %model.model.backbone.body.1.bn.weight, %model.model.backbone.body.1.bn.bias, %model.model.backbone.body.1.bn.running_mean, %model.model.backbone.body.1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 80, 80), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %32 = %31.0;
  %33 = add(%32, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %34 = clip(%33, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %35 = multiply(%32, %34) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %36 = divide(%35, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %37 = nn.conv2d(%36, %model.model.backbone.body.2.cv1.conv.weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %38 = nn.batch_norm(%37, %model.model.backbone.body.2.cv1.bn.weight, %model.model.backbone.body.2.cv1.bn.bias, %model.model.backbone.body.2.cv1.bn.running_mean, %model.model.backbone.body.2.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 32, 80, 80), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %39 = %38.0;
  %40 = add(%39, 3f /* ty=float32 */) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %41 = clip(%40, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %42 = multiply(%39, %41) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %43 = divide(%42, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %44 = nn.conv2d(%43, %model.model.backbone.body.2.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %45 = nn.batch_norm(%44, %model.model.backbone.body.2.m.0.cv1.bn.weight, %model.model.backbone.body.2.m.0.cv1.bn.bias, %model.model.backbone.body.2.m.0.cv1.bn.running_mean, %model.model.backbone.body.2.m.0.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 32, 80, 80), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %46 = %45.0;
  %47 = add(%46, 3f /* ty=float32 */) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %48 = clip(%47, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %49 = multiply(%46, %48) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %50 = divide(%49, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %51 = nn.conv2d(%50, %model.model.backbone.body.2.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %52 = nn.batch_norm(%51, %model.model.backbone.body.2.m.0.cv2.bn.weight, %model.model.backbone.body.2.m.0.cv2.bn.bias, %model.model.backbone.body.2.m.0.cv2.bn.running_mean, %model.model.backbone.body.2.m.0.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 32, 80, 80), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %53 = %52.0;
  %54 = add(%53, 3f /* ty=float32 */) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %55 = clip(%54, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %56 = multiply(%53, %55) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %57 = divide(%56, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %58 = add(%43, %57) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %59 = nn.conv2d(%58, %model.model.backbone.body.2.cv3.weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %60 = nn.conv2d(%36, %model.model.backbone.body.2.cv2.weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %61 = (%59, %60);
  %62 = concatenate(%61, axis=1) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %63 = nn.batch_norm(%62, %model.model.backbone.body.2.bn.weight, %model.model.backbone.body.2.bn.bias, %model.model.backbone.body.2.bn.running_mean, %model.model.backbone.body.2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 80, 80), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %64 = %63.0;
  %65 = nn.leaky_relu(%64, alpha=0.1f) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %66 = nn.conv2d(%65, %model.model.backbone.body.2.cv4.conv.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %67 = nn.batch_norm(%66, %model.model.backbone.body.2.cv4.bn.weight, %model.model.backbone.body.2.cv4.bn.bias, %model.model.backbone.body.2.cv4.bn.running_mean, %model.model.backbone.body.2.cv4.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 80, 80), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %68 = %67.0;
  %69 = add(%68, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %70 = clip(%69, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %71 = multiply(%68, %70) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %72 = divide(%71, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %73 = nn.conv2d(%72, %model.model.backbone.body.3.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %74 = nn.batch_norm(%73, %model.model.backbone.body.3.bn.weight, %model.model.backbone.body.3.bn.bias, %model.model.backbone.body.3.bn.running_mean, %model.model.backbone.body.3.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %75 = %74.0;
  %76 = add(%75, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %77 = clip(%76, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %78 = multiply(%75, %77) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %79 = divide(%78, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %80 = nn.conv2d(%79, %model.model.backbone.body.4.cv1.conv.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %81 = nn.batch_norm(%80, %model.model.backbone.body.4.cv1.bn.weight, %model.model.backbone.body.4.cv1.bn.bias, %model.model.backbone.body.4.cv1.bn.running_mean, %model.model.backbone.body.4.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 40, 40), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %82 = %81.0;
  %83 = add(%82, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %84 = clip(%83, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %85 = multiply(%82, %84) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %86 = divide(%85, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %87 = nn.conv2d(%86, %model.model.backbone.body.4.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %88 = nn.batch_norm(%87, %model.model.backbone.body.4.m.0.cv1.bn.weight, %model.model.backbone.body.4.m.0.cv1.bn.bias, %model.model.backbone.body.4.m.0.cv1.bn.running_mean, %model.model.backbone.body.4.m.0.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 40, 40), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %89 = %88.0;
  %90 = add(%89, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %91 = clip(%90, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %92 = multiply(%89, %91) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %93 = divide(%92, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %94 = nn.conv2d(%93, %model.model.backbone.body.4.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %95 = nn.batch_norm(%94, %model.model.backbone.body.4.m.0.cv2.bn.weight, %model.model.backbone.body.4.m.0.cv2.bn.bias, %model.model.backbone.body.4.m.0.cv2.bn.running_mean, %model.model.backbone.body.4.m.0.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 40, 40), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %96 = %95.0;
  %97 = add(%96, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %98 = clip(%97, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %99 = multiply(%96, %98) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %100 = divide(%99, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %101 = add(%86, %100) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %102 = nn.conv2d(%101, %model.model.backbone.body.4.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %103 = nn.batch_norm(%102, %model.model.backbone.body.4.m.1.cv1.bn.weight, %model.model.backbone.body.4.m.1.cv1.bn.bias, %model.model.backbone.body.4.m.1.cv1.bn.running_mean, %model.model.backbone.body.4.m.1.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 40, 40), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %104 = %103.0;
  %105 = add(%104, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %106 = clip(%105, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %107 = multiply(%104, %106) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %108 = divide(%107, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %109 = nn.conv2d(%108, %model.model.backbone.body.4.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %110 = nn.batch_norm(%109, %model.model.backbone.body.4.m.1.cv2.bn.weight, %model.model.backbone.body.4.m.1.cv2.bn.bias, %model.model.backbone.body.4.m.1.cv2.bn.running_mean, %model.model.backbone.body.4.m.1.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 40, 40), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %111 = %110.0;
  %112 = add(%111, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %113 = clip(%112, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %114 = multiply(%111, %113) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %115 = divide(%114, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %116 = add(%101, %115) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %117 = nn.conv2d(%116, %model.model.backbone.body.4.m.2.cv1.conv.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %118 = nn.batch_norm(%117, %model.model.backbone.body.4.m.2.cv1.bn.weight, %model.model.backbone.body.4.m.2.cv1.bn.bias, %model.model.backbone.body.4.m.2.cv1.bn.running_mean, %model.model.backbone.body.4.m.2.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 40, 40), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %119 = %118.0;
  %120 = add(%119, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %121 = clip(%120, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %122 = multiply(%119, %121) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %123 = divide(%122, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %124 = nn.conv2d(%123, %model.model.backbone.body.4.m.2.cv2.conv.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %125 = nn.batch_norm(%124, %model.model.backbone.body.4.m.2.cv2.bn.weight, %model.model.backbone.body.4.m.2.cv2.bn.bias, %model.model.backbone.body.4.m.2.cv2.bn.running_mean, %model.model.backbone.body.4.m.2.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 40, 40), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %126 = %125.0;
  %127 = add(%126, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %128 = clip(%127, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %129 = multiply(%126, %128) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %130 = divide(%129, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %131 = add(%116, %130) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %132 = nn.conv2d(%131, %model.model.backbone.body.4.cv3.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %133 = nn.conv2d(%79, %model.model.backbone.body.4.cv2.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %134 = (%132, %133);
  %135 = concatenate(%134, axis=1) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %136 = nn.batch_norm(%135, %model.model.backbone.body.4.bn.weight, %model.model.backbone.body.4.bn.bias, %model.model.backbone.body.4.bn.running_mean, %model.model.backbone.body.4.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %137 = %136.0;
  %138 = nn.leaky_relu(%137, alpha=0.1f) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %139 = nn.conv2d(%138, %model.model.backbone.body.4.cv4.conv.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %140 = nn.batch_norm(%139, %model.model.backbone.body.4.cv4.bn.weight, %model.model.backbone.body.4.cv4.bn.bias, %model.model.backbone.body.4.cv4.bn.running_mean, %model.model.backbone.body.4.cv4.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %141 = %140.0;
  %142 = add(%141, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %143 = clip(%142, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %144 = multiply(%141, %143) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %145 = divide(%144, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %146 = nn.conv2d(%145, %model.model.backbone.body.5.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %147 = nn.batch_norm(%146, %model.model.backbone.body.5.bn.weight, %model.model.backbone.body.5.bn.bias, %model.model.backbone.body.5.bn.running_mean, %model.model.backbone.body.5.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %148 = %147.0;
  %149 = add(%148, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %150 = clip(%149, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %151 = multiply(%148, %150) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %152 = divide(%151, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %153 = nn.conv2d(%152, %model.model.backbone.body.6.cv1.conv.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %154 = nn.batch_norm(%153, %model.model.backbone.body.6.cv1.bn.weight, %model.model.backbone.body.6.cv1.bn.bias, %model.model.backbone.body.6.cv1.bn.running_mean, %model.model.backbone.body.6.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %155 = %154.0;
  %156 = add(%155, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %157 = clip(%156, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %158 = multiply(%155, %157) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %159 = divide(%158, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %160 = nn.conv2d(%159, %model.model.backbone.body.6.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %161 = nn.batch_norm(%160, %model.model.backbone.body.6.m.0.cv1.bn.weight, %model.model.backbone.body.6.m.0.cv1.bn.bias, %model.model.backbone.body.6.m.0.cv1.bn.running_mean, %model.model.backbone.body.6.m.0.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %162 = %161.0;
  %163 = add(%162, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %164 = clip(%163, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %165 = multiply(%162, %164) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %166 = divide(%165, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %167 = nn.conv2d(%166, %model.model.backbone.body.6.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %168 = nn.batch_norm(%167, %model.model.backbone.body.6.m.0.cv2.bn.weight, %model.model.backbone.body.6.m.0.cv2.bn.bias, %model.model.backbone.body.6.m.0.cv2.bn.running_mean, %model.model.backbone.body.6.m.0.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %169 = %168.0;
  %170 = add(%169, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %171 = clip(%170, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %172 = multiply(%169, %171) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %173 = divide(%172, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %174 = add(%159, %173) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %175 = nn.conv2d(%174, %model.model.backbone.body.6.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %176 = nn.batch_norm(%175, %model.model.backbone.body.6.m.1.cv1.bn.weight, %model.model.backbone.body.6.m.1.cv1.bn.bias, %model.model.backbone.body.6.m.1.cv1.bn.running_mean, %model.model.backbone.body.6.m.1.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %177 = %176.0;
  %178 = add(%177, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %179 = clip(%178, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %180 = multiply(%177, %179) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %181 = divide(%180, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %182 = nn.conv2d(%181, %model.model.backbone.body.6.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %183 = nn.batch_norm(%182, %model.model.backbone.body.6.m.1.cv2.bn.weight, %model.model.backbone.body.6.m.1.cv2.bn.bias, %model.model.backbone.body.6.m.1.cv2.bn.running_mean, %model.model.backbone.body.6.m.1.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %184 = %183.0;
  %185 = add(%184, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %186 = clip(%185, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %187 = multiply(%184, %186) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %188 = divide(%187, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %189 = add(%174, %188) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %190 = nn.conv2d(%189, %model.model.backbone.body.6.m.2.cv1.conv.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %191 = nn.batch_norm(%190, %model.model.backbone.body.6.m.2.cv1.bn.weight, %model.model.backbone.body.6.m.2.cv1.bn.bias, %model.model.backbone.body.6.m.2.cv1.bn.running_mean, %model.model.backbone.body.6.m.2.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %192 = %191.0;
  %193 = add(%192, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %194 = clip(%193, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %195 = multiply(%192, %194) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %196 = divide(%195, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %197 = nn.conv2d(%196, %model.model.backbone.body.6.m.2.cv2.conv.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %198 = nn.batch_norm(%197, %model.model.backbone.body.6.m.2.cv2.bn.weight, %model.model.backbone.body.6.m.2.cv2.bn.bias, %model.model.backbone.body.6.m.2.cv2.bn.running_mean, %model.model.backbone.body.6.m.2.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %199 = %198.0;
  %200 = add(%199, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %201 = clip(%200, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %202 = multiply(%199, %201) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %203 = divide(%202, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %204 = add(%189, %203) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %205 = nn.conv2d(%204, %model.model.backbone.body.6.cv3.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %206 = nn.conv2d(%152, %model.model.backbone.body.6.cv2.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %207 = (%205, %206);
  %208 = concatenate(%207, axis=1) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %209 = nn.batch_norm(%208, %model.model.backbone.body.6.bn.weight, %model.model.backbone.body.6.bn.bias, %model.model.backbone.body.6.bn.running_mean, %model.model.backbone.body.6.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %210 = %209.0;
  %211 = nn.leaky_relu(%210, alpha=0.1f) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %212 = nn.conv2d(%211, %model.model.backbone.body.6.cv4.conv.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %213 = nn.batch_norm(%212, %model.model.backbone.body.6.cv4.bn.weight, %model.model.backbone.body.6.cv4.bn.bias, %model.model.backbone.body.6.cv4.bn.running_mean, %model.model.backbone.body.6.cv4.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %214 = %213.0;
  %215 = add(%214, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %216 = clip(%215, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %217 = multiply(%214, %216) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %218 = divide(%217, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %219 = nn.conv2d(%218, %model.model.backbone.body.7.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %220 = nn.batch_norm(%219, %model.model.backbone.body.7.bn.weight, %model.model.backbone.body.7.bn.bias, %model.model.backbone.body.7.bn.running_mean, %model.model.backbone.body.7.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 512, 10, 10), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %221 = %220.0;
  %222 = add(%221, 3f /* ty=float32 */) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %223 = clip(%222, a_min=0f, a_max=6f) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %224 = multiply(%221, %223) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %225 = divide(%224, 6f /* ty=float32 */) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %226 = nn.conv2d(%225, %model.model.backbone.body.8.cv1.conv.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %227 = nn.batch_norm(%226, %model.model.backbone.body.8.cv1.bn.weight, %model.model.backbone.body.8.cv1.bn.bias, %model.model.backbone.body.8.cv1.bn.running_mean, %model.model.backbone.body.8.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 10, 10), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %228 = %227.0;
  %229 = add(%228, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %230 = clip(%229, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %231 = multiply(%228, %230) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %232 = divide(%231, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %233 = nn.max_pool2d(%232, pool_size=[5, 5], padding=[2, 2, 2, 2]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %234 = nn.max_pool2d(%232, pool_size=[9, 9], padding=[4, 4, 4, 4]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %235 = nn.max_pool2d(%232, pool_size=[13, 13], padding=[6, 6, 6, 6]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %236 = (%232, %233, %234, %235);
  %237 = concatenate(%236, axis=1) /* ty=Tensor[(1, 1024, 10, 10), float32] */;
  %238 = nn.conv2d(%237, %model.model.backbone.body.8.cv2.conv.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %239 = nn.batch_norm(%238, %model.model.backbone.body.8.cv2.bn.weight, %model.model.backbone.body.8.cv2.bn.bias, %model.model.backbone.body.8.cv2.bn.running_mean, %model.model.backbone.body.8.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 512, 10, 10), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %240 = %239.0;
  %241 = add(%240, 3f /* ty=float32 */) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %242 = clip(%241, a_min=0f, a_max=6f) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %243 = multiply(%240, %242) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %244 = divide(%243, 6f /* ty=float32 */) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %245 = (%244, %218, %145);
  %246 = %245.0;
  %247 = nn.conv2d(%246, %model.model.backbone.pan.inner_blocks.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %248 = nn.batch_norm(%247, %model.model.backbone.pan.inner_blocks.0.cv1.bn.weight, %model.model.backbone.pan.inner_blocks.0.cv1.bn.bias, %model.model.backbone.pan.inner_blocks.0.cv1.bn.running_mean, %model.model.backbone.pan.inner_blocks.0.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 10, 10), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %249 = %248.0;
  %250 = add(%249, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %251 = clip(%250, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %252 = multiply(%249, %251) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %253 = divide(%252, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %254 = nn.conv2d(%253, %model.model.backbone.pan.inner_blocks.0.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %255 = nn.batch_norm(%254, %model.model.backbone.pan.inner_blocks.0.m.0.cv1.bn.weight, %model.model.backbone.pan.inner_blocks.0.m.0.cv1.bn.bias, %model.model.backbone.pan.inner_blocks.0.m.0.cv1.bn.running_mean, %model.model.backbone.pan.inner_blocks.0.m.0.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 10, 10), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %256 = %255.0;
  %257 = add(%256, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %258 = clip(%257, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %259 = multiply(%256, %258) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %260 = divide(%259, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %261 = nn.conv2d(%260, %model.model.backbone.pan.inner_blocks.0.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %262 = nn.batch_norm(%261, %model.model.backbone.pan.inner_blocks.0.m.0.cv2.bn.weight, %model.model.backbone.pan.inner_blocks.0.m.0.cv2.bn.bias, %model.model.backbone.pan.inner_blocks.0.m.0.cv2.bn.running_mean, %model.model.backbone.pan.inner_blocks.0.m.0.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 10, 10), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %263 = %262.0;
  %264 = add(%263, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %265 = clip(%264, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %266 = multiply(%263, %265) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %267 = divide(%266, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %268 = nn.conv2d(%267, %model.model.backbone.pan.inner_blocks.0.cv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %269 = nn.conv2d(%246, %model.model.backbone.pan.inner_blocks.0.cv2.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %270 = (%268, %269);
  %271 = concatenate(%270, axis=1) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %272 = nn.batch_norm(%271, %model.model.backbone.pan.inner_blocks.0.bn.weight, %model.model.backbone.pan.inner_blocks.0.bn.bias, %model.model.backbone.pan.inner_blocks.0.bn.running_mean, %model.model.backbone.pan.inner_blocks.0.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 512, 10, 10), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %273 = %272.0;
  %274 = nn.leaky_relu(%273, alpha=0.1f) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %275 = nn.conv2d(%274, %model.model.backbone.pan.inner_blocks.0.cv4.conv.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %276 = nn.batch_norm(%275, %model.model.backbone.pan.inner_blocks.0.cv4.bn.weight, %model.model.backbone.pan.inner_blocks.0.cv4.bn.bias, %model.model.backbone.pan.inner_blocks.0.cv4.bn.running_mean, %model.model.backbone.pan.inner_blocks.0.cv4.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 512, 10, 10), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %277 = %276.0;
  %278 = add(%277, 3f /* ty=float32 */) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %279 = clip(%278, a_min=0f, a_max=6f) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %280 = multiply(%277, %279) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %281 = divide(%280, 6f /* ty=float32 */) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %282 = nn.conv2d(%281, %model.model.backbone.pan.inner_blocks.1.conv.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %283 = nn.batch_norm(%282, %model.model.backbone.pan.inner_blocks.1.bn.weight, %model.model.backbone.pan.inner_blocks.1.bn.bias, %model.model.backbone.pan.inner_blocks.1.bn.running_mean, %model.model.backbone.pan.inner_blocks.1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 10, 10), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %284 = %283.0;
  %285 = add(%284, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %286 = clip(%285, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %287 = multiply(%284, %286) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %288 = divide(%287, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %289 = image.resize(%288, size=[20, 20], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="") /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %290 = %245.1;
  %291 = (%289, %290);
  %292 = concatenate(%291, axis=1) /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %293 = nn.conv2d(%292, %model.model.backbone.pan.inner_blocks.3.cv1.conv.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %294 = nn.batch_norm(%293, %model.model.backbone.pan.inner_blocks.3.cv1.bn.weight, %model.model.backbone.pan.inner_blocks.3.cv1.bn.bias, %model.model.backbone.pan.inner_blocks.3.cv1.bn.running_mean, %model.model.backbone.pan.inner_blocks.3.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %295 = %294.0;
  %296 = add(%295, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %297 = clip(%296, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %298 = multiply(%295, %297) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %299 = divide(%298, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %300 = nn.conv2d(%299, %model.model.backbone.pan.inner_blocks.3.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %301 = nn.batch_norm(%300, %model.model.backbone.pan.inner_blocks.3.m.0.cv1.bn.weight, %model.model.backbone.pan.inner_blocks.3.m.0.cv1.bn.bias, %model.model.backbone.pan.inner_blocks.3.m.0.cv1.bn.running_mean, %model.model.backbone.pan.inner_blocks.3.m.0.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %302 = %301.0;
  %303 = add(%302, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %304 = clip(%303, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %305 = multiply(%302, %304) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %306 = divide(%305, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %307 = nn.conv2d(%306, %model.model.backbone.pan.inner_blocks.3.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %308 = nn.batch_norm(%307, %model.model.backbone.pan.inner_blocks.3.m.0.cv2.bn.weight, %model.model.backbone.pan.inner_blocks.3.m.0.cv2.bn.bias, %model.model.backbone.pan.inner_blocks.3.m.0.cv2.bn.running_mean, %model.model.backbone.pan.inner_blocks.3.m.0.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %309 = %308.0;
  %310 = add(%309, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %311 = clip(%310, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %312 = multiply(%309, %311) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %313 = divide(%312, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %314 = nn.conv2d(%313, %model.model.backbone.pan.inner_blocks.3.cv3.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %315 = nn.conv2d(%292, %model.model.backbone.pan.inner_blocks.3.cv2.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %316 = (%314, %315);
  %317 = concatenate(%316, axis=1) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %318 = nn.batch_norm(%317, %model.model.backbone.pan.inner_blocks.3.bn.weight, %model.model.backbone.pan.inner_blocks.3.bn.bias, %model.model.backbone.pan.inner_blocks.3.bn.running_mean, %model.model.backbone.pan.inner_blocks.3.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %319 = %318.0;
  %320 = nn.leaky_relu(%319, alpha=0.1f) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %321 = nn.conv2d(%320, %model.model.backbone.pan.inner_blocks.3.cv4.conv.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %322 = nn.batch_norm(%321, %model.model.backbone.pan.inner_blocks.3.cv4.bn.weight, %model.model.backbone.pan.inner_blocks.3.cv4.bn.bias, %model.model.backbone.pan.inner_blocks.3.cv4.bn.running_mean, %model.model.backbone.pan.inner_blocks.3.cv4.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %323 = %322.0;
  %324 = add(%323, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %325 = clip(%324, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %326 = multiply(%323, %325) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %327 = divide(%326, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %328 = nn.conv2d(%327, %model.model.backbone.pan.inner_blocks.4.conv.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %329 = nn.batch_norm(%328, %model.model.backbone.pan.inner_blocks.4.bn.weight, %model.model.backbone.pan.inner_blocks.4.bn.bias, %model.model.backbone.pan.inner_blocks.4.bn.running_mean, %model.model.backbone.pan.inner_blocks.4.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %330 = %329.0;
  %331 = add(%330, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %332 = clip(%331, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %333 = multiply(%330, %332) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %334 = divide(%333, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %335 = image.resize(%334, size=[40, 40], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="") /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %336 = %245.2;
  %337 = (%335, %336);
  %338 = concatenate(%337, axis=1) /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %339 = nn.conv2d(%338, %model.model.backbone.pan.layer_blocks.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %340 = nn.batch_norm(%339, %model.model.backbone.pan.layer_blocks.0.cv1.bn.weight, %model.model.backbone.pan.layer_blocks.0.cv1.bn.bias, %model.model.backbone.pan.layer_blocks.0.cv1.bn.running_mean, %model.model.backbone.pan.layer_blocks.0.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 40, 40), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %341 = %340.0;
  %342 = add(%341, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %343 = clip(%342, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %344 = multiply(%341, %343) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %345 = divide(%344, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %346 = nn.conv2d(%345, %model.model.backbone.pan.layer_blocks.0.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %347 = nn.batch_norm(%346, %model.model.backbone.pan.layer_blocks.0.m.0.cv1.bn.weight, %model.model.backbone.pan.layer_blocks.0.m.0.cv1.bn.bias, %model.model.backbone.pan.layer_blocks.0.m.0.cv1.bn.running_mean, %model.model.backbone.pan.layer_blocks.0.m.0.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 40, 40), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %348 = %347.0;
  %349 = add(%348, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %350 = clip(%349, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %351 = multiply(%348, %350) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %352 = divide(%351, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %353 = nn.conv2d(%352, %model.model.backbone.pan.layer_blocks.0.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %354 = nn.batch_norm(%353, %model.model.backbone.pan.layer_blocks.0.m.0.cv2.bn.weight, %model.model.backbone.pan.layer_blocks.0.m.0.cv2.bn.bias, %model.model.backbone.pan.layer_blocks.0.m.0.cv2.bn.running_mean, %model.model.backbone.pan.layer_blocks.0.m.0.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 64, 40, 40), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %355 = %354.0;
  %356 = add(%355, 3f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %357 = clip(%356, a_min=0f, a_max=6f) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %358 = multiply(%355, %357) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %359 = divide(%358, 6f /* ty=float32 */) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %360 = nn.conv2d(%359, %model.model.backbone.pan.layer_blocks.0.cv3.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %361 = nn.conv2d(%338, %model.model.backbone.pan.layer_blocks.0.cv2.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %362 = (%360, %361);
  %363 = concatenate(%362, axis=1) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %364 = nn.batch_norm(%363, %model.model.backbone.pan.layer_blocks.0.bn.weight, %model.model.backbone.pan.layer_blocks.0.bn.bias, %model.model.backbone.pan.layer_blocks.0.bn.running_mean, %model.model.backbone.pan.layer_blocks.0.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %365 = %364.0;
  %366 = nn.leaky_relu(%365, alpha=0.1f) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %367 = nn.conv2d(%366, %model.model.backbone.pan.layer_blocks.0.cv4.conv.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %368 = nn.batch_norm(%367, %model.model.backbone.pan.layer_blocks.0.cv4.bn.weight, %model.model.backbone.pan.layer_blocks.0.cv4.bn.bias, %model.model.backbone.pan.layer_blocks.0.cv4.bn.running_mean, %model.model.backbone.pan.layer_blocks.0.cv4.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %369 = %368.0;
  %370 = add(%369, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %371 = clip(%370, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %372 = multiply(%369, %371) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %373 = divide(%372, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %374 = nn.conv2d(%373, %model.model.backbone.pan.layer_blocks.1.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %375 = nn.batch_norm(%374, %model.model.backbone.pan.layer_blocks.1.bn.weight, %model.model.backbone.pan.layer_blocks.1.bn.bias, %model.model.backbone.pan.layer_blocks.1.bn.running_mean, %model.model.backbone.pan.layer_blocks.1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %376 = %375.0;
  %377 = add(%376, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %378 = clip(%377, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %379 = multiply(%376, %378) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %380 = divide(%379, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %381 = (%380, %334);
  %382 = concatenate(%381, axis=1) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %383 = nn.conv2d(%382, %model.model.backbone.pan.layer_blocks.2.cv1.conv.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %384 = nn.batch_norm(%383, %model.model.backbone.pan.layer_blocks.2.cv1.bn.weight, %model.model.backbone.pan.layer_blocks.2.cv1.bn.bias, %model.model.backbone.pan.layer_blocks.2.cv1.bn.running_mean, %model.model.backbone.pan.layer_blocks.2.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %385 = %384.0;
  %386 = add(%385, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %387 = clip(%386, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %388 = multiply(%385, %387) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %389 = divide(%388, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %390 = nn.conv2d(%389, %model.model.backbone.pan.layer_blocks.2.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %391 = nn.batch_norm(%390, %model.model.backbone.pan.layer_blocks.2.m.0.cv1.bn.weight, %model.model.backbone.pan.layer_blocks.2.m.0.cv1.bn.bias, %model.model.backbone.pan.layer_blocks.2.m.0.cv1.bn.running_mean, %model.model.backbone.pan.layer_blocks.2.m.0.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %392 = %391.0;
  %393 = add(%392, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %394 = clip(%393, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %395 = multiply(%392, %394) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %396 = divide(%395, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %397 = nn.conv2d(%396, %model.model.backbone.pan.layer_blocks.2.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %398 = nn.batch_norm(%397, %model.model.backbone.pan.layer_blocks.2.m.0.cv2.bn.weight, %model.model.backbone.pan.layer_blocks.2.m.0.cv2.bn.bias, %model.model.backbone.pan.layer_blocks.2.m.0.cv2.bn.running_mean, %model.model.backbone.pan.layer_blocks.2.m.0.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %399 = %398.0;
  %400 = add(%399, 3f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %401 = clip(%400, a_min=0f, a_max=6f) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %402 = multiply(%399, %401) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %403 = divide(%402, 6f /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %404 = nn.conv2d(%403, %model.model.backbone.pan.layer_blocks.2.cv3.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %405 = nn.conv2d(%382, %model.model.backbone.pan.layer_blocks.2.cv2.weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %406 = (%404, %405);
  %407 = concatenate(%406, axis=1) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %408 = nn.batch_norm(%407, %model.model.backbone.pan.layer_blocks.2.bn.weight, %model.model.backbone.pan.layer_blocks.2.bn.bias, %model.model.backbone.pan.layer_blocks.2.bn.running_mean, %model.model.backbone.pan.layer_blocks.2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %409 = %408.0;
  %410 = nn.leaky_relu(%409, alpha=0.1f) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %411 = nn.conv2d(%410, %model.model.backbone.pan.layer_blocks.2.cv4.conv.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %412 = nn.batch_norm(%411, %model.model.backbone.pan.layer_blocks.2.cv4.bn.weight, %model.model.backbone.pan.layer_blocks.2.cv4.bn.bias, %model.model.backbone.pan.layer_blocks.2.cv4.bn.running_mean, %model.model.backbone.pan.layer_blocks.2.cv4.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %413 = %412.0;
  %414 = add(%413, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %415 = clip(%414, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %416 = multiply(%413, %415) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %417 = divide(%416, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %418 = nn.conv2d(%417, %model.model.backbone.pan.layer_blocks.3.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %419 = nn.batch_norm(%418, %model.model.backbone.pan.layer_blocks.3.bn.weight, %model.model.backbone.pan.layer_blocks.3.bn.bias, %model.model.backbone.pan.layer_blocks.3.bn.running_mean, %model.model.backbone.pan.layer_blocks.3.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 10, 10), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %420 = %419.0;
  %421 = add(%420, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %422 = clip(%421, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %423 = multiply(%420, %422) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %424 = divide(%423, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %425 = (%424, %288);
  %426 = concatenate(%425, axis=1) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %427 = nn.conv2d(%426, %model.model.backbone.pan.layer_blocks.4.cv1.conv.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %428 = nn.batch_norm(%427, %model.model.backbone.pan.layer_blocks.4.cv1.bn.weight, %model.model.backbone.pan.layer_blocks.4.cv1.bn.bias, %model.model.backbone.pan.layer_blocks.4.cv1.bn.running_mean, %model.model.backbone.pan.layer_blocks.4.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 10, 10), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %429 = %428.0;
  %430 = add(%429, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %431 = clip(%430, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %432 = multiply(%429, %431) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %433 = divide(%432, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %434 = nn.conv2d(%433, %model.model.backbone.pan.layer_blocks.4.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %435 = nn.batch_norm(%434, %model.model.backbone.pan.layer_blocks.4.m.0.cv1.bn.weight, %model.model.backbone.pan.layer_blocks.4.m.0.cv1.bn.bias, %model.model.backbone.pan.layer_blocks.4.m.0.cv1.bn.running_mean, %model.model.backbone.pan.layer_blocks.4.m.0.cv1.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 10, 10), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %436 = %435.0;
  %437 = add(%436, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %438 = clip(%437, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %439 = multiply(%436, %438) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %440 = divide(%439, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %441 = nn.conv2d(%440, %model.model.backbone.pan.layer_blocks.4.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %442 = nn.batch_norm(%441, %model.model.backbone.pan.layer_blocks.4.m.0.cv2.bn.weight, %model.model.backbone.pan.layer_blocks.4.m.0.cv2.bn.bias, %model.model.backbone.pan.layer_blocks.4.m.0.cv2.bn.running_mean, %model.model.backbone.pan.layer_blocks.4.m.0.cv2.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 256, 10, 10), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %443 = %442.0;
  %444 = add(%443, 3f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %445 = clip(%444, a_min=0f, a_max=6f) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %446 = multiply(%443, %445) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %447 = divide(%446, 6f /* ty=float32 */) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %448 = nn.conv2d(%447, %model.model.backbone.pan.layer_blocks.4.cv3.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %449 = nn.conv2d(%426, %model.model.backbone.pan.layer_blocks.4.cv2.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 10, 10), float32] */;
  %450 = (%448, %449);
  %451 = concatenate(%450, axis=1) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %452 = nn.batch_norm(%451, %model.model.backbone.pan.layer_blocks.4.bn.weight, %model.model.backbone.pan.layer_blocks.4.bn.bias, %model.model.backbone.pan.layer_blocks.4.bn.running_mean, %model.model.backbone.pan.layer_blocks.4.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 512, 10, 10), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %453 = %452.0;
  %454 = nn.leaky_relu(%453, alpha=0.1f) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %455 = nn.conv2d(%454, %model.model.backbone.pan.layer_blocks.4.cv4.conv.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %456 = nn.batch_norm(%455, %model.model.backbone.pan.layer_blocks.4.cv4.bn.weight, %model.model.backbone.pan.layer_blocks.4.cv4.bn.bias, %model.model.backbone.pan.layer_blocks.4.cv4.bn.running_mean, %model.model.backbone.pan.layer_blocks.4.cv4.bn.running_var, epsilon=0.001f) /* ty=(Tensor[(1, 512, 10, 10), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %457 = %456.0;
  %458 = add(%457, 3f /* ty=float32 */) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %459 = clip(%458, a_min=0f, a_max=6f) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %460 = multiply(%457, %459) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %461 = divide(%460, 6f /* ty=float32 */) /* ty=Tensor[(1, 512, 10, 10), float32] */;
  %462 = (%373, %417, %461, %373, %373, %373, %373, %417, %417, %417, %417);
  %463 = %462.0;
  %464 = %462.1;
  %465 = %462.2;
  %466 = %462.3;
  %467 = %462.4;
  %468 = %462.5;
  %469 = %462.6;
  %470 = %462.7;
  %471 = %462.8;
  %472 = %462.9;
  %473 = %462.10;
  %474 = (%463, %464, %465, %466, %467, %468, %469, %470, %471, %472, %473);
  %475 = %474.0;
  %476 = nn.conv2d(%475, %model.model.head.head.0.weight, padding=[0, 0, 0, 0], channels=255, kernel_size=[1, 1]) /* ty=Tensor[(1, 255, 40, 40), float32] */;
  %477 = nn.bias_add(%476, %model.model.head.head.0.bias) /* ty=Tensor[(1, 255, 40, 40), float32] */;
  %478 = reshape(%477, newshape=[1, 3, -1, 40, 40]) /* ty=Tensor[(1, 3, 85, 40, 40), float32] */;
  %479 = %474.1;
  %480 = nn.conv2d(%479, %model.model.head.head.1.weight, padding=[0, 0, 0, 0], channels=255, kernel_size=[1, 1]) /* ty=Tensor[(1, 255, 20, 20), float32] */;
  %481 = nn.bias_add(%480, %model.model.head.head.1.bias) /* ty=Tensor[(1, 255, 20, 20), float32] */;
  %482 = reshape(%481, newshape=[1, 3, -1, 20, 20]) /* ty=Tensor[(1, 3, 85, 20, 20), float32] */;
  %483 = %474.2;
  %484 = nn.conv2d(%483, %model.model.head.head.2.weight, padding=[0, 0, 0, 0], channels=255, kernel_size=[1, 1]) /* ty=Tensor[(1, 255, 10, 10), float32] */;
  %485 = nn.bias_add(%484, %model.model.head.head.2.bias) /* ty=Tensor[(1, 255, 10, 10), float32] */;
  %486 = reshape(%485, newshape=[1, 3, -1, 10, 10]) /* ty=Tensor[(1, 3, 85, 10, 10), float32] */;
  %487 = transpose(%478, axes=[0, 1, 3, 4, 2]) /* ty=Tensor[(1, 3, 40, 40, 85), float32] */;
  %488 = transpose(%482, axes=[0, 1, 3, 4, 2]) /* ty=Tensor[(1, 3, 20, 20, 85), float32] */;
  %489 = transpose(%486, axes=[0, 1, 3, 4, 2]) /* ty=Tensor[(1, 3, 10, 10, 85), float32] */;
  %490 = (%487, %488, %489);
  %491 = %490.0;
  %492 = %490.1;
  %493 = %490.2;
  %494 = reshape(%491, newshape=[1, -1, 85]) /* ty=Tensor[(1, 4800, 85), float32] */;
  %495 = reshape(%492, newshape=[1, -1, 85]) /* ty=Tensor[(1, 1200, 85), float32] */;
  %496 = reshape(%493, newshape=[1, -1, 85]) /* ty=Tensor[(1, 300, 85), float32] */;
  %497 = (%494, %495, %496);
  %498 = concatenate(%497, axis=1) /* ty=Tensor[(1, 6300, 85), float32] */;
  %499 = take(%498, 0 /* ty=int32 */, axis=0, mode="wrap") /* ty=Tensor[(6300, 85), float32] */;
  %500 = sigmoid(%499) /* ty=Tensor[(6300, 85), float32] */;
  %501 = strided_slice(%500, begin=[0, 0], end=[6300, 4], strides=[1, 1]) /* ty=Tensor[(6300, 4), float32] */;
  %502 = strided_slice(%501, begin=[0, 0], end=[6300, 2], strides=[1, 1]) /* ty=Tensor[(6300, 2), float32] */;
  %503 = arange(0f /* ty=float32 */, 40f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][0], stop=meta[relay.Constant][1], step=meta[relay.Constant][2], dtype="float32") /* ty=Tensor[(40), float32] */;
  %504 = arange(0f /* ty=float32 */, 40f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][3], stop=meta[relay.Constant][4], step=meta[relay.Constant][5], dtype="float32") /* ty=Tensor[(40), float32] */;
  %505 = (%503, %504);
  %506 = meshgrid(%505) /* ty=(Tensor[(40, 40), float32], Tensor[(40, 40), float32]) */;
  %507 = %506.1;
  %508 = %506.0;
  %509 = (%507, %508);
  %510 = stack(%509, axis=2) /* ty=Tensor[(40, 40, 2), float32] */;
  %511 = reshape(%510, newshape=[1, 40, 40, 2]) /* ty=Tensor[(1, 40, 40, 2), float32] */;
  %512 = tile(%511, reps=[3, 1, 1, 1]) /* ty=Tensor[(3, 40, 40, 2), float32] */;
  %513 = subtract(%512, 0.5f /* ty=float32 */) /* ty=Tensor[(3, 40, 40, 2), float32] */;
  %514 = arange(0f /* ty=float32 */, 20f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][6], stop=meta[relay.Constant][7], step=meta[relay.Constant][8], dtype="float32") /* ty=Tensor[(20), float32] */;
  %515 = arange(0f /* ty=float32 */, 20f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][9], stop=meta[relay.Constant][10], step=meta[relay.Constant][11], dtype="float32") /* ty=Tensor[(20), float32] */;
  %516 = (%514, %515);
  %517 = meshgrid(%516) /* ty=(Tensor[(20, 20), float32], Tensor[(20, 20), float32]) */;
  %518 = %517.1;
  %519 = %517.0;
  %520 = (%518, %519);
  %521 = stack(%520, axis=2) /* ty=Tensor[(20, 20, 2), float32] */;
  %522 = reshape(%521, newshape=[1, 20, 20, 2]) /* ty=Tensor[(1, 20, 20, 2), float32] */;
  %523 = tile(%522, reps=[3, 1, 1, 1]) /* ty=Tensor[(3, 20, 20, 2), float32] */;
  %524 = subtract(%523, 0.5f /* ty=float32 */) /* ty=Tensor[(3, 20, 20, 2), float32] */;
  %525 = arange(0f /* ty=float32 */, 10f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][12], stop=meta[relay.Constant][13], step=meta[relay.Constant][14], dtype="float32") /* ty=Tensor[(10), float32] */;
  %526 = arange(0f /* ty=float32 */, 10f /* ty=float32 */, 1f /* ty=float32 */, start=meta[relay.Constant][15], stop=meta[relay.Constant][16], step=meta[relay.Constant][17], dtype="float32") /* ty=Tensor[(10), float32] */;
  %527 = (%525, %526);
  %528 = meshgrid(%527) /* ty=(Tensor[(10, 10), float32], Tensor[(10, 10), float32]) */;
  %529 = %528.1;
  %530 = %528.0;
  %531 = (%529, %530);
  %532 = stack(%531, axis=2) /* ty=Tensor[(10, 10, 2), float32] */;
  %533 = reshape(%532, newshape=[1, 10, 10, 2]) /* ty=Tensor[(1, 10, 10, 2), float32] */;
  %534 = tile(%533, reps=[3, 1, 1, 1]) /* ty=Tensor[(3, 10, 10, 2), float32] */;
  %535 = subtract(%534, 0.5f /* ty=float32 */) /* ty=Tensor[(3, 10, 10, 2), float32] */;
  %536 = reshape(%513, newshape=[-1, 2]) /* ty=Tensor[(4800, 2), float32] */;
  %537 = reshape(%524, newshape=[-1, 2]) /* ty=Tensor[(1200, 2), float32] */;
  %538 = reshape(%535, newshape=[-1, 2]) /* ty=Tensor[(300, 2), float32] */;
  %539 = (%536, %537, %538);
  %540 = reshape(meta[relay.Constant][18] /* ty=Tensor[(1), float32] */, newshape=[-1, 1]) /* ty=Tensor[(1, 1), float32] */;
  %541 = tile(%540, reps=[1, 4800]) /* ty=Tensor[(1, 4800), float32] */;
  %542 = reshape(meta[relay.Constant][19] /* ty=Tensor[(1), float32] */, newshape=[-1, 1]) /* ty=Tensor[(1, 1), float32] */;
  %543 = tile(%542, reps=[1, 1200]) /* ty=Tensor[(1, 1200), float32] */;
  %544 = reshape(meta[relay.Constant][20] /* ty=Tensor[(1), float32] */, newshape=[-1, 1]) /* ty=Tensor[(1, 1), float32] */;
  %545 = tile(%544, reps=[1, 300]) /* ty=Tensor[(1, 300), float32] */;
  %546 = reshape(%541, newshape=[-1, 1]) /* ty=Tensor[(4800, 1), float32] */;
  %547 = reshape(%543, newshape=[-1, 1]) /* ty=Tensor[(1200, 1), float32] */;
  %548 = reshape(%545, newshape=[-1, 1]) /* ty=Tensor[(300, 1), float32] */;
  %549 = (%546, %547, %548);
  %550 = reshape(meta[relay.Constant][21] /* ty=Tensor[(6), float32] */, newshape=[-1, 2]) /* ty=Tensor[(3, 2), float32] */;
  %551 = tile(%550, reps=[1, 1600]) /* ty=Tensor[(3, 3200), float32] */;
  %552 = reshape(meta[relay.Constant][22] /* ty=Tensor[(6), float32] */, newshape=[-1, 2]) /* ty=Tensor[(3, 2), float32] */;
  %553 = tile(%552, reps=[1, 400]) /* ty=Tensor[(3, 800), float32] */;
  %554 = reshape(meta[relay.Constant][23] /* ty=Tensor[(6), float32] */, newshape=[-1, 2]) /* ty=Tensor[(3, 2), float32] */;
  %555 = tile(%554, reps=[1, 100]) /* ty=Tensor[(3, 200), float32] */;
  %556 = reshape(%551, newshape=[-1, 2]) /* ty=Tensor[(4800, 2), float32] */;
  %557 = reshape(%553, newshape=[-1, 2]) /* ty=Tensor[(1200, 2), float32] */;
  %558 = reshape(%555, newshape=[-1, 2]) /* ty=Tensor[(300, 2), float32] */;
  %559 = (%556, %557, %558);
  %560 = concatenate(%539) /* ty=Tensor[(6300, 2), float32] */;
  %561 = concatenate(%549) /* ty=Tensor[(6300, 1), float32] */;
  %562 = concatenate(%559) /* ty=Tensor[(6300, 2), float32] */;
  %563 = (%560, %561, %562);
  %564 = multiply(%502, 2f /* ty=float32 */) /* ty=Tensor[(6300, 2), float32] */;
  %565 = %563.0;
  %566 = add(%564, %565) /* ty=Tensor[(6300, 2), float32] */;
  %567 = %563.1;
  %568 = strided_slice(%501, begin=[0, 2], end=[6300, 4], strides=[1, 1]) /* ty=Tensor[(6300, 2), float32] */;
  %569 = multiply(%568, 2f /* ty=float32 */) /* ty=Tensor[(6300, 2), float32] */;
  %570 = power(%569, 2f /* ty=float32 */) /* ty=Tensor[(6300, 2), float32] */;
  %571 = %563.2;
  %572 = multiply(%566, %567) /* ty=Tensor[(6300, 2), float32] */;
  %573 = multiply(%570, %571) /* ty=Tensor[(6300, 2), float32] */;
  %574 = (%572, %573);
  %575 = concatenate(%574, axis=1) /* ty=Tensor[(6300, 4), float32] */;
  %576 = split(%575, indices_or_sections=4, axis=-1) /* ty=(Tensor[(6300, 1), float32], Tensor[(6300, 1), float32], Tensor[(6300, 1), float32], Tensor[(6300, 1), float32]) */;
  %577 = %576.0;
  %578 = %576.1;
  %579 = %576.2;
  %580 = %576.3;
  %581 = squeeze(%577, axis=[-1]) /* ty=Tensor[(6300), float32] */;
  %582 = squeeze(%578, axis=[-1]) /* ty=Tensor[(6300), float32] */;
  %583 = squeeze(%579, axis=[-1]) /* ty=Tensor[(6300), float32] */;
  %584 = squeeze(%580, axis=[-1]) /* ty=Tensor[(6300), float32] */;
  %585 = (%581, %582, %583, %584);
  %586 = %585.2;
  %587 = %585.0;
  %588 = multiply(%586, 0.5f /* ty=float32 */) /* ty=Tensor[(6300), float32] */;
  %589 = %585.3;
  %590 = %585.1;
  %591 = multiply(%589, 0.5f /* ty=float32 */) /* ty=Tensor[(6300), float32] */;
  %592 = multiply(%586, 0.5f /* ty=float32 */) /* ty=Tensor[(6300), float32] */;
  %593 = multiply(%589, 0.5f /* ty=float32 */) /* ty=Tensor[(6300), float32] */;
  %594 = subtract(%587, %588) /* ty=Tensor[(6300), float32] */;
  %595 = subtract(%590, %591) /* ty=Tensor[(6300), float32] */;
  %596 = add(%587, %592) /* ty=Tensor[(6300), float32] */;
  %597 = add(%590, %593) /* ty=Tensor[(6300), float32] */;
  %598 = (%594, %595, %596, %597);
  %599 = strided_slice(%500, begin=[0, 5], end=[6300, 85], strides=[1, 1]) /* ty=Tensor[(6300, 80), float32] */;
  %600 = strided_slice(%500, begin=[0, 4], end=[6300, 5], strides=[1, 1]) /* ty=Tensor[(6300, 1), float32] */;
  %601 = multiply(%599, %600) /* ty=Tensor[(6300, 80), float32] */;
  %602 = greater(%601, 0.05f /* ty=float32 */) /* ty=Tensor[(6300, 80), bool] */;
  %603 = argwhere(%602) /* ty=Tensor[(?, 2), int32] */;
  %604 = split(%603, indices_or_sections=2, axis=1) /* ty=(Tensor[(?, 1), int32], Tensor[(?, 1), int32]) */;
  %605 = %604.0;
  %606 = %604.1;
  %607 = squeeze(%605, axis=[1]) /* ty=Tensor[(?), int32] */;
  %608 = squeeze(%606, axis=[1]) /* ty=Tensor[(?), int32] */;
  %609 = (%607, %608);
  %610 = %609.0;
  %611 = stack(%598, axis=-1) /* ty=Tensor[(6300, 4), float32] */;
  %612 = cast(%610, dtype="int64") /* ty=Tensor[(?), int64] */;
  %613 = (%611, %612);
  %614 = adv_index(%613) /* ty=Tensor[(?, 4), float32] */;
  %615 = ndarray_size(%614, dtype="int32") /* ty=int32 */;
  %616 = equal(%615, 0 /* ty=int32 */) /* ty=bool */;
  %656 = if (%616) {
    zeros(shape=[0], dtype="int64") /* ty=Tensor[(?), int64] */
  } else {
    %617 = %609.1;
    %618 = cast(%617, dtype="int64") /* ty=Tensor[(?), int64] */;
    %619 = (%601, %612, %618);
    %620 = adv_index(%619) /* ty=Tensor[(?), float32] */;
    %621 = min(%620) /* ty=float32 */;
    %622 = subtract(%620, %621) /* ty=Tensor[(?), float32] */;
    %623 = add(%622, 1f /* ty=float32 */) /* ty=Tensor[(?), float32] */;
    %624 = max(%614) /* ty=float32 */;
    %625 = cast(%618, dtype="float32") /* ty=Tensor[(?), float32] */;
    %626 = add(%624, 1f /* ty=float32 */) /* ty=float32 */;
    %627 = multiply(%625, %626) /* ty=Tensor[(?), float32] */;
    %628 = expand_dims(%627, axis=1) /* ty=Tensor[(?, 1), float32] */;
    %629 = expand_dims(%623, axis=-1) /* ty=Tensor[(?, 1), float32] */;
    %630 = add(%614, %628) /* ty=Tensor[(?, 4), float32] */;
    %631 = (%629, %630);
    %632 = concatenate(%631, axis=-1) /* ty=Tensor[(?, 5), float32] */;
    %633 = shape_of(%623, dtype="int32") /* ty=Tensor[(1), int32] */;
    %634 = squeeze(%633) /* ty=int32 */;
    %635 = arange(0 /* ty=int32 */, %634, 1 /* ty=int32 */, start=meta[relay.Constant][24], stop=meta[relay.Call][0], step=meta[relay.Constant][25], dtype="int32") /* ty=Tensor[(?), int32] */;
    %636 = expand_dims(%632, axis=0) /* ty=Tensor[(1, ?, 5), float32] */;
    %637 = expand_dims(%635, axis=0) /* ty=Tensor[(1, ?), int32] */;
    %638 = vision.non_max_suppression(%636, %633, %637, -1 /* ty=int32 */, 0.5f /* ty=float32 */, meta[relay.attrs.NonMaximumSuppressionAttrs][0]) /* ty=(Tensor[(1, ?), int32], Tensor[(1, 1), int32]) */;
    %639 = %638.0;
    %640 = cast_like(0 /* ty=int32 */, meta[relay.Constant][26] /* ty=Tensor[(1), int32] */) /* ty=int32 */;
    %641 = squeeze(%639, axis=[0]) /* ty=Tensor[(?), int32] */;
    %642 = shape_of(%641, dtype="int32") /* ty=Tensor[(1), int32] */;
    %643 = cast_like(%642, meta[relay.Constant][26] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %644 = less(meta[relay.Constant][26] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */, %640) /* ty=Tensor[(1), bool] */;
    %645 = add(meta[relay.Constant][26] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */, %643) /* ty=Tensor[(1), int32] */;
    %646 = shape_of(%641, dtype="int32") /* ty=Tensor[(1), int32] */;
    %647 = where(%644, %645, meta[relay.Constant][26] /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */ /* ty=Tensor[(1), int32] */) /* ty=Tensor[(1), int32] */;
    %648 = cast_like(%646, %647) /* ty=Tensor[(1), int32] */;
    %649 = shape_of(%641, dtype="int32") /* ty=Tensor[(1), int32] */;
    %650 = greater_equal(%647, %648) /* ty=Tensor[(1), bool] */;
    %651 = cast_like(%649, %647) /* ty=Tensor[(1), int32] */;
    %652 = %638.1;
    %653 = where(%650, %651, %647) /* ty=Tensor[(1), int32] */;
    %654 = squeeze(%652, axis=[1]) /* ty=Tensor[(1), int32] */;
    %655 = dyn.strided_slice(%641, %653, %654, meta[relay.Constant][27] /* ty=Tensor[(1), int32] */, begin=None, end=None, strides=None, slice_mode="size") /* ty=Tensor[(?), int32] */;
    cast(%655, dtype="int64") /* ty=Tensor[(?), int64] */
  };
  %657 = strided_slice(%656, begin=[0], end=[300], strides=[1]) /* ty=Tensor[(?), int64] */;
  %658 = (%614, %657);
  %659 = (%620, %657);
  %660 = (%618, %657);
  %661 = adv_index(%658) /* ty=Tensor[(?, 4), float32] */;
  %662 = adv_index(%659) /* ty=Tensor[(?), float32] */;
  %663 = adv_index(%660) /* ty=Tensor[(?), int64] */;
  %664 = (%661, %662, %663);
  %665 = %664.0;
  %666 = %664.1;
  %667 = %664.2;
  %668 = (%665, %666, %667);
  %669 = %668.0;
  %670 = split(%669, indices_or_sections=4, axis=1) /* ty=(Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32], Tensor[(?, 1), float32]) */;
  %671 = %670.0;
  %672 = %670.1;
  %673 = %670.2;
  %674 = %670.3;
  %675 = squeeze(%671, axis=[1]) /* ty=Tensor[(?), float32] */;
  %676 = squeeze(%672, axis=[1]) /* ty=Tensor[(?), float32] */;
  %677 = squeeze(%673, axis=[1]) /* ty=Tensor[(?), float32] */;
  %678 = squeeze(%674, axis=[1]) /* ty=Tensor[(?), float32] */;
  %679 = (%675, %676, %677, %678);
  %680 = %11.2;
  %681 = cast(416 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %682 = cast(%680, dtype="float32") /* ty=float32 */;
  %683 = %679.0;
  %684 = divide(%681, %682) /* ty=float32 */;
  %685 = %11.1;
  %686 = cast(416 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %687 = cast(%685, dtype="float32") /* ty=float32 */;
  %688 = %679.1;
  %689 = divide(%686, %687) /* ty=float32 */;
  %690 = %679.2;
  %691 = %679.3;
  %692 = multiply(%683, %684) /* ty=Tensor[(?), float32] */;
  %693 = multiply(%688, %689) /* ty=Tensor[(?), float32] */;
  %694 = multiply(%690, %684) /* ty=Tensor[(?), float32] */;
  %695 = multiply(%691, %689) /* ty=Tensor[(?), float32] */;
  %696 = (%692, %693, %694, %695);
  %697 = stack(%696, axis=1) /* ty=Tensor[(?, 4), float32] */;
  %698 = %668.1;
  %699 = %668.2;
  %700 = (%697, %698, %699);
  %701 = %700.0;
  %702 = %700.1;
  %703 = %700.2;
  (%701, %702, %703)
}
